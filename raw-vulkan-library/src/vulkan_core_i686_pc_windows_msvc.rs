/* automatically generated by rust-bindgen 0.71.1 */

#![allow(non_snake_case)]
#![allow(non_camel_case_types)]
#![allow(non_upper_case_globals)]
#![allow(dead_code)]
#![allow(unused_imports)]
#![allow(clippy::useless_transmute)]
#![allow(clippy::too_many_arguments)]
#![allow(clippy::ptr_offset_with_cast)]

pub type VkBool32 = u32;
pub type VkDeviceAddress = u64;
pub type VkDeviceSize = u64;
pub type VkFlags = u32;
pub type VkSampleMask = u32;
pub type VkBuffer = u64;
pub type VkImage = u64;
pub type VkInstance = *mut VkInstance_T;
pub type VkPhysicalDevice = *mut VkPhysicalDevice_T;
pub type VkDevice = *mut VkDevice_T;
pub type VkQueue = *mut VkQueue_T;
pub type VkSemaphore = u64;
pub type VkCommandBuffer = *mut VkCommandBuffer_T;
pub type VkFence = u64;
pub type VkDeviceMemory = u64;
pub type VkEvent = u64;
pub type VkQueryPool = u64;
pub type VkBufferView = u64;
pub type VkImageView = u64;
pub type VkShaderModule = u64;
pub type VkPipelineCache = u64;
pub type VkPipelineLayout = u64;
pub type VkPipeline = u64;
pub type VkRenderPass = u64;
pub type VkDescriptorSetLayout = u64;
pub type VkSampler = u64;
pub type VkDescriptorSet = u64;
pub type VkDescriptorPool = u64;
pub type VkFramebuffer = u64;
pub type VkCommandPool = u64;
pub type VkResult = ::core::ffi::c_int;
pub type VkStructureType = ::core::ffi::c_int;
pub type VkPipelineCacheHeaderVersion = ::core::ffi::c_int;
pub type VkImageLayout = ::core::ffi::c_int;
pub type VkObjectType = ::core::ffi::c_int;
pub type VkVendorId = ::core::ffi::c_int;
pub type VkSystemAllocationScope = ::core::ffi::c_int;
pub type VkInternalAllocationType = ::core::ffi::c_int;
pub type VkFormat = ::core::ffi::c_int;
pub type VkImageTiling = ::core::ffi::c_int;
pub type VkImageType = ::core::ffi::c_int;
pub type VkPhysicalDeviceType = ::core::ffi::c_int;
pub type VkQueryType = ::core::ffi::c_int;
pub type VkSharingMode = ::core::ffi::c_int;
pub type VkComponentSwizzle = ::core::ffi::c_int;
pub type VkImageViewType = ::core::ffi::c_int;
pub type VkBlendFactor = ::core::ffi::c_int;
pub type VkBlendOp = ::core::ffi::c_int;
pub type VkCompareOp = ::core::ffi::c_int;
pub type VkDynamicState = ::core::ffi::c_int;
pub type VkFrontFace = ::core::ffi::c_int;
pub type VkVertexInputRate = ::core::ffi::c_int;
pub type VkPrimitiveTopology = ::core::ffi::c_int;
pub type VkPolygonMode = ::core::ffi::c_int;
pub type VkStencilOp = ::core::ffi::c_int;
pub type VkLogicOp = ::core::ffi::c_int;
pub type VkBorderColor = ::core::ffi::c_int;
pub type VkFilter = ::core::ffi::c_int;
pub type VkSamplerAddressMode = ::core::ffi::c_int;
pub type VkSamplerMipmapMode = ::core::ffi::c_int;
pub type VkDescriptorType = ::core::ffi::c_int;
pub type VkAttachmentLoadOp = ::core::ffi::c_int;
pub type VkAttachmentStoreOp = ::core::ffi::c_int;
pub type VkPipelineBindPoint = ::core::ffi::c_int;
pub type VkCommandBufferLevel = ::core::ffi::c_int;
pub type VkIndexType = ::core::ffi::c_int;
pub type VkSubpassContents = ::core::ffi::c_int;
pub type VkAccessFlagBits = ::core::ffi::c_int;
pub type VkAccessFlags = VkFlags;
pub type VkImageAspectFlagBits = ::core::ffi::c_int;
pub type VkImageAspectFlags = VkFlags;
pub type VkFormatFeatureFlagBits = ::core::ffi::c_int;
pub type VkFormatFeatureFlags = VkFlags;
pub type VkImageCreateFlagBits = ::core::ffi::c_int;
pub type VkImageCreateFlags = VkFlags;
pub type VkSampleCountFlagBits = ::core::ffi::c_int;
pub type VkSampleCountFlags = VkFlags;
pub type VkImageUsageFlagBits = ::core::ffi::c_int;
pub type VkImageUsageFlags = VkFlags;
pub type VkInstanceCreateFlagBits = ::core::ffi::c_int;
pub type VkInstanceCreateFlags = VkFlags;
pub type VkMemoryHeapFlagBits = ::core::ffi::c_int;
pub type VkMemoryHeapFlags = VkFlags;
pub type VkMemoryPropertyFlagBits = ::core::ffi::c_int;
pub type VkMemoryPropertyFlags = VkFlags;
pub type VkQueueFlagBits = ::core::ffi::c_int;
pub type VkQueueFlags = VkFlags;
pub type VkDeviceCreateFlags = VkFlags;
pub type VkDeviceQueueCreateFlagBits = ::core::ffi::c_int;
pub type VkDeviceQueueCreateFlags = VkFlags;
pub type VkPipelineStageFlagBits = ::core::ffi::c_int;
pub type VkPipelineStageFlags = VkFlags;
pub type VkMemoryMapFlagBits = ::core::ffi::c_int;
pub type VkMemoryMapFlags = VkFlags;
pub type VkSparseMemoryBindFlagBits = ::core::ffi::c_int;
pub type VkSparseMemoryBindFlags = VkFlags;
pub type VkSparseImageFormatFlagBits = ::core::ffi::c_int;
pub type VkSparseImageFormatFlags = VkFlags;
pub type VkFenceCreateFlagBits = ::core::ffi::c_int;
pub type VkFenceCreateFlags = VkFlags;
pub type VkSemaphoreCreateFlags = VkFlags;
pub type VkEventCreateFlagBits = ::core::ffi::c_int;
pub type VkEventCreateFlags = VkFlags;
pub type VkQueryPipelineStatisticFlagBits = ::core::ffi::c_int;
pub type VkQueryPipelineStatisticFlags = VkFlags;
pub type VkQueryPoolCreateFlags = VkFlags;
pub type VkQueryResultFlagBits = ::core::ffi::c_int;
pub type VkQueryResultFlags = VkFlags;
pub type VkBufferCreateFlagBits = ::core::ffi::c_int;
pub type VkBufferCreateFlags = VkFlags;
pub type VkBufferUsageFlagBits = ::core::ffi::c_int;
pub type VkBufferUsageFlags = VkFlags;
pub type VkBufferViewCreateFlags = VkFlags;
pub type VkImageViewCreateFlagBits = ::core::ffi::c_int;
pub type VkImageViewCreateFlags = VkFlags;
pub type VkShaderModuleCreateFlags = VkFlags;
pub type VkPipelineCacheCreateFlagBits = ::core::ffi::c_int;
pub type VkPipelineCacheCreateFlags = VkFlags;
pub type VkColorComponentFlagBits = ::core::ffi::c_int;
pub type VkColorComponentFlags = VkFlags;
pub type VkPipelineCreateFlagBits = ::core::ffi::c_int;
pub type VkPipelineCreateFlags = VkFlags;
pub type VkPipelineShaderStageCreateFlagBits = ::core::ffi::c_int;
pub type VkPipelineShaderStageCreateFlags = VkFlags;
pub type VkShaderStageFlagBits = ::core::ffi::c_int;
pub type VkCullModeFlagBits = ::core::ffi::c_int;
pub type VkCullModeFlags = VkFlags;
pub type VkPipelineVertexInputStateCreateFlags = VkFlags;
pub type VkPipelineInputAssemblyStateCreateFlags = VkFlags;
pub type VkPipelineTessellationStateCreateFlags = VkFlags;
pub type VkPipelineViewportStateCreateFlags = VkFlags;
pub type VkPipelineRasterizationStateCreateFlags = VkFlags;
pub type VkPipelineMultisampleStateCreateFlags = VkFlags;
pub type VkPipelineDepthStencilStateCreateFlagBits = ::core::ffi::c_int;
pub type VkPipelineDepthStencilStateCreateFlags = VkFlags;
pub type VkPipelineColorBlendStateCreateFlagBits = ::core::ffi::c_int;
pub type VkPipelineColorBlendStateCreateFlags = VkFlags;
pub type VkPipelineDynamicStateCreateFlags = VkFlags;
pub type VkPipelineLayoutCreateFlagBits = ::core::ffi::c_int;
pub type VkPipelineLayoutCreateFlags = VkFlags;
pub type VkShaderStageFlags = VkFlags;
pub type VkSamplerCreateFlagBits = ::core::ffi::c_int;
pub type VkSamplerCreateFlags = VkFlags;
pub type VkDescriptorPoolCreateFlagBits = ::core::ffi::c_int;
pub type VkDescriptorPoolCreateFlags = VkFlags;
pub type VkDescriptorPoolResetFlags = VkFlags;
pub type VkDescriptorSetLayoutCreateFlagBits = ::core::ffi::c_int;
pub type VkDescriptorSetLayoutCreateFlags = VkFlags;
pub type VkAttachmentDescriptionFlagBits = ::core::ffi::c_int;
pub type VkAttachmentDescriptionFlags = VkFlags;
pub type VkDependencyFlagBits = ::core::ffi::c_int;
pub type VkDependencyFlags = VkFlags;
pub type VkFramebufferCreateFlagBits = ::core::ffi::c_int;
pub type VkFramebufferCreateFlags = VkFlags;
pub type VkRenderPassCreateFlagBits = ::core::ffi::c_int;
pub type VkRenderPassCreateFlags = VkFlags;
pub type VkSubpassDescriptionFlagBits = ::core::ffi::c_int;
pub type VkSubpassDescriptionFlags = VkFlags;
pub type VkCommandPoolCreateFlagBits = ::core::ffi::c_int;
pub type VkCommandPoolCreateFlags = VkFlags;
pub type VkCommandPoolResetFlagBits = ::core::ffi::c_int;
pub type VkCommandPoolResetFlags = VkFlags;
pub type VkCommandBufferUsageFlagBits = ::core::ffi::c_int;
pub type VkCommandBufferUsageFlags = VkFlags;
pub type VkQueryControlFlagBits = ::core::ffi::c_int;
pub type VkQueryControlFlags = VkFlags;
pub type VkCommandBufferResetFlagBits = ::core::ffi::c_int;
pub type VkCommandBufferResetFlags = VkFlags;
pub type VkStencilFaceFlagBits = ::core::ffi::c_int;
pub type VkStencilFaceFlags = VkFlags;
pub type PFN_vkAllocationFunction = ::core::option::Option<
    unsafe extern "stdcall" fn(
        pUserData: *mut ::core::ffi::c_void,
        size: usize,
        alignment: usize,
        allocationScope: VkSystemAllocationScope,
    ) -> *mut ::core::ffi::c_void,
>;
pub type PFN_vkFreeFunction = ::core::option::Option<
    unsafe extern "stdcall" fn(
        pUserData: *mut ::core::ffi::c_void,
        pMemory: *mut ::core::ffi::c_void,
    ),
>;
pub type PFN_vkInternalAllocationNotification = ::core::option::Option<
    unsafe extern "stdcall" fn(
        pUserData: *mut ::core::ffi::c_void,
        size: usize,
        allocationType: VkInternalAllocationType,
        allocationScope: VkSystemAllocationScope,
    ),
>;
pub type PFN_vkInternalFreeNotification = ::core::option::Option<
    unsafe extern "stdcall" fn(
        pUserData: *mut ::core::ffi::c_void,
        size: usize,
        allocationType: VkInternalAllocationType,
        allocationScope: VkSystemAllocationScope,
    ),
>;
pub type PFN_vkReallocationFunction = ::core::option::Option<
    unsafe extern "stdcall" fn(
        pUserData: *mut ::core::ffi::c_void,
        pOriginal: *mut ::core::ffi::c_void,
        size: usize,
        alignment: usize,
        allocationScope: VkSystemAllocationScope,
    ) -> *mut ::core::ffi::c_void,
>;
pub type PFN_vkVoidFunction = ::core::option::Option<unsafe extern "stdcall" fn()>;
pub type PFN_vkCreateInstance = ::core::option::Option<
    unsafe extern "stdcall" fn(
        pCreateInfo: *const VkInstanceCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pInstance: *mut VkInstance,
    ) -> VkResult,
>;
pub type PFN_vkDestroyInstance = ::core::option::Option<
    unsafe extern "stdcall" fn(instance: VkInstance, pAllocator: *const VkAllocationCallbacks),
>;
pub type PFN_vkEnumeratePhysicalDevices = ::core::option::Option<
    unsafe extern "stdcall" fn(
        instance: VkInstance,
        pPhysicalDeviceCount: *mut u32,
        pPhysicalDevices: *mut VkPhysicalDevice,
    ) -> VkResult,
>;
pub type PFN_vkGetPhysicalDeviceFeatures = ::core::option::Option<
    unsafe extern "stdcall" fn(
        physicalDevice: VkPhysicalDevice,
        pFeatures: *mut VkPhysicalDeviceFeatures,
    ),
>;
pub type PFN_vkGetPhysicalDeviceFormatProperties = ::core::option::Option<
    unsafe extern "stdcall" fn(
        physicalDevice: VkPhysicalDevice,
        format: VkFormat,
        pFormatProperties: *mut VkFormatProperties,
    ),
>;
pub type PFN_vkGetPhysicalDeviceImageFormatProperties = ::core::option::Option<
    unsafe extern "stdcall" fn(
        physicalDevice: VkPhysicalDevice,
        format: VkFormat,
        type_: VkImageType,
        tiling: VkImageTiling,
        usage: VkImageUsageFlags,
        flags: VkImageCreateFlags,
        pImageFormatProperties: *mut VkImageFormatProperties,
    ) -> VkResult,
>;
pub type PFN_vkGetPhysicalDeviceProperties = ::core::option::Option<
    unsafe extern "stdcall" fn(
        physicalDevice: VkPhysicalDevice,
        pProperties: *mut VkPhysicalDeviceProperties,
    ),
>;
pub type PFN_vkGetPhysicalDeviceQueueFamilyProperties = ::core::option::Option<
    unsafe extern "stdcall" fn(
        physicalDevice: VkPhysicalDevice,
        pQueueFamilyPropertyCount: *mut u32,
        pQueueFamilyProperties: *mut VkQueueFamilyProperties,
    ),
>;
pub type PFN_vkGetPhysicalDeviceMemoryProperties = ::core::option::Option<
    unsafe extern "stdcall" fn(
        physicalDevice: VkPhysicalDevice,
        pMemoryProperties: *mut VkPhysicalDeviceMemoryProperties,
    ),
>;
pub type PFN_vkGetInstanceProcAddr = ::core::option::Option<
    unsafe extern "stdcall" fn(
        instance: VkInstance,
        pName: *const ::core::ffi::c_char,
    ) -> PFN_vkVoidFunction,
>;
pub type PFN_vkGetDeviceProcAddr = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pName: *const ::core::ffi::c_char,
    ) -> PFN_vkVoidFunction,
>;
pub type PFN_vkCreateDevice = ::core::option::Option<
    unsafe extern "stdcall" fn(
        physicalDevice: VkPhysicalDevice,
        pCreateInfo: *const VkDeviceCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pDevice: *mut VkDevice,
    ) -> VkResult,
>;
pub type PFN_vkDestroyDevice = ::core::option::Option<
    unsafe extern "stdcall" fn(device: VkDevice, pAllocator: *const VkAllocationCallbacks),
>;
pub type PFN_vkEnumerateInstanceExtensionProperties = ::core::option::Option<
    unsafe extern "stdcall" fn(
        pLayerName: *const ::core::ffi::c_char,
        pPropertyCount: *mut u32,
        pProperties: *mut VkExtensionProperties,
    ) -> VkResult,
>;
pub type PFN_vkEnumerateDeviceExtensionProperties = ::core::option::Option<
    unsafe extern "stdcall" fn(
        physicalDevice: VkPhysicalDevice,
        pLayerName: *const ::core::ffi::c_char,
        pPropertyCount: *mut u32,
        pProperties: *mut VkExtensionProperties,
    ) -> VkResult,
>;
pub type PFN_vkEnumerateInstanceLayerProperties = ::core::option::Option<
    unsafe extern "stdcall" fn(
        pPropertyCount: *mut u32,
        pProperties: *mut VkLayerProperties,
    ) -> VkResult,
>;
pub type PFN_vkEnumerateDeviceLayerProperties = ::core::option::Option<
    unsafe extern "stdcall" fn(
        physicalDevice: VkPhysicalDevice,
        pPropertyCount: *mut u32,
        pProperties: *mut VkLayerProperties,
    ) -> VkResult,
>;
pub type PFN_vkGetDeviceQueue = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        queueFamilyIndex: u32,
        queueIndex: u32,
        pQueue: *mut VkQueue,
    ),
>;
pub type PFN_vkQueueSubmit = ::core::option::Option<
    unsafe extern "stdcall" fn(
        queue: VkQueue,
        submitCount: u32,
        pSubmits: *const VkSubmitInfo,
        fence: VkFence,
    ) -> VkResult,
>;
pub type PFN_vkQueueWaitIdle =
    ::core::option::Option<unsafe extern "stdcall" fn(queue: VkQueue) -> VkResult>;
pub type PFN_vkDeviceWaitIdle =
    ::core::option::Option<unsafe extern "stdcall" fn(device: VkDevice) -> VkResult>;
pub type PFN_vkAllocateMemory = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pAllocateInfo: *const VkMemoryAllocateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pMemory: *mut VkDeviceMemory,
    ) -> VkResult,
>;
pub type PFN_vkFreeMemory = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        memory: VkDeviceMemory,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkMapMemory = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        memory: VkDeviceMemory,
        offset: VkDeviceSize,
        size: VkDeviceSize,
        flags: VkMemoryMapFlags,
        ppData: *mut *mut ::core::ffi::c_void,
    ) -> VkResult,
>;
pub type PFN_vkUnmapMemory =
    ::core::option::Option<unsafe extern "stdcall" fn(device: VkDevice, memory: VkDeviceMemory)>;
pub type PFN_vkFlushMappedMemoryRanges = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        memoryRangeCount: u32,
        pMemoryRanges: *const VkMappedMemoryRange,
    ) -> VkResult,
>;
pub type PFN_vkInvalidateMappedMemoryRanges = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        memoryRangeCount: u32,
        pMemoryRanges: *const VkMappedMemoryRange,
    ) -> VkResult,
>;
pub type PFN_vkGetDeviceMemoryCommitment = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        memory: VkDeviceMemory,
        pCommittedMemoryInBytes: *mut VkDeviceSize,
    ),
>;
pub type PFN_vkBindBufferMemory = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        buffer: VkBuffer,
        memory: VkDeviceMemory,
        memoryOffset: VkDeviceSize,
    ) -> VkResult,
>;
pub type PFN_vkBindImageMemory = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        image: VkImage,
        memory: VkDeviceMemory,
        memoryOffset: VkDeviceSize,
    ) -> VkResult,
>;
pub type PFN_vkGetBufferMemoryRequirements = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        buffer: VkBuffer,
        pMemoryRequirements: *mut VkMemoryRequirements,
    ),
>;
pub type PFN_vkGetImageMemoryRequirements = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        image: VkImage,
        pMemoryRequirements: *mut VkMemoryRequirements,
    ),
>;
pub type PFN_vkGetImageSparseMemoryRequirements = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        image: VkImage,
        pSparseMemoryRequirementCount: *mut u32,
        pSparseMemoryRequirements: *mut VkSparseImageMemoryRequirements,
    ),
>;
pub type PFN_vkGetPhysicalDeviceSparseImageFormatProperties = ::core::option::Option<
    unsafe extern "stdcall" fn(
        physicalDevice: VkPhysicalDevice,
        format: VkFormat,
        type_: VkImageType,
        samples: VkSampleCountFlagBits,
        usage: VkImageUsageFlags,
        tiling: VkImageTiling,
        pPropertyCount: *mut u32,
        pProperties: *mut VkSparseImageFormatProperties,
    ),
>;
pub type PFN_vkQueueBindSparse = ::core::option::Option<
    unsafe extern "stdcall" fn(
        queue: VkQueue,
        bindInfoCount: u32,
        pBindInfo: *const VkBindSparseInfo,
        fence: VkFence,
    ) -> VkResult,
>;
pub type PFN_vkCreateFence = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pCreateInfo: *const VkFenceCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pFence: *mut VkFence,
    ) -> VkResult,
>;
pub type PFN_vkDestroyFence = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        fence: VkFence,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkResetFences = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        fenceCount: u32,
        pFences: *const VkFence,
    ) -> VkResult,
>;
pub type PFN_vkGetFenceStatus = ::core::option::Option<
    unsafe extern "stdcall" fn(device: VkDevice, fence: VkFence) -> VkResult,
>;
pub type PFN_vkWaitForFences = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        fenceCount: u32,
        pFences: *const VkFence,
        waitAll: VkBool32,
        timeout: u64,
    ) -> VkResult,
>;
pub type PFN_vkCreateSemaphore = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pCreateInfo: *const VkSemaphoreCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pSemaphore: *mut VkSemaphore,
    ) -> VkResult,
>;
pub type PFN_vkDestroySemaphore = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        semaphore: VkSemaphore,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkCreateEvent = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pCreateInfo: *const VkEventCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pEvent: *mut VkEvent,
    ) -> VkResult,
>;
pub type PFN_vkDestroyEvent = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        event: VkEvent,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkGetEventStatus = ::core::option::Option<
    unsafe extern "stdcall" fn(device: VkDevice, event: VkEvent) -> VkResult,
>;
pub type PFN_vkSetEvent = ::core::option::Option<
    unsafe extern "stdcall" fn(device: VkDevice, event: VkEvent) -> VkResult,
>;
pub type PFN_vkResetEvent = ::core::option::Option<
    unsafe extern "stdcall" fn(device: VkDevice, event: VkEvent) -> VkResult,
>;
pub type PFN_vkCreateQueryPool = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pCreateInfo: *const VkQueryPoolCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pQueryPool: *mut VkQueryPool,
    ) -> VkResult,
>;
pub type PFN_vkDestroyQueryPool = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        queryPool: VkQueryPool,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkGetQueryPoolResults = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        queryPool: VkQueryPool,
        firstQuery: u32,
        queryCount: u32,
        dataSize: usize,
        pData: *mut ::core::ffi::c_void,
        stride: VkDeviceSize,
        flags: VkQueryResultFlags,
    ) -> VkResult,
>;
pub type PFN_vkCreateBuffer = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pCreateInfo: *const VkBufferCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pBuffer: *mut VkBuffer,
    ) -> VkResult,
>;
pub type PFN_vkDestroyBuffer = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        buffer: VkBuffer,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkCreateBufferView = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pCreateInfo: *const VkBufferViewCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pView: *mut VkBufferView,
    ) -> VkResult,
>;
pub type PFN_vkDestroyBufferView = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        bufferView: VkBufferView,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkCreateImage = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pCreateInfo: *const VkImageCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pImage: *mut VkImage,
    ) -> VkResult,
>;
pub type PFN_vkDestroyImage = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        image: VkImage,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkGetImageSubresourceLayout = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        image: VkImage,
        pSubresource: *const VkImageSubresource,
        pLayout: *mut VkSubresourceLayout,
    ),
>;
pub type PFN_vkCreateImageView = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pCreateInfo: *const VkImageViewCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pView: *mut VkImageView,
    ) -> VkResult,
>;
pub type PFN_vkDestroyImageView = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        imageView: VkImageView,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkCreateShaderModule = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pCreateInfo: *const VkShaderModuleCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pShaderModule: *mut VkShaderModule,
    ) -> VkResult,
>;
pub type PFN_vkDestroyShaderModule = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        shaderModule: VkShaderModule,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkCreatePipelineCache = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pCreateInfo: *const VkPipelineCacheCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pPipelineCache: *mut VkPipelineCache,
    ) -> VkResult,
>;
pub type PFN_vkDestroyPipelineCache = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pipelineCache: VkPipelineCache,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkGetPipelineCacheData = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pipelineCache: VkPipelineCache,
        pDataSize: *mut usize,
        pData: *mut ::core::ffi::c_void,
    ) -> VkResult,
>;
pub type PFN_vkMergePipelineCaches = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        dstCache: VkPipelineCache,
        srcCacheCount: u32,
        pSrcCaches: *const VkPipelineCache,
    ) -> VkResult,
>;
pub type PFN_vkCreateGraphicsPipelines = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pipelineCache: VkPipelineCache,
        createInfoCount: u32,
        pCreateInfos: *const VkGraphicsPipelineCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pPipelines: *mut VkPipeline,
    ) -> VkResult,
>;
pub type PFN_vkCreateComputePipelines = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pipelineCache: VkPipelineCache,
        createInfoCount: u32,
        pCreateInfos: *const VkComputePipelineCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pPipelines: *mut VkPipeline,
    ) -> VkResult,
>;
pub type PFN_vkDestroyPipeline = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pipeline: VkPipeline,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkCreatePipelineLayout = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pCreateInfo: *const VkPipelineLayoutCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pPipelineLayout: *mut VkPipelineLayout,
    ) -> VkResult,
>;
pub type PFN_vkDestroyPipelineLayout = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pipelineLayout: VkPipelineLayout,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkCreateSampler = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pCreateInfo: *const VkSamplerCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pSampler: *mut VkSampler,
    ) -> VkResult,
>;
pub type PFN_vkDestroySampler = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        sampler: VkSampler,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkCreateDescriptorSetLayout = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pCreateInfo: *const VkDescriptorSetLayoutCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pSetLayout: *mut VkDescriptorSetLayout,
    ) -> VkResult,
>;
pub type PFN_vkDestroyDescriptorSetLayout = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        descriptorSetLayout: VkDescriptorSetLayout,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkCreateDescriptorPool = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pCreateInfo: *const VkDescriptorPoolCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pDescriptorPool: *mut VkDescriptorPool,
    ) -> VkResult,
>;
pub type PFN_vkDestroyDescriptorPool = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        descriptorPool: VkDescriptorPool,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkResetDescriptorPool = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        descriptorPool: VkDescriptorPool,
        flags: VkDescriptorPoolResetFlags,
    ) -> VkResult,
>;
pub type PFN_vkAllocateDescriptorSets = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pAllocateInfo: *const VkDescriptorSetAllocateInfo,
        pDescriptorSets: *mut VkDescriptorSet,
    ) -> VkResult,
>;
pub type PFN_vkFreeDescriptorSets = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        descriptorPool: VkDescriptorPool,
        descriptorSetCount: u32,
        pDescriptorSets: *const VkDescriptorSet,
    ) -> VkResult,
>;
pub type PFN_vkUpdateDescriptorSets = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        descriptorWriteCount: u32,
        pDescriptorWrites: *const VkWriteDescriptorSet,
        descriptorCopyCount: u32,
        pDescriptorCopies: *const VkCopyDescriptorSet,
    ),
>;
pub type PFN_vkCreateFramebuffer = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pCreateInfo: *const VkFramebufferCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pFramebuffer: *mut VkFramebuffer,
    ) -> VkResult,
>;
pub type PFN_vkDestroyFramebuffer = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        framebuffer: VkFramebuffer,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkCreateRenderPass = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pCreateInfo: *const VkRenderPassCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pRenderPass: *mut VkRenderPass,
    ) -> VkResult,
>;
pub type PFN_vkDestroyRenderPass = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        renderPass: VkRenderPass,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkGetRenderAreaGranularity = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        renderPass: VkRenderPass,
        pGranularity: *mut VkExtent2D,
    ),
>;
pub type PFN_vkCreateCommandPool = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pCreateInfo: *const VkCommandPoolCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pCommandPool: *mut VkCommandPool,
    ) -> VkResult,
>;
pub type PFN_vkDestroyCommandPool = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        commandPool: VkCommandPool,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkResetCommandPool = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        commandPool: VkCommandPool,
        flags: VkCommandPoolResetFlags,
    ) -> VkResult,
>;
pub type PFN_vkAllocateCommandBuffers = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pAllocateInfo: *const VkCommandBufferAllocateInfo,
        pCommandBuffers: *mut VkCommandBuffer,
    ) -> VkResult,
>;
pub type PFN_vkFreeCommandBuffers = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        commandPool: VkCommandPool,
        commandBufferCount: u32,
        pCommandBuffers: *const VkCommandBuffer,
    ),
>;
pub type PFN_vkBeginCommandBuffer = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        pBeginInfo: *const VkCommandBufferBeginInfo,
    ) -> VkResult,
>;
pub type PFN_vkEndCommandBuffer =
    ::core::option::Option<unsafe extern "stdcall" fn(commandBuffer: VkCommandBuffer) -> VkResult>;
pub type PFN_vkResetCommandBuffer = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        flags: VkCommandBufferResetFlags,
    ) -> VkResult,
>;
pub type PFN_vkCmdBindPipeline = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        pipelineBindPoint: VkPipelineBindPoint,
        pipeline: VkPipeline,
    ),
>;
pub type PFN_vkCmdSetViewport = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        firstViewport: u32,
        viewportCount: u32,
        pViewports: *const VkViewport,
    ),
>;
pub type PFN_vkCmdSetScissor = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        firstScissor: u32,
        scissorCount: u32,
        pScissors: *const VkRect2D,
    ),
>;
pub type PFN_vkCmdSetLineWidth = ::core::option::Option<
    unsafe extern "stdcall" fn(commandBuffer: VkCommandBuffer, lineWidth: f32),
>;
pub type PFN_vkCmdSetDepthBias = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        depthBiasConstantFactor: f32,
        depthBiasClamp: f32,
        depthBiasSlopeFactor: f32,
    ),
>;
pub type PFN_vkCmdSetBlendConstants = ::core::option::Option<
    unsafe extern "stdcall" fn(commandBuffer: VkCommandBuffer, blendConstants: *const f32),
>;
pub type PFN_vkCmdSetDepthBounds = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        minDepthBounds: f32,
        maxDepthBounds: f32,
    ),
>;
pub type PFN_vkCmdSetStencilCompareMask = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        faceMask: VkStencilFaceFlags,
        compareMask: u32,
    ),
>;
pub type PFN_vkCmdSetStencilWriteMask = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        faceMask: VkStencilFaceFlags,
        writeMask: u32,
    ),
>;
pub type PFN_vkCmdSetStencilReference = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        faceMask: VkStencilFaceFlags,
        reference: u32,
    ),
>;
pub type PFN_vkCmdBindDescriptorSets = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        pipelineBindPoint: VkPipelineBindPoint,
        layout: VkPipelineLayout,
        firstSet: u32,
        descriptorSetCount: u32,
        pDescriptorSets: *const VkDescriptorSet,
        dynamicOffsetCount: u32,
        pDynamicOffsets: *const u32,
    ),
>;
pub type PFN_vkCmdBindIndexBuffer = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        buffer: VkBuffer,
        offset: VkDeviceSize,
        indexType: VkIndexType,
    ),
>;
pub type PFN_vkCmdBindVertexBuffers = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        firstBinding: u32,
        bindingCount: u32,
        pBuffers: *const VkBuffer,
        pOffsets: *const VkDeviceSize,
    ),
>;
pub type PFN_vkCmdDraw = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        vertexCount: u32,
        instanceCount: u32,
        firstVertex: u32,
        firstInstance: u32,
    ),
>;
pub type PFN_vkCmdDrawIndexed = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        indexCount: u32,
        instanceCount: u32,
        firstIndex: u32,
        vertexOffset: i32,
        firstInstance: u32,
    ),
>;
pub type PFN_vkCmdDrawIndirect = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        buffer: VkBuffer,
        offset: VkDeviceSize,
        drawCount: u32,
        stride: u32,
    ),
>;
pub type PFN_vkCmdDrawIndexedIndirect = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        buffer: VkBuffer,
        offset: VkDeviceSize,
        drawCount: u32,
        stride: u32,
    ),
>;
pub type PFN_vkCmdDispatch = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        groupCountX: u32,
        groupCountY: u32,
        groupCountZ: u32,
    ),
>;
pub type PFN_vkCmdDispatchIndirect = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        buffer: VkBuffer,
        offset: VkDeviceSize,
    ),
>;
pub type PFN_vkCmdCopyBuffer = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        srcBuffer: VkBuffer,
        dstBuffer: VkBuffer,
        regionCount: u32,
        pRegions: *const VkBufferCopy,
    ),
>;
pub type PFN_vkCmdCopyImage = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        srcImage: VkImage,
        srcImageLayout: VkImageLayout,
        dstImage: VkImage,
        dstImageLayout: VkImageLayout,
        regionCount: u32,
        pRegions: *const VkImageCopy,
    ),
>;
pub type PFN_vkCmdBlitImage = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        srcImage: VkImage,
        srcImageLayout: VkImageLayout,
        dstImage: VkImage,
        dstImageLayout: VkImageLayout,
        regionCount: u32,
        pRegions: *const VkImageBlit,
        filter: VkFilter,
    ),
>;
pub type PFN_vkCmdCopyBufferToImage = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        srcBuffer: VkBuffer,
        dstImage: VkImage,
        dstImageLayout: VkImageLayout,
        regionCount: u32,
        pRegions: *const VkBufferImageCopy,
    ),
>;
pub type PFN_vkCmdCopyImageToBuffer = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        srcImage: VkImage,
        srcImageLayout: VkImageLayout,
        dstBuffer: VkBuffer,
        regionCount: u32,
        pRegions: *const VkBufferImageCopy,
    ),
>;
pub type PFN_vkCmdUpdateBuffer = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        dstBuffer: VkBuffer,
        dstOffset: VkDeviceSize,
        dataSize: VkDeviceSize,
        pData: *const ::core::ffi::c_void,
    ),
>;
pub type PFN_vkCmdFillBuffer = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        dstBuffer: VkBuffer,
        dstOffset: VkDeviceSize,
        size: VkDeviceSize,
        data: u32,
    ),
>;
pub type PFN_vkCmdClearColorImage = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        image: VkImage,
        imageLayout: VkImageLayout,
        pColor: *const VkClearColorValue,
        rangeCount: u32,
        pRanges: *const VkImageSubresourceRange,
    ),
>;
pub type PFN_vkCmdClearDepthStencilImage = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        image: VkImage,
        imageLayout: VkImageLayout,
        pDepthStencil: *const VkClearDepthStencilValue,
        rangeCount: u32,
        pRanges: *const VkImageSubresourceRange,
    ),
>;
pub type PFN_vkCmdClearAttachments = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        attachmentCount: u32,
        pAttachments: *const VkClearAttachment,
        rectCount: u32,
        pRects: *const VkClearRect,
    ),
>;
pub type PFN_vkCmdResolveImage = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        srcImage: VkImage,
        srcImageLayout: VkImageLayout,
        dstImage: VkImage,
        dstImageLayout: VkImageLayout,
        regionCount: u32,
        pRegions: *const VkImageResolve,
    ),
>;
pub type PFN_vkCmdSetEvent = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        event: VkEvent,
        stageMask: VkPipelineStageFlags,
    ),
>;
pub type PFN_vkCmdResetEvent = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        event: VkEvent,
        stageMask: VkPipelineStageFlags,
    ),
>;
pub type PFN_vkCmdWaitEvents = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        eventCount: u32,
        pEvents: *const VkEvent,
        srcStageMask: VkPipelineStageFlags,
        dstStageMask: VkPipelineStageFlags,
        memoryBarrierCount: u32,
        pMemoryBarriers: *const VkMemoryBarrier,
        bufferMemoryBarrierCount: u32,
        pBufferMemoryBarriers: *const VkBufferMemoryBarrier,
        imageMemoryBarrierCount: u32,
        pImageMemoryBarriers: *const VkImageMemoryBarrier,
    ),
>;
pub type PFN_vkCmdPipelineBarrier = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        srcStageMask: VkPipelineStageFlags,
        dstStageMask: VkPipelineStageFlags,
        dependencyFlags: VkDependencyFlags,
        memoryBarrierCount: u32,
        pMemoryBarriers: *const VkMemoryBarrier,
        bufferMemoryBarrierCount: u32,
        pBufferMemoryBarriers: *const VkBufferMemoryBarrier,
        imageMemoryBarrierCount: u32,
        pImageMemoryBarriers: *const VkImageMemoryBarrier,
    ),
>;
pub type PFN_vkCmdBeginQuery = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        queryPool: VkQueryPool,
        query: u32,
        flags: VkQueryControlFlags,
    ),
>;
pub type PFN_vkCmdEndQuery = ::core::option::Option<
    unsafe extern "stdcall" fn(commandBuffer: VkCommandBuffer, queryPool: VkQueryPool, query: u32),
>;
pub type PFN_vkCmdResetQueryPool = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        queryPool: VkQueryPool,
        firstQuery: u32,
        queryCount: u32,
    ),
>;
pub type PFN_vkCmdWriteTimestamp = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        pipelineStage: VkPipelineStageFlagBits,
        queryPool: VkQueryPool,
        query: u32,
    ),
>;
pub type PFN_vkCmdCopyQueryPoolResults = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        queryPool: VkQueryPool,
        firstQuery: u32,
        queryCount: u32,
        dstBuffer: VkBuffer,
        dstOffset: VkDeviceSize,
        stride: VkDeviceSize,
        flags: VkQueryResultFlags,
    ),
>;
pub type PFN_vkCmdPushConstants = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        layout: VkPipelineLayout,
        stageFlags: VkShaderStageFlags,
        offset: u32,
        size: u32,
        pValues: *const ::core::ffi::c_void,
    ),
>;
pub type PFN_vkCmdBeginRenderPass = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        pRenderPassBegin: *const VkRenderPassBeginInfo,
        contents: VkSubpassContents,
    ),
>;
pub type PFN_vkCmdNextSubpass = ::core::option::Option<
    unsafe extern "stdcall" fn(commandBuffer: VkCommandBuffer, contents: VkSubpassContents),
>;
pub type PFN_vkCmdEndRenderPass =
    ::core::option::Option<unsafe extern "stdcall" fn(commandBuffer: VkCommandBuffer)>;
pub type PFN_vkCmdExecuteCommands = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        commandBufferCount: u32,
        pCommandBuffers: *const VkCommandBuffer,
    ),
>;
pub type VkSamplerYcbcrConversion = u64;
pub type VkDescriptorUpdateTemplate = u64;
pub type VkPointClippingBehavior = ::core::ffi::c_int;
pub type VkTessellationDomainOrigin = ::core::ffi::c_int;
pub type VkSamplerYcbcrModelConversion = ::core::ffi::c_int;
pub type VkSamplerYcbcrRange = ::core::ffi::c_int;
pub type VkChromaLocation = ::core::ffi::c_int;
pub type VkDescriptorUpdateTemplateType = ::core::ffi::c_int;
pub type VkSubgroupFeatureFlagBits = ::core::ffi::c_int;
pub type VkSubgroupFeatureFlags = VkFlags;
pub type VkPeerMemoryFeatureFlagBits = ::core::ffi::c_int;
pub type VkPeerMemoryFeatureFlags = VkFlags;
pub type VkMemoryAllocateFlagBits = ::core::ffi::c_int;
pub type VkMemoryAllocateFlags = VkFlags;
pub type VkCommandPoolTrimFlags = VkFlags;
pub type VkDescriptorUpdateTemplateCreateFlags = VkFlags;
pub type VkExternalMemoryHandleTypeFlagBits = ::core::ffi::c_int;
pub type VkExternalMemoryHandleTypeFlags = VkFlags;
pub type VkExternalMemoryFeatureFlagBits = ::core::ffi::c_int;
pub type VkExternalMemoryFeatureFlags = VkFlags;
pub type VkExternalFenceHandleTypeFlagBits = ::core::ffi::c_int;
pub type VkExternalFenceHandleTypeFlags = VkFlags;
pub type VkExternalFenceFeatureFlagBits = ::core::ffi::c_int;
pub type VkExternalFenceFeatureFlags = VkFlags;
pub type VkFenceImportFlagBits = ::core::ffi::c_int;
pub type VkFenceImportFlags = VkFlags;
pub type VkSemaphoreImportFlagBits = ::core::ffi::c_int;
pub type VkSemaphoreImportFlags = VkFlags;
pub type VkExternalSemaphoreHandleTypeFlagBits = ::core::ffi::c_int;
pub type VkExternalSemaphoreHandleTypeFlags = VkFlags;
pub type VkExternalSemaphoreFeatureFlagBits = ::core::ffi::c_int;
pub type VkExternalSemaphoreFeatureFlags = VkFlags;
pub type VkPhysicalDeviceVariablePointerFeatures = VkPhysicalDeviceVariablePointersFeatures;
pub type VkPhysicalDeviceShaderDrawParameterFeatures = VkPhysicalDeviceShaderDrawParametersFeatures;
pub type PFN_vkEnumerateInstanceVersion =
    ::core::option::Option<unsafe extern "stdcall" fn(pApiVersion: *mut u32) -> VkResult>;
pub type PFN_vkBindBufferMemory2 = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        bindInfoCount: u32,
        pBindInfos: *const VkBindBufferMemoryInfo,
    ) -> VkResult,
>;
pub type PFN_vkBindImageMemory2 = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        bindInfoCount: u32,
        pBindInfos: *const VkBindImageMemoryInfo,
    ) -> VkResult,
>;
pub type PFN_vkGetDeviceGroupPeerMemoryFeatures = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        heapIndex: u32,
        localDeviceIndex: u32,
        remoteDeviceIndex: u32,
        pPeerMemoryFeatures: *mut VkPeerMemoryFeatureFlags,
    ),
>;
pub type PFN_vkCmdSetDeviceMask = ::core::option::Option<
    unsafe extern "stdcall" fn(commandBuffer: VkCommandBuffer, deviceMask: u32),
>;
pub type PFN_vkCmdDispatchBase = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        baseGroupX: u32,
        baseGroupY: u32,
        baseGroupZ: u32,
        groupCountX: u32,
        groupCountY: u32,
        groupCountZ: u32,
    ),
>;
pub type PFN_vkEnumeratePhysicalDeviceGroups = ::core::option::Option<
    unsafe extern "stdcall" fn(
        instance: VkInstance,
        pPhysicalDeviceGroupCount: *mut u32,
        pPhysicalDeviceGroupProperties: *mut VkPhysicalDeviceGroupProperties,
    ) -> VkResult,
>;
pub type PFN_vkGetImageMemoryRequirements2 = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pInfo: *const VkImageMemoryRequirementsInfo2,
        pMemoryRequirements: *mut VkMemoryRequirements2,
    ),
>;
pub type PFN_vkGetBufferMemoryRequirements2 = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pInfo: *const VkBufferMemoryRequirementsInfo2,
        pMemoryRequirements: *mut VkMemoryRequirements2,
    ),
>;
pub type PFN_vkGetImageSparseMemoryRequirements2 = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pInfo: *const VkImageSparseMemoryRequirementsInfo2,
        pSparseMemoryRequirementCount: *mut u32,
        pSparseMemoryRequirements: *mut VkSparseImageMemoryRequirements2,
    ),
>;
pub type PFN_vkGetPhysicalDeviceFeatures2 = ::core::option::Option<
    unsafe extern "stdcall" fn(
        physicalDevice: VkPhysicalDevice,
        pFeatures: *mut VkPhysicalDeviceFeatures2,
    ),
>;
pub type PFN_vkGetPhysicalDeviceProperties2 = ::core::option::Option<
    unsafe extern "stdcall" fn(
        physicalDevice: VkPhysicalDevice,
        pProperties: *mut VkPhysicalDeviceProperties2,
    ),
>;
pub type PFN_vkGetPhysicalDeviceFormatProperties2 = ::core::option::Option<
    unsafe extern "stdcall" fn(
        physicalDevice: VkPhysicalDevice,
        format: VkFormat,
        pFormatProperties: *mut VkFormatProperties2,
    ),
>;
pub type PFN_vkGetPhysicalDeviceImageFormatProperties2 = ::core::option::Option<
    unsafe extern "stdcall" fn(
        physicalDevice: VkPhysicalDevice,
        pImageFormatInfo: *const VkPhysicalDeviceImageFormatInfo2,
        pImageFormatProperties: *mut VkImageFormatProperties2,
    ) -> VkResult,
>;
pub type PFN_vkGetPhysicalDeviceQueueFamilyProperties2 = ::core::option::Option<
    unsafe extern "stdcall" fn(
        physicalDevice: VkPhysicalDevice,
        pQueueFamilyPropertyCount: *mut u32,
        pQueueFamilyProperties: *mut VkQueueFamilyProperties2,
    ),
>;
pub type PFN_vkGetPhysicalDeviceMemoryProperties2 = ::core::option::Option<
    unsafe extern "stdcall" fn(
        physicalDevice: VkPhysicalDevice,
        pMemoryProperties: *mut VkPhysicalDeviceMemoryProperties2,
    ),
>;
pub type PFN_vkGetPhysicalDeviceSparseImageFormatProperties2 = ::core::option::Option<
    unsafe extern "stdcall" fn(
        physicalDevice: VkPhysicalDevice,
        pFormatInfo: *const VkPhysicalDeviceSparseImageFormatInfo2,
        pPropertyCount: *mut u32,
        pProperties: *mut VkSparseImageFormatProperties2,
    ),
>;
pub type PFN_vkTrimCommandPool = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        commandPool: VkCommandPool,
        flags: VkCommandPoolTrimFlags,
    ),
>;
pub type PFN_vkGetDeviceQueue2 = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pQueueInfo: *const VkDeviceQueueInfo2,
        pQueue: *mut VkQueue,
    ),
>;
pub type PFN_vkCreateSamplerYcbcrConversion = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pCreateInfo: *const VkSamplerYcbcrConversionCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pYcbcrConversion: *mut VkSamplerYcbcrConversion,
    ) -> VkResult,
>;
pub type PFN_vkDestroySamplerYcbcrConversion = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        ycbcrConversion: VkSamplerYcbcrConversion,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkCreateDescriptorUpdateTemplate = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pCreateInfo: *const VkDescriptorUpdateTemplateCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pDescriptorUpdateTemplate: *mut VkDescriptorUpdateTemplate,
    ) -> VkResult,
>;
pub type PFN_vkDestroyDescriptorUpdateTemplate = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        descriptorUpdateTemplate: VkDescriptorUpdateTemplate,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkUpdateDescriptorSetWithTemplate = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        descriptorSet: VkDescriptorSet,
        descriptorUpdateTemplate: VkDescriptorUpdateTemplate,
        pData: *const ::core::ffi::c_void,
    ),
>;
pub type PFN_vkGetPhysicalDeviceExternalBufferProperties = ::core::option::Option<
    unsafe extern "stdcall" fn(
        physicalDevice: VkPhysicalDevice,
        pExternalBufferInfo: *const VkPhysicalDeviceExternalBufferInfo,
        pExternalBufferProperties: *mut VkExternalBufferProperties,
    ),
>;
pub type PFN_vkGetPhysicalDeviceExternalFenceProperties = ::core::option::Option<
    unsafe extern "stdcall" fn(
        physicalDevice: VkPhysicalDevice,
        pExternalFenceInfo: *const VkPhysicalDeviceExternalFenceInfo,
        pExternalFenceProperties: *mut VkExternalFenceProperties,
    ),
>;
pub type PFN_vkGetPhysicalDeviceExternalSemaphoreProperties = ::core::option::Option<
    unsafe extern "stdcall" fn(
        physicalDevice: VkPhysicalDevice,
        pExternalSemaphoreInfo: *const VkPhysicalDeviceExternalSemaphoreInfo,
        pExternalSemaphoreProperties: *mut VkExternalSemaphoreProperties,
    ),
>;
pub type PFN_vkGetDescriptorSetLayoutSupport = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pCreateInfo: *const VkDescriptorSetLayoutCreateInfo,
        pSupport: *mut VkDescriptorSetLayoutSupport,
    ),
>;
pub type VkDriverId = ::core::ffi::c_int;
pub type VkShaderFloatControlsIndependence = ::core::ffi::c_int;
pub type VkSamplerReductionMode = ::core::ffi::c_int;
pub type VkSemaphoreType = ::core::ffi::c_int;
pub type VkResolveModeFlagBits = ::core::ffi::c_int;
pub type VkResolveModeFlags = VkFlags;
pub type VkDescriptorBindingFlagBits = ::core::ffi::c_int;
pub type VkDescriptorBindingFlags = VkFlags;
pub type VkSemaphoreWaitFlagBits = ::core::ffi::c_int;
pub type VkSemaphoreWaitFlags = VkFlags;
pub type PFN_vkCmdDrawIndirectCount = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        buffer: VkBuffer,
        offset: VkDeviceSize,
        countBuffer: VkBuffer,
        countBufferOffset: VkDeviceSize,
        maxDrawCount: u32,
        stride: u32,
    ),
>;
pub type PFN_vkCmdDrawIndexedIndirectCount = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        buffer: VkBuffer,
        offset: VkDeviceSize,
        countBuffer: VkBuffer,
        countBufferOffset: VkDeviceSize,
        maxDrawCount: u32,
        stride: u32,
    ),
>;
pub type PFN_vkCreateRenderPass2 = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pCreateInfo: *const VkRenderPassCreateInfo2,
        pAllocator: *const VkAllocationCallbacks,
        pRenderPass: *mut VkRenderPass,
    ) -> VkResult,
>;
pub type PFN_vkCmdBeginRenderPass2 = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        pRenderPassBegin: *const VkRenderPassBeginInfo,
        pSubpassBeginInfo: *const VkSubpassBeginInfo,
    ),
>;
pub type PFN_vkCmdNextSubpass2 = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        pSubpassBeginInfo: *const VkSubpassBeginInfo,
        pSubpassEndInfo: *const VkSubpassEndInfo,
    ),
>;
pub type PFN_vkCmdEndRenderPass2 = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        pSubpassEndInfo: *const VkSubpassEndInfo,
    ),
>;
pub type PFN_vkResetQueryPool = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        queryPool: VkQueryPool,
        firstQuery: u32,
        queryCount: u32,
    ),
>;
pub type PFN_vkGetSemaphoreCounterValue = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        semaphore: VkSemaphore,
        pValue: *mut u64,
    ) -> VkResult,
>;
pub type PFN_vkWaitSemaphores = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pWaitInfo: *const VkSemaphoreWaitInfo,
        timeout: u64,
    ) -> VkResult,
>;
pub type PFN_vkSignalSemaphore = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pSignalInfo: *const VkSemaphoreSignalInfo,
    ) -> VkResult,
>;
pub type PFN_vkGetBufferDeviceAddress = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pInfo: *const VkBufferDeviceAddressInfo,
    ) -> VkDeviceAddress,
>;
pub type PFN_vkGetBufferOpaqueCaptureAddress = ::core::option::Option<
    unsafe extern "stdcall" fn(device: VkDevice, pInfo: *const VkBufferDeviceAddressInfo) -> u64,
>;
pub type PFN_vkGetDeviceMemoryOpaqueCaptureAddress = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pInfo: *const VkDeviceMemoryOpaqueCaptureAddressInfo,
    ) -> u64,
>;
pub type VkFlags64 = u64;
pub type VkPrivateDataSlot = u64;
pub type VkPipelineCreationFeedbackFlagBits = ::core::ffi::c_int;
pub type VkPipelineCreationFeedbackFlags = VkFlags;
pub type VkToolPurposeFlagBits = ::core::ffi::c_int;
pub type VkToolPurposeFlags = VkFlags;
pub type VkPrivateDataSlotCreateFlags = VkFlags;
pub type VkPipelineStageFlags2 = VkFlags64;
#[doc = " Flag bits for VkPipelineStageFlagBits2"]
pub type VkPipelineStageFlagBits2 = VkFlags64;
pub type VkAccessFlags2 = VkFlags64;
#[doc = " Flag bits for VkAccessFlagBits2"]
pub type VkAccessFlagBits2 = VkFlags64;
pub type VkSubmitFlagBits = ::core::ffi::c_int;
pub type VkSubmitFlags = VkFlags;
pub type VkRenderingFlagBits = ::core::ffi::c_int;
pub type VkRenderingFlags = VkFlags;
pub type VkFormatFeatureFlags2 = VkFlags64;
#[doc = " Flag bits for VkFormatFeatureFlagBits2"]
pub type VkFormatFeatureFlagBits2 = VkFlags64;
pub type PFN_vkGetPhysicalDeviceToolProperties = ::core::option::Option<
    unsafe extern "stdcall" fn(
        physicalDevice: VkPhysicalDevice,
        pToolCount: *mut u32,
        pToolProperties: *mut VkPhysicalDeviceToolProperties,
    ) -> VkResult,
>;
pub type PFN_vkCreatePrivateDataSlot = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pCreateInfo: *const VkPrivateDataSlotCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pPrivateDataSlot: *mut VkPrivateDataSlot,
    ) -> VkResult,
>;
pub type PFN_vkDestroyPrivateDataSlot = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        privateDataSlot: VkPrivateDataSlot,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkSetPrivateData = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        objectType: VkObjectType,
        objectHandle: u64,
        privateDataSlot: VkPrivateDataSlot,
        data: u64,
    ) -> VkResult,
>;
pub type PFN_vkGetPrivateData = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        objectType: VkObjectType,
        objectHandle: u64,
        privateDataSlot: VkPrivateDataSlot,
        pData: *mut u64,
    ),
>;
pub type PFN_vkCmdSetEvent2 = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        event: VkEvent,
        pDependencyInfo: *const VkDependencyInfo,
    ),
>;
pub type PFN_vkCmdResetEvent2 = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        event: VkEvent,
        stageMask: VkPipelineStageFlags2,
    ),
>;
pub type PFN_vkCmdWaitEvents2 = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        eventCount: u32,
        pEvents: *const VkEvent,
        pDependencyInfos: *const VkDependencyInfo,
    ),
>;
pub type PFN_vkCmdPipelineBarrier2 = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        pDependencyInfo: *const VkDependencyInfo,
    ),
>;
pub type PFN_vkCmdWriteTimestamp2 = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        stage: VkPipelineStageFlags2,
        queryPool: VkQueryPool,
        query: u32,
    ),
>;
pub type PFN_vkQueueSubmit2 = ::core::option::Option<
    unsafe extern "stdcall" fn(
        queue: VkQueue,
        submitCount: u32,
        pSubmits: *const VkSubmitInfo2,
        fence: VkFence,
    ) -> VkResult,
>;
pub type PFN_vkCmdCopyBuffer2 = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        pCopyBufferInfo: *const VkCopyBufferInfo2,
    ),
>;
pub type PFN_vkCmdCopyImage2 = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        pCopyImageInfo: *const VkCopyImageInfo2,
    ),
>;
pub type PFN_vkCmdCopyBufferToImage2 = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        pCopyBufferToImageInfo: *const VkCopyBufferToImageInfo2,
    ),
>;
pub type PFN_vkCmdCopyImageToBuffer2 = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        pCopyImageToBufferInfo: *const VkCopyImageToBufferInfo2,
    ),
>;
pub type PFN_vkCmdBlitImage2 = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        pBlitImageInfo: *const VkBlitImageInfo2,
    ),
>;
pub type PFN_vkCmdResolveImage2 = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        pResolveImageInfo: *const VkResolveImageInfo2,
    ),
>;
pub type PFN_vkCmdBeginRendering = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        pRenderingInfo: *const VkRenderingInfo,
    ),
>;
pub type PFN_vkCmdEndRendering =
    ::core::option::Option<unsafe extern "stdcall" fn(commandBuffer: VkCommandBuffer)>;
pub type PFN_vkCmdSetCullMode = ::core::option::Option<
    unsafe extern "stdcall" fn(commandBuffer: VkCommandBuffer, cullMode: VkCullModeFlags),
>;
pub type PFN_vkCmdSetFrontFace = ::core::option::Option<
    unsafe extern "stdcall" fn(commandBuffer: VkCommandBuffer, frontFace: VkFrontFace),
>;
pub type PFN_vkCmdSetPrimitiveTopology = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        primitiveTopology: VkPrimitiveTopology,
    ),
>;
pub type PFN_vkCmdSetViewportWithCount = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        viewportCount: u32,
        pViewports: *const VkViewport,
    ),
>;
pub type PFN_vkCmdSetScissorWithCount = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        scissorCount: u32,
        pScissors: *const VkRect2D,
    ),
>;
pub type PFN_vkCmdBindVertexBuffers2 = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        firstBinding: u32,
        bindingCount: u32,
        pBuffers: *const VkBuffer,
        pOffsets: *const VkDeviceSize,
        pSizes: *const VkDeviceSize,
        pStrides: *const VkDeviceSize,
    ),
>;
pub type PFN_vkCmdSetDepthTestEnable = ::core::option::Option<
    unsafe extern "stdcall" fn(commandBuffer: VkCommandBuffer, depthTestEnable: VkBool32),
>;
pub type PFN_vkCmdSetDepthWriteEnable = ::core::option::Option<
    unsafe extern "stdcall" fn(commandBuffer: VkCommandBuffer, depthWriteEnable: VkBool32),
>;
pub type PFN_vkCmdSetDepthCompareOp = ::core::option::Option<
    unsafe extern "stdcall" fn(commandBuffer: VkCommandBuffer, depthCompareOp: VkCompareOp),
>;
pub type PFN_vkCmdSetDepthBoundsTestEnable = ::core::option::Option<
    unsafe extern "stdcall" fn(commandBuffer: VkCommandBuffer, depthBoundsTestEnable: VkBool32),
>;
pub type PFN_vkCmdSetStencilTestEnable = ::core::option::Option<
    unsafe extern "stdcall" fn(commandBuffer: VkCommandBuffer, stencilTestEnable: VkBool32),
>;
pub type PFN_vkCmdSetStencilOp = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        faceMask: VkStencilFaceFlags,
        failOp: VkStencilOp,
        passOp: VkStencilOp,
        depthFailOp: VkStencilOp,
        compareOp: VkCompareOp,
    ),
>;
pub type PFN_vkCmdSetRasterizerDiscardEnable = ::core::option::Option<
    unsafe extern "stdcall" fn(commandBuffer: VkCommandBuffer, rasterizerDiscardEnable: VkBool32),
>;
pub type PFN_vkCmdSetDepthBiasEnable = ::core::option::Option<
    unsafe extern "stdcall" fn(commandBuffer: VkCommandBuffer, depthBiasEnable: VkBool32),
>;
pub type PFN_vkCmdSetPrimitiveRestartEnable = ::core::option::Option<
    unsafe extern "stdcall" fn(commandBuffer: VkCommandBuffer, primitiveRestartEnable: VkBool32),
>;
pub type PFN_vkGetDeviceBufferMemoryRequirements = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pInfo: *const VkDeviceBufferMemoryRequirements,
        pMemoryRequirements: *mut VkMemoryRequirements2,
    ),
>;
pub type PFN_vkGetDeviceImageMemoryRequirements = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pInfo: *const VkDeviceImageMemoryRequirements,
        pMemoryRequirements: *mut VkMemoryRequirements2,
    ),
>;
pub type PFN_vkGetDeviceImageSparseMemoryRequirements = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pInfo: *const VkDeviceImageMemoryRequirements,
        pSparseMemoryRequirementCount: *mut u32,
        pSparseMemoryRequirements: *mut VkSparseImageMemoryRequirements2,
    ),
>;
pub type VkPipelineRobustnessBufferBehavior = ::core::ffi::c_int;
pub type VkPipelineRobustnessImageBehavior = ::core::ffi::c_int;
pub type VkQueueGlobalPriority = ::core::ffi::c_int;
pub type VkLineRasterizationMode = ::core::ffi::c_int;
pub type VkMemoryUnmapFlagBits = ::core::ffi::c_int;
pub type VkMemoryUnmapFlags = VkFlags;
pub type VkPipelineCreateFlags2 = VkFlags64;
#[doc = " Flag bits for VkPipelineCreateFlagBits2"]
pub type VkPipelineCreateFlagBits2 = VkFlags64;
pub type VkBufferUsageFlags2 = VkFlags64;
#[doc = " Flag bits for VkBufferUsageFlagBits2"]
pub type VkBufferUsageFlagBits2 = VkFlags64;
pub type VkHostImageCopyFlagBits = ::core::ffi::c_int;
pub type VkHostImageCopyFlags = VkFlags;
pub type PFN_vkCmdSetLineStipple = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        lineStippleFactor: u32,
        lineStipplePattern: u16,
    ),
>;
pub type PFN_vkMapMemory2 = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pMemoryMapInfo: *const VkMemoryMapInfo,
        ppData: *mut *mut ::core::ffi::c_void,
    ) -> VkResult,
>;
pub type PFN_vkUnmapMemory2 = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pMemoryUnmapInfo: *const VkMemoryUnmapInfo,
    ) -> VkResult,
>;
pub type PFN_vkCmdBindIndexBuffer2 = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        buffer: VkBuffer,
        offset: VkDeviceSize,
        size: VkDeviceSize,
        indexType: VkIndexType,
    ),
>;
pub type PFN_vkGetRenderingAreaGranularity = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pRenderingAreaInfo: *const VkRenderingAreaInfo,
        pGranularity: *mut VkExtent2D,
    ),
>;
pub type PFN_vkGetDeviceImageSubresourceLayout = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pInfo: *const VkDeviceImageSubresourceInfo,
        pLayout: *mut VkSubresourceLayout2,
    ),
>;
pub type PFN_vkGetImageSubresourceLayout2 = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        image: VkImage,
        pSubresource: *const VkImageSubresource2,
        pLayout: *mut VkSubresourceLayout2,
    ),
>;
pub type PFN_vkCmdPushDescriptorSet = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        pipelineBindPoint: VkPipelineBindPoint,
        layout: VkPipelineLayout,
        set: u32,
        descriptorWriteCount: u32,
        pDescriptorWrites: *const VkWriteDescriptorSet,
    ),
>;
pub type PFN_vkCmdPushDescriptorSetWithTemplate = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        descriptorUpdateTemplate: VkDescriptorUpdateTemplate,
        layout: VkPipelineLayout,
        set: u32,
        pData: *const ::core::ffi::c_void,
    ),
>;
pub type PFN_vkCmdSetRenderingAttachmentLocations = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        pLocationInfo: *const VkRenderingAttachmentLocationInfo,
    ),
>;
pub type PFN_vkCmdSetRenderingInputAttachmentIndices = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        pInputAttachmentIndexInfo: *const VkRenderingInputAttachmentIndexInfo,
    ),
>;
pub type PFN_vkCmdBindDescriptorSets2 = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        pBindDescriptorSetsInfo: *const VkBindDescriptorSetsInfo,
    ),
>;
pub type PFN_vkCmdPushConstants2 = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        pPushConstantsInfo: *const VkPushConstantsInfo,
    ),
>;
pub type PFN_vkCmdPushDescriptorSet2 = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        pPushDescriptorSetInfo: *const VkPushDescriptorSetInfo,
    ),
>;
pub type PFN_vkCmdPushDescriptorSetWithTemplate2 = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        pPushDescriptorSetWithTemplateInfo: *const VkPushDescriptorSetWithTemplateInfo,
    ),
>;
pub type PFN_vkCopyMemoryToImage = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pCopyMemoryToImageInfo: *const VkCopyMemoryToImageInfo,
    ) -> VkResult,
>;
pub type PFN_vkCopyImageToMemory = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pCopyImageToMemoryInfo: *const VkCopyImageToMemoryInfo,
    ) -> VkResult,
>;
pub type PFN_vkCopyImageToImage = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pCopyImageToImageInfo: *const VkCopyImageToImageInfo,
    ) -> VkResult,
>;
pub type PFN_vkTransitionImageLayout = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        transitionCount: u32,
        pTransitions: *const VkHostImageLayoutTransitionInfo,
    ) -> VkResult,
>;
pub type VkSurfaceKHR = u64;
pub type VkPresentModeKHR = ::core::ffi::c_int;
pub type VkColorSpaceKHR = ::core::ffi::c_int;
pub type VkSurfaceTransformFlagBitsKHR = ::core::ffi::c_int;
pub type VkCompositeAlphaFlagBitsKHR = ::core::ffi::c_int;
pub type VkCompositeAlphaFlagsKHR = VkFlags;
pub type VkSurfaceTransformFlagsKHR = VkFlags;
pub type PFN_vkDestroySurfaceKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        instance: VkInstance,
        surface: VkSurfaceKHR,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkGetPhysicalDeviceSurfaceSupportKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        physicalDevice: VkPhysicalDevice,
        queueFamilyIndex: u32,
        surface: VkSurfaceKHR,
        pSupported: *mut VkBool32,
    ) -> VkResult,
>;
pub type PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        physicalDevice: VkPhysicalDevice,
        surface: VkSurfaceKHR,
        pSurfaceCapabilities: *mut VkSurfaceCapabilitiesKHR,
    ) -> VkResult,
>;
pub type PFN_vkGetPhysicalDeviceSurfaceFormatsKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        physicalDevice: VkPhysicalDevice,
        surface: VkSurfaceKHR,
        pSurfaceFormatCount: *mut u32,
        pSurfaceFormats: *mut VkSurfaceFormatKHR,
    ) -> VkResult,
>;
pub type PFN_vkGetPhysicalDeviceSurfacePresentModesKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        physicalDevice: VkPhysicalDevice,
        surface: VkSurfaceKHR,
        pPresentModeCount: *mut u32,
        pPresentModes: *mut VkPresentModeKHR,
    ) -> VkResult,
>;
pub type VkSwapchainKHR = u64;
pub type VkSwapchainCreateFlagBitsKHR = ::core::ffi::c_int;
pub type VkSwapchainCreateFlagsKHR = VkFlags;
pub type VkDeviceGroupPresentModeFlagBitsKHR = ::core::ffi::c_int;
pub type VkDeviceGroupPresentModeFlagsKHR = VkFlags;
pub type PFN_vkCreateSwapchainKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pCreateInfo: *const VkSwapchainCreateInfoKHR,
        pAllocator: *const VkAllocationCallbacks,
        pSwapchain: *mut VkSwapchainKHR,
    ) -> VkResult,
>;
pub type PFN_vkDestroySwapchainKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        swapchain: VkSwapchainKHR,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkGetSwapchainImagesKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        swapchain: VkSwapchainKHR,
        pSwapchainImageCount: *mut u32,
        pSwapchainImages: *mut VkImage,
    ) -> VkResult,
>;
pub type PFN_vkAcquireNextImageKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        swapchain: VkSwapchainKHR,
        timeout: u64,
        semaphore: VkSemaphore,
        fence: VkFence,
        pImageIndex: *mut u32,
    ) -> VkResult,
>;
pub type PFN_vkQueuePresentKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(queue: VkQueue, pPresentInfo: *const VkPresentInfoKHR) -> VkResult,
>;
pub type PFN_vkGetDeviceGroupPresentCapabilitiesKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pDeviceGroupPresentCapabilities: *mut VkDeviceGroupPresentCapabilitiesKHR,
    ) -> VkResult,
>;
pub type PFN_vkGetDeviceGroupSurfacePresentModesKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        surface: VkSurfaceKHR,
        pModes: *mut VkDeviceGroupPresentModeFlagsKHR,
    ) -> VkResult,
>;
pub type PFN_vkGetPhysicalDevicePresentRectanglesKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        physicalDevice: VkPhysicalDevice,
        surface: VkSurfaceKHR,
        pRectCount: *mut u32,
        pRects: *mut VkRect2D,
    ) -> VkResult,
>;
pub type PFN_vkAcquireNextImage2KHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pAcquireInfo: *const VkAcquireNextImageInfoKHR,
        pImageIndex: *mut u32,
    ) -> VkResult,
>;
pub type VkDisplayKHR = u64;
pub type VkDisplayModeKHR = u64;
pub type VkDisplayModeCreateFlagsKHR = VkFlags;
pub type VkDisplayPlaneAlphaFlagBitsKHR = ::core::ffi::c_int;
pub type VkDisplayPlaneAlphaFlagsKHR = VkFlags;
pub type VkDisplaySurfaceCreateFlagsKHR = VkFlags;
pub type PFN_vkGetPhysicalDeviceDisplayPropertiesKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        physicalDevice: VkPhysicalDevice,
        pPropertyCount: *mut u32,
        pProperties: *mut VkDisplayPropertiesKHR,
    ) -> VkResult,
>;
pub type PFN_vkGetPhysicalDeviceDisplayPlanePropertiesKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        physicalDevice: VkPhysicalDevice,
        pPropertyCount: *mut u32,
        pProperties: *mut VkDisplayPlanePropertiesKHR,
    ) -> VkResult,
>;
pub type PFN_vkGetDisplayPlaneSupportedDisplaysKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        physicalDevice: VkPhysicalDevice,
        planeIndex: u32,
        pDisplayCount: *mut u32,
        pDisplays: *mut VkDisplayKHR,
    ) -> VkResult,
>;
pub type PFN_vkGetDisplayModePropertiesKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        physicalDevice: VkPhysicalDevice,
        display: VkDisplayKHR,
        pPropertyCount: *mut u32,
        pProperties: *mut VkDisplayModePropertiesKHR,
    ) -> VkResult,
>;
pub type PFN_vkCreateDisplayModeKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        physicalDevice: VkPhysicalDevice,
        display: VkDisplayKHR,
        pCreateInfo: *const VkDisplayModeCreateInfoKHR,
        pAllocator: *const VkAllocationCallbacks,
        pMode: *mut VkDisplayModeKHR,
    ) -> VkResult,
>;
pub type PFN_vkGetDisplayPlaneCapabilitiesKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        physicalDevice: VkPhysicalDevice,
        mode: VkDisplayModeKHR,
        planeIndex: u32,
        pCapabilities: *mut VkDisplayPlaneCapabilitiesKHR,
    ) -> VkResult,
>;
pub type PFN_vkCreateDisplayPlaneSurfaceKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        instance: VkInstance,
        pCreateInfo: *const VkDisplaySurfaceCreateInfoKHR,
        pAllocator: *const VkAllocationCallbacks,
        pSurface: *mut VkSurfaceKHR,
    ) -> VkResult,
>;
pub type PFN_vkCreateSharedSwapchainsKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        swapchainCount: u32,
        pCreateInfos: *const VkSwapchainCreateInfoKHR,
        pAllocator: *const VkAllocationCallbacks,
        pSwapchains: *mut VkSwapchainKHR,
    ) -> VkResult,
>;
pub type VkVideoSessionKHR = u64;
pub type VkVideoSessionParametersKHR = u64;
pub type VkQueryResultStatusKHR = ::core::ffi::c_int;
pub type VkVideoCodecOperationFlagBitsKHR = ::core::ffi::c_int;
pub type VkVideoCodecOperationFlagsKHR = VkFlags;
pub type VkVideoChromaSubsamplingFlagBitsKHR = ::core::ffi::c_int;
pub type VkVideoChromaSubsamplingFlagsKHR = VkFlags;
pub type VkVideoComponentBitDepthFlagBitsKHR = ::core::ffi::c_int;
pub type VkVideoComponentBitDepthFlagsKHR = VkFlags;
pub type VkVideoCapabilityFlagBitsKHR = ::core::ffi::c_int;
pub type VkVideoCapabilityFlagsKHR = VkFlags;
pub type VkVideoSessionCreateFlagBitsKHR = ::core::ffi::c_int;
pub type VkVideoSessionCreateFlagsKHR = VkFlags;
pub type VkVideoSessionParametersCreateFlagBitsKHR = ::core::ffi::c_int;
pub type VkVideoSessionParametersCreateFlagsKHR = VkFlags;
pub type VkVideoBeginCodingFlagsKHR = VkFlags;
pub type VkVideoEndCodingFlagsKHR = VkFlags;
pub type VkVideoCodingControlFlagBitsKHR = ::core::ffi::c_int;
pub type VkVideoCodingControlFlagsKHR = VkFlags;
pub type PFN_vkGetPhysicalDeviceVideoCapabilitiesKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        physicalDevice: VkPhysicalDevice,
        pVideoProfile: *const VkVideoProfileInfoKHR,
        pCapabilities: *mut VkVideoCapabilitiesKHR,
    ) -> VkResult,
>;
pub type PFN_vkGetPhysicalDeviceVideoFormatPropertiesKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        physicalDevice: VkPhysicalDevice,
        pVideoFormatInfo: *const VkPhysicalDeviceVideoFormatInfoKHR,
        pVideoFormatPropertyCount: *mut u32,
        pVideoFormatProperties: *mut VkVideoFormatPropertiesKHR,
    ) -> VkResult,
>;
pub type PFN_vkCreateVideoSessionKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pCreateInfo: *const VkVideoSessionCreateInfoKHR,
        pAllocator: *const VkAllocationCallbacks,
        pVideoSession: *mut VkVideoSessionKHR,
    ) -> VkResult,
>;
pub type PFN_vkDestroyVideoSessionKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        videoSession: VkVideoSessionKHR,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkGetVideoSessionMemoryRequirementsKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        videoSession: VkVideoSessionKHR,
        pMemoryRequirementsCount: *mut u32,
        pMemoryRequirements: *mut VkVideoSessionMemoryRequirementsKHR,
    ) -> VkResult,
>;
pub type PFN_vkBindVideoSessionMemoryKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        videoSession: VkVideoSessionKHR,
        bindSessionMemoryInfoCount: u32,
        pBindSessionMemoryInfos: *const VkBindVideoSessionMemoryInfoKHR,
    ) -> VkResult,
>;
pub type PFN_vkCreateVideoSessionParametersKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pCreateInfo: *const VkVideoSessionParametersCreateInfoKHR,
        pAllocator: *const VkAllocationCallbacks,
        pVideoSessionParameters: *mut VkVideoSessionParametersKHR,
    ) -> VkResult,
>;
pub type PFN_vkUpdateVideoSessionParametersKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        videoSessionParameters: VkVideoSessionParametersKHR,
        pUpdateInfo: *const VkVideoSessionParametersUpdateInfoKHR,
    ) -> VkResult,
>;
pub type PFN_vkDestroyVideoSessionParametersKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        videoSessionParameters: VkVideoSessionParametersKHR,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkCmdBeginVideoCodingKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        pBeginInfo: *const VkVideoBeginCodingInfoKHR,
    ),
>;
pub type PFN_vkCmdEndVideoCodingKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        pEndCodingInfo: *const VkVideoEndCodingInfoKHR,
    ),
>;
pub type PFN_vkCmdControlVideoCodingKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        pCodingControlInfo: *const VkVideoCodingControlInfoKHR,
    ),
>;
pub type VkVideoDecodeCapabilityFlagBitsKHR = ::core::ffi::c_int;
pub type VkVideoDecodeCapabilityFlagsKHR = VkFlags;
pub type VkVideoDecodeUsageFlagBitsKHR = ::core::ffi::c_int;
pub type VkVideoDecodeUsageFlagsKHR = VkFlags;
pub type VkVideoDecodeFlagsKHR = VkFlags;
pub type PFN_vkCmdDecodeVideoKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        pDecodeInfo: *const VkVideoDecodeInfoKHR,
    ),
>;
pub type StdVideoH264ChromaFormatIdc = ::core::ffi::c_int;
pub type StdVideoH264ProfileIdc = ::core::ffi::c_int;
pub type StdVideoH264LevelIdc = ::core::ffi::c_int;
pub type StdVideoH264PocType = ::core::ffi::c_int;
pub type StdVideoH264AspectRatioIdc = ::core::ffi::c_int;
pub type StdVideoH264WeightedBipredIdc = ::core::ffi::c_int;
pub type StdVideoH264ModificationOfPicNumsIdc = ::core::ffi::c_int;
pub type StdVideoH264MemMgmtControlOp = ::core::ffi::c_int;
pub type StdVideoH264CabacInitIdc = ::core::ffi::c_int;
pub type StdVideoH264DisableDeblockingFilterIdc = ::core::ffi::c_int;
pub type StdVideoH264SliceType = ::core::ffi::c_int;
pub type StdVideoH264PictureType = ::core::ffi::c_int;
pub type VkVideoEncodeH264CapabilityFlagBitsKHR = ::core::ffi::c_int;
pub type VkVideoEncodeH264CapabilityFlagsKHR = VkFlags;
pub type VkVideoEncodeH264StdFlagBitsKHR = ::core::ffi::c_int;
pub type VkVideoEncodeH264StdFlagsKHR = VkFlags;
pub type VkVideoEncodeH264RateControlFlagBitsKHR = ::core::ffi::c_int;
pub type VkVideoEncodeH264RateControlFlagsKHR = VkFlags;
pub type StdVideoH265ChromaFormatIdc = ::core::ffi::c_int;
pub type StdVideoH265ProfileIdc = ::core::ffi::c_int;
pub type StdVideoH265LevelIdc = ::core::ffi::c_int;
pub type StdVideoH265SliceType = ::core::ffi::c_int;
pub type StdVideoH265PictureType = ::core::ffi::c_int;
pub type StdVideoH265AspectRatioIdc = ::core::ffi::c_int;
pub type VkVideoEncodeH265CapabilityFlagBitsKHR = ::core::ffi::c_int;
pub type VkVideoEncodeH265CapabilityFlagsKHR = VkFlags;
pub type VkVideoEncodeH265StdFlagBitsKHR = ::core::ffi::c_int;
pub type VkVideoEncodeH265StdFlagsKHR = VkFlags;
pub type VkVideoEncodeH265CtbSizeFlagBitsKHR = ::core::ffi::c_int;
pub type VkVideoEncodeH265CtbSizeFlagsKHR = VkFlags;
pub type VkVideoEncodeH265TransformBlockSizeFlagBitsKHR = ::core::ffi::c_int;
pub type VkVideoEncodeH265TransformBlockSizeFlagsKHR = VkFlags;
pub type VkVideoEncodeH265RateControlFlagBitsKHR = ::core::ffi::c_int;
pub type VkVideoEncodeH265RateControlFlagsKHR = VkFlags;
pub type VkVideoDecodeH264PictureLayoutFlagBitsKHR = ::core::ffi::c_int;
pub type VkVideoDecodeH264PictureLayoutFlagsKHR = VkFlags;
pub type VkRenderingFlagsKHR = VkRenderingFlags;
pub type VkRenderingInfoKHR = VkRenderingInfo;
pub type VkRenderingAttachmentInfoKHR = VkRenderingAttachmentInfo;
pub type VkPipelineRenderingCreateInfoKHR = VkPipelineRenderingCreateInfo;
pub type VkPhysicalDeviceDynamicRenderingFeaturesKHR = VkPhysicalDeviceDynamicRenderingFeatures;
pub type VkCommandBufferInheritanceRenderingInfoKHR = VkCommandBufferInheritanceRenderingInfo;
pub type PFN_vkCmdBeginRenderingKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        pRenderingInfo: *const VkRenderingInfo,
    ),
>;
pub type PFN_vkCmdEndRenderingKHR =
    ::core::option::Option<unsafe extern "stdcall" fn(commandBuffer: VkCommandBuffer)>;
pub type VkRenderPassMultiviewCreateInfoKHR = VkRenderPassMultiviewCreateInfo;
pub type VkPhysicalDeviceMultiviewFeaturesKHR = VkPhysicalDeviceMultiviewFeatures;
pub type VkPhysicalDeviceMultiviewPropertiesKHR = VkPhysicalDeviceMultiviewProperties;
pub type VkPhysicalDeviceFeatures2KHR = VkPhysicalDeviceFeatures2;
pub type VkPhysicalDeviceProperties2KHR = VkPhysicalDeviceProperties2;
pub type VkFormatProperties2KHR = VkFormatProperties2;
pub type VkImageFormatProperties2KHR = VkImageFormatProperties2;
pub type VkPhysicalDeviceImageFormatInfo2KHR = VkPhysicalDeviceImageFormatInfo2;
pub type VkQueueFamilyProperties2KHR = VkQueueFamilyProperties2;
pub type VkPhysicalDeviceMemoryProperties2KHR = VkPhysicalDeviceMemoryProperties2;
pub type VkSparseImageFormatProperties2KHR = VkSparseImageFormatProperties2;
pub type VkPhysicalDeviceSparseImageFormatInfo2KHR = VkPhysicalDeviceSparseImageFormatInfo2;
pub type PFN_vkGetPhysicalDeviceFeatures2KHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        physicalDevice: VkPhysicalDevice,
        pFeatures: *mut VkPhysicalDeviceFeatures2,
    ),
>;
pub type PFN_vkGetPhysicalDeviceProperties2KHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        physicalDevice: VkPhysicalDevice,
        pProperties: *mut VkPhysicalDeviceProperties2,
    ),
>;
pub type PFN_vkGetPhysicalDeviceFormatProperties2KHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        physicalDevice: VkPhysicalDevice,
        format: VkFormat,
        pFormatProperties: *mut VkFormatProperties2,
    ),
>;
pub type PFN_vkGetPhysicalDeviceImageFormatProperties2KHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        physicalDevice: VkPhysicalDevice,
        pImageFormatInfo: *const VkPhysicalDeviceImageFormatInfo2,
        pImageFormatProperties: *mut VkImageFormatProperties2,
    ) -> VkResult,
>;
pub type PFN_vkGetPhysicalDeviceQueueFamilyProperties2KHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        physicalDevice: VkPhysicalDevice,
        pQueueFamilyPropertyCount: *mut u32,
        pQueueFamilyProperties: *mut VkQueueFamilyProperties2,
    ),
>;
pub type PFN_vkGetPhysicalDeviceMemoryProperties2KHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        physicalDevice: VkPhysicalDevice,
        pMemoryProperties: *mut VkPhysicalDeviceMemoryProperties2,
    ),
>;
pub type PFN_vkGetPhysicalDeviceSparseImageFormatProperties2KHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        physicalDevice: VkPhysicalDevice,
        pFormatInfo: *const VkPhysicalDeviceSparseImageFormatInfo2,
        pPropertyCount: *mut u32,
        pProperties: *mut VkSparseImageFormatProperties2,
    ),
>;
pub type VkPeerMemoryFeatureFlagsKHR = VkPeerMemoryFeatureFlags;
pub type VkMemoryAllocateFlagsKHR = VkMemoryAllocateFlags;
pub type VkMemoryAllocateFlagsInfoKHR = VkMemoryAllocateFlagsInfo;
pub type VkDeviceGroupRenderPassBeginInfoKHR = VkDeviceGroupRenderPassBeginInfo;
pub type VkDeviceGroupCommandBufferBeginInfoKHR = VkDeviceGroupCommandBufferBeginInfo;
pub type VkDeviceGroupSubmitInfoKHR = VkDeviceGroupSubmitInfo;
pub type VkDeviceGroupBindSparseInfoKHR = VkDeviceGroupBindSparseInfo;
pub type VkBindBufferMemoryDeviceGroupInfoKHR = VkBindBufferMemoryDeviceGroupInfo;
pub type VkBindImageMemoryDeviceGroupInfoKHR = VkBindImageMemoryDeviceGroupInfo;
pub type PFN_vkGetDeviceGroupPeerMemoryFeaturesKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        heapIndex: u32,
        localDeviceIndex: u32,
        remoteDeviceIndex: u32,
        pPeerMemoryFeatures: *mut VkPeerMemoryFeatureFlags,
    ),
>;
pub type PFN_vkCmdSetDeviceMaskKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(commandBuffer: VkCommandBuffer, deviceMask: u32),
>;
pub type PFN_vkCmdDispatchBaseKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        baseGroupX: u32,
        baseGroupY: u32,
        baseGroupZ: u32,
        groupCountX: u32,
        groupCountY: u32,
        groupCountZ: u32,
    ),
>;
pub type VkCommandPoolTrimFlagsKHR = VkCommandPoolTrimFlags;
pub type PFN_vkTrimCommandPoolKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        commandPool: VkCommandPool,
        flags: VkCommandPoolTrimFlags,
    ),
>;
pub type VkPhysicalDeviceGroupPropertiesKHR = VkPhysicalDeviceGroupProperties;
pub type VkDeviceGroupDeviceCreateInfoKHR = VkDeviceGroupDeviceCreateInfo;
pub type PFN_vkEnumeratePhysicalDeviceGroupsKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        instance: VkInstance,
        pPhysicalDeviceGroupCount: *mut u32,
        pPhysicalDeviceGroupProperties: *mut VkPhysicalDeviceGroupProperties,
    ) -> VkResult,
>;
pub type VkExternalMemoryHandleTypeFlagsKHR = VkExternalMemoryHandleTypeFlags;
pub type VkExternalMemoryFeatureFlagsKHR = VkExternalMemoryFeatureFlags;
pub type VkExternalMemoryPropertiesKHR = VkExternalMemoryProperties;
pub type VkPhysicalDeviceExternalImageFormatInfoKHR = VkPhysicalDeviceExternalImageFormatInfo;
pub type VkExternalImageFormatPropertiesKHR = VkExternalImageFormatProperties;
pub type VkPhysicalDeviceExternalBufferInfoKHR = VkPhysicalDeviceExternalBufferInfo;
pub type VkExternalBufferPropertiesKHR = VkExternalBufferProperties;
pub type VkPhysicalDeviceIDPropertiesKHR = VkPhysicalDeviceIDProperties;
pub type PFN_vkGetPhysicalDeviceExternalBufferPropertiesKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        physicalDevice: VkPhysicalDevice,
        pExternalBufferInfo: *const VkPhysicalDeviceExternalBufferInfo,
        pExternalBufferProperties: *mut VkExternalBufferProperties,
    ),
>;
pub type VkExternalMemoryImageCreateInfoKHR = VkExternalMemoryImageCreateInfo;
pub type VkExternalMemoryBufferCreateInfoKHR = VkExternalMemoryBufferCreateInfo;
pub type VkExportMemoryAllocateInfoKHR = VkExportMemoryAllocateInfo;
pub type PFN_vkGetMemoryFdKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pGetFdInfo: *const VkMemoryGetFdInfoKHR,
        pFd: *mut ::core::ffi::c_int,
    ) -> VkResult,
>;
pub type PFN_vkGetMemoryFdPropertiesKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        handleType: VkExternalMemoryHandleTypeFlagBits,
        fd: ::core::ffi::c_int,
        pMemoryFdProperties: *mut VkMemoryFdPropertiesKHR,
    ) -> VkResult,
>;
pub type VkExternalSemaphoreHandleTypeFlagsKHR = VkExternalSemaphoreHandleTypeFlags;
pub type VkExternalSemaphoreFeatureFlagsKHR = VkExternalSemaphoreFeatureFlags;
pub type VkPhysicalDeviceExternalSemaphoreInfoKHR = VkPhysicalDeviceExternalSemaphoreInfo;
pub type VkExternalSemaphorePropertiesKHR = VkExternalSemaphoreProperties;
pub type PFN_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        physicalDevice: VkPhysicalDevice,
        pExternalSemaphoreInfo: *const VkPhysicalDeviceExternalSemaphoreInfo,
        pExternalSemaphoreProperties: *mut VkExternalSemaphoreProperties,
    ),
>;
pub type VkSemaphoreImportFlagsKHR = VkSemaphoreImportFlags;
pub type VkExportSemaphoreCreateInfoKHR = VkExportSemaphoreCreateInfo;
pub type PFN_vkImportSemaphoreFdKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pImportSemaphoreFdInfo: *const VkImportSemaphoreFdInfoKHR,
    ) -> VkResult,
>;
pub type PFN_vkGetSemaphoreFdKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pGetFdInfo: *const VkSemaphoreGetFdInfoKHR,
        pFd: *mut ::core::ffi::c_int,
    ) -> VkResult,
>;
pub type VkPhysicalDevicePushDescriptorPropertiesKHR = VkPhysicalDevicePushDescriptorProperties;
pub type PFN_vkCmdPushDescriptorSetKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        pipelineBindPoint: VkPipelineBindPoint,
        layout: VkPipelineLayout,
        set: u32,
        descriptorWriteCount: u32,
        pDescriptorWrites: *const VkWriteDescriptorSet,
    ),
>;
pub type PFN_vkCmdPushDescriptorSetWithTemplateKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        descriptorUpdateTemplate: VkDescriptorUpdateTemplate,
        layout: VkPipelineLayout,
        set: u32,
        pData: *const ::core::ffi::c_void,
    ),
>;
pub type VkPhysicalDeviceShaderFloat16Int8FeaturesKHR = VkPhysicalDeviceShaderFloat16Int8Features;
pub type VkPhysicalDeviceFloat16Int8FeaturesKHR = VkPhysicalDeviceShaderFloat16Int8Features;
pub type VkPhysicalDevice16BitStorageFeaturesKHR = VkPhysicalDevice16BitStorageFeatures;
pub type VkDescriptorUpdateTemplateKHR = VkDescriptorUpdateTemplate;
pub type VkDescriptorUpdateTemplateCreateFlagsKHR = VkDescriptorUpdateTemplateCreateFlags;
pub type VkDescriptorUpdateTemplateEntryKHR = VkDescriptorUpdateTemplateEntry;
pub type VkDescriptorUpdateTemplateCreateInfoKHR = VkDescriptorUpdateTemplateCreateInfo;
pub type PFN_vkCreateDescriptorUpdateTemplateKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pCreateInfo: *const VkDescriptorUpdateTemplateCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pDescriptorUpdateTemplate: *mut VkDescriptorUpdateTemplate,
    ) -> VkResult,
>;
pub type PFN_vkDestroyDescriptorUpdateTemplateKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        descriptorUpdateTemplate: VkDescriptorUpdateTemplate,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkUpdateDescriptorSetWithTemplateKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        descriptorSet: VkDescriptorSet,
        descriptorUpdateTemplate: VkDescriptorUpdateTemplate,
        pData: *const ::core::ffi::c_void,
    ),
>;
pub type VkPhysicalDeviceImagelessFramebufferFeaturesKHR =
    VkPhysicalDeviceImagelessFramebufferFeatures;
pub type VkFramebufferAttachmentsCreateInfoKHR = VkFramebufferAttachmentsCreateInfo;
pub type VkFramebufferAttachmentImageInfoKHR = VkFramebufferAttachmentImageInfo;
pub type VkRenderPassAttachmentBeginInfoKHR = VkRenderPassAttachmentBeginInfo;
pub type VkRenderPassCreateInfo2KHR = VkRenderPassCreateInfo2;
pub type VkAttachmentDescription2KHR = VkAttachmentDescription2;
pub type VkAttachmentReference2KHR = VkAttachmentReference2;
pub type VkSubpassDescription2KHR = VkSubpassDescription2;
pub type VkSubpassDependency2KHR = VkSubpassDependency2;
pub type VkSubpassBeginInfoKHR = VkSubpassBeginInfo;
pub type VkSubpassEndInfoKHR = VkSubpassEndInfo;
pub type PFN_vkCreateRenderPass2KHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pCreateInfo: *const VkRenderPassCreateInfo2,
        pAllocator: *const VkAllocationCallbacks,
        pRenderPass: *mut VkRenderPass,
    ) -> VkResult,
>;
pub type PFN_vkCmdBeginRenderPass2KHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        pRenderPassBegin: *const VkRenderPassBeginInfo,
        pSubpassBeginInfo: *const VkSubpassBeginInfo,
    ),
>;
pub type PFN_vkCmdNextSubpass2KHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        pSubpassBeginInfo: *const VkSubpassBeginInfo,
        pSubpassEndInfo: *const VkSubpassEndInfo,
    ),
>;
pub type PFN_vkCmdEndRenderPass2KHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        pSubpassEndInfo: *const VkSubpassEndInfo,
    ),
>;
pub type PFN_vkGetSwapchainStatusKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(device: VkDevice, swapchain: VkSwapchainKHR) -> VkResult,
>;
pub type VkExternalFenceHandleTypeFlagsKHR = VkExternalFenceHandleTypeFlags;
pub type VkExternalFenceFeatureFlagsKHR = VkExternalFenceFeatureFlags;
pub type VkPhysicalDeviceExternalFenceInfoKHR = VkPhysicalDeviceExternalFenceInfo;
pub type VkExternalFencePropertiesKHR = VkExternalFenceProperties;
pub type PFN_vkGetPhysicalDeviceExternalFencePropertiesKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        physicalDevice: VkPhysicalDevice,
        pExternalFenceInfo: *const VkPhysicalDeviceExternalFenceInfo,
        pExternalFenceProperties: *mut VkExternalFenceProperties,
    ),
>;
pub type VkFenceImportFlagsKHR = VkFenceImportFlags;
pub type VkExportFenceCreateInfoKHR = VkExportFenceCreateInfo;
pub type PFN_vkImportFenceFdKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pImportFenceFdInfo: *const VkImportFenceFdInfoKHR,
    ) -> VkResult,
>;
pub type PFN_vkGetFenceFdKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pGetFdInfo: *const VkFenceGetFdInfoKHR,
        pFd: *mut ::core::ffi::c_int,
    ) -> VkResult,
>;
pub type VkPerformanceCounterUnitKHR = ::core::ffi::c_int;
pub type VkPerformanceCounterScopeKHR = ::core::ffi::c_int;
pub type VkPerformanceCounterStorageKHR = ::core::ffi::c_int;
pub type VkPerformanceCounterDescriptionFlagBitsKHR = ::core::ffi::c_int;
pub type VkPerformanceCounterDescriptionFlagsKHR = VkFlags;
pub type VkAcquireProfilingLockFlagBitsKHR = ::core::ffi::c_int;
pub type VkAcquireProfilingLockFlagsKHR = VkFlags;
pub type PFN_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR =
    ::core::option::Option<
        unsafe extern "stdcall" fn(
            physicalDevice: VkPhysicalDevice,
            queueFamilyIndex: u32,
            pCounterCount: *mut u32,
            pCounters: *mut VkPerformanceCounterKHR,
            pCounterDescriptions: *mut VkPerformanceCounterDescriptionKHR,
        ) -> VkResult,
    >;
pub type PFN_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        physicalDevice: VkPhysicalDevice,
        pPerformanceQueryCreateInfo: *const VkQueryPoolPerformanceCreateInfoKHR,
        pNumPasses: *mut u32,
    ),
>;
pub type PFN_vkAcquireProfilingLockKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pInfo: *const VkAcquireProfilingLockInfoKHR,
    ) -> VkResult,
>;
pub type PFN_vkReleaseProfilingLockKHR =
    ::core::option::Option<unsafe extern "stdcall" fn(device: VkDevice)>;
pub type VkPhysicalDevicePointClippingPropertiesKHR = VkPhysicalDevicePointClippingProperties;
pub type VkRenderPassInputAttachmentAspectCreateInfoKHR =
    VkRenderPassInputAttachmentAspectCreateInfo;
pub type VkInputAttachmentAspectReferenceKHR = VkInputAttachmentAspectReference;
pub type VkImageViewUsageCreateInfoKHR = VkImageViewUsageCreateInfo;
pub type VkPipelineTessellationDomainOriginStateCreateInfoKHR =
    VkPipelineTessellationDomainOriginStateCreateInfo;
pub type PFN_vkGetPhysicalDeviceSurfaceCapabilities2KHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        physicalDevice: VkPhysicalDevice,
        pSurfaceInfo: *const VkPhysicalDeviceSurfaceInfo2KHR,
        pSurfaceCapabilities: *mut VkSurfaceCapabilities2KHR,
    ) -> VkResult,
>;
pub type PFN_vkGetPhysicalDeviceSurfaceFormats2KHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        physicalDevice: VkPhysicalDevice,
        pSurfaceInfo: *const VkPhysicalDeviceSurfaceInfo2KHR,
        pSurfaceFormatCount: *mut u32,
        pSurfaceFormats: *mut VkSurfaceFormat2KHR,
    ) -> VkResult,
>;
pub type VkPhysicalDeviceVariablePointerFeaturesKHR = VkPhysicalDeviceVariablePointersFeatures;
pub type VkPhysicalDeviceVariablePointersFeaturesKHR = VkPhysicalDeviceVariablePointersFeatures;
pub type PFN_vkGetPhysicalDeviceDisplayProperties2KHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        physicalDevice: VkPhysicalDevice,
        pPropertyCount: *mut u32,
        pProperties: *mut VkDisplayProperties2KHR,
    ) -> VkResult,
>;
pub type PFN_vkGetPhysicalDeviceDisplayPlaneProperties2KHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        physicalDevice: VkPhysicalDevice,
        pPropertyCount: *mut u32,
        pProperties: *mut VkDisplayPlaneProperties2KHR,
    ) -> VkResult,
>;
pub type PFN_vkGetDisplayModeProperties2KHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        physicalDevice: VkPhysicalDevice,
        display: VkDisplayKHR,
        pPropertyCount: *mut u32,
        pProperties: *mut VkDisplayModeProperties2KHR,
    ) -> VkResult,
>;
pub type PFN_vkGetDisplayPlaneCapabilities2KHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        physicalDevice: VkPhysicalDevice,
        pDisplayPlaneInfo: *const VkDisplayPlaneInfo2KHR,
        pCapabilities: *mut VkDisplayPlaneCapabilities2KHR,
    ) -> VkResult,
>;
pub type VkMemoryDedicatedRequirementsKHR = VkMemoryDedicatedRequirements;
pub type VkMemoryDedicatedAllocateInfoKHR = VkMemoryDedicatedAllocateInfo;
pub type VkBufferMemoryRequirementsInfo2KHR = VkBufferMemoryRequirementsInfo2;
pub type VkImageMemoryRequirementsInfo2KHR = VkImageMemoryRequirementsInfo2;
pub type VkImageSparseMemoryRequirementsInfo2KHR = VkImageSparseMemoryRequirementsInfo2;
pub type VkMemoryRequirements2KHR = VkMemoryRequirements2;
pub type VkSparseImageMemoryRequirements2KHR = VkSparseImageMemoryRequirements2;
pub type PFN_vkGetImageMemoryRequirements2KHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pInfo: *const VkImageMemoryRequirementsInfo2,
        pMemoryRequirements: *mut VkMemoryRequirements2,
    ),
>;
pub type PFN_vkGetBufferMemoryRequirements2KHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pInfo: *const VkBufferMemoryRequirementsInfo2,
        pMemoryRequirements: *mut VkMemoryRequirements2,
    ),
>;
pub type PFN_vkGetImageSparseMemoryRequirements2KHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pInfo: *const VkImageSparseMemoryRequirementsInfo2,
        pSparseMemoryRequirementCount: *mut u32,
        pSparseMemoryRequirements: *mut VkSparseImageMemoryRequirements2,
    ),
>;
pub type VkImageFormatListCreateInfoKHR = VkImageFormatListCreateInfo;
pub type VkSamplerYcbcrConversionKHR = VkSamplerYcbcrConversion;
pub type VkSamplerYcbcrConversionCreateInfoKHR = VkSamplerYcbcrConversionCreateInfo;
pub type VkSamplerYcbcrConversionInfoKHR = VkSamplerYcbcrConversionInfo;
pub type VkBindImagePlaneMemoryInfoKHR = VkBindImagePlaneMemoryInfo;
pub type VkImagePlaneMemoryRequirementsInfoKHR = VkImagePlaneMemoryRequirementsInfo;
pub type VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR =
    VkPhysicalDeviceSamplerYcbcrConversionFeatures;
pub type VkSamplerYcbcrConversionImageFormatPropertiesKHR =
    VkSamplerYcbcrConversionImageFormatProperties;
pub type PFN_vkCreateSamplerYcbcrConversionKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pCreateInfo: *const VkSamplerYcbcrConversionCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pYcbcrConversion: *mut VkSamplerYcbcrConversion,
    ) -> VkResult,
>;
pub type PFN_vkDestroySamplerYcbcrConversionKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        ycbcrConversion: VkSamplerYcbcrConversion,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type VkBindBufferMemoryInfoKHR = VkBindBufferMemoryInfo;
pub type VkBindImageMemoryInfoKHR = VkBindImageMemoryInfo;
pub type PFN_vkBindBufferMemory2KHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        bindInfoCount: u32,
        pBindInfos: *const VkBindBufferMemoryInfo,
    ) -> VkResult,
>;
pub type PFN_vkBindImageMemory2KHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        bindInfoCount: u32,
        pBindInfos: *const VkBindImageMemoryInfo,
    ) -> VkResult,
>;
pub type VkPhysicalDeviceMaintenance3PropertiesKHR = VkPhysicalDeviceMaintenance3Properties;
pub type VkDescriptorSetLayoutSupportKHR = VkDescriptorSetLayoutSupport;
pub type PFN_vkGetDescriptorSetLayoutSupportKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pCreateInfo: *const VkDescriptorSetLayoutCreateInfo,
        pSupport: *mut VkDescriptorSetLayoutSupport,
    ),
>;
pub type PFN_vkCmdDrawIndirectCountKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        buffer: VkBuffer,
        offset: VkDeviceSize,
        countBuffer: VkBuffer,
        countBufferOffset: VkDeviceSize,
        maxDrawCount: u32,
        stride: u32,
    ),
>;
pub type PFN_vkCmdDrawIndexedIndirectCountKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        buffer: VkBuffer,
        offset: VkDeviceSize,
        countBuffer: VkBuffer,
        countBufferOffset: VkDeviceSize,
        maxDrawCount: u32,
        stride: u32,
    ),
>;
pub type VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR =
    VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures;
pub type VkPhysicalDevice8BitStorageFeaturesKHR = VkPhysicalDevice8BitStorageFeatures;
pub type VkPhysicalDeviceShaderAtomicInt64FeaturesKHR = VkPhysicalDeviceShaderAtomicInt64Features;
pub type VkDeviceQueueGlobalPriorityCreateInfoKHR = VkDeviceQueueGlobalPriorityCreateInfo;
pub type VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR =
    VkPhysicalDeviceGlobalPriorityQueryFeatures;
pub type VkQueueFamilyGlobalPriorityPropertiesKHR = VkQueueFamilyGlobalPriorityProperties;
pub type VkConformanceVersionKHR = VkConformanceVersion;
pub type VkPhysicalDeviceDriverPropertiesKHR = VkPhysicalDeviceDriverProperties;
pub type VkPhysicalDeviceFloatControlsPropertiesKHR = VkPhysicalDeviceFloatControlsProperties;
pub type VkResolveModeFlagsKHR = VkResolveModeFlags;
pub type VkSubpassDescriptionDepthStencilResolveKHR = VkSubpassDescriptionDepthStencilResolve;
pub type VkPhysicalDeviceDepthStencilResolvePropertiesKHR =
    VkPhysicalDeviceDepthStencilResolveProperties;
pub type VkSemaphoreWaitFlagsKHR = VkSemaphoreWaitFlags;
pub type VkPhysicalDeviceTimelineSemaphoreFeaturesKHR = VkPhysicalDeviceTimelineSemaphoreFeatures;
pub type VkPhysicalDeviceTimelineSemaphorePropertiesKHR =
    VkPhysicalDeviceTimelineSemaphoreProperties;
pub type VkSemaphoreTypeCreateInfoKHR = VkSemaphoreTypeCreateInfo;
pub type VkTimelineSemaphoreSubmitInfoKHR = VkTimelineSemaphoreSubmitInfo;
pub type VkSemaphoreWaitInfoKHR = VkSemaphoreWaitInfo;
pub type VkSemaphoreSignalInfoKHR = VkSemaphoreSignalInfo;
pub type PFN_vkGetSemaphoreCounterValueKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        semaphore: VkSemaphore,
        pValue: *mut u64,
    ) -> VkResult,
>;
pub type PFN_vkWaitSemaphoresKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pWaitInfo: *const VkSemaphoreWaitInfo,
        timeout: u64,
    ) -> VkResult,
>;
pub type PFN_vkSignalSemaphoreKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pSignalInfo: *const VkSemaphoreSignalInfo,
    ) -> VkResult,
>;
pub type VkPhysicalDeviceVulkanMemoryModelFeaturesKHR = VkPhysicalDeviceVulkanMemoryModelFeatures;
pub type VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR =
    VkPhysicalDeviceShaderTerminateInvocationFeatures;
pub type VkFragmentShadingRateCombinerOpKHR = ::core::ffi::c_int;
pub type PFN_vkGetPhysicalDeviceFragmentShadingRatesKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        physicalDevice: VkPhysicalDevice,
        pFragmentShadingRateCount: *mut u32,
        pFragmentShadingRates: *mut VkPhysicalDeviceFragmentShadingRateKHR,
    ) -> VkResult,
>;
pub type PFN_vkCmdSetFragmentShadingRateKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        pFragmentSize: *const VkExtent2D,
        combinerOps: *const VkFragmentShadingRateCombinerOpKHR,
    ),
>;
pub type VkPhysicalDeviceDynamicRenderingLocalReadFeaturesKHR =
    VkPhysicalDeviceDynamicRenderingLocalReadFeatures;
pub type VkRenderingAttachmentLocationInfoKHR = VkRenderingAttachmentLocationInfo;
pub type VkRenderingInputAttachmentIndexInfoKHR = VkRenderingInputAttachmentIndexInfo;
pub type PFN_vkCmdSetRenderingAttachmentLocationsKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        pLocationInfo: *const VkRenderingAttachmentLocationInfo,
    ),
>;
pub type PFN_vkCmdSetRenderingInputAttachmentIndicesKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        pInputAttachmentIndexInfo: *const VkRenderingInputAttachmentIndexInfo,
    ),
>;
pub type VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR =
    VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures;
pub type VkAttachmentReferenceStencilLayoutKHR = VkAttachmentReferenceStencilLayout;
pub type VkAttachmentDescriptionStencilLayoutKHR = VkAttachmentDescriptionStencilLayout;
pub type PFN_vkWaitForPresentKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        swapchain: VkSwapchainKHR,
        presentId: u64,
        timeout: u64,
    ) -> VkResult,
>;
pub type VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR =
    VkPhysicalDeviceUniformBufferStandardLayoutFeatures;
pub type VkPhysicalDeviceBufferDeviceAddressFeaturesKHR =
    VkPhysicalDeviceBufferDeviceAddressFeatures;
pub type VkBufferDeviceAddressInfoKHR = VkBufferDeviceAddressInfo;
pub type VkBufferOpaqueCaptureAddressCreateInfoKHR = VkBufferOpaqueCaptureAddressCreateInfo;
pub type VkMemoryOpaqueCaptureAddressAllocateInfoKHR = VkMemoryOpaqueCaptureAddressAllocateInfo;
pub type VkDeviceMemoryOpaqueCaptureAddressInfoKHR = VkDeviceMemoryOpaqueCaptureAddressInfo;
pub type PFN_vkGetBufferDeviceAddressKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pInfo: *const VkBufferDeviceAddressInfo,
    ) -> VkDeviceAddress,
>;
pub type PFN_vkGetBufferOpaqueCaptureAddressKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(device: VkDevice, pInfo: *const VkBufferDeviceAddressInfo) -> u64,
>;
pub type PFN_vkGetDeviceMemoryOpaqueCaptureAddressKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pInfo: *const VkDeviceMemoryOpaqueCaptureAddressInfo,
    ) -> u64,
>;
pub type VkDeferredOperationKHR = u64;
pub type PFN_vkCreateDeferredOperationKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pAllocator: *const VkAllocationCallbacks,
        pDeferredOperation: *mut VkDeferredOperationKHR,
    ) -> VkResult,
>;
pub type PFN_vkDestroyDeferredOperationKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        operation: VkDeferredOperationKHR,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkGetDeferredOperationMaxConcurrencyKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(device: VkDevice, operation: VkDeferredOperationKHR) -> u32,
>;
pub type PFN_vkGetDeferredOperationResultKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(device: VkDevice, operation: VkDeferredOperationKHR) -> VkResult,
>;
pub type PFN_vkDeferredOperationJoinKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(device: VkDevice, operation: VkDeferredOperationKHR) -> VkResult,
>;
pub type VkPipelineExecutableStatisticFormatKHR = ::core::ffi::c_int;
pub type PFN_vkGetPipelineExecutablePropertiesKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pPipelineInfo: *const VkPipelineInfoKHR,
        pExecutableCount: *mut u32,
        pProperties: *mut VkPipelineExecutablePropertiesKHR,
    ) -> VkResult,
>;
pub type PFN_vkGetPipelineExecutableStatisticsKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pExecutableInfo: *const VkPipelineExecutableInfoKHR,
        pStatisticCount: *mut u32,
        pStatistics: *mut VkPipelineExecutableStatisticKHR,
    ) -> VkResult,
>;
pub type PFN_vkGetPipelineExecutableInternalRepresentationsKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pExecutableInfo: *const VkPipelineExecutableInfoKHR,
        pInternalRepresentationCount: *mut u32,
        pInternalRepresentations: *mut VkPipelineExecutableInternalRepresentationKHR,
    ) -> VkResult,
>;
pub type VkMemoryUnmapFlagsKHR = VkMemoryUnmapFlags;
pub type VkMemoryMapInfoKHR = VkMemoryMapInfo;
pub type VkMemoryUnmapInfoKHR = VkMemoryUnmapInfo;
pub type PFN_vkMapMemory2KHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pMemoryMapInfo: *const VkMemoryMapInfo,
        ppData: *mut *mut ::core::ffi::c_void,
    ) -> VkResult,
>;
pub type PFN_vkUnmapMemory2KHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pMemoryUnmapInfo: *const VkMemoryUnmapInfo,
    ) -> VkResult,
>;
pub type VkPhysicalDeviceShaderIntegerDotProductFeaturesKHR =
    VkPhysicalDeviceShaderIntegerDotProductFeatures;
pub type VkPhysicalDeviceShaderIntegerDotProductPropertiesKHR =
    VkPhysicalDeviceShaderIntegerDotProductProperties;
pub type VkVideoEncodeTuningModeKHR = ::core::ffi::c_int;
pub type VkVideoEncodeFlagBitsKHR = ::core::ffi::c_int;
pub type VkVideoEncodeFlagsKHR = VkFlags;
pub type VkVideoEncodeCapabilityFlagBitsKHR = ::core::ffi::c_int;
pub type VkVideoEncodeCapabilityFlagsKHR = VkFlags;
pub type VkVideoEncodeRateControlModeFlagBitsKHR = ::core::ffi::c_int;
pub type VkVideoEncodeRateControlModeFlagsKHR = VkFlags;
pub type VkVideoEncodeFeedbackFlagBitsKHR = ::core::ffi::c_int;
pub type VkVideoEncodeFeedbackFlagsKHR = VkFlags;
pub type VkVideoEncodeUsageFlagBitsKHR = ::core::ffi::c_int;
pub type VkVideoEncodeUsageFlagsKHR = VkFlags;
pub type VkVideoEncodeContentFlagBitsKHR = ::core::ffi::c_int;
pub type VkVideoEncodeContentFlagsKHR = VkFlags;
pub type VkVideoEncodeRateControlFlagsKHR = VkFlags;
pub type PFN_vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        physicalDevice: VkPhysicalDevice,
        pQualityLevelInfo: *const VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR,
        pQualityLevelProperties: *mut VkVideoEncodeQualityLevelPropertiesKHR,
    ) -> VkResult,
>;
pub type PFN_vkGetEncodedVideoSessionParametersKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pVideoSessionParametersInfo: *const VkVideoEncodeSessionParametersGetInfoKHR,
        pFeedbackInfo: *mut VkVideoEncodeSessionParametersFeedbackInfoKHR,
        pDataSize: *mut usize,
        pData: *mut ::core::ffi::c_void,
    ) -> VkResult,
>;
pub type PFN_vkCmdEncodeVideoKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        pEncodeInfo: *const VkVideoEncodeInfoKHR,
    ),
>;
pub type VkPipelineStageFlags2KHR = VkPipelineStageFlags2;
pub type VkPipelineStageFlagBits2KHR = VkPipelineStageFlagBits2;
pub type VkAccessFlags2KHR = VkAccessFlags2;
pub type VkAccessFlagBits2KHR = VkAccessFlagBits2;
pub type VkSubmitFlagsKHR = VkSubmitFlags;
pub type VkMemoryBarrier2KHR = VkMemoryBarrier2;
pub type VkBufferMemoryBarrier2KHR = VkBufferMemoryBarrier2;
pub type VkImageMemoryBarrier2KHR = VkImageMemoryBarrier2;
pub type VkDependencyInfoKHR = VkDependencyInfo;
pub type VkSubmitInfo2KHR = VkSubmitInfo2;
pub type VkSemaphoreSubmitInfoKHR = VkSemaphoreSubmitInfo;
pub type VkCommandBufferSubmitInfoKHR = VkCommandBufferSubmitInfo;
pub type VkPhysicalDeviceSynchronization2FeaturesKHR = VkPhysicalDeviceSynchronization2Features;
pub type PFN_vkCmdSetEvent2KHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        event: VkEvent,
        pDependencyInfo: *const VkDependencyInfo,
    ),
>;
pub type PFN_vkCmdResetEvent2KHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        event: VkEvent,
        stageMask: VkPipelineStageFlags2,
    ),
>;
pub type PFN_vkCmdWaitEvents2KHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        eventCount: u32,
        pEvents: *const VkEvent,
        pDependencyInfos: *const VkDependencyInfo,
    ),
>;
pub type PFN_vkCmdPipelineBarrier2KHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        pDependencyInfo: *const VkDependencyInfo,
    ),
>;
pub type PFN_vkCmdWriteTimestamp2KHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        stage: VkPipelineStageFlags2,
        queryPool: VkQueryPool,
        query: u32,
    ),
>;
pub type PFN_vkQueueSubmit2KHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        queue: VkQueue,
        submitCount: u32,
        pSubmits: *const VkSubmitInfo2,
        fence: VkFence,
    ) -> VkResult,
>;
pub type VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR =
    VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures;
pub type VkCopyBufferInfo2KHR = VkCopyBufferInfo2;
pub type VkCopyImageInfo2KHR = VkCopyImageInfo2;
pub type VkCopyBufferToImageInfo2KHR = VkCopyBufferToImageInfo2;
pub type VkCopyImageToBufferInfo2KHR = VkCopyImageToBufferInfo2;
pub type VkBlitImageInfo2KHR = VkBlitImageInfo2;
pub type VkResolveImageInfo2KHR = VkResolveImageInfo2;
pub type VkBufferCopy2KHR = VkBufferCopy2;
pub type VkImageCopy2KHR = VkImageCopy2;
pub type VkImageBlit2KHR = VkImageBlit2;
pub type VkBufferImageCopy2KHR = VkBufferImageCopy2;
pub type VkImageResolve2KHR = VkImageResolve2;
pub type PFN_vkCmdCopyBuffer2KHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        pCopyBufferInfo: *const VkCopyBufferInfo2,
    ),
>;
pub type PFN_vkCmdCopyImage2KHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        pCopyImageInfo: *const VkCopyImageInfo2,
    ),
>;
pub type PFN_vkCmdCopyBufferToImage2KHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        pCopyBufferToImageInfo: *const VkCopyBufferToImageInfo2,
    ),
>;
pub type PFN_vkCmdCopyImageToBuffer2KHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        pCopyImageToBufferInfo: *const VkCopyImageToBufferInfo2,
    ),
>;
pub type PFN_vkCmdBlitImage2KHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        pBlitImageInfo: *const VkBlitImageInfo2,
    ),
>;
pub type PFN_vkCmdResolveImage2KHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        pResolveImageInfo: *const VkResolveImageInfo2,
    ),
>;
pub type VkFormatFeatureFlags2KHR = VkFormatFeatureFlags2;
pub type VkFormatFeatureFlagBits2KHR = VkFormatFeatureFlagBits2;
pub type VkFormatProperties3KHR = VkFormatProperties3;
pub type PFN_vkCmdTraceRaysIndirect2KHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        indirectDeviceAddress: VkDeviceAddress,
    ),
>;
pub type VkPhysicalDeviceMaintenance4FeaturesKHR = VkPhysicalDeviceMaintenance4Features;
pub type VkPhysicalDeviceMaintenance4PropertiesKHR = VkPhysicalDeviceMaintenance4Properties;
pub type VkDeviceBufferMemoryRequirementsKHR = VkDeviceBufferMemoryRequirements;
pub type VkDeviceImageMemoryRequirementsKHR = VkDeviceImageMemoryRequirements;
pub type PFN_vkGetDeviceBufferMemoryRequirementsKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pInfo: *const VkDeviceBufferMemoryRequirements,
        pMemoryRequirements: *mut VkMemoryRequirements2,
    ),
>;
pub type PFN_vkGetDeviceImageMemoryRequirementsKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pInfo: *const VkDeviceImageMemoryRequirements,
        pMemoryRequirements: *mut VkMemoryRequirements2,
    ),
>;
pub type PFN_vkGetDeviceImageSparseMemoryRequirementsKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pInfo: *const VkDeviceImageMemoryRequirements,
        pSparseMemoryRequirementCount: *mut u32,
        pSparseMemoryRequirements: *mut VkSparseImageMemoryRequirements2,
    ),
>;
pub type VkPhysicalDeviceShaderSubgroupRotateFeaturesKHR =
    VkPhysicalDeviceShaderSubgroupRotateFeatures;
pub type VkPipelineCreateFlags2KHR = VkPipelineCreateFlags2;
pub type VkPipelineCreateFlagBits2KHR = VkPipelineCreateFlagBits2;
pub type VkBufferUsageFlags2KHR = VkBufferUsageFlags2;
pub type VkBufferUsageFlagBits2KHR = VkBufferUsageFlagBits2;
pub type VkPhysicalDeviceMaintenance5FeaturesKHR = VkPhysicalDeviceMaintenance5Features;
pub type VkPhysicalDeviceMaintenance5PropertiesKHR = VkPhysicalDeviceMaintenance5Properties;
pub type VkRenderingAreaInfoKHR = VkRenderingAreaInfo;
pub type VkDeviceImageSubresourceInfoKHR = VkDeviceImageSubresourceInfo;
pub type VkImageSubresource2KHR = VkImageSubresource2;
pub type VkSubresourceLayout2KHR = VkSubresourceLayout2;
pub type VkPipelineCreateFlags2CreateInfoKHR = VkPipelineCreateFlags2CreateInfo;
pub type VkBufferUsageFlags2CreateInfoKHR = VkBufferUsageFlags2CreateInfo;
pub type PFN_vkCmdBindIndexBuffer2KHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        buffer: VkBuffer,
        offset: VkDeviceSize,
        size: VkDeviceSize,
        indexType: VkIndexType,
    ),
>;
pub type PFN_vkGetRenderingAreaGranularityKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pRenderingAreaInfo: *const VkRenderingAreaInfo,
        pGranularity: *mut VkExtent2D,
    ),
>;
pub type PFN_vkGetDeviceImageSubresourceLayoutKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pInfo: *const VkDeviceImageSubresourceInfo,
        pLayout: *mut VkSubresourceLayout2,
    ),
>;
pub type PFN_vkGetImageSubresourceLayout2KHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        image: VkImage,
        pSubresource: *const VkImageSubresource2,
        pLayout: *mut VkSubresourceLayout2,
    ),
>;
pub type VkPipelineBinaryKHR = u64;
pub type PFN_vkCreatePipelineBinariesKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pCreateInfo: *const VkPipelineBinaryCreateInfoKHR,
        pAllocator: *const VkAllocationCallbacks,
        pBinaries: *mut VkPipelineBinaryHandlesInfoKHR,
    ) -> VkResult,
>;
pub type PFN_vkDestroyPipelineBinaryKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pipelineBinary: VkPipelineBinaryKHR,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkGetPipelineKeyKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pPipelineCreateInfo: *const VkPipelineCreateInfoKHR,
        pPipelineKey: *mut VkPipelineBinaryKeyKHR,
    ) -> VkResult,
>;
pub type PFN_vkGetPipelineBinaryDataKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pInfo: *const VkPipelineBinaryDataInfoKHR,
        pPipelineBinaryKey: *mut VkPipelineBinaryKeyKHR,
        pPipelineBinaryDataSize: *mut usize,
        pPipelineBinaryData: *mut ::core::ffi::c_void,
    ) -> VkResult,
>;
pub type PFN_vkReleaseCapturedPipelineDataKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pInfo: *const VkReleaseCapturedPipelineDataInfoKHR,
        pAllocator: *const VkAllocationCallbacks,
    ) -> VkResult,
>;
pub type VkComponentTypeKHR = ::core::ffi::c_int;
pub type VkScopeKHR = ::core::ffi::c_int;
pub type PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        physicalDevice: VkPhysicalDevice,
        pPropertyCount: *mut u32,
        pProperties: *mut VkCooperativeMatrixPropertiesKHR,
    ) -> VkResult,
>;
pub type StdVideoAV1Profile = ::core::ffi::c_int;
pub type StdVideoAV1Level = ::core::ffi::c_int;
pub type StdVideoAV1FrameType = ::core::ffi::c_int;
pub type StdVideoAV1InterpolationFilter = ::core::ffi::c_int;
pub type StdVideoAV1TxMode = ::core::ffi::c_int;
pub type StdVideoAV1FrameRestorationType = ::core::ffi::c_int;
pub type StdVideoAV1ColorPrimaries = ::core::ffi::c_int;
pub type StdVideoAV1TransferCharacteristics = ::core::ffi::c_int;
pub type StdVideoAV1MatrixCoefficients = ::core::ffi::c_int;
pub type StdVideoAV1ChromaSamplePosition = ::core::ffi::c_int;
pub type VkVideoEncodeAV1PredictionModeKHR = ::core::ffi::c_int;
pub type VkVideoEncodeAV1RateControlGroupKHR = ::core::ffi::c_int;
pub type VkVideoEncodeAV1CapabilityFlagBitsKHR = ::core::ffi::c_int;
pub type VkVideoEncodeAV1CapabilityFlagsKHR = VkFlags;
pub type VkVideoEncodeAV1StdFlagBitsKHR = ::core::ffi::c_int;
pub type VkVideoEncodeAV1StdFlagsKHR = VkFlags;
pub type VkVideoEncodeAV1SuperblockSizeFlagBitsKHR = ::core::ffi::c_int;
pub type VkVideoEncodeAV1SuperblockSizeFlagsKHR = VkFlags;
pub type VkVideoEncodeAV1RateControlFlagBitsKHR = ::core::ffi::c_int;
pub type VkVideoEncodeAV1RateControlFlagsKHR = VkFlags;
pub type VkPhysicalDeviceVertexAttributeDivisorPropertiesKHR =
    VkPhysicalDeviceVertexAttributeDivisorProperties;
pub type VkVertexInputBindingDivisorDescriptionKHR = VkVertexInputBindingDivisorDescription;
pub type VkPipelineVertexInputDivisorStateCreateInfoKHR =
    VkPipelineVertexInputDivisorStateCreateInfo;
pub type VkPhysicalDeviceVertexAttributeDivisorFeaturesKHR =
    VkPhysicalDeviceVertexAttributeDivisorFeatures;
pub type VkPhysicalDeviceShaderFloatControls2FeaturesKHR =
    VkPhysicalDeviceShaderFloatControls2Features;
pub type VkPhysicalDeviceIndexTypeUint8FeaturesKHR = VkPhysicalDeviceIndexTypeUint8Features;
pub type VkPhysicalDeviceLineRasterizationFeaturesKHR = VkPhysicalDeviceLineRasterizationFeatures;
pub type VkPhysicalDeviceLineRasterizationPropertiesKHR =
    VkPhysicalDeviceLineRasterizationProperties;
pub type VkPipelineRasterizationLineStateCreateInfoKHR = VkPipelineRasterizationLineStateCreateInfo;
pub type PFN_vkCmdSetLineStippleKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        lineStippleFactor: u32,
        lineStipplePattern: u16,
    ),
>;
pub type VkTimeDomainKHR = ::core::ffi::c_int;
pub type PFN_vkGetPhysicalDeviceCalibrateableTimeDomainsKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        physicalDevice: VkPhysicalDevice,
        pTimeDomainCount: *mut u32,
        pTimeDomains: *mut VkTimeDomainKHR,
    ) -> VkResult,
>;
pub type PFN_vkGetCalibratedTimestampsKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        timestampCount: u32,
        pTimestampInfos: *const VkCalibratedTimestampInfoKHR,
        pTimestamps: *mut u64,
        pMaxDeviation: *mut u64,
    ) -> VkResult,
>;
pub type VkPhysicalDeviceShaderExpectAssumeFeaturesKHR = VkPhysicalDeviceShaderExpectAssumeFeatures;
pub type VkPhysicalDeviceMaintenance6FeaturesKHR = VkPhysicalDeviceMaintenance6Features;
pub type VkPhysicalDeviceMaintenance6PropertiesKHR = VkPhysicalDeviceMaintenance6Properties;
pub type VkBindMemoryStatusKHR = VkBindMemoryStatus;
pub type VkBindDescriptorSetsInfoKHR = VkBindDescriptorSetsInfo;
pub type VkPushConstantsInfoKHR = VkPushConstantsInfo;
pub type VkPushDescriptorSetInfoKHR = VkPushDescriptorSetInfo;
pub type VkPushDescriptorSetWithTemplateInfoKHR = VkPushDescriptorSetWithTemplateInfo;
pub type PFN_vkCmdBindDescriptorSets2KHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        pBindDescriptorSetsInfo: *const VkBindDescriptorSetsInfo,
    ),
>;
pub type PFN_vkCmdPushConstants2KHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        pPushConstantsInfo: *const VkPushConstantsInfo,
    ),
>;
pub type PFN_vkCmdPushDescriptorSet2KHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        pPushDescriptorSetInfo: *const VkPushDescriptorSetInfo,
    ),
>;
pub type PFN_vkCmdPushDescriptorSetWithTemplate2KHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        pPushDescriptorSetWithTemplateInfo: *const VkPushDescriptorSetWithTemplateInfo,
    ),
>;
pub type PFN_vkCmdSetDescriptorBufferOffsets2EXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        pSetDescriptorBufferOffsetsInfo: *const VkSetDescriptorBufferOffsetsInfoEXT,
    ),
>;
pub type PFN_vkCmdBindDescriptorBufferEmbeddedSamplers2EXT = :: core :: option :: Option < unsafe extern "stdcall" fn (commandBuffer : VkCommandBuffer , pBindDescriptorBufferEmbeddedSamplersInfo : * const VkBindDescriptorBufferEmbeddedSamplersInfoEXT) > ;
pub type VkPhysicalDeviceLayeredApiKHR = ::core::ffi::c_int;
pub type VkAccessFlags3KHR = VkFlags64;
#[doc = " Flag bits for VkAccessFlagBits3KHR"]
pub type VkAccessFlagBits3KHR = VkFlags64;
pub type VkDebugReportCallbackEXT = u64;
pub type VkDebugReportObjectTypeEXT = ::core::ffi::c_int;
pub type VkDebugReportFlagBitsEXT = ::core::ffi::c_int;
pub type VkDebugReportFlagsEXT = VkFlags;
pub type PFN_vkDebugReportCallbackEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        flags: VkDebugReportFlagsEXT,
        objectType: VkDebugReportObjectTypeEXT,
        object: u64,
        location: usize,
        messageCode: i32,
        pLayerPrefix: *const ::core::ffi::c_char,
        pMessage: *const ::core::ffi::c_char,
        pUserData: *mut ::core::ffi::c_void,
    ) -> VkBool32,
>;
pub type PFN_vkCreateDebugReportCallbackEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        instance: VkInstance,
        pCreateInfo: *const VkDebugReportCallbackCreateInfoEXT,
        pAllocator: *const VkAllocationCallbacks,
        pCallback: *mut VkDebugReportCallbackEXT,
    ) -> VkResult,
>;
pub type PFN_vkDestroyDebugReportCallbackEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        instance: VkInstance,
        callback: VkDebugReportCallbackEXT,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkDebugReportMessageEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        instance: VkInstance,
        flags: VkDebugReportFlagsEXT,
        objectType: VkDebugReportObjectTypeEXT,
        object: u64,
        location: usize,
        messageCode: i32,
        pLayerPrefix: *const ::core::ffi::c_char,
        pMessage: *const ::core::ffi::c_char,
    ),
>;
pub type VkRasterizationOrderAMD = ::core::ffi::c_int;
pub type PFN_vkDebugMarkerSetObjectTagEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pTagInfo: *const VkDebugMarkerObjectTagInfoEXT,
    ) -> VkResult,
>;
pub type PFN_vkDebugMarkerSetObjectNameEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pNameInfo: *const VkDebugMarkerObjectNameInfoEXT,
    ) -> VkResult,
>;
pub type PFN_vkCmdDebugMarkerBeginEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        pMarkerInfo: *const VkDebugMarkerMarkerInfoEXT,
    ),
>;
pub type PFN_vkCmdDebugMarkerEndEXT =
    ::core::option::Option<unsafe extern "stdcall" fn(commandBuffer: VkCommandBuffer)>;
pub type PFN_vkCmdDebugMarkerInsertEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        pMarkerInfo: *const VkDebugMarkerMarkerInfoEXT,
    ),
>;
pub type VkPipelineRasterizationStateStreamCreateFlagsEXT = VkFlags;
pub type PFN_vkCmdBindTransformFeedbackBuffersEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        firstBinding: u32,
        bindingCount: u32,
        pBuffers: *const VkBuffer,
        pOffsets: *const VkDeviceSize,
        pSizes: *const VkDeviceSize,
    ),
>;
pub type PFN_vkCmdBeginTransformFeedbackEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        firstCounterBuffer: u32,
        counterBufferCount: u32,
        pCounterBuffers: *const VkBuffer,
        pCounterBufferOffsets: *const VkDeviceSize,
    ),
>;
pub type PFN_vkCmdEndTransformFeedbackEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        firstCounterBuffer: u32,
        counterBufferCount: u32,
        pCounterBuffers: *const VkBuffer,
        pCounterBufferOffsets: *const VkDeviceSize,
    ),
>;
pub type PFN_vkCmdBeginQueryIndexedEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        queryPool: VkQueryPool,
        query: u32,
        flags: VkQueryControlFlags,
        index: u32,
    ),
>;
pub type PFN_vkCmdEndQueryIndexedEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        queryPool: VkQueryPool,
        query: u32,
        index: u32,
    ),
>;
pub type PFN_vkCmdDrawIndirectByteCountEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        instanceCount: u32,
        firstInstance: u32,
        counterBuffer: VkBuffer,
        counterBufferOffset: VkDeviceSize,
        counterOffset: u32,
        vertexStride: u32,
    ),
>;
pub type VkCuModuleNVX = u64;
pub type VkCuFunctionNVX = u64;
pub type PFN_vkCreateCuModuleNVX = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pCreateInfo: *const VkCuModuleCreateInfoNVX,
        pAllocator: *const VkAllocationCallbacks,
        pModule: *mut VkCuModuleNVX,
    ) -> VkResult,
>;
pub type PFN_vkCreateCuFunctionNVX = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pCreateInfo: *const VkCuFunctionCreateInfoNVX,
        pAllocator: *const VkAllocationCallbacks,
        pFunction: *mut VkCuFunctionNVX,
    ) -> VkResult,
>;
pub type PFN_vkDestroyCuModuleNVX = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        module: VkCuModuleNVX,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkDestroyCuFunctionNVX = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        function: VkCuFunctionNVX,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkCmdCuLaunchKernelNVX = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        pLaunchInfo: *const VkCuLaunchInfoNVX,
    ),
>;
pub type PFN_vkGetImageViewHandleNVX = ::core::option::Option<
    unsafe extern "stdcall" fn(device: VkDevice, pInfo: *const VkImageViewHandleInfoNVX) -> u32,
>;
pub type PFN_vkGetImageViewHandle64NVX = ::core::option::Option<
    unsafe extern "stdcall" fn(device: VkDevice, pInfo: *const VkImageViewHandleInfoNVX) -> u64,
>;
pub type PFN_vkGetImageViewAddressNVX = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        imageView: VkImageView,
        pProperties: *mut VkImageViewAddressPropertiesNVX,
    ) -> VkResult,
>;
pub type PFN_vkCmdDrawIndirectCountAMD = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        buffer: VkBuffer,
        offset: VkDeviceSize,
        countBuffer: VkBuffer,
        countBufferOffset: VkDeviceSize,
        maxDrawCount: u32,
        stride: u32,
    ),
>;
pub type PFN_vkCmdDrawIndexedIndirectCountAMD = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        buffer: VkBuffer,
        offset: VkDeviceSize,
        countBuffer: VkBuffer,
        countBufferOffset: VkDeviceSize,
        maxDrawCount: u32,
        stride: u32,
    ),
>;
pub type VkShaderInfoTypeAMD = ::core::ffi::c_int;
pub type PFN_vkGetShaderInfoAMD = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pipeline: VkPipeline,
        shaderStage: VkShaderStageFlagBits,
        infoType: VkShaderInfoTypeAMD,
        pInfoSize: *mut usize,
        pInfo: *mut ::core::ffi::c_void,
    ) -> VkResult,
>;
pub type VkExternalMemoryHandleTypeFlagBitsNV = ::core::ffi::c_int;
pub type VkExternalMemoryHandleTypeFlagsNV = VkFlags;
pub type VkExternalMemoryFeatureFlagBitsNV = ::core::ffi::c_int;
pub type VkExternalMemoryFeatureFlagsNV = VkFlags;
pub type PFN_vkGetPhysicalDeviceExternalImageFormatPropertiesNV = ::core::option::Option<
    unsafe extern "stdcall" fn(
        physicalDevice: VkPhysicalDevice,
        format: VkFormat,
        type_: VkImageType,
        tiling: VkImageTiling,
        usage: VkImageUsageFlags,
        flags: VkImageCreateFlags,
        externalHandleType: VkExternalMemoryHandleTypeFlagsNV,
        pExternalImageFormatProperties: *mut VkExternalImageFormatPropertiesNV,
    ) -> VkResult,
>;
pub type VkValidationCheckEXT = ::core::ffi::c_int;
pub type VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT =
    VkPhysicalDeviceTextureCompressionASTCHDRFeatures;
pub type VkPhysicalDevicePipelineRobustnessFeaturesEXT = VkPhysicalDevicePipelineRobustnessFeatures;
pub type VkPhysicalDevicePipelineRobustnessPropertiesEXT =
    VkPhysicalDevicePipelineRobustnessProperties;
pub type VkPipelineRobustnessCreateInfoEXT = VkPipelineRobustnessCreateInfo;
pub type VkConditionalRenderingFlagBitsEXT = ::core::ffi::c_int;
pub type VkConditionalRenderingFlagsEXT = VkFlags;
pub type PFN_vkCmdBeginConditionalRenderingEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        pConditionalRenderingBegin: *const VkConditionalRenderingBeginInfoEXT,
    ),
>;
pub type PFN_vkCmdEndConditionalRenderingEXT =
    ::core::option::Option<unsafe extern "stdcall" fn(commandBuffer: VkCommandBuffer)>;
pub type PFN_vkCmdSetViewportWScalingNV = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        firstViewport: u32,
        viewportCount: u32,
        pViewportWScalings: *const VkViewportWScalingNV,
    ),
>;
pub type PFN_vkReleaseDisplayEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(physicalDevice: VkPhysicalDevice, display: VkDisplayKHR) -> VkResult,
>;
pub type VkSurfaceCounterFlagBitsEXT = ::core::ffi::c_int;
pub type VkSurfaceCounterFlagsEXT = VkFlags;
pub type PFN_vkGetPhysicalDeviceSurfaceCapabilities2EXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        physicalDevice: VkPhysicalDevice,
        surface: VkSurfaceKHR,
        pSurfaceCapabilities: *mut VkSurfaceCapabilities2EXT,
    ) -> VkResult,
>;
pub type VkDisplayPowerStateEXT = ::core::ffi::c_int;
pub type VkDeviceEventTypeEXT = ::core::ffi::c_int;
pub type VkDisplayEventTypeEXT = ::core::ffi::c_int;
pub type PFN_vkDisplayPowerControlEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        display: VkDisplayKHR,
        pDisplayPowerInfo: *const VkDisplayPowerInfoEXT,
    ) -> VkResult,
>;
pub type PFN_vkRegisterDeviceEventEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pDeviceEventInfo: *const VkDeviceEventInfoEXT,
        pAllocator: *const VkAllocationCallbacks,
        pFence: *mut VkFence,
    ) -> VkResult,
>;
pub type PFN_vkRegisterDisplayEventEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        display: VkDisplayKHR,
        pDisplayEventInfo: *const VkDisplayEventInfoEXT,
        pAllocator: *const VkAllocationCallbacks,
        pFence: *mut VkFence,
    ) -> VkResult,
>;
pub type PFN_vkGetSwapchainCounterEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        swapchain: VkSwapchainKHR,
        counter: VkSurfaceCounterFlagBitsEXT,
        pCounterValue: *mut u64,
    ) -> VkResult,
>;
pub type PFN_vkGetRefreshCycleDurationGOOGLE = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        swapchain: VkSwapchainKHR,
        pDisplayTimingProperties: *mut VkRefreshCycleDurationGOOGLE,
    ) -> VkResult,
>;
pub type PFN_vkGetPastPresentationTimingGOOGLE = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        swapchain: VkSwapchainKHR,
        pPresentationTimingCount: *mut u32,
        pPresentationTimings: *mut VkPastPresentationTimingGOOGLE,
    ) -> VkResult,
>;
pub type VkViewportCoordinateSwizzleNV = ::core::ffi::c_int;
pub type VkPipelineViewportSwizzleStateCreateFlagsNV = VkFlags;
pub type VkDiscardRectangleModeEXT = ::core::ffi::c_int;
pub type VkPipelineDiscardRectangleStateCreateFlagsEXT = VkFlags;
pub type PFN_vkCmdSetDiscardRectangleEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        firstDiscardRectangle: u32,
        discardRectangleCount: u32,
        pDiscardRectangles: *const VkRect2D,
    ),
>;
pub type PFN_vkCmdSetDiscardRectangleEnableEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(commandBuffer: VkCommandBuffer, discardRectangleEnable: VkBool32),
>;
pub type PFN_vkCmdSetDiscardRectangleModeEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        discardRectangleMode: VkDiscardRectangleModeEXT,
    ),
>;
pub type VkConservativeRasterizationModeEXT = ::core::ffi::c_int;
pub type VkPipelineRasterizationConservativeStateCreateFlagsEXT = VkFlags;
pub type VkPipelineRasterizationDepthClipStateCreateFlagsEXT = VkFlags;
pub type PFN_vkSetHdrMetadataEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        swapchainCount: u32,
        pSwapchains: *const VkSwapchainKHR,
        pMetadata: *const VkHdrMetadataEXT,
    ),
>;
pub type VkDebugUtilsMessengerEXT = u64;
pub type VkDebugUtilsMessengerCallbackDataFlagsEXT = VkFlags;
pub type VkDebugUtilsMessageSeverityFlagBitsEXT = ::core::ffi::c_int;
pub type VkDebugUtilsMessageTypeFlagBitsEXT = ::core::ffi::c_int;
pub type VkDebugUtilsMessageTypeFlagsEXT = VkFlags;
pub type VkDebugUtilsMessageSeverityFlagsEXT = VkFlags;
pub type VkDebugUtilsMessengerCreateFlagsEXT = VkFlags;
pub type PFN_vkDebugUtilsMessengerCallbackEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        messageSeverity: VkDebugUtilsMessageSeverityFlagBitsEXT,
        messageTypes: VkDebugUtilsMessageTypeFlagsEXT,
        pCallbackData: *const VkDebugUtilsMessengerCallbackDataEXT,
        pUserData: *mut ::core::ffi::c_void,
    ) -> VkBool32,
>;
pub type PFN_vkSetDebugUtilsObjectNameEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pNameInfo: *const VkDebugUtilsObjectNameInfoEXT,
    ) -> VkResult,
>;
pub type PFN_vkSetDebugUtilsObjectTagEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pTagInfo: *const VkDebugUtilsObjectTagInfoEXT,
    ) -> VkResult,
>;
pub type PFN_vkQueueBeginDebugUtilsLabelEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(queue: VkQueue, pLabelInfo: *const VkDebugUtilsLabelEXT),
>;
pub type PFN_vkQueueEndDebugUtilsLabelEXT =
    ::core::option::Option<unsafe extern "stdcall" fn(queue: VkQueue)>;
pub type PFN_vkQueueInsertDebugUtilsLabelEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(queue: VkQueue, pLabelInfo: *const VkDebugUtilsLabelEXT),
>;
pub type PFN_vkCmdBeginDebugUtilsLabelEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        pLabelInfo: *const VkDebugUtilsLabelEXT,
    ),
>;
pub type PFN_vkCmdEndDebugUtilsLabelEXT =
    ::core::option::Option<unsafe extern "stdcall" fn(commandBuffer: VkCommandBuffer)>;
pub type PFN_vkCmdInsertDebugUtilsLabelEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        pLabelInfo: *const VkDebugUtilsLabelEXT,
    ),
>;
pub type PFN_vkCreateDebugUtilsMessengerEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        instance: VkInstance,
        pCreateInfo: *const VkDebugUtilsMessengerCreateInfoEXT,
        pAllocator: *const VkAllocationCallbacks,
        pMessenger: *mut VkDebugUtilsMessengerEXT,
    ) -> VkResult,
>;
pub type PFN_vkDestroyDebugUtilsMessengerEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        instance: VkInstance,
        messenger: VkDebugUtilsMessengerEXT,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkSubmitDebugUtilsMessageEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        instance: VkInstance,
        messageSeverity: VkDebugUtilsMessageSeverityFlagBitsEXT,
        messageTypes: VkDebugUtilsMessageTypeFlagsEXT,
        pCallbackData: *const VkDebugUtilsMessengerCallbackDataEXT,
    ),
>;
pub type VkSamplerReductionModeCreateInfoEXT = VkSamplerReductionModeCreateInfo;
pub type VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT =
    VkPhysicalDeviceSamplerFilterMinmaxProperties;
pub type VkPhysicalDeviceInlineUniformBlockFeaturesEXT = VkPhysicalDeviceInlineUniformBlockFeatures;
pub type VkPhysicalDeviceInlineUniformBlockPropertiesEXT =
    VkPhysicalDeviceInlineUniformBlockProperties;
pub type VkWriteDescriptorSetInlineUniformBlockEXT = VkWriteDescriptorSetInlineUniformBlock;
pub type VkDescriptorPoolInlineUniformBlockCreateInfoEXT =
    VkDescriptorPoolInlineUniformBlockCreateInfo;
pub type PFN_vkCmdSetSampleLocationsEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        pSampleLocationsInfo: *const VkSampleLocationsInfoEXT,
    ),
>;
pub type PFN_vkGetPhysicalDeviceMultisamplePropertiesEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        physicalDevice: VkPhysicalDevice,
        samples: VkSampleCountFlagBits,
        pMultisampleProperties: *mut VkMultisamplePropertiesEXT,
    ),
>;
pub type VkBlendOverlapEXT = ::core::ffi::c_int;
pub type VkPipelineCoverageToColorStateCreateFlagsNV = VkFlags;
pub type VkCoverageModulationModeNV = ::core::ffi::c_int;
pub type VkPipelineCoverageModulationStateCreateFlagsNV = VkFlags;
pub type VkAttachmentSampleCountInfoNV = VkAttachmentSampleCountInfoAMD;
pub type PFN_vkGetImageDrmFormatModifierPropertiesEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        image: VkImage,
        pProperties: *mut VkImageDrmFormatModifierPropertiesEXT,
    ) -> VkResult,
>;
pub type VkValidationCacheEXT = u64;
pub type VkValidationCacheHeaderVersionEXT = ::core::ffi::c_int;
pub type VkValidationCacheCreateFlagsEXT = VkFlags;
pub type PFN_vkCreateValidationCacheEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pCreateInfo: *const VkValidationCacheCreateInfoEXT,
        pAllocator: *const VkAllocationCallbacks,
        pValidationCache: *mut VkValidationCacheEXT,
    ) -> VkResult,
>;
pub type PFN_vkDestroyValidationCacheEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        validationCache: VkValidationCacheEXT,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkMergeValidationCachesEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        dstCache: VkValidationCacheEXT,
        srcCacheCount: u32,
        pSrcCaches: *const VkValidationCacheEXT,
    ) -> VkResult,
>;
pub type PFN_vkGetValidationCacheDataEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        validationCache: VkValidationCacheEXT,
        pDataSize: *mut usize,
        pData: *mut ::core::ffi::c_void,
    ) -> VkResult,
>;
pub type VkDescriptorBindingFlagsEXT = VkDescriptorBindingFlags;
pub type VkDescriptorSetLayoutBindingFlagsCreateInfoEXT =
    VkDescriptorSetLayoutBindingFlagsCreateInfo;
pub type VkPhysicalDeviceDescriptorIndexingFeaturesEXT = VkPhysicalDeviceDescriptorIndexingFeatures;
pub type VkPhysicalDeviceDescriptorIndexingPropertiesEXT =
    VkPhysicalDeviceDescriptorIndexingProperties;
pub type VkDescriptorSetVariableDescriptorCountAllocateInfoEXT =
    VkDescriptorSetVariableDescriptorCountAllocateInfo;
pub type VkDescriptorSetVariableDescriptorCountLayoutSupportEXT =
    VkDescriptorSetVariableDescriptorCountLayoutSupport;
pub type VkShadingRatePaletteEntryNV = ::core::ffi::c_int;
pub type VkCoarseSampleOrderTypeNV = ::core::ffi::c_int;
pub type PFN_vkCmdBindShadingRateImageNV = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        imageView: VkImageView,
        imageLayout: VkImageLayout,
    ),
>;
pub type PFN_vkCmdSetViewportShadingRatePaletteNV = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        firstViewport: u32,
        viewportCount: u32,
        pShadingRatePalettes: *const VkShadingRatePaletteNV,
    ),
>;
pub type PFN_vkCmdSetCoarseSampleOrderNV = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        sampleOrderType: VkCoarseSampleOrderTypeNV,
        customSampleOrderCount: u32,
        pCustomSampleOrders: *const VkCoarseSampleOrderCustomNV,
    ),
>;
pub type VkAccelerationStructureNV = u64;
pub type VkRayTracingShaderGroupTypeKHR = ::core::ffi::c_int;
pub type VkGeometryTypeKHR = ::core::ffi::c_int;
pub type VkAccelerationStructureTypeKHR = ::core::ffi::c_int;
pub type VkCopyAccelerationStructureModeKHR = ::core::ffi::c_int;
pub type VkAccelerationStructureMemoryRequirementsTypeNV = ::core::ffi::c_int;
pub type VkGeometryFlagBitsKHR = ::core::ffi::c_int;
pub type VkGeometryFlagsKHR = VkFlags;
pub type VkGeometryFlagsNV = VkGeometryFlagsKHR;
pub type VkGeometryInstanceFlagBitsKHR = ::core::ffi::c_int;
pub type VkGeometryInstanceFlagsKHR = VkFlags;
pub type VkGeometryInstanceFlagsNV = VkGeometryInstanceFlagsKHR;
pub type VkBuildAccelerationStructureFlagBitsKHR = ::core::ffi::c_int;
pub type VkBuildAccelerationStructureFlagsKHR = VkFlags;
pub type VkBuildAccelerationStructureFlagsNV = VkBuildAccelerationStructureFlagsKHR;
pub type VkTransformMatrixNV = VkTransformMatrixKHR;
pub type VkAabbPositionsNV = VkAabbPositionsKHR;
pub type VkAccelerationStructureInstanceNV = VkAccelerationStructureInstanceKHR;
pub type PFN_vkCreateAccelerationStructureNV = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pCreateInfo: *const VkAccelerationStructureCreateInfoNV,
        pAllocator: *const VkAllocationCallbacks,
        pAccelerationStructure: *mut VkAccelerationStructureNV,
    ) -> VkResult,
>;
pub type PFN_vkDestroyAccelerationStructureNV = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        accelerationStructure: VkAccelerationStructureNV,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkGetAccelerationStructureMemoryRequirementsNV = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pInfo: *const VkAccelerationStructureMemoryRequirementsInfoNV,
        pMemoryRequirements: *mut VkMemoryRequirements2KHR,
    ),
>;
pub type PFN_vkBindAccelerationStructureMemoryNV = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        bindInfoCount: u32,
        pBindInfos: *const VkBindAccelerationStructureMemoryInfoNV,
    ) -> VkResult,
>;
pub type PFN_vkCmdBuildAccelerationStructureNV = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        pInfo: *const VkAccelerationStructureInfoNV,
        instanceData: VkBuffer,
        instanceOffset: VkDeviceSize,
        update: VkBool32,
        dst: VkAccelerationStructureNV,
        src: VkAccelerationStructureNV,
        scratch: VkBuffer,
        scratchOffset: VkDeviceSize,
    ),
>;
pub type PFN_vkCmdCopyAccelerationStructureNV = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        dst: VkAccelerationStructureNV,
        src: VkAccelerationStructureNV,
        mode: VkCopyAccelerationStructureModeKHR,
    ),
>;
pub type PFN_vkCmdTraceRaysNV = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        raygenShaderBindingTableBuffer: VkBuffer,
        raygenShaderBindingOffset: VkDeviceSize,
        missShaderBindingTableBuffer: VkBuffer,
        missShaderBindingOffset: VkDeviceSize,
        missShaderBindingStride: VkDeviceSize,
        hitShaderBindingTableBuffer: VkBuffer,
        hitShaderBindingOffset: VkDeviceSize,
        hitShaderBindingStride: VkDeviceSize,
        callableShaderBindingTableBuffer: VkBuffer,
        callableShaderBindingOffset: VkDeviceSize,
        callableShaderBindingStride: VkDeviceSize,
        width: u32,
        height: u32,
        depth: u32,
    ),
>;
pub type PFN_vkCreateRayTracingPipelinesNV = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pipelineCache: VkPipelineCache,
        createInfoCount: u32,
        pCreateInfos: *const VkRayTracingPipelineCreateInfoNV,
        pAllocator: *const VkAllocationCallbacks,
        pPipelines: *mut VkPipeline,
    ) -> VkResult,
>;
pub type PFN_vkGetRayTracingShaderGroupHandlesKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pipeline: VkPipeline,
        firstGroup: u32,
        groupCount: u32,
        dataSize: usize,
        pData: *mut ::core::ffi::c_void,
    ) -> VkResult,
>;
pub type PFN_vkGetRayTracingShaderGroupHandlesNV = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pipeline: VkPipeline,
        firstGroup: u32,
        groupCount: u32,
        dataSize: usize,
        pData: *mut ::core::ffi::c_void,
    ) -> VkResult,
>;
pub type PFN_vkGetAccelerationStructureHandleNV = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        accelerationStructure: VkAccelerationStructureNV,
        dataSize: usize,
        pData: *mut ::core::ffi::c_void,
    ) -> VkResult,
>;
pub type PFN_vkCmdWriteAccelerationStructuresPropertiesNV = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        accelerationStructureCount: u32,
        pAccelerationStructures: *const VkAccelerationStructureNV,
        queryType: VkQueryType,
        queryPool: VkQueryPool,
        firstQuery: u32,
    ),
>;
pub type PFN_vkCompileDeferredNV = ::core::option::Option<
    unsafe extern "stdcall" fn(device: VkDevice, pipeline: VkPipeline, shader: u32) -> VkResult,
>;
pub type VkDeviceQueueGlobalPriorityCreateInfoEXT = VkDeviceQueueGlobalPriorityCreateInfo;
pub type PFN_vkGetMemoryHostPointerPropertiesEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        handleType: VkExternalMemoryHandleTypeFlagBits,
        pHostPointer: *const ::core::ffi::c_void,
        pMemoryHostPointerProperties: *mut VkMemoryHostPointerPropertiesEXT,
    ) -> VkResult,
>;
pub type PFN_vkCmdWriteBufferMarkerAMD = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        pipelineStage: VkPipelineStageFlagBits,
        dstBuffer: VkBuffer,
        dstOffset: VkDeviceSize,
        marker: u32,
    ),
>;
pub type PFN_vkCmdWriteBufferMarker2AMD = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        stage: VkPipelineStageFlags2,
        dstBuffer: VkBuffer,
        dstOffset: VkDeviceSize,
        marker: u32,
    ),
>;
pub type VkPipelineCompilerControlFlagBitsAMD = ::core::ffi::c_int;
pub type VkPipelineCompilerControlFlagsAMD = VkFlags;
pub type VkCalibratedTimestampInfoEXT = VkCalibratedTimestampInfoKHR;
pub type PFN_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        physicalDevice: VkPhysicalDevice,
        pTimeDomainCount: *mut u32,
        pTimeDomains: *mut VkTimeDomainKHR,
    ) -> VkResult,
>;
pub type PFN_vkGetCalibratedTimestampsEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        timestampCount: u32,
        pTimestampInfos: *const VkCalibratedTimestampInfoKHR,
        pTimestamps: *mut u64,
        pMaxDeviation: *mut u64,
    ) -> VkResult,
>;
pub type VkMemoryOverallocationBehaviorAMD = ::core::ffi::c_int;
pub type VkVertexInputBindingDivisorDescriptionEXT = VkVertexInputBindingDivisorDescription;
pub type VkPipelineVertexInputDivisorStateCreateInfoEXT =
    VkPipelineVertexInputDivisorStateCreateInfo;
pub type VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT =
    VkPhysicalDeviceVertexAttributeDivisorFeatures;
pub type VkPipelineCreationFeedbackFlagsEXT = VkPipelineCreationFeedbackFlags;
pub type VkPipelineCreationFeedbackCreateInfoEXT = VkPipelineCreationFeedbackCreateInfo;
pub type VkPipelineCreationFeedbackEXT = VkPipelineCreationFeedback;
pub type VkPhysicalDeviceComputeShaderDerivativesFeaturesNV =
    VkPhysicalDeviceComputeShaderDerivativesFeaturesKHR;
pub type PFN_vkCmdDrawMeshTasksNV = ::core::option::Option<
    unsafe extern "stdcall" fn(commandBuffer: VkCommandBuffer, taskCount: u32, firstTask: u32),
>;
pub type PFN_vkCmdDrawMeshTasksIndirectNV = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        buffer: VkBuffer,
        offset: VkDeviceSize,
        drawCount: u32,
        stride: u32,
    ),
>;
pub type PFN_vkCmdDrawMeshTasksIndirectCountNV = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        buffer: VkBuffer,
        offset: VkDeviceSize,
        countBuffer: VkBuffer,
        countBufferOffset: VkDeviceSize,
        maxDrawCount: u32,
        stride: u32,
    ),
>;
pub type VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV =
    VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR;
pub type PFN_vkCmdSetExclusiveScissorEnableNV = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        firstExclusiveScissor: u32,
        exclusiveScissorCount: u32,
        pExclusiveScissorEnables: *const VkBool32,
    ),
>;
pub type PFN_vkCmdSetExclusiveScissorNV = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        firstExclusiveScissor: u32,
        exclusiveScissorCount: u32,
        pExclusiveScissors: *const VkRect2D,
    ),
>;
pub type PFN_vkCmdSetCheckpointNV = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        pCheckpointMarker: *const ::core::ffi::c_void,
    ),
>;
pub type PFN_vkGetQueueCheckpointDataNV = ::core::option::Option<
    unsafe extern "stdcall" fn(
        queue: VkQueue,
        pCheckpointDataCount: *mut u32,
        pCheckpointData: *mut VkCheckpointDataNV,
    ),
>;
pub type PFN_vkGetQueueCheckpointData2NV = ::core::option::Option<
    unsafe extern "stdcall" fn(
        queue: VkQueue,
        pCheckpointDataCount: *mut u32,
        pCheckpointData: *mut VkCheckpointData2NV,
    ),
>;
pub type VkPerformanceConfigurationINTEL = u64;
pub type VkPerformanceConfigurationTypeINTEL = ::core::ffi::c_int;
pub type VkQueryPoolSamplingModeINTEL = ::core::ffi::c_int;
pub type VkPerformanceOverrideTypeINTEL = ::core::ffi::c_int;
pub type VkPerformanceParameterTypeINTEL = ::core::ffi::c_int;
pub type VkPerformanceValueTypeINTEL = ::core::ffi::c_int;
pub type VkQueryPoolCreateInfoINTEL = VkQueryPoolPerformanceQueryCreateInfoINTEL;
pub type PFN_vkInitializePerformanceApiINTEL = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pInitializeInfo: *const VkInitializePerformanceApiInfoINTEL,
    ) -> VkResult,
>;
pub type PFN_vkUninitializePerformanceApiINTEL =
    ::core::option::Option<unsafe extern "stdcall" fn(device: VkDevice)>;
pub type PFN_vkCmdSetPerformanceMarkerINTEL = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        pMarkerInfo: *const VkPerformanceMarkerInfoINTEL,
    ) -> VkResult,
>;
pub type PFN_vkCmdSetPerformanceStreamMarkerINTEL = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        pMarkerInfo: *const VkPerformanceStreamMarkerInfoINTEL,
    ) -> VkResult,
>;
pub type PFN_vkCmdSetPerformanceOverrideINTEL = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        pOverrideInfo: *const VkPerformanceOverrideInfoINTEL,
    ) -> VkResult,
>;
pub type PFN_vkAcquirePerformanceConfigurationINTEL = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pAcquireInfo: *const VkPerformanceConfigurationAcquireInfoINTEL,
        pConfiguration: *mut VkPerformanceConfigurationINTEL,
    ) -> VkResult,
>;
pub type PFN_vkReleasePerformanceConfigurationINTEL = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        configuration: VkPerformanceConfigurationINTEL,
    ) -> VkResult,
>;
pub type PFN_vkQueueSetPerformanceConfigurationINTEL = ::core::option::Option<
    unsafe extern "stdcall" fn(
        queue: VkQueue,
        configuration: VkPerformanceConfigurationINTEL,
    ) -> VkResult,
>;
pub type PFN_vkGetPerformanceParameterINTEL = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        parameter: VkPerformanceParameterTypeINTEL,
        pValue: *mut VkPerformanceValueINTEL,
    ) -> VkResult,
>;
pub type PFN_vkSetLocalDimmingAMD = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        swapChain: VkSwapchainKHR,
        localDimmingEnable: VkBool32,
    ),
>;
pub type VkPhysicalDeviceScalarBlockLayoutFeaturesEXT = VkPhysicalDeviceScalarBlockLayoutFeatures;
pub type VkPhysicalDeviceSubgroupSizeControlFeaturesEXT =
    VkPhysicalDeviceSubgroupSizeControlFeatures;
pub type VkPhysicalDeviceSubgroupSizeControlPropertiesEXT =
    VkPhysicalDeviceSubgroupSizeControlProperties;
pub type VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT =
    VkPipelineShaderStageRequiredSubgroupSizeCreateInfo;
pub type VkShaderCorePropertiesFlagBitsAMD = ::core::ffi::c_int;
pub type VkShaderCorePropertiesFlagsAMD = VkFlags;
pub type VkPhysicalDeviceBufferAddressFeaturesEXT = VkPhysicalDeviceBufferDeviceAddressFeaturesEXT;
pub type VkBufferDeviceAddressInfoEXT = VkBufferDeviceAddressInfo;
pub type PFN_vkGetBufferDeviceAddressEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pInfo: *const VkBufferDeviceAddressInfo,
    ) -> VkDeviceAddress,
>;
pub type VkToolPurposeFlagsEXT = VkToolPurposeFlags;
pub type VkPhysicalDeviceToolPropertiesEXT = VkPhysicalDeviceToolProperties;
pub type PFN_vkGetPhysicalDeviceToolPropertiesEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        physicalDevice: VkPhysicalDevice,
        pToolCount: *mut u32,
        pToolProperties: *mut VkPhysicalDeviceToolProperties,
    ) -> VkResult,
>;
pub type VkImageStencilUsageCreateInfoEXT = VkImageStencilUsageCreateInfo;
pub type VkValidationFeatureEnableEXT = ::core::ffi::c_int;
pub type VkValidationFeatureDisableEXT = ::core::ffi::c_int;
pub type PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV = ::core::option::Option<
    unsafe extern "stdcall" fn(
        physicalDevice: VkPhysicalDevice,
        pPropertyCount: *mut u32,
        pProperties: *mut VkCooperativeMatrixPropertiesNV,
    ) -> VkResult,
>;
pub type VkCoverageReductionModeNV = ::core::ffi::c_int;
pub type VkPipelineCoverageReductionStateCreateFlagsNV = VkFlags;
pub type PFN_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV =
    ::core::option::Option<
        unsafe extern "stdcall" fn(
            physicalDevice: VkPhysicalDevice,
            pCombinationCount: *mut u32,
            pCombinations: *mut VkFramebufferMixedSamplesCombinationNV,
        ) -> VkResult,
    >;
pub type VkProvokingVertexModeEXT = ::core::ffi::c_int;
pub type VkHeadlessSurfaceCreateFlagsEXT = VkFlags;
pub type PFN_vkCreateHeadlessSurfaceEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        instance: VkInstance,
        pCreateInfo: *const VkHeadlessSurfaceCreateInfoEXT,
        pAllocator: *const VkAllocationCallbacks,
        pSurface: *mut VkSurfaceKHR,
    ) -> VkResult,
>;
pub type VkPhysicalDeviceLineRasterizationFeaturesEXT = VkPhysicalDeviceLineRasterizationFeatures;
pub type VkPhysicalDeviceLineRasterizationPropertiesEXT =
    VkPhysicalDeviceLineRasterizationProperties;
pub type VkPipelineRasterizationLineStateCreateInfoEXT = VkPipelineRasterizationLineStateCreateInfo;
pub type PFN_vkCmdSetLineStippleEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        lineStippleFactor: u32,
        lineStipplePattern: u16,
    ),
>;
pub type VkPhysicalDeviceHostQueryResetFeaturesEXT = VkPhysicalDeviceHostQueryResetFeatures;
pub type PFN_vkResetQueryPoolEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        queryPool: VkQueryPool,
        firstQuery: u32,
        queryCount: u32,
    ),
>;
pub type VkPhysicalDeviceIndexTypeUint8FeaturesEXT = VkPhysicalDeviceIndexTypeUint8Features;
pub type PFN_vkCmdSetCullModeEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(commandBuffer: VkCommandBuffer, cullMode: VkCullModeFlags),
>;
pub type PFN_vkCmdSetFrontFaceEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(commandBuffer: VkCommandBuffer, frontFace: VkFrontFace),
>;
pub type PFN_vkCmdSetPrimitiveTopologyEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        primitiveTopology: VkPrimitiveTopology,
    ),
>;
pub type PFN_vkCmdSetViewportWithCountEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        viewportCount: u32,
        pViewports: *const VkViewport,
    ),
>;
pub type PFN_vkCmdSetScissorWithCountEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        scissorCount: u32,
        pScissors: *const VkRect2D,
    ),
>;
pub type PFN_vkCmdBindVertexBuffers2EXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        firstBinding: u32,
        bindingCount: u32,
        pBuffers: *const VkBuffer,
        pOffsets: *const VkDeviceSize,
        pSizes: *const VkDeviceSize,
        pStrides: *const VkDeviceSize,
    ),
>;
pub type PFN_vkCmdSetDepthTestEnableEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(commandBuffer: VkCommandBuffer, depthTestEnable: VkBool32),
>;
pub type PFN_vkCmdSetDepthWriteEnableEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(commandBuffer: VkCommandBuffer, depthWriteEnable: VkBool32),
>;
pub type PFN_vkCmdSetDepthCompareOpEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(commandBuffer: VkCommandBuffer, depthCompareOp: VkCompareOp),
>;
pub type PFN_vkCmdSetDepthBoundsTestEnableEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(commandBuffer: VkCommandBuffer, depthBoundsTestEnable: VkBool32),
>;
pub type PFN_vkCmdSetStencilTestEnableEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(commandBuffer: VkCommandBuffer, stencilTestEnable: VkBool32),
>;
pub type PFN_vkCmdSetStencilOpEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        faceMask: VkStencilFaceFlags,
        failOp: VkStencilOp,
        passOp: VkStencilOp,
        depthFailOp: VkStencilOp,
        compareOp: VkCompareOp,
    ),
>;
pub type VkHostImageCopyFlagsEXT = VkHostImageCopyFlags;
pub type VkPhysicalDeviceHostImageCopyFeaturesEXT = VkPhysicalDeviceHostImageCopyFeatures;
pub type VkPhysicalDeviceHostImageCopyPropertiesEXT = VkPhysicalDeviceHostImageCopyProperties;
pub type VkMemoryToImageCopyEXT = VkMemoryToImageCopy;
pub type VkImageToMemoryCopyEXT = VkImageToMemoryCopy;
pub type VkCopyMemoryToImageInfoEXT = VkCopyMemoryToImageInfo;
pub type VkCopyImageToMemoryInfoEXT = VkCopyImageToMemoryInfo;
pub type VkCopyImageToImageInfoEXT = VkCopyImageToImageInfo;
pub type VkHostImageLayoutTransitionInfoEXT = VkHostImageLayoutTransitionInfo;
pub type VkSubresourceHostMemcpySizeEXT = VkSubresourceHostMemcpySize;
pub type VkHostImageCopyDevicePerformanceQueryEXT = VkHostImageCopyDevicePerformanceQuery;
pub type VkSubresourceLayout2EXT = VkSubresourceLayout2;
pub type VkImageSubresource2EXT = VkImageSubresource2;
pub type PFN_vkCopyMemoryToImageEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pCopyMemoryToImageInfo: *const VkCopyMemoryToImageInfo,
    ) -> VkResult,
>;
pub type PFN_vkCopyImageToMemoryEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pCopyImageToMemoryInfo: *const VkCopyImageToMemoryInfo,
    ) -> VkResult,
>;
pub type PFN_vkCopyImageToImageEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pCopyImageToImageInfo: *const VkCopyImageToImageInfo,
    ) -> VkResult,
>;
pub type PFN_vkTransitionImageLayoutEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        transitionCount: u32,
        pTransitions: *const VkHostImageLayoutTransitionInfo,
    ) -> VkResult,
>;
pub type PFN_vkGetImageSubresourceLayout2EXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        image: VkImage,
        pSubresource: *const VkImageSubresource2,
        pLayout: *mut VkSubresourceLayout2,
    ),
>;
pub type VkPresentScalingFlagBitsEXT = ::core::ffi::c_int;
pub type VkPresentScalingFlagsEXT = VkFlags;
pub type VkPresentGravityFlagBitsEXT = ::core::ffi::c_int;
pub type VkPresentGravityFlagsEXT = VkFlags;
pub type PFN_vkReleaseSwapchainImagesEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pReleaseInfo: *const VkReleaseSwapchainImagesInfoEXT,
    ) -> VkResult,
>;
pub type VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT =
    VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures;
pub type VkIndirectCommandsLayoutNV = u64;
pub type VkIndirectCommandsTokenTypeNV = ::core::ffi::c_int;
pub type VkIndirectStateFlagBitsNV = ::core::ffi::c_int;
pub type VkIndirectStateFlagsNV = VkFlags;
pub type VkIndirectCommandsLayoutUsageFlagBitsNV = ::core::ffi::c_int;
pub type VkIndirectCommandsLayoutUsageFlagsNV = VkFlags;
pub type PFN_vkGetGeneratedCommandsMemoryRequirementsNV = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pInfo: *const VkGeneratedCommandsMemoryRequirementsInfoNV,
        pMemoryRequirements: *mut VkMemoryRequirements2,
    ),
>;
pub type PFN_vkCmdPreprocessGeneratedCommandsNV = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        pGeneratedCommandsInfo: *const VkGeneratedCommandsInfoNV,
    ),
>;
pub type PFN_vkCmdExecuteGeneratedCommandsNV = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        isPreprocessed: VkBool32,
        pGeneratedCommandsInfo: *const VkGeneratedCommandsInfoNV,
    ),
>;
pub type PFN_vkCmdBindPipelineShaderGroupNV = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        pipelineBindPoint: VkPipelineBindPoint,
        pipeline: VkPipeline,
        groupIndex: u32,
    ),
>;
pub type PFN_vkCreateIndirectCommandsLayoutNV = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pCreateInfo: *const VkIndirectCommandsLayoutCreateInfoNV,
        pAllocator: *const VkAllocationCallbacks,
        pIndirectCommandsLayout: *mut VkIndirectCommandsLayoutNV,
    ) -> VkResult,
>;
pub type PFN_vkDestroyIndirectCommandsLayoutNV = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        indirectCommandsLayout: VkIndirectCommandsLayoutNV,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT =
    VkPhysicalDeviceTexelBufferAlignmentProperties;
pub type VkDepthBiasRepresentationEXT = ::core::ffi::c_int;
pub type PFN_vkCmdSetDepthBias2EXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        pDepthBiasInfo: *const VkDepthBiasInfoEXT,
    ),
>;
pub type VkDeviceMemoryReportEventTypeEXT = ::core::ffi::c_int;
pub type VkDeviceMemoryReportFlagsEXT = VkFlags;
pub type PFN_vkDeviceMemoryReportCallbackEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        pCallbackData: *const VkDeviceMemoryReportCallbackDataEXT,
        pUserData: *mut ::core::ffi::c_void,
    ),
>;
pub type PFN_vkAcquireDrmDisplayEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        physicalDevice: VkPhysicalDevice,
        drmFd: i32,
        display: VkDisplayKHR,
    ) -> VkResult,
>;
pub type PFN_vkGetDrmDisplayEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        physicalDevice: VkPhysicalDevice,
        drmFd: i32,
        connectorId: u32,
        display: *mut VkDisplayKHR,
    ) -> VkResult,
>;
pub type VkPhysicalDeviceRobustness2FeaturesEXT = VkPhysicalDeviceRobustness2FeaturesKHR;
pub type VkPhysicalDeviceRobustness2PropertiesEXT = VkPhysicalDeviceRobustness2PropertiesKHR;
pub type VkPrivateDataSlotEXT = VkPrivateDataSlot;
pub type VkPrivateDataSlotCreateFlagsEXT = VkPrivateDataSlotCreateFlags;
pub type VkPhysicalDevicePrivateDataFeaturesEXT = VkPhysicalDevicePrivateDataFeatures;
pub type VkDevicePrivateDataCreateInfoEXT = VkDevicePrivateDataCreateInfo;
pub type VkPrivateDataSlotCreateInfoEXT = VkPrivateDataSlotCreateInfo;
pub type PFN_vkCreatePrivateDataSlotEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pCreateInfo: *const VkPrivateDataSlotCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pPrivateDataSlot: *mut VkPrivateDataSlot,
    ) -> VkResult,
>;
pub type PFN_vkDestroyPrivateDataSlotEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        privateDataSlot: VkPrivateDataSlot,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkSetPrivateDataEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        objectType: VkObjectType,
        objectHandle: u64,
        privateDataSlot: VkPrivateDataSlot,
        data: u64,
    ) -> VkResult,
>;
pub type PFN_vkGetPrivateDataEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        objectType: VkObjectType,
        objectHandle: u64,
        privateDataSlot: VkPrivateDataSlot,
        pData: *mut u64,
    ),
>;
pub type VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT =
    VkPhysicalDevicePipelineCreationCacheControlFeatures;
pub type VkDeviceDiagnosticsConfigFlagBitsNV = ::core::ffi::c_int;
pub type VkDeviceDiagnosticsConfigFlagsNV = VkFlags;
pub type VkCudaModuleNV = u64;
pub type VkCudaFunctionNV = u64;
pub type PFN_vkCreateCudaModuleNV = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pCreateInfo: *const VkCudaModuleCreateInfoNV,
        pAllocator: *const VkAllocationCallbacks,
        pModule: *mut VkCudaModuleNV,
    ) -> VkResult,
>;
pub type PFN_vkGetCudaModuleCacheNV = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        module: VkCudaModuleNV,
        pCacheSize: *mut usize,
        pCacheData: *mut ::core::ffi::c_void,
    ) -> VkResult,
>;
pub type PFN_vkCreateCudaFunctionNV = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pCreateInfo: *const VkCudaFunctionCreateInfoNV,
        pAllocator: *const VkAllocationCallbacks,
        pFunction: *mut VkCudaFunctionNV,
    ) -> VkResult,
>;
pub type PFN_vkDestroyCudaModuleNV = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        module: VkCudaModuleNV,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkDestroyCudaFunctionNV = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        function: VkCudaFunctionNV,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkCmdCudaLaunchKernelNV = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        pLaunchInfo: *const VkCudaLaunchInfoNV,
    ),
>;
pub type VkTileShadingRenderPassFlagBitsQCOM = ::core::ffi::c_int;
pub type VkTileShadingRenderPassFlagsQCOM = VkFlags;
pub type PFN_vkCmdDispatchTileQCOM =
    ::core::option::Option<unsafe extern "stdcall" fn(commandBuffer: VkCommandBuffer)>;
pub type PFN_vkCmdBeginPerTileExecutionQCOM = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        pPerTileBeginInfo: *const VkPerTileBeginInfoQCOM,
    ),
>;
pub type PFN_vkCmdEndPerTileExecutionQCOM = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        pPerTileEndInfo: *const VkPerTileEndInfoQCOM,
    ),
>;
pub type VkAccelerationStructureKHR = u64;
pub type PFN_vkGetDescriptorSetLayoutSizeEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        layout: VkDescriptorSetLayout,
        pLayoutSizeInBytes: *mut VkDeviceSize,
    ),
>;
pub type PFN_vkGetDescriptorSetLayoutBindingOffsetEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        layout: VkDescriptorSetLayout,
        binding: u32,
        pOffset: *mut VkDeviceSize,
    ),
>;
pub type PFN_vkGetDescriptorEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pDescriptorInfo: *const VkDescriptorGetInfoEXT,
        dataSize: usize,
        pDescriptor: *mut ::core::ffi::c_void,
    ),
>;
pub type PFN_vkCmdBindDescriptorBuffersEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        bufferCount: u32,
        pBindingInfos: *const VkDescriptorBufferBindingInfoEXT,
    ),
>;
pub type PFN_vkCmdSetDescriptorBufferOffsetsEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        pipelineBindPoint: VkPipelineBindPoint,
        layout: VkPipelineLayout,
        firstSet: u32,
        setCount: u32,
        pBufferIndices: *const u32,
        pOffsets: *const VkDeviceSize,
    ),
>;
pub type PFN_vkCmdBindDescriptorBufferEmbeddedSamplersEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        pipelineBindPoint: VkPipelineBindPoint,
        layout: VkPipelineLayout,
        set: u32,
    ),
>;
pub type PFN_vkGetBufferOpaqueCaptureDescriptorDataEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pInfo: *const VkBufferCaptureDescriptorDataInfoEXT,
        pData: *mut ::core::ffi::c_void,
    ) -> VkResult,
>;
pub type PFN_vkGetImageOpaqueCaptureDescriptorDataEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pInfo: *const VkImageCaptureDescriptorDataInfoEXT,
        pData: *mut ::core::ffi::c_void,
    ) -> VkResult,
>;
pub type PFN_vkGetImageViewOpaqueCaptureDescriptorDataEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pInfo: *const VkImageViewCaptureDescriptorDataInfoEXT,
        pData: *mut ::core::ffi::c_void,
    ) -> VkResult,
>;
pub type PFN_vkGetSamplerOpaqueCaptureDescriptorDataEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pInfo: *const VkSamplerCaptureDescriptorDataInfoEXT,
        pData: *mut ::core::ffi::c_void,
    ) -> VkResult,
>;
pub type PFN_vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pInfo: *const VkAccelerationStructureCaptureDescriptorDataInfoEXT,
        pData: *mut ::core::ffi::c_void,
    ) -> VkResult,
>;
pub type VkGraphicsPipelineLibraryFlagBitsEXT = ::core::ffi::c_int;
pub type VkGraphicsPipelineLibraryFlagsEXT = VkFlags;
pub type VkFragmentShadingRateTypeNV = ::core::ffi::c_int;
pub type VkFragmentShadingRateNV = ::core::ffi::c_int;
pub type PFN_vkCmdSetFragmentShadingRateEnumNV = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        shadingRate: VkFragmentShadingRateNV,
        combinerOps: *const VkFragmentShadingRateCombinerOpKHR,
    ),
>;
pub type VkAccelerationStructureMotionInstanceTypeNV = ::core::ffi::c_int;
pub type VkAccelerationStructureMotionInfoFlagsNV = VkFlags;
pub type VkAccelerationStructureMotionInstanceFlagsNV = VkFlags;
pub type VkPhysicalDeviceImageRobustnessFeaturesEXT = VkPhysicalDeviceImageRobustnessFeatures;
pub type VkImageCompressionFlagBitsEXT = ::core::ffi::c_int;
pub type VkImageCompressionFlagsEXT = VkFlags;
pub type VkImageCompressionFixedRateFlagBitsEXT = ::core::ffi::c_int;
pub type VkImageCompressionFixedRateFlagsEXT = VkFlags;
pub type VkDeviceFaultAddressTypeEXT = ::core::ffi::c_int;
pub type VkDeviceFaultVendorBinaryHeaderVersionEXT = ::core::ffi::c_int;
pub type PFN_vkGetDeviceFaultInfoEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pFaultCounts: *mut VkDeviceFaultCountsEXT,
        pFaultInfo: *mut VkDeviceFaultInfoEXT,
    ) -> VkResult,
>;
pub type VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM =
    VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT;
pub type VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE =
    VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT;
pub type VkMutableDescriptorTypeListVALVE = VkMutableDescriptorTypeListEXT;
pub type VkMutableDescriptorTypeCreateInfoVALVE = VkMutableDescriptorTypeCreateInfoEXT;
pub type PFN_vkCmdSetVertexInputEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        vertexBindingDescriptionCount: u32,
        pVertexBindingDescriptions: *const VkVertexInputBindingDescription2EXT,
        vertexAttributeDescriptionCount: u32,
        pVertexAttributeDescriptions: *const VkVertexInputAttributeDescription2EXT,
    ),
>;
pub type VkDeviceAddressBindingTypeEXT = ::core::ffi::c_int;
pub type VkDeviceAddressBindingFlagBitsEXT = ::core::ffi::c_int;
pub type VkDeviceAddressBindingFlagsEXT = VkFlags;
pub type PFN_vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        renderpass: VkRenderPass,
        pMaxWorkgroupSize: *mut VkExtent2D,
    ) -> VkResult,
>;
pub type PFN_vkCmdSubpassShadingHUAWEI =
    ::core::option::Option<unsafe extern "stdcall" fn(commandBuffer: VkCommandBuffer)>;
pub type PFN_vkCmdBindInvocationMaskHUAWEI = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        imageView: VkImageView,
        imageLayout: VkImageLayout,
    ),
>;
pub type VkRemoteAddressNV = *mut ::core::ffi::c_void;
pub type PFN_vkGetMemoryRemoteAddressNV = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pMemoryGetRemoteAddressInfo: *const VkMemoryGetRemoteAddressInfoNV,
        pAddress: *mut VkRemoteAddressNV,
    ) -> VkResult,
>;
pub type VkPipelineInfoEXT = VkPipelineInfoKHR;
pub type PFN_vkGetPipelinePropertiesEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pPipelineInfo: *const VkPipelineInfoEXT,
        pPipelineProperties: *mut VkBaseOutStructure,
    ) -> VkResult,
>;
pub type VkFrameBoundaryFlagBitsEXT = ::core::ffi::c_int;
pub type VkFrameBoundaryFlagsEXT = VkFlags;
pub type PFN_vkCmdSetPatchControlPointsEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(commandBuffer: VkCommandBuffer, patchControlPoints: u32),
>;
pub type PFN_vkCmdSetRasterizerDiscardEnableEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(commandBuffer: VkCommandBuffer, rasterizerDiscardEnable: VkBool32),
>;
pub type PFN_vkCmdSetDepthBiasEnableEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(commandBuffer: VkCommandBuffer, depthBiasEnable: VkBool32),
>;
pub type PFN_vkCmdSetLogicOpEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(commandBuffer: VkCommandBuffer, logicOp: VkLogicOp),
>;
pub type PFN_vkCmdSetPrimitiveRestartEnableEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(commandBuffer: VkCommandBuffer, primitiveRestartEnable: VkBool32),
>;
pub type PFN_vkCmdSetColorWriteEnableEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        attachmentCount: u32,
        pColorWriteEnables: *const VkBool32,
    ),
>;
pub type VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT =
    VkPhysicalDeviceGlobalPriorityQueryFeatures;
pub type VkQueueFamilyGlobalPriorityPropertiesEXT = VkQueueFamilyGlobalPriorityProperties;
pub type PFN_vkCmdDrawMultiEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        drawCount: u32,
        pVertexInfo: *const VkMultiDrawInfoEXT,
        instanceCount: u32,
        firstInstance: u32,
        stride: u32,
    ),
>;
pub type PFN_vkCmdDrawMultiIndexedEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        drawCount: u32,
        pIndexInfo: *const VkMultiDrawIndexedInfoEXT,
        instanceCount: u32,
        firstInstance: u32,
        stride: u32,
        pVertexOffset: *const i32,
    ),
>;
pub type VkMicromapEXT = u64;
pub type VkMicromapTypeEXT = ::core::ffi::c_int;
pub type VkBuildMicromapModeEXT = ::core::ffi::c_int;
pub type VkCopyMicromapModeEXT = ::core::ffi::c_int;
pub type VkOpacityMicromapFormatEXT = ::core::ffi::c_int;
pub type VkOpacityMicromapSpecialIndexEXT = ::core::ffi::c_int;
pub type VkAccelerationStructureCompatibilityKHR = ::core::ffi::c_int;
pub type VkAccelerationStructureBuildTypeKHR = ::core::ffi::c_int;
pub type VkBuildMicromapFlagBitsEXT = ::core::ffi::c_int;
pub type VkBuildMicromapFlagsEXT = VkFlags;
pub type VkMicromapCreateFlagBitsEXT = ::core::ffi::c_int;
pub type VkMicromapCreateFlagsEXT = VkFlags;
pub type PFN_vkCreateMicromapEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pCreateInfo: *const VkMicromapCreateInfoEXT,
        pAllocator: *const VkAllocationCallbacks,
        pMicromap: *mut VkMicromapEXT,
    ) -> VkResult,
>;
pub type PFN_vkDestroyMicromapEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        micromap: VkMicromapEXT,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkCmdBuildMicromapsEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        infoCount: u32,
        pInfos: *const VkMicromapBuildInfoEXT,
    ),
>;
pub type PFN_vkBuildMicromapsEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        deferredOperation: VkDeferredOperationKHR,
        infoCount: u32,
        pInfos: *const VkMicromapBuildInfoEXT,
    ) -> VkResult,
>;
pub type PFN_vkCopyMicromapEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        deferredOperation: VkDeferredOperationKHR,
        pInfo: *const VkCopyMicromapInfoEXT,
    ) -> VkResult,
>;
pub type PFN_vkCopyMicromapToMemoryEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        deferredOperation: VkDeferredOperationKHR,
        pInfo: *const VkCopyMicromapToMemoryInfoEXT,
    ) -> VkResult,
>;
pub type PFN_vkCopyMemoryToMicromapEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        deferredOperation: VkDeferredOperationKHR,
        pInfo: *const VkCopyMemoryToMicromapInfoEXT,
    ) -> VkResult,
>;
pub type PFN_vkWriteMicromapsPropertiesEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        micromapCount: u32,
        pMicromaps: *const VkMicromapEXT,
        queryType: VkQueryType,
        dataSize: usize,
        pData: *mut ::core::ffi::c_void,
        stride: usize,
    ) -> VkResult,
>;
pub type PFN_vkCmdCopyMicromapEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(commandBuffer: VkCommandBuffer, pInfo: *const VkCopyMicromapInfoEXT),
>;
pub type PFN_vkCmdCopyMicromapToMemoryEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        pInfo: *const VkCopyMicromapToMemoryInfoEXT,
    ),
>;
pub type PFN_vkCmdCopyMemoryToMicromapEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        pInfo: *const VkCopyMemoryToMicromapInfoEXT,
    ),
>;
pub type PFN_vkCmdWriteMicromapsPropertiesEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        micromapCount: u32,
        pMicromaps: *const VkMicromapEXT,
        queryType: VkQueryType,
        queryPool: VkQueryPool,
        firstQuery: u32,
    ),
>;
pub type PFN_vkGetDeviceMicromapCompatibilityEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pVersionInfo: *const VkMicromapVersionInfoEXT,
        pCompatibility: *mut VkAccelerationStructureCompatibilityKHR,
    ),
>;
pub type PFN_vkGetMicromapBuildSizesEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        buildType: VkAccelerationStructureBuildTypeKHR,
        pBuildInfo: *const VkMicromapBuildInfoEXT,
        pSizeInfo: *mut VkMicromapBuildSizesInfoEXT,
    ),
>;
pub type PFN_vkCmdDrawClusterHUAWEI = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        groupCountX: u32,
        groupCountY: u32,
        groupCountZ: u32,
    ),
>;
pub type PFN_vkCmdDrawClusterIndirectHUAWEI = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        buffer: VkBuffer,
        offset: VkDeviceSize,
    ),
>;
pub type PFN_vkSetDeviceMemoryPriorityEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(device: VkDevice, memory: VkDeviceMemory, priority: f32),
>;
pub type VkPhysicalDeviceSchedulingControlsFlagsARM = VkFlags64;
#[doc = " Flag bits for VkPhysicalDeviceSchedulingControlsFlagBitsARM"]
pub type VkPhysicalDeviceSchedulingControlsFlagBitsARM = VkFlags64;
pub type PFN_vkGetDescriptorSetLayoutHostMappingInfoVALVE = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pBindingReference: *const VkDescriptorSetBindingReferenceVALVE,
        pHostMapping: *mut VkDescriptorSetLayoutHostMappingInfoVALVE,
    ),
>;
pub type PFN_vkGetDescriptorSetHostMappingVALVE = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        descriptorSet: VkDescriptorSet,
        ppData: *mut *mut ::core::ffi::c_void,
    ),
>;
pub type VkPhysicalDeviceDepthClampZeroOneFeaturesEXT =
    VkPhysicalDeviceDepthClampZeroOneFeaturesKHR;
pub type VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM =
    VkPhysicalDeviceFragmentDensityMapOffsetFeaturesEXT;
pub type VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM =
    VkPhysicalDeviceFragmentDensityMapOffsetPropertiesEXT;
pub type VkSubpassFragmentDensityMapOffsetEndInfoQCOM =
    VkRenderPassFragmentDensityMapOffsetEndInfoEXT;
pub type PFN_vkCmdCopyMemoryIndirectNV = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        copyBufferAddress: VkDeviceAddress,
        copyCount: u32,
        stride: u32,
    ),
>;
pub type PFN_vkCmdCopyMemoryToImageIndirectNV = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        copyBufferAddress: VkDeviceAddress,
        copyCount: u32,
        stride: u32,
        dstImage: VkImage,
        dstImageLayout: VkImageLayout,
        pImageSubresources: *const VkImageSubresourceLayers,
    ),
>;
#[doc = " Flag bits for VkMemoryDecompressionMethodFlagBitsNV"]
pub type VkMemoryDecompressionMethodFlagBitsNV = VkFlags64;
pub type VkMemoryDecompressionMethodFlagsNV = VkFlags64;
pub type PFN_vkCmdDecompressMemoryNV = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        decompressRegionCount: u32,
        pDecompressMemoryRegions: *const VkDecompressMemoryRegionNV,
    ),
>;
pub type PFN_vkCmdDecompressMemoryIndirectCountNV = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        indirectCommandsAddress: VkDeviceAddress,
        indirectCommandsCountAddress: VkDeviceAddress,
        stride: u32,
    ),
>;
pub type PFN_vkGetPipelineIndirectMemoryRequirementsNV = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pCreateInfo: *const VkComputePipelineCreateInfo,
        pMemoryRequirements: *mut VkMemoryRequirements2,
    ),
>;
pub type PFN_vkCmdUpdatePipelineIndirectBufferNV = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        pipelineBindPoint: VkPipelineBindPoint,
        pipeline: VkPipeline,
    ),
>;
pub type PFN_vkGetPipelineIndirectDeviceAddressNV = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pInfo: *const VkPipelineIndirectDeviceAddressInfoNV,
    ) -> VkDeviceAddress,
>;
pub type VkRayTracingLssIndexingModeNV = ::core::ffi::c_int;
pub type VkRayTracingLssPrimitiveEndCapsModeNV = ::core::ffi::c_int;
pub type PFN_vkCmdSetDepthClampEnableEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(commandBuffer: VkCommandBuffer, depthClampEnable: VkBool32),
>;
pub type PFN_vkCmdSetPolygonModeEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(commandBuffer: VkCommandBuffer, polygonMode: VkPolygonMode),
>;
pub type PFN_vkCmdSetRasterizationSamplesEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        rasterizationSamples: VkSampleCountFlagBits,
    ),
>;
pub type PFN_vkCmdSetSampleMaskEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        samples: VkSampleCountFlagBits,
        pSampleMask: *const VkSampleMask,
    ),
>;
pub type PFN_vkCmdSetAlphaToCoverageEnableEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(commandBuffer: VkCommandBuffer, alphaToCoverageEnable: VkBool32),
>;
pub type PFN_vkCmdSetAlphaToOneEnableEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(commandBuffer: VkCommandBuffer, alphaToOneEnable: VkBool32),
>;
pub type PFN_vkCmdSetLogicOpEnableEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(commandBuffer: VkCommandBuffer, logicOpEnable: VkBool32),
>;
pub type PFN_vkCmdSetColorBlendEnableEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        firstAttachment: u32,
        attachmentCount: u32,
        pColorBlendEnables: *const VkBool32,
    ),
>;
pub type PFN_vkCmdSetColorBlendEquationEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        firstAttachment: u32,
        attachmentCount: u32,
        pColorBlendEquations: *const VkColorBlendEquationEXT,
    ),
>;
pub type PFN_vkCmdSetColorWriteMaskEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        firstAttachment: u32,
        attachmentCount: u32,
        pColorWriteMasks: *const VkColorComponentFlags,
    ),
>;
pub type PFN_vkCmdSetTessellationDomainOriginEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        domainOrigin: VkTessellationDomainOrigin,
    ),
>;
pub type PFN_vkCmdSetRasterizationStreamEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(commandBuffer: VkCommandBuffer, rasterizationStream: u32),
>;
pub type PFN_vkCmdSetConservativeRasterizationModeEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        conservativeRasterizationMode: VkConservativeRasterizationModeEXT,
    ),
>;
pub type PFN_vkCmdSetExtraPrimitiveOverestimationSizeEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        extraPrimitiveOverestimationSize: f32,
    ),
>;
pub type PFN_vkCmdSetDepthClipEnableEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(commandBuffer: VkCommandBuffer, depthClipEnable: VkBool32),
>;
pub type PFN_vkCmdSetSampleLocationsEnableEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(commandBuffer: VkCommandBuffer, sampleLocationsEnable: VkBool32),
>;
pub type PFN_vkCmdSetColorBlendAdvancedEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        firstAttachment: u32,
        attachmentCount: u32,
        pColorBlendAdvanced: *const VkColorBlendAdvancedEXT,
    ),
>;
pub type PFN_vkCmdSetProvokingVertexModeEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        provokingVertexMode: VkProvokingVertexModeEXT,
    ),
>;
pub type PFN_vkCmdSetLineRasterizationModeEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        lineRasterizationMode: VkLineRasterizationModeEXT,
    ),
>;
pub type PFN_vkCmdSetLineStippleEnableEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(commandBuffer: VkCommandBuffer, stippledLineEnable: VkBool32),
>;
pub type PFN_vkCmdSetDepthClipNegativeOneToOneEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(commandBuffer: VkCommandBuffer, negativeOneToOne: VkBool32),
>;
pub type PFN_vkCmdSetViewportWScalingEnableNV = ::core::option::Option<
    unsafe extern "stdcall" fn(commandBuffer: VkCommandBuffer, viewportWScalingEnable: VkBool32),
>;
pub type PFN_vkCmdSetViewportSwizzleNV = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        firstViewport: u32,
        viewportCount: u32,
        pViewportSwizzles: *const VkViewportSwizzleNV,
    ),
>;
pub type PFN_vkCmdSetCoverageToColorEnableNV = ::core::option::Option<
    unsafe extern "stdcall" fn(commandBuffer: VkCommandBuffer, coverageToColorEnable: VkBool32),
>;
pub type PFN_vkCmdSetCoverageToColorLocationNV = ::core::option::Option<
    unsafe extern "stdcall" fn(commandBuffer: VkCommandBuffer, coverageToColorLocation: u32),
>;
pub type PFN_vkCmdSetCoverageModulationModeNV = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        coverageModulationMode: VkCoverageModulationModeNV,
    ),
>;
pub type PFN_vkCmdSetCoverageModulationTableEnableNV = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        coverageModulationTableEnable: VkBool32,
    ),
>;
pub type PFN_vkCmdSetCoverageModulationTableNV = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        coverageModulationTableCount: u32,
        pCoverageModulationTable: *const f32,
    ),
>;
pub type PFN_vkCmdSetShadingRateImageEnableNV = ::core::option::Option<
    unsafe extern "stdcall" fn(commandBuffer: VkCommandBuffer, shadingRateImageEnable: VkBool32),
>;
pub type PFN_vkCmdSetRepresentativeFragmentTestEnableNV = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        representativeFragmentTestEnable: VkBool32,
    ),
>;
pub type PFN_vkCmdSetCoverageReductionModeNV = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        coverageReductionMode: VkCoverageReductionModeNV,
    ),
>;
pub type VkSubpassMergeStatusEXT = ::core::ffi::c_int;
pub type VkDirectDriverLoadingModeLUNARG = ::core::ffi::c_int;
pub type VkDirectDriverLoadingFlagsLUNARG = VkFlags;
pub type PFN_vkGetInstanceProcAddrLUNARG = ::core::option::Option<
    unsafe extern "stdcall" fn(
        instance: VkInstance,
        pName: *const ::core::ffi::c_char,
    ) -> PFN_vkVoidFunction,
>;
pub type PFN_vkGetShaderModuleIdentifierEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        shaderModule: VkShaderModule,
        pIdentifier: *mut VkShaderModuleIdentifierEXT,
    ),
>;
pub type PFN_vkGetShaderModuleCreateInfoIdentifierEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pCreateInfo: *const VkShaderModuleCreateInfo,
        pIdentifier: *mut VkShaderModuleIdentifierEXT,
    ),
>;
pub type VkOpticalFlowSessionNV = u64;
pub type VkOpticalFlowPerformanceLevelNV = ::core::ffi::c_int;
pub type VkOpticalFlowSessionBindingPointNV = ::core::ffi::c_int;
pub type VkOpticalFlowGridSizeFlagBitsNV = ::core::ffi::c_int;
pub type VkOpticalFlowGridSizeFlagsNV = VkFlags;
pub type VkOpticalFlowUsageFlagBitsNV = ::core::ffi::c_int;
pub type VkOpticalFlowUsageFlagsNV = VkFlags;
pub type VkOpticalFlowSessionCreateFlagBitsNV = ::core::ffi::c_int;
pub type VkOpticalFlowSessionCreateFlagsNV = VkFlags;
pub type VkOpticalFlowExecuteFlagBitsNV = ::core::ffi::c_int;
pub type VkOpticalFlowExecuteFlagsNV = VkFlags;
pub type PFN_vkGetPhysicalDeviceOpticalFlowImageFormatsNV = ::core::option::Option<
    unsafe extern "stdcall" fn(
        physicalDevice: VkPhysicalDevice,
        pOpticalFlowImageFormatInfo: *const VkOpticalFlowImageFormatInfoNV,
        pFormatCount: *mut u32,
        pImageFormatProperties: *mut VkOpticalFlowImageFormatPropertiesNV,
    ) -> VkResult,
>;
pub type PFN_vkCreateOpticalFlowSessionNV = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pCreateInfo: *const VkOpticalFlowSessionCreateInfoNV,
        pAllocator: *const VkAllocationCallbacks,
        pSession: *mut VkOpticalFlowSessionNV,
    ) -> VkResult,
>;
pub type PFN_vkDestroyOpticalFlowSessionNV = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        session: VkOpticalFlowSessionNV,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkBindOpticalFlowSessionImageNV = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        session: VkOpticalFlowSessionNV,
        bindingPoint: VkOpticalFlowSessionBindingPointNV,
        view: VkImageView,
        layout: VkImageLayout,
    ) -> VkResult,
>;
pub type PFN_vkCmdOpticalFlowExecuteNV = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        session: VkOpticalFlowSessionNV,
        pExecuteInfo: *const VkOpticalFlowExecuteInfoNV,
    ),
>;
pub type VkPhysicalDevicePipelineProtectedAccessFeaturesEXT =
    VkPhysicalDevicePipelineProtectedAccessFeatures;
pub type VkAntiLagModeAMD = ::core::ffi::c_int;
pub type VkAntiLagStageAMD = ::core::ffi::c_int;
pub type PFN_vkAntiLagUpdateAMD = ::core::option::Option<
    unsafe extern "stdcall" fn(device: VkDevice, pData: *const VkAntiLagDataAMD),
>;
pub type VkShaderEXT = u64;
pub type VkShaderCodeTypeEXT = ::core::ffi::c_int;
pub type VkDepthClampModeEXT = ::core::ffi::c_int;
pub type VkShaderCreateFlagBitsEXT = ::core::ffi::c_int;
pub type VkShaderCreateFlagsEXT = VkFlags;
pub type VkShaderRequiredSubgroupSizeCreateInfoEXT =
    VkPipelineShaderStageRequiredSubgroupSizeCreateInfo;
pub type PFN_vkCreateShadersEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        createInfoCount: u32,
        pCreateInfos: *const VkShaderCreateInfoEXT,
        pAllocator: *const VkAllocationCallbacks,
        pShaders: *mut VkShaderEXT,
    ) -> VkResult,
>;
pub type PFN_vkDestroyShaderEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        shader: VkShaderEXT,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkGetShaderBinaryDataEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        shader: VkShaderEXT,
        pDataSize: *mut usize,
        pData: *mut ::core::ffi::c_void,
    ) -> VkResult,
>;
pub type PFN_vkCmdBindShadersEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        stageCount: u32,
        pStages: *const VkShaderStageFlagBits,
        pShaders: *const VkShaderEXT,
    ),
>;
pub type PFN_vkCmdSetDepthClampRangeEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        depthClampMode: VkDepthClampModeEXT,
        pDepthClampRange: *const VkDepthClampRangeEXT,
    ),
>;
pub type PFN_vkGetFramebufferTilePropertiesQCOM = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        framebuffer: VkFramebuffer,
        pPropertiesCount: *mut u32,
        pProperties: *mut VkTilePropertiesQCOM,
    ) -> VkResult,
>;
pub type PFN_vkGetDynamicRenderingTilePropertiesQCOM = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pRenderingInfo: *const VkRenderingInfo,
        pProperties: *mut VkTilePropertiesQCOM,
    ) -> VkResult,
>;
pub type VkRayTracingInvocationReorderModeNV = ::core::ffi::c_int;
pub type VkCooperativeVectorMatrixLayoutNV = ::core::ffi::c_int;
pub type PFN_vkGetPhysicalDeviceCooperativeVectorPropertiesNV = ::core::option::Option<
    unsafe extern "stdcall" fn(
        physicalDevice: VkPhysicalDevice,
        pPropertyCount: *mut u32,
        pProperties: *mut VkCooperativeVectorPropertiesNV,
    ) -> VkResult,
>;
pub type PFN_vkConvertCooperativeVectorMatrixNV = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pInfo: *const VkConvertCooperativeVectorMatrixInfoNV,
    ) -> VkResult,
>;
pub type PFN_vkCmdConvertCooperativeVectorMatrixNV = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        infoCount: u32,
        pInfos: *const VkConvertCooperativeVectorMatrixInfoNV,
    ),
>;
pub type VkLayerSettingTypeEXT = ::core::ffi::c_int;
pub type VkLatencyMarkerNV = ::core::ffi::c_int;
pub type VkOutOfBandQueueTypeNV = ::core::ffi::c_int;
pub type PFN_vkSetLatencySleepModeNV = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        swapchain: VkSwapchainKHR,
        pSleepModeInfo: *const VkLatencySleepModeInfoNV,
    ) -> VkResult,
>;
pub type PFN_vkLatencySleepNV = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        swapchain: VkSwapchainKHR,
        pSleepInfo: *const VkLatencySleepInfoNV,
    ) -> VkResult,
>;
pub type PFN_vkSetLatencyMarkerNV = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        swapchain: VkSwapchainKHR,
        pLatencyMarkerInfo: *const VkSetLatencyMarkerInfoNV,
    ),
>;
pub type PFN_vkGetLatencyTimingsNV = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        swapchain: VkSwapchainKHR,
        pLatencyMarkerInfo: *mut VkGetLatencyMarkerInfoNV,
    ),
>;
pub type PFN_vkQueueNotifyOutOfBandNV = ::core::option::Option<
    unsafe extern "stdcall" fn(queue: VkQueue, pQueueTypeInfo: *const VkOutOfBandQueueTypeInfoNV),
>;
pub type VkBlockMatchWindowCompareModeQCOM = ::core::ffi::c_int;
pub type VkCubicFilterWeightsQCOM = ::core::ffi::c_int;
pub type PFN_vkCmdSetAttachmentFeedbackLoopEnableEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(commandBuffer: VkCommandBuffer, aspectMask: VkImageAspectFlags),
>;
pub type VkLayeredDriverUnderlyingApiMSFT = ::core::ffi::c_int;
pub type PFN_vkCmdBindTileMemoryQCOM = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        pTileMemoryBindInfo: *const VkTileMemoryBindInfoQCOM,
    ),
>;
pub type VkDisplaySurfaceStereoTypeNV = ::core::ffi::c_int;
pub type VkExternalComputeQueueNV = *mut VkExternalComputeQueueNV_T;
pub type PFN_vkCreateExternalComputeQueueNV = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pCreateInfo: *const VkExternalComputeQueueCreateInfoNV,
        pAllocator: *const VkAllocationCallbacks,
        pExternalQueue: *mut VkExternalComputeQueueNV,
    ) -> VkResult,
>;
pub type PFN_vkDestroyExternalComputeQueueNV = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        externalQueue: VkExternalComputeQueueNV,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkGetExternalComputeQueueDataNV = ::core::option::Option<
    unsafe extern "stdcall" fn(
        externalQueue: VkExternalComputeQueueNV,
        params: *mut VkExternalComputeQueueDataParamsNV,
        pData: *mut ::core::ffi::c_void,
    ),
>;
pub type VkClusterAccelerationStructureTypeNV = ::core::ffi::c_int;
pub type VkClusterAccelerationStructureOpTypeNV = ::core::ffi::c_int;
pub type VkClusterAccelerationStructureOpModeNV = ::core::ffi::c_int;
pub type VkClusterAccelerationStructureAddressResolutionFlagBitsNV = ::core::ffi::c_int;
pub type VkClusterAccelerationStructureAddressResolutionFlagsNV = VkFlags;
pub type VkClusterAccelerationStructureClusterFlagBitsNV = ::core::ffi::c_int;
pub type VkClusterAccelerationStructureClusterFlagsNV = VkFlags;
pub type VkClusterAccelerationStructureGeometryFlagBitsNV = ::core::ffi::c_int;
pub type VkClusterAccelerationStructureGeometryFlagsNV = VkFlags;
pub type VkClusterAccelerationStructureIndexFormatFlagBitsNV = ::core::ffi::c_int;
pub type VkClusterAccelerationStructureIndexFormatFlagsNV = VkFlags;
pub type PFN_vkGetClusterAccelerationStructureBuildSizesNV = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pInfo: *const VkClusterAccelerationStructureInputInfoNV,
        pSizeInfo: *mut VkAccelerationStructureBuildSizesInfoKHR,
    ),
>;
pub type PFN_vkCmdBuildClusterAccelerationStructureIndirectNV = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        pCommandInfos: *const VkClusterAccelerationStructureCommandsInfoNV,
    ),
>;
pub type VkPartitionedAccelerationStructureOpTypeNV = ::core::ffi::c_int;
pub type VkPartitionedAccelerationStructureInstanceFlagBitsNV = ::core::ffi::c_int;
pub type VkPartitionedAccelerationStructureInstanceFlagsNV = VkFlags;
pub type PFN_vkGetPartitionedAccelerationStructuresBuildSizesNV = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pInfo: *const VkPartitionedAccelerationStructureInstancesInputNV,
        pSizeInfo: *mut VkAccelerationStructureBuildSizesInfoKHR,
    ),
>;
pub type PFN_vkCmdBuildPartitionedAccelerationStructuresNV = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        pBuildInfo: *const VkBuildPartitionedAccelerationStructureInfoNV,
    ),
>;
pub type VkIndirectExecutionSetEXT = u64;
pub type VkIndirectCommandsLayoutEXT = u64;
pub type VkIndirectExecutionSetInfoTypeEXT = ::core::ffi::c_int;
pub type VkIndirectCommandsTokenTypeEXT = ::core::ffi::c_int;
pub type VkIndirectCommandsInputModeFlagBitsEXT = ::core::ffi::c_int;
pub type VkIndirectCommandsInputModeFlagsEXT = VkFlags;
pub type VkIndirectCommandsLayoutUsageFlagBitsEXT = ::core::ffi::c_int;
pub type VkIndirectCommandsLayoutUsageFlagsEXT = VkFlags;
pub type PFN_vkGetGeneratedCommandsMemoryRequirementsEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pInfo: *const VkGeneratedCommandsMemoryRequirementsInfoEXT,
        pMemoryRequirements: *mut VkMemoryRequirements2,
    ),
>;
pub type PFN_vkCmdPreprocessGeneratedCommandsEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        pGeneratedCommandsInfo: *const VkGeneratedCommandsInfoEXT,
        stateCommandBuffer: VkCommandBuffer,
    ),
>;
pub type PFN_vkCmdExecuteGeneratedCommandsEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        isPreprocessed: VkBool32,
        pGeneratedCommandsInfo: *const VkGeneratedCommandsInfoEXT,
    ),
>;
pub type PFN_vkCreateIndirectCommandsLayoutEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pCreateInfo: *const VkIndirectCommandsLayoutCreateInfoEXT,
        pAllocator: *const VkAllocationCallbacks,
        pIndirectCommandsLayout: *mut VkIndirectCommandsLayoutEXT,
    ) -> VkResult,
>;
pub type PFN_vkDestroyIndirectCommandsLayoutEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        indirectCommandsLayout: VkIndirectCommandsLayoutEXT,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkCreateIndirectExecutionSetEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pCreateInfo: *const VkIndirectExecutionSetCreateInfoEXT,
        pAllocator: *const VkAllocationCallbacks,
        pIndirectExecutionSet: *mut VkIndirectExecutionSetEXT,
    ) -> VkResult,
>;
pub type PFN_vkDestroyIndirectExecutionSetEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        indirectExecutionSet: VkIndirectExecutionSetEXT,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkUpdateIndirectExecutionSetPipelineEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        indirectExecutionSet: VkIndirectExecutionSetEXT,
        executionSetWriteCount: u32,
        pExecutionSetWrites: *const VkWriteIndirectExecutionSetPipelineEXT,
    ),
>;
pub type PFN_vkUpdateIndirectExecutionSetShaderEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        indirectExecutionSet: VkIndirectExecutionSetEXT,
        executionSetWriteCount: u32,
        pExecutionSetWrites: *const VkWriteIndirectExecutionSetShaderEXT,
    ),
>;
pub type PFN_vkGetPhysicalDeviceCooperativeMatrixFlexibleDimensionsPropertiesNV =
    ::core::option::Option<
        unsafe extern "stdcall" fn(
            physicalDevice: VkPhysicalDevice,
            pPropertyCount: *mut u32,
            pProperties: *mut VkCooperativeMatrixFlexibleDimensionsPropertiesNV,
        ) -> VkResult,
    >;
pub type PFN_vkCmdEndRendering2EXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        pRenderingEndInfo: *const VkRenderingEndInfoEXT,
    ),
>;
pub type VkBuildAccelerationStructureModeKHR = ::core::ffi::c_int;
pub type VkAccelerationStructureCreateFlagBitsKHR = ::core::ffi::c_int;
pub type VkAccelerationStructureCreateFlagsKHR = VkFlags;
pub type PFN_vkCreateAccelerationStructureKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pCreateInfo: *const VkAccelerationStructureCreateInfoKHR,
        pAllocator: *const VkAllocationCallbacks,
        pAccelerationStructure: *mut VkAccelerationStructureKHR,
    ) -> VkResult,
>;
pub type PFN_vkDestroyAccelerationStructureKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        accelerationStructure: VkAccelerationStructureKHR,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkCmdBuildAccelerationStructuresKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        infoCount: u32,
        pInfos: *const VkAccelerationStructureBuildGeometryInfoKHR,
        ppBuildRangeInfos: *const *const VkAccelerationStructureBuildRangeInfoKHR,
    ),
>;
pub type PFN_vkCmdBuildAccelerationStructuresIndirectKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        infoCount: u32,
        pInfos: *const VkAccelerationStructureBuildGeometryInfoKHR,
        pIndirectDeviceAddresses: *const VkDeviceAddress,
        pIndirectStrides: *const u32,
        ppMaxPrimitiveCounts: *const *const u32,
    ),
>;
pub type PFN_vkBuildAccelerationStructuresKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        deferredOperation: VkDeferredOperationKHR,
        infoCount: u32,
        pInfos: *const VkAccelerationStructureBuildGeometryInfoKHR,
        ppBuildRangeInfos: *const *const VkAccelerationStructureBuildRangeInfoKHR,
    ) -> VkResult,
>;
pub type PFN_vkCopyAccelerationStructureKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        deferredOperation: VkDeferredOperationKHR,
        pInfo: *const VkCopyAccelerationStructureInfoKHR,
    ) -> VkResult,
>;
pub type PFN_vkCopyAccelerationStructureToMemoryKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        deferredOperation: VkDeferredOperationKHR,
        pInfo: *const VkCopyAccelerationStructureToMemoryInfoKHR,
    ) -> VkResult,
>;
pub type PFN_vkCopyMemoryToAccelerationStructureKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        deferredOperation: VkDeferredOperationKHR,
        pInfo: *const VkCopyMemoryToAccelerationStructureInfoKHR,
    ) -> VkResult,
>;
pub type PFN_vkWriteAccelerationStructuresPropertiesKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        accelerationStructureCount: u32,
        pAccelerationStructures: *const VkAccelerationStructureKHR,
        queryType: VkQueryType,
        dataSize: usize,
        pData: *mut ::core::ffi::c_void,
        stride: usize,
    ) -> VkResult,
>;
pub type PFN_vkCmdCopyAccelerationStructureKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        pInfo: *const VkCopyAccelerationStructureInfoKHR,
    ),
>;
pub type PFN_vkCmdCopyAccelerationStructureToMemoryKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        pInfo: *const VkCopyAccelerationStructureToMemoryInfoKHR,
    ),
>;
pub type PFN_vkCmdCopyMemoryToAccelerationStructureKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        pInfo: *const VkCopyMemoryToAccelerationStructureInfoKHR,
    ),
>;
pub type PFN_vkGetAccelerationStructureDeviceAddressKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pInfo: *const VkAccelerationStructureDeviceAddressInfoKHR,
    ) -> VkDeviceAddress,
>;
pub type PFN_vkCmdWriteAccelerationStructuresPropertiesKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        accelerationStructureCount: u32,
        pAccelerationStructures: *const VkAccelerationStructureKHR,
        queryType: VkQueryType,
        queryPool: VkQueryPool,
        firstQuery: u32,
    ),
>;
pub type PFN_vkGetDeviceAccelerationStructureCompatibilityKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pVersionInfo: *const VkAccelerationStructureVersionInfoKHR,
        pCompatibility: *mut VkAccelerationStructureCompatibilityKHR,
    ),
>;
pub type PFN_vkGetAccelerationStructureBuildSizesKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        buildType: VkAccelerationStructureBuildTypeKHR,
        pBuildInfo: *const VkAccelerationStructureBuildGeometryInfoKHR,
        pMaxPrimitiveCounts: *const u32,
        pSizeInfo: *mut VkAccelerationStructureBuildSizesInfoKHR,
    ),
>;
pub type VkShaderGroupShaderKHR = ::core::ffi::c_int;
pub type PFN_vkCmdTraceRaysKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        pRaygenShaderBindingTable: *const VkStridedDeviceAddressRegionKHR,
        pMissShaderBindingTable: *const VkStridedDeviceAddressRegionKHR,
        pHitShaderBindingTable: *const VkStridedDeviceAddressRegionKHR,
        pCallableShaderBindingTable: *const VkStridedDeviceAddressRegionKHR,
        width: u32,
        height: u32,
        depth: u32,
    ),
>;
pub type PFN_vkCreateRayTracingPipelinesKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        deferredOperation: VkDeferredOperationKHR,
        pipelineCache: VkPipelineCache,
        createInfoCount: u32,
        pCreateInfos: *const VkRayTracingPipelineCreateInfoKHR,
        pAllocator: *const VkAllocationCallbacks,
        pPipelines: *mut VkPipeline,
    ) -> VkResult,
>;
pub type PFN_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pipeline: VkPipeline,
        firstGroup: u32,
        groupCount: u32,
        dataSize: usize,
        pData: *mut ::core::ffi::c_void,
    ) -> VkResult,
>;
pub type PFN_vkCmdTraceRaysIndirectKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        pRaygenShaderBindingTable: *const VkStridedDeviceAddressRegionKHR,
        pMissShaderBindingTable: *const VkStridedDeviceAddressRegionKHR,
        pHitShaderBindingTable: *const VkStridedDeviceAddressRegionKHR,
        pCallableShaderBindingTable: *const VkStridedDeviceAddressRegionKHR,
        indirectDeviceAddress: VkDeviceAddress,
    ),
>;
pub type PFN_vkGetRayTracingShaderGroupStackSizeKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(
        device: VkDevice,
        pipeline: VkPipeline,
        group: u32,
        groupShader: VkShaderGroupShaderKHR,
    ) -> VkDeviceSize,
>;
pub type PFN_vkCmdSetRayTracingPipelineStackSizeKHR = ::core::option::Option<
    unsafe extern "stdcall" fn(commandBuffer: VkCommandBuffer, pipelineStackSize: u32),
>;
pub type PFN_vkCmdDrawMeshTasksEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        groupCountX: u32,
        groupCountY: u32,
        groupCountZ: u32,
    ),
>;
pub type PFN_vkCmdDrawMeshTasksIndirectEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        buffer: VkBuffer,
        offset: VkDeviceSize,
        drawCount: u32,
        stride: u32,
    ),
>;
pub type PFN_vkCmdDrawMeshTasksIndirectCountEXT = ::core::option::Option<
    unsafe extern "stdcall" fn(
        commandBuffer: VkCommandBuffer,
        buffer: VkBuffer,
        offset: VkDeviceSize,
        countBuffer: VkBuffer,
        countBufferOffset: VkDeviceSize,
        maxDrawCount: u32,
        stride: u32,
    ),
>;
#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkInstance_T {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDevice_T {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDevice_T {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkQueue_T {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkCommandBuffer_T {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkExtent2D {
    pub width: u32,
    pub height: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkExtent3D {
    pub width: u32,
    pub height: u32,
    pub depth: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkOffset2D {
    pub x: i32,
    pub y: i32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkOffset3D {
    pub x: i32,
    pub y: i32,
    pub z: i32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkRect2D {
    pub offset: VkOffset2D,
    pub extent: VkExtent2D,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkBaseInStructure {
    pub sType: VkStructureType,
    pub pNext: *const VkBaseInStructure,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkBaseOutStructure {
    pub sType: VkStructureType,
    pub pNext: *mut VkBaseOutStructure,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkBufferMemoryBarrier {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub srcAccessMask: VkAccessFlags,
    pub dstAccessMask: VkAccessFlags,
    pub srcQueueFamilyIndex: u32,
    pub dstQueueFamilyIndex: u32,
    pub buffer: VkBuffer,
    pub offset: VkDeviceSize,
    pub size: VkDeviceSize,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDispatchIndirectCommand {
    pub x: u32,
    pub y: u32,
    pub z: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDrawIndexedIndirectCommand {
    pub indexCount: u32,
    pub instanceCount: u32,
    pub firstIndex: u32,
    pub vertexOffset: i32,
    pub firstInstance: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDrawIndirectCommand {
    pub vertexCount: u32,
    pub instanceCount: u32,
    pub firstVertex: u32,
    pub firstInstance: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkImageSubresourceRange {
    pub aspectMask: VkImageAspectFlags,
    pub baseMipLevel: u32,
    pub levelCount: u32,
    pub baseArrayLayer: u32,
    pub layerCount: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkImageMemoryBarrier {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub srcAccessMask: VkAccessFlags,
    pub dstAccessMask: VkAccessFlags,
    pub oldLayout: VkImageLayout,
    pub newLayout: VkImageLayout,
    pub srcQueueFamilyIndex: u32,
    pub dstQueueFamilyIndex: u32,
    pub image: VkImage,
    pub subresourceRange: VkImageSubresourceRange,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkMemoryBarrier {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub srcAccessMask: VkAccessFlags,
    pub dstAccessMask: VkAccessFlags,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPipelineCacheHeaderVersionOne {
    pub headerSize: u32,
    pub headerVersion: VkPipelineCacheHeaderVersion,
    pub vendorID: u32,
    pub deviceID: u32,
    pub pipelineCacheUUID: [u8; 16usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAllocationCallbacks {
    pub pUserData: *mut ::core::ffi::c_void,
    pub pfnAllocation: PFN_vkAllocationFunction,
    pub pfnReallocation: PFN_vkReallocationFunction,
    pub pfnFree: PFN_vkFreeFunction,
    pub pfnInternalAllocation: PFN_vkInternalAllocationNotification,
    pub pfnInternalFree: PFN_vkInternalFreeNotification,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkApplicationInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub pApplicationName: *const ::core::ffi::c_char,
    pub applicationVersion: u32,
    pub pEngineName: *const ::core::ffi::c_char,
    pub engineVersion: u32,
    pub apiVersion: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkFormatProperties {
    pub linearTilingFeatures: VkFormatFeatureFlags,
    pub optimalTilingFeatures: VkFormatFeatureFlags,
    pub bufferFeatures: VkFormatFeatureFlags,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkImageFormatProperties {
    pub maxExtent: VkExtent3D,
    pub maxMipLevels: u32,
    pub maxArrayLayers: u32,
    pub sampleCounts: VkSampleCountFlags,
    pub maxResourceSize: VkDeviceSize,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkInstanceCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: VkInstanceCreateFlags,
    pub pApplicationInfo: *const VkApplicationInfo,
    pub enabledLayerCount: u32,
    pub ppEnabledLayerNames: *const *const ::core::ffi::c_char,
    pub enabledExtensionCount: u32,
    pub ppEnabledExtensionNames: *const *const ::core::ffi::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkMemoryHeap {
    pub size: VkDeviceSize,
    pub flags: VkMemoryHeapFlags,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkMemoryType {
    pub propertyFlags: VkMemoryPropertyFlags,
    pub heapIndex: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceFeatures {
    pub robustBufferAccess: VkBool32,
    pub fullDrawIndexUint32: VkBool32,
    pub imageCubeArray: VkBool32,
    pub independentBlend: VkBool32,
    pub geometryShader: VkBool32,
    pub tessellationShader: VkBool32,
    pub sampleRateShading: VkBool32,
    pub dualSrcBlend: VkBool32,
    pub logicOp: VkBool32,
    pub multiDrawIndirect: VkBool32,
    pub drawIndirectFirstInstance: VkBool32,
    pub depthClamp: VkBool32,
    pub depthBiasClamp: VkBool32,
    pub fillModeNonSolid: VkBool32,
    pub depthBounds: VkBool32,
    pub wideLines: VkBool32,
    pub largePoints: VkBool32,
    pub alphaToOne: VkBool32,
    pub multiViewport: VkBool32,
    pub samplerAnisotropy: VkBool32,
    pub textureCompressionETC2: VkBool32,
    pub textureCompressionASTC_LDR: VkBool32,
    pub textureCompressionBC: VkBool32,
    pub occlusionQueryPrecise: VkBool32,
    pub pipelineStatisticsQuery: VkBool32,
    pub vertexPipelineStoresAndAtomics: VkBool32,
    pub fragmentStoresAndAtomics: VkBool32,
    pub shaderTessellationAndGeometryPointSize: VkBool32,
    pub shaderImageGatherExtended: VkBool32,
    pub shaderStorageImageExtendedFormats: VkBool32,
    pub shaderStorageImageMultisample: VkBool32,
    pub shaderStorageImageReadWithoutFormat: VkBool32,
    pub shaderStorageImageWriteWithoutFormat: VkBool32,
    pub shaderUniformBufferArrayDynamicIndexing: VkBool32,
    pub shaderSampledImageArrayDynamicIndexing: VkBool32,
    pub shaderStorageBufferArrayDynamicIndexing: VkBool32,
    pub shaderStorageImageArrayDynamicIndexing: VkBool32,
    pub shaderClipDistance: VkBool32,
    pub shaderCullDistance: VkBool32,
    pub shaderFloat64: VkBool32,
    pub shaderInt64: VkBool32,
    pub shaderInt16: VkBool32,
    pub shaderResourceResidency: VkBool32,
    pub shaderResourceMinLod: VkBool32,
    pub sparseBinding: VkBool32,
    pub sparseResidencyBuffer: VkBool32,
    pub sparseResidencyImage2D: VkBool32,
    pub sparseResidencyImage3D: VkBool32,
    pub sparseResidency2Samples: VkBool32,
    pub sparseResidency4Samples: VkBool32,
    pub sparseResidency8Samples: VkBool32,
    pub sparseResidency16Samples: VkBool32,
    pub sparseResidencyAliased: VkBool32,
    pub variableMultisampleRate: VkBool32,
    pub inheritedQueries: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceLimits {
    pub maxImageDimension1D: u32,
    pub maxImageDimension2D: u32,
    pub maxImageDimension3D: u32,
    pub maxImageDimensionCube: u32,
    pub maxImageArrayLayers: u32,
    pub maxTexelBufferElements: u32,
    pub maxUniformBufferRange: u32,
    pub maxStorageBufferRange: u32,
    pub maxPushConstantsSize: u32,
    pub maxMemoryAllocationCount: u32,
    pub maxSamplerAllocationCount: u32,
    pub bufferImageGranularity: VkDeviceSize,
    pub sparseAddressSpaceSize: VkDeviceSize,
    pub maxBoundDescriptorSets: u32,
    pub maxPerStageDescriptorSamplers: u32,
    pub maxPerStageDescriptorUniformBuffers: u32,
    pub maxPerStageDescriptorStorageBuffers: u32,
    pub maxPerStageDescriptorSampledImages: u32,
    pub maxPerStageDescriptorStorageImages: u32,
    pub maxPerStageDescriptorInputAttachments: u32,
    pub maxPerStageResources: u32,
    pub maxDescriptorSetSamplers: u32,
    pub maxDescriptorSetUniformBuffers: u32,
    pub maxDescriptorSetUniformBuffersDynamic: u32,
    pub maxDescriptorSetStorageBuffers: u32,
    pub maxDescriptorSetStorageBuffersDynamic: u32,
    pub maxDescriptorSetSampledImages: u32,
    pub maxDescriptorSetStorageImages: u32,
    pub maxDescriptorSetInputAttachments: u32,
    pub maxVertexInputAttributes: u32,
    pub maxVertexInputBindings: u32,
    pub maxVertexInputAttributeOffset: u32,
    pub maxVertexInputBindingStride: u32,
    pub maxVertexOutputComponents: u32,
    pub maxTessellationGenerationLevel: u32,
    pub maxTessellationPatchSize: u32,
    pub maxTessellationControlPerVertexInputComponents: u32,
    pub maxTessellationControlPerVertexOutputComponents: u32,
    pub maxTessellationControlPerPatchOutputComponents: u32,
    pub maxTessellationControlTotalOutputComponents: u32,
    pub maxTessellationEvaluationInputComponents: u32,
    pub maxTessellationEvaluationOutputComponents: u32,
    pub maxGeometryShaderInvocations: u32,
    pub maxGeometryInputComponents: u32,
    pub maxGeometryOutputComponents: u32,
    pub maxGeometryOutputVertices: u32,
    pub maxGeometryTotalOutputComponents: u32,
    pub maxFragmentInputComponents: u32,
    pub maxFragmentOutputAttachments: u32,
    pub maxFragmentDualSrcAttachments: u32,
    pub maxFragmentCombinedOutputResources: u32,
    pub maxComputeSharedMemorySize: u32,
    pub maxComputeWorkGroupCount: [u32; 3usize],
    pub maxComputeWorkGroupInvocations: u32,
    pub maxComputeWorkGroupSize: [u32; 3usize],
    pub subPixelPrecisionBits: u32,
    pub subTexelPrecisionBits: u32,
    pub mipmapPrecisionBits: u32,
    pub maxDrawIndexedIndexValue: u32,
    pub maxDrawIndirectCount: u32,
    pub maxSamplerLodBias: f32,
    pub maxSamplerAnisotropy: f32,
    pub maxViewports: u32,
    pub maxViewportDimensions: [u32; 2usize],
    pub viewportBoundsRange: [f32; 2usize],
    pub viewportSubPixelBits: u32,
    pub minMemoryMapAlignment: usize,
    pub minTexelBufferOffsetAlignment: VkDeviceSize,
    pub minUniformBufferOffsetAlignment: VkDeviceSize,
    pub minStorageBufferOffsetAlignment: VkDeviceSize,
    pub minTexelOffset: i32,
    pub maxTexelOffset: u32,
    pub minTexelGatherOffset: i32,
    pub maxTexelGatherOffset: u32,
    pub minInterpolationOffset: f32,
    pub maxInterpolationOffset: f32,
    pub subPixelInterpolationOffsetBits: u32,
    pub maxFramebufferWidth: u32,
    pub maxFramebufferHeight: u32,
    pub maxFramebufferLayers: u32,
    pub framebufferColorSampleCounts: VkSampleCountFlags,
    pub framebufferDepthSampleCounts: VkSampleCountFlags,
    pub framebufferStencilSampleCounts: VkSampleCountFlags,
    pub framebufferNoAttachmentsSampleCounts: VkSampleCountFlags,
    pub maxColorAttachments: u32,
    pub sampledImageColorSampleCounts: VkSampleCountFlags,
    pub sampledImageIntegerSampleCounts: VkSampleCountFlags,
    pub sampledImageDepthSampleCounts: VkSampleCountFlags,
    pub sampledImageStencilSampleCounts: VkSampleCountFlags,
    pub storageImageSampleCounts: VkSampleCountFlags,
    pub maxSampleMaskWords: u32,
    pub timestampComputeAndGraphics: VkBool32,
    pub timestampPeriod: f32,
    pub maxClipDistances: u32,
    pub maxCullDistances: u32,
    pub maxCombinedClipAndCullDistances: u32,
    pub discreteQueuePriorities: u32,
    pub pointSizeRange: [f32; 2usize],
    pub lineWidthRange: [f32; 2usize],
    pub pointSizeGranularity: f32,
    pub lineWidthGranularity: f32,
    pub strictLines: VkBool32,
    pub standardSampleLocations: VkBool32,
    pub optimalBufferCopyOffsetAlignment: VkDeviceSize,
    pub optimalBufferCopyRowPitchAlignment: VkDeviceSize,
    pub nonCoherentAtomSize: VkDeviceSize,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceMemoryProperties {
    pub memoryTypeCount: u32,
    pub memoryTypes: [VkMemoryType; 32usize],
    pub memoryHeapCount: u32,
    pub memoryHeaps: [VkMemoryHeap; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceSparseProperties {
    pub residencyStandard2DBlockShape: VkBool32,
    pub residencyStandard2DMultisampleBlockShape: VkBool32,
    pub residencyStandard3DBlockShape: VkBool32,
    pub residencyAlignedMipSize: VkBool32,
    pub residencyNonResidentStrict: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceProperties {
    pub apiVersion: u32,
    pub driverVersion: u32,
    pub vendorID: u32,
    pub deviceID: u32,
    pub deviceType: VkPhysicalDeviceType,
    pub deviceName: [::core::ffi::c_char; 256usize],
    pub pipelineCacheUUID: [u8; 16usize],
    pub limits: VkPhysicalDeviceLimits,
    pub sparseProperties: VkPhysicalDeviceSparseProperties,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkQueueFamilyProperties {
    pub queueFlags: VkQueueFlags,
    pub queueCount: u32,
    pub timestampValidBits: u32,
    pub minImageTransferGranularity: VkExtent3D,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDeviceQueueCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: VkDeviceQueueCreateFlags,
    pub queueFamilyIndex: u32,
    pub queueCount: u32,
    pub pQueuePriorities: *const f32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDeviceCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: VkDeviceCreateFlags,
    pub queueCreateInfoCount: u32,
    pub pQueueCreateInfos: *const VkDeviceQueueCreateInfo,
    #[doc = " enabledLayerCount is deprecated and should not be used"]
    pub enabledLayerCount: u32,
    #[doc = " ppEnabledLayerNames is deprecated and should not be used"]
    pub ppEnabledLayerNames: *const *const ::core::ffi::c_char,
    pub enabledExtensionCount: u32,
    pub ppEnabledExtensionNames: *const *const ::core::ffi::c_char,
    pub pEnabledFeatures: *const VkPhysicalDeviceFeatures,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkExtensionProperties {
    pub extensionName: [::core::ffi::c_char; 256usize],
    pub specVersion: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkLayerProperties {
    pub layerName: [::core::ffi::c_char; 256usize],
    pub specVersion: u32,
    pub implementationVersion: u32,
    pub description: [::core::ffi::c_char; 256usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkSubmitInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub waitSemaphoreCount: u32,
    pub pWaitSemaphores: *const VkSemaphore,
    pub pWaitDstStageMask: *const VkPipelineStageFlags,
    pub commandBufferCount: u32,
    pub pCommandBuffers: *const VkCommandBuffer,
    pub signalSemaphoreCount: u32,
    pub pSignalSemaphores: *const VkSemaphore,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkMappedMemoryRange {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub memory: VkDeviceMemory,
    pub offset: VkDeviceSize,
    pub size: VkDeviceSize,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkMemoryAllocateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub allocationSize: VkDeviceSize,
    pub memoryTypeIndex: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkMemoryRequirements {
    pub size: VkDeviceSize,
    pub alignment: VkDeviceSize,
    pub memoryTypeBits: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkSparseMemoryBind {
    pub resourceOffset: VkDeviceSize,
    pub size: VkDeviceSize,
    pub memory: VkDeviceMemory,
    pub memoryOffset: VkDeviceSize,
    pub flags: VkSparseMemoryBindFlags,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkSparseBufferMemoryBindInfo {
    pub buffer: VkBuffer,
    pub bindCount: u32,
    pub pBinds: *const VkSparseMemoryBind,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkSparseImageOpaqueMemoryBindInfo {
    pub image: VkImage,
    pub bindCount: u32,
    pub pBinds: *const VkSparseMemoryBind,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkImageSubresource {
    pub aspectMask: VkImageAspectFlags,
    pub mipLevel: u32,
    pub arrayLayer: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkSparseImageMemoryBind {
    pub subresource: VkImageSubresource,
    pub offset: VkOffset3D,
    pub extent: VkExtent3D,
    pub memory: VkDeviceMemory,
    pub memoryOffset: VkDeviceSize,
    pub flags: VkSparseMemoryBindFlags,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkSparseImageMemoryBindInfo {
    pub image: VkImage,
    pub bindCount: u32,
    pub pBinds: *const VkSparseImageMemoryBind,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkBindSparseInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub waitSemaphoreCount: u32,
    pub pWaitSemaphores: *const VkSemaphore,
    pub bufferBindCount: u32,
    pub pBufferBinds: *const VkSparseBufferMemoryBindInfo,
    pub imageOpaqueBindCount: u32,
    pub pImageOpaqueBinds: *const VkSparseImageOpaqueMemoryBindInfo,
    pub imageBindCount: u32,
    pub pImageBinds: *const VkSparseImageMemoryBindInfo,
    pub signalSemaphoreCount: u32,
    pub pSignalSemaphores: *const VkSemaphore,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkSparseImageFormatProperties {
    pub aspectMask: VkImageAspectFlags,
    pub imageGranularity: VkExtent3D,
    pub flags: VkSparseImageFormatFlags,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkSparseImageMemoryRequirements {
    pub formatProperties: VkSparseImageFormatProperties,
    pub imageMipTailFirstLod: u32,
    pub imageMipTailSize: VkDeviceSize,
    pub imageMipTailOffset: VkDeviceSize,
    pub imageMipTailStride: VkDeviceSize,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkFenceCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: VkFenceCreateFlags,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkSemaphoreCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: VkSemaphoreCreateFlags,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkEventCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: VkEventCreateFlags,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkQueryPoolCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: VkQueryPoolCreateFlags,
    pub queryType: VkQueryType,
    pub queryCount: u32,
    pub pipelineStatistics: VkQueryPipelineStatisticFlags,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkBufferCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: VkBufferCreateFlags,
    pub size: VkDeviceSize,
    pub usage: VkBufferUsageFlags,
    pub sharingMode: VkSharingMode,
    pub queueFamilyIndexCount: u32,
    pub pQueueFamilyIndices: *const u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkBufferViewCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: VkBufferViewCreateFlags,
    pub buffer: VkBuffer,
    pub format: VkFormat,
    pub offset: VkDeviceSize,
    pub range: VkDeviceSize,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkImageCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: VkImageCreateFlags,
    pub imageType: VkImageType,
    pub format: VkFormat,
    pub extent: VkExtent3D,
    pub mipLevels: u32,
    pub arrayLayers: u32,
    pub samples: VkSampleCountFlagBits,
    pub tiling: VkImageTiling,
    pub usage: VkImageUsageFlags,
    pub sharingMode: VkSharingMode,
    pub queueFamilyIndexCount: u32,
    pub pQueueFamilyIndices: *const u32,
    pub initialLayout: VkImageLayout,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkSubresourceLayout {
    pub offset: VkDeviceSize,
    pub size: VkDeviceSize,
    pub rowPitch: VkDeviceSize,
    pub arrayPitch: VkDeviceSize,
    pub depthPitch: VkDeviceSize,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkComponentMapping {
    pub r: VkComponentSwizzle,
    pub g: VkComponentSwizzle,
    pub b: VkComponentSwizzle,
    pub a: VkComponentSwizzle,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkImageViewCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: VkImageViewCreateFlags,
    pub image: VkImage,
    pub viewType: VkImageViewType,
    pub format: VkFormat,
    pub components: VkComponentMapping,
    pub subresourceRange: VkImageSubresourceRange,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkShaderModuleCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: VkShaderModuleCreateFlags,
    pub codeSize: usize,
    pub pCode: *const u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPipelineCacheCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: VkPipelineCacheCreateFlags,
    pub initialDataSize: usize,
    pub pInitialData: *const ::core::ffi::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkSpecializationMapEntry {
    pub constantID: u32,
    pub offset: u32,
    pub size: usize,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkSpecializationInfo {
    pub mapEntryCount: u32,
    pub pMapEntries: *const VkSpecializationMapEntry,
    pub dataSize: usize,
    pub pData: *const ::core::ffi::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPipelineShaderStageCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: VkPipelineShaderStageCreateFlags,
    pub stage: VkShaderStageFlagBits,
    pub module: VkShaderModule,
    pub pName: *const ::core::ffi::c_char,
    pub pSpecializationInfo: *const VkSpecializationInfo,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkComputePipelineCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: VkPipelineCreateFlags,
    pub stage: VkPipelineShaderStageCreateInfo,
    pub layout: VkPipelineLayout,
    pub basePipelineHandle: VkPipeline,
    pub basePipelineIndex: i32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVertexInputBindingDescription {
    pub binding: u32,
    pub stride: u32,
    pub inputRate: VkVertexInputRate,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVertexInputAttributeDescription {
    pub location: u32,
    pub binding: u32,
    pub format: VkFormat,
    pub offset: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPipelineVertexInputStateCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: VkPipelineVertexInputStateCreateFlags,
    pub vertexBindingDescriptionCount: u32,
    pub pVertexBindingDescriptions: *const VkVertexInputBindingDescription,
    pub vertexAttributeDescriptionCount: u32,
    pub pVertexAttributeDescriptions: *const VkVertexInputAttributeDescription,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPipelineInputAssemblyStateCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: VkPipelineInputAssemblyStateCreateFlags,
    pub topology: VkPrimitiveTopology,
    pub primitiveRestartEnable: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPipelineTessellationStateCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: VkPipelineTessellationStateCreateFlags,
    pub patchControlPoints: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkViewport {
    pub x: f32,
    pub y: f32,
    pub width: f32,
    pub height: f32,
    pub minDepth: f32,
    pub maxDepth: f32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPipelineViewportStateCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: VkPipelineViewportStateCreateFlags,
    pub viewportCount: u32,
    pub pViewports: *const VkViewport,
    pub scissorCount: u32,
    pub pScissors: *const VkRect2D,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPipelineRasterizationStateCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: VkPipelineRasterizationStateCreateFlags,
    pub depthClampEnable: VkBool32,
    pub rasterizerDiscardEnable: VkBool32,
    pub polygonMode: VkPolygonMode,
    pub cullMode: VkCullModeFlags,
    pub frontFace: VkFrontFace,
    pub depthBiasEnable: VkBool32,
    pub depthBiasConstantFactor: f32,
    pub depthBiasClamp: f32,
    pub depthBiasSlopeFactor: f32,
    pub lineWidth: f32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPipelineMultisampleStateCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: VkPipelineMultisampleStateCreateFlags,
    pub rasterizationSamples: VkSampleCountFlagBits,
    pub sampleShadingEnable: VkBool32,
    pub minSampleShading: f32,
    pub pSampleMask: *const VkSampleMask,
    pub alphaToCoverageEnable: VkBool32,
    pub alphaToOneEnable: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkStencilOpState {
    pub failOp: VkStencilOp,
    pub passOp: VkStencilOp,
    pub depthFailOp: VkStencilOp,
    pub compareOp: VkCompareOp,
    pub compareMask: u32,
    pub writeMask: u32,
    pub reference: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPipelineDepthStencilStateCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: VkPipelineDepthStencilStateCreateFlags,
    pub depthTestEnable: VkBool32,
    pub depthWriteEnable: VkBool32,
    pub depthCompareOp: VkCompareOp,
    pub depthBoundsTestEnable: VkBool32,
    pub stencilTestEnable: VkBool32,
    pub front: VkStencilOpState,
    pub back: VkStencilOpState,
    pub minDepthBounds: f32,
    pub maxDepthBounds: f32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPipelineColorBlendAttachmentState {
    pub blendEnable: VkBool32,
    pub srcColorBlendFactor: VkBlendFactor,
    pub dstColorBlendFactor: VkBlendFactor,
    pub colorBlendOp: VkBlendOp,
    pub srcAlphaBlendFactor: VkBlendFactor,
    pub dstAlphaBlendFactor: VkBlendFactor,
    pub alphaBlendOp: VkBlendOp,
    pub colorWriteMask: VkColorComponentFlags,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPipelineColorBlendStateCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: VkPipelineColorBlendStateCreateFlags,
    pub logicOpEnable: VkBool32,
    pub logicOp: VkLogicOp,
    pub attachmentCount: u32,
    pub pAttachments: *const VkPipelineColorBlendAttachmentState,
    pub blendConstants: [f32; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPipelineDynamicStateCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: VkPipelineDynamicStateCreateFlags,
    pub dynamicStateCount: u32,
    pub pDynamicStates: *const VkDynamicState,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkGraphicsPipelineCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: VkPipelineCreateFlags,
    pub stageCount: u32,
    pub pStages: *const VkPipelineShaderStageCreateInfo,
    pub pVertexInputState: *const VkPipelineVertexInputStateCreateInfo,
    pub pInputAssemblyState: *const VkPipelineInputAssemblyStateCreateInfo,
    pub pTessellationState: *const VkPipelineTessellationStateCreateInfo,
    pub pViewportState: *const VkPipelineViewportStateCreateInfo,
    pub pRasterizationState: *const VkPipelineRasterizationStateCreateInfo,
    pub pMultisampleState: *const VkPipelineMultisampleStateCreateInfo,
    pub pDepthStencilState: *const VkPipelineDepthStencilStateCreateInfo,
    pub pColorBlendState: *const VkPipelineColorBlendStateCreateInfo,
    pub pDynamicState: *const VkPipelineDynamicStateCreateInfo,
    pub layout: VkPipelineLayout,
    pub renderPass: VkRenderPass,
    pub subpass: u32,
    pub basePipelineHandle: VkPipeline,
    pub basePipelineIndex: i32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPushConstantRange {
    pub stageFlags: VkShaderStageFlags,
    pub offset: u32,
    pub size: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPipelineLayoutCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: VkPipelineLayoutCreateFlags,
    pub setLayoutCount: u32,
    pub pSetLayouts: *const VkDescriptorSetLayout,
    pub pushConstantRangeCount: u32,
    pub pPushConstantRanges: *const VkPushConstantRange,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkSamplerCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: VkSamplerCreateFlags,
    pub magFilter: VkFilter,
    pub minFilter: VkFilter,
    pub mipmapMode: VkSamplerMipmapMode,
    pub addressModeU: VkSamplerAddressMode,
    pub addressModeV: VkSamplerAddressMode,
    pub addressModeW: VkSamplerAddressMode,
    pub mipLodBias: f32,
    pub anisotropyEnable: VkBool32,
    pub maxAnisotropy: f32,
    pub compareEnable: VkBool32,
    pub compareOp: VkCompareOp,
    pub minLod: f32,
    pub maxLod: f32,
    pub borderColor: VkBorderColor,
    pub unnormalizedCoordinates: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkCopyDescriptorSet {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub srcSet: VkDescriptorSet,
    pub srcBinding: u32,
    pub srcArrayElement: u32,
    pub dstSet: VkDescriptorSet,
    pub dstBinding: u32,
    pub dstArrayElement: u32,
    pub descriptorCount: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDescriptorBufferInfo {
    pub buffer: VkBuffer,
    pub offset: VkDeviceSize,
    pub range: VkDeviceSize,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDescriptorImageInfo {
    pub sampler: VkSampler,
    pub imageView: VkImageView,
    pub imageLayout: VkImageLayout,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDescriptorPoolSize {
    pub type_: VkDescriptorType,
    pub descriptorCount: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDescriptorPoolCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: VkDescriptorPoolCreateFlags,
    pub maxSets: u32,
    pub poolSizeCount: u32,
    pub pPoolSizes: *const VkDescriptorPoolSize,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDescriptorSetAllocateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub descriptorPool: VkDescriptorPool,
    pub descriptorSetCount: u32,
    pub pSetLayouts: *const VkDescriptorSetLayout,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDescriptorSetLayoutBinding {
    pub binding: u32,
    pub descriptorType: VkDescriptorType,
    pub descriptorCount: u32,
    pub stageFlags: VkShaderStageFlags,
    pub pImmutableSamplers: *const VkSampler,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDescriptorSetLayoutCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: VkDescriptorSetLayoutCreateFlags,
    pub bindingCount: u32,
    pub pBindings: *const VkDescriptorSetLayoutBinding,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkWriteDescriptorSet {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub dstSet: VkDescriptorSet,
    pub dstBinding: u32,
    pub dstArrayElement: u32,
    pub descriptorCount: u32,
    pub descriptorType: VkDescriptorType,
    pub pImageInfo: *const VkDescriptorImageInfo,
    pub pBufferInfo: *const VkDescriptorBufferInfo,
    pub pTexelBufferView: *const VkBufferView,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkAttachmentDescription {
    pub flags: VkAttachmentDescriptionFlags,
    pub format: VkFormat,
    pub samples: VkSampleCountFlagBits,
    pub loadOp: VkAttachmentLoadOp,
    pub storeOp: VkAttachmentStoreOp,
    pub stencilLoadOp: VkAttachmentLoadOp,
    pub stencilStoreOp: VkAttachmentStoreOp,
    pub initialLayout: VkImageLayout,
    pub finalLayout: VkImageLayout,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkAttachmentReference {
    pub attachment: u32,
    pub layout: VkImageLayout,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkFramebufferCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: VkFramebufferCreateFlags,
    pub renderPass: VkRenderPass,
    pub attachmentCount: u32,
    pub pAttachments: *const VkImageView,
    pub width: u32,
    pub height: u32,
    pub layers: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkSubpassDescription {
    pub flags: VkSubpassDescriptionFlags,
    pub pipelineBindPoint: VkPipelineBindPoint,
    pub inputAttachmentCount: u32,
    pub pInputAttachments: *const VkAttachmentReference,
    pub colorAttachmentCount: u32,
    pub pColorAttachments: *const VkAttachmentReference,
    pub pResolveAttachments: *const VkAttachmentReference,
    pub pDepthStencilAttachment: *const VkAttachmentReference,
    pub preserveAttachmentCount: u32,
    pub pPreserveAttachments: *const u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkSubpassDependency {
    pub srcSubpass: u32,
    pub dstSubpass: u32,
    pub srcStageMask: VkPipelineStageFlags,
    pub dstStageMask: VkPipelineStageFlags,
    pub srcAccessMask: VkAccessFlags,
    pub dstAccessMask: VkAccessFlags,
    pub dependencyFlags: VkDependencyFlags,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkRenderPassCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: VkRenderPassCreateFlags,
    pub attachmentCount: u32,
    pub pAttachments: *const VkAttachmentDescription,
    pub subpassCount: u32,
    pub pSubpasses: *const VkSubpassDescription,
    pub dependencyCount: u32,
    pub pDependencies: *const VkSubpassDependency,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkCommandPoolCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: VkCommandPoolCreateFlags,
    pub queueFamilyIndex: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkCommandBufferAllocateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub commandPool: VkCommandPool,
    pub level: VkCommandBufferLevel,
    pub commandBufferCount: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkCommandBufferInheritanceInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub renderPass: VkRenderPass,
    pub subpass: u32,
    pub framebuffer: VkFramebuffer,
    pub occlusionQueryEnable: VkBool32,
    pub queryFlags: VkQueryControlFlags,
    pub pipelineStatistics: VkQueryPipelineStatisticFlags,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkCommandBufferBeginInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: VkCommandBufferUsageFlags,
    pub pInheritanceInfo: *const VkCommandBufferInheritanceInfo,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkBufferCopy {
    pub srcOffset: VkDeviceSize,
    pub dstOffset: VkDeviceSize,
    pub size: VkDeviceSize,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkImageSubresourceLayers {
    pub aspectMask: VkImageAspectFlags,
    pub mipLevel: u32,
    pub baseArrayLayer: u32,
    pub layerCount: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkBufferImageCopy {
    pub bufferOffset: VkDeviceSize,
    pub bufferRowLength: u32,
    pub bufferImageHeight: u32,
    pub imageSubresource: VkImageSubresourceLayers,
    pub imageOffset: VkOffset3D,
    pub imageExtent: VkExtent3D,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkClearDepthStencilValue {
    pub depth: f32,
    pub stencil: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkClearAttachment {
    pub aspectMask: VkImageAspectFlags,
    pub colorAttachment: u32,
    pub clearValue: VkClearValue,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkClearRect {
    pub rect: VkRect2D,
    pub baseArrayLayer: u32,
    pub layerCount: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkImageBlit {
    pub srcSubresource: VkImageSubresourceLayers,
    pub srcOffsets: [VkOffset3D; 2usize],
    pub dstSubresource: VkImageSubresourceLayers,
    pub dstOffsets: [VkOffset3D; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkImageCopy {
    pub srcSubresource: VkImageSubresourceLayers,
    pub srcOffset: VkOffset3D,
    pub dstSubresource: VkImageSubresourceLayers,
    pub dstOffset: VkOffset3D,
    pub extent: VkExtent3D,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkImageResolve {
    pub srcSubresource: VkImageSubresourceLayers,
    pub srcOffset: VkOffset3D,
    pub dstSubresource: VkImageSubresourceLayers,
    pub dstOffset: VkOffset3D,
    pub extent: VkExtent3D,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkRenderPassBeginInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub renderPass: VkRenderPass,
    pub framebuffer: VkFramebuffer,
    pub renderArea: VkRect2D,
    pub clearValueCount: u32,
    pub pClearValues: *const VkClearValue,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceSubgroupProperties {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub subgroupSize: u32,
    pub supportedStages: VkShaderStageFlags,
    pub supportedOperations: VkSubgroupFeatureFlags,
    pub quadOperationsInAllStages: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkBindBufferMemoryInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub buffer: VkBuffer,
    pub memory: VkDeviceMemory,
    pub memoryOffset: VkDeviceSize,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkBindImageMemoryInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub image: VkImage,
    pub memory: VkDeviceMemory,
    pub memoryOffset: VkDeviceSize,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDevice16BitStorageFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub storageBuffer16BitAccess: VkBool32,
    pub uniformAndStorageBuffer16BitAccess: VkBool32,
    pub storagePushConstant16: VkBool32,
    pub storageInputOutput16: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkMemoryDedicatedRequirements {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub prefersDedicatedAllocation: VkBool32,
    pub requiresDedicatedAllocation: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkMemoryDedicatedAllocateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub image: VkImage,
    pub buffer: VkBuffer,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkMemoryAllocateFlagsInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: VkMemoryAllocateFlags,
    pub deviceMask: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDeviceGroupRenderPassBeginInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub deviceMask: u32,
    pub deviceRenderAreaCount: u32,
    pub pDeviceRenderAreas: *const VkRect2D,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDeviceGroupCommandBufferBeginInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub deviceMask: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDeviceGroupSubmitInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub waitSemaphoreCount: u32,
    pub pWaitSemaphoreDeviceIndices: *const u32,
    pub commandBufferCount: u32,
    pub pCommandBufferDeviceMasks: *const u32,
    pub signalSemaphoreCount: u32,
    pub pSignalSemaphoreDeviceIndices: *const u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDeviceGroupBindSparseInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub resourceDeviceIndex: u32,
    pub memoryDeviceIndex: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkBindBufferMemoryDeviceGroupInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub deviceIndexCount: u32,
    pub pDeviceIndices: *const u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkBindImageMemoryDeviceGroupInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub deviceIndexCount: u32,
    pub pDeviceIndices: *const u32,
    pub splitInstanceBindRegionCount: u32,
    pub pSplitInstanceBindRegions: *const VkRect2D,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceGroupProperties {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub physicalDeviceCount: u32,
    pub physicalDevices: [VkPhysicalDevice; 32usize],
    pub subsetAllocation: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDeviceGroupDeviceCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub physicalDeviceCount: u32,
    pub pPhysicalDevices: *const VkPhysicalDevice,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkBufferMemoryRequirementsInfo2 {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub buffer: VkBuffer,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkImageMemoryRequirementsInfo2 {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub image: VkImage,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkImageSparseMemoryRequirementsInfo2 {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub image: VkImage,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkMemoryRequirements2 {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub memoryRequirements: VkMemoryRequirements,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkSparseImageMemoryRequirements2 {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub memoryRequirements: VkSparseImageMemoryRequirements,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceFeatures2 {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub features: VkPhysicalDeviceFeatures,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceProperties2 {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub properties: VkPhysicalDeviceProperties,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkFormatProperties2 {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub formatProperties: VkFormatProperties,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkImageFormatProperties2 {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub imageFormatProperties: VkImageFormatProperties,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceImageFormatInfo2 {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub format: VkFormat,
    pub type_: VkImageType,
    pub tiling: VkImageTiling,
    pub usage: VkImageUsageFlags,
    pub flags: VkImageCreateFlags,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkQueueFamilyProperties2 {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub queueFamilyProperties: VkQueueFamilyProperties,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceMemoryProperties2 {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub memoryProperties: VkPhysicalDeviceMemoryProperties,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkSparseImageFormatProperties2 {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub properties: VkSparseImageFormatProperties,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceSparseImageFormatInfo2 {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub format: VkFormat,
    pub type_: VkImageType,
    pub samples: VkSampleCountFlagBits,
    pub usage: VkImageUsageFlags,
    pub tiling: VkImageTiling,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDevicePointClippingProperties {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub pointClippingBehavior: VkPointClippingBehavior,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkInputAttachmentAspectReference {
    pub subpass: u32,
    pub inputAttachmentIndex: u32,
    pub aspectMask: VkImageAspectFlags,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkRenderPassInputAttachmentAspectCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub aspectReferenceCount: u32,
    pub pAspectReferences: *const VkInputAttachmentAspectReference,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkImageViewUsageCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub usage: VkImageUsageFlags,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPipelineTessellationDomainOriginStateCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub domainOrigin: VkTessellationDomainOrigin,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkRenderPassMultiviewCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub subpassCount: u32,
    pub pViewMasks: *const u32,
    pub dependencyCount: u32,
    pub pViewOffsets: *const i32,
    pub correlationMaskCount: u32,
    pub pCorrelationMasks: *const u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceMultiviewFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub multiview: VkBool32,
    pub multiviewGeometryShader: VkBool32,
    pub multiviewTessellationShader: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceMultiviewProperties {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub maxMultiviewViewCount: u32,
    pub maxMultiviewInstanceIndex: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceVariablePointersFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub variablePointersStorageBuffer: VkBool32,
    pub variablePointers: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceProtectedMemoryFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub protectedMemory: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceProtectedMemoryProperties {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub protectedNoFault: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDeviceQueueInfo2 {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: VkDeviceQueueCreateFlags,
    pub queueFamilyIndex: u32,
    pub queueIndex: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkProtectedSubmitInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub protectedSubmit: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkSamplerYcbcrConversionCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub format: VkFormat,
    pub ycbcrModel: VkSamplerYcbcrModelConversion,
    pub ycbcrRange: VkSamplerYcbcrRange,
    pub components: VkComponentMapping,
    pub xChromaOffset: VkChromaLocation,
    pub yChromaOffset: VkChromaLocation,
    pub chromaFilter: VkFilter,
    pub forceExplicitReconstruction: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkSamplerYcbcrConversionInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub conversion: VkSamplerYcbcrConversion,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkBindImagePlaneMemoryInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub planeAspect: VkImageAspectFlagBits,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkImagePlaneMemoryRequirementsInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub planeAspect: VkImageAspectFlagBits,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceSamplerYcbcrConversionFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub samplerYcbcrConversion: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkSamplerYcbcrConversionImageFormatProperties {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub combinedImageSamplerDescriptorCount: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDescriptorUpdateTemplateEntry {
    pub dstBinding: u32,
    pub dstArrayElement: u32,
    pub descriptorCount: u32,
    pub descriptorType: VkDescriptorType,
    pub offset: usize,
    pub stride: usize,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDescriptorUpdateTemplateCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: VkDescriptorUpdateTemplateCreateFlags,
    pub descriptorUpdateEntryCount: u32,
    pub pDescriptorUpdateEntries: *const VkDescriptorUpdateTemplateEntry,
    pub templateType: VkDescriptorUpdateTemplateType,
    pub descriptorSetLayout: VkDescriptorSetLayout,
    pub pipelineBindPoint: VkPipelineBindPoint,
    pub pipelineLayout: VkPipelineLayout,
    pub set: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkExternalMemoryProperties {
    pub externalMemoryFeatures: VkExternalMemoryFeatureFlags,
    pub exportFromImportedHandleTypes: VkExternalMemoryHandleTypeFlags,
    pub compatibleHandleTypes: VkExternalMemoryHandleTypeFlags,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceExternalImageFormatInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub handleType: VkExternalMemoryHandleTypeFlagBits,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkExternalImageFormatProperties {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub externalMemoryProperties: VkExternalMemoryProperties,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceExternalBufferInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: VkBufferCreateFlags,
    pub usage: VkBufferUsageFlags,
    pub handleType: VkExternalMemoryHandleTypeFlagBits,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkExternalBufferProperties {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub externalMemoryProperties: VkExternalMemoryProperties,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceIDProperties {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub deviceUUID: [u8; 16usize],
    pub driverUUID: [u8; 16usize],
    pub deviceLUID: [u8; 8usize],
    pub deviceNodeMask: u32,
    pub deviceLUIDValid: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkExternalMemoryImageCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub handleTypes: VkExternalMemoryHandleTypeFlags,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkExternalMemoryBufferCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub handleTypes: VkExternalMemoryHandleTypeFlags,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkExportMemoryAllocateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub handleTypes: VkExternalMemoryHandleTypeFlags,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceExternalFenceInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub handleType: VkExternalFenceHandleTypeFlagBits,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkExternalFenceProperties {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub exportFromImportedHandleTypes: VkExternalFenceHandleTypeFlags,
    pub compatibleHandleTypes: VkExternalFenceHandleTypeFlags,
    pub externalFenceFeatures: VkExternalFenceFeatureFlags,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkExportFenceCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub handleTypes: VkExternalFenceHandleTypeFlags,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkExportSemaphoreCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub handleTypes: VkExternalSemaphoreHandleTypeFlags,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceExternalSemaphoreInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub handleType: VkExternalSemaphoreHandleTypeFlagBits,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkExternalSemaphoreProperties {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub exportFromImportedHandleTypes: VkExternalSemaphoreHandleTypeFlags,
    pub compatibleHandleTypes: VkExternalSemaphoreHandleTypeFlags,
    pub externalSemaphoreFeatures: VkExternalSemaphoreFeatureFlags,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceMaintenance3Properties {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub maxPerSetDescriptors: u32,
    pub maxMemoryAllocationSize: VkDeviceSize,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDescriptorSetLayoutSupport {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub supported: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceShaderDrawParametersFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub shaderDrawParameters: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceVulkan11Features {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub storageBuffer16BitAccess: VkBool32,
    pub uniformAndStorageBuffer16BitAccess: VkBool32,
    pub storagePushConstant16: VkBool32,
    pub storageInputOutput16: VkBool32,
    pub multiview: VkBool32,
    pub multiviewGeometryShader: VkBool32,
    pub multiviewTessellationShader: VkBool32,
    pub variablePointersStorageBuffer: VkBool32,
    pub variablePointers: VkBool32,
    pub protectedMemory: VkBool32,
    pub samplerYcbcrConversion: VkBool32,
    pub shaderDrawParameters: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceVulkan11Properties {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub deviceUUID: [u8; 16usize],
    pub driverUUID: [u8; 16usize],
    pub deviceLUID: [u8; 8usize],
    pub deviceNodeMask: u32,
    pub deviceLUIDValid: VkBool32,
    pub subgroupSize: u32,
    pub subgroupSupportedStages: VkShaderStageFlags,
    pub subgroupSupportedOperations: VkSubgroupFeatureFlags,
    pub subgroupQuadOperationsInAllStages: VkBool32,
    pub pointClippingBehavior: VkPointClippingBehavior,
    pub maxMultiviewViewCount: u32,
    pub maxMultiviewInstanceIndex: u32,
    pub protectedNoFault: VkBool32,
    pub maxPerSetDescriptors: u32,
    pub maxMemoryAllocationSize: VkDeviceSize,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceVulkan12Features {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub samplerMirrorClampToEdge: VkBool32,
    pub drawIndirectCount: VkBool32,
    pub storageBuffer8BitAccess: VkBool32,
    pub uniformAndStorageBuffer8BitAccess: VkBool32,
    pub storagePushConstant8: VkBool32,
    pub shaderBufferInt64Atomics: VkBool32,
    pub shaderSharedInt64Atomics: VkBool32,
    pub shaderFloat16: VkBool32,
    pub shaderInt8: VkBool32,
    pub descriptorIndexing: VkBool32,
    pub shaderInputAttachmentArrayDynamicIndexing: VkBool32,
    pub shaderUniformTexelBufferArrayDynamicIndexing: VkBool32,
    pub shaderStorageTexelBufferArrayDynamicIndexing: VkBool32,
    pub shaderUniformBufferArrayNonUniformIndexing: VkBool32,
    pub shaderSampledImageArrayNonUniformIndexing: VkBool32,
    pub shaderStorageBufferArrayNonUniformIndexing: VkBool32,
    pub shaderStorageImageArrayNonUniformIndexing: VkBool32,
    pub shaderInputAttachmentArrayNonUniformIndexing: VkBool32,
    pub shaderUniformTexelBufferArrayNonUniformIndexing: VkBool32,
    pub shaderStorageTexelBufferArrayNonUniformIndexing: VkBool32,
    pub descriptorBindingUniformBufferUpdateAfterBind: VkBool32,
    pub descriptorBindingSampledImageUpdateAfterBind: VkBool32,
    pub descriptorBindingStorageImageUpdateAfterBind: VkBool32,
    pub descriptorBindingStorageBufferUpdateAfterBind: VkBool32,
    pub descriptorBindingUniformTexelBufferUpdateAfterBind: VkBool32,
    pub descriptorBindingStorageTexelBufferUpdateAfterBind: VkBool32,
    pub descriptorBindingUpdateUnusedWhilePending: VkBool32,
    pub descriptorBindingPartiallyBound: VkBool32,
    pub descriptorBindingVariableDescriptorCount: VkBool32,
    pub runtimeDescriptorArray: VkBool32,
    pub samplerFilterMinmax: VkBool32,
    pub scalarBlockLayout: VkBool32,
    pub imagelessFramebuffer: VkBool32,
    pub uniformBufferStandardLayout: VkBool32,
    pub shaderSubgroupExtendedTypes: VkBool32,
    pub separateDepthStencilLayouts: VkBool32,
    pub hostQueryReset: VkBool32,
    pub timelineSemaphore: VkBool32,
    pub bufferDeviceAddress: VkBool32,
    pub bufferDeviceAddressCaptureReplay: VkBool32,
    pub bufferDeviceAddressMultiDevice: VkBool32,
    pub vulkanMemoryModel: VkBool32,
    pub vulkanMemoryModelDeviceScope: VkBool32,
    pub vulkanMemoryModelAvailabilityVisibilityChains: VkBool32,
    pub shaderOutputViewportIndex: VkBool32,
    pub shaderOutputLayer: VkBool32,
    pub subgroupBroadcastDynamicId: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkConformanceVersion {
    pub major: u8,
    pub minor: u8,
    pub subminor: u8,
    pub patch: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceVulkan12Properties {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub driverID: VkDriverId,
    pub driverName: [::core::ffi::c_char; 256usize],
    pub driverInfo: [::core::ffi::c_char; 256usize],
    pub conformanceVersion: VkConformanceVersion,
    pub denormBehaviorIndependence: VkShaderFloatControlsIndependence,
    pub roundingModeIndependence: VkShaderFloatControlsIndependence,
    pub shaderSignedZeroInfNanPreserveFloat16: VkBool32,
    pub shaderSignedZeroInfNanPreserveFloat32: VkBool32,
    pub shaderSignedZeroInfNanPreserveFloat64: VkBool32,
    pub shaderDenormPreserveFloat16: VkBool32,
    pub shaderDenormPreserveFloat32: VkBool32,
    pub shaderDenormPreserveFloat64: VkBool32,
    pub shaderDenormFlushToZeroFloat16: VkBool32,
    pub shaderDenormFlushToZeroFloat32: VkBool32,
    pub shaderDenormFlushToZeroFloat64: VkBool32,
    pub shaderRoundingModeRTEFloat16: VkBool32,
    pub shaderRoundingModeRTEFloat32: VkBool32,
    pub shaderRoundingModeRTEFloat64: VkBool32,
    pub shaderRoundingModeRTZFloat16: VkBool32,
    pub shaderRoundingModeRTZFloat32: VkBool32,
    pub shaderRoundingModeRTZFloat64: VkBool32,
    pub maxUpdateAfterBindDescriptorsInAllPools: u32,
    pub shaderUniformBufferArrayNonUniformIndexingNative: VkBool32,
    pub shaderSampledImageArrayNonUniformIndexingNative: VkBool32,
    pub shaderStorageBufferArrayNonUniformIndexingNative: VkBool32,
    pub shaderStorageImageArrayNonUniformIndexingNative: VkBool32,
    pub shaderInputAttachmentArrayNonUniformIndexingNative: VkBool32,
    pub robustBufferAccessUpdateAfterBind: VkBool32,
    pub quadDivergentImplicitLod: VkBool32,
    pub maxPerStageDescriptorUpdateAfterBindSamplers: u32,
    pub maxPerStageDescriptorUpdateAfterBindUniformBuffers: u32,
    pub maxPerStageDescriptorUpdateAfterBindStorageBuffers: u32,
    pub maxPerStageDescriptorUpdateAfterBindSampledImages: u32,
    pub maxPerStageDescriptorUpdateAfterBindStorageImages: u32,
    pub maxPerStageDescriptorUpdateAfterBindInputAttachments: u32,
    pub maxPerStageUpdateAfterBindResources: u32,
    pub maxDescriptorSetUpdateAfterBindSamplers: u32,
    pub maxDescriptorSetUpdateAfterBindUniformBuffers: u32,
    pub maxDescriptorSetUpdateAfterBindUniformBuffersDynamic: u32,
    pub maxDescriptorSetUpdateAfterBindStorageBuffers: u32,
    pub maxDescriptorSetUpdateAfterBindStorageBuffersDynamic: u32,
    pub maxDescriptorSetUpdateAfterBindSampledImages: u32,
    pub maxDescriptorSetUpdateAfterBindStorageImages: u32,
    pub maxDescriptorSetUpdateAfterBindInputAttachments: u32,
    pub supportedDepthResolveModes: VkResolveModeFlags,
    pub supportedStencilResolveModes: VkResolveModeFlags,
    pub independentResolveNone: VkBool32,
    pub independentResolve: VkBool32,
    pub filterMinmaxSingleComponentFormats: VkBool32,
    pub filterMinmaxImageComponentMapping: VkBool32,
    pub maxTimelineSemaphoreValueDifference: u64,
    pub framebufferIntegerColorSampleCounts: VkSampleCountFlags,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkImageFormatListCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub viewFormatCount: u32,
    pub pViewFormats: *const VkFormat,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkAttachmentDescription2 {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: VkAttachmentDescriptionFlags,
    pub format: VkFormat,
    pub samples: VkSampleCountFlagBits,
    pub loadOp: VkAttachmentLoadOp,
    pub storeOp: VkAttachmentStoreOp,
    pub stencilLoadOp: VkAttachmentLoadOp,
    pub stencilStoreOp: VkAttachmentStoreOp,
    pub initialLayout: VkImageLayout,
    pub finalLayout: VkImageLayout,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkAttachmentReference2 {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub attachment: u32,
    pub layout: VkImageLayout,
    pub aspectMask: VkImageAspectFlags,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkSubpassDescription2 {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: VkSubpassDescriptionFlags,
    pub pipelineBindPoint: VkPipelineBindPoint,
    pub viewMask: u32,
    pub inputAttachmentCount: u32,
    pub pInputAttachments: *const VkAttachmentReference2,
    pub colorAttachmentCount: u32,
    pub pColorAttachments: *const VkAttachmentReference2,
    pub pResolveAttachments: *const VkAttachmentReference2,
    pub pDepthStencilAttachment: *const VkAttachmentReference2,
    pub preserveAttachmentCount: u32,
    pub pPreserveAttachments: *const u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkSubpassDependency2 {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub srcSubpass: u32,
    pub dstSubpass: u32,
    pub srcStageMask: VkPipelineStageFlags,
    pub dstStageMask: VkPipelineStageFlags,
    pub srcAccessMask: VkAccessFlags,
    pub dstAccessMask: VkAccessFlags,
    pub dependencyFlags: VkDependencyFlags,
    pub viewOffset: i32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkRenderPassCreateInfo2 {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: VkRenderPassCreateFlags,
    pub attachmentCount: u32,
    pub pAttachments: *const VkAttachmentDescription2,
    pub subpassCount: u32,
    pub pSubpasses: *const VkSubpassDescription2,
    pub dependencyCount: u32,
    pub pDependencies: *const VkSubpassDependency2,
    pub correlatedViewMaskCount: u32,
    pub pCorrelatedViewMasks: *const u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkSubpassBeginInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub contents: VkSubpassContents,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkSubpassEndInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDevice8BitStorageFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub storageBuffer8BitAccess: VkBool32,
    pub uniformAndStorageBuffer8BitAccess: VkBool32,
    pub storagePushConstant8: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceDriverProperties {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub driverID: VkDriverId,
    pub driverName: [::core::ffi::c_char; 256usize],
    pub driverInfo: [::core::ffi::c_char; 256usize],
    pub conformanceVersion: VkConformanceVersion,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceShaderAtomicInt64Features {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub shaderBufferInt64Atomics: VkBool32,
    pub shaderSharedInt64Atomics: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceShaderFloat16Int8Features {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub shaderFloat16: VkBool32,
    pub shaderInt8: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceFloatControlsProperties {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub denormBehaviorIndependence: VkShaderFloatControlsIndependence,
    pub roundingModeIndependence: VkShaderFloatControlsIndependence,
    pub shaderSignedZeroInfNanPreserveFloat16: VkBool32,
    pub shaderSignedZeroInfNanPreserveFloat32: VkBool32,
    pub shaderSignedZeroInfNanPreserveFloat64: VkBool32,
    pub shaderDenormPreserveFloat16: VkBool32,
    pub shaderDenormPreserveFloat32: VkBool32,
    pub shaderDenormPreserveFloat64: VkBool32,
    pub shaderDenormFlushToZeroFloat16: VkBool32,
    pub shaderDenormFlushToZeroFloat32: VkBool32,
    pub shaderDenormFlushToZeroFloat64: VkBool32,
    pub shaderRoundingModeRTEFloat16: VkBool32,
    pub shaderRoundingModeRTEFloat32: VkBool32,
    pub shaderRoundingModeRTEFloat64: VkBool32,
    pub shaderRoundingModeRTZFloat16: VkBool32,
    pub shaderRoundingModeRTZFloat32: VkBool32,
    pub shaderRoundingModeRTZFloat64: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDescriptorSetLayoutBindingFlagsCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub bindingCount: u32,
    pub pBindingFlags: *const VkDescriptorBindingFlags,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceDescriptorIndexingFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub shaderInputAttachmentArrayDynamicIndexing: VkBool32,
    pub shaderUniformTexelBufferArrayDynamicIndexing: VkBool32,
    pub shaderStorageTexelBufferArrayDynamicIndexing: VkBool32,
    pub shaderUniformBufferArrayNonUniformIndexing: VkBool32,
    pub shaderSampledImageArrayNonUniformIndexing: VkBool32,
    pub shaderStorageBufferArrayNonUniformIndexing: VkBool32,
    pub shaderStorageImageArrayNonUniformIndexing: VkBool32,
    pub shaderInputAttachmentArrayNonUniformIndexing: VkBool32,
    pub shaderUniformTexelBufferArrayNonUniformIndexing: VkBool32,
    pub shaderStorageTexelBufferArrayNonUniformIndexing: VkBool32,
    pub descriptorBindingUniformBufferUpdateAfterBind: VkBool32,
    pub descriptorBindingSampledImageUpdateAfterBind: VkBool32,
    pub descriptorBindingStorageImageUpdateAfterBind: VkBool32,
    pub descriptorBindingStorageBufferUpdateAfterBind: VkBool32,
    pub descriptorBindingUniformTexelBufferUpdateAfterBind: VkBool32,
    pub descriptorBindingStorageTexelBufferUpdateAfterBind: VkBool32,
    pub descriptorBindingUpdateUnusedWhilePending: VkBool32,
    pub descriptorBindingPartiallyBound: VkBool32,
    pub descriptorBindingVariableDescriptorCount: VkBool32,
    pub runtimeDescriptorArray: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceDescriptorIndexingProperties {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub maxUpdateAfterBindDescriptorsInAllPools: u32,
    pub shaderUniformBufferArrayNonUniformIndexingNative: VkBool32,
    pub shaderSampledImageArrayNonUniformIndexingNative: VkBool32,
    pub shaderStorageBufferArrayNonUniformIndexingNative: VkBool32,
    pub shaderStorageImageArrayNonUniformIndexingNative: VkBool32,
    pub shaderInputAttachmentArrayNonUniformIndexingNative: VkBool32,
    pub robustBufferAccessUpdateAfterBind: VkBool32,
    pub quadDivergentImplicitLod: VkBool32,
    pub maxPerStageDescriptorUpdateAfterBindSamplers: u32,
    pub maxPerStageDescriptorUpdateAfterBindUniformBuffers: u32,
    pub maxPerStageDescriptorUpdateAfterBindStorageBuffers: u32,
    pub maxPerStageDescriptorUpdateAfterBindSampledImages: u32,
    pub maxPerStageDescriptorUpdateAfterBindStorageImages: u32,
    pub maxPerStageDescriptorUpdateAfterBindInputAttachments: u32,
    pub maxPerStageUpdateAfterBindResources: u32,
    pub maxDescriptorSetUpdateAfterBindSamplers: u32,
    pub maxDescriptorSetUpdateAfterBindUniformBuffers: u32,
    pub maxDescriptorSetUpdateAfterBindUniformBuffersDynamic: u32,
    pub maxDescriptorSetUpdateAfterBindStorageBuffers: u32,
    pub maxDescriptorSetUpdateAfterBindStorageBuffersDynamic: u32,
    pub maxDescriptorSetUpdateAfterBindSampledImages: u32,
    pub maxDescriptorSetUpdateAfterBindStorageImages: u32,
    pub maxDescriptorSetUpdateAfterBindInputAttachments: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDescriptorSetVariableDescriptorCountAllocateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub descriptorSetCount: u32,
    pub pDescriptorCounts: *const u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDescriptorSetVariableDescriptorCountLayoutSupport {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub maxVariableDescriptorCount: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkSubpassDescriptionDepthStencilResolve {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub depthResolveMode: VkResolveModeFlagBits,
    pub stencilResolveMode: VkResolveModeFlagBits,
    pub pDepthStencilResolveAttachment: *const VkAttachmentReference2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceDepthStencilResolveProperties {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub supportedDepthResolveModes: VkResolveModeFlags,
    pub supportedStencilResolveModes: VkResolveModeFlags,
    pub independentResolveNone: VkBool32,
    pub independentResolve: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceScalarBlockLayoutFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub scalarBlockLayout: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkImageStencilUsageCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub stencilUsage: VkImageUsageFlags,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkSamplerReductionModeCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub reductionMode: VkSamplerReductionMode,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceSamplerFilterMinmaxProperties {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub filterMinmaxSingleComponentFormats: VkBool32,
    pub filterMinmaxImageComponentMapping: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceVulkanMemoryModelFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub vulkanMemoryModel: VkBool32,
    pub vulkanMemoryModelDeviceScope: VkBool32,
    pub vulkanMemoryModelAvailabilityVisibilityChains: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceImagelessFramebufferFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub imagelessFramebuffer: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkFramebufferAttachmentImageInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: VkImageCreateFlags,
    pub usage: VkImageUsageFlags,
    pub width: u32,
    pub height: u32,
    pub layerCount: u32,
    pub viewFormatCount: u32,
    pub pViewFormats: *const VkFormat,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkFramebufferAttachmentsCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub attachmentImageInfoCount: u32,
    pub pAttachmentImageInfos: *const VkFramebufferAttachmentImageInfo,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkRenderPassAttachmentBeginInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub attachmentCount: u32,
    pub pAttachments: *const VkImageView,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceUniformBufferStandardLayoutFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub uniformBufferStandardLayout: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub shaderSubgroupExtendedTypes: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub separateDepthStencilLayouts: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkAttachmentReferenceStencilLayout {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub stencilLayout: VkImageLayout,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkAttachmentDescriptionStencilLayout {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub stencilInitialLayout: VkImageLayout,
    pub stencilFinalLayout: VkImageLayout,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceHostQueryResetFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub hostQueryReset: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceTimelineSemaphoreFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub timelineSemaphore: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceTimelineSemaphoreProperties {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub maxTimelineSemaphoreValueDifference: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkSemaphoreTypeCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub semaphoreType: VkSemaphoreType,
    pub initialValue: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkTimelineSemaphoreSubmitInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub waitSemaphoreValueCount: u32,
    pub pWaitSemaphoreValues: *const u64,
    pub signalSemaphoreValueCount: u32,
    pub pSignalSemaphoreValues: *const u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkSemaphoreWaitInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: VkSemaphoreWaitFlags,
    pub semaphoreCount: u32,
    pub pSemaphores: *const VkSemaphore,
    pub pValues: *const u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkSemaphoreSignalInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub semaphore: VkSemaphore,
    pub value: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceBufferDeviceAddressFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub bufferDeviceAddress: VkBool32,
    pub bufferDeviceAddressCaptureReplay: VkBool32,
    pub bufferDeviceAddressMultiDevice: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkBufferDeviceAddressInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub buffer: VkBuffer,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkBufferOpaqueCaptureAddressCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub opaqueCaptureAddress: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkMemoryOpaqueCaptureAddressAllocateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub opaqueCaptureAddress: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDeviceMemoryOpaqueCaptureAddressInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub memory: VkDeviceMemory,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceVulkan13Features {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub robustImageAccess: VkBool32,
    pub inlineUniformBlock: VkBool32,
    pub descriptorBindingInlineUniformBlockUpdateAfterBind: VkBool32,
    pub pipelineCreationCacheControl: VkBool32,
    pub privateData: VkBool32,
    pub shaderDemoteToHelperInvocation: VkBool32,
    pub shaderTerminateInvocation: VkBool32,
    pub subgroupSizeControl: VkBool32,
    pub computeFullSubgroups: VkBool32,
    pub synchronization2: VkBool32,
    pub textureCompressionASTC_HDR: VkBool32,
    pub shaderZeroInitializeWorkgroupMemory: VkBool32,
    pub dynamicRendering: VkBool32,
    pub shaderIntegerDotProduct: VkBool32,
    pub maintenance4: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceVulkan13Properties {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub minSubgroupSize: u32,
    pub maxSubgroupSize: u32,
    pub maxComputeWorkgroupSubgroups: u32,
    pub requiredSubgroupSizeStages: VkShaderStageFlags,
    pub maxInlineUniformBlockSize: u32,
    pub maxPerStageDescriptorInlineUniformBlocks: u32,
    pub maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks: u32,
    pub maxDescriptorSetInlineUniformBlocks: u32,
    pub maxDescriptorSetUpdateAfterBindInlineUniformBlocks: u32,
    pub maxInlineUniformTotalSize: u32,
    pub integerDotProduct8BitUnsignedAccelerated: VkBool32,
    pub integerDotProduct8BitSignedAccelerated: VkBool32,
    pub integerDotProduct8BitMixedSignednessAccelerated: VkBool32,
    pub integerDotProduct4x8BitPackedUnsignedAccelerated: VkBool32,
    pub integerDotProduct4x8BitPackedSignedAccelerated: VkBool32,
    pub integerDotProduct4x8BitPackedMixedSignednessAccelerated: VkBool32,
    pub integerDotProduct16BitUnsignedAccelerated: VkBool32,
    pub integerDotProduct16BitSignedAccelerated: VkBool32,
    pub integerDotProduct16BitMixedSignednessAccelerated: VkBool32,
    pub integerDotProduct32BitUnsignedAccelerated: VkBool32,
    pub integerDotProduct32BitSignedAccelerated: VkBool32,
    pub integerDotProduct32BitMixedSignednessAccelerated: VkBool32,
    pub integerDotProduct64BitUnsignedAccelerated: VkBool32,
    pub integerDotProduct64BitSignedAccelerated: VkBool32,
    pub integerDotProduct64BitMixedSignednessAccelerated: VkBool32,
    pub integerDotProductAccumulatingSaturating8BitUnsignedAccelerated: VkBool32,
    pub integerDotProductAccumulatingSaturating8BitSignedAccelerated: VkBool32,
    pub integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated: VkBool32,
    pub integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated: VkBool32,
    pub integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated: VkBool32,
    pub integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated: VkBool32,
    pub integerDotProductAccumulatingSaturating16BitUnsignedAccelerated: VkBool32,
    pub integerDotProductAccumulatingSaturating16BitSignedAccelerated: VkBool32,
    pub integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated: VkBool32,
    pub integerDotProductAccumulatingSaturating32BitUnsignedAccelerated: VkBool32,
    pub integerDotProductAccumulatingSaturating32BitSignedAccelerated: VkBool32,
    pub integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated: VkBool32,
    pub integerDotProductAccumulatingSaturating64BitUnsignedAccelerated: VkBool32,
    pub integerDotProductAccumulatingSaturating64BitSignedAccelerated: VkBool32,
    pub integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated: VkBool32,
    pub storageTexelBufferOffsetAlignmentBytes: VkDeviceSize,
    pub storageTexelBufferOffsetSingleTexelAlignment: VkBool32,
    pub uniformTexelBufferOffsetAlignmentBytes: VkDeviceSize,
    pub uniformTexelBufferOffsetSingleTexelAlignment: VkBool32,
    pub maxBufferSize: VkDeviceSize,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPipelineCreationFeedback {
    pub flags: VkPipelineCreationFeedbackFlags,
    pub duration: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPipelineCreationFeedbackCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub pPipelineCreationFeedback: *mut VkPipelineCreationFeedback,
    pub pipelineStageCreationFeedbackCount: u32,
    pub pPipelineStageCreationFeedbacks: *mut VkPipelineCreationFeedback,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceShaderTerminateInvocationFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub shaderTerminateInvocation: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceToolProperties {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub name: [::core::ffi::c_char; 256usize],
    pub version: [::core::ffi::c_char; 256usize],
    pub purposes: VkToolPurposeFlags,
    pub description: [::core::ffi::c_char; 256usize],
    pub layer: [::core::ffi::c_char; 256usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub shaderDemoteToHelperInvocation: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDevicePrivateDataFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub privateData: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDevicePrivateDataCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub privateDataSlotRequestCount: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPrivateDataSlotCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: VkPrivateDataSlotCreateFlags,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDevicePipelineCreationCacheControlFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub pipelineCreationCacheControl: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkMemoryBarrier2 {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub srcStageMask: VkPipelineStageFlags2,
    pub srcAccessMask: VkAccessFlags2,
    pub dstStageMask: VkPipelineStageFlags2,
    pub dstAccessMask: VkAccessFlags2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkBufferMemoryBarrier2 {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub srcStageMask: VkPipelineStageFlags2,
    pub srcAccessMask: VkAccessFlags2,
    pub dstStageMask: VkPipelineStageFlags2,
    pub dstAccessMask: VkAccessFlags2,
    pub srcQueueFamilyIndex: u32,
    pub dstQueueFamilyIndex: u32,
    pub buffer: VkBuffer,
    pub offset: VkDeviceSize,
    pub size: VkDeviceSize,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkImageMemoryBarrier2 {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub srcStageMask: VkPipelineStageFlags2,
    pub srcAccessMask: VkAccessFlags2,
    pub dstStageMask: VkPipelineStageFlags2,
    pub dstAccessMask: VkAccessFlags2,
    pub oldLayout: VkImageLayout,
    pub newLayout: VkImageLayout,
    pub srcQueueFamilyIndex: u32,
    pub dstQueueFamilyIndex: u32,
    pub image: VkImage,
    pub subresourceRange: VkImageSubresourceRange,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDependencyInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub dependencyFlags: VkDependencyFlags,
    pub memoryBarrierCount: u32,
    pub pMemoryBarriers: *const VkMemoryBarrier2,
    pub bufferMemoryBarrierCount: u32,
    pub pBufferMemoryBarriers: *const VkBufferMemoryBarrier2,
    pub imageMemoryBarrierCount: u32,
    pub pImageMemoryBarriers: *const VkImageMemoryBarrier2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkSemaphoreSubmitInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub semaphore: VkSemaphore,
    pub value: u64,
    pub stageMask: VkPipelineStageFlags2,
    pub deviceIndex: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkCommandBufferSubmitInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub commandBuffer: VkCommandBuffer,
    pub deviceMask: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkSubmitInfo2 {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: VkSubmitFlags,
    pub waitSemaphoreInfoCount: u32,
    pub pWaitSemaphoreInfos: *const VkSemaphoreSubmitInfo,
    pub commandBufferInfoCount: u32,
    pub pCommandBufferInfos: *const VkCommandBufferSubmitInfo,
    pub signalSemaphoreInfoCount: u32,
    pub pSignalSemaphoreInfos: *const VkSemaphoreSubmitInfo,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceSynchronization2Features {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub synchronization2: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub shaderZeroInitializeWorkgroupMemory: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceImageRobustnessFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub robustImageAccess: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkBufferCopy2 {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub srcOffset: VkDeviceSize,
    pub dstOffset: VkDeviceSize,
    pub size: VkDeviceSize,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkCopyBufferInfo2 {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub srcBuffer: VkBuffer,
    pub dstBuffer: VkBuffer,
    pub regionCount: u32,
    pub pRegions: *const VkBufferCopy2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkImageCopy2 {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub srcSubresource: VkImageSubresourceLayers,
    pub srcOffset: VkOffset3D,
    pub dstSubresource: VkImageSubresourceLayers,
    pub dstOffset: VkOffset3D,
    pub extent: VkExtent3D,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkCopyImageInfo2 {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub srcImage: VkImage,
    pub srcImageLayout: VkImageLayout,
    pub dstImage: VkImage,
    pub dstImageLayout: VkImageLayout,
    pub regionCount: u32,
    pub pRegions: *const VkImageCopy2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkBufferImageCopy2 {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub bufferOffset: VkDeviceSize,
    pub bufferRowLength: u32,
    pub bufferImageHeight: u32,
    pub imageSubresource: VkImageSubresourceLayers,
    pub imageOffset: VkOffset3D,
    pub imageExtent: VkExtent3D,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkCopyBufferToImageInfo2 {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub srcBuffer: VkBuffer,
    pub dstImage: VkImage,
    pub dstImageLayout: VkImageLayout,
    pub regionCount: u32,
    pub pRegions: *const VkBufferImageCopy2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkCopyImageToBufferInfo2 {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub srcImage: VkImage,
    pub srcImageLayout: VkImageLayout,
    pub dstBuffer: VkBuffer,
    pub regionCount: u32,
    pub pRegions: *const VkBufferImageCopy2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkImageBlit2 {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub srcSubresource: VkImageSubresourceLayers,
    pub srcOffsets: [VkOffset3D; 2usize],
    pub dstSubresource: VkImageSubresourceLayers,
    pub dstOffsets: [VkOffset3D; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkBlitImageInfo2 {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub srcImage: VkImage,
    pub srcImageLayout: VkImageLayout,
    pub dstImage: VkImage,
    pub dstImageLayout: VkImageLayout,
    pub regionCount: u32,
    pub pRegions: *const VkImageBlit2,
    pub filter: VkFilter,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkImageResolve2 {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub srcSubresource: VkImageSubresourceLayers,
    pub srcOffset: VkOffset3D,
    pub dstSubresource: VkImageSubresourceLayers,
    pub dstOffset: VkOffset3D,
    pub extent: VkExtent3D,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkResolveImageInfo2 {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub srcImage: VkImage,
    pub srcImageLayout: VkImageLayout,
    pub dstImage: VkImage,
    pub dstImageLayout: VkImageLayout,
    pub regionCount: u32,
    pub pRegions: *const VkImageResolve2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceSubgroupSizeControlFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub subgroupSizeControl: VkBool32,
    pub computeFullSubgroups: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceSubgroupSizeControlProperties {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub minSubgroupSize: u32,
    pub maxSubgroupSize: u32,
    pub maxComputeWorkgroupSubgroups: u32,
    pub requiredSubgroupSizeStages: VkShaderStageFlags,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPipelineShaderStageRequiredSubgroupSizeCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub requiredSubgroupSize: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceInlineUniformBlockFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub inlineUniformBlock: VkBool32,
    pub descriptorBindingInlineUniformBlockUpdateAfterBind: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceInlineUniformBlockProperties {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub maxInlineUniformBlockSize: u32,
    pub maxPerStageDescriptorInlineUniformBlocks: u32,
    pub maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks: u32,
    pub maxDescriptorSetInlineUniformBlocks: u32,
    pub maxDescriptorSetUpdateAfterBindInlineUniformBlocks: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkWriteDescriptorSetInlineUniformBlock {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub dataSize: u32,
    pub pData: *const ::core::ffi::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDescriptorPoolInlineUniformBlockCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub maxInlineUniformBlockBindings: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceTextureCompressionASTCHDRFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub textureCompressionASTC_HDR: VkBool32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkRenderingAttachmentInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub imageView: VkImageView,
    pub imageLayout: VkImageLayout,
    pub resolveMode: VkResolveModeFlagBits,
    pub resolveImageView: VkImageView,
    pub resolveImageLayout: VkImageLayout,
    pub loadOp: VkAttachmentLoadOp,
    pub storeOp: VkAttachmentStoreOp,
    pub clearValue: VkClearValue,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkRenderingInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: VkRenderingFlags,
    pub renderArea: VkRect2D,
    pub layerCount: u32,
    pub viewMask: u32,
    pub colorAttachmentCount: u32,
    pub pColorAttachments: *const VkRenderingAttachmentInfo,
    pub pDepthAttachment: *const VkRenderingAttachmentInfo,
    pub pStencilAttachment: *const VkRenderingAttachmentInfo,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPipelineRenderingCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub viewMask: u32,
    pub colorAttachmentCount: u32,
    pub pColorAttachmentFormats: *const VkFormat,
    pub depthAttachmentFormat: VkFormat,
    pub stencilAttachmentFormat: VkFormat,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceDynamicRenderingFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub dynamicRendering: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkCommandBufferInheritanceRenderingInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: VkRenderingFlags,
    pub viewMask: u32,
    pub colorAttachmentCount: u32,
    pub pColorAttachmentFormats: *const VkFormat,
    pub depthAttachmentFormat: VkFormat,
    pub stencilAttachmentFormat: VkFormat,
    pub rasterizationSamples: VkSampleCountFlagBits,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceShaderIntegerDotProductFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub shaderIntegerDotProduct: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceShaderIntegerDotProductProperties {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub integerDotProduct8BitUnsignedAccelerated: VkBool32,
    pub integerDotProduct8BitSignedAccelerated: VkBool32,
    pub integerDotProduct8BitMixedSignednessAccelerated: VkBool32,
    pub integerDotProduct4x8BitPackedUnsignedAccelerated: VkBool32,
    pub integerDotProduct4x8BitPackedSignedAccelerated: VkBool32,
    pub integerDotProduct4x8BitPackedMixedSignednessAccelerated: VkBool32,
    pub integerDotProduct16BitUnsignedAccelerated: VkBool32,
    pub integerDotProduct16BitSignedAccelerated: VkBool32,
    pub integerDotProduct16BitMixedSignednessAccelerated: VkBool32,
    pub integerDotProduct32BitUnsignedAccelerated: VkBool32,
    pub integerDotProduct32BitSignedAccelerated: VkBool32,
    pub integerDotProduct32BitMixedSignednessAccelerated: VkBool32,
    pub integerDotProduct64BitUnsignedAccelerated: VkBool32,
    pub integerDotProduct64BitSignedAccelerated: VkBool32,
    pub integerDotProduct64BitMixedSignednessAccelerated: VkBool32,
    pub integerDotProductAccumulatingSaturating8BitUnsignedAccelerated: VkBool32,
    pub integerDotProductAccumulatingSaturating8BitSignedAccelerated: VkBool32,
    pub integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated: VkBool32,
    pub integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated: VkBool32,
    pub integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated: VkBool32,
    pub integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated: VkBool32,
    pub integerDotProductAccumulatingSaturating16BitUnsignedAccelerated: VkBool32,
    pub integerDotProductAccumulatingSaturating16BitSignedAccelerated: VkBool32,
    pub integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated: VkBool32,
    pub integerDotProductAccumulatingSaturating32BitUnsignedAccelerated: VkBool32,
    pub integerDotProductAccumulatingSaturating32BitSignedAccelerated: VkBool32,
    pub integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated: VkBool32,
    pub integerDotProductAccumulatingSaturating64BitUnsignedAccelerated: VkBool32,
    pub integerDotProductAccumulatingSaturating64BitSignedAccelerated: VkBool32,
    pub integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceTexelBufferAlignmentProperties {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub storageTexelBufferOffsetAlignmentBytes: VkDeviceSize,
    pub storageTexelBufferOffsetSingleTexelAlignment: VkBool32,
    pub uniformTexelBufferOffsetAlignmentBytes: VkDeviceSize,
    pub uniformTexelBufferOffsetSingleTexelAlignment: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkFormatProperties3 {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub linearTilingFeatures: VkFormatFeatureFlags2,
    pub optimalTilingFeatures: VkFormatFeatureFlags2,
    pub bufferFeatures: VkFormatFeatureFlags2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceMaintenance4Features {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub maintenance4: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceMaintenance4Properties {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub maxBufferSize: VkDeviceSize,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDeviceBufferMemoryRequirements {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub pCreateInfo: *const VkBufferCreateInfo,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDeviceImageMemoryRequirements {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub pCreateInfo: *const VkImageCreateInfo,
    pub planeAspect: VkImageAspectFlagBits,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceVulkan14Features {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub globalPriorityQuery: VkBool32,
    pub shaderSubgroupRotate: VkBool32,
    pub shaderSubgroupRotateClustered: VkBool32,
    pub shaderFloatControls2: VkBool32,
    pub shaderExpectAssume: VkBool32,
    pub rectangularLines: VkBool32,
    pub bresenhamLines: VkBool32,
    pub smoothLines: VkBool32,
    pub stippledRectangularLines: VkBool32,
    pub stippledBresenhamLines: VkBool32,
    pub stippledSmoothLines: VkBool32,
    pub vertexAttributeInstanceRateDivisor: VkBool32,
    pub vertexAttributeInstanceRateZeroDivisor: VkBool32,
    pub indexTypeUint8: VkBool32,
    pub dynamicRenderingLocalRead: VkBool32,
    pub maintenance5: VkBool32,
    pub maintenance6: VkBool32,
    pub pipelineProtectedAccess: VkBool32,
    pub pipelineRobustness: VkBool32,
    pub hostImageCopy: VkBool32,
    pub pushDescriptor: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceVulkan14Properties {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub lineSubPixelPrecisionBits: u32,
    pub maxVertexAttribDivisor: u32,
    pub supportsNonZeroFirstInstance: VkBool32,
    pub maxPushDescriptors: u32,
    pub dynamicRenderingLocalReadDepthStencilAttachments: VkBool32,
    pub dynamicRenderingLocalReadMultisampledAttachments: VkBool32,
    pub earlyFragmentMultisampleCoverageAfterSampleCounting: VkBool32,
    pub earlyFragmentSampleMaskTestBeforeSampleCounting: VkBool32,
    pub depthStencilSwizzleOneSupport: VkBool32,
    pub polygonModePointSize: VkBool32,
    pub nonStrictSinglePixelWideLinesUseParallelogram: VkBool32,
    pub nonStrictWideLinesUseParallelogram: VkBool32,
    pub blockTexelViewCompatibleMultipleLayers: VkBool32,
    pub maxCombinedImageSamplerDescriptorCount: u32,
    pub fragmentShadingRateClampCombinerInputs: VkBool32,
    pub defaultRobustnessStorageBuffers: VkPipelineRobustnessBufferBehavior,
    pub defaultRobustnessUniformBuffers: VkPipelineRobustnessBufferBehavior,
    pub defaultRobustnessVertexInputs: VkPipelineRobustnessBufferBehavior,
    pub defaultRobustnessImages: VkPipelineRobustnessImageBehavior,
    pub copySrcLayoutCount: u32,
    pub pCopySrcLayouts: *mut VkImageLayout,
    pub copyDstLayoutCount: u32,
    pub pCopyDstLayouts: *mut VkImageLayout,
    pub optimalTilingLayoutUUID: [u8; 16usize],
    pub identicalMemoryTypeRequirements: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDeviceQueueGlobalPriorityCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub globalPriority: VkQueueGlobalPriority,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceGlobalPriorityQueryFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub globalPriorityQuery: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkQueueFamilyGlobalPriorityProperties {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub priorityCount: u32,
    pub priorities: [VkQueueGlobalPriority; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceShaderSubgroupRotateFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub shaderSubgroupRotate: VkBool32,
    pub shaderSubgroupRotateClustered: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceShaderFloatControls2Features {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub shaderFloatControls2: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceShaderExpectAssumeFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub shaderExpectAssume: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceLineRasterizationFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub rectangularLines: VkBool32,
    pub bresenhamLines: VkBool32,
    pub smoothLines: VkBool32,
    pub stippledRectangularLines: VkBool32,
    pub stippledBresenhamLines: VkBool32,
    pub stippledSmoothLines: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceLineRasterizationProperties {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub lineSubPixelPrecisionBits: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPipelineRasterizationLineStateCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub lineRasterizationMode: VkLineRasterizationMode,
    pub stippledLineEnable: VkBool32,
    pub lineStippleFactor: u32,
    pub lineStipplePattern: u16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceVertexAttributeDivisorProperties {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub maxVertexAttribDivisor: u32,
    pub supportsNonZeroFirstInstance: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVertexInputBindingDivisorDescription {
    pub binding: u32,
    pub divisor: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPipelineVertexInputDivisorStateCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub vertexBindingDivisorCount: u32,
    pub pVertexBindingDivisors: *const VkVertexInputBindingDivisorDescription,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceVertexAttributeDivisorFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub vertexAttributeInstanceRateDivisor: VkBool32,
    pub vertexAttributeInstanceRateZeroDivisor: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceIndexTypeUint8Features {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub indexTypeUint8: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkMemoryMapInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: VkMemoryMapFlags,
    pub memory: VkDeviceMemory,
    pub offset: VkDeviceSize,
    pub size: VkDeviceSize,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkMemoryUnmapInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: VkMemoryUnmapFlags,
    pub memory: VkDeviceMemory,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceMaintenance5Features {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub maintenance5: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceMaintenance5Properties {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub earlyFragmentMultisampleCoverageAfterSampleCounting: VkBool32,
    pub earlyFragmentSampleMaskTestBeforeSampleCounting: VkBool32,
    pub depthStencilSwizzleOneSupport: VkBool32,
    pub polygonModePointSize: VkBool32,
    pub nonStrictSinglePixelWideLinesUseParallelogram: VkBool32,
    pub nonStrictWideLinesUseParallelogram: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkRenderingAreaInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub viewMask: u32,
    pub colorAttachmentCount: u32,
    pub pColorAttachmentFormats: *const VkFormat,
    pub depthAttachmentFormat: VkFormat,
    pub stencilAttachmentFormat: VkFormat,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkImageSubresource2 {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub imageSubresource: VkImageSubresource,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDeviceImageSubresourceInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub pCreateInfo: *const VkImageCreateInfo,
    pub pSubresource: *const VkImageSubresource2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkSubresourceLayout2 {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub subresourceLayout: VkSubresourceLayout,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPipelineCreateFlags2CreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: VkPipelineCreateFlags2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkBufferUsageFlags2CreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub usage: VkBufferUsageFlags2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDevicePushDescriptorProperties {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub maxPushDescriptors: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceDynamicRenderingLocalReadFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub dynamicRenderingLocalRead: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkRenderingAttachmentLocationInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub colorAttachmentCount: u32,
    pub pColorAttachmentLocations: *const u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkRenderingInputAttachmentIndexInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub colorAttachmentCount: u32,
    pub pColorAttachmentInputIndices: *const u32,
    pub pDepthInputAttachmentIndex: *const u32,
    pub pStencilInputAttachmentIndex: *const u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceMaintenance6Features {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub maintenance6: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceMaintenance6Properties {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub blockTexelViewCompatibleMultipleLayers: VkBool32,
    pub maxCombinedImageSamplerDescriptorCount: u32,
    pub fragmentShadingRateClampCombinerInputs: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkBindMemoryStatus {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub pResult: *mut VkResult,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkBindDescriptorSetsInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub stageFlags: VkShaderStageFlags,
    pub layout: VkPipelineLayout,
    pub firstSet: u32,
    pub descriptorSetCount: u32,
    pub pDescriptorSets: *const VkDescriptorSet,
    pub dynamicOffsetCount: u32,
    pub pDynamicOffsets: *const u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPushConstantsInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub layout: VkPipelineLayout,
    pub stageFlags: VkShaderStageFlags,
    pub offset: u32,
    pub size: u32,
    pub pValues: *const ::core::ffi::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPushDescriptorSetInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub stageFlags: VkShaderStageFlags,
    pub layout: VkPipelineLayout,
    pub set: u32,
    pub descriptorWriteCount: u32,
    pub pDescriptorWrites: *const VkWriteDescriptorSet,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPushDescriptorSetWithTemplateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub descriptorUpdateTemplate: VkDescriptorUpdateTemplate,
    pub layout: VkPipelineLayout,
    pub set: u32,
    pub pData: *const ::core::ffi::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDevicePipelineProtectedAccessFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub pipelineProtectedAccess: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDevicePipelineRobustnessFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub pipelineRobustness: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDevicePipelineRobustnessProperties {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub defaultRobustnessStorageBuffers: VkPipelineRobustnessBufferBehavior,
    pub defaultRobustnessUniformBuffers: VkPipelineRobustnessBufferBehavior,
    pub defaultRobustnessVertexInputs: VkPipelineRobustnessBufferBehavior,
    pub defaultRobustnessImages: VkPipelineRobustnessImageBehavior,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPipelineRobustnessCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub storageBuffers: VkPipelineRobustnessBufferBehavior,
    pub uniformBuffers: VkPipelineRobustnessBufferBehavior,
    pub vertexInputs: VkPipelineRobustnessBufferBehavior,
    pub images: VkPipelineRobustnessImageBehavior,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceHostImageCopyFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub hostImageCopy: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceHostImageCopyProperties {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub copySrcLayoutCount: u32,
    pub pCopySrcLayouts: *mut VkImageLayout,
    pub copyDstLayoutCount: u32,
    pub pCopyDstLayouts: *mut VkImageLayout,
    pub optimalTilingLayoutUUID: [u8; 16usize],
    pub identicalMemoryTypeRequirements: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkMemoryToImageCopy {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub pHostPointer: *const ::core::ffi::c_void,
    pub memoryRowLength: u32,
    pub memoryImageHeight: u32,
    pub imageSubresource: VkImageSubresourceLayers,
    pub imageOffset: VkOffset3D,
    pub imageExtent: VkExtent3D,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkImageToMemoryCopy {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub pHostPointer: *mut ::core::ffi::c_void,
    pub memoryRowLength: u32,
    pub memoryImageHeight: u32,
    pub imageSubresource: VkImageSubresourceLayers,
    pub imageOffset: VkOffset3D,
    pub imageExtent: VkExtent3D,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkCopyMemoryToImageInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: VkHostImageCopyFlags,
    pub dstImage: VkImage,
    pub dstImageLayout: VkImageLayout,
    pub regionCount: u32,
    pub pRegions: *const VkMemoryToImageCopy,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkCopyImageToMemoryInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: VkHostImageCopyFlags,
    pub srcImage: VkImage,
    pub srcImageLayout: VkImageLayout,
    pub regionCount: u32,
    pub pRegions: *const VkImageToMemoryCopy,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkCopyImageToImageInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: VkHostImageCopyFlags,
    pub srcImage: VkImage,
    pub srcImageLayout: VkImageLayout,
    pub dstImage: VkImage,
    pub dstImageLayout: VkImageLayout,
    pub regionCount: u32,
    pub pRegions: *const VkImageCopy2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkHostImageLayoutTransitionInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub image: VkImage,
    pub oldLayout: VkImageLayout,
    pub newLayout: VkImageLayout,
    pub subresourceRange: VkImageSubresourceRange,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkSubresourceHostMemcpySize {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub size: VkDeviceSize,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkHostImageCopyDevicePerformanceQuery {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub optimalDeviceAccess: VkBool32,
    pub identicalMemoryLayout: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkSurfaceCapabilitiesKHR {
    pub minImageCount: u32,
    pub maxImageCount: u32,
    pub currentExtent: VkExtent2D,
    pub minImageExtent: VkExtent2D,
    pub maxImageExtent: VkExtent2D,
    pub maxImageArrayLayers: u32,
    pub supportedTransforms: VkSurfaceTransformFlagsKHR,
    pub currentTransform: VkSurfaceTransformFlagBitsKHR,
    pub supportedCompositeAlpha: VkCompositeAlphaFlagsKHR,
    pub supportedUsageFlags: VkImageUsageFlags,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkSurfaceFormatKHR {
    pub format: VkFormat,
    pub colorSpace: VkColorSpaceKHR,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkSwapchainCreateInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: VkSwapchainCreateFlagsKHR,
    pub surface: VkSurfaceKHR,
    pub minImageCount: u32,
    pub imageFormat: VkFormat,
    pub imageColorSpace: VkColorSpaceKHR,
    pub imageExtent: VkExtent2D,
    pub imageArrayLayers: u32,
    pub imageUsage: VkImageUsageFlags,
    pub imageSharingMode: VkSharingMode,
    pub queueFamilyIndexCount: u32,
    pub pQueueFamilyIndices: *const u32,
    pub preTransform: VkSurfaceTransformFlagBitsKHR,
    pub compositeAlpha: VkCompositeAlphaFlagBitsKHR,
    pub presentMode: VkPresentModeKHR,
    pub clipped: VkBool32,
    pub oldSwapchain: VkSwapchainKHR,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPresentInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub waitSemaphoreCount: u32,
    pub pWaitSemaphores: *const VkSemaphore,
    pub swapchainCount: u32,
    pub pSwapchains: *const VkSwapchainKHR,
    pub pImageIndices: *const u32,
    pub pResults: *mut VkResult,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkImageSwapchainCreateInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub swapchain: VkSwapchainKHR,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkBindImageMemorySwapchainInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub swapchain: VkSwapchainKHR,
    pub imageIndex: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkAcquireNextImageInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub swapchain: VkSwapchainKHR,
    pub timeout: u64,
    pub semaphore: VkSemaphore,
    pub fence: VkFence,
    pub deviceMask: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDeviceGroupPresentCapabilitiesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub presentMask: [u32; 32usize],
    pub modes: VkDeviceGroupPresentModeFlagsKHR,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDeviceGroupPresentInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub swapchainCount: u32,
    pub pDeviceMasks: *const u32,
    pub mode: VkDeviceGroupPresentModeFlagBitsKHR,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDeviceGroupSwapchainCreateInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub modes: VkDeviceGroupPresentModeFlagsKHR,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDisplayModeParametersKHR {
    pub visibleRegion: VkExtent2D,
    pub refreshRate: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDisplayModeCreateInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: VkDisplayModeCreateFlagsKHR,
    pub parameters: VkDisplayModeParametersKHR,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDisplayModePropertiesKHR {
    pub displayMode: VkDisplayModeKHR,
    pub parameters: VkDisplayModeParametersKHR,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDisplayPlaneCapabilitiesKHR {
    pub supportedAlpha: VkDisplayPlaneAlphaFlagsKHR,
    pub minSrcPosition: VkOffset2D,
    pub maxSrcPosition: VkOffset2D,
    pub minSrcExtent: VkExtent2D,
    pub maxSrcExtent: VkExtent2D,
    pub minDstPosition: VkOffset2D,
    pub maxDstPosition: VkOffset2D,
    pub minDstExtent: VkExtent2D,
    pub maxDstExtent: VkExtent2D,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDisplayPlanePropertiesKHR {
    pub currentDisplay: VkDisplayKHR,
    pub currentStackIndex: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDisplayPropertiesKHR {
    pub display: VkDisplayKHR,
    pub displayName: *const ::core::ffi::c_char,
    pub physicalDimensions: VkExtent2D,
    pub physicalResolution: VkExtent2D,
    pub supportedTransforms: VkSurfaceTransformFlagsKHR,
    pub planeReorderPossible: VkBool32,
    pub persistentContent: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDisplaySurfaceCreateInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: VkDisplaySurfaceCreateFlagsKHR,
    pub displayMode: VkDisplayModeKHR,
    pub planeIndex: u32,
    pub planeStackIndex: u32,
    pub transform: VkSurfaceTransformFlagBitsKHR,
    pub globalAlpha: f32,
    pub alphaMode: VkDisplayPlaneAlphaFlagBitsKHR,
    pub imageExtent: VkExtent2D,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDisplayPresentInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub srcRect: VkRect2D,
    pub dstRect: VkRect2D,
    pub persistent: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkQueueFamilyQueryResultStatusPropertiesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub queryResultStatusSupport: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkQueueFamilyVideoPropertiesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub videoCodecOperations: VkVideoCodecOperationFlagsKHR,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVideoProfileInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub videoCodecOperation: VkVideoCodecOperationFlagBitsKHR,
    pub chromaSubsampling: VkVideoChromaSubsamplingFlagsKHR,
    pub lumaBitDepth: VkVideoComponentBitDepthFlagsKHR,
    pub chromaBitDepth: VkVideoComponentBitDepthFlagsKHR,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVideoProfileListInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub profileCount: u32,
    pub pProfiles: *const VkVideoProfileInfoKHR,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVideoCapabilitiesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub flags: VkVideoCapabilityFlagsKHR,
    pub minBitstreamBufferOffsetAlignment: VkDeviceSize,
    pub minBitstreamBufferSizeAlignment: VkDeviceSize,
    pub pictureAccessGranularity: VkExtent2D,
    pub minCodedExtent: VkExtent2D,
    pub maxCodedExtent: VkExtent2D,
    pub maxDpbSlots: u32,
    pub maxActiveReferencePictures: u32,
    pub stdHeaderVersion: VkExtensionProperties,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceVideoFormatInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub imageUsage: VkImageUsageFlags,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVideoFormatPropertiesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub format: VkFormat,
    pub componentMapping: VkComponentMapping,
    pub imageCreateFlags: VkImageCreateFlags,
    pub imageType: VkImageType,
    pub imageTiling: VkImageTiling,
    pub imageUsageFlags: VkImageUsageFlags,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVideoPictureResourceInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub codedOffset: VkOffset2D,
    pub codedExtent: VkExtent2D,
    pub baseArrayLayer: u32,
    pub imageViewBinding: VkImageView,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVideoReferenceSlotInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub slotIndex: i32,
    pub pPictureResource: *const VkVideoPictureResourceInfoKHR,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVideoSessionMemoryRequirementsKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub memoryBindIndex: u32,
    pub memoryRequirements: VkMemoryRequirements,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkBindVideoSessionMemoryInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub memoryBindIndex: u32,
    pub memory: VkDeviceMemory,
    pub memoryOffset: VkDeviceSize,
    pub memorySize: VkDeviceSize,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVideoSessionCreateInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub queueFamilyIndex: u32,
    pub flags: VkVideoSessionCreateFlagsKHR,
    pub pVideoProfile: *const VkVideoProfileInfoKHR,
    pub pictureFormat: VkFormat,
    pub maxCodedExtent: VkExtent2D,
    pub referencePictureFormat: VkFormat,
    pub maxDpbSlots: u32,
    pub maxActiveReferencePictures: u32,
    pub pStdHeaderVersion: *const VkExtensionProperties,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVideoSessionParametersCreateInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: VkVideoSessionParametersCreateFlagsKHR,
    pub videoSessionParametersTemplate: VkVideoSessionParametersKHR,
    pub videoSession: VkVideoSessionKHR,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVideoSessionParametersUpdateInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub updateSequenceCount: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVideoBeginCodingInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: VkVideoBeginCodingFlagsKHR,
    pub videoSession: VkVideoSessionKHR,
    pub videoSessionParameters: VkVideoSessionParametersKHR,
    pub referenceSlotCount: u32,
    pub pReferenceSlots: *const VkVideoReferenceSlotInfoKHR,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVideoEndCodingInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: VkVideoEndCodingFlagsKHR,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVideoCodingControlInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: VkVideoCodingControlFlagsKHR,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVideoDecodeCapabilitiesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub flags: VkVideoDecodeCapabilityFlagsKHR,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVideoDecodeUsageInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub videoUsageHints: VkVideoDecodeUsageFlagsKHR,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVideoDecodeInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: VkVideoDecodeFlagsKHR,
    pub srcBuffer: VkBuffer,
    pub srcBufferOffset: VkDeviceSize,
    pub srcBufferRange: VkDeviceSize,
    pub dstPictureResource: VkVideoPictureResourceInfoKHR,
    pub pSetupReferenceSlot: *const VkVideoReferenceSlotInfoKHR,
    pub referenceSlotCount: u32,
    pub pReferenceSlots: *const VkVideoReferenceSlotInfoKHR,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct StdVideoH264SpsVuiFlags {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub __bindgen_padding_0: u16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StdVideoH264HrdParameters {
    pub cpb_cnt_minus1: u8,
    pub bit_rate_scale: u8,
    pub cpb_size_scale: u8,
    pub reserved1: u8,
    pub bit_rate_value_minus1: [u32; 32usize],
    pub cpb_size_value_minus1: [u32; 32usize],
    pub cbr_flag: [u8; 32usize],
    pub initial_cpb_removal_delay_length_minus1: u32,
    pub cpb_removal_delay_length_minus1: u32,
    pub dpb_output_delay_length_minus1: u32,
    pub time_offset_length: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StdVideoH264SequenceParameterSetVui {
    pub flags: StdVideoH264SpsVuiFlags,
    pub aspect_ratio_idc: StdVideoH264AspectRatioIdc,
    pub sar_width: u16,
    pub sar_height: u16,
    pub video_format: u8,
    pub colour_primaries: u8,
    pub transfer_characteristics: u8,
    pub matrix_coefficients: u8,
    pub num_units_in_tick: u32,
    pub time_scale: u32,
    pub max_num_reorder_frames: u8,
    pub max_dec_frame_buffering: u8,
    pub chroma_sample_loc_type_top_field: u8,
    pub chroma_sample_loc_type_bottom_field: u8,
    pub reserved1: u32,
    pub pHrdParameters: *const StdVideoH264HrdParameters,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct StdVideoH264SpsFlags {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub __bindgen_padding_0: u16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StdVideoH264ScalingLists {
    pub scaling_list_present_mask: u16,
    pub use_default_scaling_matrix_mask: u16,
    pub ScalingList4x4: [[u8; 16usize]; 6usize],
    pub ScalingList8x8: [[u8; 64usize]; 6usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StdVideoH264SequenceParameterSet {
    pub flags: StdVideoH264SpsFlags,
    pub profile_idc: StdVideoH264ProfileIdc,
    pub level_idc: StdVideoH264LevelIdc,
    pub chroma_format_idc: StdVideoH264ChromaFormatIdc,
    pub seq_parameter_set_id: u8,
    pub bit_depth_luma_minus8: u8,
    pub bit_depth_chroma_minus8: u8,
    pub log2_max_frame_num_minus4: u8,
    pub pic_order_cnt_type: StdVideoH264PocType,
    pub offset_for_non_ref_pic: i32,
    pub offset_for_top_to_bottom_field: i32,
    pub log2_max_pic_order_cnt_lsb_minus4: u8,
    pub num_ref_frames_in_pic_order_cnt_cycle: u8,
    pub max_num_ref_frames: u8,
    pub reserved1: u8,
    pub pic_width_in_mbs_minus1: u32,
    pub pic_height_in_map_units_minus1: u32,
    pub frame_crop_left_offset: u32,
    pub frame_crop_right_offset: u32,
    pub frame_crop_top_offset: u32,
    pub frame_crop_bottom_offset: u32,
    pub reserved2: u32,
    pub pOffsetForRefFrame: *const i32,
    pub pScalingLists: *const StdVideoH264ScalingLists,
    pub pSequenceParameterSetVui: *const StdVideoH264SequenceParameterSetVui,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct StdVideoH264PpsFlags {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 3usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StdVideoH264PictureParameterSet {
    pub flags: StdVideoH264PpsFlags,
    pub seq_parameter_set_id: u8,
    pub pic_parameter_set_id: u8,
    pub num_ref_idx_l0_default_active_minus1: u8,
    pub num_ref_idx_l1_default_active_minus1: u8,
    pub weighted_bipred_idc: StdVideoH264WeightedBipredIdc,
    pub pic_init_qp_minus26: i8,
    pub pic_init_qs_minus26: i8,
    pub chroma_qp_index_offset: i8,
    pub second_chroma_qp_index_offset: i8,
    pub pScalingLists: *const StdVideoH264ScalingLists,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StdVideoEncodeH264WeightTableFlags {
    pub luma_weight_l0_flag: u32,
    pub chroma_weight_l0_flag: u32,
    pub luma_weight_l1_flag: u32,
    pub chroma_weight_l1_flag: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StdVideoEncodeH264WeightTable {
    pub flags: StdVideoEncodeH264WeightTableFlags,
    pub luma_log2_weight_denom: u8,
    pub chroma_log2_weight_denom: u8,
    pub luma_weight_l0: [i8; 32usize],
    pub luma_offset_l0: [i8; 32usize],
    pub chroma_weight_l0: [[i8; 2usize]; 32usize],
    pub chroma_offset_l0: [[i8; 2usize]; 32usize],
    pub luma_weight_l1: [i8; 32usize],
    pub luma_offset_l1: [i8; 32usize],
    pub chroma_weight_l1: [[i8; 2usize]; 32usize],
    pub chroma_offset_l1: [[i8; 2usize]; 32usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StdVideoEncodeH264SliceHeaderFlags {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StdVideoEncodeH264PictureInfoFlags {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StdVideoEncodeH264ReferenceInfoFlags {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StdVideoEncodeH264ReferenceListsInfoFlags {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StdVideoEncodeH264RefListModEntry {
    pub modification_of_pic_nums_idc: StdVideoH264ModificationOfPicNumsIdc,
    pub abs_diff_pic_num_minus1: u16,
    pub long_term_pic_num: u16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StdVideoEncodeH264RefPicMarkingEntry {
    pub memory_management_control_operation: StdVideoH264MemMgmtControlOp,
    pub difference_of_pic_nums_minus1: u16,
    pub long_term_pic_num: u16,
    pub long_term_frame_idx: u16,
    pub max_long_term_frame_idx_plus1: u16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StdVideoEncodeH264ReferenceListsInfo {
    pub flags: StdVideoEncodeH264ReferenceListsInfoFlags,
    pub num_ref_idx_l0_active_minus1: u8,
    pub num_ref_idx_l1_active_minus1: u8,
    pub RefPicList0: [u8; 32usize],
    pub RefPicList1: [u8; 32usize],
    pub refList0ModOpCount: u8,
    pub refList1ModOpCount: u8,
    pub refPicMarkingOpCount: u8,
    pub reserved1: [u8; 7usize],
    pub pRefList0ModOperations: *const StdVideoEncodeH264RefListModEntry,
    pub pRefList1ModOperations: *const StdVideoEncodeH264RefListModEntry,
    pub pRefPicMarkingOperations: *const StdVideoEncodeH264RefPicMarkingEntry,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StdVideoEncodeH264PictureInfo {
    pub flags: StdVideoEncodeH264PictureInfoFlags,
    pub seq_parameter_set_id: u8,
    pub pic_parameter_set_id: u8,
    pub idr_pic_id: u16,
    pub primary_pic_type: StdVideoH264PictureType,
    pub frame_num: u32,
    pub PicOrderCnt: i32,
    pub temporal_id: u8,
    pub reserved1: [u8; 3usize],
    pub pRefLists: *const StdVideoEncodeH264ReferenceListsInfo,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StdVideoEncodeH264ReferenceInfo {
    pub flags: StdVideoEncodeH264ReferenceInfoFlags,
    pub primary_pic_type: StdVideoH264PictureType,
    pub FrameNum: u32,
    pub PicOrderCnt: i32,
    pub long_term_pic_num: u16,
    pub long_term_frame_idx: u16,
    pub temporal_id: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StdVideoEncodeH264SliceHeader {
    pub flags: StdVideoEncodeH264SliceHeaderFlags,
    pub first_mb_in_slice: u32,
    pub slice_type: StdVideoH264SliceType,
    pub slice_alpha_c0_offset_div2: i8,
    pub slice_beta_offset_div2: i8,
    pub slice_qp_delta: i8,
    pub reserved1: u8,
    pub cabac_init_idc: StdVideoH264CabacInitIdc,
    pub disable_deblocking_filter_idc: StdVideoH264DisableDeblockingFilterIdc,
    pub pWeightTable: *const StdVideoEncodeH264WeightTable,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVideoEncodeH264CapabilitiesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub flags: VkVideoEncodeH264CapabilityFlagsKHR,
    pub maxLevelIdc: StdVideoH264LevelIdc,
    pub maxSliceCount: u32,
    pub maxPPictureL0ReferenceCount: u32,
    pub maxBPictureL0ReferenceCount: u32,
    pub maxL1ReferenceCount: u32,
    pub maxTemporalLayerCount: u32,
    pub expectDyadicTemporalLayerPattern: VkBool32,
    pub minQp: i32,
    pub maxQp: i32,
    pub prefersGopRemainingFrames: VkBool32,
    pub requiresGopRemainingFrames: VkBool32,
    pub stdSyntaxFlags: VkVideoEncodeH264StdFlagsKHR,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVideoEncodeH264QpKHR {
    pub qpI: i32,
    pub qpP: i32,
    pub qpB: i32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVideoEncodeH264QualityLevelPropertiesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub preferredRateControlFlags: VkVideoEncodeH264RateControlFlagsKHR,
    pub preferredGopFrameCount: u32,
    pub preferredIdrPeriod: u32,
    pub preferredConsecutiveBFrameCount: u32,
    pub preferredTemporalLayerCount: u32,
    pub preferredConstantQp: VkVideoEncodeH264QpKHR,
    pub preferredMaxL0ReferenceCount: u32,
    pub preferredMaxL1ReferenceCount: u32,
    pub preferredStdEntropyCodingModeFlag: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVideoEncodeH264SessionCreateInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub useMaxLevelIdc: VkBool32,
    pub maxLevelIdc: StdVideoH264LevelIdc,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVideoEncodeH264SessionParametersAddInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub stdSPSCount: u32,
    pub pStdSPSs: *const StdVideoH264SequenceParameterSet,
    pub stdPPSCount: u32,
    pub pStdPPSs: *const StdVideoH264PictureParameterSet,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVideoEncodeH264SessionParametersCreateInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub maxStdSPSCount: u32,
    pub maxStdPPSCount: u32,
    pub pParametersAddInfo: *const VkVideoEncodeH264SessionParametersAddInfoKHR,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVideoEncodeH264SessionParametersGetInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub writeStdSPS: VkBool32,
    pub writeStdPPS: VkBool32,
    pub stdSPSId: u32,
    pub stdPPSId: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVideoEncodeH264SessionParametersFeedbackInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub hasStdSPSOverrides: VkBool32,
    pub hasStdPPSOverrides: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVideoEncodeH264NaluSliceInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub constantQp: i32,
    pub pStdSliceHeader: *const StdVideoEncodeH264SliceHeader,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVideoEncodeH264PictureInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub naluSliceEntryCount: u32,
    pub pNaluSliceEntries: *const VkVideoEncodeH264NaluSliceInfoKHR,
    pub pStdPictureInfo: *const StdVideoEncodeH264PictureInfo,
    pub generatePrefixNalu: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVideoEncodeH264DpbSlotInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub pStdReferenceInfo: *const StdVideoEncodeH264ReferenceInfo,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVideoEncodeH264ProfileInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub stdProfileIdc: StdVideoH264ProfileIdc,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVideoEncodeH264RateControlInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: VkVideoEncodeH264RateControlFlagsKHR,
    pub gopFrameCount: u32,
    pub idrPeriod: u32,
    pub consecutiveBFrameCount: u32,
    pub temporalLayerCount: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVideoEncodeH264FrameSizeKHR {
    pub frameISize: u32,
    pub framePSize: u32,
    pub frameBSize: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVideoEncodeH264RateControlLayerInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub useMinQp: VkBool32,
    pub minQp: VkVideoEncodeH264QpKHR,
    pub useMaxQp: VkBool32,
    pub maxQp: VkVideoEncodeH264QpKHR,
    pub useMaxFrameSize: VkBool32,
    pub maxFrameSize: VkVideoEncodeH264FrameSizeKHR,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVideoEncodeH264GopRemainingFrameInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub useGopRemainingFrames: VkBool32,
    pub gopRemainingI: u32,
    pub gopRemainingP: u32,
    pub gopRemainingB: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StdVideoH265DecPicBufMgr {
    pub max_latency_increase_plus1: [u32; 7usize],
    pub max_dec_pic_buffering_minus1: [u8; 7usize],
    pub max_num_reorder_pics: [u8; 7usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StdVideoH265SubLayerHrdParameters {
    pub bit_rate_value_minus1: [u32; 32usize],
    pub cpb_size_value_minus1: [u32; 32usize],
    pub cpb_size_du_value_minus1: [u32; 32usize],
    pub bit_rate_du_value_minus1: [u32; 32usize],
    pub cbr_flag: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct StdVideoH265HrdFlags {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StdVideoH265HrdParameters {
    pub flags: StdVideoH265HrdFlags,
    pub tick_divisor_minus2: u8,
    pub du_cpb_removal_delay_increment_length_minus1: u8,
    pub dpb_output_delay_du_length_minus1: u8,
    pub bit_rate_scale: u8,
    pub cpb_size_scale: u8,
    pub cpb_size_du_scale: u8,
    pub initial_cpb_removal_delay_length_minus1: u8,
    pub au_cpb_removal_delay_length_minus1: u8,
    pub dpb_output_delay_length_minus1: u8,
    pub cpb_cnt_minus1: [u8; 7usize],
    pub elemental_duration_in_tc_minus1: [u16; 7usize],
    pub reserved: [u16; 3usize],
    pub pSubLayerHrdParametersNal: *const StdVideoH265SubLayerHrdParameters,
    pub pSubLayerHrdParametersVcl: *const StdVideoH265SubLayerHrdParameters,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct StdVideoH265VpsFlags {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 3usize],
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct StdVideoH265ProfileTierLevelFlags {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 3usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StdVideoH265ProfileTierLevel {
    pub flags: StdVideoH265ProfileTierLevelFlags,
    pub general_profile_idc: StdVideoH265ProfileIdc,
    pub general_level_idc: StdVideoH265LevelIdc,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StdVideoH265VideoParameterSet {
    pub flags: StdVideoH265VpsFlags,
    pub vps_video_parameter_set_id: u8,
    pub vps_max_sub_layers_minus1: u8,
    pub reserved1: u8,
    pub reserved2: u8,
    pub vps_num_units_in_tick: u32,
    pub vps_time_scale: u32,
    pub vps_num_ticks_poc_diff_one_minus1: u32,
    pub reserved3: u32,
    pub pDecPicBufMgr: *const StdVideoH265DecPicBufMgr,
    pub pHrdParameters: *const StdVideoH265HrdParameters,
    pub pProfileTierLevel: *const StdVideoH265ProfileTierLevel,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StdVideoH265ScalingLists {
    pub ScalingList4x4: [[u8; 16usize]; 6usize],
    pub ScalingList8x8: [[u8; 64usize]; 6usize],
    pub ScalingList16x16: [[u8; 64usize]; 6usize],
    pub ScalingList32x32: [[u8; 64usize]; 2usize],
    pub ScalingListDCCoef16x16: [u8; 6usize],
    pub ScalingListDCCoef32x32: [u8; 2usize],
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct StdVideoH265SpsVuiFlags {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 3usize]>,
    pub __bindgen_padding_0: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StdVideoH265SequenceParameterSetVui {
    pub flags: StdVideoH265SpsVuiFlags,
    pub aspect_ratio_idc: StdVideoH265AspectRatioIdc,
    pub sar_width: u16,
    pub sar_height: u16,
    pub video_format: u8,
    pub colour_primaries: u8,
    pub transfer_characteristics: u8,
    pub matrix_coeffs: u8,
    pub chroma_sample_loc_type_top_field: u8,
    pub chroma_sample_loc_type_bottom_field: u8,
    pub reserved1: u8,
    pub reserved2: u8,
    pub def_disp_win_left_offset: u16,
    pub def_disp_win_right_offset: u16,
    pub def_disp_win_top_offset: u16,
    pub def_disp_win_bottom_offset: u16,
    pub vui_num_units_in_tick: u32,
    pub vui_time_scale: u32,
    pub vui_num_ticks_poc_diff_one_minus1: u32,
    pub min_spatial_segmentation_idc: u16,
    pub reserved3: u16,
    pub max_bytes_per_pic_denom: u8,
    pub max_bits_per_min_cu_denom: u8,
    pub log2_max_mv_length_horizontal: u8,
    pub log2_max_mv_length_vertical: u8,
    pub pHrdParameters: *const StdVideoH265HrdParameters,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StdVideoH265PredictorPaletteEntries {
    pub PredictorPaletteEntries: [[u16; 128usize]; 3usize],
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct StdVideoH265SpsFlags {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct StdVideoH265ShortTermRefPicSetFlags {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 3usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StdVideoH265ShortTermRefPicSet {
    pub flags: StdVideoH265ShortTermRefPicSetFlags,
    pub delta_idx_minus1: u32,
    pub use_delta_flag: u16,
    pub abs_delta_rps_minus1: u16,
    pub used_by_curr_pic_flag: u16,
    pub used_by_curr_pic_s0_flag: u16,
    pub used_by_curr_pic_s1_flag: u16,
    pub reserved1: u16,
    pub reserved2: u8,
    pub reserved3: u8,
    pub num_negative_pics: u8,
    pub num_positive_pics: u8,
    pub delta_poc_s0_minus1: [u16; 16usize],
    pub delta_poc_s1_minus1: [u16; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StdVideoH265LongTermRefPicsSps {
    pub used_by_curr_pic_lt_sps_flag: u32,
    pub lt_ref_pic_poc_lsb_sps: [u32; 32usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StdVideoH265SequenceParameterSet {
    pub flags: StdVideoH265SpsFlags,
    pub chroma_format_idc: StdVideoH265ChromaFormatIdc,
    pub pic_width_in_luma_samples: u32,
    pub pic_height_in_luma_samples: u32,
    pub sps_video_parameter_set_id: u8,
    pub sps_max_sub_layers_minus1: u8,
    pub sps_seq_parameter_set_id: u8,
    pub bit_depth_luma_minus8: u8,
    pub bit_depth_chroma_minus8: u8,
    pub log2_max_pic_order_cnt_lsb_minus4: u8,
    pub log2_min_luma_coding_block_size_minus3: u8,
    pub log2_diff_max_min_luma_coding_block_size: u8,
    pub log2_min_luma_transform_block_size_minus2: u8,
    pub log2_diff_max_min_luma_transform_block_size: u8,
    pub max_transform_hierarchy_depth_inter: u8,
    pub max_transform_hierarchy_depth_intra: u8,
    pub num_short_term_ref_pic_sets: u8,
    pub num_long_term_ref_pics_sps: u8,
    pub pcm_sample_bit_depth_luma_minus1: u8,
    pub pcm_sample_bit_depth_chroma_minus1: u8,
    pub log2_min_pcm_luma_coding_block_size_minus3: u8,
    pub log2_diff_max_min_pcm_luma_coding_block_size: u8,
    pub reserved1: u8,
    pub reserved2: u8,
    pub palette_max_size: u8,
    pub delta_palette_max_predictor_size: u8,
    pub motion_vector_resolution_control_idc: u8,
    pub sps_num_palette_predictor_initializers_minus1: u8,
    pub conf_win_left_offset: u32,
    pub conf_win_right_offset: u32,
    pub conf_win_top_offset: u32,
    pub conf_win_bottom_offset: u32,
    pub pProfileTierLevel: *const StdVideoH265ProfileTierLevel,
    pub pDecPicBufMgr: *const StdVideoH265DecPicBufMgr,
    pub pScalingLists: *const StdVideoH265ScalingLists,
    pub pShortTermRefPicSet: *const StdVideoH265ShortTermRefPicSet,
    pub pLongTermRefPicsSps: *const StdVideoH265LongTermRefPicsSps,
    pub pSequenceParameterSetVui: *const StdVideoH265SequenceParameterSetVui,
    pub pPredictorPaletteEntries: *const StdVideoH265PredictorPaletteEntries,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct StdVideoH265PpsFlags {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StdVideoH265PictureParameterSet {
    pub flags: StdVideoH265PpsFlags,
    pub pps_pic_parameter_set_id: u8,
    pub pps_seq_parameter_set_id: u8,
    pub sps_video_parameter_set_id: u8,
    pub num_extra_slice_header_bits: u8,
    pub num_ref_idx_l0_default_active_minus1: u8,
    pub num_ref_idx_l1_default_active_minus1: u8,
    pub init_qp_minus26: i8,
    pub diff_cu_qp_delta_depth: u8,
    pub pps_cb_qp_offset: i8,
    pub pps_cr_qp_offset: i8,
    pub pps_beta_offset_div2: i8,
    pub pps_tc_offset_div2: i8,
    pub log2_parallel_merge_level_minus2: u8,
    pub log2_max_transform_skip_block_size_minus2: u8,
    pub diff_cu_chroma_qp_offset_depth: u8,
    pub chroma_qp_offset_list_len_minus1: u8,
    pub cb_qp_offset_list: [i8; 6usize],
    pub cr_qp_offset_list: [i8; 6usize],
    pub log2_sao_offset_scale_luma: u8,
    pub log2_sao_offset_scale_chroma: u8,
    pub pps_act_y_qp_offset_plus5: i8,
    pub pps_act_cb_qp_offset_plus5: i8,
    pub pps_act_cr_qp_offset_plus3: i8,
    pub pps_num_palette_predictor_initializers: u8,
    pub luma_bit_depth_entry_minus8: u8,
    pub chroma_bit_depth_entry_minus8: u8,
    pub num_tile_columns_minus1: u8,
    pub num_tile_rows_minus1: u8,
    pub reserved1: u8,
    pub reserved2: u8,
    pub column_width_minus1: [u16; 19usize],
    pub row_height_minus1: [u16; 21usize],
    pub reserved3: u32,
    pub pScalingLists: *const StdVideoH265ScalingLists,
    pub pPredictorPaletteEntries: *const StdVideoH265PredictorPaletteEntries,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StdVideoEncodeH265WeightTableFlags {
    pub luma_weight_l0_flag: u16,
    pub chroma_weight_l0_flag: u16,
    pub luma_weight_l1_flag: u16,
    pub chroma_weight_l1_flag: u16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StdVideoEncodeH265WeightTable {
    pub flags: StdVideoEncodeH265WeightTableFlags,
    pub luma_log2_weight_denom: u8,
    pub delta_chroma_log2_weight_denom: i8,
    pub delta_luma_weight_l0: [i8; 15usize],
    pub luma_offset_l0: [i8; 15usize],
    pub delta_chroma_weight_l0: [[i8; 2usize]; 15usize],
    pub delta_chroma_offset_l0: [[i8; 2usize]; 15usize],
    pub delta_luma_weight_l1: [i8; 15usize],
    pub luma_offset_l1: [i8; 15usize],
    pub delta_chroma_weight_l1: [[i8; 2usize]; 15usize],
    pub delta_chroma_offset_l1: [[i8; 2usize]; 15usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StdVideoEncodeH265SliceSegmentHeaderFlags {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StdVideoEncodeH265SliceSegmentHeader {
    pub flags: StdVideoEncodeH265SliceSegmentHeaderFlags,
    pub slice_type: StdVideoH265SliceType,
    pub slice_segment_address: u32,
    pub collocated_ref_idx: u8,
    pub MaxNumMergeCand: u8,
    pub slice_cb_qp_offset: i8,
    pub slice_cr_qp_offset: i8,
    pub slice_beta_offset_div2: i8,
    pub slice_tc_offset_div2: i8,
    pub slice_act_y_qp_offset: i8,
    pub slice_act_cb_qp_offset: i8,
    pub slice_act_cr_qp_offset: i8,
    pub slice_qp_delta: i8,
    pub reserved1: u16,
    pub pWeightTable: *const StdVideoEncodeH265WeightTable,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StdVideoEncodeH265ReferenceListsInfoFlags {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StdVideoEncodeH265ReferenceListsInfo {
    pub flags: StdVideoEncodeH265ReferenceListsInfoFlags,
    pub num_ref_idx_l0_active_minus1: u8,
    pub num_ref_idx_l1_active_minus1: u8,
    pub RefPicList0: [u8; 15usize],
    pub RefPicList1: [u8; 15usize],
    pub list_entry_l0: [u8; 15usize],
    pub list_entry_l1: [u8; 15usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StdVideoEncodeH265PictureInfoFlags {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StdVideoEncodeH265LongTermRefPics {
    pub num_long_term_sps: u8,
    pub num_long_term_pics: u8,
    pub lt_idx_sps: [u8; 32usize],
    pub poc_lsb_lt: [u8; 16usize],
    pub used_by_curr_pic_lt_flag: u16,
    pub delta_poc_msb_present_flag: [u8; 48usize],
    pub delta_poc_msb_cycle_lt: [u8; 48usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StdVideoEncodeH265PictureInfo {
    pub flags: StdVideoEncodeH265PictureInfoFlags,
    pub pic_type: StdVideoH265PictureType,
    pub sps_video_parameter_set_id: u8,
    pub pps_seq_parameter_set_id: u8,
    pub pps_pic_parameter_set_id: u8,
    pub short_term_ref_pic_set_idx: u8,
    pub PicOrderCntVal: i32,
    pub TemporalId: u8,
    pub reserved1: [u8; 7usize],
    pub pRefLists: *const StdVideoEncodeH265ReferenceListsInfo,
    pub pShortTermRefPicSet: *const StdVideoH265ShortTermRefPicSet,
    pub pLongTermRefPics: *const StdVideoEncodeH265LongTermRefPics,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StdVideoEncodeH265ReferenceInfoFlags {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StdVideoEncodeH265ReferenceInfo {
    pub flags: StdVideoEncodeH265ReferenceInfoFlags,
    pub pic_type: StdVideoH265PictureType,
    pub PicOrderCntVal: i32,
    pub TemporalId: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVideoEncodeH265CapabilitiesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub flags: VkVideoEncodeH265CapabilityFlagsKHR,
    pub maxLevelIdc: StdVideoH265LevelIdc,
    pub maxSliceSegmentCount: u32,
    pub maxTiles: VkExtent2D,
    pub ctbSizes: VkVideoEncodeH265CtbSizeFlagsKHR,
    pub transformBlockSizes: VkVideoEncodeH265TransformBlockSizeFlagsKHR,
    pub maxPPictureL0ReferenceCount: u32,
    pub maxBPictureL0ReferenceCount: u32,
    pub maxL1ReferenceCount: u32,
    pub maxSubLayerCount: u32,
    pub expectDyadicTemporalSubLayerPattern: VkBool32,
    pub minQp: i32,
    pub maxQp: i32,
    pub prefersGopRemainingFrames: VkBool32,
    pub requiresGopRemainingFrames: VkBool32,
    pub stdSyntaxFlags: VkVideoEncodeH265StdFlagsKHR,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVideoEncodeH265SessionCreateInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub useMaxLevelIdc: VkBool32,
    pub maxLevelIdc: StdVideoH265LevelIdc,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVideoEncodeH265QpKHR {
    pub qpI: i32,
    pub qpP: i32,
    pub qpB: i32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVideoEncodeH265QualityLevelPropertiesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub preferredRateControlFlags: VkVideoEncodeH265RateControlFlagsKHR,
    pub preferredGopFrameCount: u32,
    pub preferredIdrPeriod: u32,
    pub preferredConsecutiveBFrameCount: u32,
    pub preferredSubLayerCount: u32,
    pub preferredConstantQp: VkVideoEncodeH265QpKHR,
    pub preferredMaxL0ReferenceCount: u32,
    pub preferredMaxL1ReferenceCount: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVideoEncodeH265SessionParametersAddInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub stdVPSCount: u32,
    pub pStdVPSs: *const StdVideoH265VideoParameterSet,
    pub stdSPSCount: u32,
    pub pStdSPSs: *const StdVideoH265SequenceParameterSet,
    pub stdPPSCount: u32,
    pub pStdPPSs: *const StdVideoH265PictureParameterSet,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVideoEncodeH265SessionParametersCreateInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub maxStdVPSCount: u32,
    pub maxStdSPSCount: u32,
    pub maxStdPPSCount: u32,
    pub pParametersAddInfo: *const VkVideoEncodeH265SessionParametersAddInfoKHR,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVideoEncodeH265SessionParametersGetInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub writeStdVPS: VkBool32,
    pub writeStdSPS: VkBool32,
    pub writeStdPPS: VkBool32,
    pub stdVPSId: u32,
    pub stdSPSId: u32,
    pub stdPPSId: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVideoEncodeH265SessionParametersFeedbackInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub hasStdVPSOverrides: VkBool32,
    pub hasStdSPSOverrides: VkBool32,
    pub hasStdPPSOverrides: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVideoEncodeH265NaluSliceSegmentInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub constantQp: i32,
    pub pStdSliceSegmentHeader: *const StdVideoEncodeH265SliceSegmentHeader,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVideoEncodeH265PictureInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub naluSliceSegmentEntryCount: u32,
    pub pNaluSliceSegmentEntries: *const VkVideoEncodeH265NaluSliceSegmentInfoKHR,
    pub pStdPictureInfo: *const StdVideoEncodeH265PictureInfo,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVideoEncodeH265DpbSlotInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub pStdReferenceInfo: *const StdVideoEncodeH265ReferenceInfo,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVideoEncodeH265ProfileInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub stdProfileIdc: StdVideoH265ProfileIdc,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVideoEncodeH265RateControlInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: VkVideoEncodeH265RateControlFlagsKHR,
    pub gopFrameCount: u32,
    pub idrPeriod: u32,
    pub consecutiveBFrameCount: u32,
    pub subLayerCount: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVideoEncodeH265FrameSizeKHR {
    pub frameISize: u32,
    pub framePSize: u32,
    pub frameBSize: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVideoEncodeH265RateControlLayerInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub useMinQp: VkBool32,
    pub minQp: VkVideoEncodeH265QpKHR,
    pub useMaxQp: VkBool32,
    pub maxQp: VkVideoEncodeH265QpKHR,
    pub useMaxFrameSize: VkBool32,
    pub maxFrameSize: VkVideoEncodeH265FrameSizeKHR,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVideoEncodeH265GopRemainingFrameInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub useGopRemainingFrames: VkBool32,
    pub gopRemainingI: u32,
    pub gopRemainingP: u32,
    pub gopRemainingB: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct StdVideoDecodeH264PictureInfoFlags {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 3usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StdVideoDecodeH264PictureInfo {
    pub flags: StdVideoDecodeH264PictureInfoFlags,
    pub seq_parameter_set_id: u8,
    pub pic_parameter_set_id: u8,
    pub reserved1: u8,
    pub reserved2: u8,
    pub frame_num: u16,
    pub idr_pic_id: u16,
    pub PicOrderCnt: [i32; 2usize],
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct StdVideoDecodeH264ReferenceInfoFlags {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 3usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StdVideoDecodeH264ReferenceInfo {
    pub flags: StdVideoDecodeH264ReferenceInfoFlags,
    pub FrameNum: u16,
    pub reserved: u16,
    pub PicOrderCnt: [i32; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVideoDecodeH264ProfileInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub stdProfileIdc: StdVideoH264ProfileIdc,
    pub pictureLayout: VkVideoDecodeH264PictureLayoutFlagBitsKHR,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVideoDecodeH264CapabilitiesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub maxLevelIdc: StdVideoH264LevelIdc,
    pub fieldOffsetGranularity: VkOffset2D,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVideoDecodeH264SessionParametersAddInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub stdSPSCount: u32,
    pub pStdSPSs: *const StdVideoH264SequenceParameterSet,
    pub stdPPSCount: u32,
    pub pStdPPSs: *const StdVideoH264PictureParameterSet,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVideoDecodeH264SessionParametersCreateInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub maxStdSPSCount: u32,
    pub maxStdPPSCount: u32,
    pub pParametersAddInfo: *const VkVideoDecodeH264SessionParametersAddInfoKHR,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVideoDecodeH264PictureInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub pStdPictureInfo: *const StdVideoDecodeH264PictureInfo,
    pub sliceCount: u32,
    pub pSliceOffsets: *const u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVideoDecodeH264DpbSlotInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub pStdReferenceInfo: *const StdVideoDecodeH264ReferenceInfo,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkImportMemoryFdInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub handleType: VkExternalMemoryHandleTypeFlagBits,
    pub fd: ::core::ffi::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkMemoryFdPropertiesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub memoryTypeBits: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkMemoryGetFdInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub memory: VkDeviceMemory,
    pub handleType: VkExternalMemoryHandleTypeFlagBits,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkImportSemaphoreFdInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub semaphore: VkSemaphore,
    pub flags: VkSemaphoreImportFlags,
    pub handleType: VkExternalSemaphoreHandleTypeFlagBits,
    pub fd: ::core::ffi::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkSemaphoreGetFdInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub semaphore: VkSemaphore,
    pub handleType: VkExternalSemaphoreHandleTypeFlagBits,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkRectLayerKHR {
    pub offset: VkOffset2D,
    pub extent: VkExtent2D,
    pub layer: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPresentRegionKHR {
    pub rectangleCount: u32,
    pub pRectangles: *const VkRectLayerKHR,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPresentRegionsKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub swapchainCount: u32,
    pub pRegions: *const VkPresentRegionKHR,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkSharedPresentSurfaceCapabilitiesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub sharedPresentSupportedUsageFlags: VkImageUsageFlags,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkImportFenceFdInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub fence: VkFence,
    pub flags: VkFenceImportFlags,
    pub handleType: VkExternalFenceHandleTypeFlagBits,
    pub fd: ::core::ffi::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkFenceGetFdInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub fence: VkFence,
    pub handleType: VkExternalFenceHandleTypeFlagBits,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDevicePerformanceQueryFeaturesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub performanceCounterQueryPools: VkBool32,
    pub performanceCounterMultipleQueryPools: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDevicePerformanceQueryPropertiesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub allowCommandBufferQueryCopies: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPerformanceCounterKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub unit: VkPerformanceCounterUnitKHR,
    pub scope: VkPerformanceCounterScopeKHR,
    pub storage: VkPerformanceCounterStorageKHR,
    pub uuid: [u8; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPerformanceCounterDescriptionKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub flags: VkPerformanceCounterDescriptionFlagsKHR,
    pub name: [::core::ffi::c_char; 256usize],
    pub category: [::core::ffi::c_char; 256usize],
    pub description: [::core::ffi::c_char; 256usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkQueryPoolPerformanceCreateInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub queueFamilyIndex: u32,
    pub counterIndexCount: u32,
    pub pCounterIndices: *const u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkAcquireProfilingLockInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: VkAcquireProfilingLockFlagsKHR,
    pub timeout: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPerformanceQuerySubmitInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub counterPassIndex: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceSurfaceInfo2KHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub surface: VkSurfaceKHR,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkSurfaceCapabilities2KHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub surfaceCapabilities: VkSurfaceCapabilitiesKHR,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkSurfaceFormat2KHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub surfaceFormat: VkSurfaceFormatKHR,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDisplayProperties2KHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub displayProperties: VkDisplayPropertiesKHR,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDisplayPlaneProperties2KHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub displayPlaneProperties: VkDisplayPlanePropertiesKHR,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDisplayModeProperties2KHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub displayModeProperties: VkDisplayModePropertiesKHR,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDisplayPlaneInfo2KHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub mode: VkDisplayModeKHR,
    pub planeIndex: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDisplayPlaneCapabilities2KHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub capabilities: VkDisplayPlaneCapabilitiesKHR,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceShaderBfloat16FeaturesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub shaderBFloat16Type: VkBool32,
    pub shaderBFloat16DotProduct: VkBool32,
    pub shaderBFloat16CooperativeMatrix: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceShaderClockFeaturesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub shaderSubgroupClock: VkBool32,
    pub shaderDeviceClock: VkBool32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct StdVideoDecodeH265PictureInfoFlags {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 3usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StdVideoDecodeH265PictureInfo {
    pub flags: StdVideoDecodeH265PictureInfoFlags,
    pub sps_video_parameter_set_id: u8,
    pub pps_seq_parameter_set_id: u8,
    pub pps_pic_parameter_set_id: u8,
    pub NumDeltaPocsOfRefRpsIdx: u8,
    pub PicOrderCntVal: i32,
    pub NumBitsForSTRefPicSetInSlice: u16,
    pub reserved: u16,
    pub RefPicSetStCurrBefore: [u8; 8usize],
    pub RefPicSetStCurrAfter: [u8; 8usize],
    pub RefPicSetLtCurr: [u8; 8usize],
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct StdVideoDecodeH265ReferenceInfoFlags {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 3usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StdVideoDecodeH265ReferenceInfo {
    pub flags: StdVideoDecodeH265ReferenceInfoFlags,
    pub PicOrderCntVal: i32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVideoDecodeH265ProfileInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub stdProfileIdc: StdVideoH265ProfileIdc,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVideoDecodeH265CapabilitiesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub maxLevelIdc: StdVideoH265LevelIdc,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVideoDecodeH265SessionParametersAddInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub stdVPSCount: u32,
    pub pStdVPSs: *const StdVideoH265VideoParameterSet,
    pub stdSPSCount: u32,
    pub pStdSPSs: *const StdVideoH265SequenceParameterSet,
    pub stdPPSCount: u32,
    pub pStdPPSs: *const StdVideoH265PictureParameterSet,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVideoDecodeH265SessionParametersCreateInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub maxStdVPSCount: u32,
    pub maxStdSPSCount: u32,
    pub maxStdPPSCount: u32,
    pub pParametersAddInfo: *const VkVideoDecodeH265SessionParametersAddInfoKHR,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVideoDecodeH265PictureInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub pStdPictureInfo: *const StdVideoDecodeH265PictureInfo,
    pub sliceSegmentCount: u32,
    pub pSliceSegmentOffsets: *const u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVideoDecodeH265DpbSlotInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub pStdReferenceInfo: *const StdVideoDecodeH265ReferenceInfo,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkFragmentShadingRateAttachmentInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub pFragmentShadingRateAttachment: *const VkAttachmentReference2,
    pub shadingRateAttachmentTexelSize: VkExtent2D,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPipelineFragmentShadingRateStateCreateInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub fragmentSize: VkExtent2D,
    pub combinerOps: [VkFragmentShadingRateCombinerOpKHR; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceFragmentShadingRateFeaturesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub pipelineFragmentShadingRate: VkBool32,
    pub primitiveFragmentShadingRate: VkBool32,
    pub attachmentFragmentShadingRate: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceFragmentShadingRatePropertiesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub minFragmentShadingRateAttachmentTexelSize: VkExtent2D,
    pub maxFragmentShadingRateAttachmentTexelSize: VkExtent2D,
    pub maxFragmentShadingRateAttachmentTexelSizeAspectRatio: u32,
    pub primitiveFragmentShadingRateWithMultipleViewports: VkBool32,
    pub layeredShadingRateAttachments: VkBool32,
    pub fragmentShadingRateNonTrivialCombinerOps: VkBool32,
    pub maxFragmentSize: VkExtent2D,
    pub maxFragmentSizeAspectRatio: u32,
    pub maxFragmentShadingRateCoverageSamples: u32,
    pub maxFragmentShadingRateRasterizationSamples: VkSampleCountFlagBits,
    pub fragmentShadingRateWithShaderDepthStencilWrites: VkBool32,
    pub fragmentShadingRateWithSampleMask: VkBool32,
    pub fragmentShadingRateWithShaderSampleMask: VkBool32,
    pub fragmentShadingRateWithConservativeRasterization: VkBool32,
    pub fragmentShadingRateWithFragmentShaderInterlock: VkBool32,
    pub fragmentShadingRateWithCustomSampleLocations: VkBool32,
    pub fragmentShadingRateStrictMultiplyCombiner: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceFragmentShadingRateKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub sampleCounts: VkSampleCountFlags,
    pub fragmentSize: VkExtent2D,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkRenderingFragmentShadingRateAttachmentInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub imageView: VkImageView,
    pub imageLayout: VkImageLayout,
    pub shadingRateAttachmentTexelSize: VkExtent2D,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceShaderQuadControlFeaturesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub shaderQuadControl: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkSurfaceProtectedCapabilitiesKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub supportsProtected: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDevicePresentWaitFeaturesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub presentWait: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub pipelineExecutableInfo: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPipelineInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub pipeline: VkPipeline,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPipelineExecutablePropertiesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub stages: VkShaderStageFlags,
    pub name: [::core::ffi::c_char; 256usize],
    pub description: [::core::ffi::c_char; 256usize],
    pub subgroupSize: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPipelineExecutableInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub pipeline: VkPipeline,
    pub executableIndex: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineExecutableStatisticKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub name: [::core::ffi::c_char; 256usize],
    pub description: [::core::ffi::c_char; 256usize],
    pub format: VkPipelineExecutableStatisticFormatKHR,
    pub value: VkPipelineExecutableStatisticValueKHR,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPipelineExecutableInternalRepresentationKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub name: [::core::ffi::c_char; 256usize],
    pub description: [::core::ffi::c_char; 256usize],
    pub isText: VkBool32,
    pub dataSize: usize,
    pub pData: *mut ::core::ffi::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPipelineLibraryCreateInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub libraryCount: u32,
    pub pLibraries: *const VkPipeline,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPresentIdKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub swapchainCount: u32,
    pub pPresentIds: *const u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDevicePresentIdFeaturesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub presentId: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVideoEncodeInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: VkVideoEncodeFlagsKHR,
    pub dstBuffer: VkBuffer,
    pub dstBufferOffset: VkDeviceSize,
    pub dstBufferRange: VkDeviceSize,
    pub srcPictureResource: VkVideoPictureResourceInfoKHR,
    pub pSetupReferenceSlot: *const VkVideoReferenceSlotInfoKHR,
    pub referenceSlotCount: u32,
    pub pReferenceSlots: *const VkVideoReferenceSlotInfoKHR,
    pub precedingExternallyEncodedBytes: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVideoEncodeCapabilitiesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub flags: VkVideoEncodeCapabilityFlagsKHR,
    pub rateControlModes: VkVideoEncodeRateControlModeFlagsKHR,
    pub maxRateControlLayers: u32,
    pub maxBitrate: u64,
    pub maxQualityLevels: u32,
    pub encodeInputPictureGranularity: VkExtent2D,
    pub supportedEncodeFeedbackFlags: VkVideoEncodeFeedbackFlagsKHR,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkQueryPoolVideoEncodeFeedbackCreateInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub encodeFeedbackFlags: VkVideoEncodeFeedbackFlagsKHR,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVideoEncodeUsageInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub videoUsageHints: VkVideoEncodeUsageFlagsKHR,
    pub videoContentHints: VkVideoEncodeContentFlagsKHR,
    pub tuningMode: VkVideoEncodeTuningModeKHR,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVideoEncodeRateControlLayerInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub averageBitrate: u64,
    pub maxBitrate: u64,
    pub frameRateNumerator: u32,
    pub frameRateDenominator: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVideoEncodeRateControlInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: VkVideoEncodeRateControlFlagsKHR,
    pub rateControlMode: VkVideoEncodeRateControlModeFlagBitsKHR,
    pub layerCount: u32,
    pub pLayers: *const VkVideoEncodeRateControlLayerInfoKHR,
    pub virtualBufferSizeInMs: u32,
    pub initialVirtualBufferSizeInMs: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub pVideoProfile: *const VkVideoProfileInfoKHR,
    pub qualityLevel: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVideoEncodeQualityLevelPropertiesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub preferredRateControlMode: VkVideoEncodeRateControlModeFlagBitsKHR,
    pub preferredRateControlLayerCount: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVideoEncodeQualityLevelInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub qualityLevel: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVideoEncodeSessionParametersGetInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub videoSessionParameters: VkVideoSessionParametersKHR,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVideoEncodeSessionParametersFeedbackInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub hasOverrides: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub fragmentShaderBarycentric: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub triStripVertexOrderIndependentOfProvokingVertex: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub shaderSubgroupUniformControlFlow: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub workgroupMemoryExplicitLayout: VkBool32,
    pub workgroupMemoryExplicitLayoutScalarBlockLayout: VkBool32,
    pub workgroupMemoryExplicitLayout8BitAccess: VkBool32,
    pub workgroupMemoryExplicitLayout16BitAccess: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub rayTracingMaintenance1: VkBool32,
    pub rayTracingPipelineTraceRaysIndirect2: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkTraceRaysIndirectCommand2KHR {
    pub raygenShaderRecordAddress: VkDeviceAddress,
    pub raygenShaderRecordSize: VkDeviceSize,
    pub missShaderBindingTableAddress: VkDeviceAddress,
    pub missShaderBindingTableSize: VkDeviceSize,
    pub missShaderBindingTableStride: VkDeviceSize,
    pub hitShaderBindingTableAddress: VkDeviceAddress,
    pub hitShaderBindingTableSize: VkDeviceSize,
    pub hitShaderBindingTableStride: VkDeviceSize,
    pub callableShaderBindingTableAddress: VkDeviceAddress,
    pub callableShaderBindingTableSize: VkDeviceSize,
    pub callableShaderBindingTableStride: VkDeviceSize,
    pub width: u32,
    pub height: u32,
    pub depth: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub shaderMaximalReconvergence: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub rayTracingPositionFetch: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDevicePipelineBinaryFeaturesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub pipelineBinaries: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDevicePipelineBinaryPropertiesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub pipelineBinaryInternalCache: VkBool32,
    pub pipelineBinaryInternalCacheControl: VkBool32,
    pub pipelineBinaryPrefersInternalCache: VkBool32,
    pub pipelineBinaryPrecompiledInternalCache: VkBool32,
    pub pipelineBinaryCompressedData: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDevicePipelineBinaryInternalCacheControlKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub disableInternalCache: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPipelineBinaryKeyKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub keySize: u32,
    pub key: [u8; 32usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPipelineBinaryDataKHR {
    pub dataSize: usize,
    pub pData: *mut ::core::ffi::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPipelineBinaryKeysAndDataKHR {
    pub binaryCount: u32,
    pub pPipelineBinaryKeys: *const VkPipelineBinaryKeyKHR,
    pub pPipelineBinaryData: *const VkPipelineBinaryDataKHR,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPipelineCreateInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPipelineBinaryCreateInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub pKeysAndDataInfo: *const VkPipelineBinaryKeysAndDataKHR,
    pub pipeline: VkPipeline,
    pub pPipelineCreateInfo: *const VkPipelineCreateInfoKHR,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPipelineBinaryInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub binaryCount: u32,
    pub pPipelineBinaries: *const VkPipelineBinaryKHR,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkReleaseCapturedPipelineDataInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub pipeline: VkPipeline,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPipelineBinaryDataInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub pipelineBinary: VkPipelineBinaryKHR,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPipelineBinaryHandlesInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub pipelineBinaryCount: u32,
    pub pPipelineBinaries: *mut VkPipelineBinaryKHR,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkCooperativeMatrixPropertiesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub MSize: u32,
    pub NSize: u32,
    pub KSize: u32,
    pub AType: VkComponentTypeKHR,
    pub BType: VkComponentTypeKHR,
    pub CType: VkComponentTypeKHR,
    pub ResultType: VkComponentTypeKHR,
    pub saturatingAccumulation: VkBool32,
    pub scope: VkScopeKHR,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceCooperativeMatrixFeaturesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub cooperativeMatrix: VkBool32,
    pub cooperativeMatrixRobustBufferAccess: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceCooperativeMatrixPropertiesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub cooperativeMatrixSupportedStages: VkShaderStageFlags,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceComputeShaderDerivativesFeaturesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub computeDerivativeGroupQuads: VkBool32,
    pub computeDerivativeGroupLinear: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceComputeShaderDerivativesPropertiesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub meshAndTaskShaderDerivatives: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StdVideoAV1ColorConfigFlags {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StdVideoAV1ColorConfig {
    pub flags: StdVideoAV1ColorConfigFlags,
    pub BitDepth: u8,
    pub subsampling_x: u8,
    pub subsampling_y: u8,
    pub reserved1: u8,
    pub color_primaries: StdVideoAV1ColorPrimaries,
    pub transfer_characteristics: StdVideoAV1TransferCharacteristics,
    pub matrix_coefficients: StdVideoAV1MatrixCoefficients,
    pub chroma_sample_position: StdVideoAV1ChromaSamplePosition,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StdVideoAV1TimingInfoFlags {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StdVideoAV1TimingInfo {
    pub flags: StdVideoAV1TimingInfoFlags,
    pub num_units_in_display_tick: u32,
    pub time_scale: u32,
    pub num_ticks_per_picture_minus_1: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StdVideoAV1LoopFilterFlags {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StdVideoAV1LoopFilter {
    pub flags: StdVideoAV1LoopFilterFlags,
    pub loop_filter_level: [u8; 4usize],
    pub loop_filter_sharpness: u8,
    pub update_ref_delta: u8,
    pub loop_filter_ref_deltas: [i8; 8usize],
    pub update_mode_delta: u8,
    pub loop_filter_mode_deltas: [i8; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StdVideoAV1QuantizationFlags {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StdVideoAV1Quantization {
    pub flags: StdVideoAV1QuantizationFlags,
    pub base_q_idx: u8,
    pub DeltaQYDc: i8,
    pub DeltaQUDc: i8,
    pub DeltaQUAc: i8,
    pub DeltaQVDc: i8,
    pub DeltaQVAc: i8,
    pub qm_y: u8,
    pub qm_u: u8,
    pub qm_v: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StdVideoAV1Segmentation {
    pub FeatureEnabled: [u8; 8usize],
    pub FeatureData: [[i16; 8usize]; 8usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StdVideoAV1TileInfoFlags {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StdVideoAV1TileInfo {
    pub flags: StdVideoAV1TileInfoFlags,
    pub TileCols: u8,
    pub TileRows: u8,
    pub context_update_tile_id: u16,
    pub tile_size_bytes_minus_1: u8,
    pub reserved1: [u8; 7usize],
    pub pMiColStarts: *const u16,
    pub pMiRowStarts: *const u16,
    pub pWidthInSbsMinus1: *const u16,
    pub pHeightInSbsMinus1: *const u16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StdVideoAV1CDEF {
    pub cdef_damping_minus_3: u8,
    pub cdef_bits: u8,
    pub cdef_y_pri_strength: [u8; 8usize],
    pub cdef_y_sec_strength: [u8; 8usize],
    pub cdef_uv_pri_strength: [u8; 8usize],
    pub cdef_uv_sec_strength: [u8; 8usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StdVideoAV1LoopRestoration {
    pub FrameRestorationType: [StdVideoAV1FrameRestorationType; 3usize],
    pub LoopRestorationSize: [u16; 3usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StdVideoAV1GlobalMotion {
    pub GmType: [u8; 8usize],
    pub gm_params: [[i32; 6usize]; 8usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StdVideoAV1FilmGrainFlags {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StdVideoAV1FilmGrain {
    pub flags: StdVideoAV1FilmGrainFlags,
    pub grain_scaling_minus_8: u8,
    pub ar_coeff_lag: u8,
    pub ar_coeff_shift_minus_6: u8,
    pub grain_scale_shift: u8,
    pub grain_seed: u16,
    pub film_grain_params_ref_idx: u8,
    pub num_y_points: u8,
    pub point_y_value: [u8; 14usize],
    pub point_y_scaling: [u8; 14usize],
    pub num_cb_points: u8,
    pub point_cb_value: [u8; 10usize],
    pub point_cb_scaling: [u8; 10usize],
    pub num_cr_points: u8,
    pub point_cr_value: [u8; 10usize],
    pub point_cr_scaling: [u8; 10usize],
    pub ar_coeffs_y_plus_128: [i8; 24usize],
    pub ar_coeffs_cb_plus_128: [i8; 25usize],
    pub ar_coeffs_cr_plus_128: [i8; 25usize],
    pub cb_mult: u8,
    pub cb_luma_mult: u8,
    pub cb_offset: u16,
    pub cr_mult: u8,
    pub cr_luma_mult: u8,
    pub cr_offset: u16,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct StdVideoAV1SequenceHeaderFlags {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StdVideoAV1SequenceHeader {
    pub flags: StdVideoAV1SequenceHeaderFlags,
    pub seq_profile: StdVideoAV1Profile,
    pub frame_width_bits_minus_1: u8,
    pub frame_height_bits_minus_1: u8,
    pub max_frame_width_minus_1: u16,
    pub max_frame_height_minus_1: u16,
    pub delta_frame_id_length_minus_2: u8,
    pub additional_frame_id_length_minus_1: u8,
    pub order_hint_bits_minus_1: u8,
    pub seq_force_integer_mv: u8,
    pub seq_force_screen_content_tools: u8,
    pub reserved1: [u8; 5usize],
    pub pColorConfig: *const StdVideoAV1ColorConfig,
    pub pTimingInfo: *const StdVideoAV1TimingInfo,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct StdVideoDecodeAV1PictureInfoFlags {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StdVideoDecodeAV1PictureInfo {
    pub flags: StdVideoDecodeAV1PictureInfoFlags,
    pub frame_type: StdVideoAV1FrameType,
    pub current_frame_id: u32,
    pub OrderHint: u8,
    pub primary_ref_frame: u8,
    pub refresh_frame_flags: u8,
    pub reserved1: u8,
    pub interpolation_filter: StdVideoAV1InterpolationFilter,
    pub TxMode: StdVideoAV1TxMode,
    pub delta_q_res: u8,
    pub delta_lf_res: u8,
    pub SkipModeFrame: [u8; 2usize],
    pub coded_denom: u8,
    pub reserved2: [u8; 3usize],
    pub OrderHints: [u8; 8usize],
    pub expectedFrameId: [u32; 8usize],
    pub pTileInfo: *const StdVideoAV1TileInfo,
    pub pQuantization: *const StdVideoAV1Quantization,
    pub pSegmentation: *const StdVideoAV1Segmentation,
    pub pLoopFilter: *const StdVideoAV1LoopFilter,
    pub pCDEF: *const StdVideoAV1CDEF,
    pub pLoopRestoration: *const StdVideoAV1LoopRestoration,
    pub pGlobalMotion: *const StdVideoAV1GlobalMotion,
    pub pFilmGrain: *const StdVideoAV1FilmGrain,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StdVideoDecodeAV1ReferenceInfoFlags {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StdVideoDecodeAV1ReferenceInfo {
    pub flags: StdVideoDecodeAV1ReferenceInfoFlags,
    pub frame_type: u8,
    pub RefFrameSignBias: u8,
    pub OrderHint: u8,
    pub SavedOrderHints: [u8; 8usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVideoDecodeAV1ProfileInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub stdProfile: StdVideoAV1Profile,
    pub filmGrainSupport: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVideoDecodeAV1CapabilitiesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub maxLevel: StdVideoAV1Level,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVideoDecodeAV1SessionParametersCreateInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub pStdSequenceHeader: *const StdVideoAV1SequenceHeader,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVideoDecodeAV1PictureInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub pStdPictureInfo: *const StdVideoDecodeAV1PictureInfo,
    pub referenceNameSlotIndices: [i32; 7usize],
    pub frameHeaderOffset: u32,
    pub tileCount: u32,
    pub pTileOffsets: *const u32,
    pub pTileSizes: *const u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVideoDecodeAV1DpbSlotInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub pStdReferenceInfo: *const StdVideoDecodeAV1ReferenceInfo,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StdVideoEncodeAV1DecoderModelInfo {
    pub buffer_delay_length_minus_1: u8,
    pub buffer_removal_time_length_minus_1: u8,
    pub frame_presentation_time_length_minus_1: u8,
    pub reserved1: u8,
    pub num_units_in_decoding_tick: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StdVideoEncodeAV1ExtensionHeader {
    pub temporal_id: u8,
    pub spatial_id: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StdVideoEncodeAV1OperatingPointInfoFlags {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StdVideoEncodeAV1OperatingPointInfo {
    pub flags: StdVideoEncodeAV1OperatingPointInfoFlags,
    pub operating_point_idc: u16,
    pub seq_level_idx: u8,
    pub seq_tier: u8,
    pub decoder_buffer_delay: u32,
    pub encoder_buffer_delay: u32,
    pub initial_display_delay_minus_1: u8,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct StdVideoEncodeAV1PictureInfoFlags {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StdVideoEncodeAV1PictureInfo {
    pub flags: StdVideoEncodeAV1PictureInfoFlags,
    pub frame_type: StdVideoAV1FrameType,
    pub frame_presentation_time: u32,
    pub current_frame_id: u32,
    pub order_hint: u8,
    pub primary_ref_frame: u8,
    pub refresh_frame_flags: u8,
    pub coded_denom: u8,
    pub render_width_minus_1: u16,
    pub render_height_minus_1: u16,
    pub interpolation_filter: StdVideoAV1InterpolationFilter,
    pub TxMode: StdVideoAV1TxMode,
    pub delta_q_res: u8,
    pub delta_lf_res: u8,
    pub ref_order_hint: [u8; 8usize],
    pub ref_frame_idx: [i8; 7usize],
    pub reserved1: [u8; 3usize],
    pub delta_frame_id_minus_1: [u32; 7usize],
    pub pTileInfo: *const StdVideoAV1TileInfo,
    pub pQuantization: *const StdVideoAV1Quantization,
    pub pSegmentation: *const StdVideoAV1Segmentation,
    pub pLoopFilter: *const StdVideoAV1LoopFilter,
    pub pCDEF: *const StdVideoAV1CDEF,
    pub pLoopRestoration: *const StdVideoAV1LoopRestoration,
    pub pGlobalMotion: *const StdVideoAV1GlobalMotion,
    pub pExtensionHeader: *const StdVideoEncodeAV1ExtensionHeader,
    pub pBufferRemovalTimes: *const u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StdVideoEncodeAV1ReferenceInfoFlags {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StdVideoEncodeAV1ReferenceInfo {
    pub flags: StdVideoEncodeAV1ReferenceInfoFlags,
    pub RefFrameId: u32,
    pub frame_type: StdVideoAV1FrameType,
    pub OrderHint: u8,
    pub reserved1: [u8; 3usize],
    pub pExtensionHeader: *const StdVideoEncodeAV1ExtensionHeader,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceVideoEncodeAV1FeaturesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub videoEncodeAV1: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVideoEncodeAV1CapabilitiesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub flags: VkVideoEncodeAV1CapabilityFlagsKHR,
    pub maxLevel: StdVideoAV1Level,
    pub codedPictureAlignment: VkExtent2D,
    pub maxTiles: VkExtent2D,
    pub minTileSize: VkExtent2D,
    pub maxTileSize: VkExtent2D,
    pub superblockSizes: VkVideoEncodeAV1SuperblockSizeFlagsKHR,
    pub maxSingleReferenceCount: u32,
    pub singleReferenceNameMask: u32,
    pub maxUnidirectionalCompoundReferenceCount: u32,
    pub maxUnidirectionalCompoundGroup1ReferenceCount: u32,
    pub unidirectionalCompoundReferenceNameMask: u32,
    pub maxBidirectionalCompoundReferenceCount: u32,
    pub maxBidirectionalCompoundGroup1ReferenceCount: u32,
    pub maxBidirectionalCompoundGroup2ReferenceCount: u32,
    pub bidirectionalCompoundReferenceNameMask: u32,
    pub maxTemporalLayerCount: u32,
    pub maxSpatialLayerCount: u32,
    pub maxOperatingPoints: u32,
    pub minQIndex: u32,
    pub maxQIndex: u32,
    pub prefersGopRemainingFrames: VkBool32,
    pub requiresGopRemainingFrames: VkBool32,
    pub stdSyntaxFlags: VkVideoEncodeAV1StdFlagsKHR,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVideoEncodeAV1QIndexKHR {
    pub intraQIndex: u32,
    pub predictiveQIndex: u32,
    pub bipredictiveQIndex: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVideoEncodeAV1QualityLevelPropertiesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub preferredRateControlFlags: VkVideoEncodeAV1RateControlFlagsKHR,
    pub preferredGopFrameCount: u32,
    pub preferredKeyFramePeriod: u32,
    pub preferredConsecutiveBipredictiveFrameCount: u32,
    pub preferredTemporalLayerCount: u32,
    pub preferredConstantQIndex: VkVideoEncodeAV1QIndexKHR,
    pub preferredMaxSingleReferenceCount: u32,
    pub preferredSingleReferenceNameMask: u32,
    pub preferredMaxUnidirectionalCompoundReferenceCount: u32,
    pub preferredMaxUnidirectionalCompoundGroup1ReferenceCount: u32,
    pub preferredUnidirectionalCompoundReferenceNameMask: u32,
    pub preferredMaxBidirectionalCompoundReferenceCount: u32,
    pub preferredMaxBidirectionalCompoundGroup1ReferenceCount: u32,
    pub preferredMaxBidirectionalCompoundGroup2ReferenceCount: u32,
    pub preferredBidirectionalCompoundReferenceNameMask: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVideoEncodeAV1SessionCreateInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub useMaxLevel: VkBool32,
    pub maxLevel: StdVideoAV1Level,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVideoEncodeAV1SessionParametersCreateInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub pStdSequenceHeader: *const StdVideoAV1SequenceHeader,
    pub pStdDecoderModelInfo: *const StdVideoEncodeAV1DecoderModelInfo,
    pub stdOperatingPointCount: u32,
    pub pStdOperatingPoints: *const StdVideoEncodeAV1OperatingPointInfo,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVideoEncodeAV1PictureInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub predictionMode: VkVideoEncodeAV1PredictionModeKHR,
    pub rateControlGroup: VkVideoEncodeAV1RateControlGroupKHR,
    pub constantQIndex: u32,
    pub pStdPictureInfo: *const StdVideoEncodeAV1PictureInfo,
    pub referenceNameSlotIndices: [i32; 7usize],
    pub primaryReferenceCdfOnly: VkBool32,
    pub generateObuExtensionHeader: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVideoEncodeAV1DpbSlotInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub pStdReferenceInfo: *const StdVideoEncodeAV1ReferenceInfo,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVideoEncodeAV1ProfileInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub stdProfile: StdVideoAV1Profile,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVideoEncodeAV1FrameSizeKHR {
    pub intraFrameSize: u32,
    pub predictiveFrameSize: u32,
    pub bipredictiveFrameSize: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVideoEncodeAV1GopRemainingFrameInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub useGopRemainingFrames: VkBool32,
    pub gopRemainingIntra: u32,
    pub gopRemainingPredictive: u32,
    pub gopRemainingBipredictive: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVideoEncodeAV1RateControlInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: VkVideoEncodeAV1RateControlFlagsKHR,
    pub gopFrameCount: u32,
    pub keyFramePeriod: u32,
    pub consecutiveBipredictiveFrameCount: u32,
    pub temporalLayerCount: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVideoEncodeAV1RateControlLayerInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub useMinQIndex: VkBool32,
    pub minQIndex: VkVideoEncodeAV1QIndexKHR,
    pub useMaxQIndex: VkBool32,
    pub maxQIndex: VkVideoEncodeAV1QIndexKHR,
    pub useMaxFrameSize: VkBool32,
    pub maxFrameSize: VkVideoEncodeAV1FrameSizeKHR,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceVideoMaintenance1FeaturesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub videoMaintenance1: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVideoInlineQueryInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub queryPool: VkQueryPool,
    pub firstQuery: u32,
    pub queryCount: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkCalibratedTimestampInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub timeDomain: VkTimeDomainKHR,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkSetDescriptorBufferOffsetsInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub stageFlags: VkShaderStageFlags,
    pub layout: VkPipelineLayout,
    pub firstSet: u32,
    pub setCount: u32,
    pub pBufferIndices: *const u32,
    pub pOffsets: *const VkDeviceSize,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkBindDescriptorBufferEmbeddedSamplersInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub stageFlags: VkShaderStageFlags,
    pub layout: VkPipelineLayout,
    pub set: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVideoEncodeQuantizationMapCapabilitiesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub maxQuantizationMapExtent: VkExtent2D,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVideoFormatQuantizationMapPropertiesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub quantizationMapTexelSize: VkExtent2D,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVideoEncodeQuantizationMapInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub quantizationMap: VkImageView,
    pub quantizationMapExtent: VkExtent2D,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVideoEncodeQuantizationMapSessionParametersCreateInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub quantizationMapTexelSize: VkExtent2D,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceVideoEncodeQuantizationMapFeaturesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub videoEncodeQuantizationMap: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVideoEncodeH264QuantizationMapCapabilitiesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub minQpDelta: i32,
    pub maxQpDelta: i32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVideoEncodeH265QuantizationMapCapabilitiesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub minQpDelta: i32,
    pub maxQpDelta: i32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVideoFormatH265QuantizationMapPropertiesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub compatibleCtbSizes: VkVideoEncodeH265CtbSizeFlagsKHR,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVideoEncodeAV1QuantizationMapCapabilitiesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub minQIndexDelta: i32,
    pub maxQIndexDelta: i32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVideoFormatAV1QuantizationMapPropertiesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub compatibleSuperblockSizes: VkVideoEncodeAV1SuperblockSizeFlagsKHR,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub shaderRelaxedExtendedInstruction: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceMaintenance7FeaturesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub maintenance7: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceMaintenance7PropertiesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub robustFragmentShadingRateAttachmentAccess: VkBool32,
    pub separateDepthStencilAttachmentAccess: VkBool32,
    pub maxDescriptorSetTotalUniformBuffersDynamic: u32,
    pub maxDescriptorSetTotalStorageBuffersDynamic: u32,
    pub maxDescriptorSetTotalBuffersDynamic: u32,
    pub maxDescriptorSetUpdateAfterBindTotalUniformBuffersDynamic: u32,
    pub maxDescriptorSetUpdateAfterBindTotalStorageBuffersDynamic: u32,
    pub maxDescriptorSetUpdateAfterBindTotalBuffersDynamic: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceLayeredApiPropertiesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub vendorID: u32,
    pub deviceID: u32,
    pub layeredAPI: VkPhysicalDeviceLayeredApiKHR,
    pub deviceName: [::core::ffi::c_char; 256usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceLayeredApiPropertiesListKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub layeredApiCount: u32,
    pub pLayeredApis: *mut VkPhysicalDeviceLayeredApiPropertiesKHR,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceLayeredApiVulkanPropertiesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub properties: VkPhysicalDeviceProperties2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceMaintenance8FeaturesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub maintenance8: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkMemoryBarrierAccessFlags3KHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub srcAccessMask3: VkAccessFlags3KHR,
    pub dstAccessMask3: VkAccessFlags3KHR,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceVideoMaintenance2FeaturesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub videoMaintenance2: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVideoDecodeH264InlineSessionParametersInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub pStdSPS: *const StdVideoH264SequenceParameterSet,
    pub pStdPPS: *const StdVideoH264PictureParameterSet,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVideoDecodeH265InlineSessionParametersInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub pStdVPS: *const StdVideoH265VideoParameterSet,
    pub pStdSPS: *const StdVideoH265SequenceParameterSet,
    pub pStdPPS: *const StdVideoH265PictureParameterSet,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVideoDecodeAV1InlineSessionParametersInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub pStdSequenceHeader: *const StdVideoAV1SequenceHeader,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceDepthClampZeroOneFeaturesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub depthClampZeroOne: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceRobustness2FeaturesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub robustBufferAccess2: VkBool32,
    pub robustImageAccess2: VkBool32,
    pub nullDescriptor: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceRobustness2PropertiesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub robustStorageBufferAccessSizeAlignment: VkDeviceSize,
    pub robustUniformBufferAccessSizeAlignment: VkDeviceSize,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDebugReportCallbackCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: VkDebugReportFlagsEXT,
    pub pfnCallback: PFN_vkDebugReportCallbackEXT,
    pub pUserData: *mut ::core::ffi::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPipelineRasterizationStateRasterizationOrderAMD {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub rasterizationOrder: VkRasterizationOrderAMD,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDebugMarkerObjectNameInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub objectType: VkDebugReportObjectTypeEXT,
    pub object: u64,
    pub pObjectName: *const ::core::ffi::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDebugMarkerObjectTagInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub objectType: VkDebugReportObjectTypeEXT,
    pub object: u64,
    pub tagName: u64,
    pub tagSize: usize,
    pub pTag: *const ::core::ffi::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDebugMarkerMarkerInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub pMarkerName: *const ::core::ffi::c_char,
    pub color: [f32; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDedicatedAllocationImageCreateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub dedicatedAllocation: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDedicatedAllocationBufferCreateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub dedicatedAllocation: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDedicatedAllocationMemoryAllocateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub image: VkImage,
    pub buffer: VkBuffer,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceTransformFeedbackFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub transformFeedback: VkBool32,
    pub geometryStreams: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceTransformFeedbackPropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub maxTransformFeedbackStreams: u32,
    pub maxTransformFeedbackBuffers: u32,
    pub maxTransformFeedbackBufferSize: VkDeviceSize,
    pub maxTransformFeedbackStreamDataSize: u32,
    pub maxTransformFeedbackBufferDataSize: u32,
    pub maxTransformFeedbackBufferDataStride: u32,
    pub transformFeedbackQueries: VkBool32,
    pub transformFeedbackStreamsLinesTriangles: VkBool32,
    pub transformFeedbackRasterizationStreamSelect: VkBool32,
    pub transformFeedbackDraw: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPipelineRasterizationStateStreamCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: VkPipelineRasterizationStateStreamCreateFlagsEXT,
    pub rasterizationStream: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkCuModuleCreateInfoNVX {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub dataSize: usize,
    pub pData: *const ::core::ffi::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkCuModuleTexturingModeCreateInfoNVX {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub use64bitTexturing: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkCuFunctionCreateInfoNVX {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub module: VkCuModuleNVX,
    pub pName: *const ::core::ffi::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkCuLaunchInfoNVX {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub function: VkCuFunctionNVX,
    pub gridDimX: u32,
    pub gridDimY: u32,
    pub gridDimZ: u32,
    pub blockDimX: u32,
    pub blockDimY: u32,
    pub blockDimZ: u32,
    pub sharedMemBytes: u32,
    pub paramCount: usize,
    pub pParams: *const *const ::core::ffi::c_void,
    pub extraCount: usize,
    pub pExtras: *const *const ::core::ffi::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkImageViewHandleInfoNVX {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub imageView: VkImageView,
    pub descriptorType: VkDescriptorType,
    pub sampler: VkSampler,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkImageViewAddressPropertiesNVX {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub deviceAddress: VkDeviceAddress,
    pub size: VkDeviceSize,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkTextureLODGatherFormatPropertiesAMD {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub supportsTextureGatherLODBiasAMD: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkShaderResourceUsageAMD {
    pub numUsedVgprs: u32,
    pub numUsedSgprs: u32,
    pub ldsSizePerLocalWorkGroup: u32,
    pub ldsUsageSizeInBytes: usize,
    pub scratchMemUsageInBytes: usize,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkShaderStatisticsInfoAMD {
    pub shaderStageMask: VkShaderStageFlags,
    pub resourceUsage: VkShaderResourceUsageAMD,
    pub numPhysicalVgprs: u32,
    pub numPhysicalSgprs: u32,
    pub numAvailableVgprs: u32,
    pub numAvailableSgprs: u32,
    pub computeWorkGroupSize: [u32; 3usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceCornerSampledImageFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub cornerSampledImage: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkExternalImageFormatPropertiesNV {
    pub imageFormatProperties: VkImageFormatProperties,
    pub externalMemoryFeatures: VkExternalMemoryFeatureFlagsNV,
    pub exportFromImportedHandleTypes: VkExternalMemoryHandleTypeFlagsNV,
    pub compatibleHandleTypes: VkExternalMemoryHandleTypeFlagsNV,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkExternalMemoryImageCreateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub handleTypes: VkExternalMemoryHandleTypeFlagsNV,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkExportMemoryAllocateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub handleTypes: VkExternalMemoryHandleTypeFlagsNV,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkValidationFlagsEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub disabledValidationCheckCount: u32,
    pub pDisabledValidationChecks: *const VkValidationCheckEXT,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkImageViewASTCDecodeModeEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub decodeMode: VkFormat,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceASTCDecodeFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub decodeModeSharedExponent: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkConditionalRenderingBeginInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub buffer: VkBuffer,
    pub offset: VkDeviceSize,
    pub flags: VkConditionalRenderingFlagsEXT,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceConditionalRenderingFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub conditionalRendering: VkBool32,
    pub inheritedConditionalRendering: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkCommandBufferInheritanceConditionalRenderingInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub conditionalRenderingEnable: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkViewportWScalingNV {
    pub xcoeff: f32,
    pub ycoeff: f32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPipelineViewportWScalingStateCreateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub viewportWScalingEnable: VkBool32,
    pub viewportCount: u32,
    pub pViewportWScalings: *const VkViewportWScalingNV,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkSurfaceCapabilities2EXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub minImageCount: u32,
    pub maxImageCount: u32,
    pub currentExtent: VkExtent2D,
    pub minImageExtent: VkExtent2D,
    pub maxImageExtent: VkExtent2D,
    pub maxImageArrayLayers: u32,
    pub supportedTransforms: VkSurfaceTransformFlagsKHR,
    pub currentTransform: VkSurfaceTransformFlagBitsKHR,
    pub supportedCompositeAlpha: VkCompositeAlphaFlagsKHR,
    pub supportedUsageFlags: VkImageUsageFlags,
    pub supportedSurfaceCounters: VkSurfaceCounterFlagsEXT,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDisplayPowerInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub powerState: VkDisplayPowerStateEXT,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDeviceEventInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub deviceEvent: VkDeviceEventTypeEXT,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDisplayEventInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub displayEvent: VkDisplayEventTypeEXT,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkSwapchainCounterCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub surfaceCounters: VkSurfaceCounterFlagsEXT,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkRefreshCycleDurationGOOGLE {
    pub refreshDuration: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPastPresentationTimingGOOGLE {
    pub presentID: u32,
    pub desiredPresentTime: u64,
    pub actualPresentTime: u64,
    pub earliestPresentTime: u64,
    pub presentMargin: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPresentTimeGOOGLE {
    pub presentID: u32,
    pub desiredPresentTime: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPresentTimesInfoGOOGLE {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub swapchainCount: u32,
    pub pTimes: *const VkPresentTimeGOOGLE,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub perViewPositionAllComponents: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkMultiviewPerViewAttributesInfoNVX {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub perViewAttributes: VkBool32,
    pub perViewAttributesPositionXOnly: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkViewportSwizzleNV {
    pub x: VkViewportCoordinateSwizzleNV,
    pub y: VkViewportCoordinateSwizzleNV,
    pub z: VkViewportCoordinateSwizzleNV,
    pub w: VkViewportCoordinateSwizzleNV,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPipelineViewportSwizzleStateCreateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: VkPipelineViewportSwizzleStateCreateFlagsNV,
    pub viewportCount: u32,
    pub pViewportSwizzles: *const VkViewportSwizzleNV,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceDiscardRectanglePropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub maxDiscardRectangles: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPipelineDiscardRectangleStateCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: VkPipelineDiscardRectangleStateCreateFlagsEXT,
    pub discardRectangleMode: VkDiscardRectangleModeEXT,
    pub discardRectangleCount: u32,
    pub pDiscardRectangles: *const VkRect2D,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceConservativeRasterizationPropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub primitiveOverestimationSize: f32,
    pub maxExtraPrimitiveOverestimationSize: f32,
    pub extraPrimitiveOverestimationSizeGranularity: f32,
    pub primitiveUnderestimation: VkBool32,
    pub conservativePointAndLineRasterization: VkBool32,
    pub degenerateTrianglesRasterized: VkBool32,
    pub degenerateLinesRasterized: VkBool32,
    pub fullyCoveredFragmentShaderInputVariable: VkBool32,
    pub conservativeRasterizationPostDepthCoverage: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPipelineRasterizationConservativeStateCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: VkPipelineRasterizationConservativeStateCreateFlagsEXT,
    pub conservativeRasterizationMode: VkConservativeRasterizationModeEXT,
    pub extraPrimitiveOverestimationSize: f32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceDepthClipEnableFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub depthClipEnable: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPipelineRasterizationDepthClipStateCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: VkPipelineRasterizationDepthClipStateCreateFlagsEXT,
    pub depthClipEnable: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkXYColorEXT {
    pub x: f32,
    pub y: f32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkHdrMetadataEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub displayPrimaryRed: VkXYColorEXT,
    pub displayPrimaryGreen: VkXYColorEXT,
    pub displayPrimaryBlue: VkXYColorEXT,
    pub whitePoint: VkXYColorEXT,
    pub maxLuminance: f32,
    pub minLuminance: f32,
    pub maxContentLightLevel: f32,
    pub maxFrameAverageLightLevel: f32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub relaxedLineRasterization: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDebugUtilsLabelEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub pLabelName: *const ::core::ffi::c_char,
    pub color: [f32; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDebugUtilsObjectNameInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub objectType: VkObjectType,
    pub objectHandle: u64,
    pub pObjectName: *const ::core::ffi::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDebugUtilsMessengerCallbackDataEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: VkDebugUtilsMessengerCallbackDataFlagsEXT,
    pub pMessageIdName: *const ::core::ffi::c_char,
    pub messageIdNumber: i32,
    pub pMessage: *const ::core::ffi::c_char,
    pub queueLabelCount: u32,
    pub pQueueLabels: *const VkDebugUtilsLabelEXT,
    pub cmdBufLabelCount: u32,
    pub pCmdBufLabels: *const VkDebugUtilsLabelEXT,
    pub objectCount: u32,
    pub pObjects: *const VkDebugUtilsObjectNameInfoEXT,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDebugUtilsMessengerCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: VkDebugUtilsMessengerCreateFlagsEXT,
    pub messageSeverity: VkDebugUtilsMessageSeverityFlagsEXT,
    pub messageType: VkDebugUtilsMessageTypeFlagsEXT,
    pub pfnUserCallback: PFN_vkDebugUtilsMessengerCallbackEXT,
    pub pUserData: *mut ::core::ffi::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDebugUtilsObjectTagInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub objectType: VkObjectType,
    pub objectHandle: u64,
    pub tagName: u64,
    pub tagSize: usize,
    pub pTag: *const ::core::ffi::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkAttachmentSampleCountInfoAMD {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub colorAttachmentCount: u32,
    pub pColorAttachmentSamples: *const VkSampleCountFlagBits,
    pub depthStencilAttachmentSamples: VkSampleCountFlagBits,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkSampleLocationEXT {
    pub x: f32,
    pub y: f32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkSampleLocationsInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub sampleLocationsPerPixel: VkSampleCountFlagBits,
    pub sampleLocationGridSize: VkExtent2D,
    pub sampleLocationsCount: u32,
    pub pSampleLocations: *const VkSampleLocationEXT,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkAttachmentSampleLocationsEXT {
    pub attachmentIndex: u32,
    pub sampleLocationsInfo: VkSampleLocationsInfoEXT,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkSubpassSampleLocationsEXT {
    pub subpassIndex: u32,
    pub sampleLocationsInfo: VkSampleLocationsInfoEXT,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkRenderPassSampleLocationsBeginInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub attachmentInitialSampleLocationsCount: u32,
    pub pAttachmentInitialSampleLocations: *const VkAttachmentSampleLocationsEXT,
    pub postSubpassSampleLocationsCount: u32,
    pub pPostSubpassSampleLocations: *const VkSubpassSampleLocationsEXT,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPipelineSampleLocationsStateCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub sampleLocationsEnable: VkBool32,
    pub sampleLocationsInfo: VkSampleLocationsInfoEXT,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceSampleLocationsPropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub sampleLocationSampleCounts: VkSampleCountFlags,
    pub maxSampleLocationGridSize: VkExtent2D,
    pub sampleLocationCoordinateRange: [f32; 2usize],
    pub sampleLocationSubPixelBits: u32,
    pub variableSampleLocations: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkMultisamplePropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub maxSampleLocationGridSize: VkExtent2D,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub advancedBlendCoherentOperations: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub advancedBlendMaxColorAttachments: u32,
    pub advancedBlendIndependentBlend: VkBool32,
    pub advancedBlendNonPremultipliedSrcColor: VkBool32,
    pub advancedBlendNonPremultipliedDstColor: VkBool32,
    pub advancedBlendCorrelatedOverlap: VkBool32,
    pub advancedBlendAllOperations: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPipelineColorBlendAdvancedStateCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub srcPremultiplied: VkBool32,
    pub dstPremultiplied: VkBool32,
    pub blendOverlap: VkBlendOverlapEXT,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPipelineCoverageToColorStateCreateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: VkPipelineCoverageToColorStateCreateFlagsNV,
    pub coverageToColorEnable: VkBool32,
    pub coverageToColorLocation: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPipelineCoverageModulationStateCreateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: VkPipelineCoverageModulationStateCreateFlagsNV,
    pub coverageModulationMode: VkCoverageModulationModeNV,
    pub coverageModulationTableEnable: VkBool32,
    pub coverageModulationTableCount: u32,
    pub pCoverageModulationTable: *const f32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceShaderSMBuiltinsPropertiesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub shaderSMCount: u32,
    pub shaderWarpsPerSM: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceShaderSMBuiltinsFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub shaderSMBuiltins: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDrmFormatModifierPropertiesEXT {
    pub drmFormatModifier: u64,
    pub drmFormatModifierPlaneCount: u32,
    pub drmFormatModifierTilingFeatures: VkFormatFeatureFlags,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDrmFormatModifierPropertiesListEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub drmFormatModifierCount: u32,
    pub pDrmFormatModifierProperties: *mut VkDrmFormatModifierPropertiesEXT,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceImageDrmFormatModifierInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub drmFormatModifier: u64,
    pub sharingMode: VkSharingMode,
    pub queueFamilyIndexCount: u32,
    pub pQueueFamilyIndices: *const u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkImageDrmFormatModifierListCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub drmFormatModifierCount: u32,
    pub pDrmFormatModifiers: *const u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkImageDrmFormatModifierExplicitCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub drmFormatModifier: u64,
    pub drmFormatModifierPlaneCount: u32,
    pub pPlaneLayouts: *const VkSubresourceLayout,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkImageDrmFormatModifierPropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub drmFormatModifier: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDrmFormatModifierProperties2EXT {
    pub drmFormatModifier: u64,
    pub drmFormatModifierPlaneCount: u32,
    pub drmFormatModifierTilingFeatures: VkFormatFeatureFlags2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDrmFormatModifierPropertiesList2EXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub drmFormatModifierCount: u32,
    pub pDrmFormatModifierProperties: *mut VkDrmFormatModifierProperties2EXT,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkValidationCacheCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: VkValidationCacheCreateFlagsEXT,
    pub initialDataSize: usize,
    pub pInitialData: *const ::core::ffi::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkShaderModuleValidationCacheCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub validationCache: VkValidationCacheEXT,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkShadingRatePaletteNV {
    pub shadingRatePaletteEntryCount: u32,
    pub pShadingRatePaletteEntries: *const VkShadingRatePaletteEntryNV,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPipelineViewportShadingRateImageStateCreateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub shadingRateImageEnable: VkBool32,
    pub viewportCount: u32,
    pub pShadingRatePalettes: *const VkShadingRatePaletteNV,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceShadingRateImageFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub shadingRateImage: VkBool32,
    pub shadingRateCoarseSampleOrder: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceShadingRateImagePropertiesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub shadingRateTexelSize: VkExtent2D,
    pub shadingRatePaletteSize: u32,
    pub shadingRateMaxCoarseSamples: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkCoarseSampleLocationNV {
    pub pixelX: u32,
    pub pixelY: u32,
    pub sample: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkCoarseSampleOrderCustomNV {
    pub shadingRate: VkShadingRatePaletteEntryNV,
    pub sampleCount: u32,
    pub sampleLocationCount: u32,
    pub pSampleLocations: *const VkCoarseSampleLocationNV,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPipelineViewportCoarseSampleOrderStateCreateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub sampleOrderType: VkCoarseSampleOrderTypeNV,
    pub customSampleOrderCount: u32,
    pub pCustomSampleOrders: *const VkCoarseSampleOrderCustomNV,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkRayTracingShaderGroupCreateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub type_: VkRayTracingShaderGroupTypeKHR,
    pub generalShader: u32,
    pub closestHitShader: u32,
    pub anyHitShader: u32,
    pub intersectionShader: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkRayTracingPipelineCreateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: VkPipelineCreateFlags,
    pub stageCount: u32,
    pub pStages: *const VkPipelineShaderStageCreateInfo,
    pub groupCount: u32,
    pub pGroups: *const VkRayTracingShaderGroupCreateInfoNV,
    pub maxRecursionDepth: u32,
    pub layout: VkPipelineLayout,
    pub basePipelineHandle: VkPipeline,
    pub basePipelineIndex: i32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkGeometryTrianglesNV {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub vertexData: VkBuffer,
    pub vertexOffset: VkDeviceSize,
    pub vertexCount: u32,
    pub vertexStride: VkDeviceSize,
    pub vertexFormat: VkFormat,
    pub indexData: VkBuffer,
    pub indexOffset: VkDeviceSize,
    pub indexCount: u32,
    pub indexType: VkIndexType,
    pub transformData: VkBuffer,
    pub transformOffset: VkDeviceSize,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkGeometryAABBNV {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub aabbData: VkBuffer,
    pub numAABBs: u32,
    pub stride: u32,
    pub offset: VkDeviceSize,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkGeometryDataNV {
    pub triangles: VkGeometryTrianglesNV,
    pub aabbs: VkGeometryAABBNV,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkGeometryNV {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub geometryType: VkGeometryTypeKHR,
    pub geometry: VkGeometryDataNV,
    pub flags: VkGeometryFlagsKHR,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkAccelerationStructureInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub type_: VkAccelerationStructureTypeNV,
    pub flags: VkBuildAccelerationStructureFlagsNV,
    pub instanceCount: u32,
    pub geometryCount: u32,
    pub pGeometries: *const VkGeometryNV,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkAccelerationStructureCreateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub compactedSize: VkDeviceSize,
    pub info: VkAccelerationStructureInfoNV,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkBindAccelerationStructureMemoryInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub accelerationStructure: VkAccelerationStructureNV,
    pub memory: VkDeviceMemory,
    pub memoryOffset: VkDeviceSize,
    pub deviceIndexCount: u32,
    pub pDeviceIndices: *const u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkWriteDescriptorSetAccelerationStructureNV {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub accelerationStructureCount: u32,
    pub pAccelerationStructures: *const VkAccelerationStructureNV,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkAccelerationStructureMemoryRequirementsInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub type_: VkAccelerationStructureMemoryRequirementsTypeNV,
    pub accelerationStructure: VkAccelerationStructureNV,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceRayTracingPropertiesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub shaderGroupHandleSize: u32,
    pub maxRecursionDepth: u32,
    pub maxShaderGroupStride: u32,
    pub shaderGroupBaseAlignment: u32,
    pub maxGeometryCount: u64,
    pub maxInstanceCount: u64,
    pub maxTriangleCount: u64,
    pub maxDescriptorSetAccelerationStructures: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkTransformMatrixKHR {
    pub matrix: [[f32; 4usize]; 3usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkAabbPositionsKHR {
    pub minX: f32,
    pub minY: f32,
    pub minZ: f32,
    pub maxX: f32,
    pub maxY: f32,
    pub maxZ: f32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkAccelerationStructureInstanceKHR {
    pub transform: VkTransformMatrixKHR,
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
    pub accelerationStructureReference: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub representativeFragmentTest: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPipelineRepresentativeFragmentTestStateCreateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub representativeFragmentTestEnable: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceImageViewImageFormatInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub imageViewType: VkImageViewType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkFilterCubicImageViewImageFormatPropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub filterCubic: VkBool32,
    pub filterCubicMinmax: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkImportMemoryHostPointerInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub handleType: VkExternalMemoryHandleTypeFlagBits,
    pub pHostPointer: *mut ::core::ffi::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkMemoryHostPointerPropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub memoryTypeBits: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceExternalMemoryHostPropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub minImportedHostPointerAlignment: VkDeviceSize,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPipelineCompilerControlCreateInfoAMD {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub compilerControlFlags: VkPipelineCompilerControlFlagsAMD,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceShaderCorePropertiesAMD {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub shaderEngineCount: u32,
    pub shaderArraysPerEngineCount: u32,
    pub computeUnitsPerShaderArray: u32,
    pub simdPerComputeUnit: u32,
    pub wavefrontsPerSimd: u32,
    pub wavefrontSize: u32,
    pub sgprsPerSimd: u32,
    pub minSgprAllocation: u32,
    pub maxSgprAllocation: u32,
    pub sgprAllocationGranularity: u32,
    pub vgprsPerSimd: u32,
    pub minVgprAllocation: u32,
    pub maxVgprAllocation: u32,
    pub vgprAllocationGranularity: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDeviceMemoryOverallocationCreateInfoAMD {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub overallocationBehavior: VkMemoryOverallocationBehaviorAMD,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub maxVertexAttribDivisor: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceMeshShaderFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub taskShader: VkBool32,
    pub meshShader: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceMeshShaderPropertiesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub maxDrawMeshTasksCount: u32,
    pub maxTaskWorkGroupInvocations: u32,
    pub maxTaskWorkGroupSize: [u32; 3usize],
    pub maxTaskTotalMemorySize: u32,
    pub maxTaskOutputCount: u32,
    pub maxMeshWorkGroupInvocations: u32,
    pub maxMeshWorkGroupSize: [u32; 3usize],
    pub maxMeshTotalMemorySize: u32,
    pub maxMeshOutputVertices: u32,
    pub maxMeshOutputPrimitives: u32,
    pub maxMeshMultiviewViewCount: u32,
    pub meshOutputPerVertexGranularity: u32,
    pub meshOutputPerPrimitiveGranularity: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDrawMeshTasksIndirectCommandNV {
    pub taskCount: u32,
    pub firstTask: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceShaderImageFootprintFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub imageFootprint: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPipelineViewportExclusiveScissorStateCreateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub exclusiveScissorCount: u32,
    pub pExclusiveScissors: *const VkRect2D,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceExclusiveScissorFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub exclusiveScissor: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkQueueFamilyCheckpointPropertiesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub checkpointExecutionStageMask: VkPipelineStageFlags,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkCheckpointDataNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub stage: VkPipelineStageFlagBits,
    pub pCheckpointMarker: *mut ::core::ffi::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkQueueFamilyCheckpointProperties2NV {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub checkpointExecutionStageMask: VkPipelineStageFlags2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkCheckpointData2NV {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub stage: VkPipelineStageFlags2,
    pub pCheckpointMarker: *mut ::core::ffi::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub shaderIntegerFunctions2: VkBool32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPerformanceValueINTEL {
    pub type_: VkPerformanceValueTypeINTEL,
    pub data: VkPerformanceValueDataINTEL,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkInitializePerformanceApiInfoINTEL {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub pUserData: *mut ::core::ffi::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkQueryPoolPerformanceQueryCreateInfoINTEL {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub performanceCountersSampling: VkQueryPoolSamplingModeINTEL,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPerformanceMarkerInfoINTEL {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub marker: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPerformanceStreamMarkerInfoINTEL {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub marker: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPerformanceOverrideInfoINTEL {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub type_: VkPerformanceOverrideTypeINTEL,
    pub enable: VkBool32,
    pub parameter: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPerformanceConfigurationAcquireInfoINTEL {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub type_: VkPerformanceConfigurationTypeINTEL,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDevicePCIBusInfoPropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub pciDomain: u32,
    pub pciBus: u32,
    pub pciDevice: u32,
    pub pciFunction: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDisplayNativeHdrSurfaceCapabilitiesAMD {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub localDimmingSupport: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkSwapchainDisplayNativeHdrCreateInfoAMD {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub localDimmingEnable: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceFragmentDensityMapFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub fragmentDensityMap: VkBool32,
    pub fragmentDensityMapDynamic: VkBool32,
    pub fragmentDensityMapNonSubsampledImages: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceFragmentDensityMapPropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub minFragmentDensityTexelSize: VkExtent2D,
    pub maxFragmentDensityTexelSize: VkExtent2D,
    pub fragmentDensityInvocations: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkRenderPassFragmentDensityMapCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub fragmentDensityMapAttachment: VkAttachmentReference,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkRenderingFragmentDensityMapAttachmentInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub imageView: VkImageView,
    pub imageLayout: VkImageLayout,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceShaderCoreProperties2AMD {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub shaderCoreFeatures: VkShaderCorePropertiesFlagsAMD,
    pub activeComputeUnitCount: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceCoherentMemoryFeaturesAMD {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub deviceCoherentMemory: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub shaderImageInt64Atomics: VkBool32,
    pub sparseImageInt64Atomics: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceMemoryBudgetPropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub heapBudget: [VkDeviceSize; 16usize],
    pub heapUsage: [VkDeviceSize; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceMemoryPriorityFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub memoryPriority: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkMemoryPriorityAllocateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub priority: f32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub dedicatedAllocationImageAliasing: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceBufferDeviceAddressFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub bufferDeviceAddress: VkBool32,
    pub bufferDeviceAddressCaptureReplay: VkBool32,
    pub bufferDeviceAddressMultiDevice: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkBufferDeviceAddressCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub deviceAddress: VkDeviceAddress,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkValidationFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub enabledValidationFeatureCount: u32,
    pub pEnabledValidationFeatures: *const VkValidationFeatureEnableEXT,
    pub disabledValidationFeatureCount: u32,
    pub pDisabledValidationFeatures: *const VkValidationFeatureDisableEXT,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkCooperativeMatrixPropertiesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub MSize: u32,
    pub NSize: u32,
    pub KSize: u32,
    pub AType: VkComponentTypeNV,
    pub BType: VkComponentTypeNV,
    pub CType: VkComponentTypeNV,
    pub DType: VkComponentTypeNV,
    pub scope: VkScopeNV,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceCooperativeMatrixFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub cooperativeMatrix: VkBool32,
    pub cooperativeMatrixRobustBufferAccess: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceCooperativeMatrixPropertiesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub cooperativeMatrixSupportedStages: VkShaderStageFlags,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceCoverageReductionModeFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub coverageReductionMode: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPipelineCoverageReductionStateCreateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: VkPipelineCoverageReductionStateCreateFlagsNV,
    pub coverageReductionMode: VkCoverageReductionModeNV,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkFramebufferMixedSamplesCombinationNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub coverageReductionMode: VkCoverageReductionModeNV,
    pub rasterizationSamples: VkSampleCountFlagBits,
    pub depthStencilSamples: VkSampleCountFlags,
    pub colorSamples: VkSampleCountFlags,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub fragmentShaderSampleInterlock: VkBool32,
    pub fragmentShaderPixelInterlock: VkBool32,
    pub fragmentShaderShadingRateInterlock: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceYcbcrImageArraysFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub ycbcrImageArrays: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceProvokingVertexFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub provokingVertexLast: VkBool32,
    pub transformFeedbackPreservesProvokingVertex: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceProvokingVertexPropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub provokingVertexModePerPipeline: VkBool32,
    pub transformFeedbackPreservesTriangleFanProvokingVertex: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPipelineRasterizationProvokingVertexStateCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub provokingVertexMode: VkProvokingVertexModeEXT,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkHeadlessSurfaceCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: VkHeadlessSurfaceCreateFlagsEXT,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceShaderAtomicFloatFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub shaderBufferFloat32Atomics: VkBool32,
    pub shaderBufferFloat32AtomicAdd: VkBool32,
    pub shaderBufferFloat64Atomics: VkBool32,
    pub shaderBufferFloat64AtomicAdd: VkBool32,
    pub shaderSharedFloat32Atomics: VkBool32,
    pub shaderSharedFloat32AtomicAdd: VkBool32,
    pub shaderSharedFloat64Atomics: VkBool32,
    pub shaderSharedFloat64AtomicAdd: VkBool32,
    pub shaderImageFloat32Atomics: VkBool32,
    pub shaderImageFloat32AtomicAdd: VkBool32,
    pub sparseImageFloat32Atomics: VkBool32,
    pub sparseImageFloat32AtomicAdd: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceExtendedDynamicStateFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub extendedDynamicState: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceMapMemoryPlacedFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub memoryMapPlaced: VkBool32,
    pub memoryMapRangePlaced: VkBool32,
    pub memoryUnmapReserve: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceMapMemoryPlacedPropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub minPlacedMemoryMapAlignment: VkDeviceSize,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkMemoryMapPlacedInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub pPlacedAddress: *mut ::core::ffi::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub shaderBufferFloat16Atomics: VkBool32,
    pub shaderBufferFloat16AtomicAdd: VkBool32,
    pub shaderBufferFloat16AtomicMinMax: VkBool32,
    pub shaderBufferFloat32AtomicMinMax: VkBool32,
    pub shaderBufferFloat64AtomicMinMax: VkBool32,
    pub shaderSharedFloat16Atomics: VkBool32,
    pub shaderSharedFloat16AtomicAdd: VkBool32,
    pub shaderSharedFloat16AtomicMinMax: VkBool32,
    pub shaderSharedFloat32AtomicMinMax: VkBool32,
    pub shaderSharedFloat64AtomicMinMax: VkBool32,
    pub shaderImageFloat32AtomicMinMax: VkBool32,
    pub sparseImageFloat32AtomicMinMax: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkSurfacePresentModeEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub presentMode: VkPresentModeKHR,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkSurfacePresentScalingCapabilitiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub supportedPresentScaling: VkPresentScalingFlagsEXT,
    pub supportedPresentGravityX: VkPresentGravityFlagsEXT,
    pub supportedPresentGravityY: VkPresentGravityFlagsEXT,
    pub minScaledImageExtent: VkExtent2D,
    pub maxScaledImageExtent: VkExtent2D,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkSurfacePresentModeCompatibilityEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub presentModeCount: u32,
    pub pPresentModes: *mut VkPresentModeKHR,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub swapchainMaintenance1: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkSwapchainPresentFenceInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub swapchainCount: u32,
    pub pFences: *const VkFence,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkSwapchainPresentModesCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub presentModeCount: u32,
    pub pPresentModes: *const VkPresentModeKHR,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkSwapchainPresentModeInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub swapchainCount: u32,
    pub pPresentModes: *const VkPresentModeKHR,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkSwapchainPresentScalingCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub scalingBehavior: VkPresentScalingFlagsEXT,
    pub presentGravityX: VkPresentGravityFlagsEXT,
    pub presentGravityY: VkPresentGravityFlagsEXT,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkReleaseSwapchainImagesInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub swapchain: VkSwapchainKHR,
    pub imageIndexCount: u32,
    pub pImageIndices: *const u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub maxGraphicsShaderGroupCount: u32,
    pub maxIndirectSequenceCount: u32,
    pub maxIndirectCommandsTokenCount: u32,
    pub maxIndirectCommandsStreamCount: u32,
    pub maxIndirectCommandsTokenOffset: u32,
    pub maxIndirectCommandsStreamStride: u32,
    pub minSequencesCountBufferOffsetAlignment: u32,
    pub minSequencesIndexBufferOffsetAlignment: u32,
    pub minIndirectCommandsBufferOffsetAlignment: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub deviceGeneratedCommands: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkGraphicsShaderGroupCreateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub stageCount: u32,
    pub pStages: *const VkPipelineShaderStageCreateInfo,
    pub pVertexInputState: *const VkPipelineVertexInputStateCreateInfo,
    pub pTessellationState: *const VkPipelineTessellationStateCreateInfo,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkGraphicsPipelineShaderGroupsCreateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub groupCount: u32,
    pub pGroups: *const VkGraphicsShaderGroupCreateInfoNV,
    pub pipelineCount: u32,
    pub pPipelines: *const VkPipeline,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkBindShaderGroupIndirectCommandNV {
    pub groupIndex: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkBindIndexBufferIndirectCommandNV {
    pub bufferAddress: VkDeviceAddress,
    pub size: u32,
    pub indexType: VkIndexType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkBindVertexBufferIndirectCommandNV {
    pub bufferAddress: VkDeviceAddress,
    pub size: u32,
    pub stride: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkSetStateFlagsIndirectCommandNV {
    pub data: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkIndirectCommandsStreamNV {
    pub buffer: VkBuffer,
    pub offset: VkDeviceSize,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkIndirectCommandsLayoutTokenNV {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub tokenType: VkIndirectCommandsTokenTypeNV,
    pub stream: u32,
    pub offset: u32,
    pub vertexBindingUnit: u32,
    pub vertexDynamicStride: VkBool32,
    pub pushconstantPipelineLayout: VkPipelineLayout,
    pub pushconstantShaderStageFlags: VkShaderStageFlags,
    pub pushconstantOffset: u32,
    pub pushconstantSize: u32,
    pub indirectStateFlags: VkIndirectStateFlagsNV,
    pub indexTypeCount: u32,
    pub pIndexTypes: *const VkIndexType,
    pub pIndexTypeValues: *const u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkIndirectCommandsLayoutCreateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: VkIndirectCommandsLayoutUsageFlagsNV,
    pub pipelineBindPoint: VkPipelineBindPoint,
    pub tokenCount: u32,
    pub pTokens: *const VkIndirectCommandsLayoutTokenNV,
    pub streamCount: u32,
    pub pStreamStrides: *const u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkGeneratedCommandsInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub pipelineBindPoint: VkPipelineBindPoint,
    pub pipeline: VkPipeline,
    pub indirectCommandsLayout: VkIndirectCommandsLayoutNV,
    pub streamCount: u32,
    pub pStreams: *const VkIndirectCommandsStreamNV,
    pub sequencesCount: u32,
    pub preprocessBuffer: VkBuffer,
    pub preprocessOffset: VkDeviceSize,
    pub preprocessSize: VkDeviceSize,
    pub sequencesCountBuffer: VkBuffer,
    pub sequencesCountOffset: VkDeviceSize,
    pub sequencesIndexBuffer: VkBuffer,
    pub sequencesIndexOffset: VkDeviceSize,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkGeneratedCommandsMemoryRequirementsInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub pipelineBindPoint: VkPipelineBindPoint,
    pub pipeline: VkPipeline,
    pub indirectCommandsLayout: VkIndirectCommandsLayoutNV,
    pub maxSequencesCount: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceInheritedViewportScissorFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub inheritedViewportScissor2D: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkCommandBufferInheritanceViewportScissorInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub viewportScissor2D: VkBool32,
    pub viewportDepthCount: u32,
    pub pViewportDepths: *const VkViewport,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub texelBufferAlignment: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkRenderPassTransformBeginInfoQCOM {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub transform: VkSurfaceTransformFlagBitsKHR,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkCommandBufferInheritanceRenderPassTransformInfoQCOM {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub transform: VkSurfaceTransformFlagBitsKHR,
    pub renderArea: VkRect2D,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceDepthBiasControlFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub depthBiasControl: VkBool32,
    pub leastRepresentableValueForceUnormRepresentation: VkBool32,
    pub floatRepresentation: VkBool32,
    pub depthBiasExact: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDepthBiasInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub depthBiasConstantFactor: f32,
    pub depthBiasClamp: f32,
    pub depthBiasSlopeFactor: f32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDepthBiasRepresentationInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub depthBiasRepresentation: VkDepthBiasRepresentationEXT,
    pub depthBiasExact: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceDeviceMemoryReportFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub deviceMemoryReport: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDeviceMemoryReportCallbackDataEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub flags: VkDeviceMemoryReportFlagsEXT,
    pub type_: VkDeviceMemoryReportEventTypeEXT,
    pub memoryObjectId: u64,
    pub size: VkDeviceSize,
    pub objectType: VkObjectType,
    pub objectHandle: u64,
    pub heapIndex: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDeviceDeviceMemoryReportCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: VkDeviceMemoryReportFlagsEXT,
    pub pfnUserCallback: PFN_vkDeviceMemoryReportCallbackEXT,
    pub pUserData: *mut ::core::ffi::c_void,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSamplerCustomBorderColorCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub customBorderColor: VkClearColorValue,
    pub format: VkFormat,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceCustomBorderColorPropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub maxCustomBorderColorSamplers: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceCustomBorderColorFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub customBorderColors: VkBool32,
    pub customBorderColorWithoutFormat: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDevicePresentBarrierFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub presentBarrier: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkSurfaceCapabilitiesPresentBarrierNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub presentBarrierSupported: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkSwapchainPresentBarrierCreateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub presentBarrierEnable: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceDiagnosticsConfigFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub diagnosticsConfig: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDeviceDiagnosticsConfigCreateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: VkDeviceDiagnosticsConfigFlagsNV,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkCudaModuleCreateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub dataSize: usize,
    pub pData: *const ::core::ffi::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkCudaFunctionCreateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub module: VkCudaModuleNV,
    pub pName: *const ::core::ffi::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkCudaLaunchInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub function: VkCudaFunctionNV,
    pub gridDimX: u32,
    pub gridDimY: u32,
    pub gridDimZ: u32,
    pub blockDimX: u32,
    pub blockDimY: u32,
    pub blockDimZ: u32,
    pub sharedMemBytes: u32,
    pub paramCount: usize,
    pub pParams: *const *const ::core::ffi::c_void,
    pub extraCount: usize,
    pub pExtras: *const *const ::core::ffi::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceCudaKernelLaunchFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub cudaKernelLaunchFeatures: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceCudaKernelLaunchPropertiesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub computeCapabilityMinor: u32,
    pub computeCapabilityMajor: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceTileShadingFeaturesQCOM {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub tileShading: VkBool32,
    pub tileShadingFragmentStage: VkBool32,
    pub tileShadingColorAttachments: VkBool32,
    pub tileShadingDepthAttachments: VkBool32,
    pub tileShadingStencilAttachments: VkBool32,
    pub tileShadingInputAttachments: VkBool32,
    pub tileShadingSampledAttachments: VkBool32,
    pub tileShadingPerTileDraw: VkBool32,
    pub tileShadingPerTileDispatch: VkBool32,
    pub tileShadingDispatchTile: VkBool32,
    pub tileShadingApron: VkBool32,
    pub tileShadingAnisotropicApron: VkBool32,
    pub tileShadingAtomicOps: VkBool32,
    pub tileShadingImageProcessing: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceTileShadingPropertiesQCOM {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub maxApronSize: u32,
    pub preferNonCoherent: VkBool32,
    pub tileGranularity: VkExtent2D,
    pub maxTileShadingRate: VkExtent2D,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkRenderPassTileShadingCreateInfoQCOM {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: VkTileShadingRenderPassFlagsQCOM,
    pub tileApronSize: VkExtent2D,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPerTileBeginInfoQCOM {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPerTileEndInfoQCOM {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDispatchTileInfoQCOM {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkQueryLowLatencySupportNV {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub pQueriedLowLatencyData: *mut ::core::ffi::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceDescriptorBufferPropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub combinedImageSamplerDescriptorSingleArray: VkBool32,
    pub bufferlessPushDescriptors: VkBool32,
    pub allowSamplerImageViewPostSubmitCreation: VkBool32,
    pub descriptorBufferOffsetAlignment: VkDeviceSize,
    pub maxDescriptorBufferBindings: u32,
    pub maxResourceDescriptorBufferBindings: u32,
    pub maxSamplerDescriptorBufferBindings: u32,
    pub maxEmbeddedImmutableSamplerBindings: u32,
    pub maxEmbeddedImmutableSamplers: u32,
    pub bufferCaptureReplayDescriptorDataSize: usize,
    pub imageCaptureReplayDescriptorDataSize: usize,
    pub imageViewCaptureReplayDescriptorDataSize: usize,
    pub samplerCaptureReplayDescriptorDataSize: usize,
    pub accelerationStructureCaptureReplayDescriptorDataSize: usize,
    pub samplerDescriptorSize: usize,
    pub combinedImageSamplerDescriptorSize: usize,
    pub sampledImageDescriptorSize: usize,
    pub storageImageDescriptorSize: usize,
    pub uniformTexelBufferDescriptorSize: usize,
    pub robustUniformTexelBufferDescriptorSize: usize,
    pub storageTexelBufferDescriptorSize: usize,
    pub robustStorageTexelBufferDescriptorSize: usize,
    pub uniformBufferDescriptorSize: usize,
    pub robustUniformBufferDescriptorSize: usize,
    pub storageBufferDescriptorSize: usize,
    pub robustStorageBufferDescriptorSize: usize,
    pub inputAttachmentDescriptorSize: usize,
    pub accelerationStructureDescriptorSize: usize,
    pub maxSamplerDescriptorBufferRange: VkDeviceSize,
    pub maxResourceDescriptorBufferRange: VkDeviceSize,
    pub samplerDescriptorBufferAddressSpaceSize: VkDeviceSize,
    pub resourceDescriptorBufferAddressSpaceSize: VkDeviceSize,
    pub descriptorBufferAddressSpaceSize: VkDeviceSize,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub combinedImageSamplerDensityMapDescriptorSize: usize,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceDescriptorBufferFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub descriptorBuffer: VkBool32,
    pub descriptorBufferCaptureReplay: VkBool32,
    pub descriptorBufferImageLayoutIgnored: VkBool32,
    pub descriptorBufferPushDescriptors: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDescriptorAddressInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub address: VkDeviceAddress,
    pub range: VkDeviceSize,
    pub format: VkFormat,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDescriptorBufferBindingInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub address: VkDeviceAddress,
    pub usage: VkBufferUsageFlags,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDescriptorBufferBindingPushDescriptorBufferHandleEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub buffer: VkBuffer,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDescriptorGetInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub type_: VkDescriptorType,
    pub data: VkDescriptorDataEXT,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkBufferCaptureDescriptorDataInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub buffer: VkBuffer,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkImageCaptureDescriptorDataInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub image: VkImage,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkImageViewCaptureDescriptorDataInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub imageView: VkImageView,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkSamplerCaptureDescriptorDataInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub sampler: VkSampler,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkOpaqueCaptureDescriptorDataCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub opaqueCaptureDescriptorData: *const ::core::ffi::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkAccelerationStructureCaptureDescriptorDataInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub accelerationStructure: VkAccelerationStructureKHR,
    pub accelerationStructureNV: VkAccelerationStructureNV,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub graphicsPipelineLibrary: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub graphicsPipelineLibraryFastLinking: VkBool32,
    pub graphicsPipelineLibraryIndependentInterpolationDecoration: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkGraphicsPipelineLibraryCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: VkGraphicsPipelineLibraryFlagsEXT,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub shaderEarlyAndLateFragmentTests: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub fragmentShadingRateEnums: VkBool32,
    pub supersampleFragmentShadingRates: VkBool32,
    pub noInvocationFragmentShadingRates: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub maxFragmentShadingRateInvocationCount: VkSampleCountFlagBits,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPipelineFragmentShadingRateEnumStateCreateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub shadingRateType: VkFragmentShadingRateTypeNV,
    pub shadingRate: VkFragmentShadingRateNV,
    pub combinerOps: [VkFragmentShadingRateCombinerOpKHR; 2usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAccelerationStructureGeometryMotionTrianglesDataNV {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub vertexData: VkDeviceOrHostAddressConstKHR,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkAccelerationStructureMotionInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub maxInstances: u32,
    pub flags: VkAccelerationStructureMotionInfoFlagsNV,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkAccelerationStructureMatrixMotionInstanceNV {
    pub transformT0: VkTransformMatrixKHR,
    pub transformT1: VkTransformMatrixKHR,
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
    pub accelerationStructureReference: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkSRTDataNV {
    pub sx: f32,
    pub a: f32,
    pub b: f32,
    pub pvx: f32,
    pub sy: f32,
    pub c: f32,
    pub pvy: f32,
    pub sz: f32,
    pub pvz: f32,
    pub qx: f32,
    pub qy: f32,
    pub qz: f32,
    pub qw: f32,
    pub tx: f32,
    pub ty: f32,
    pub tz: f32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkAccelerationStructureSRTMotionInstanceNV {
    pub transformT0: VkSRTDataNV,
    pub transformT1: VkSRTDataNV,
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
    pub accelerationStructureReference: u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAccelerationStructureMotionInstanceNV {
    pub type_: VkAccelerationStructureMotionInstanceTypeNV,
    pub flags: VkAccelerationStructureMotionInstanceFlagsNV,
    pub data: VkAccelerationStructureMotionInstanceDataNV,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceRayTracingMotionBlurFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub rayTracingMotionBlur: VkBool32,
    pub rayTracingMotionBlurPipelineTraceRaysIndirect: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub ycbcr2plane444Formats: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceFragmentDensityMap2FeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub fragmentDensityMapDeferred: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceFragmentDensityMap2PropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub subsampledLoads: VkBool32,
    pub subsampledCoarseReconstructionEarlyAccess: VkBool32,
    pub maxSubsampledArrayLayers: u32,
    pub maxDescriptorSetSubsampledSamplers: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkCopyCommandTransformInfoQCOM {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub transform: VkSurfaceTransformFlagBitsKHR,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceImageCompressionControlFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub imageCompressionControl: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkImageCompressionControlEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: VkImageCompressionFlagsEXT,
    pub compressionControlPlaneCount: u32,
    pub pFixedRateFlags: *mut VkImageCompressionFixedRateFlagsEXT,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkImageCompressionPropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub imageCompressionFlags: VkImageCompressionFlagsEXT,
    pub imageCompressionFixedRateFlags: VkImageCompressionFixedRateFlagsEXT,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub attachmentFeedbackLoopLayout: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDevice4444FormatsFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub formatA4R4G4B4: VkBool32,
    pub formatA4B4G4R4: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceFaultFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub deviceFault: VkBool32,
    pub deviceFaultVendorBinary: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDeviceFaultCountsEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub addressInfoCount: u32,
    pub vendorInfoCount: u32,
    pub vendorBinarySize: VkDeviceSize,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDeviceFaultAddressInfoEXT {
    pub addressType: VkDeviceFaultAddressTypeEXT,
    pub reportedAddress: VkDeviceAddress,
    pub addressPrecision: VkDeviceSize,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDeviceFaultVendorInfoEXT {
    pub description: [::core::ffi::c_char; 256usize],
    pub vendorFaultCode: u64,
    pub vendorFaultData: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDeviceFaultInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub description: [::core::ffi::c_char; 256usize],
    pub pAddressInfos: *mut VkDeviceFaultAddressInfoEXT,
    pub pVendorInfos: *mut VkDeviceFaultVendorInfoEXT,
    pub pVendorBinaryData: *mut ::core::ffi::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDeviceFaultVendorBinaryHeaderVersionOneEXT {
    pub headerSize: u32,
    pub headerVersion: VkDeviceFaultVendorBinaryHeaderVersionEXT,
    pub vendorID: u32,
    pub deviceID: u32,
    pub driverVersion: u32,
    pub pipelineCacheUUID: [u8; 16usize],
    pub applicationNameOffset: u32,
    pub applicationVersion: u32,
    pub engineNameOffset: u32,
    pub engineVersion: u32,
    pub apiVersion: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub rasterizationOrderColorAttachmentAccess: VkBool32,
    pub rasterizationOrderDepthAttachmentAccess: VkBool32,
    pub rasterizationOrderStencilAttachmentAccess: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub formatRgba10x6WithoutYCbCrSampler: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub mutableDescriptorType: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkMutableDescriptorTypeListEXT {
    pub descriptorTypeCount: u32,
    pub pDescriptorTypes: *const VkDescriptorType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkMutableDescriptorTypeCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub mutableDescriptorTypeListCount: u32,
    pub pMutableDescriptorTypeLists: *const VkMutableDescriptorTypeListEXT,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub vertexInputDynamicState: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVertexInputBindingDescription2EXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub binding: u32,
    pub stride: u32,
    pub inputRate: VkVertexInputRate,
    pub divisor: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVertexInputAttributeDescription2EXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub location: u32,
    pub binding: u32,
    pub format: VkFormat,
    pub offset: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceDrmPropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub hasPrimary: VkBool32,
    pub hasRender: VkBool32,
    pub primaryMajor: i64,
    pub primaryMinor: i64,
    pub renderMajor: i64,
    pub renderMinor: i64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceAddressBindingReportFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub reportAddressBinding: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDeviceAddressBindingCallbackDataEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub flags: VkDeviceAddressBindingFlagsEXT,
    pub baseAddress: VkDeviceAddress,
    pub size: VkDeviceSize,
    pub bindingType: VkDeviceAddressBindingTypeEXT,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceDepthClipControlFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub depthClipControl: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPipelineViewportDepthClipControlCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub negativeOneToOne: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub primitiveTopologyListRestart: VkBool32,
    pub primitiveTopologyPatchListRestart: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDevicePresentModeFifoLatestReadyFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub presentModeFifoLatestReady: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkSubpassShadingPipelineCreateInfoHUAWEI {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub renderPass: VkRenderPass,
    pub subpass: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceSubpassShadingFeaturesHUAWEI {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub subpassShading: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceSubpassShadingPropertiesHUAWEI {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub maxSubpassShadingWorkgroupSizeAspectRatio: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceInvocationMaskFeaturesHUAWEI {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub invocationMask: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkMemoryGetRemoteAddressInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub memory: VkDeviceMemory,
    pub handleType: VkExternalMemoryHandleTypeFlagBits,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceExternalMemoryRDMAFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub externalMemoryRDMA: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPipelinePropertiesIdentifierEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub pipelineIdentifier: [u8; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDevicePipelinePropertiesFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub pipelinePropertiesIdentifier: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceFrameBoundaryFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub frameBoundary: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkFrameBoundaryEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: VkFrameBoundaryFlagsEXT,
    pub frameID: u64,
    pub imageCount: u32,
    pub pImages: *const VkImage,
    pub bufferCount: u32,
    pub pBuffers: *const VkBuffer,
    pub tagName: u64,
    pub tagSize: usize,
    pub pTag: *const ::core::ffi::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub multisampledRenderToSingleSampled: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkSubpassResolvePerformanceQueryEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub optimal: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkMultisampledRenderToSingleSampledInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub multisampledRenderToSingleSampledEnable: VkBool32,
    pub rasterizationSamples: VkSampleCountFlagBits,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceExtendedDynamicState2FeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub extendedDynamicState2: VkBool32,
    pub extendedDynamicState2LogicOp: VkBool32,
    pub extendedDynamicState2PatchControlPoints: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceColorWriteEnableFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub colorWriteEnable: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPipelineColorWriteCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub attachmentCount: u32,
    pub pColorWriteEnables: *const VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub primitivesGeneratedQuery: VkBool32,
    pub primitivesGeneratedQueryWithRasterizerDiscard: VkBool32,
    pub primitivesGeneratedQueryWithNonZeroStreams: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceImageViewMinLodFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub minLod: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkImageViewMinLodCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub minLod: f32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceMultiDrawFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub multiDraw: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceMultiDrawPropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub maxMultiDrawCount: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkMultiDrawInfoEXT {
    pub firstVertex: u32,
    pub vertexCount: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkMultiDrawIndexedInfoEXT {
    pub firstIndex: u32,
    pub indexCount: u32,
    pub vertexOffset: i32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceImage2DViewOf3DFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub image2DViewOf3D: VkBool32,
    pub sampler2DViewOf3D: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceShaderTileImageFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub shaderTileImageColorReadAccess: VkBool32,
    pub shaderTileImageDepthReadAccess: VkBool32,
    pub shaderTileImageStencilReadAccess: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceShaderTileImagePropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub shaderTileImageCoherentReadAccelerated: VkBool32,
    pub shaderTileImageReadSampleFromPixelRateInvocation: VkBool32,
    pub shaderTileImageReadFromHelperInvocation: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkMicromapUsageEXT {
    pub count: u32,
    pub subdivisionLevel: u32,
    pub format: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkMicromapBuildInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub type_: VkMicromapTypeEXT,
    pub flags: VkBuildMicromapFlagsEXT,
    pub mode: VkBuildMicromapModeEXT,
    pub dstMicromap: VkMicromapEXT,
    pub usageCountsCount: u32,
    pub pUsageCounts: *const VkMicromapUsageEXT,
    pub ppUsageCounts: *const *const VkMicromapUsageEXT,
    pub data: VkDeviceOrHostAddressConstKHR,
    pub scratchData: VkDeviceOrHostAddressKHR,
    pub triangleArray: VkDeviceOrHostAddressConstKHR,
    pub triangleArrayStride: VkDeviceSize,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkMicromapCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub createFlags: VkMicromapCreateFlagsEXT,
    pub buffer: VkBuffer,
    pub offset: VkDeviceSize,
    pub size: VkDeviceSize,
    pub type_: VkMicromapTypeEXT,
    pub deviceAddress: VkDeviceAddress,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceOpacityMicromapFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub micromap: VkBool32,
    pub micromapCaptureReplay: VkBool32,
    pub micromapHostCommands: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceOpacityMicromapPropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub maxOpacity2StateSubdivisionLevel: u32,
    pub maxOpacity4StateSubdivisionLevel: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkMicromapVersionInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub pVersionData: *const u8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkCopyMicromapToMemoryInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub src: VkMicromapEXT,
    pub dst: VkDeviceOrHostAddressKHR,
    pub mode: VkCopyMicromapModeEXT,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkCopyMemoryToMicromapInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub src: VkDeviceOrHostAddressConstKHR,
    pub dst: VkMicromapEXT,
    pub mode: VkCopyMicromapModeEXT,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkCopyMicromapInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub src: VkMicromapEXT,
    pub dst: VkMicromapEXT,
    pub mode: VkCopyMicromapModeEXT,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkMicromapBuildSizesInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub micromapSize: VkDeviceSize,
    pub buildScratchSize: VkDeviceSize,
    pub discardable: VkBool32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAccelerationStructureTrianglesOpacityMicromapEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub indexType: VkIndexType,
    pub indexBuffer: VkDeviceOrHostAddressConstKHR,
    pub indexStride: VkDeviceSize,
    pub baseTriangle: u32,
    pub usageCountsCount: u32,
    pub pUsageCounts: *const VkMicromapUsageEXT,
    pub ppUsageCounts: *const *const VkMicromapUsageEXT,
    pub micromap: VkMicromapEXT,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkMicromapTriangleEXT {
    pub dataOffset: u32,
    pub subdivisionLevel: u16,
    pub format: u16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub clustercullingShader: VkBool32,
    pub multiviewClusterCullingShader: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub maxWorkGroupCount: [u32; 3usize],
    pub maxWorkGroupSize: [u32; 3usize],
    pub maxOutputClusterCount: u32,
    pub indirectBufferOffsetAlignment: VkDeviceSize,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub clusterShadingRate: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceBorderColorSwizzleFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub borderColorSwizzle: VkBool32,
    pub borderColorSwizzleFromImage: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkSamplerBorderColorComponentMappingCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub components: VkComponentMapping,
    pub srgb: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub pageableDeviceLocalMemory: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceShaderCorePropertiesARM {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub pixelRate: u32,
    pub texelRate: u32,
    pub fmaRate: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDeviceQueueShaderCoreControlCreateInfoARM {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub shaderCoreCount: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceSchedulingControlsFeaturesARM {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub schedulingControls: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceSchedulingControlsPropertiesARM {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub schedulingControlsFlags: VkPhysicalDeviceSchedulingControlsFlagsARM,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub imageSlicedViewOf3D: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkImageViewSlicedCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub sliceOffset: u32,
    pub sliceCount: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub descriptorSetHostMapping: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDescriptorSetBindingReferenceVALVE {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub descriptorSetLayout: VkDescriptorSetLayout,
    pub binding: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDescriptorSetLayoutHostMappingInfoVALVE {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub descriptorOffset: usize,
    pub descriptorSize: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub nonSeamlessCubeMap: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceRenderPassStripedFeaturesARM {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub renderPassStriped: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceRenderPassStripedPropertiesARM {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub renderPassStripeGranularity: VkExtent2D,
    pub maxRenderPassStripes: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkRenderPassStripeInfoARM {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub stripeArea: VkRect2D,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkRenderPassStripeBeginInfoARM {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub stripeInfoCount: u32,
    pub pStripeInfos: *const VkRenderPassStripeInfoARM,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkRenderPassStripeSubmitInfoARM {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub stripeSemaphoreInfoCount: u32,
    pub pStripeSemaphoreInfos: *const VkSemaphoreSubmitInfo,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceFragmentDensityMapOffsetFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub fragmentDensityMapOffset: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceFragmentDensityMapOffsetPropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub fragmentDensityOffsetGranularity: VkExtent2D,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkRenderPassFragmentDensityMapOffsetEndInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub fragmentDensityOffsetCount: u32,
    pub pFragmentDensityOffsets: *const VkOffset2D,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkCopyMemoryIndirectCommandNV {
    pub srcAddress: VkDeviceAddress,
    pub dstAddress: VkDeviceAddress,
    pub size: VkDeviceSize,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkCopyMemoryToImageIndirectCommandNV {
    pub srcAddress: VkDeviceAddress,
    pub bufferRowLength: u32,
    pub bufferImageHeight: u32,
    pub imageSubresource: VkImageSubresourceLayers,
    pub imageOffset: VkOffset3D,
    pub imageExtent: VkExtent3D,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceCopyMemoryIndirectFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub indirectCopy: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceCopyMemoryIndirectPropertiesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub supportedQueues: VkQueueFlags,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDecompressMemoryRegionNV {
    pub srcAddress: VkDeviceAddress,
    pub dstAddress: VkDeviceAddress,
    pub compressedSize: VkDeviceSize,
    pub decompressedSize: VkDeviceSize,
    pub decompressionMethod: VkMemoryDecompressionMethodFlagsNV,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceMemoryDecompressionFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub memoryDecompression: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceMemoryDecompressionPropertiesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub decompressionMethods: VkMemoryDecompressionMethodFlagsNV,
    pub maxDecompressionIndirectCount: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub deviceGeneratedCompute: VkBool32,
    pub deviceGeneratedComputePipelines: VkBool32,
    pub deviceGeneratedComputeCaptureReplay: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkComputePipelineIndirectBufferInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub deviceAddress: VkDeviceAddress,
    pub size: VkDeviceSize,
    pub pipelineDeviceAddressCaptureReplay: VkDeviceAddress,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPipelineIndirectDeviceAddressInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub pipelineBindPoint: VkPipelineBindPoint,
    pub pipeline: VkPipeline,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkBindPipelineIndirectCommandNV {
    pub pipelineAddress: VkDeviceAddress,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceRayTracingLinearSweptSpheresFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub spheres: VkBool32,
    pub linearSweptSpheres: VkBool32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAccelerationStructureGeometryLinearSweptSpheresDataNV {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub vertexFormat: VkFormat,
    pub vertexData: VkDeviceOrHostAddressConstKHR,
    pub vertexStride: VkDeviceSize,
    pub radiusFormat: VkFormat,
    pub radiusData: VkDeviceOrHostAddressConstKHR,
    pub radiusStride: VkDeviceSize,
    pub indexType: VkIndexType,
    pub indexData: VkDeviceOrHostAddressConstKHR,
    pub indexStride: VkDeviceSize,
    pub indexingMode: VkRayTracingLssIndexingModeNV,
    pub endCapsMode: VkRayTracingLssPrimitiveEndCapsModeNV,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAccelerationStructureGeometrySpheresDataNV {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub vertexFormat: VkFormat,
    pub vertexData: VkDeviceOrHostAddressConstKHR,
    pub vertexStride: VkDeviceSize,
    pub radiusFormat: VkFormat,
    pub radiusData: VkDeviceOrHostAddressConstKHR,
    pub radiusStride: VkDeviceSize,
    pub indexType: VkIndexType,
    pub indexData: VkDeviceOrHostAddressConstKHR,
    pub indexStride: VkDeviceSize,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceLinearColorAttachmentFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub linearColorAttachment: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub imageCompressionControlSwapchain: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkImageViewSampleWeightCreateInfoQCOM {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub filterCenter: VkOffset2D,
    pub filterSize: VkExtent2D,
    pub numPhases: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceImageProcessingFeaturesQCOM {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub textureSampleWeighted: VkBool32,
    pub textureBoxFilter: VkBool32,
    pub textureBlockMatch: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceImageProcessingPropertiesQCOM {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub maxWeightFilterPhases: u32,
    pub maxWeightFilterDimension: VkExtent2D,
    pub maxBlockMatchRegion: VkExtent2D,
    pub maxBoxFilterBlockSize: VkExtent2D,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceNestedCommandBufferFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub nestedCommandBuffer: VkBool32,
    pub nestedCommandBufferRendering: VkBool32,
    pub nestedCommandBufferSimultaneousUse: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceNestedCommandBufferPropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub maxCommandBufferNestingLevel: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkExternalMemoryAcquireUnmodifiedEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub acquireUnmodifiedMemory: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceExtendedDynamicState3FeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub extendedDynamicState3TessellationDomainOrigin: VkBool32,
    pub extendedDynamicState3DepthClampEnable: VkBool32,
    pub extendedDynamicState3PolygonMode: VkBool32,
    pub extendedDynamicState3RasterizationSamples: VkBool32,
    pub extendedDynamicState3SampleMask: VkBool32,
    pub extendedDynamicState3AlphaToCoverageEnable: VkBool32,
    pub extendedDynamicState3AlphaToOneEnable: VkBool32,
    pub extendedDynamicState3LogicOpEnable: VkBool32,
    pub extendedDynamicState3ColorBlendEnable: VkBool32,
    pub extendedDynamicState3ColorBlendEquation: VkBool32,
    pub extendedDynamicState3ColorWriteMask: VkBool32,
    pub extendedDynamicState3RasterizationStream: VkBool32,
    pub extendedDynamicState3ConservativeRasterizationMode: VkBool32,
    pub extendedDynamicState3ExtraPrimitiveOverestimationSize: VkBool32,
    pub extendedDynamicState3DepthClipEnable: VkBool32,
    pub extendedDynamicState3SampleLocationsEnable: VkBool32,
    pub extendedDynamicState3ColorBlendAdvanced: VkBool32,
    pub extendedDynamicState3ProvokingVertexMode: VkBool32,
    pub extendedDynamicState3LineRasterizationMode: VkBool32,
    pub extendedDynamicState3LineStippleEnable: VkBool32,
    pub extendedDynamicState3DepthClipNegativeOneToOne: VkBool32,
    pub extendedDynamicState3ViewportWScalingEnable: VkBool32,
    pub extendedDynamicState3ViewportSwizzle: VkBool32,
    pub extendedDynamicState3CoverageToColorEnable: VkBool32,
    pub extendedDynamicState3CoverageToColorLocation: VkBool32,
    pub extendedDynamicState3CoverageModulationMode: VkBool32,
    pub extendedDynamicState3CoverageModulationTableEnable: VkBool32,
    pub extendedDynamicState3CoverageModulationTable: VkBool32,
    pub extendedDynamicState3CoverageReductionMode: VkBool32,
    pub extendedDynamicState3RepresentativeFragmentTestEnable: VkBool32,
    pub extendedDynamicState3ShadingRateImageEnable: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceExtendedDynamicState3PropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub dynamicPrimitiveTopologyUnrestricted: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkColorBlendEquationEXT {
    pub srcColorBlendFactor: VkBlendFactor,
    pub dstColorBlendFactor: VkBlendFactor,
    pub colorBlendOp: VkBlendOp,
    pub srcAlphaBlendFactor: VkBlendFactor,
    pub dstAlphaBlendFactor: VkBlendFactor,
    pub alphaBlendOp: VkBlendOp,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkColorBlendAdvancedEXT {
    pub advancedBlendOp: VkBlendOp,
    pub srcPremultiplied: VkBool32,
    pub dstPremultiplied: VkBool32,
    pub blendOverlap: VkBlendOverlapEXT,
    pub clampResults: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub subpassMergeFeedback: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkRenderPassCreationControlEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub disallowMerging: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkRenderPassCreationFeedbackInfoEXT {
    pub postMergeSubpassCount: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkRenderPassCreationFeedbackCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub pRenderPassFeedback: *mut VkRenderPassCreationFeedbackInfoEXT,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkRenderPassSubpassFeedbackInfoEXT {
    pub subpassMergeStatus: VkSubpassMergeStatusEXT,
    pub description: [::core::ffi::c_char; 256usize],
    pub postMergeIndex: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkRenderPassSubpassFeedbackCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub pSubpassFeedback: *mut VkRenderPassSubpassFeedbackInfoEXT,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDirectDriverLoadingInfoLUNARG {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub flags: VkDirectDriverLoadingFlagsLUNARG,
    pub pfnGetInstanceProcAddr: PFN_vkGetInstanceProcAddrLUNARG,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDirectDriverLoadingListLUNARG {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub mode: VkDirectDriverLoadingModeLUNARG,
    pub driverCount: u32,
    pub pDrivers: *const VkDirectDriverLoadingInfoLUNARG,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub shaderModuleIdentifier: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub shaderModuleIdentifierAlgorithmUUID: [u8; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPipelineShaderStageModuleIdentifierCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub identifierSize: u32,
    pub pIdentifier: *const u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkShaderModuleIdentifierEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub identifierSize: u32,
    pub identifier: [u8; 32usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceOpticalFlowFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub opticalFlow: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceOpticalFlowPropertiesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub supportedOutputGridSizes: VkOpticalFlowGridSizeFlagsNV,
    pub supportedHintGridSizes: VkOpticalFlowGridSizeFlagsNV,
    pub hintSupported: VkBool32,
    pub costSupported: VkBool32,
    pub bidirectionalFlowSupported: VkBool32,
    pub globalFlowSupported: VkBool32,
    pub minWidth: u32,
    pub minHeight: u32,
    pub maxWidth: u32,
    pub maxHeight: u32,
    pub maxNumRegionsOfInterest: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkOpticalFlowImageFormatInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub usage: VkOpticalFlowUsageFlagsNV,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkOpticalFlowImageFormatPropertiesNV {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub format: VkFormat,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkOpticalFlowSessionCreateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub width: u32,
    pub height: u32,
    pub imageFormat: VkFormat,
    pub flowVectorFormat: VkFormat,
    pub costFormat: VkFormat,
    pub outputGridSize: VkOpticalFlowGridSizeFlagsNV,
    pub hintGridSize: VkOpticalFlowGridSizeFlagsNV,
    pub performanceLevel: VkOpticalFlowPerformanceLevelNV,
    pub flags: VkOpticalFlowSessionCreateFlagsNV,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkOpticalFlowSessionCreatePrivateDataInfoNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub id: u32,
    pub size: u32,
    pub pPrivateData: *const ::core::ffi::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkOpticalFlowExecuteInfoNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub flags: VkOpticalFlowExecuteFlagsNV,
    pub regionCount: u32,
    pub pRegions: *const VkRect2D,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceLegacyDitheringFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub legacyDithering: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceAntiLagFeaturesAMD {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub antiLag: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkAntiLagPresentationInfoAMD {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub stage: VkAntiLagStageAMD,
    pub frameIndex: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkAntiLagDataAMD {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub mode: VkAntiLagModeAMD,
    pub maxFPS: u32,
    pub pPresentationInfo: *const VkAntiLagPresentationInfoAMD,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceShaderObjectFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub shaderObject: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceShaderObjectPropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub shaderBinaryUUID: [u8; 16usize],
    pub shaderBinaryVersion: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkShaderCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: VkShaderCreateFlagsEXT,
    pub stage: VkShaderStageFlagBits,
    pub nextStage: VkShaderStageFlags,
    pub codeType: VkShaderCodeTypeEXT,
    pub codeSize: usize,
    pub pCode: *const ::core::ffi::c_void,
    pub pName: *const ::core::ffi::c_char,
    pub setLayoutCount: u32,
    pub pSetLayouts: *const VkDescriptorSetLayout,
    pub pushConstantRangeCount: u32,
    pub pPushConstantRanges: *const VkPushConstantRange,
    pub pSpecializationInfo: *const VkSpecializationInfo,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDepthClampRangeEXT {
    pub minDepthClamp: f32,
    pub maxDepthClamp: f32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceTilePropertiesFeaturesQCOM {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub tileProperties: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkTilePropertiesQCOM {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub tileSize: VkExtent3D,
    pub apronSize: VkExtent2D,
    pub origin: VkOffset2D,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceAmigoProfilingFeaturesSEC {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub amigoProfiling: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkAmigoProfilingSubmitInfoSEC {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub firstDrawTimestamp: u64,
    pub swapBufferTimestamp: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub multiviewPerViewViewports: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub rayTracingInvocationReorderReorderingHint: VkRayTracingInvocationReorderModeNV,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub rayTracingInvocationReorder: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceCooperativeVectorPropertiesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub cooperativeVectorSupportedStages: VkShaderStageFlags,
    pub cooperativeVectorTrainingFloat16Accumulation: VkBool32,
    pub cooperativeVectorTrainingFloat32Accumulation: VkBool32,
    pub maxCooperativeVectorComponents: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceCooperativeVectorFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub cooperativeVector: VkBool32,
    pub cooperativeVectorTraining: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkCooperativeVectorPropertiesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub inputType: VkComponentTypeKHR,
    pub inputInterpretation: VkComponentTypeKHR,
    pub matrixInterpretation: VkComponentTypeKHR,
    pub biasInterpretation: VkComponentTypeKHR,
    pub resultType: VkComponentTypeKHR,
    pub transpose: VkBool32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkConvertCooperativeVectorMatrixInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub srcSize: usize,
    pub srcData: VkDeviceOrHostAddressConstKHR,
    pub pDstSize: *mut usize,
    pub dstData: VkDeviceOrHostAddressKHR,
    pub srcComponentType: VkComponentTypeKHR,
    pub dstComponentType: VkComponentTypeKHR,
    pub numRows: u32,
    pub numColumns: u32,
    pub srcLayout: VkCooperativeVectorMatrixLayoutNV,
    pub srcStride: usize,
    pub dstLayout: VkCooperativeVectorMatrixLayoutNV,
    pub dstStride: usize,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub extendedSparseAddressSpace: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub extendedSparseAddressSpaceSize: VkDeviceSize,
    pub extendedSparseImageUsageFlags: VkImageUsageFlags,
    pub extendedSparseBufferUsageFlags: VkBufferUsageFlags,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceLegacyVertexAttributesFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub legacyVertexAttributes: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceLegacyVertexAttributesPropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub nativeUnalignedPerformance: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkLayerSettingEXT {
    pub pLayerName: *const ::core::ffi::c_char,
    pub pSettingName: *const ::core::ffi::c_char,
    pub type_: VkLayerSettingTypeEXT,
    pub valueCount: u32,
    pub pValues: *const ::core::ffi::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkLayerSettingsCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub settingCount: u32,
    pub pSettings: *const VkLayerSettingEXT,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub shaderCoreBuiltins: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub shaderCoreMask: u64,
    pub shaderCoreCount: u32,
    pub shaderWarpsPerCore: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub pipelineLibraryGroupHandles: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub dynamicRenderingUnusedAttachments: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkLatencySleepModeInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub lowLatencyMode: VkBool32,
    pub lowLatencyBoost: VkBool32,
    pub minimumIntervalUs: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkLatencySleepInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub signalSemaphore: VkSemaphore,
    pub value: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkSetLatencyMarkerInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub presentID: u64,
    pub marker: VkLatencyMarkerNV,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkLatencyTimingsFrameReportNV {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub presentID: u64,
    pub inputSampleTimeUs: u64,
    pub simStartTimeUs: u64,
    pub simEndTimeUs: u64,
    pub renderSubmitStartTimeUs: u64,
    pub renderSubmitEndTimeUs: u64,
    pub presentStartTimeUs: u64,
    pub presentEndTimeUs: u64,
    pub driverStartTimeUs: u64,
    pub driverEndTimeUs: u64,
    pub osRenderQueueStartTimeUs: u64,
    pub osRenderQueueEndTimeUs: u64,
    pub gpuRenderStartTimeUs: u64,
    pub gpuRenderEndTimeUs: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkGetLatencyMarkerInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub timingCount: u32,
    pub pTimings: *mut VkLatencyTimingsFrameReportNV,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkLatencySubmissionPresentIdNV {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub presentID: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkSwapchainLatencyCreateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub latencyModeEnable: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkOutOfBandQueueTypeInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub queueType: VkOutOfBandQueueTypeNV,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkLatencySurfaceCapabilitiesNV {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub presentModeCount: u32,
    pub pPresentModes: *mut VkPresentModeKHR,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub multiviewPerViewRenderAreas: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub perViewRenderAreaCount: u32,
    pub pPerViewRenderAreas: *const VkRect2D,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDevicePerStageDescriptorSetFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub perStageDescriptorSet: VkBool32,
    pub dynamicPipelineLayout: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceImageProcessing2FeaturesQCOM {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub textureBlockMatch2: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceImageProcessing2PropertiesQCOM {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub maxBlockMatchWindow: VkExtent2D,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkSamplerBlockMatchWindowCreateInfoQCOM {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub windowExtent: VkExtent2D,
    pub windowCompareMode: VkBlockMatchWindowCompareModeQCOM,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceCubicWeightsFeaturesQCOM {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub selectableCubicWeights: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkSamplerCubicWeightsCreateInfoQCOM {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub cubicWeights: VkCubicFilterWeightsQCOM,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkBlitImageCubicWeightsInfoQCOM {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub cubicWeights: VkCubicFilterWeightsQCOM,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceYcbcrDegammaFeaturesQCOM {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub ycbcrDegamma: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub enableYDegamma: VkBool32,
    pub enableCbCrDegamma: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceCubicClampFeaturesQCOM {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub cubicRangeClamp: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub attachmentFeedbackLoopDynamicState: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceLayeredDriverPropertiesMSFT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub underlyingAPI: VkLayeredDriverUnderlyingApiMSFT,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub descriptorPoolOverallocation: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceTileMemoryHeapFeaturesQCOM {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub tileMemoryHeap: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceTileMemoryHeapPropertiesQCOM {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub queueSubmitBoundary: VkBool32,
    pub tileBufferTransfers: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkTileMemoryRequirementsQCOM {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub size: VkDeviceSize,
    pub alignment: VkDeviceSize,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkTileMemoryBindInfoQCOM {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub memory: VkDeviceMemory,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkTileMemorySizeInfoQCOM {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub size: VkDeviceSize,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDisplaySurfaceStereoCreateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub stereoType: VkDisplaySurfaceStereoTypeNV,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDisplayModeStereoPropertiesNV {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub hdmi3DSupported: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceRawAccessChainsFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub shaderRawAccessChains: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkExternalComputeQueueNV_T {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkExternalComputeQueueDeviceCreateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub reservedExternalQueues: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkExternalComputeQueueCreateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub preferredQueue: VkQueue,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkExternalComputeQueueDataParamsNV {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub deviceIndex: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceExternalComputeQueuePropertiesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub externalDataSize: u32,
    pub maxExternalQueues: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceCommandBufferInheritanceFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub commandBufferInheritance: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub shaderFloat16VectorAtomics: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceShaderReplicatedCompositesFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub shaderReplicatedComposites: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceRayTracingValidationFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub rayTracingValidation: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceClusterAccelerationStructureFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub clusterAccelerationStructure: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceClusterAccelerationStructurePropertiesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub maxVerticesPerCluster: u32,
    pub maxTrianglesPerCluster: u32,
    pub clusterScratchByteAlignment: u32,
    pub clusterByteAlignment: u32,
    pub clusterTemplateByteAlignment: u32,
    pub clusterBottomLevelByteAlignment: u32,
    pub clusterTemplateBoundsByteAlignment: u32,
    pub maxClusterGeometryIndex: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkClusterAccelerationStructureClustersBottomLevelInputNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub maxTotalClusterCount: u32,
    pub maxClusterCountPerAccelerationStructure: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkClusterAccelerationStructureTriangleClusterInputNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub vertexFormat: VkFormat,
    pub maxGeometryIndexValue: u32,
    pub maxClusterUniqueGeometryCount: u32,
    pub maxClusterTriangleCount: u32,
    pub maxClusterVertexCount: u32,
    pub maxTotalTriangleCount: u32,
    pub maxTotalVertexCount: u32,
    pub minPositionTruncateBitCount: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkClusterAccelerationStructureMoveObjectsInputNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub type_: VkClusterAccelerationStructureTypeNV,
    pub noMoveOverlap: VkBool32,
    pub maxMovedBytes: VkDeviceSize,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkClusterAccelerationStructureInputInfoNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub maxAccelerationStructureCount: u32,
    pub flags: VkBuildAccelerationStructureFlagsKHR,
    pub opType: VkClusterAccelerationStructureOpTypeNV,
    pub opMode: VkClusterAccelerationStructureOpModeNV,
    pub opInput: VkClusterAccelerationStructureOpInputNV,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkStridedDeviceAddressRegionKHR {
    pub deviceAddress: VkDeviceAddress,
    pub stride: VkDeviceSize,
    pub size: VkDeviceSize,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkClusterAccelerationStructureCommandsInfoNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub input: VkClusterAccelerationStructureInputInfoNV,
    pub dstImplicitData: VkDeviceAddress,
    pub scratchData: VkDeviceAddress,
    pub dstAddressesArray: VkStridedDeviceAddressRegionKHR,
    pub dstSizesArray: VkStridedDeviceAddressRegionKHR,
    pub srcInfosArray: VkStridedDeviceAddressRegionKHR,
    pub srcInfosCount: VkDeviceAddress,
    pub addressResolutionFlags: VkClusterAccelerationStructureAddressResolutionFlagsNV,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkStridedDeviceAddressNV {
    pub startAddress: VkDeviceAddress,
    pub strideInBytes: VkDeviceSize,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkClusterAccelerationStructureGeometryIndexAndGeometryFlagsNV {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkClusterAccelerationStructureMoveObjectsInfoNV {
    pub srcAccelerationStructure: VkDeviceAddress,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkClusterAccelerationStructureBuildClustersBottomLevelInfoNV {
    pub clusterReferencesCount: u32,
    pub clusterReferencesStride: u32,
    pub clusterReferences: VkDeviceAddress,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkClusterAccelerationStructureBuildTriangleClusterInfoNV {
    pub clusterID: u32,
    pub clusterFlags: VkClusterAccelerationStructureClusterFlagsNV,
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub baseGeometryIndexAndGeometryFlags:
        VkClusterAccelerationStructureGeometryIndexAndGeometryFlagsNV,
    pub indexBufferStride: u16,
    pub vertexBufferStride: u16,
    pub geometryIndexAndFlagsBufferStride: u16,
    pub opacityMicromapIndexBufferStride: u16,
    pub indexBuffer: VkDeviceAddress,
    pub vertexBuffer: VkDeviceAddress,
    pub geometryIndexAndFlagsBuffer: VkDeviceAddress,
    pub opacityMicromapArray: VkDeviceAddress,
    pub opacityMicromapIndexBuffer: VkDeviceAddress,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkClusterAccelerationStructureBuildTriangleClusterTemplateInfoNV {
    pub clusterID: u32,
    pub clusterFlags: VkClusterAccelerationStructureClusterFlagsNV,
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub baseGeometryIndexAndGeometryFlags:
        VkClusterAccelerationStructureGeometryIndexAndGeometryFlagsNV,
    pub indexBufferStride: u16,
    pub vertexBufferStride: u16,
    pub geometryIndexAndFlagsBufferStride: u16,
    pub opacityMicromapIndexBufferStride: u16,
    pub indexBuffer: VkDeviceAddress,
    pub vertexBuffer: VkDeviceAddress,
    pub geometryIndexAndFlagsBuffer: VkDeviceAddress,
    pub opacityMicromapArray: VkDeviceAddress,
    pub opacityMicromapIndexBuffer: VkDeviceAddress,
    pub instantiationBoundingBoxLimit: VkDeviceAddress,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkClusterAccelerationStructureInstantiateClusterInfoNV {
    pub clusterIdOffset: u32,
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub clusterTemplateAddress: VkDeviceAddress,
    pub vertexBuffer: VkStridedDeviceAddressNV,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkAccelerationStructureBuildSizesInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub accelerationStructureSize: VkDeviceSize,
    pub updateScratchSize: VkDeviceSize,
    pub buildScratchSize: VkDeviceSize,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkRayTracingPipelineClusterAccelerationStructureCreateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub allowClusterAccelerationStructure: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDevicePartitionedAccelerationStructureFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub partitionedAccelerationStructure: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDevicePartitionedAccelerationStructurePropertiesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub maxPartitionCount: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPartitionedAccelerationStructureFlagsNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub enablePartitionTranslation: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkBuildPartitionedAccelerationStructureIndirectCommandNV {
    pub opType: VkPartitionedAccelerationStructureOpTypeNV,
    pub argCount: u32,
    pub argData: VkStridedDeviceAddressNV,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPartitionedAccelerationStructureWriteInstanceDataNV {
    pub transform: VkTransformMatrixKHR,
    pub explicitAABB: [f32; 6usize],
    pub instanceID: u32,
    pub instanceMask: u32,
    pub instanceContributionToHitGroupIndex: u32,
    pub instanceFlags: VkPartitionedAccelerationStructureInstanceFlagsNV,
    pub instanceIndex: u32,
    pub partitionIndex: u32,
    pub accelerationStructure: VkDeviceAddress,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPartitionedAccelerationStructureUpdateInstanceDataNV {
    pub instanceIndex: u32,
    pub instanceContributionToHitGroupIndex: u32,
    pub accelerationStructure: VkDeviceAddress,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPartitionedAccelerationStructureWritePartitionTranslationDataNV {
    pub partitionIndex: u32,
    pub partitionTranslation: [f32; 3usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkWriteDescriptorSetPartitionedAccelerationStructureNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub accelerationStructureCount: u32,
    pub pAccelerationStructures: *const VkDeviceAddress,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPartitionedAccelerationStructureInstancesInputNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub flags: VkBuildAccelerationStructureFlagsKHR,
    pub instanceCount: u32,
    pub maxInstancePerPartitionCount: u32,
    pub partitionCount: u32,
    pub maxInstanceInGlobalPartitionCount: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkBuildPartitionedAccelerationStructureInfoNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub input: VkPartitionedAccelerationStructureInstancesInputNV,
    pub srcAccelerationStructureData: VkDeviceAddress,
    pub dstAccelerationStructureData: VkDeviceAddress,
    pub scratchData: VkDeviceAddress,
    pub srcInfos: VkDeviceAddress,
    pub srcInfosCount: VkDeviceAddress,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceDeviceGeneratedCommandsFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub deviceGeneratedCommands: VkBool32,
    pub dynamicGeneratedPipelineLayout: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub maxIndirectPipelineCount: u32,
    pub maxIndirectShaderObjectCount: u32,
    pub maxIndirectSequenceCount: u32,
    pub maxIndirectCommandsTokenCount: u32,
    pub maxIndirectCommandsTokenOffset: u32,
    pub maxIndirectCommandsIndirectStride: u32,
    pub supportedIndirectCommandsInputModes: VkIndirectCommandsInputModeFlagsEXT,
    pub supportedIndirectCommandsShaderStages: VkShaderStageFlags,
    pub supportedIndirectCommandsShaderStagesPipelineBinding: VkShaderStageFlags,
    pub supportedIndirectCommandsShaderStagesShaderBinding: VkShaderStageFlags,
    pub deviceGeneratedCommandsTransformFeedback: VkBool32,
    pub deviceGeneratedCommandsMultiDrawIndirectCount: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkGeneratedCommandsMemoryRequirementsInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub indirectExecutionSet: VkIndirectExecutionSetEXT,
    pub indirectCommandsLayout: VkIndirectCommandsLayoutEXT,
    pub maxSequenceCount: u32,
    pub maxDrawCount: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkIndirectExecutionSetPipelineInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub initialPipeline: VkPipeline,
    pub maxPipelineCount: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkIndirectExecutionSetShaderLayoutInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub setLayoutCount: u32,
    pub pSetLayouts: *const VkDescriptorSetLayout,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkIndirectExecutionSetShaderInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub shaderCount: u32,
    pub pInitialShaders: *const VkShaderEXT,
    pub pSetLayoutInfos: *const VkIndirectExecutionSetShaderLayoutInfoEXT,
    pub maxShaderCount: u32,
    pub pushConstantRangeCount: u32,
    pub pPushConstantRanges: *const VkPushConstantRange,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkIndirectExecutionSetCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub type_: VkIndirectExecutionSetInfoTypeEXT,
    pub info: VkIndirectExecutionSetInfoEXT,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkGeneratedCommandsInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub shaderStages: VkShaderStageFlags,
    pub indirectExecutionSet: VkIndirectExecutionSetEXT,
    pub indirectCommandsLayout: VkIndirectCommandsLayoutEXT,
    pub indirectAddress: VkDeviceAddress,
    pub indirectAddressSize: VkDeviceSize,
    pub preprocessAddress: VkDeviceAddress,
    pub preprocessSize: VkDeviceSize,
    pub maxSequenceCount: u32,
    pub sequenceCountAddress: VkDeviceAddress,
    pub maxDrawCount: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkWriteIndirectExecutionSetPipelineEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub index: u32,
    pub pipeline: VkPipeline,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkIndirectCommandsPushConstantTokenEXT {
    pub updateRange: VkPushConstantRange,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkIndirectCommandsVertexBufferTokenEXT {
    pub vertexBindingUnit: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkIndirectCommandsIndexBufferTokenEXT {
    pub mode: VkIndirectCommandsInputModeFlagBitsEXT,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkIndirectCommandsExecutionSetTokenEXT {
    pub type_: VkIndirectExecutionSetInfoTypeEXT,
    pub shaderStages: VkShaderStageFlags,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkIndirectCommandsLayoutTokenEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub type_: VkIndirectCommandsTokenTypeEXT,
    pub data: VkIndirectCommandsTokenDataEXT,
    pub offset: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkIndirectCommandsLayoutCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: VkIndirectCommandsLayoutUsageFlagsEXT,
    pub shaderStages: VkShaderStageFlags,
    pub indirectStride: u32,
    pub pipelineLayout: VkPipelineLayout,
    pub tokenCount: u32,
    pub pTokens: *const VkIndirectCommandsLayoutTokenEXT,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDrawIndirectCountIndirectCommandEXT {
    pub bufferAddress: VkDeviceAddress,
    pub stride: u32,
    pub commandCount: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkBindVertexBufferIndirectCommandEXT {
    pub bufferAddress: VkDeviceAddress,
    pub size: u32,
    pub stride: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkBindIndexBufferIndirectCommandEXT {
    pub bufferAddress: VkDeviceAddress,
    pub size: u32,
    pub indexType: VkIndexType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkGeneratedCommandsPipelineInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub pipeline: VkPipeline,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkGeneratedCommandsShaderInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub shaderCount: u32,
    pub pShaders: *const VkShaderEXT,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkWriteIndirectExecutionSetShaderEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub index: u32,
    pub shader: VkShaderEXT,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceImageAlignmentControlFeaturesMESA {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub imageAlignmentControl: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceImageAlignmentControlPropertiesMESA {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub supportedImageAlignmentMask: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkImageAlignmentControlCreateInfoMESA {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub maximumRequestedAlignment: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceDepthClampControlFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub depthClampControl: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPipelineViewportDepthClampControlCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub depthClampMode: VkDepthClampModeEXT,
    pub pDepthClampRange: *const VkDepthClampRangeEXT,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceHdrVividFeaturesHUAWEI {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub hdrVivid: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkHdrVividDynamicMetadataHUAWEI {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub dynamicMetadataSize: usize,
    pub pDynamicMetadata: *const ::core::ffi::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkCooperativeMatrixFlexibleDimensionsPropertiesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub MGranularity: u32,
    pub NGranularity: u32,
    pub KGranularity: u32,
    pub AType: VkComponentTypeKHR,
    pub BType: VkComponentTypeKHR,
    pub CType: VkComponentTypeKHR,
    pub ResultType: VkComponentTypeKHR,
    pub saturatingAccumulation: VkBool32,
    pub scope: VkScopeKHR,
    pub workgroupInvocations: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceCooperativeMatrix2FeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub cooperativeMatrixWorkgroupScope: VkBool32,
    pub cooperativeMatrixFlexibleDimensions: VkBool32,
    pub cooperativeMatrixReductions: VkBool32,
    pub cooperativeMatrixConversions: VkBool32,
    pub cooperativeMatrixPerElementOperations: VkBool32,
    pub cooperativeMatrixTensorAddressing: VkBool32,
    pub cooperativeMatrixBlockLoads: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceCooperativeMatrix2PropertiesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub cooperativeMatrixWorkgroupScopeMaxWorkgroupSize: u32,
    pub cooperativeMatrixFlexibleDimensionsMaxDimension: u32,
    pub cooperativeMatrixWorkgroupScopeReservedSharedMemory: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDevicePipelineOpacityMicromapFeaturesARM {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub pipelineOpacityMicromap: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceVertexAttributeRobustnessFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub vertexAttributeRobustness: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkSetPresentConfigNV {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub numFramesPerBatch: u32,
    pub presentConfigFeedback: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDevicePresentMeteringFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub presentMetering: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkRenderingEndInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceZeroInitializeDeviceMemoryFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub zeroInitializeDeviceMemory: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkAccelerationStructureBuildRangeInfoKHR {
    pub primitiveCount: u32,
    pub primitiveOffset: u32,
    pub firstVertex: u32,
    pub transformOffset: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAccelerationStructureGeometryTrianglesDataKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub vertexFormat: VkFormat,
    pub vertexData: VkDeviceOrHostAddressConstKHR,
    pub vertexStride: VkDeviceSize,
    pub maxVertex: u32,
    pub indexType: VkIndexType,
    pub indexData: VkDeviceOrHostAddressConstKHR,
    pub transformData: VkDeviceOrHostAddressConstKHR,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAccelerationStructureGeometryAabbsDataKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub data: VkDeviceOrHostAddressConstKHR,
    pub stride: VkDeviceSize,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAccelerationStructureGeometryInstancesDataKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub arrayOfPointers: VkBool32,
    pub data: VkDeviceOrHostAddressConstKHR,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAccelerationStructureGeometryKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub geometryType: VkGeometryTypeKHR,
    pub geometry: VkAccelerationStructureGeometryDataKHR,
    pub flags: VkGeometryFlagsKHR,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAccelerationStructureBuildGeometryInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub type_: VkAccelerationStructureTypeKHR,
    pub flags: VkBuildAccelerationStructureFlagsKHR,
    pub mode: VkBuildAccelerationStructureModeKHR,
    pub srcAccelerationStructure: VkAccelerationStructureKHR,
    pub dstAccelerationStructure: VkAccelerationStructureKHR,
    pub geometryCount: u32,
    pub pGeometries: *const VkAccelerationStructureGeometryKHR,
    pub ppGeometries: *const *const VkAccelerationStructureGeometryKHR,
    pub scratchData: VkDeviceOrHostAddressKHR,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkAccelerationStructureCreateInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub createFlags: VkAccelerationStructureCreateFlagsKHR,
    pub buffer: VkBuffer,
    pub offset: VkDeviceSize,
    pub size: VkDeviceSize,
    pub type_: VkAccelerationStructureTypeKHR,
    pub deviceAddress: VkDeviceAddress,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkWriteDescriptorSetAccelerationStructureKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub accelerationStructureCount: u32,
    pub pAccelerationStructures: *const VkAccelerationStructureKHR,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceAccelerationStructureFeaturesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub accelerationStructure: VkBool32,
    pub accelerationStructureCaptureReplay: VkBool32,
    pub accelerationStructureIndirectBuild: VkBool32,
    pub accelerationStructureHostCommands: VkBool32,
    pub descriptorBindingAccelerationStructureUpdateAfterBind: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceAccelerationStructurePropertiesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub maxGeometryCount: u64,
    pub maxInstanceCount: u64,
    pub maxPrimitiveCount: u64,
    pub maxPerStageDescriptorAccelerationStructures: u32,
    pub maxPerStageDescriptorUpdateAfterBindAccelerationStructures: u32,
    pub maxDescriptorSetAccelerationStructures: u32,
    pub maxDescriptorSetUpdateAfterBindAccelerationStructures: u32,
    pub minAccelerationStructureScratchOffsetAlignment: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkAccelerationStructureDeviceAddressInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub accelerationStructure: VkAccelerationStructureKHR,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkAccelerationStructureVersionInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub pVersionData: *const u8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkCopyAccelerationStructureToMemoryInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub src: VkAccelerationStructureKHR,
    pub dst: VkDeviceOrHostAddressKHR,
    pub mode: VkCopyAccelerationStructureModeKHR,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkCopyMemoryToAccelerationStructureInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub src: VkDeviceOrHostAddressConstKHR,
    pub dst: VkAccelerationStructureKHR,
    pub mode: VkCopyAccelerationStructureModeKHR,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkCopyAccelerationStructureInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub src: VkAccelerationStructureKHR,
    pub dst: VkAccelerationStructureKHR,
    pub mode: VkCopyAccelerationStructureModeKHR,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkRayTracingShaderGroupCreateInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub type_: VkRayTracingShaderGroupTypeKHR,
    pub generalShader: u32,
    pub closestHitShader: u32,
    pub anyHitShader: u32,
    pub intersectionShader: u32,
    pub pShaderGroupCaptureReplayHandle: *const ::core::ffi::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkRayTracingPipelineInterfaceCreateInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub maxPipelineRayPayloadSize: u32,
    pub maxPipelineRayHitAttributeSize: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkRayTracingPipelineCreateInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: VkPipelineCreateFlags,
    pub stageCount: u32,
    pub pStages: *const VkPipelineShaderStageCreateInfo,
    pub groupCount: u32,
    pub pGroups: *const VkRayTracingShaderGroupCreateInfoKHR,
    pub maxPipelineRayRecursionDepth: u32,
    pub pLibraryInfo: *const VkPipelineLibraryCreateInfoKHR,
    pub pLibraryInterface: *const VkRayTracingPipelineInterfaceCreateInfoKHR,
    pub pDynamicState: *const VkPipelineDynamicStateCreateInfo,
    pub layout: VkPipelineLayout,
    pub basePipelineHandle: VkPipeline,
    pub basePipelineIndex: i32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceRayTracingPipelineFeaturesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub rayTracingPipeline: VkBool32,
    pub rayTracingPipelineShaderGroupHandleCaptureReplay: VkBool32,
    pub rayTracingPipelineShaderGroupHandleCaptureReplayMixed: VkBool32,
    pub rayTracingPipelineTraceRaysIndirect: VkBool32,
    pub rayTraversalPrimitiveCulling: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceRayTracingPipelinePropertiesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub shaderGroupHandleSize: u32,
    pub maxRayRecursionDepth: u32,
    pub maxShaderGroupStride: u32,
    pub shaderGroupBaseAlignment: u32,
    pub shaderGroupHandleCaptureReplaySize: u32,
    pub maxRayDispatchInvocationCount: u32,
    pub shaderGroupHandleAlignment: u32,
    pub maxRayHitAttributeSize: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkTraceRaysIndirectCommandKHR {
    pub width: u32,
    pub height: u32,
    pub depth: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceRayQueryFeaturesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub rayQuery: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceMeshShaderFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub taskShader: VkBool32,
    pub meshShader: VkBool32,
    pub multiviewMeshShader: VkBool32,
    pub primitiveFragmentShadingRateMeshShader: VkBool32,
    pub meshShaderQueries: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDeviceMeshShaderPropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::core::ffi::c_void,
    pub maxTaskWorkGroupTotalCount: u32,
    pub maxTaskWorkGroupCount: [u32; 3usize],
    pub maxTaskWorkGroupInvocations: u32,
    pub maxTaskWorkGroupSize: [u32; 3usize],
    pub maxTaskPayloadSize: u32,
    pub maxTaskSharedMemorySize: u32,
    pub maxTaskPayloadAndSharedMemorySize: u32,
    pub maxMeshWorkGroupTotalCount: u32,
    pub maxMeshWorkGroupCount: [u32; 3usize],
    pub maxMeshWorkGroupInvocations: u32,
    pub maxMeshWorkGroupSize: [u32; 3usize],
    pub maxMeshSharedMemorySize: u32,
    pub maxMeshPayloadAndSharedMemorySize: u32,
    pub maxMeshOutputMemorySize: u32,
    pub maxMeshPayloadAndOutputMemorySize: u32,
    pub maxMeshOutputComponents: u32,
    pub maxMeshOutputVertices: u32,
    pub maxMeshOutputPrimitives: u32,
    pub maxMeshOutputLayers: u32,
    pub maxMeshMultiviewViewCount: u32,
    pub meshOutputPerVertexGranularity: u32,
    pub meshOutputPerPrimitiveGranularity: u32,
    pub maxPreferredTaskWorkGroupInvocations: u32,
    pub maxPreferredMeshWorkGroupInvocations: u32,
    pub prefersLocalInvocationVertexOutput: VkBool32,
    pub prefersLocalInvocationPrimitiveOutput: VkBool32,
    pub prefersCompactVertexOutput: VkBool32,
    pub prefersCompactPrimitiveOutput: VkBool32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDrawMeshTasksIndirectCommandEXT {
    pub groupCountX: u32,
    pub groupCountY: u32,
    pub groupCountZ: u32,
}
pub const VULKAN_CORE_H_: u32 = 1;
pub const VK_VERSION_1_0: u32 = 1;
pub const VK_USE_64_BIT_PTR_DEFINES: u32 = 0;
pub const VK_NULL_HANDLE: u32 = 0;
pub const VK_HEADER_VERSION: u32 = 315;
pub const VK_ATTACHMENT_UNUSED: i32 = -1;
pub const VK_FALSE: u32 = 0;
pub const VK_LOD_CLAMP_NONE: f64 = 1000.0;
pub const VK_QUEUE_FAMILY_IGNORED: i32 = -1;
pub const VK_REMAINING_ARRAY_LAYERS: i32 = -1;
pub const VK_REMAINING_MIP_LEVELS: i32 = -1;
pub const VK_SUBPASS_EXTERNAL: i32 = -1;
pub const VK_TRUE: u32 = 1;
pub const VK_WHOLE_SIZE: i32 = -1;
pub const VK_MAX_MEMORY_TYPES: u32 = 32;
pub const VK_MAX_PHYSICAL_DEVICE_NAME_SIZE: u32 = 256;
pub const VK_UUID_SIZE: u32 = 16;
pub const VK_MAX_EXTENSION_NAME_SIZE: u32 = 256;
pub const VK_MAX_DESCRIPTION_SIZE: u32 = 256;
pub const VK_MAX_MEMORY_HEAPS: u32 = 16;
pub const VK_VERSION_1_1: u32 = 1;
pub const VK_MAX_DEVICE_GROUP_SIZE: u32 = 32;
pub const VK_LUID_SIZE: u32 = 8;
pub const VK_QUEUE_FAMILY_EXTERNAL: i32 = -2;
pub const VK_VERSION_1_2: u32 = 1;
pub const VK_MAX_DRIVER_NAME_SIZE: u32 = 256;
pub const VK_MAX_DRIVER_INFO_SIZE: u32 = 256;
pub const VK_VERSION_1_3: u32 = 1;
pub const VK_VERSION_1_4: u32 = 1;
pub const VK_MAX_GLOBAL_PRIORITY_SIZE: u32 = 16;
pub const VK_KHR_surface: u32 = 1;
pub const VK_KHR_SURFACE_SPEC_VERSION: u32 = 25;
pub const VK_KHR_SURFACE_EXTENSION_NAME: &[u8; 15] = b"VK_KHR_surface\0";
pub const VK_KHR_swapchain: u32 = 1;
pub const VK_KHR_SWAPCHAIN_SPEC_VERSION: u32 = 70;
pub const VK_KHR_SWAPCHAIN_EXTENSION_NAME: &[u8; 17] = b"VK_KHR_swapchain\0";
pub const VK_KHR_display: u32 = 1;
pub const VK_KHR_DISPLAY_SPEC_VERSION: u32 = 23;
pub const VK_KHR_DISPLAY_EXTENSION_NAME: &[u8; 15] = b"VK_KHR_display\0";
pub const VK_KHR_display_swapchain: u32 = 1;
pub const VK_KHR_DISPLAY_SWAPCHAIN_SPEC_VERSION: u32 = 10;
pub const VK_KHR_DISPLAY_SWAPCHAIN_EXTENSION_NAME: &[u8; 25] = b"VK_KHR_display_swapchain\0";
pub const VK_KHR_sampler_mirror_clamp_to_edge: u32 = 1;
pub const VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_SPEC_VERSION: u32 = 3;
pub const VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_EXTENSION_NAME: &[u8; 36] =
    b"VK_KHR_sampler_mirror_clamp_to_edge\0";
pub const VK_KHR_video_queue: u32 = 1;
pub const VK_KHR_VIDEO_QUEUE_SPEC_VERSION: u32 = 8;
pub const VK_KHR_VIDEO_QUEUE_EXTENSION_NAME: &[u8; 19] = b"VK_KHR_video_queue\0";
pub const VK_KHR_video_decode_queue: u32 = 1;
pub const VK_KHR_VIDEO_DECODE_QUEUE_SPEC_VERSION: u32 = 8;
pub const VK_KHR_VIDEO_DECODE_QUEUE_EXTENSION_NAME: &[u8; 26] = b"VK_KHR_video_decode_queue\0";
pub const VK_KHR_video_encode_h264: u32 = 1;
pub const VK_KHR_VIDEO_ENCODE_H264_SPEC_VERSION: u32 = 14;
pub const VK_KHR_VIDEO_ENCODE_H264_EXTENSION_NAME: &[u8; 25] = b"VK_KHR_video_encode_h264\0";
pub const VK_KHR_video_encode_h265: u32 = 1;
pub const VK_KHR_VIDEO_ENCODE_H265_SPEC_VERSION: u32 = 14;
pub const VK_KHR_VIDEO_ENCODE_H265_EXTENSION_NAME: &[u8; 25] = b"VK_KHR_video_encode_h265\0";
pub const VK_KHR_video_decode_h264: u32 = 1;
pub const VK_KHR_VIDEO_DECODE_H264_SPEC_VERSION: u32 = 9;
pub const VK_KHR_VIDEO_DECODE_H264_EXTENSION_NAME: &[u8; 25] = b"VK_KHR_video_decode_h264\0";
pub const VK_KHR_dynamic_rendering: u32 = 1;
pub const VK_KHR_DYNAMIC_RENDERING_SPEC_VERSION: u32 = 1;
pub const VK_KHR_DYNAMIC_RENDERING_EXTENSION_NAME: &[u8; 25] = b"VK_KHR_dynamic_rendering\0";
pub const VK_KHR_multiview: u32 = 1;
pub const VK_KHR_MULTIVIEW_SPEC_VERSION: u32 = 1;
pub const VK_KHR_MULTIVIEW_EXTENSION_NAME: &[u8; 17] = b"VK_KHR_multiview\0";
pub const VK_KHR_get_physical_device_properties2: u32 = 1;
pub const VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_SPEC_VERSION: u32 = 2;
pub const VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_EXTENSION_NAME: &[u8; 39] =
    b"VK_KHR_get_physical_device_properties2\0";
pub const VK_KHR_device_group: u32 = 1;
pub const VK_KHR_DEVICE_GROUP_SPEC_VERSION: u32 = 4;
pub const VK_KHR_DEVICE_GROUP_EXTENSION_NAME: &[u8; 20] = b"VK_KHR_device_group\0";
pub const VK_KHR_shader_draw_parameters: u32 = 1;
pub const VK_KHR_SHADER_DRAW_PARAMETERS_SPEC_VERSION: u32 = 1;
pub const VK_KHR_SHADER_DRAW_PARAMETERS_EXTENSION_NAME: &[u8; 30] =
    b"VK_KHR_shader_draw_parameters\0";
pub const VK_KHR_maintenance1: u32 = 1;
pub const VK_KHR_MAINTENANCE_1_SPEC_VERSION: u32 = 2;
pub const VK_KHR_MAINTENANCE_1_EXTENSION_NAME: &[u8; 20] = b"VK_KHR_maintenance1\0";
pub const VK_KHR_MAINTENANCE1_SPEC_VERSION: u32 = 2;
pub const VK_KHR_MAINTENANCE1_EXTENSION_NAME: &[u8; 20] = b"VK_KHR_maintenance1\0";
pub const VK_KHR_device_group_creation: u32 = 1;
pub const VK_KHR_DEVICE_GROUP_CREATION_SPEC_VERSION: u32 = 1;
pub const VK_KHR_DEVICE_GROUP_CREATION_EXTENSION_NAME: &[u8; 29] =
    b"VK_KHR_device_group_creation\0";
pub const VK_MAX_DEVICE_GROUP_SIZE_KHR: u32 = 32;
pub const VK_KHR_external_memory_capabilities: u32 = 1;
pub const VK_KHR_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION: u32 = 1;
pub const VK_KHR_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME: &[u8; 36] =
    b"VK_KHR_external_memory_capabilities\0";
pub const VK_LUID_SIZE_KHR: u32 = 8;
pub const VK_KHR_external_memory: u32 = 1;
pub const VK_KHR_EXTERNAL_MEMORY_SPEC_VERSION: u32 = 1;
pub const VK_KHR_EXTERNAL_MEMORY_EXTENSION_NAME: &[u8; 23] = b"VK_KHR_external_memory\0";
pub const VK_QUEUE_FAMILY_EXTERNAL_KHR: i32 = -2;
pub const VK_KHR_external_memory_fd: u32 = 1;
pub const VK_KHR_EXTERNAL_MEMORY_FD_SPEC_VERSION: u32 = 1;
pub const VK_KHR_EXTERNAL_MEMORY_FD_EXTENSION_NAME: &[u8; 26] = b"VK_KHR_external_memory_fd\0";
pub const VK_KHR_external_semaphore_capabilities: u32 = 1;
pub const VK_KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_SPEC_VERSION: u32 = 1;
pub const VK_KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_EXTENSION_NAME: &[u8; 39] =
    b"VK_KHR_external_semaphore_capabilities\0";
pub const VK_KHR_external_semaphore: u32 = 1;
pub const VK_KHR_EXTERNAL_SEMAPHORE_SPEC_VERSION: u32 = 1;
pub const VK_KHR_EXTERNAL_SEMAPHORE_EXTENSION_NAME: &[u8; 26] = b"VK_KHR_external_semaphore\0";
pub const VK_KHR_external_semaphore_fd: u32 = 1;
pub const VK_KHR_EXTERNAL_SEMAPHORE_FD_SPEC_VERSION: u32 = 1;
pub const VK_KHR_EXTERNAL_SEMAPHORE_FD_EXTENSION_NAME: &[u8; 29] =
    b"VK_KHR_external_semaphore_fd\0";
pub const VK_KHR_push_descriptor: u32 = 1;
pub const VK_KHR_PUSH_DESCRIPTOR_SPEC_VERSION: u32 = 2;
pub const VK_KHR_PUSH_DESCRIPTOR_EXTENSION_NAME: &[u8; 23] = b"VK_KHR_push_descriptor\0";
pub const VK_KHR_shader_float16_int8: u32 = 1;
pub const VK_KHR_SHADER_FLOAT16_INT8_SPEC_VERSION: u32 = 1;
pub const VK_KHR_SHADER_FLOAT16_INT8_EXTENSION_NAME: &[u8; 27] = b"VK_KHR_shader_float16_int8\0";
pub const VK_KHR_16bit_storage: u32 = 1;
pub const VK_KHR_16BIT_STORAGE_SPEC_VERSION: u32 = 1;
pub const VK_KHR_16BIT_STORAGE_EXTENSION_NAME: &[u8; 21] = b"VK_KHR_16bit_storage\0";
pub const VK_KHR_incremental_present: u32 = 1;
pub const VK_KHR_INCREMENTAL_PRESENT_SPEC_VERSION: u32 = 2;
pub const VK_KHR_INCREMENTAL_PRESENT_EXTENSION_NAME: &[u8; 27] = b"VK_KHR_incremental_present\0";
pub const VK_KHR_descriptor_update_template: u32 = 1;
pub const VK_KHR_DESCRIPTOR_UPDATE_TEMPLATE_SPEC_VERSION: u32 = 1;
pub const VK_KHR_DESCRIPTOR_UPDATE_TEMPLATE_EXTENSION_NAME: &[u8; 34] =
    b"VK_KHR_descriptor_update_template\0";
pub const VK_KHR_imageless_framebuffer: u32 = 1;
pub const VK_KHR_IMAGELESS_FRAMEBUFFER_SPEC_VERSION: u32 = 1;
pub const VK_KHR_IMAGELESS_FRAMEBUFFER_EXTENSION_NAME: &[u8; 29] =
    b"VK_KHR_imageless_framebuffer\0";
pub const VK_KHR_create_renderpass2: u32 = 1;
pub const VK_KHR_CREATE_RENDERPASS_2_SPEC_VERSION: u32 = 1;
pub const VK_KHR_CREATE_RENDERPASS_2_EXTENSION_NAME: &[u8; 26] = b"VK_KHR_create_renderpass2\0";
pub const VK_KHR_shared_presentable_image: u32 = 1;
pub const VK_KHR_SHARED_PRESENTABLE_IMAGE_SPEC_VERSION: u32 = 1;
pub const VK_KHR_SHARED_PRESENTABLE_IMAGE_EXTENSION_NAME: &[u8; 32] =
    b"VK_KHR_shared_presentable_image\0";
pub const VK_KHR_external_fence_capabilities: u32 = 1;
pub const VK_KHR_EXTERNAL_FENCE_CAPABILITIES_SPEC_VERSION: u32 = 1;
pub const VK_KHR_EXTERNAL_FENCE_CAPABILITIES_EXTENSION_NAME: &[u8; 35] =
    b"VK_KHR_external_fence_capabilities\0";
pub const VK_KHR_external_fence: u32 = 1;
pub const VK_KHR_EXTERNAL_FENCE_SPEC_VERSION: u32 = 1;
pub const VK_KHR_EXTERNAL_FENCE_EXTENSION_NAME: &[u8; 22] = b"VK_KHR_external_fence\0";
pub const VK_KHR_external_fence_fd: u32 = 1;
pub const VK_KHR_EXTERNAL_FENCE_FD_SPEC_VERSION: u32 = 1;
pub const VK_KHR_EXTERNAL_FENCE_FD_EXTENSION_NAME: &[u8; 25] = b"VK_KHR_external_fence_fd\0";
pub const VK_KHR_performance_query: u32 = 1;
pub const VK_KHR_PERFORMANCE_QUERY_SPEC_VERSION: u32 = 1;
pub const VK_KHR_PERFORMANCE_QUERY_EXTENSION_NAME: &[u8; 25] = b"VK_KHR_performance_query\0";
pub const VK_KHR_maintenance2: u32 = 1;
pub const VK_KHR_MAINTENANCE_2_SPEC_VERSION: u32 = 1;
pub const VK_KHR_MAINTENANCE_2_EXTENSION_NAME: &[u8; 20] = b"VK_KHR_maintenance2\0";
pub const VK_KHR_MAINTENANCE2_SPEC_VERSION: u32 = 1;
pub const VK_KHR_MAINTENANCE2_EXTENSION_NAME: &[u8; 20] = b"VK_KHR_maintenance2\0";
pub const VK_KHR_get_surface_capabilities2: u32 = 1;
pub const VK_KHR_GET_SURFACE_CAPABILITIES_2_SPEC_VERSION: u32 = 1;
pub const VK_KHR_GET_SURFACE_CAPABILITIES_2_EXTENSION_NAME: &[u8; 33] =
    b"VK_KHR_get_surface_capabilities2\0";
pub const VK_KHR_variable_pointers: u32 = 1;
pub const VK_KHR_VARIABLE_POINTERS_SPEC_VERSION: u32 = 1;
pub const VK_KHR_VARIABLE_POINTERS_EXTENSION_NAME: &[u8; 25] = b"VK_KHR_variable_pointers\0";
pub const VK_KHR_get_display_properties2: u32 = 1;
pub const VK_KHR_GET_DISPLAY_PROPERTIES_2_SPEC_VERSION: u32 = 1;
pub const VK_KHR_GET_DISPLAY_PROPERTIES_2_EXTENSION_NAME: &[u8; 31] =
    b"VK_KHR_get_display_properties2\0";
pub const VK_KHR_dedicated_allocation: u32 = 1;
pub const VK_KHR_DEDICATED_ALLOCATION_SPEC_VERSION: u32 = 3;
pub const VK_KHR_DEDICATED_ALLOCATION_EXTENSION_NAME: &[u8; 28] = b"VK_KHR_dedicated_allocation\0";
pub const VK_KHR_storage_buffer_storage_class: u32 = 1;
pub const VK_KHR_STORAGE_BUFFER_STORAGE_CLASS_SPEC_VERSION: u32 = 1;
pub const VK_KHR_STORAGE_BUFFER_STORAGE_CLASS_EXTENSION_NAME: &[u8; 36] =
    b"VK_KHR_storage_buffer_storage_class\0";
pub const VK_KHR_shader_bfloat16: u32 = 1;
pub const VK_KHR_SHADER_BFLOAT16_SPEC_VERSION: u32 = 1;
pub const VK_KHR_SHADER_BFLOAT16_EXTENSION_NAME: &[u8; 23] = b"VK_KHR_shader_bfloat16\0";
pub const VK_KHR_relaxed_block_layout: u32 = 1;
pub const VK_KHR_RELAXED_BLOCK_LAYOUT_SPEC_VERSION: u32 = 1;
pub const VK_KHR_RELAXED_BLOCK_LAYOUT_EXTENSION_NAME: &[u8; 28] = b"VK_KHR_relaxed_block_layout\0";
pub const VK_KHR_get_memory_requirements2: u32 = 1;
pub const VK_KHR_GET_MEMORY_REQUIREMENTS_2_SPEC_VERSION: u32 = 1;
pub const VK_KHR_GET_MEMORY_REQUIREMENTS_2_EXTENSION_NAME: &[u8; 32] =
    b"VK_KHR_get_memory_requirements2\0";
pub const VK_KHR_image_format_list: u32 = 1;
pub const VK_KHR_IMAGE_FORMAT_LIST_SPEC_VERSION: u32 = 1;
pub const VK_KHR_IMAGE_FORMAT_LIST_EXTENSION_NAME: &[u8; 25] = b"VK_KHR_image_format_list\0";
pub const VK_KHR_sampler_ycbcr_conversion: u32 = 1;
pub const VK_KHR_SAMPLER_YCBCR_CONVERSION_SPEC_VERSION: u32 = 14;
pub const VK_KHR_SAMPLER_YCBCR_CONVERSION_EXTENSION_NAME: &[u8; 32] =
    b"VK_KHR_sampler_ycbcr_conversion\0";
pub const VK_KHR_bind_memory2: u32 = 1;
pub const VK_KHR_BIND_MEMORY_2_SPEC_VERSION: u32 = 1;
pub const VK_KHR_BIND_MEMORY_2_EXTENSION_NAME: &[u8; 20] = b"VK_KHR_bind_memory2\0";
pub const VK_KHR_maintenance3: u32 = 1;
pub const VK_KHR_MAINTENANCE_3_SPEC_VERSION: u32 = 1;
pub const VK_KHR_MAINTENANCE_3_EXTENSION_NAME: &[u8; 20] = b"VK_KHR_maintenance3\0";
pub const VK_KHR_MAINTENANCE3_SPEC_VERSION: u32 = 1;
pub const VK_KHR_MAINTENANCE3_EXTENSION_NAME: &[u8; 20] = b"VK_KHR_maintenance3\0";
pub const VK_KHR_draw_indirect_count: u32 = 1;
pub const VK_KHR_DRAW_INDIRECT_COUNT_SPEC_VERSION: u32 = 1;
pub const VK_KHR_DRAW_INDIRECT_COUNT_EXTENSION_NAME: &[u8; 27] = b"VK_KHR_draw_indirect_count\0";
pub const VK_KHR_shader_subgroup_extended_types: u32 = 1;
pub const VK_KHR_SHADER_SUBGROUP_EXTENDED_TYPES_SPEC_VERSION: u32 = 1;
pub const VK_KHR_SHADER_SUBGROUP_EXTENDED_TYPES_EXTENSION_NAME: &[u8; 38] =
    b"VK_KHR_shader_subgroup_extended_types\0";
pub const VK_KHR_8bit_storage: u32 = 1;
pub const VK_KHR_8BIT_STORAGE_SPEC_VERSION: u32 = 1;
pub const VK_KHR_8BIT_STORAGE_EXTENSION_NAME: &[u8; 20] = b"VK_KHR_8bit_storage\0";
pub const VK_KHR_shader_atomic_int64: u32 = 1;
pub const VK_KHR_SHADER_ATOMIC_INT64_SPEC_VERSION: u32 = 1;
pub const VK_KHR_SHADER_ATOMIC_INT64_EXTENSION_NAME: &[u8; 27] = b"VK_KHR_shader_atomic_int64\0";
pub const VK_KHR_shader_clock: u32 = 1;
pub const VK_KHR_SHADER_CLOCK_SPEC_VERSION: u32 = 1;
pub const VK_KHR_SHADER_CLOCK_EXTENSION_NAME: &[u8; 20] = b"VK_KHR_shader_clock\0";
pub const VK_KHR_video_decode_h265: u32 = 1;
pub const VK_KHR_VIDEO_DECODE_H265_SPEC_VERSION: u32 = 8;
pub const VK_KHR_VIDEO_DECODE_H265_EXTENSION_NAME: &[u8; 25] = b"VK_KHR_video_decode_h265\0";
pub const VK_KHR_global_priority: u32 = 1;
pub const VK_KHR_GLOBAL_PRIORITY_SPEC_VERSION: u32 = 1;
pub const VK_KHR_GLOBAL_PRIORITY_EXTENSION_NAME: &[u8; 23] = b"VK_KHR_global_priority\0";
pub const VK_MAX_GLOBAL_PRIORITY_SIZE_KHR: u32 = 16;
pub const VK_KHR_driver_properties: u32 = 1;
pub const VK_KHR_DRIVER_PROPERTIES_SPEC_VERSION: u32 = 1;
pub const VK_KHR_DRIVER_PROPERTIES_EXTENSION_NAME: &[u8; 25] = b"VK_KHR_driver_properties\0";
pub const VK_MAX_DRIVER_NAME_SIZE_KHR: u32 = 256;
pub const VK_MAX_DRIVER_INFO_SIZE_KHR: u32 = 256;
pub const VK_KHR_shader_float_controls: u32 = 1;
pub const VK_KHR_SHADER_FLOAT_CONTROLS_SPEC_VERSION: u32 = 4;
pub const VK_KHR_SHADER_FLOAT_CONTROLS_EXTENSION_NAME: &[u8; 29] =
    b"VK_KHR_shader_float_controls\0";
pub const VK_KHR_depth_stencil_resolve: u32 = 1;
pub const VK_KHR_DEPTH_STENCIL_RESOLVE_SPEC_VERSION: u32 = 1;
pub const VK_KHR_DEPTH_STENCIL_RESOLVE_EXTENSION_NAME: &[u8; 29] =
    b"VK_KHR_depth_stencil_resolve\0";
pub const VK_KHR_swapchain_mutable_format: u32 = 1;
pub const VK_KHR_SWAPCHAIN_MUTABLE_FORMAT_SPEC_VERSION: u32 = 1;
pub const VK_KHR_SWAPCHAIN_MUTABLE_FORMAT_EXTENSION_NAME: &[u8; 32] =
    b"VK_KHR_swapchain_mutable_format\0";
pub const VK_KHR_timeline_semaphore: u32 = 1;
pub const VK_KHR_TIMELINE_SEMAPHORE_SPEC_VERSION: u32 = 2;
pub const VK_KHR_TIMELINE_SEMAPHORE_EXTENSION_NAME: &[u8; 26] = b"VK_KHR_timeline_semaphore\0";
pub const VK_KHR_vulkan_memory_model: u32 = 1;
pub const VK_KHR_VULKAN_MEMORY_MODEL_SPEC_VERSION: u32 = 3;
pub const VK_KHR_VULKAN_MEMORY_MODEL_EXTENSION_NAME: &[u8; 27] = b"VK_KHR_vulkan_memory_model\0";
pub const VK_KHR_shader_terminate_invocation: u32 = 1;
pub const VK_KHR_SHADER_TERMINATE_INVOCATION_SPEC_VERSION: u32 = 1;
pub const VK_KHR_SHADER_TERMINATE_INVOCATION_EXTENSION_NAME: &[u8; 35] =
    b"VK_KHR_shader_terminate_invocation\0";
pub const VK_KHR_fragment_shading_rate: u32 = 1;
pub const VK_KHR_FRAGMENT_SHADING_RATE_SPEC_VERSION: u32 = 2;
pub const VK_KHR_FRAGMENT_SHADING_RATE_EXTENSION_NAME: &[u8; 29] =
    b"VK_KHR_fragment_shading_rate\0";
pub const VK_KHR_dynamic_rendering_local_read: u32 = 1;
pub const VK_KHR_DYNAMIC_RENDERING_LOCAL_READ_SPEC_VERSION: u32 = 1;
pub const VK_KHR_DYNAMIC_RENDERING_LOCAL_READ_EXTENSION_NAME: &[u8; 36] =
    b"VK_KHR_dynamic_rendering_local_read\0";
pub const VK_KHR_shader_quad_control: u32 = 1;
pub const VK_KHR_SHADER_QUAD_CONTROL_SPEC_VERSION: u32 = 1;
pub const VK_KHR_SHADER_QUAD_CONTROL_EXTENSION_NAME: &[u8; 27] = b"VK_KHR_shader_quad_control\0";
pub const VK_KHR_spirv_1_4: u32 = 1;
pub const VK_KHR_SPIRV_1_4_SPEC_VERSION: u32 = 1;
pub const VK_KHR_SPIRV_1_4_EXTENSION_NAME: &[u8; 17] = b"VK_KHR_spirv_1_4\0";
pub const VK_KHR_surface_protected_capabilities: u32 = 1;
pub const VK_KHR_SURFACE_PROTECTED_CAPABILITIES_SPEC_VERSION: u32 = 1;
pub const VK_KHR_SURFACE_PROTECTED_CAPABILITIES_EXTENSION_NAME: &[u8; 38] =
    b"VK_KHR_surface_protected_capabilities\0";
pub const VK_KHR_separate_depth_stencil_layouts: u32 = 1;
pub const VK_KHR_SEPARATE_DEPTH_STENCIL_LAYOUTS_SPEC_VERSION: u32 = 1;
pub const VK_KHR_SEPARATE_DEPTH_STENCIL_LAYOUTS_EXTENSION_NAME: &[u8; 38] =
    b"VK_KHR_separate_depth_stencil_layouts\0";
pub const VK_KHR_present_wait: u32 = 1;
pub const VK_KHR_PRESENT_WAIT_SPEC_VERSION: u32 = 1;
pub const VK_KHR_PRESENT_WAIT_EXTENSION_NAME: &[u8; 20] = b"VK_KHR_present_wait\0";
pub const VK_KHR_uniform_buffer_standard_layout: u32 = 1;
pub const VK_KHR_UNIFORM_BUFFER_STANDARD_LAYOUT_SPEC_VERSION: u32 = 1;
pub const VK_KHR_UNIFORM_BUFFER_STANDARD_LAYOUT_EXTENSION_NAME: &[u8; 38] =
    b"VK_KHR_uniform_buffer_standard_layout\0";
pub const VK_KHR_buffer_device_address: u32 = 1;
pub const VK_KHR_BUFFER_DEVICE_ADDRESS_SPEC_VERSION: u32 = 1;
pub const VK_KHR_BUFFER_DEVICE_ADDRESS_EXTENSION_NAME: &[u8; 29] =
    b"VK_KHR_buffer_device_address\0";
pub const VK_KHR_deferred_host_operations: u32 = 1;
pub const VK_KHR_DEFERRED_HOST_OPERATIONS_SPEC_VERSION: u32 = 4;
pub const VK_KHR_DEFERRED_HOST_OPERATIONS_EXTENSION_NAME: &[u8; 32] =
    b"VK_KHR_deferred_host_operations\0";
pub const VK_KHR_pipeline_executable_properties: u32 = 1;
pub const VK_KHR_PIPELINE_EXECUTABLE_PROPERTIES_SPEC_VERSION: u32 = 1;
pub const VK_KHR_PIPELINE_EXECUTABLE_PROPERTIES_EXTENSION_NAME: &[u8; 38] =
    b"VK_KHR_pipeline_executable_properties\0";
pub const VK_KHR_map_memory2: u32 = 1;
pub const VK_KHR_MAP_MEMORY_2_SPEC_VERSION: u32 = 1;
pub const VK_KHR_MAP_MEMORY_2_EXTENSION_NAME: &[u8; 19] = b"VK_KHR_map_memory2\0";
pub const VK_KHR_shader_integer_dot_product: u32 = 1;
pub const VK_KHR_SHADER_INTEGER_DOT_PRODUCT_SPEC_VERSION: u32 = 1;
pub const VK_KHR_SHADER_INTEGER_DOT_PRODUCT_EXTENSION_NAME: &[u8; 34] =
    b"VK_KHR_shader_integer_dot_product\0";
pub const VK_KHR_pipeline_library: u32 = 1;
pub const VK_KHR_PIPELINE_LIBRARY_SPEC_VERSION: u32 = 1;
pub const VK_KHR_PIPELINE_LIBRARY_EXTENSION_NAME: &[u8; 24] = b"VK_KHR_pipeline_library\0";
pub const VK_KHR_shader_non_semantic_info: u32 = 1;
pub const VK_KHR_SHADER_NON_SEMANTIC_INFO_SPEC_VERSION: u32 = 1;
pub const VK_KHR_SHADER_NON_SEMANTIC_INFO_EXTENSION_NAME: &[u8; 32] =
    b"VK_KHR_shader_non_semantic_info\0";
pub const VK_KHR_present_id: u32 = 1;
pub const VK_KHR_PRESENT_ID_SPEC_VERSION: u32 = 1;
pub const VK_KHR_PRESENT_ID_EXTENSION_NAME: &[u8; 18] = b"VK_KHR_present_id\0";
pub const VK_KHR_video_encode_queue: u32 = 1;
pub const VK_KHR_VIDEO_ENCODE_QUEUE_SPEC_VERSION: u32 = 12;
pub const VK_KHR_VIDEO_ENCODE_QUEUE_EXTENSION_NAME: &[u8; 26] = b"VK_KHR_video_encode_queue\0";
pub const VK_KHR_synchronization2: u32 = 1;
pub const VK_KHR_SYNCHRONIZATION_2_SPEC_VERSION: u32 = 1;
pub const VK_KHR_SYNCHRONIZATION_2_EXTENSION_NAME: &[u8; 24] = b"VK_KHR_synchronization2\0";
pub const VK_KHR_fragment_shader_barycentric: u32 = 1;
pub const VK_KHR_FRAGMENT_SHADER_BARYCENTRIC_SPEC_VERSION: u32 = 1;
pub const VK_KHR_FRAGMENT_SHADER_BARYCENTRIC_EXTENSION_NAME: &[u8; 35] =
    b"VK_KHR_fragment_shader_barycentric\0";
pub const VK_KHR_shader_subgroup_uniform_control_flow: u32 = 1;
pub const VK_KHR_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_SPEC_VERSION: u32 = 1;
pub const VK_KHR_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_EXTENSION_NAME: &[u8; 44] =
    b"VK_KHR_shader_subgroup_uniform_control_flow\0";
pub const VK_KHR_zero_initialize_workgroup_memory: u32 = 1;
pub const VK_KHR_ZERO_INITIALIZE_WORKGROUP_MEMORY_SPEC_VERSION: u32 = 1;
pub const VK_KHR_ZERO_INITIALIZE_WORKGROUP_MEMORY_EXTENSION_NAME: &[u8; 40] =
    b"VK_KHR_zero_initialize_workgroup_memory\0";
pub const VK_KHR_workgroup_memory_explicit_layout: u32 = 1;
pub const VK_KHR_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_SPEC_VERSION: u32 = 1;
pub const VK_KHR_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_EXTENSION_NAME: &[u8; 40] =
    b"VK_KHR_workgroup_memory_explicit_layout\0";
pub const VK_KHR_copy_commands2: u32 = 1;
pub const VK_KHR_COPY_COMMANDS_2_SPEC_VERSION: u32 = 1;
pub const VK_KHR_COPY_COMMANDS_2_EXTENSION_NAME: &[u8; 22] = b"VK_KHR_copy_commands2\0";
pub const VK_KHR_format_feature_flags2: u32 = 1;
pub const VK_KHR_FORMAT_FEATURE_FLAGS_2_SPEC_VERSION: u32 = 2;
pub const VK_KHR_FORMAT_FEATURE_FLAGS_2_EXTENSION_NAME: &[u8; 29] =
    b"VK_KHR_format_feature_flags2\0";
pub const VK_KHR_ray_tracing_maintenance1: u32 = 1;
pub const VK_KHR_RAY_TRACING_MAINTENANCE_1_SPEC_VERSION: u32 = 1;
pub const VK_KHR_RAY_TRACING_MAINTENANCE_1_EXTENSION_NAME: &[u8; 32] =
    b"VK_KHR_ray_tracing_maintenance1\0";
pub const VK_KHR_portability_enumeration: u32 = 1;
pub const VK_KHR_PORTABILITY_ENUMERATION_SPEC_VERSION: u32 = 1;
pub const VK_KHR_PORTABILITY_ENUMERATION_EXTENSION_NAME: &[u8; 31] =
    b"VK_KHR_portability_enumeration\0";
pub const VK_KHR_maintenance4: u32 = 1;
pub const VK_KHR_MAINTENANCE_4_SPEC_VERSION: u32 = 2;
pub const VK_KHR_MAINTENANCE_4_EXTENSION_NAME: &[u8; 20] = b"VK_KHR_maintenance4\0";
pub const VK_KHR_shader_subgroup_rotate: u32 = 1;
pub const VK_KHR_SHADER_SUBGROUP_ROTATE_SPEC_VERSION: u32 = 2;
pub const VK_KHR_SHADER_SUBGROUP_ROTATE_EXTENSION_NAME: &[u8; 30] =
    b"VK_KHR_shader_subgroup_rotate\0";
pub const VK_KHR_shader_maximal_reconvergence: u32 = 1;
pub const VK_KHR_SHADER_MAXIMAL_RECONVERGENCE_SPEC_VERSION: u32 = 1;
pub const VK_KHR_SHADER_MAXIMAL_RECONVERGENCE_EXTENSION_NAME: &[u8; 36] =
    b"VK_KHR_shader_maximal_reconvergence\0";
pub const VK_KHR_maintenance5: u32 = 1;
pub const VK_KHR_MAINTENANCE_5_SPEC_VERSION: u32 = 1;
pub const VK_KHR_MAINTENANCE_5_EXTENSION_NAME: &[u8; 20] = b"VK_KHR_maintenance5\0";
pub const VK_KHR_ray_tracing_position_fetch: u32 = 1;
pub const VK_KHR_RAY_TRACING_POSITION_FETCH_SPEC_VERSION: u32 = 1;
pub const VK_KHR_RAY_TRACING_POSITION_FETCH_EXTENSION_NAME: &[u8; 34] =
    b"VK_KHR_ray_tracing_position_fetch\0";
pub const VK_KHR_pipeline_binary: u32 = 1;
pub const VK_MAX_PIPELINE_BINARY_KEY_SIZE_KHR: u32 = 32;
pub const VK_KHR_PIPELINE_BINARY_SPEC_VERSION: u32 = 1;
pub const VK_KHR_PIPELINE_BINARY_EXTENSION_NAME: &[u8; 23] = b"VK_KHR_pipeline_binary\0";
pub const VK_KHR_cooperative_matrix: u32 = 1;
pub const VK_KHR_COOPERATIVE_MATRIX_SPEC_VERSION: u32 = 2;
pub const VK_KHR_COOPERATIVE_MATRIX_EXTENSION_NAME: &[u8; 26] = b"VK_KHR_cooperative_matrix\0";
pub const VK_KHR_compute_shader_derivatives: u32 = 1;
pub const VK_KHR_COMPUTE_SHADER_DERIVATIVES_SPEC_VERSION: u32 = 1;
pub const VK_KHR_COMPUTE_SHADER_DERIVATIVES_EXTENSION_NAME: &[u8; 34] =
    b"VK_KHR_compute_shader_derivatives\0";
pub const VK_KHR_video_decode_av1: u32 = 1;
pub const VK_MAX_VIDEO_AV1_REFERENCES_PER_FRAME_KHR: u32 = 7;
pub const VK_KHR_VIDEO_DECODE_AV1_SPEC_VERSION: u32 = 1;
pub const VK_KHR_VIDEO_DECODE_AV1_EXTENSION_NAME: &[u8; 24] = b"VK_KHR_video_decode_av1\0";
pub const VK_KHR_video_encode_av1: u32 = 1;
pub const VK_KHR_VIDEO_ENCODE_AV1_SPEC_VERSION: u32 = 1;
pub const VK_KHR_VIDEO_ENCODE_AV1_EXTENSION_NAME: &[u8; 24] = b"VK_KHR_video_encode_av1\0";
pub const VK_KHR_video_maintenance1: u32 = 1;
pub const VK_KHR_VIDEO_MAINTENANCE_1_SPEC_VERSION: u32 = 1;
pub const VK_KHR_VIDEO_MAINTENANCE_1_EXTENSION_NAME: &[u8; 26] = b"VK_KHR_video_maintenance1\0";
pub const VK_KHR_vertex_attribute_divisor: u32 = 1;
pub const VK_KHR_VERTEX_ATTRIBUTE_DIVISOR_SPEC_VERSION: u32 = 1;
pub const VK_KHR_VERTEX_ATTRIBUTE_DIVISOR_EXTENSION_NAME: &[u8; 32] =
    b"VK_KHR_vertex_attribute_divisor\0";
pub const VK_KHR_load_store_op_none: u32 = 1;
pub const VK_KHR_LOAD_STORE_OP_NONE_SPEC_VERSION: u32 = 1;
pub const VK_KHR_LOAD_STORE_OP_NONE_EXTENSION_NAME: &[u8; 26] = b"VK_KHR_load_store_op_none\0";
pub const VK_KHR_shader_float_controls2: u32 = 1;
pub const VK_KHR_SHADER_FLOAT_CONTROLS_2_SPEC_VERSION: u32 = 1;
pub const VK_KHR_SHADER_FLOAT_CONTROLS_2_EXTENSION_NAME: &[u8; 30] =
    b"VK_KHR_shader_float_controls2\0";
pub const VK_KHR_index_type_uint8: u32 = 1;
pub const VK_KHR_INDEX_TYPE_UINT8_SPEC_VERSION: u32 = 1;
pub const VK_KHR_INDEX_TYPE_UINT8_EXTENSION_NAME: &[u8; 24] = b"VK_KHR_index_type_uint8\0";
pub const VK_KHR_line_rasterization: u32 = 1;
pub const VK_KHR_LINE_RASTERIZATION_SPEC_VERSION: u32 = 1;
pub const VK_KHR_LINE_RASTERIZATION_EXTENSION_NAME: &[u8; 26] = b"VK_KHR_line_rasterization\0";
pub const VK_KHR_calibrated_timestamps: u32 = 1;
pub const VK_KHR_CALIBRATED_TIMESTAMPS_SPEC_VERSION: u32 = 1;
pub const VK_KHR_CALIBRATED_TIMESTAMPS_EXTENSION_NAME: &[u8; 29] =
    b"VK_KHR_calibrated_timestamps\0";
pub const VK_KHR_shader_expect_assume: u32 = 1;
pub const VK_KHR_SHADER_EXPECT_ASSUME_SPEC_VERSION: u32 = 1;
pub const VK_KHR_SHADER_EXPECT_ASSUME_EXTENSION_NAME: &[u8; 28] = b"VK_KHR_shader_expect_assume\0";
pub const VK_KHR_maintenance6: u32 = 1;
pub const VK_KHR_MAINTENANCE_6_SPEC_VERSION: u32 = 1;
pub const VK_KHR_MAINTENANCE_6_EXTENSION_NAME: &[u8; 20] = b"VK_KHR_maintenance6\0";
pub const VK_KHR_video_encode_quantization_map: u32 = 1;
pub const VK_KHR_VIDEO_ENCODE_QUANTIZATION_MAP_SPEC_VERSION: u32 = 2;
pub const VK_KHR_VIDEO_ENCODE_QUANTIZATION_MAP_EXTENSION_NAME: &[u8; 37] =
    b"VK_KHR_video_encode_quantization_map\0";
pub const VK_KHR_shader_relaxed_extended_instruction: u32 = 1;
pub const VK_KHR_SHADER_RELAXED_EXTENDED_INSTRUCTION_SPEC_VERSION: u32 = 1;
pub const VK_KHR_SHADER_RELAXED_EXTENDED_INSTRUCTION_EXTENSION_NAME: &[u8; 43] =
    b"VK_KHR_shader_relaxed_extended_instruction\0";
pub const VK_KHR_maintenance7: u32 = 1;
pub const VK_KHR_MAINTENANCE_7_SPEC_VERSION: u32 = 1;
pub const VK_KHR_MAINTENANCE_7_EXTENSION_NAME: &[u8; 20] = b"VK_KHR_maintenance7\0";
pub const VK_KHR_maintenance8: u32 = 1;
pub const VK_KHR_MAINTENANCE_8_SPEC_VERSION: u32 = 1;
pub const VK_KHR_MAINTENANCE_8_EXTENSION_NAME: &[u8; 20] = b"VK_KHR_maintenance8\0";
pub const VK_KHR_video_maintenance2: u32 = 1;
pub const VK_KHR_VIDEO_MAINTENANCE_2_SPEC_VERSION: u32 = 1;
pub const VK_KHR_VIDEO_MAINTENANCE_2_EXTENSION_NAME: &[u8; 26] = b"VK_KHR_video_maintenance2\0";
pub const VK_KHR_depth_clamp_zero_one: u32 = 1;
pub const VK_KHR_DEPTH_CLAMP_ZERO_ONE_SPEC_VERSION: u32 = 1;
pub const VK_KHR_DEPTH_CLAMP_ZERO_ONE_EXTENSION_NAME: &[u8; 28] = b"VK_KHR_depth_clamp_zero_one\0";
pub const VK_KHR_robustness2: u32 = 1;
pub const VK_KHR_ROBUSTNESS_2_SPEC_VERSION: u32 = 1;
pub const VK_KHR_ROBUSTNESS_2_EXTENSION_NAME: &[u8; 19] = b"VK_KHR_robustness2\0";
pub const VK_EXT_debug_report: u32 = 1;
pub const VK_EXT_DEBUG_REPORT_SPEC_VERSION: u32 = 10;
pub const VK_EXT_DEBUG_REPORT_EXTENSION_NAME: &[u8; 20] = b"VK_EXT_debug_report\0";
pub const VK_NV_glsl_shader: u32 = 1;
pub const VK_NV_GLSL_SHADER_SPEC_VERSION: u32 = 1;
pub const VK_NV_GLSL_SHADER_EXTENSION_NAME: &[u8; 18] = b"VK_NV_glsl_shader\0";
pub const VK_EXT_depth_range_unrestricted: u32 = 1;
pub const VK_EXT_DEPTH_RANGE_UNRESTRICTED_SPEC_VERSION: u32 = 1;
pub const VK_EXT_DEPTH_RANGE_UNRESTRICTED_EXTENSION_NAME: &[u8; 32] =
    b"VK_EXT_depth_range_unrestricted\0";
pub const VK_IMG_filter_cubic: u32 = 1;
pub const VK_IMG_FILTER_CUBIC_SPEC_VERSION: u32 = 1;
pub const VK_IMG_FILTER_CUBIC_EXTENSION_NAME: &[u8; 20] = b"VK_IMG_filter_cubic\0";
pub const VK_AMD_rasterization_order: u32 = 1;
pub const VK_AMD_RASTERIZATION_ORDER_SPEC_VERSION: u32 = 1;
pub const VK_AMD_RASTERIZATION_ORDER_EXTENSION_NAME: &[u8; 27] = b"VK_AMD_rasterization_order\0";
pub const VK_AMD_shader_trinary_minmax: u32 = 1;
pub const VK_AMD_SHADER_TRINARY_MINMAX_SPEC_VERSION: u32 = 1;
pub const VK_AMD_SHADER_TRINARY_MINMAX_EXTENSION_NAME: &[u8; 29] =
    b"VK_AMD_shader_trinary_minmax\0";
pub const VK_AMD_shader_explicit_vertex_parameter: u32 = 1;
pub const VK_AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_SPEC_VERSION: u32 = 1;
pub const VK_AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_EXTENSION_NAME: &[u8; 40] =
    b"VK_AMD_shader_explicit_vertex_parameter\0";
pub const VK_EXT_debug_marker: u32 = 1;
pub const VK_EXT_DEBUG_MARKER_SPEC_VERSION: u32 = 4;
pub const VK_EXT_DEBUG_MARKER_EXTENSION_NAME: &[u8; 20] = b"VK_EXT_debug_marker\0";
pub const VK_AMD_gcn_shader: u32 = 1;
pub const VK_AMD_GCN_SHADER_SPEC_VERSION: u32 = 1;
pub const VK_AMD_GCN_SHADER_EXTENSION_NAME: &[u8; 18] = b"VK_AMD_gcn_shader\0";
pub const VK_NV_dedicated_allocation: u32 = 1;
pub const VK_NV_DEDICATED_ALLOCATION_SPEC_VERSION: u32 = 1;
pub const VK_NV_DEDICATED_ALLOCATION_EXTENSION_NAME: &[u8; 27] = b"VK_NV_dedicated_allocation\0";
pub const VK_EXT_transform_feedback: u32 = 1;
pub const VK_EXT_TRANSFORM_FEEDBACK_SPEC_VERSION: u32 = 1;
pub const VK_EXT_TRANSFORM_FEEDBACK_EXTENSION_NAME: &[u8; 26] = b"VK_EXT_transform_feedback\0";
pub const VK_NVX_binary_import: u32 = 1;
pub const VK_NVX_BINARY_IMPORT_SPEC_VERSION: u32 = 2;
pub const VK_NVX_BINARY_IMPORT_EXTENSION_NAME: &[u8; 21] = b"VK_NVX_binary_import\0";
pub const VK_NVX_image_view_handle: u32 = 1;
pub const VK_NVX_IMAGE_VIEW_HANDLE_SPEC_VERSION: u32 = 3;
pub const VK_NVX_IMAGE_VIEW_HANDLE_EXTENSION_NAME: &[u8; 25] = b"VK_NVX_image_view_handle\0";
pub const VK_AMD_draw_indirect_count: u32 = 1;
pub const VK_AMD_DRAW_INDIRECT_COUNT_SPEC_VERSION: u32 = 2;
pub const VK_AMD_DRAW_INDIRECT_COUNT_EXTENSION_NAME: &[u8; 27] = b"VK_AMD_draw_indirect_count\0";
pub const VK_AMD_negative_viewport_height: u32 = 1;
pub const VK_AMD_NEGATIVE_VIEWPORT_HEIGHT_SPEC_VERSION: u32 = 1;
pub const VK_AMD_NEGATIVE_VIEWPORT_HEIGHT_EXTENSION_NAME: &[u8; 32] =
    b"VK_AMD_negative_viewport_height\0";
pub const VK_AMD_gpu_shader_half_float: u32 = 1;
pub const VK_AMD_GPU_SHADER_HALF_FLOAT_SPEC_VERSION: u32 = 2;
pub const VK_AMD_GPU_SHADER_HALF_FLOAT_EXTENSION_NAME: &[u8; 29] =
    b"VK_AMD_gpu_shader_half_float\0";
pub const VK_AMD_shader_ballot: u32 = 1;
pub const VK_AMD_SHADER_BALLOT_SPEC_VERSION: u32 = 1;
pub const VK_AMD_SHADER_BALLOT_EXTENSION_NAME: &[u8; 21] = b"VK_AMD_shader_ballot\0";
pub const VK_AMD_texture_gather_bias_lod: u32 = 1;
pub const VK_AMD_TEXTURE_GATHER_BIAS_LOD_SPEC_VERSION: u32 = 1;
pub const VK_AMD_TEXTURE_GATHER_BIAS_LOD_EXTENSION_NAME: &[u8; 31] =
    b"VK_AMD_texture_gather_bias_lod\0";
pub const VK_AMD_shader_info: u32 = 1;
pub const VK_AMD_SHADER_INFO_SPEC_VERSION: u32 = 1;
pub const VK_AMD_SHADER_INFO_EXTENSION_NAME: &[u8; 19] = b"VK_AMD_shader_info\0";
pub const VK_AMD_shader_image_load_store_lod: u32 = 1;
pub const VK_AMD_SHADER_IMAGE_LOAD_STORE_LOD_SPEC_VERSION: u32 = 1;
pub const VK_AMD_SHADER_IMAGE_LOAD_STORE_LOD_EXTENSION_NAME: &[u8; 35] =
    b"VK_AMD_shader_image_load_store_lod\0";
pub const VK_NV_corner_sampled_image: u32 = 1;
pub const VK_NV_CORNER_SAMPLED_IMAGE_SPEC_VERSION: u32 = 2;
pub const VK_NV_CORNER_SAMPLED_IMAGE_EXTENSION_NAME: &[u8; 27] = b"VK_NV_corner_sampled_image\0";
pub const VK_IMG_format_pvrtc: u32 = 1;
pub const VK_IMG_FORMAT_PVRTC_SPEC_VERSION: u32 = 1;
pub const VK_IMG_FORMAT_PVRTC_EXTENSION_NAME: &[u8; 20] = b"VK_IMG_format_pvrtc\0";
pub const VK_NV_external_memory_capabilities: u32 = 1;
pub const VK_NV_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION: u32 = 1;
pub const VK_NV_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME: &[u8; 35] =
    b"VK_NV_external_memory_capabilities\0";
pub const VK_NV_external_memory: u32 = 1;
pub const VK_NV_EXTERNAL_MEMORY_SPEC_VERSION: u32 = 1;
pub const VK_NV_EXTERNAL_MEMORY_EXTENSION_NAME: &[u8; 22] = b"VK_NV_external_memory\0";
pub const VK_EXT_validation_flags: u32 = 1;
pub const VK_EXT_VALIDATION_FLAGS_SPEC_VERSION: u32 = 3;
pub const VK_EXT_VALIDATION_FLAGS_EXTENSION_NAME: &[u8; 24] = b"VK_EXT_validation_flags\0";
pub const VK_EXT_shader_subgroup_ballot: u32 = 1;
pub const VK_EXT_SHADER_SUBGROUP_BALLOT_SPEC_VERSION: u32 = 1;
pub const VK_EXT_SHADER_SUBGROUP_BALLOT_EXTENSION_NAME: &[u8; 30] =
    b"VK_EXT_shader_subgroup_ballot\0";
pub const VK_EXT_shader_subgroup_vote: u32 = 1;
pub const VK_EXT_SHADER_SUBGROUP_VOTE_SPEC_VERSION: u32 = 1;
pub const VK_EXT_SHADER_SUBGROUP_VOTE_EXTENSION_NAME: &[u8; 28] = b"VK_EXT_shader_subgroup_vote\0";
pub const VK_EXT_texture_compression_astc_hdr: u32 = 1;
pub const VK_EXT_TEXTURE_COMPRESSION_ASTC_HDR_SPEC_VERSION: u32 = 1;
pub const VK_EXT_TEXTURE_COMPRESSION_ASTC_HDR_EXTENSION_NAME: &[u8; 36] =
    b"VK_EXT_texture_compression_astc_hdr\0";
pub const VK_EXT_astc_decode_mode: u32 = 1;
pub const VK_EXT_ASTC_DECODE_MODE_SPEC_VERSION: u32 = 1;
pub const VK_EXT_ASTC_DECODE_MODE_EXTENSION_NAME: &[u8; 24] = b"VK_EXT_astc_decode_mode\0";
pub const VK_EXT_pipeline_robustness: u32 = 1;
pub const VK_EXT_PIPELINE_ROBUSTNESS_SPEC_VERSION: u32 = 1;
pub const VK_EXT_PIPELINE_ROBUSTNESS_EXTENSION_NAME: &[u8; 27] = b"VK_EXT_pipeline_robustness\0";
pub const VK_EXT_conditional_rendering: u32 = 1;
pub const VK_EXT_CONDITIONAL_RENDERING_SPEC_VERSION: u32 = 2;
pub const VK_EXT_CONDITIONAL_RENDERING_EXTENSION_NAME: &[u8; 29] =
    b"VK_EXT_conditional_rendering\0";
pub const VK_NV_clip_space_w_scaling: u32 = 1;
pub const VK_NV_CLIP_SPACE_W_SCALING_SPEC_VERSION: u32 = 1;
pub const VK_NV_CLIP_SPACE_W_SCALING_EXTENSION_NAME: &[u8; 27] = b"VK_NV_clip_space_w_scaling\0";
pub const VK_EXT_direct_mode_display: u32 = 1;
pub const VK_EXT_DIRECT_MODE_DISPLAY_SPEC_VERSION: u32 = 1;
pub const VK_EXT_DIRECT_MODE_DISPLAY_EXTENSION_NAME: &[u8; 27] = b"VK_EXT_direct_mode_display\0";
pub const VK_EXT_display_surface_counter: u32 = 1;
pub const VK_EXT_DISPLAY_SURFACE_COUNTER_SPEC_VERSION: u32 = 1;
pub const VK_EXT_DISPLAY_SURFACE_COUNTER_EXTENSION_NAME: &[u8; 31] =
    b"VK_EXT_display_surface_counter\0";
pub const VK_EXT_display_control: u32 = 1;
pub const VK_EXT_DISPLAY_CONTROL_SPEC_VERSION: u32 = 1;
pub const VK_EXT_DISPLAY_CONTROL_EXTENSION_NAME: &[u8; 23] = b"VK_EXT_display_control\0";
pub const VK_GOOGLE_display_timing: u32 = 1;
pub const VK_GOOGLE_DISPLAY_TIMING_SPEC_VERSION: u32 = 1;
pub const VK_GOOGLE_DISPLAY_TIMING_EXTENSION_NAME: &[u8; 25] = b"VK_GOOGLE_display_timing\0";
pub const VK_NV_sample_mask_override_coverage: u32 = 1;
pub const VK_NV_SAMPLE_MASK_OVERRIDE_COVERAGE_SPEC_VERSION: u32 = 1;
pub const VK_NV_SAMPLE_MASK_OVERRIDE_COVERAGE_EXTENSION_NAME: &[u8; 36] =
    b"VK_NV_sample_mask_override_coverage\0";
pub const VK_NV_geometry_shader_passthrough: u32 = 1;
pub const VK_NV_GEOMETRY_SHADER_PASSTHROUGH_SPEC_VERSION: u32 = 1;
pub const VK_NV_GEOMETRY_SHADER_PASSTHROUGH_EXTENSION_NAME: &[u8; 34] =
    b"VK_NV_geometry_shader_passthrough\0";
pub const VK_NV_viewport_array2: u32 = 1;
pub const VK_NV_VIEWPORT_ARRAY_2_SPEC_VERSION: u32 = 1;
pub const VK_NV_VIEWPORT_ARRAY_2_EXTENSION_NAME: &[u8; 22] = b"VK_NV_viewport_array2\0";
pub const VK_NV_VIEWPORT_ARRAY2_SPEC_VERSION: u32 = 1;
pub const VK_NV_VIEWPORT_ARRAY2_EXTENSION_NAME: &[u8; 22] = b"VK_NV_viewport_array2\0";
pub const VK_NVX_multiview_per_view_attributes: u32 = 1;
pub const VK_NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_SPEC_VERSION: u32 = 1;
pub const VK_NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_EXTENSION_NAME: &[u8; 37] =
    b"VK_NVX_multiview_per_view_attributes\0";
pub const VK_NV_viewport_swizzle: u32 = 1;
pub const VK_NV_VIEWPORT_SWIZZLE_SPEC_VERSION: u32 = 1;
pub const VK_NV_VIEWPORT_SWIZZLE_EXTENSION_NAME: &[u8; 23] = b"VK_NV_viewport_swizzle\0";
pub const VK_EXT_discard_rectangles: u32 = 1;
pub const VK_EXT_DISCARD_RECTANGLES_SPEC_VERSION: u32 = 2;
pub const VK_EXT_DISCARD_RECTANGLES_EXTENSION_NAME: &[u8; 26] = b"VK_EXT_discard_rectangles\0";
pub const VK_EXT_conservative_rasterization: u32 = 1;
pub const VK_EXT_CONSERVATIVE_RASTERIZATION_SPEC_VERSION: u32 = 1;
pub const VK_EXT_CONSERVATIVE_RASTERIZATION_EXTENSION_NAME: &[u8; 34] =
    b"VK_EXT_conservative_rasterization\0";
pub const VK_EXT_depth_clip_enable: u32 = 1;
pub const VK_EXT_DEPTH_CLIP_ENABLE_SPEC_VERSION: u32 = 1;
pub const VK_EXT_DEPTH_CLIP_ENABLE_EXTENSION_NAME: &[u8; 25] = b"VK_EXT_depth_clip_enable\0";
pub const VK_EXT_swapchain_colorspace: u32 = 1;
pub const VK_EXT_SWAPCHAIN_COLOR_SPACE_SPEC_VERSION: u32 = 5;
pub const VK_EXT_SWAPCHAIN_COLOR_SPACE_EXTENSION_NAME: &[u8; 28] = b"VK_EXT_swapchain_colorspace\0";
pub const VK_EXT_hdr_metadata: u32 = 1;
pub const VK_EXT_HDR_METADATA_SPEC_VERSION: u32 = 3;
pub const VK_EXT_HDR_METADATA_EXTENSION_NAME: &[u8; 20] = b"VK_EXT_hdr_metadata\0";
pub const VK_IMG_relaxed_line_rasterization: u32 = 1;
pub const VK_IMG_RELAXED_LINE_RASTERIZATION_SPEC_VERSION: u32 = 1;
pub const VK_IMG_RELAXED_LINE_RASTERIZATION_EXTENSION_NAME: &[u8; 34] =
    b"VK_IMG_relaxed_line_rasterization\0";
pub const VK_EXT_external_memory_dma_buf: u32 = 1;
pub const VK_EXT_EXTERNAL_MEMORY_DMA_BUF_SPEC_VERSION: u32 = 1;
pub const VK_EXT_EXTERNAL_MEMORY_DMA_BUF_EXTENSION_NAME: &[u8; 31] =
    b"VK_EXT_external_memory_dma_buf\0";
pub const VK_EXT_queue_family_foreign: u32 = 1;
pub const VK_EXT_QUEUE_FAMILY_FOREIGN_SPEC_VERSION: u32 = 1;
pub const VK_EXT_QUEUE_FAMILY_FOREIGN_EXTENSION_NAME: &[u8; 28] = b"VK_EXT_queue_family_foreign\0";
pub const VK_QUEUE_FAMILY_FOREIGN_EXT: i32 = -3;
pub const VK_EXT_debug_utils: u32 = 1;
pub const VK_EXT_DEBUG_UTILS_SPEC_VERSION: u32 = 2;
pub const VK_EXT_DEBUG_UTILS_EXTENSION_NAME: &[u8; 19] = b"VK_EXT_debug_utils\0";
pub const VK_EXT_sampler_filter_minmax: u32 = 1;
pub const VK_EXT_SAMPLER_FILTER_MINMAX_SPEC_VERSION: u32 = 2;
pub const VK_EXT_SAMPLER_FILTER_MINMAX_EXTENSION_NAME: &[u8; 29] =
    b"VK_EXT_sampler_filter_minmax\0";
pub const VK_AMD_gpu_shader_int16: u32 = 1;
pub const VK_AMD_GPU_SHADER_INT16_SPEC_VERSION: u32 = 2;
pub const VK_AMD_GPU_SHADER_INT16_EXTENSION_NAME: &[u8; 24] = b"VK_AMD_gpu_shader_int16\0";
pub const VK_AMD_mixed_attachment_samples: u32 = 1;
pub const VK_AMD_MIXED_ATTACHMENT_SAMPLES_SPEC_VERSION: u32 = 1;
pub const VK_AMD_MIXED_ATTACHMENT_SAMPLES_EXTENSION_NAME: &[u8; 32] =
    b"VK_AMD_mixed_attachment_samples\0";
pub const VK_AMD_shader_fragment_mask: u32 = 1;
pub const VK_AMD_SHADER_FRAGMENT_MASK_SPEC_VERSION: u32 = 1;
pub const VK_AMD_SHADER_FRAGMENT_MASK_EXTENSION_NAME: &[u8; 28] = b"VK_AMD_shader_fragment_mask\0";
pub const VK_EXT_inline_uniform_block: u32 = 1;
pub const VK_EXT_INLINE_UNIFORM_BLOCK_SPEC_VERSION: u32 = 1;
pub const VK_EXT_INLINE_UNIFORM_BLOCK_EXTENSION_NAME: &[u8; 28] = b"VK_EXT_inline_uniform_block\0";
pub const VK_EXT_shader_stencil_export: u32 = 1;
pub const VK_EXT_SHADER_STENCIL_EXPORT_SPEC_VERSION: u32 = 1;
pub const VK_EXT_SHADER_STENCIL_EXPORT_EXTENSION_NAME: &[u8; 29] =
    b"VK_EXT_shader_stencil_export\0";
pub const VK_EXT_sample_locations: u32 = 1;
pub const VK_EXT_SAMPLE_LOCATIONS_SPEC_VERSION: u32 = 1;
pub const VK_EXT_SAMPLE_LOCATIONS_EXTENSION_NAME: &[u8; 24] = b"VK_EXT_sample_locations\0";
pub const VK_EXT_blend_operation_advanced: u32 = 1;
pub const VK_EXT_BLEND_OPERATION_ADVANCED_SPEC_VERSION: u32 = 2;
pub const VK_EXT_BLEND_OPERATION_ADVANCED_EXTENSION_NAME: &[u8; 32] =
    b"VK_EXT_blend_operation_advanced\0";
pub const VK_NV_fragment_coverage_to_color: u32 = 1;
pub const VK_NV_FRAGMENT_COVERAGE_TO_COLOR_SPEC_VERSION: u32 = 1;
pub const VK_NV_FRAGMENT_COVERAGE_TO_COLOR_EXTENSION_NAME: &[u8; 33] =
    b"VK_NV_fragment_coverage_to_color\0";
pub const VK_NV_framebuffer_mixed_samples: u32 = 1;
pub const VK_NV_FRAMEBUFFER_MIXED_SAMPLES_SPEC_VERSION: u32 = 1;
pub const VK_NV_FRAMEBUFFER_MIXED_SAMPLES_EXTENSION_NAME: &[u8; 32] =
    b"VK_NV_framebuffer_mixed_samples\0";
pub const VK_NV_fill_rectangle: u32 = 1;
pub const VK_NV_FILL_RECTANGLE_SPEC_VERSION: u32 = 1;
pub const VK_NV_FILL_RECTANGLE_EXTENSION_NAME: &[u8; 21] = b"VK_NV_fill_rectangle\0";
pub const VK_NV_shader_sm_builtins: u32 = 1;
pub const VK_NV_SHADER_SM_BUILTINS_SPEC_VERSION: u32 = 1;
pub const VK_NV_SHADER_SM_BUILTINS_EXTENSION_NAME: &[u8; 25] = b"VK_NV_shader_sm_builtins\0";
pub const VK_EXT_post_depth_coverage: u32 = 1;
pub const VK_EXT_POST_DEPTH_COVERAGE_SPEC_VERSION: u32 = 1;
pub const VK_EXT_POST_DEPTH_COVERAGE_EXTENSION_NAME: &[u8; 27] = b"VK_EXT_post_depth_coverage\0";
pub const VK_EXT_image_drm_format_modifier: u32 = 1;
pub const VK_EXT_IMAGE_DRM_FORMAT_MODIFIER_SPEC_VERSION: u32 = 2;
pub const VK_EXT_IMAGE_DRM_FORMAT_MODIFIER_EXTENSION_NAME: &[u8; 33] =
    b"VK_EXT_image_drm_format_modifier\0";
pub const VK_EXT_validation_cache: u32 = 1;
pub const VK_EXT_VALIDATION_CACHE_SPEC_VERSION: u32 = 1;
pub const VK_EXT_VALIDATION_CACHE_EXTENSION_NAME: &[u8; 24] = b"VK_EXT_validation_cache\0";
pub const VK_EXT_descriptor_indexing: u32 = 1;
pub const VK_EXT_DESCRIPTOR_INDEXING_SPEC_VERSION: u32 = 2;
pub const VK_EXT_DESCRIPTOR_INDEXING_EXTENSION_NAME: &[u8; 27] = b"VK_EXT_descriptor_indexing\0";
pub const VK_EXT_shader_viewport_index_layer: u32 = 1;
pub const VK_EXT_SHADER_VIEWPORT_INDEX_LAYER_SPEC_VERSION: u32 = 1;
pub const VK_EXT_SHADER_VIEWPORT_INDEX_LAYER_EXTENSION_NAME: &[u8; 35] =
    b"VK_EXT_shader_viewport_index_layer\0";
pub const VK_NV_shading_rate_image: u32 = 1;
pub const VK_NV_SHADING_RATE_IMAGE_SPEC_VERSION: u32 = 3;
pub const VK_NV_SHADING_RATE_IMAGE_EXTENSION_NAME: &[u8; 25] = b"VK_NV_shading_rate_image\0";
pub const VK_NV_ray_tracing: u32 = 1;
pub const VK_NV_RAY_TRACING_SPEC_VERSION: u32 = 3;
pub const VK_NV_RAY_TRACING_EXTENSION_NAME: &[u8; 18] = b"VK_NV_ray_tracing\0";
pub const VK_SHADER_UNUSED_KHR: i32 = -1;
pub const VK_SHADER_UNUSED_NV: i32 = -1;
pub const VK_NV_representative_fragment_test: u32 = 1;
pub const VK_NV_REPRESENTATIVE_FRAGMENT_TEST_SPEC_VERSION: u32 = 2;
pub const VK_NV_REPRESENTATIVE_FRAGMENT_TEST_EXTENSION_NAME: &[u8; 35] =
    b"VK_NV_representative_fragment_test\0";
pub const VK_EXT_filter_cubic: u32 = 1;
pub const VK_EXT_FILTER_CUBIC_SPEC_VERSION: u32 = 3;
pub const VK_EXT_FILTER_CUBIC_EXTENSION_NAME: &[u8; 20] = b"VK_EXT_filter_cubic\0";
pub const VK_QCOM_render_pass_shader_resolve: u32 = 1;
pub const VK_QCOM_RENDER_PASS_SHADER_RESOLVE_SPEC_VERSION: u32 = 4;
pub const VK_QCOM_RENDER_PASS_SHADER_RESOLVE_EXTENSION_NAME: &[u8; 35] =
    b"VK_QCOM_render_pass_shader_resolve\0";
pub const VK_EXT_global_priority: u32 = 1;
pub const VK_EXT_GLOBAL_PRIORITY_SPEC_VERSION: u32 = 2;
pub const VK_EXT_GLOBAL_PRIORITY_EXTENSION_NAME: &[u8; 23] = b"VK_EXT_global_priority\0";
pub const VK_EXT_external_memory_host: u32 = 1;
pub const VK_EXT_EXTERNAL_MEMORY_HOST_SPEC_VERSION: u32 = 1;
pub const VK_EXT_EXTERNAL_MEMORY_HOST_EXTENSION_NAME: &[u8; 28] = b"VK_EXT_external_memory_host\0";
pub const VK_AMD_buffer_marker: u32 = 1;
pub const VK_AMD_BUFFER_MARKER_SPEC_VERSION: u32 = 1;
pub const VK_AMD_BUFFER_MARKER_EXTENSION_NAME: &[u8; 21] = b"VK_AMD_buffer_marker\0";
pub const VK_AMD_pipeline_compiler_control: u32 = 1;
pub const VK_AMD_PIPELINE_COMPILER_CONTROL_SPEC_VERSION: u32 = 1;
pub const VK_AMD_PIPELINE_COMPILER_CONTROL_EXTENSION_NAME: &[u8; 33] =
    b"VK_AMD_pipeline_compiler_control\0";
pub const VK_EXT_calibrated_timestamps: u32 = 1;
pub const VK_EXT_CALIBRATED_TIMESTAMPS_SPEC_VERSION: u32 = 2;
pub const VK_EXT_CALIBRATED_TIMESTAMPS_EXTENSION_NAME: &[u8; 29] =
    b"VK_EXT_calibrated_timestamps\0";
pub const VK_AMD_shader_core_properties: u32 = 1;
pub const VK_AMD_SHADER_CORE_PROPERTIES_SPEC_VERSION: u32 = 2;
pub const VK_AMD_SHADER_CORE_PROPERTIES_EXTENSION_NAME: &[u8; 30] =
    b"VK_AMD_shader_core_properties\0";
pub const VK_AMD_memory_overallocation_behavior: u32 = 1;
pub const VK_AMD_MEMORY_OVERALLOCATION_BEHAVIOR_SPEC_VERSION: u32 = 1;
pub const VK_AMD_MEMORY_OVERALLOCATION_BEHAVIOR_EXTENSION_NAME: &[u8; 38] =
    b"VK_AMD_memory_overallocation_behavior\0";
pub const VK_EXT_vertex_attribute_divisor: u32 = 1;
pub const VK_EXT_VERTEX_ATTRIBUTE_DIVISOR_SPEC_VERSION: u32 = 3;
pub const VK_EXT_VERTEX_ATTRIBUTE_DIVISOR_EXTENSION_NAME: &[u8; 32] =
    b"VK_EXT_vertex_attribute_divisor\0";
pub const VK_EXT_pipeline_creation_feedback: u32 = 1;
pub const VK_EXT_PIPELINE_CREATION_FEEDBACK_SPEC_VERSION: u32 = 1;
pub const VK_EXT_PIPELINE_CREATION_FEEDBACK_EXTENSION_NAME: &[u8; 34] =
    b"VK_EXT_pipeline_creation_feedback\0";
pub const VK_NV_shader_subgroup_partitioned: u32 = 1;
pub const VK_NV_SHADER_SUBGROUP_PARTITIONED_SPEC_VERSION: u32 = 1;
pub const VK_NV_SHADER_SUBGROUP_PARTITIONED_EXTENSION_NAME: &[u8; 34] =
    b"VK_NV_shader_subgroup_partitioned\0";
pub const VK_NV_compute_shader_derivatives: u32 = 1;
pub const VK_NV_COMPUTE_SHADER_DERIVATIVES_SPEC_VERSION: u32 = 1;
pub const VK_NV_COMPUTE_SHADER_DERIVATIVES_EXTENSION_NAME: &[u8; 33] =
    b"VK_NV_compute_shader_derivatives\0";
pub const VK_NV_mesh_shader: u32 = 1;
pub const VK_NV_MESH_SHADER_SPEC_VERSION: u32 = 1;
pub const VK_NV_MESH_SHADER_EXTENSION_NAME: &[u8; 18] = b"VK_NV_mesh_shader\0";
pub const VK_NV_fragment_shader_barycentric: u32 = 1;
pub const VK_NV_FRAGMENT_SHADER_BARYCENTRIC_SPEC_VERSION: u32 = 1;
pub const VK_NV_FRAGMENT_SHADER_BARYCENTRIC_EXTENSION_NAME: &[u8; 34] =
    b"VK_NV_fragment_shader_barycentric\0";
pub const VK_NV_shader_image_footprint: u32 = 1;
pub const VK_NV_SHADER_IMAGE_FOOTPRINT_SPEC_VERSION: u32 = 2;
pub const VK_NV_SHADER_IMAGE_FOOTPRINT_EXTENSION_NAME: &[u8; 29] =
    b"VK_NV_shader_image_footprint\0";
pub const VK_NV_scissor_exclusive: u32 = 1;
pub const VK_NV_SCISSOR_EXCLUSIVE_SPEC_VERSION: u32 = 2;
pub const VK_NV_SCISSOR_EXCLUSIVE_EXTENSION_NAME: &[u8; 24] = b"VK_NV_scissor_exclusive\0";
pub const VK_NV_device_diagnostic_checkpoints: u32 = 1;
pub const VK_NV_DEVICE_DIAGNOSTIC_CHECKPOINTS_SPEC_VERSION: u32 = 2;
pub const VK_NV_DEVICE_DIAGNOSTIC_CHECKPOINTS_EXTENSION_NAME: &[u8; 36] =
    b"VK_NV_device_diagnostic_checkpoints\0";
pub const VK_INTEL_shader_integer_functions2: u32 = 1;
pub const VK_INTEL_SHADER_INTEGER_FUNCTIONS_2_SPEC_VERSION: u32 = 1;
pub const VK_INTEL_SHADER_INTEGER_FUNCTIONS_2_EXTENSION_NAME: &[u8; 35] =
    b"VK_INTEL_shader_integer_functions2\0";
pub const VK_INTEL_performance_query: u32 = 1;
pub const VK_INTEL_PERFORMANCE_QUERY_SPEC_VERSION: u32 = 2;
pub const VK_INTEL_PERFORMANCE_QUERY_EXTENSION_NAME: &[u8; 27] = b"VK_INTEL_performance_query\0";
pub const VK_EXT_pci_bus_info: u32 = 1;
pub const VK_EXT_PCI_BUS_INFO_SPEC_VERSION: u32 = 2;
pub const VK_EXT_PCI_BUS_INFO_EXTENSION_NAME: &[u8; 20] = b"VK_EXT_pci_bus_info\0";
pub const VK_AMD_display_native_hdr: u32 = 1;
pub const VK_AMD_DISPLAY_NATIVE_HDR_SPEC_VERSION: u32 = 1;
pub const VK_AMD_DISPLAY_NATIVE_HDR_EXTENSION_NAME: &[u8; 26] = b"VK_AMD_display_native_hdr\0";
pub const VK_EXT_fragment_density_map: u32 = 1;
pub const VK_EXT_FRAGMENT_DENSITY_MAP_SPEC_VERSION: u32 = 2;
pub const VK_EXT_FRAGMENT_DENSITY_MAP_EXTENSION_NAME: &[u8; 28] = b"VK_EXT_fragment_density_map\0";
pub const VK_EXT_scalar_block_layout: u32 = 1;
pub const VK_EXT_SCALAR_BLOCK_LAYOUT_SPEC_VERSION: u32 = 1;
pub const VK_EXT_SCALAR_BLOCK_LAYOUT_EXTENSION_NAME: &[u8; 27] = b"VK_EXT_scalar_block_layout\0";
pub const VK_GOOGLE_hlsl_functionality1: u32 = 1;
pub const VK_GOOGLE_HLSL_FUNCTIONALITY_1_SPEC_VERSION: u32 = 1;
pub const VK_GOOGLE_HLSL_FUNCTIONALITY_1_EXTENSION_NAME: &[u8; 30] =
    b"VK_GOOGLE_hlsl_functionality1\0";
pub const VK_GOOGLE_HLSL_FUNCTIONALITY1_SPEC_VERSION: u32 = 1;
pub const VK_GOOGLE_HLSL_FUNCTIONALITY1_EXTENSION_NAME: &[u8; 30] =
    b"VK_GOOGLE_hlsl_functionality1\0";
pub const VK_GOOGLE_decorate_string: u32 = 1;
pub const VK_GOOGLE_DECORATE_STRING_SPEC_VERSION: u32 = 1;
pub const VK_GOOGLE_DECORATE_STRING_EXTENSION_NAME: &[u8; 26] = b"VK_GOOGLE_decorate_string\0";
pub const VK_EXT_subgroup_size_control: u32 = 1;
pub const VK_EXT_SUBGROUP_SIZE_CONTROL_SPEC_VERSION: u32 = 2;
pub const VK_EXT_SUBGROUP_SIZE_CONTROL_EXTENSION_NAME: &[u8; 29] =
    b"VK_EXT_subgroup_size_control\0";
pub const VK_AMD_shader_core_properties2: u32 = 1;
pub const VK_AMD_SHADER_CORE_PROPERTIES_2_SPEC_VERSION: u32 = 1;
pub const VK_AMD_SHADER_CORE_PROPERTIES_2_EXTENSION_NAME: &[u8; 31] =
    b"VK_AMD_shader_core_properties2\0";
pub const VK_AMD_device_coherent_memory: u32 = 1;
pub const VK_AMD_DEVICE_COHERENT_MEMORY_SPEC_VERSION: u32 = 1;
pub const VK_AMD_DEVICE_COHERENT_MEMORY_EXTENSION_NAME: &[u8; 30] =
    b"VK_AMD_device_coherent_memory\0";
pub const VK_EXT_shader_image_atomic_int64: u32 = 1;
pub const VK_EXT_SHADER_IMAGE_ATOMIC_INT64_SPEC_VERSION: u32 = 1;
pub const VK_EXT_SHADER_IMAGE_ATOMIC_INT64_EXTENSION_NAME: &[u8; 33] =
    b"VK_EXT_shader_image_atomic_int64\0";
pub const VK_EXT_memory_budget: u32 = 1;
pub const VK_EXT_MEMORY_BUDGET_SPEC_VERSION: u32 = 1;
pub const VK_EXT_MEMORY_BUDGET_EXTENSION_NAME: &[u8; 21] = b"VK_EXT_memory_budget\0";
pub const VK_EXT_memory_priority: u32 = 1;
pub const VK_EXT_MEMORY_PRIORITY_SPEC_VERSION: u32 = 1;
pub const VK_EXT_MEMORY_PRIORITY_EXTENSION_NAME: &[u8; 23] = b"VK_EXT_memory_priority\0";
pub const VK_NV_dedicated_allocation_image_aliasing: u32 = 1;
pub const VK_NV_DEDICATED_ALLOCATION_IMAGE_ALIASING_SPEC_VERSION: u32 = 1;
pub const VK_NV_DEDICATED_ALLOCATION_IMAGE_ALIASING_EXTENSION_NAME: &[u8; 42] =
    b"VK_NV_dedicated_allocation_image_aliasing\0";
pub const VK_EXT_buffer_device_address: u32 = 1;
pub const VK_EXT_BUFFER_DEVICE_ADDRESS_SPEC_VERSION: u32 = 2;
pub const VK_EXT_BUFFER_DEVICE_ADDRESS_EXTENSION_NAME: &[u8; 29] =
    b"VK_EXT_buffer_device_address\0";
pub const VK_EXT_tooling_info: u32 = 1;
pub const VK_EXT_TOOLING_INFO_SPEC_VERSION: u32 = 1;
pub const VK_EXT_TOOLING_INFO_EXTENSION_NAME: &[u8; 20] = b"VK_EXT_tooling_info\0";
pub const VK_EXT_separate_stencil_usage: u32 = 1;
pub const VK_EXT_SEPARATE_STENCIL_USAGE_SPEC_VERSION: u32 = 1;
pub const VK_EXT_SEPARATE_STENCIL_USAGE_EXTENSION_NAME: &[u8; 30] =
    b"VK_EXT_separate_stencil_usage\0";
pub const VK_EXT_validation_features: u32 = 1;
pub const VK_EXT_VALIDATION_FEATURES_SPEC_VERSION: u32 = 6;
pub const VK_EXT_VALIDATION_FEATURES_EXTENSION_NAME: &[u8; 27] = b"VK_EXT_validation_features\0";
pub const VK_NV_cooperative_matrix: u32 = 1;
pub const VK_NV_COOPERATIVE_MATRIX_SPEC_VERSION: u32 = 1;
pub const VK_NV_COOPERATIVE_MATRIX_EXTENSION_NAME: &[u8; 25] = b"VK_NV_cooperative_matrix\0";
pub const VK_NV_coverage_reduction_mode: u32 = 1;
pub const VK_NV_COVERAGE_REDUCTION_MODE_SPEC_VERSION: u32 = 1;
pub const VK_NV_COVERAGE_REDUCTION_MODE_EXTENSION_NAME: &[u8; 30] =
    b"VK_NV_coverage_reduction_mode\0";
pub const VK_EXT_fragment_shader_interlock: u32 = 1;
pub const VK_EXT_FRAGMENT_SHADER_INTERLOCK_SPEC_VERSION: u32 = 1;
pub const VK_EXT_FRAGMENT_SHADER_INTERLOCK_EXTENSION_NAME: &[u8; 33] =
    b"VK_EXT_fragment_shader_interlock\0";
pub const VK_EXT_ycbcr_image_arrays: u32 = 1;
pub const VK_EXT_YCBCR_IMAGE_ARRAYS_SPEC_VERSION: u32 = 1;
pub const VK_EXT_YCBCR_IMAGE_ARRAYS_EXTENSION_NAME: &[u8; 26] = b"VK_EXT_ycbcr_image_arrays\0";
pub const VK_EXT_provoking_vertex: u32 = 1;
pub const VK_EXT_PROVOKING_VERTEX_SPEC_VERSION: u32 = 1;
pub const VK_EXT_PROVOKING_VERTEX_EXTENSION_NAME: &[u8; 24] = b"VK_EXT_provoking_vertex\0";
pub const VK_EXT_headless_surface: u32 = 1;
pub const VK_EXT_HEADLESS_SURFACE_SPEC_VERSION: u32 = 1;
pub const VK_EXT_HEADLESS_SURFACE_EXTENSION_NAME: &[u8; 24] = b"VK_EXT_headless_surface\0";
pub const VK_EXT_line_rasterization: u32 = 1;
pub const VK_EXT_LINE_RASTERIZATION_SPEC_VERSION: u32 = 1;
pub const VK_EXT_LINE_RASTERIZATION_EXTENSION_NAME: &[u8; 26] = b"VK_EXT_line_rasterization\0";
pub const VK_EXT_shader_atomic_float: u32 = 1;
pub const VK_EXT_SHADER_ATOMIC_FLOAT_SPEC_VERSION: u32 = 1;
pub const VK_EXT_SHADER_ATOMIC_FLOAT_EXTENSION_NAME: &[u8; 27] = b"VK_EXT_shader_atomic_float\0";
pub const VK_EXT_host_query_reset: u32 = 1;
pub const VK_EXT_HOST_QUERY_RESET_SPEC_VERSION: u32 = 1;
pub const VK_EXT_HOST_QUERY_RESET_EXTENSION_NAME: &[u8; 24] = b"VK_EXT_host_query_reset\0";
pub const VK_EXT_index_type_uint8: u32 = 1;
pub const VK_EXT_INDEX_TYPE_UINT8_SPEC_VERSION: u32 = 1;
pub const VK_EXT_INDEX_TYPE_UINT8_EXTENSION_NAME: &[u8; 24] = b"VK_EXT_index_type_uint8\0";
pub const VK_EXT_extended_dynamic_state: u32 = 1;
pub const VK_EXT_EXTENDED_DYNAMIC_STATE_SPEC_VERSION: u32 = 1;
pub const VK_EXT_EXTENDED_DYNAMIC_STATE_EXTENSION_NAME: &[u8; 30] =
    b"VK_EXT_extended_dynamic_state\0";
pub const VK_EXT_host_image_copy: u32 = 1;
pub const VK_EXT_HOST_IMAGE_COPY_SPEC_VERSION: u32 = 1;
pub const VK_EXT_HOST_IMAGE_COPY_EXTENSION_NAME: &[u8; 23] = b"VK_EXT_host_image_copy\0";
pub const VK_EXT_map_memory_placed: u32 = 1;
pub const VK_EXT_MAP_MEMORY_PLACED_SPEC_VERSION: u32 = 1;
pub const VK_EXT_MAP_MEMORY_PLACED_EXTENSION_NAME: &[u8; 25] = b"VK_EXT_map_memory_placed\0";
pub const VK_EXT_shader_atomic_float2: u32 = 1;
pub const VK_EXT_SHADER_ATOMIC_FLOAT_2_SPEC_VERSION: u32 = 1;
pub const VK_EXT_SHADER_ATOMIC_FLOAT_2_EXTENSION_NAME: &[u8; 28] = b"VK_EXT_shader_atomic_float2\0";
pub const VK_EXT_surface_maintenance1: u32 = 1;
pub const VK_EXT_SURFACE_MAINTENANCE_1_SPEC_VERSION: u32 = 1;
pub const VK_EXT_SURFACE_MAINTENANCE_1_EXTENSION_NAME: &[u8; 28] = b"VK_EXT_surface_maintenance1\0";
pub const VK_EXT_swapchain_maintenance1: u32 = 1;
pub const VK_EXT_SWAPCHAIN_MAINTENANCE_1_SPEC_VERSION: u32 = 1;
pub const VK_EXT_SWAPCHAIN_MAINTENANCE_1_EXTENSION_NAME: &[u8; 30] =
    b"VK_EXT_swapchain_maintenance1\0";
pub const VK_EXT_shader_demote_to_helper_invocation: u32 = 1;
pub const VK_EXT_SHADER_DEMOTE_TO_HELPER_INVOCATION_SPEC_VERSION: u32 = 1;
pub const VK_EXT_SHADER_DEMOTE_TO_HELPER_INVOCATION_EXTENSION_NAME: &[u8; 42] =
    b"VK_EXT_shader_demote_to_helper_invocation\0";
pub const VK_NV_device_generated_commands: u32 = 1;
pub const VK_NV_DEVICE_GENERATED_COMMANDS_SPEC_VERSION: u32 = 3;
pub const VK_NV_DEVICE_GENERATED_COMMANDS_EXTENSION_NAME: &[u8; 32] =
    b"VK_NV_device_generated_commands\0";
pub const VK_NV_inherited_viewport_scissor: u32 = 1;
pub const VK_NV_INHERITED_VIEWPORT_SCISSOR_SPEC_VERSION: u32 = 1;
pub const VK_NV_INHERITED_VIEWPORT_SCISSOR_EXTENSION_NAME: &[u8; 33] =
    b"VK_NV_inherited_viewport_scissor\0";
pub const VK_EXT_texel_buffer_alignment: u32 = 1;
pub const VK_EXT_TEXEL_BUFFER_ALIGNMENT_SPEC_VERSION: u32 = 1;
pub const VK_EXT_TEXEL_BUFFER_ALIGNMENT_EXTENSION_NAME: &[u8; 30] =
    b"VK_EXT_texel_buffer_alignment\0";
pub const VK_QCOM_render_pass_transform: u32 = 1;
pub const VK_QCOM_RENDER_PASS_TRANSFORM_SPEC_VERSION: u32 = 4;
pub const VK_QCOM_RENDER_PASS_TRANSFORM_EXTENSION_NAME: &[u8; 30] =
    b"VK_QCOM_render_pass_transform\0";
pub const VK_EXT_depth_bias_control: u32 = 1;
pub const VK_EXT_DEPTH_BIAS_CONTROL_SPEC_VERSION: u32 = 1;
pub const VK_EXT_DEPTH_BIAS_CONTROL_EXTENSION_NAME: &[u8; 26] = b"VK_EXT_depth_bias_control\0";
pub const VK_EXT_device_memory_report: u32 = 1;
pub const VK_EXT_DEVICE_MEMORY_REPORT_SPEC_VERSION: u32 = 2;
pub const VK_EXT_DEVICE_MEMORY_REPORT_EXTENSION_NAME: &[u8; 28] = b"VK_EXT_device_memory_report\0";
pub const VK_EXT_acquire_drm_display: u32 = 1;
pub const VK_EXT_ACQUIRE_DRM_DISPLAY_SPEC_VERSION: u32 = 1;
pub const VK_EXT_ACQUIRE_DRM_DISPLAY_EXTENSION_NAME: &[u8; 27] = b"VK_EXT_acquire_drm_display\0";
pub const VK_EXT_robustness2: u32 = 1;
pub const VK_EXT_ROBUSTNESS_2_SPEC_VERSION: u32 = 1;
pub const VK_EXT_ROBUSTNESS_2_EXTENSION_NAME: &[u8; 19] = b"VK_EXT_robustness2\0";
pub const VK_EXT_custom_border_color: u32 = 1;
pub const VK_EXT_CUSTOM_BORDER_COLOR_SPEC_VERSION: u32 = 12;
pub const VK_EXT_CUSTOM_BORDER_COLOR_EXTENSION_NAME: &[u8; 27] = b"VK_EXT_custom_border_color\0";
pub const VK_GOOGLE_user_type: u32 = 1;
pub const VK_GOOGLE_USER_TYPE_SPEC_VERSION: u32 = 1;
pub const VK_GOOGLE_USER_TYPE_EXTENSION_NAME: &[u8; 20] = b"VK_GOOGLE_user_type\0";
pub const VK_NV_present_barrier: u32 = 1;
pub const VK_NV_PRESENT_BARRIER_SPEC_VERSION: u32 = 1;
pub const VK_NV_PRESENT_BARRIER_EXTENSION_NAME: &[u8; 22] = b"VK_NV_present_barrier\0";
pub const VK_EXT_private_data: u32 = 1;
pub const VK_EXT_PRIVATE_DATA_SPEC_VERSION: u32 = 1;
pub const VK_EXT_PRIVATE_DATA_EXTENSION_NAME: &[u8; 20] = b"VK_EXT_private_data\0";
pub const VK_EXT_pipeline_creation_cache_control: u32 = 1;
pub const VK_EXT_PIPELINE_CREATION_CACHE_CONTROL_SPEC_VERSION: u32 = 3;
pub const VK_EXT_PIPELINE_CREATION_CACHE_CONTROL_EXTENSION_NAME: &[u8; 39] =
    b"VK_EXT_pipeline_creation_cache_control\0";
pub const VK_NV_device_diagnostics_config: u32 = 1;
pub const VK_NV_DEVICE_DIAGNOSTICS_CONFIG_SPEC_VERSION: u32 = 2;
pub const VK_NV_DEVICE_DIAGNOSTICS_CONFIG_EXTENSION_NAME: &[u8; 32] =
    b"VK_NV_device_diagnostics_config\0";
pub const VK_QCOM_render_pass_store_ops: u32 = 1;
pub const VK_QCOM_RENDER_PASS_STORE_OPS_SPEC_VERSION: u32 = 2;
pub const VK_QCOM_RENDER_PASS_STORE_OPS_EXTENSION_NAME: &[u8; 30] =
    b"VK_QCOM_render_pass_store_ops\0";
pub const VK_NV_cuda_kernel_launch: u32 = 1;
pub const VK_NV_CUDA_KERNEL_LAUNCH_SPEC_VERSION: u32 = 2;
pub const VK_NV_CUDA_KERNEL_LAUNCH_EXTENSION_NAME: &[u8; 25] = b"VK_NV_cuda_kernel_launch\0";
pub const VK_QCOM_tile_shading: u32 = 1;
pub const VK_QCOM_TILE_SHADING_SPEC_VERSION: u32 = 1;
pub const VK_QCOM_TILE_SHADING_EXTENSION_NAME: &[u8; 21] = b"VK_QCOM_tile_shading\0";
pub const VK_NV_low_latency: u32 = 1;
pub const VK_NV_LOW_LATENCY_SPEC_VERSION: u32 = 1;
pub const VK_NV_LOW_LATENCY_EXTENSION_NAME: &[u8; 18] = b"VK_NV_low_latency\0";
pub const VK_EXT_descriptor_buffer: u32 = 1;
pub const VK_EXT_DESCRIPTOR_BUFFER_SPEC_VERSION: u32 = 1;
pub const VK_EXT_DESCRIPTOR_BUFFER_EXTENSION_NAME: &[u8; 25] = b"VK_EXT_descriptor_buffer\0";
pub const VK_EXT_graphics_pipeline_library: u32 = 1;
pub const VK_EXT_GRAPHICS_PIPELINE_LIBRARY_SPEC_VERSION: u32 = 1;
pub const VK_EXT_GRAPHICS_PIPELINE_LIBRARY_EXTENSION_NAME: &[u8; 33] =
    b"VK_EXT_graphics_pipeline_library\0";
pub const VK_AMD_shader_early_and_late_fragment_tests: u32 = 1;
pub const VK_AMD_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_SPEC_VERSION: u32 = 1;
pub const VK_AMD_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_EXTENSION_NAME: &[u8; 44] =
    b"VK_AMD_shader_early_and_late_fragment_tests\0";
pub const VK_NV_fragment_shading_rate_enums: u32 = 1;
pub const VK_NV_FRAGMENT_SHADING_RATE_ENUMS_SPEC_VERSION: u32 = 1;
pub const VK_NV_FRAGMENT_SHADING_RATE_ENUMS_EXTENSION_NAME: &[u8; 34] =
    b"VK_NV_fragment_shading_rate_enums\0";
pub const VK_NV_ray_tracing_motion_blur: u32 = 1;
pub const VK_NV_RAY_TRACING_MOTION_BLUR_SPEC_VERSION: u32 = 1;
pub const VK_NV_RAY_TRACING_MOTION_BLUR_EXTENSION_NAME: &[u8; 30] =
    b"VK_NV_ray_tracing_motion_blur\0";
pub const VK_EXT_ycbcr_2plane_444_formats: u32 = 1;
pub const VK_EXT_YCBCR_2PLANE_444_FORMATS_SPEC_VERSION: u32 = 1;
pub const VK_EXT_YCBCR_2PLANE_444_FORMATS_EXTENSION_NAME: &[u8; 32] =
    b"VK_EXT_ycbcr_2plane_444_formats\0";
pub const VK_EXT_fragment_density_map2: u32 = 1;
pub const VK_EXT_FRAGMENT_DENSITY_MAP_2_SPEC_VERSION: u32 = 1;
pub const VK_EXT_FRAGMENT_DENSITY_MAP_2_EXTENSION_NAME: &[u8; 29] =
    b"VK_EXT_fragment_density_map2\0";
pub const VK_QCOM_rotated_copy_commands: u32 = 1;
pub const VK_QCOM_ROTATED_COPY_COMMANDS_SPEC_VERSION: u32 = 2;
pub const VK_QCOM_ROTATED_COPY_COMMANDS_EXTENSION_NAME: &[u8; 30] =
    b"VK_QCOM_rotated_copy_commands\0";
pub const VK_EXT_image_robustness: u32 = 1;
pub const VK_EXT_IMAGE_ROBUSTNESS_SPEC_VERSION: u32 = 1;
pub const VK_EXT_IMAGE_ROBUSTNESS_EXTENSION_NAME: &[u8; 24] = b"VK_EXT_image_robustness\0";
pub const VK_EXT_image_compression_control: u32 = 1;
pub const VK_EXT_IMAGE_COMPRESSION_CONTROL_SPEC_VERSION: u32 = 1;
pub const VK_EXT_IMAGE_COMPRESSION_CONTROL_EXTENSION_NAME: &[u8; 33] =
    b"VK_EXT_image_compression_control\0";
pub const VK_EXT_attachment_feedback_loop_layout: u32 = 1;
pub const VK_EXT_ATTACHMENT_FEEDBACK_LOOP_LAYOUT_SPEC_VERSION: u32 = 2;
pub const VK_EXT_ATTACHMENT_FEEDBACK_LOOP_LAYOUT_EXTENSION_NAME: &[u8; 39] =
    b"VK_EXT_attachment_feedback_loop_layout\0";
pub const VK_EXT_4444_formats: u32 = 1;
pub const VK_EXT_4444_FORMATS_SPEC_VERSION: u32 = 1;
pub const VK_EXT_4444_FORMATS_EXTENSION_NAME: &[u8; 20] = b"VK_EXT_4444_formats\0";
pub const VK_EXT_device_fault: u32 = 1;
pub const VK_EXT_DEVICE_FAULT_SPEC_VERSION: u32 = 2;
pub const VK_EXT_DEVICE_FAULT_EXTENSION_NAME: &[u8; 20] = b"VK_EXT_device_fault\0";
pub const VK_ARM_rasterization_order_attachment_access: u32 = 1;
pub const VK_ARM_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_SPEC_VERSION: u32 = 1;
pub const VK_ARM_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_EXTENSION_NAME: &[u8; 45] =
    b"VK_ARM_rasterization_order_attachment_access\0";
pub const VK_EXT_rgba10x6_formats: u32 = 1;
pub const VK_EXT_RGBA10X6_FORMATS_SPEC_VERSION: u32 = 1;
pub const VK_EXT_RGBA10X6_FORMATS_EXTENSION_NAME: &[u8; 24] = b"VK_EXT_rgba10x6_formats\0";
pub const VK_VALVE_mutable_descriptor_type: u32 = 1;
pub const VK_VALVE_MUTABLE_DESCRIPTOR_TYPE_SPEC_VERSION: u32 = 1;
pub const VK_VALVE_MUTABLE_DESCRIPTOR_TYPE_EXTENSION_NAME: &[u8; 33] =
    b"VK_VALVE_mutable_descriptor_type\0";
pub const VK_EXT_vertex_input_dynamic_state: u32 = 1;
pub const VK_EXT_VERTEX_INPUT_DYNAMIC_STATE_SPEC_VERSION: u32 = 2;
pub const VK_EXT_VERTEX_INPUT_DYNAMIC_STATE_EXTENSION_NAME: &[u8; 34] =
    b"VK_EXT_vertex_input_dynamic_state\0";
pub const VK_EXT_physical_device_drm: u32 = 1;
pub const VK_EXT_PHYSICAL_DEVICE_DRM_SPEC_VERSION: u32 = 1;
pub const VK_EXT_PHYSICAL_DEVICE_DRM_EXTENSION_NAME: &[u8; 27] = b"VK_EXT_physical_device_drm\0";
pub const VK_EXT_device_address_binding_report: u32 = 1;
pub const VK_EXT_DEVICE_ADDRESS_BINDING_REPORT_SPEC_VERSION: u32 = 1;
pub const VK_EXT_DEVICE_ADDRESS_BINDING_REPORT_EXTENSION_NAME: &[u8; 37] =
    b"VK_EXT_device_address_binding_report\0";
pub const VK_EXT_depth_clip_control: u32 = 1;
pub const VK_EXT_DEPTH_CLIP_CONTROL_SPEC_VERSION: u32 = 1;
pub const VK_EXT_DEPTH_CLIP_CONTROL_EXTENSION_NAME: &[u8; 26] = b"VK_EXT_depth_clip_control\0";
pub const VK_EXT_primitive_topology_list_restart: u32 = 1;
pub const VK_EXT_PRIMITIVE_TOPOLOGY_LIST_RESTART_SPEC_VERSION: u32 = 1;
pub const VK_EXT_PRIMITIVE_TOPOLOGY_LIST_RESTART_EXTENSION_NAME: &[u8; 39] =
    b"VK_EXT_primitive_topology_list_restart\0";
pub const VK_EXT_present_mode_fifo_latest_ready: u32 = 1;
pub const VK_EXT_PRESENT_MODE_FIFO_LATEST_READY_SPEC_VERSION: u32 = 1;
pub const VK_EXT_PRESENT_MODE_FIFO_LATEST_READY_EXTENSION_NAME: &[u8; 38] =
    b"VK_EXT_present_mode_fifo_latest_ready\0";
pub const VK_HUAWEI_subpass_shading: u32 = 1;
pub const VK_HUAWEI_SUBPASS_SHADING_SPEC_VERSION: u32 = 3;
pub const VK_HUAWEI_SUBPASS_SHADING_EXTENSION_NAME: &[u8; 26] = b"VK_HUAWEI_subpass_shading\0";
pub const VK_HUAWEI_invocation_mask: u32 = 1;
pub const VK_HUAWEI_INVOCATION_MASK_SPEC_VERSION: u32 = 1;
pub const VK_HUAWEI_INVOCATION_MASK_EXTENSION_NAME: &[u8; 26] = b"VK_HUAWEI_invocation_mask\0";
pub const VK_NV_external_memory_rdma: u32 = 1;
pub const VK_NV_EXTERNAL_MEMORY_RDMA_SPEC_VERSION: u32 = 1;
pub const VK_NV_EXTERNAL_MEMORY_RDMA_EXTENSION_NAME: &[u8; 27] = b"VK_NV_external_memory_rdma\0";
pub const VK_EXT_pipeline_properties: u32 = 1;
pub const VK_EXT_PIPELINE_PROPERTIES_SPEC_VERSION: u32 = 1;
pub const VK_EXT_PIPELINE_PROPERTIES_EXTENSION_NAME: &[u8; 27] = b"VK_EXT_pipeline_properties\0";
pub const VK_EXT_frame_boundary: u32 = 1;
pub const VK_EXT_FRAME_BOUNDARY_SPEC_VERSION: u32 = 1;
pub const VK_EXT_FRAME_BOUNDARY_EXTENSION_NAME: &[u8; 22] = b"VK_EXT_frame_boundary\0";
pub const VK_EXT_multisampled_render_to_single_sampled: u32 = 1;
pub const VK_EXT_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_SPEC_VERSION: u32 = 1;
pub const VK_EXT_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_EXTENSION_NAME: &[u8; 45] =
    b"VK_EXT_multisampled_render_to_single_sampled\0";
pub const VK_EXT_extended_dynamic_state2: u32 = 1;
pub const VK_EXT_EXTENDED_DYNAMIC_STATE_2_SPEC_VERSION: u32 = 1;
pub const VK_EXT_EXTENDED_DYNAMIC_STATE_2_EXTENSION_NAME: &[u8; 31] =
    b"VK_EXT_extended_dynamic_state2\0";
pub const VK_EXT_color_write_enable: u32 = 1;
pub const VK_EXT_COLOR_WRITE_ENABLE_SPEC_VERSION: u32 = 1;
pub const VK_EXT_COLOR_WRITE_ENABLE_EXTENSION_NAME: &[u8; 26] = b"VK_EXT_color_write_enable\0";
pub const VK_EXT_primitives_generated_query: u32 = 1;
pub const VK_EXT_PRIMITIVES_GENERATED_QUERY_SPEC_VERSION: u32 = 1;
pub const VK_EXT_PRIMITIVES_GENERATED_QUERY_EXTENSION_NAME: &[u8; 34] =
    b"VK_EXT_primitives_generated_query\0";
pub const VK_EXT_global_priority_query: u32 = 1;
pub const VK_EXT_GLOBAL_PRIORITY_QUERY_SPEC_VERSION: u32 = 1;
pub const VK_EXT_GLOBAL_PRIORITY_QUERY_EXTENSION_NAME: &[u8; 29] =
    b"VK_EXT_global_priority_query\0";
pub const VK_MAX_GLOBAL_PRIORITY_SIZE_EXT: u32 = 16;
pub const VK_EXT_image_view_min_lod: u32 = 1;
pub const VK_EXT_IMAGE_VIEW_MIN_LOD_SPEC_VERSION: u32 = 1;
pub const VK_EXT_IMAGE_VIEW_MIN_LOD_EXTENSION_NAME: &[u8; 26] = b"VK_EXT_image_view_min_lod\0";
pub const VK_EXT_multi_draw: u32 = 1;
pub const VK_EXT_MULTI_DRAW_SPEC_VERSION: u32 = 1;
pub const VK_EXT_MULTI_DRAW_EXTENSION_NAME: &[u8; 18] = b"VK_EXT_multi_draw\0";
pub const VK_EXT_image_2d_view_of_3d: u32 = 1;
pub const VK_EXT_IMAGE_2D_VIEW_OF_3D_SPEC_VERSION: u32 = 1;
pub const VK_EXT_IMAGE_2D_VIEW_OF_3D_EXTENSION_NAME: &[u8; 27] = b"VK_EXT_image_2d_view_of_3d\0";
pub const VK_EXT_shader_tile_image: u32 = 1;
pub const VK_EXT_SHADER_TILE_IMAGE_SPEC_VERSION: u32 = 1;
pub const VK_EXT_SHADER_TILE_IMAGE_EXTENSION_NAME: &[u8; 25] = b"VK_EXT_shader_tile_image\0";
pub const VK_EXT_opacity_micromap: u32 = 1;
pub const VK_EXT_OPACITY_MICROMAP_SPEC_VERSION: u32 = 2;
pub const VK_EXT_OPACITY_MICROMAP_EXTENSION_NAME: &[u8; 24] = b"VK_EXT_opacity_micromap\0";
pub const VK_EXT_load_store_op_none: u32 = 1;
pub const VK_EXT_LOAD_STORE_OP_NONE_SPEC_VERSION: u32 = 1;
pub const VK_EXT_LOAD_STORE_OP_NONE_EXTENSION_NAME: &[u8; 26] = b"VK_EXT_load_store_op_none\0";
pub const VK_HUAWEI_cluster_culling_shader: u32 = 1;
pub const VK_HUAWEI_CLUSTER_CULLING_SHADER_SPEC_VERSION: u32 = 3;
pub const VK_HUAWEI_CLUSTER_CULLING_SHADER_EXTENSION_NAME: &[u8; 33] =
    b"VK_HUAWEI_cluster_culling_shader\0";
pub const VK_EXT_border_color_swizzle: u32 = 1;
pub const VK_EXT_BORDER_COLOR_SWIZZLE_SPEC_VERSION: u32 = 1;
pub const VK_EXT_BORDER_COLOR_SWIZZLE_EXTENSION_NAME: &[u8; 28] = b"VK_EXT_border_color_swizzle\0";
pub const VK_EXT_pageable_device_local_memory: u32 = 1;
pub const VK_EXT_PAGEABLE_DEVICE_LOCAL_MEMORY_SPEC_VERSION: u32 = 1;
pub const VK_EXT_PAGEABLE_DEVICE_LOCAL_MEMORY_EXTENSION_NAME: &[u8; 36] =
    b"VK_EXT_pageable_device_local_memory\0";
pub const VK_ARM_shader_core_properties: u32 = 1;
pub const VK_ARM_SHADER_CORE_PROPERTIES_SPEC_VERSION: u32 = 1;
pub const VK_ARM_SHADER_CORE_PROPERTIES_EXTENSION_NAME: &[u8; 30] =
    b"VK_ARM_shader_core_properties\0";
pub const VK_ARM_scheduling_controls: u32 = 1;
pub const VK_ARM_SCHEDULING_CONTROLS_SPEC_VERSION: u32 = 1;
pub const VK_ARM_SCHEDULING_CONTROLS_EXTENSION_NAME: &[u8; 27] = b"VK_ARM_scheduling_controls\0";
pub const VK_EXT_image_sliced_view_of_3d: u32 = 1;
pub const VK_EXT_IMAGE_SLICED_VIEW_OF_3D_SPEC_VERSION: u32 = 1;
pub const VK_EXT_IMAGE_SLICED_VIEW_OF_3D_EXTENSION_NAME: &[u8; 31] =
    b"VK_EXT_image_sliced_view_of_3d\0";
pub const VK_REMAINING_3D_SLICES_EXT: i32 = -1;
pub const VK_VALVE_descriptor_set_host_mapping: u32 = 1;
pub const VK_VALVE_DESCRIPTOR_SET_HOST_MAPPING_SPEC_VERSION: u32 = 1;
pub const VK_VALVE_DESCRIPTOR_SET_HOST_MAPPING_EXTENSION_NAME: &[u8; 37] =
    b"VK_VALVE_descriptor_set_host_mapping\0";
pub const VK_EXT_depth_clamp_zero_one: u32 = 1;
pub const VK_EXT_DEPTH_CLAMP_ZERO_ONE_SPEC_VERSION: u32 = 1;
pub const VK_EXT_DEPTH_CLAMP_ZERO_ONE_EXTENSION_NAME: &[u8; 28] = b"VK_EXT_depth_clamp_zero_one\0";
pub const VK_EXT_non_seamless_cube_map: u32 = 1;
pub const VK_EXT_NON_SEAMLESS_CUBE_MAP_SPEC_VERSION: u32 = 1;
pub const VK_EXT_NON_SEAMLESS_CUBE_MAP_EXTENSION_NAME: &[u8; 29] =
    b"VK_EXT_non_seamless_cube_map\0";
pub const VK_ARM_render_pass_striped: u32 = 1;
pub const VK_ARM_RENDER_PASS_STRIPED_SPEC_VERSION: u32 = 1;
pub const VK_ARM_RENDER_PASS_STRIPED_EXTENSION_NAME: &[u8; 27] = b"VK_ARM_render_pass_striped\0";
pub const VK_QCOM_fragment_density_map_offset: u32 = 1;
pub const VK_QCOM_FRAGMENT_DENSITY_MAP_OFFSET_SPEC_VERSION: u32 = 3;
pub const VK_QCOM_FRAGMENT_DENSITY_MAP_OFFSET_EXTENSION_NAME: &[u8; 36] =
    b"VK_QCOM_fragment_density_map_offset\0";
pub const VK_NV_copy_memory_indirect: u32 = 1;
pub const VK_NV_COPY_MEMORY_INDIRECT_SPEC_VERSION: u32 = 1;
pub const VK_NV_COPY_MEMORY_INDIRECT_EXTENSION_NAME: &[u8; 27] = b"VK_NV_copy_memory_indirect\0";
pub const VK_NV_memory_decompression: u32 = 1;
pub const VK_NV_MEMORY_DECOMPRESSION_SPEC_VERSION: u32 = 1;
pub const VK_NV_MEMORY_DECOMPRESSION_EXTENSION_NAME: &[u8; 27] = b"VK_NV_memory_decompression\0";
pub const VK_NV_device_generated_commands_compute: u32 = 1;
pub const VK_NV_DEVICE_GENERATED_COMMANDS_COMPUTE_SPEC_VERSION: u32 = 2;
pub const VK_NV_DEVICE_GENERATED_COMMANDS_COMPUTE_EXTENSION_NAME: &[u8; 40] =
    b"VK_NV_device_generated_commands_compute\0";
pub const VK_NV_ray_tracing_linear_swept_spheres: u32 = 1;
pub const VK_NV_RAY_TRACING_LINEAR_SWEPT_SPHERES_SPEC_VERSION: u32 = 1;
pub const VK_NV_RAY_TRACING_LINEAR_SWEPT_SPHERES_EXTENSION_NAME: &[u8; 39] =
    b"VK_NV_ray_tracing_linear_swept_spheres\0";
pub const VK_NV_linear_color_attachment: u32 = 1;
pub const VK_NV_LINEAR_COLOR_ATTACHMENT_SPEC_VERSION: u32 = 1;
pub const VK_NV_LINEAR_COLOR_ATTACHMENT_EXTENSION_NAME: &[u8; 30] =
    b"VK_NV_linear_color_attachment\0";
pub const VK_GOOGLE_surfaceless_query: u32 = 1;
pub const VK_GOOGLE_SURFACELESS_QUERY_SPEC_VERSION: u32 = 2;
pub const VK_GOOGLE_SURFACELESS_QUERY_EXTENSION_NAME: &[u8; 28] = b"VK_GOOGLE_surfaceless_query\0";
pub const VK_EXT_image_compression_control_swapchain: u32 = 1;
pub const VK_EXT_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_SPEC_VERSION: u32 = 1;
pub const VK_EXT_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_EXTENSION_NAME: &[u8; 43] =
    b"VK_EXT_image_compression_control_swapchain\0";
pub const VK_QCOM_image_processing: u32 = 1;
pub const VK_QCOM_IMAGE_PROCESSING_SPEC_VERSION: u32 = 1;
pub const VK_QCOM_IMAGE_PROCESSING_EXTENSION_NAME: &[u8; 25] = b"VK_QCOM_image_processing\0";
pub const VK_EXT_nested_command_buffer: u32 = 1;
pub const VK_EXT_NESTED_COMMAND_BUFFER_SPEC_VERSION: u32 = 1;
pub const VK_EXT_NESTED_COMMAND_BUFFER_EXTENSION_NAME: &[u8; 29] =
    b"VK_EXT_nested_command_buffer\0";
pub const VK_EXT_external_memory_acquire_unmodified: u32 = 1;
pub const VK_EXT_EXTERNAL_MEMORY_ACQUIRE_UNMODIFIED_SPEC_VERSION: u32 = 1;
pub const VK_EXT_EXTERNAL_MEMORY_ACQUIRE_UNMODIFIED_EXTENSION_NAME: &[u8; 42] =
    b"VK_EXT_external_memory_acquire_unmodified\0";
pub const VK_EXT_extended_dynamic_state3: u32 = 1;
pub const VK_EXT_EXTENDED_DYNAMIC_STATE_3_SPEC_VERSION: u32 = 2;
pub const VK_EXT_EXTENDED_DYNAMIC_STATE_3_EXTENSION_NAME: &[u8; 31] =
    b"VK_EXT_extended_dynamic_state3\0";
pub const VK_EXT_subpass_merge_feedback: u32 = 1;
pub const VK_EXT_SUBPASS_MERGE_FEEDBACK_SPEC_VERSION: u32 = 2;
pub const VK_EXT_SUBPASS_MERGE_FEEDBACK_EXTENSION_NAME: &[u8; 30] =
    b"VK_EXT_subpass_merge_feedback\0";
pub const VK_LUNARG_direct_driver_loading: u32 = 1;
pub const VK_LUNARG_DIRECT_DRIVER_LOADING_SPEC_VERSION: u32 = 1;
pub const VK_LUNARG_DIRECT_DRIVER_LOADING_EXTENSION_NAME: &[u8; 32] =
    b"VK_LUNARG_direct_driver_loading\0";
pub const VK_EXT_shader_module_identifier: u32 = 1;
pub const VK_MAX_SHADER_MODULE_IDENTIFIER_SIZE_EXT: u32 = 32;
pub const VK_EXT_SHADER_MODULE_IDENTIFIER_SPEC_VERSION: u32 = 1;
pub const VK_EXT_SHADER_MODULE_IDENTIFIER_EXTENSION_NAME: &[u8; 32] =
    b"VK_EXT_shader_module_identifier\0";
pub const VK_EXT_rasterization_order_attachment_access: u32 = 1;
pub const VK_EXT_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_SPEC_VERSION: u32 = 1;
pub const VK_EXT_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_EXTENSION_NAME: &[u8; 45] =
    b"VK_EXT_rasterization_order_attachment_access\0";
pub const VK_NV_optical_flow: u32 = 1;
pub const VK_NV_OPTICAL_FLOW_SPEC_VERSION: u32 = 1;
pub const VK_NV_OPTICAL_FLOW_EXTENSION_NAME: &[u8; 19] = b"VK_NV_optical_flow\0";
pub const VK_EXT_legacy_dithering: u32 = 1;
pub const VK_EXT_LEGACY_DITHERING_SPEC_VERSION: u32 = 2;
pub const VK_EXT_LEGACY_DITHERING_EXTENSION_NAME: &[u8; 24] = b"VK_EXT_legacy_dithering\0";
pub const VK_EXT_pipeline_protected_access: u32 = 1;
pub const VK_EXT_PIPELINE_PROTECTED_ACCESS_SPEC_VERSION: u32 = 1;
pub const VK_EXT_PIPELINE_PROTECTED_ACCESS_EXTENSION_NAME: &[u8; 33] =
    b"VK_EXT_pipeline_protected_access\0";
pub const VK_AMD_anti_lag: u32 = 1;
pub const VK_AMD_ANTI_LAG_SPEC_VERSION: u32 = 1;
pub const VK_AMD_ANTI_LAG_EXTENSION_NAME: &[u8; 16] = b"VK_AMD_anti_lag\0";
pub const VK_EXT_shader_object: u32 = 1;
pub const VK_EXT_SHADER_OBJECT_SPEC_VERSION: u32 = 1;
pub const VK_EXT_SHADER_OBJECT_EXTENSION_NAME: &[u8; 21] = b"VK_EXT_shader_object\0";
pub const VK_QCOM_tile_properties: u32 = 1;
pub const VK_QCOM_TILE_PROPERTIES_SPEC_VERSION: u32 = 1;
pub const VK_QCOM_TILE_PROPERTIES_EXTENSION_NAME: &[u8; 24] = b"VK_QCOM_tile_properties\0";
pub const VK_SEC_amigo_profiling: u32 = 1;
pub const VK_SEC_AMIGO_PROFILING_SPEC_VERSION: u32 = 1;
pub const VK_SEC_AMIGO_PROFILING_EXTENSION_NAME: &[u8; 23] = b"VK_SEC_amigo_profiling\0";
pub const VK_QCOM_multiview_per_view_viewports: u32 = 1;
pub const VK_QCOM_MULTIVIEW_PER_VIEW_VIEWPORTS_SPEC_VERSION: u32 = 1;
pub const VK_QCOM_MULTIVIEW_PER_VIEW_VIEWPORTS_EXTENSION_NAME: &[u8; 37] =
    b"VK_QCOM_multiview_per_view_viewports\0";
pub const VK_NV_ray_tracing_invocation_reorder: u32 = 1;
pub const VK_NV_RAY_TRACING_INVOCATION_REORDER_SPEC_VERSION: u32 = 1;
pub const VK_NV_RAY_TRACING_INVOCATION_REORDER_EXTENSION_NAME: &[u8; 37] =
    b"VK_NV_ray_tracing_invocation_reorder\0";
pub const VK_NV_cooperative_vector: u32 = 1;
pub const VK_NV_COOPERATIVE_VECTOR_SPEC_VERSION: u32 = 4;
pub const VK_NV_COOPERATIVE_VECTOR_EXTENSION_NAME: &[u8; 25] = b"VK_NV_cooperative_vector\0";
pub const VK_NV_extended_sparse_address_space: u32 = 1;
pub const VK_NV_EXTENDED_SPARSE_ADDRESS_SPACE_SPEC_VERSION: u32 = 1;
pub const VK_NV_EXTENDED_SPARSE_ADDRESS_SPACE_EXTENSION_NAME: &[u8; 36] =
    b"VK_NV_extended_sparse_address_space\0";
pub const VK_EXT_mutable_descriptor_type: u32 = 1;
pub const VK_EXT_MUTABLE_DESCRIPTOR_TYPE_SPEC_VERSION: u32 = 1;
pub const VK_EXT_MUTABLE_DESCRIPTOR_TYPE_EXTENSION_NAME: &[u8; 31] =
    b"VK_EXT_mutable_descriptor_type\0";
pub const VK_EXT_legacy_vertex_attributes: u32 = 1;
pub const VK_EXT_LEGACY_VERTEX_ATTRIBUTES_SPEC_VERSION: u32 = 1;
pub const VK_EXT_LEGACY_VERTEX_ATTRIBUTES_EXTENSION_NAME: &[u8; 32] =
    b"VK_EXT_legacy_vertex_attributes\0";
pub const VK_EXT_layer_settings: u32 = 1;
pub const VK_EXT_LAYER_SETTINGS_SPEC_VERSION: u32 = 2;
pub const VK_EXT_LAYER_SETTINGS_EXTENSION_NAME: &[u8; 22] = b"VK_EXT_layer_settings\0";
pub const VK_ARM_shader_core_builtins: u32 = 1;
pub const VK_ARM_SHADER_CORE_BUILTINS_SPEC_VERSION: u32 = 2;
pub const VK_ARM_SHADER_CORE_BUILTINS_EXTENSION_NAME: &[u8; 28] = b"VK_ARM_shader_core_builtins\0";
pub const VK_EXT_pipeline_library_group_handles: u32 = 1;
pub const VK_EXT_PIPELINE_LIBRARY_GROUP_HANDLES_SPEC_VERSION: u32 = 1;
pub const VK_EXT_PIPELINE_LIBRARY_GROUP_HANDLES_EXTENSION_NAME: &[u8; 38] =
    b"VK_EXT_pipeline_library_group_handles\0";
pub const VK_EXT_dynamic_rendering_unused_attachments: u32 = 1;
pub const VK_EXT_DYNAMIC_RENDERING_UNUSED_ATTACHMENTS_SPEC_VERSION: u32 = 1;
pub const VK_EXT_DYNAMIC_RENDERING_UNUSED_ATTACHMENTS_EXTENSION_NAME: &[u8; 44] =
    b"VK_EXT_dynamic_rendering_unused_attachments\0";
pub const VK_NV_low_latency2: u32 = 1;
pub const VK_NV_LOW_LATENCY_2_SPEC_VERSION: u32 = 2;
pub const VK_NV_LOW_LATENCY_2_EXTENSION_NAME: &[u8; 19] = b"VK_NV_low_latency2\0";
pub const VK_QCOM_multiview_per_view_render_areas: u32 = 1;
pub const VK_QCOM_MULTIVIEW_PER_VIEW_RENDER_AREAS_SPEC_VERSION: u32 = 1;
pub const VK_QCOM_MULTIVIEW_PER_VIEW_RENDER_AREAS_EXTENSION_NAME: &[u8; 40] =
    b"VK_QCOM_multiview_per_view_render_areas\0";
pub const VK_NV_per_stage_descriptor_set: u32 = 1;
pub const VK_NV_PER_STAGE_DESCRIPTOR_SET_SPEC_VERSION: u32 = 1;
pub const VK_NV_PER_STAGE_DESCRIPTOR_SET_EXTENSION_NAME: &[u8; 31] =
    b"VK_NV_per_stage_descriptor_set\0";
pub const VK_QCOM_image_processing2: u32 = 1;
pub const VK_QCOM_IMAGE_PROCESSING_2_SPEC_VERSION: u32 = 1;
pub const VK_QCOM_IMAGE_PROCESSING_2_EXTENSION_NAME: &[u8; 26] = b"VK_QCOM_image_processing2\0";
pub const VK_QCOM_filter_cubic_weights: u32 = 1;
pub const VK_QCOM_FILTER_CUBIC_WEIGHTS_SPEC_VERSION: u32 = 1;
pub const VK_QCOM_FILTER_CUBIC_WEIGHTS_EXTENSION_NAME: &[u8; 29] =
    b"VK_QCOM_filter_cubic_weights\0";
pub const VK_QCOM_ycbcr_degamma: u32 = 1;
pub const VK_QCOM_YCBCR_DEGAMMA_SPEC_VERSION: u32 = 1;
pub const VK_QCOM_YCBCR_DEGAMMA_EXTENSION_NAME: &[u8; 22] = b"VK_QCOM_ycbcr_degamma\0";
pub const VK_QCOM_filter_cubic_clamp: u32 = 1;
pub const VK_QCOM_FILTER_CUBIC_CLAMP_SPEC_VERSION: u32 = 1;
pub const VK_QCOM_FILTER_CUBIC_CLAMP_EXTENSION_NAME: &[u8; 27] = b"VK_QCOM_filter_cubic_clamp\0";
pub const VK_EXT_attachment_feedback_loop_dynamic_state: u32 = 1;
pub const VK_EXT_ATTACHMENT_FEEDBACK_LOOP_DYNAMIC_STATE_SPEC_VERSION: u32 = 1;
pub const VK_EXT_ATTACHMENT_FEEDBACK_LOOP_DYNAMIC_STATE_EXTENSION_NAME: &[u8; 46] =
    b"VK_EXT_attachment_feedback_loop_dynamic_state\0";
pub const VK_MSFT_layered_driver: u32 = 1;
pub const VK_MSFT_LAYERED_DRIVER_SPEC_VERSION: u32 = 1;
pub const VK_MSFT_LAYERED_DRIVER_EXTENSION_NAME: &[u8; 23] = b"VK_MSFT_layered_driver\0";
pub const VK_NV_descriptor_pool_overallocation: u32 = 1;
pub const VK_NV_DESCRIPTOR_POOL_OVERALLOCATION_SPEC_VERSION: u32 = 1;
pub const VK_NV_DESCRIPTOR_POOL_OVERALLOCATION_EXTENSION_NAME: &[u8; 37] =
    b"VK_NV_descriptor_pool_overallocation\0";
pub const VK_QCOM_tile_memory_heap: u32 = 1;
pub const VK_QCOM_TILE_MEMORY_HEAP_SPEC_VERSION: u32 = 1;
pub const VK_QCOM_TILE_MEMORY_HEAP_EXTENSION_NAME: &[u8; 25] = b"VK_QCOM_tile_memory_heap\0";
pub const VK_NV_display_stereo: u32 = 1;
pub const VK_NV_DISPLAY_STEREO_SPEC_VERSION: u32 = 1;
pub const VK_NV_DISPLAY_STEREO_EXTENSION_NAME: &[u8; 21] = b"VK_NV_display_stereo\0";
pub const VK_NV_raw_access_chains: u32 = 1;
pub const VK_NV_RAW_ACCESS_CHAINS_SPEC_VERSION: u32 = 1;
pub const VK_NV_RAW_ACCESS_CHAINS_EXTENSION_NAME: &[u8; 24] = b"VK_NV_raw_access_chains\0";
pub const VK_NV_external_compute_queue: u32 = 1;
pub const VK_NV_EXTERNAL_COMPUTE_QUEUE_SPEC_VERSION: u32 = 1;
pub const VK_NV_EXTERNAL_COMPUTE_QUEUE_EXTENSION_NAME: &[u8; 29] =
    b"VK_NV_external_compute_queue\0";
pub const VK_NV_command_buffer_inheritance: u32 = 1;
pub const VK_NV_COMMAND_BUFFER_INHERITANCE_SPEC_VERSION: u32 = 1;
pub const VK_NV_COMMAND_BUFFER_INHERITANCE_EXTENSION_NAME: &[u8; 33] =
    b"VK_NV_command_buffer_inheritance\0";
pub const VK_NV_shader_atomic_float16_vector: u32 = 1;
pub const VK_NV_SHADER_ATOMIC_FLOAT16_VECTOR_SPEC_VERSION: u32 = 1;
pub const VK_NV_SHADER_ATOMIC_FLOAT16_VECTOR_EXTENSION_NAME: &[u8; 35] =
    b"VK_NV_shader_atomic_float16_vector\0";
pub const VK_EXT_shader_replicated_composites: u32 = 1;
pub const VK_EXT_SHADER_REPLICATED_COMPOSITES_SPEC_VERSION: u32 = 1;
pub const VK_EXT_SHADER_REPLICATED_COMPOSITES_EXTENSION_NAME: &[u8; 36] =
    b"VK_EXT_shader_replicated_composites\0";
pub const VK_NV_ray_tracing_validation: u32 = 1;
pub const VK_NV_RAY_TRACING_VALIDATION_SPEC_VERSION: u32 = 1;
pub const VK_NV_RAY_TRACING_VALIDATION_EXTENSION_NAME: &[u8; 29] =
    b"VK_NV_ray_tracing_validation\0";
pub const VK_NV_cluster_acceleration_structure: u32 = 1;
pub const VK_NV_CLUSTER_ACCELERATION_STRUCTURE_SPEC_VERSION: u32 = 2;
pub const VK_NV_CLUSTER_ACCELERATION_STRUCTURE_EXTENSION_NAME: &[u8; 37] =
    b"VK_NV_cluster_acceleration_structure\0";
pub const VK_NV_partitioned_acceleration_structure: u32 = 1;
pub const VK_NV_PARTITIONED_ACCELERATION_STRUCTURE_SPEC_VERSION: u32 = 1;
pub const VK_NV_PARTITIONED_ACCELERATION_STRUCTURE_EXTENSION_NAME: &[u8; 41] =
    b"VK_NV_partitioned_acceleration_structure\0";
pub const VK_PARTITIONED_ACCELERATION_STRUCTURE_PARTITION_INDEX_GLOBAL_NV: i32 = -1;
pub const VK_EXT_device_generated_commands: u32 = 1;
pub const VK_EXT_DEVICE_GENERATED_COMMANDS_SPEC_VERSION: u32 = 1;
pub const VK_EXT_DEVICE_GENERATED_COMMANDS_EXTENSION_NAME: &[u8; 33] =
    b"VK_EXT_device_generated_commands\0";
pub const VK_MESA_image_alignment_control: u32 = 1;
pub const VK_MESA_IMAGE_ALIGNMENT_CONTROL_SPEC_VERSION: u32 = 1;
pub const VK_MESA_IMAGE_ALIGNMENT_CONTROL_EXTENSION_NAME: &[u8; 32] =
    b"VK_MESA_image_alignment_control\0";
pub const VK_EXT_depth_clamp_control: u32 = 1;
pub const VK_EXT_DEPTH_CLAMP_CONTROL_SPEC_VERSION: u32 = 1;
pub const VK_EXT_DEPTH_CLAMP_CONTROL_EXTENSION_NAME: &[u8; 27] = b"VK_EXT_depth_clamp_control\0";
pub const VK_HUAWEI_hdr_vivid: u32 = 1;
pub const VK_HUAWEI_HDR_VIVID_SPEC_VERSION: u32 = 1;
pub const VK_HUAWEI_HDR_VIVID_EXTENSION_NAME: &[u8; 20] = b"VK_HUAWEI_hdr_vivid\0";
pub const VK_NV_cooperative_matrix2: u32 = 1;
pub const VK_NV_COOPERATIVE_MATRIX_2_SPEC_VERSION: u32 = 1;
pub const VK_NV_COOPERATIVE_MATRIX_2_EXTENSION_NAME: &[u8; 26] = b"VK_NV_cooperative_matrix2\0";
pub const VK_ARM_pipeline_opacity_micromap: u32 = 1;
pub const VK_ARM_PIPELINE_OPACITY_MICROMAP_SPEC_VERSION: u32 = 1;
pub const VK_ARM_PIPELINE_OPACITY_MICROMAP_EXTENSION_NAME: &[u8; 33] =
    b"VK_ARM_pipeline_opacity_micromap\0";
pub const VK_EXT_vertex_attribute_robustness: u32 = 1;
pub const VK_EXT_VERTEX_ATTRIBUTE_ROBUSTNESS_SPEC_VERSION: u32 = 1;
pub const VK_EXT_VERTEX_ATTRIBUTE_ROBUSTNESS_EXTENSION_NAME: &[u8; 35] =
    b"VK_EXT_vertex_attribute_robustness\0";
pub const VK_NV_present_metering: u32 = 1;
pub const VK_NV_PRESENT_METERING_SPEC_VERSION: u32 = 1;
pub const VK_NV_PRESENT_METERING_EXTENSION_NAME: &[u8; 23] = b"VK_NV_present_metering\0";
pub const VK_EXT_fragment_density_map_offset: u32 = 1;
pub const VK_EXT_FRAGMENT_DENSITY_MAP_OFFSET_SPEC_VERSION: u32 = 1;
pub const VK_EXT_FRAGMENT_DENSITY_MAP_OFFSET_EXTENSION_NAME: &[u8; 35] =
    b"VK_EXT_fragment_density_map_offset\0";
pub const VK_EXT_zero_initialize_device_memory: u32 = 1;
pub const VK_EXT_ZERO_INITIALIZE_DEVICE_MEMORY_SPEC_VERSION: u32 = 1;
pub const VK_EXT_ZERO_INITIALIZE_DEVICE_MEMORY_EXTENSION_NAME: &[u8; 37] =
    b"VK_EXT_zero_initialize_device_memory\0";
pub const VK_KHR_acceleration_structure: u32 = 1;
pub const VK_KHR_ACCELERATION_STRUCTURE_SPEC_VERSION: u32 = 13;
pub const VK_KHR_ACCELERATION_STRUCTURE_EXTENSION_NAME: &[u8; 30] =
    b"VK_KHR_acceleration_structure\0";
pub const VK_KHR_ray_tracing_pipeline: u32 = 1;
pub const VK_KHR_RAY_TRACING_PIPELINE_SPEC_VERSION: u32 = 1;
pub const VK_KHR_RAY_TRACING_PIPELINE_EXTENSION_NAME: &[u8; 28] = b"VK_KHR_ray_tracing_pipeline\0";
pub const VK_KHR_ray_query: u32 = 1;
pub const VK_KHR_RAY_QUERY_SPEC_VERSION: u32 = 1;
pub const VK_KHR_RAY_QUERY_EXTENSION_NAME: &[u8; 17] = b"VK_KHR_ray_query\0";
pub const VK_EXT_mesh_shader: u32 = 1;
pub const VK_EXT_MESH_SHADER_SPEC_VERSION: u32 = 1;
pub const VK_EXT_MESH_SHADER_EXTENSION_NAME: &[u8; 19] = b"VK_EXT_mesh_shader\0";
pub const VkResult_VK_SUCCESS: VkResult = 0;
pub const VkResult_VK_NOT_READY: VkResult = 1;
pub const VkResult_VK_TIMEOUT: VkResult = 2;
pub const VkResult_VK_EVENT_SET: VkResult = 3;
pub const VkResult_VK_EVENT_RESET: VkResult = 4;
pub const VkResult_VK_INCOMPLETE: VkResult = 5;
pub const VkResult_VK_ERROR_OUT_OF_HOST_MEMORY: VkResult = -1;
pub const VkResult_VK_ERROR_OUT_OF_DEVICE_MEMORY: VkResult = -2;
pub const VkResult_VK_ERROR_INITIALIZATION_FAILED: VkResult = -3;
pub const VkResult_VK_ERROR_DEVICE_LOST: VkResult = -4;
pub const VkResult_VK_ERROR_MEMORY_MAP_FAILED: VkResult = -5;
pub const VkResult_VK_ERROR_LAYER_NOT_PRESENT: VkResult = -6;
pub const VkResult_VK_ERROR_EXTENSION_NOT_PRESENT: VkResult = -7;
pub const VkResult_VK_ERROR_FEATURE_NOT_PRESENT: VkResult = -8;
pub const VkResult_VK_ERROR_INCOMPATIBLE_DRIVER: VkResult = -9;
pub const VkResult_VK_ERROR_TOO_MANY_OBJECTS: VkResult = -10;
pub const VkResult_VK_ERROR_FORMAT_NOT_SUPPORTED: VkResult = -11;
pub const VkResult_VK_ERROR_FRAGMENTED_POOL: VkResult = -12;
pub const VkResult_VK_ERROR_UNKNOWN: VkResult = -13;
pub const VkResult_VK_ERROR_OUT_OF_POOL_MEMORY: VkResult = -1000069000;
pub const VkResult_VK_ERROR_INVALID_EXTERNAL_HANDLE: VkResult = -1000072003;
pub const VkResult_VK_ERROR_FRAGMENTATION: VkResult = -1000161000;
pub const VkResult_VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS: VkResult = -1000257000;
pub const VkResult_VK_PIPELINE_COMPILE_REQUIRED: VkResult = 1000297000;
pub const VkResult_VK_ERROR_NOT_PERMITTED: VkResult = -1000174001;
pub const VkResult_VK_ERROR_SURFACE_LOST_KHR: VkResult = -1000000000;
pub const VkResult_VK_ERROR_NATIVE_WINDOW_IN_USE_KHR: VkResult = -1000000001;
pub const VkResult_VK_SUBOPTIMAL_KHR: VkResult = 1000001003;
pub const VkResult_VK_ERROR_OUT_OF_DATE_KHR: VkResult = -1000001004;
pub const VkResult_VK_ERROR_INCOMPATIBLE_DISPLAY_KHR: VkResult = -1000003001;
pub const VkResult_VK_ERROR_VALIDATION_FAILED_EXT: VkResult = -1000011001;
pub const VkResult_VK_ERROR_INVALID_SHADER_NV: VkResult = -1000012000;
pub const VkResult_VK_ERROR_IMAGE_USAGE_NOT_SUPPORTED_KHR: VkResult = -1000023000;
pub const VkResult_VK_ERROR_VIDEO_PICTURE_LAYOUT_NOT_SUPPORTED_KHR: VkResult = -1000023001;
pub const VkResult_VK_ERROR_VIDEO_PROFILE_OPERATION_NOT_SUPPORTED_KHR: VkResult = -1000023002;
pub const VkResult_VK_ERROR_VIDEO_PROFILE_FORMAT_NOT_SUPPORTED_KHR: VkResult = -1000023003;
pub const VkResult_VK_ERROR_VIDEO_PROFILE_CODEC_NOT_SUPPORTED_KHR: VkResult = -1000023004;
pub const VkResult_VK_ERROR_VIDEO_STD_VERSION_NOT_SUPPORTED_KHR: VkResult = -1000023005;
pub const VkResult_VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT: VkResult = -1000158000;
pub const VkResult_VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT: VkResult = -1000255000;
pub const VkResult_VK_THREAD_IDLE_KHR: VkResult = 1000268000;
pub const VkResult_VK_THREAD_DONE_KHR: VkResult = 1000268001;
pub const VkResult_VK_OPERATION_DEFERRED_KHR: VkResult = 1000268002;
pub const VkResult_VK_OPERATION_NOT_DEFERRED_KHR: VkResult = 1000268003;
pub const VkResult_VK_ERROR_INVALID_VIDEO_STD_PARAMETERS_KHR: VkResult = -1000299000;
pub const VkResult_VK_ERROR_COMPRESSION_EXHAUSTED_EXT: VkResult = -1000338000;
pub const VkResult_VK_INCOMPATIBLE_SHADER_BINARY_EXT: VkResult = 1000482000;
pub const VkResult_VK_PIPELINE_BINARY_MISSING_KHR: VkResult = 1000483000;
pub const VkResult_VK_ERROR_NOT_ENOUGH_SPACE_KHR: VkResult = -1000483000;
pub const VkResult_VK_ERROR_OUT_OF_POOL_MEMORY_KHR: VkResult = -1000069000;
pub const VkResult_VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR: VkResult = -1000072003;
pub const VkResult_VK_ERROR_FRAGMENTATION_EXT: VkResult = -1000161000;
pub const VkResult_VK_ERROR_NOT_PERMITTED_EXT: VkResult = -1000174001;
pub const VkResult_VK_ERROR_NOT_PERMITTED_KHR: VkResult = -1000174001;
pub const VkResult_VK_ERROR_INVALID_DEVICE_ADDRESS_EXT: VkResult = -1000257000;
pub const VkResult_VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR: VkResult = -1000257000;
pub const VkResult_VK_PIPELINE_COMPILE_REQUIRED_EXT: VkResult = 1000297000;
pub const VkResult_VK_ERROR_PIPELINE_COMPILE_REQUIRED_EXT: VkResult = 1000297000;
#[doc = " VK_ERROR_INCOMPATIBLE_SHADER_BINARY_EXT is a deprecated alias"]
pub const VkResult_VK_ERROR_INCOMPATIBLE_SHADER_BINARY_EXT: VkResult = 1000482000;
#[doc = " VK_ERROR_INCOMPATIBLE_SHADER_BINARY_EXT is a deprecated alias"]
pub const VkResult_VK_RESULT_MAX_ENUM: VkResult = 2147483647;
pub const VkStructureType_VK_STRUCTURE_TYPE_APPLICATION_INFO: VkStructureType = 0;
pub const VkStructureType_VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO: VkStructureType = 1;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO: VkStructureType = 2;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO: VkStructureType = 3;
pub const VkStructureType_VK_STRUCTURE_TYPE_SUBMIT_INFO: VkStructureType = 4;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO: VkStructureType = 5;
pub const VkStructureType_VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE: VkStructureType = 6;
pub const VkStructureType_VK_STRUCTURE_TYPE_BIND_SPARSE_INFO: VkStructureType = 7;
pub const VkStructureType_VK_STRUCTURE_TYPE_FENCE_CREATE_INFO: VkStructureType = 8;
pub const VkStructureType_VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO: VkStructureType = 9;
pub const VkStructureType_VK_STRUCTURE_TYPE_EVENT_CREATE_INFO: VkStructureType = 10;
pub const VkStructureType_VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO: VkStructureType = 11;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO: VkStructureType = 12;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO: VkStructureType = 13;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO: VkStructureType = 14;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO: VkStructureType = 15;
pub const VkStructureType_VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO: VkStructureType = 16;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO: VkStructureType = 17;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO: VkStructureType = 18;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO:
    VkStructureType = 19;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO:
    VkStructureType = 20;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO:
    VkStructureType = 21;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO: VkStructureType =
    22;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO:
    VkStructureType = 23;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO:
    VkStructureType = 24;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO:
    VkStructureType = 25;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO:
    VkStructureType = 26;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO: VkStructureType =
    27;
pub const VkStructureType_VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO: VkStructureType = 28;
pub const VkStructureType_VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO: VkStructureType = 29;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO: VkStructureType = 30;
pub const VkStructureType_VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO: VkStructureType = 31;
pub const VkStructureType_VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO: VkStructureType = 32;
pub const VkStructureType_VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO: VkStructureType = 33;
pub const VkStructureType_VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO: VkStructureType = 34;
pub const VkStructureType_VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET: VkStructureType = 35;
pub const VkStructureType_VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET: VkStructureType = 36;
pub const VkStructureType_VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO: VkStructureType = 37;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO: VkStructureType = 38;
pub const VkStructureType_VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO: VkStructureType = 39;
pub const VkStructureType_VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO: VkStructureType = 40;
pub const VkStructureType_VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO: VkStructureType = 41;
pub const VkStructureType_VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO: VkStructureType = 42;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO: VkStructureType = 43;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER: VkStructureType = 44;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER: VkStructureType = 45;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_BARRIER: VkStructureType = 46;
pub const VkStructureType_VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO: VkStructureType = 47;
pub const VkStructureType_VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO: VkStructureType = 48;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES: VkStructureType =
    1000094000;
pub const VkStructureType_VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO: VkStructureType = 1000157000;
pub const VkStructureType_VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO: VkStructureType = 1000157001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES:
    VkStructureType = 1000083000;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS: VkStructureType =
    1000127000;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO: VkStructureType =
    1000127001;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO: VkStructureType =
    1000060000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO: VkStructureType =
    1000060003;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO:
    VkStructureType = 1000060004;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO: VkStructureType = 1000060005;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO: VkStructureType =
    1000060006;
pub const VkStructureType_VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO: VkStructureType =
    1000060013;
pub const VkStructureType_VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO: VkStructureType =
    1000060014;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES: VkStructureType =
    1000070000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO: VkStructureType =
    1000070001;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2: VkStructureType =
    1000146000;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2: VkStructureType =
    1000146001;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2:
    VkStructureType = 1000146002;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2: VkStructureType = 1000146003;
pub const VkStructureType_VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2: VkStructureType =
    1000146004;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2: VkStructureType =
    1000059000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2: VkStructureType =
    1000059001;
pub const VkStructureType_VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2: VkStructureType = 1000059002;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2: VkStructureType = 1000059003;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2: VkStructureType =
    1000059004;
pub const VkStructureType_VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2: VkStructureType = 1000059005;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2: VkStructureType =
    1000059006;
pub const VkStructureType_VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2: VkStructureType =
    1000059007;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2:
    VkStructureType = 1000059008;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES:
    VkStructureType = 1000117000;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO:
    VkStructureType = 1000117001;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO: VkStructureType =
    1000117002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO : VkStructureType = 1000117003 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO: VkStructureType =
    1000053000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES: VkStructureType =
    1000053001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES: VkStructureType =
    1000053002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES:
    VkStructureType = 1000120000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO: VkStructureType = 1000145000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES:
    VkStructureType = 1000145001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES:
    VkStructureType = 1000145002;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2: VkStructureType = 1000145003;
pub const VkStructureType_VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO: VkStructureType =
    1000156000;
pub const VkStructureType_VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO: VkStructureType =
    1000156001;
pub const VkStructureType_VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO: VkStructureType =
    1000156002;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO: VkStructureType =
    1000156003;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES:
    VkStructureType = 1000156004;
pub const VkStructureType_VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES:
    VkStructureType = 1000156005;
pub const VkStructureType_VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO:
    VkStructureType = 1000085000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO:
    VkStructureType = 1000071000;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES: VkStructureType =
    1000071001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO: VkStructureType =
    1000071002;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES: VkStructureType =
    1000071003;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES: VkStructureType =
    1000071004;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO: VkStructureType =
    1000072000;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO: VkStructureType =
    1000072001;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO: VkStructureType =
    1000072002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO: VkStructureType =
    1000112000;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES: VkStructureType = 1000112001;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO: VkStructureType = 1000113000;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO: VkStructureType =
    1000077000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO:
    VkStructureType = 1000076000;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES: VkStructureType =
    1000076001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES:
    VkStructureType = 1000168000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT: VkStructureType =
    1000168001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES:
    VkStructureType = 1000063000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES: VkStructureType =
    49;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES: VkStructureType =
    50;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES: VkStructureType =
    51;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES: VkStructureType =
    52;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO: VkStructureType =
    1000147000;
pub const VkStructureType_VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2: VkStructureType = 1000109000;
pub const VkStructureType_VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2: VkStructureType = 1000109001;
pub const VkStructureType_VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2: VkStructureType = 1000109002;
pub const VkStructureType_VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2: VkStructureType = 1000109003;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2: VkStructureType = 1000109004;
pub const VkStructureType_VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO: VkStructureType = 1000109005;
pub const VkStructureType_VK_STRUCTURE_TYPE_SUBPASS_END_INFO: VkStructureType = 1000109006;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES: VkStructureType =
    1000177000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES: VkStructureType =
    1000196000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES:
    VkStructureType = 1000180000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES:
    VkStructureType = 1000082000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES:
    VkStructureType = 1000197000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO:
    VkStructureType = 1000161000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES:
    VkStructureType = 1000161001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES:
    VkStructureType = 1000161002;
pub const VkStructureType_VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO : VkStructureType = 1000161003 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT : VkStructureType = 1000161004 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES:
    VkStructureType = 1000199000;
pub const VkStructureType_VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE:
    VkStructureType = 1000199001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES:
    VkStructureType = 1000221000;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO: VkStructureType =
    1000246000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES:
    VkStructureType = 1000130000;
pub const VkStructureType_VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO: VkStructureType =
    1000130001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES:
    VkStructureType = 1000211000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES:
    VkStructureType = 1000108000;
pub const VkStructureType_VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO: VkStructureType =
    1000108001;
pub const VkStructureType_VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO: VkStructureType =
    1000108002;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO: VkStructureType =
    1000108003;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES : VkStructureType = 1000253000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES : VkStructureType = 1000175000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES : VkStructureType = 1000241000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT: VkStructureType =
    1000241001;
pub const VkStructureType_VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT: VkStructureType =
    1000241002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES:
    VkStructureType = 1000261000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES:
    VkStructureType = 1000207000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES:
    VkStructureType = 1000207001;
pub const VkStructureType_VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO: VkStructureType =
    1000207002;
pub const VkStructureType_VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO: VkStructureType =
    1000207003;
pub const VkStructureType_VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO: VkStructureType = 1000207004;
pub const VkStructureType_VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO: VkStructureType = 1000207005;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES:
    VkStructureType = 1000257000;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO: VkStructureType =
    1000244001;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO:
    VkStructureType = 1000257002;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO:
    VkStructureType = 1000257003;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO:
    VkStructureType = 1000257004;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_FEATURES: VkStructureType =
    53;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_PROPERTIES: VkStructureType =
    54;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO:
    VkStructureType = 1000192000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES:
    VkStructureType = 1000215000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES: VkStructureType =
    1000245000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES : VkStructureType = 1000276000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES: VkStructureType =
    1000295000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO: VkStructureType =
    1000295001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO: VkStructureType =
    1000295002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES : VkStructureType = 1000297000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_BARRIER_2: VkStructureType = 1000314000;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2: VkStructureType = 1000314001;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2: VkStructureType = 1000314002;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEPENDENCY_INFO: VkStructureType = 1000314003;
pub const VkStructureType_VK_STRUCTURE_TYPE_SUBMIT_INFO_2: VkStructureType = 1000314004;
pub const VkStructureType_VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO: VkStructureType = 1000314005;
pub const VkStructureType_VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO: VkStructureType =
    1000314006;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES:
    VkStructureType = 1000314007;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES : VkStructureType = 1000325000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES:
    VkStructureType = 1000335000;
pub const VkStructureType_VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2: VkStructureType = 1000337000;
pub const VkStructureType_VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2: VkStructureType = 1000337001;
pub const VkStructureType_VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2: VkStructureType =
    1000337002;
pub const VkStructureType_VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2: VkStructureType =
    1000337003;
pub const VkStructureType_VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2: VkStructureType = 1000337004;
pub const VkStructureType_VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2: VkStructureType = 1000337005;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_COPY_2: VkStructureType = 1000337006;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_COPY_2: VkStructureType = 1000337007;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_BLIT_2: VkStructureType = 1000337008;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2: VkStructureType = 1000337009;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2: VkStructureType = 1000337010;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES:
    VkStructureType = 1000225000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO : VkStructureType = 1000225001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES:
    VkStructureType = 1000225002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES:
    VkStructureType = 1000138000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES:
    VkStructureType = 1000138001;
pub const VkStructureType_VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK:
    VkStructureType = 1000138002;
pub const VkStructureType_VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO:
    VkStructureType = 1000138003;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES : VkStructureType = 1000066000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDERING_INFO: VkStructureType = 1000044000;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO: VkStructureType = 1000044001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO: VkStructureType =
    1000044002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES:
    VkStructureType = 1000044003;
pub const VkStructureType_VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO:
    VkStructureType = 1000044004;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES:
    VkStructureType = 1000280000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES : VkStructureType = 1000280001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES:
    VkStructureType = 1000281001;
pub const VkStructureType_VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3: VkStructureType = 1000360000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES:
    VkStructureType = 1000413000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES:
    VkStructureType = 1000413001;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS: VkStructureType =
    1000413002;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS: VkStructureType =
    1000413003;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_4_FEATURES: VkStructureType =
    55;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_4_PROPERTIES: VkStructureType =
    56;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO:
    VkStructureType = 1000174000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES:
    VkStructureType = 1000388000;
pub const VkStructureType_VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES:
    VkStructureType = 1000388001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_ROTATE_FEATURES:
    VkStructureType = 1000416000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT_CONTROLS_2_FEATURES:
    VkStructureType = 1000528000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_EXPECT_ASSUME_FEATURES:
    VkStructureType = 1000544000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES:
    VkStructureType = 1000259000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO:
    VkStructureType = 1000259001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES:
    VkStructureType = 1000259002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES:
    VkStructureType = 1000525000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO:
    VkStructureType = 1000190001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES:
    VkStructureType = 1000190002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES:
    VkStructureType = 1000265000;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_MAP_INFO: VkStructureType = 1000271000;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_UNMAP_INFO: VkStructureType = 1000271001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_5_FEATURES:
    VkStructureType = 1000470000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_5_PROPERTIES:
    VkStructureType = 1000470001;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDERING_AREA_INFO: VkStructureType = 1000470003;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_IMAGE_SUBRESOURCE_INFO: VkStructureType =
    1000470004;
pub const VkStructureType_VK_STRUCTURE_TYPE_SUBRESOURCE_LAYOUT_2: VkStructureType = 1000338002;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_SUBRESOURCE_2: VkStructureType = 1000338003;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_CREATE_FLAGS_2_CREATE_INFO: VkStructureType =
    1000470005;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_USAGE_FLAGS_2_CREATE_INFO: VkStructureType =
    1000470006;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES:
    VkStructureType = 1000080000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_LOCAL_READ_FEATURES : VkStructureType = 1000232000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_LOCATION_INFO: VkStructureType =
    1000232001;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDERING_INPUT_ATTACHMENT_INDEX_INFO: VkStructureType =
    1000232002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_6_FEATURES:
    VkStructureType = 1000545000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_6_PROPERTIES:
    VkStructureType = 1000545001;
pub const VkStructureType_VK_STRUCTURE_TYPE_BIND_MEMORY_STATUS: VkStructureType = 1000545002;
pub const VkStructureType_VK_STRUCTURE_TYPE_BIND_DESCRIPTOR_SETS_INFO: VkStructureType = 1000545003;
pub const VkStructureType_VK_STRUCTURE_TYPE_PUSH_CONSTANTS_INFO: VkStructureType = 1000545004;
pub const VkStructureType_VK_STRUCTURE_TYPE_PUSH_DESCRIPTOR_SET_INFO: VkStructureType = 1000545005;
pub const VkStructureType_VK_STRUCTURE_TYPE_PUSH_DESCRIPTOR_SET_WITH_TEMPLATE_INFO:
    VkStructureType = 1000545006;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROTECTED_ACCESS_FEATURES:
    VkStructureType = 1000466000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_ROBUSTNESS_CREATE_INFO: VkStructureType =
    1000068000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_FEATURES:
    VkStructureType = 1000068001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_PROPERTIES:
    VkStructureType = 1000068002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_FEATURES:
    VkStructureType = 1000270000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_PROPERTIES:
    VkStructureType = 1000270001;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_TO_IMAGE_COPY: VkStructureType = 1000270002;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_TO_MEMORY_COPY: VkStructureType = 1000270003;
pub const VkStructureType_VK_STRUCTURE_TYPE_COPY_IMAGE_TO_MEMORY_INFO: VkStructureType = 1000270004;
pub const VkStructureType_VK_STRUCTURE_TYPE_COPY_MEMORY_TO_IMAGE_INFO: VkStructureType = 1000270005;
pub const VkStructureType_VK_STRUCTURE_TYPE_HOST_IMAGE_LAYOUT_TRANSITION_INFO: VkStructureType =
    1000270006;
pub const VkStructureType_VK_STRUCTURE_TYPE_COPY_IMAGE_TO_IMAGE_INFO: VkStructureType = 1000270007;
pub const VkStructureType_VK_STRUCTURE_TYPE_SUBRESOURCE_HOST_MEMCPY_SIZE: VkStructureType =
    1000270008;
pub const VkStructureType_VK_STRUCTURE_TYPE_HOST_IMAGE_COPY_DEVICE_PERFORMANCE_QUERY:
    VkStructureType = 1000270009;
pub const VkStructureType_VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR: VkStructureType = 1000001000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PRESENT_INFO_KHR: VkStructureType = 1000001001;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR: VkStructureType =
    1000060007;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR: VkStructureType =
    1000060008;
pub const VkStructureType_VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR: VkStructureType =
    1000060009;
pub const VkStructureType_VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR: VkStructureType =
    1000060010;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR: VkStructureType =
    1000060011;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR:
    VkStructureType = 1000060012;
pub const VkStructureType_VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR: VkStructureType =
    1000002000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR: VkStructureType =
    1000002001;
pub const VkStructureType_VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR: VkStructureType = 1000003000;
pub const VkStructureType_VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR: VkStructureType =
    1000004000;
pub const VkStructureType_VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR: VkStructureType =
    1000005000;
pub const VkStructureType_VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR: VkStructureType =
    1000006000;
pub const VkStructureType_VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR: VkStructureType =
    1000008000;
pub const VkStructureType_VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR: VkStructureType =
    1000009000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT: VkStructureType =
    1000011000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD:
    VkStructureType = 1000018000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT: VkStructureType =
    1000022000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT: VkStructureType =
    1000022001;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT: VkStructureType =
    1000022002;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_PROFILE_INFO_KHR: VkStructureType = 1000023000;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_CAPABILITIES_KHR: VkStructureType = 1000023001;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_PICTURE_RESOURCE_INFO_KHR: VkStructureType =
    1000023002;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_SESSION_MEMORY_REQUIREMENTS_KHR: VkStructureType =
    1000023003;
pub const VkStructureType_VK_STRUCTURE_TYPE_BIND_VIDEO_SESSION_MEMORY_INFO_KHR: VkStructureType =
    1000023004;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_SESSION_CREATE_INFO_KHR: VkStructureType =
    1000023005;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_CREATE_INFO_KHR:
    VkStructureType = 1000023006;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_UPDATE_INFO_KHR:
    VkStructureType = 1000023007;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_BEGIN_CODING_INFO_KHR: VkStructureType =
    1000023008;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_END_CODING_INFO_KHR: VkStructureType = 1000023009;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_CODING_CONTROL_INFO_KHR: VkStructureType =
    1000023010;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_REFERENCE_SLOT_INFO_KHR: VkStructureType =
    1000023011;
pub const VkStructureType_VK_STRUCTURE_TYPE_QUEUE_FAMILY_VIDEO_PROPERTIES_KHR: VkStructureType =
    1000023012;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_PROFILE_LIST_INFO_KHR: VkStructureType =
    1000023013;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_FORMAT_INFO_KHR: VkStructureType =
    1000023014;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_FORMAT_PROPERTIES_KHR: VkStructureType =
    1000023015;
pub const VkStructureType_VK_STRUCTURE_TYPE_QUEUE_FAMILY_QUERY_RESULT_STATUS_PROPERTIES_KHR:
    VkStructureType = 1000023016;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_DECODE_INFO_KHR: VkStructureType = 1000024000;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_DECODE_CAPABILITIES_KHR: VkStructureType =
    1000024001;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_DECODE_USAGE_INFO_KHR: VkStructureType =
    1000024002;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV:
    VkStructureType = 1000026000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV:
    VkStructureType = 1000026001;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV:
    VkStructureType = 1000026002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT:
    VkStructureType = 1000028000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT:
    VkStructureType = 1000028001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT:
    VkStructureType = 1000028002;
pub const VkStructureType_VK_STRUCTURE_TYPE_CU_MODULE_CREATE_INFO_NVX: VkStructureType = 1000029000;
pub const VkStructureType_VK_STRUCTURE_TYPE_CU_FUNCTION_CREATE_INFO_NVX: VkStructureType =
    1000029001;
pub const VkStructureType_VK_STRUCTURE_TYPE_CU_LAUNCH_INFO_NVX: VkStructureType = 1000029002;
pub const VkStructureType_VK_STRUCTURE_TYPE_CU_MODULE_TEXTURING_MODE_CREATE_INFO_NVX:
    VkStructureType = 1000029004;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX: VkStructureType =
    1000030000;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_VIEW_ADDRESS_PROPERTIES_NVX: VkStructureType =
    1000030001;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_CAPABILITIES_KHR: VkStructureType =
    1000038000;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_CREATE_INFO_KHR:
    VkStructureType = 1000038001;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_ADD_INFO_KHR:
    VkStructureType = 1000038002;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_PICTURE_INFO_KHR: VkStructureType =
    1000038003;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_DPB_SLOT_INFO_KHR: VkStructureType =
    1000038004;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_NALU_SLICE_INFO_KHR: VkStructureType =
    1000038005;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_GOP_REMAINING_FRAME_INFO_KHR:
    VkStructureType = 1000038006;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_PROFILE_INFO_KHR: VkStructureType =
    1000038007;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_RATE_CONTROL_INFO_KHR:
    VkStructureType = 1000038008;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_RATE_CONTROL_LAYER_INFO_KHR:
    VkStructureType = 1000038009;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_CREATE_INFO_KHR:
    VkStructureType = 1000038010;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_QUALITY_LEVEL_PROPERTIES_KHR:
    VkStructureType = 1000038011;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_GET_INFO_KHR:
    VkStructureType = 1000038012;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_FEEDBACK_INFO_KHR : VkStructureType = 1000038013 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_CAPABILITIES_KHR: VkStructureType =
    1000039000;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_CREATE_INFO_KHR:
    VkStructureType = 1000039001;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_ADD_INFO_KHR:
    VkStructureType = 1000039002;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_PICTURE_INFO_KHR: VkStructureType =
    1000039003;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_DPB_SLOT_INFO_KHR: VkStructureType =
    1000039004;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_NALU_SLICE_SEGMENT_INFO_KHR:
    VkStructureType = 1000039005;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_GOP_REMAINING_FRAME_INFO_KHR:
    VkStructureType = 1000039006;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_PROFILE_INFO_KHR: VkStructureType =
    1000039007;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_RATE_CONTROL_INFO_KHR:
    VkStructureType = 1000039009;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_RATE_CONTROL_LAYER_INFO_KHR:
    VkStructureType = 1000039010;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_CREATE_INFO_KHR:
    VkStructureType = 1000039011;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_QUALITY_LEVEL_PROPERTIES_KHR:
    VkStructureType = 1000039012;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_GET_INFO_KHR:
    VkStructureType = 1000039013;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_FEEDBACK_INFO_KHR : VkStructureType = 1000039014 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_CAPABILITIES_KHR: VkStructureType =
    1000040000;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_PICTURE_INFO_KHR: VkStructureType =
    1000040001;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_PROFILE_INFO_KHR: VkStructureType =
    1000040003;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_CREATE_INFO_KHR:
    VkStructureType = 1000040004;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_ADD_INFO_KHR:
    VkStructureType = 1000040005;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_DPB_SLOT_INFO_KHR: VkStructureType =
    1000040006;
pub const VkStructureType_VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD:
    VkStructureType = 1000041000;
pub const VkStructureType_VK_STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP:
    VkStructureType = 1000049000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV:
    VkStructureType = 1000050000;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV: VkStructureType =
    1000056000;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV: VkStructureType =
    1000056001;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV: VkStructureType =
    1000057000;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV: VkStructureType =
    1000057001;
pub const VkStructureType_VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV:
    VkStructureType = 1000058000;
pub const VkStructureType_VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT: VkStructureType = 1000061000;
pub const VkStructureType_VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN: VkStructureType = 1000062000;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT: VkStructureType =
    1000067000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT:
    VkStructureType = 1000067001;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR: VkStructureType =
    1000073000;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR: VkStructureType =
    1000073001;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR: VkStructureType =
    1000073002;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR: VkStructureType =
    1000073003;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR: VkStructureType = 1000074000;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR: VkStructureType = 1000074001;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR: VkStructureType = 1000074002;
pub const VkStructureType_VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR:
    VkStructureType = 1000075000;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR:
    VkStructureType = 1000078000;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR:
    VkStructureType = 1000078001;
pub const VkStructureType_VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR: VkStructureType =
    1000078002;
pub const VkStructureType_VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR: VkStructureType =
    1000078003;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR: VkStructureType =
    1000079000;
pub const VkStructureType_VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR: VkStructureType = 1000079001;
pub const VkStructureType_VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT : VkStructureType = 1000081000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT:
    VkStructureType = 1000081001;
pub const VkStructureType_VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT: VkStructureType =
    1000081002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR: VkStructureType = 1000084000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV:
    VkStructureType = 1000087000;
pub const VkStructureType_VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT: VkStructureType =
    1000090000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT: VkStructureType = 1000091000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT: VkStructureType = 1000091001;
pub const VkStructureType_VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT: VkStructureType = 1000091002;
pub const VkStructureType_VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT: VkStructureType =
    1000091003;
pub const VkStructureType_VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE: VkStructureType = 1000092000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX : VkStructureType = 1000097000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_MULTIVIEW_PER_VIEW_ATTRIBUTES_INFO_NVX:
    VkStructureType = 1000044009;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV:
    VkStructureType = 1000098000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT:
    VkStructureType = 1000099000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT:
    VkStructureType = 1000099001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT : VkStructureType = 1000101000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT : VkStructureType = 1000101001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT:
    VkStructureType = 1000102000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT : VkStructureType = 1000102001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_HDR_METADATA_EXT: VkStructureType = 1000105000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RELAXED_LINE_RASTERIZATION_FEATURES_IMG : VkStructureType = 1000110000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR:
    VkStructureType = 1000111000;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR: VkStructureType =
    1000114000;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR: VkStructureType =
    1000114001;
pub const VkStructureType_VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR: VkStructureType =
    1000114002;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR: VkStructureType = 1000115000;
pub const VkStructureType_VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR: VkStructureType = 1000115001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR:
    VkStructureType = 1000116000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR:
    VkStructureType = 1000116001;
pub const VkStructureType_VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR:
    VkStructureType = 1000116002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR: VkStructureType =
    1000116003;
pub const VkStructureType_VK_STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR: VkStructureType =
    1000116004;
pub const VkStructureType_VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_KHR: VkStructureType = 1000116005;
pub const VkStructureType_VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_DESCRIPTION_KHR: VkStructureType =
    1000116006;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR: VkStructureType =
    1000119000;
pub const VkStructureType_VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR: VkStructureType =
    1000119001;
pub const VkStructureType_VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR: VkStructureType = 1000119002;
pub const VkStructureType_VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR: VkStructureType = 1000121000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR: VkStructureType =
    1000121001;
pub const VkStructureType_VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR: VkStructureType =
    1000121002;
pub const VkStructureType_VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR: VkStructureType = 1000121003;
pub const VkStructureType_VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR: VkStructureType =
    1000121004;
pub const VkStructureType_VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK: VkStructureType =
    1000122000;
pub const VkStructureType_VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK: VkStructureType =
    1000123000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT: VkStructureType =
    1000128000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT: VkStructureType =
    1000128001;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT: VkStructureType = 1000128002;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT:
    VkStructureType = 1000128003;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT: VkStructureType =
    1000128004;
pub const VkStructureType_VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID: VkStructureType =
    1000129000;
pub const VkStructureType_VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID:
    VkStructureType = 1000129001;
pub const VkStructureType_VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID:
    VkStructureType = 1000129002;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID:
    VkStructureType = 1000129003;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID:
    VkStructureType = 1000129004;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID: VkStructureType = 1000129005;
pub const VkStructureType_VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_2_ANDROID:
    VkStructureType = 1000129006;
pub const VkStructureType_VK_STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_AMD: VkStructureType =
    1000044008;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_BFLOAT16_FEATURES_KHR:
    VkStructureType = 1000141000;
pub const VkStructureType_VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT: VkStructureType = 1000143000;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT:
    VkStructureType = 1000143001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT:
    VkStructureType = 1000143002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT:
    VkStructureType = 1000143003;
pub const VkStructureType_VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT: VkStructureType =
    1000143004;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT : VkStructureType = 1000148000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT : VkStructureType = 1000148001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT:
    VkStructureType = 1000148002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV:
    VkStructureType = 1000149000;
pub const VkStructureType_VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR:
    VkStructureType = 1000150007;
pub const VkStructureType_VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR:
    VkStructureType = 1000150000;
pub const VkStructureType_VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR:
    VkStructureType = 1000150002;
pub const VkStructureType_VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR:
    VkStructureType = 1000150003;
pub const VkStructureType_VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR:
    VkStructureType = 1000150004;
pub const VkStructureType_VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR:
    VkStructureType = 1000150005;
pub const VkStructureType_VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR: VkStructureType =
    1000150006;
pub const VkStructureType_VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_INFO_KHR:
    VkStructureType = 1000150009;
pub const VkStructureType_VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR: VkStructureType =
    1000150010;
pub const VkStructureType_VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR:
    VkStructureType = 1000150011;
pub const VkStructureType_VK_STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR:
    VkStructureType = 1000150012;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR:
    VkStructureType = 1000150013;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_PROPERTIES_KHR : VkStructureType = 1000150014 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR:
    VkStructureType = 1000150017;
pub const VkStructureType_VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR:
    VkStructureType = 1000150020;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_FEATURES_KHR:
    VkStructureType = 1000347000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_PROPERTIES_KHR:
    VkStructureType = 1000347001;
pub const VkStructureType_VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR: VkStructureType =
    1000150015;
pub const VkStructureType_VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR:
    VkStructureType = 1000150016;
pub const VkStructureType_VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR:
    VkStructureType = 1000150018;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR:
    VkStructureType = 1000348013;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV:
    VkStructureType = 1000152000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV:
    VkStructureType = 1000154000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV:
    VkStructureType = 1000154001;
pub const VkStructureType_VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT:
    VkStructureType = 1000158000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT:
    VkStructureType = 1000158002;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT:
    VkStructureType = 1000158003;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT:
    VkStructureType = 1000158004;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT:
    VkStructureType = 1000158005;
pub const VkStructureType_VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_2_EXT:
    VkStructureType = 1000158006;
pub const VkStructureType_VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT: VkStructureType =
    1000160000;
pub const VkStructureType_VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT:
    VkStructureType = 1000160001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV : VkStructureType = 1000164000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV:
    VkStructureType = 1000164001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV:
    VkStructureType = 1000164002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV : VkStructureType = 1000164005 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV: VkStructureType =
    1000165000;
pub const VkStructureType_VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV: VkStructureType =
    1000165001;
pub const VkStructureType_VK_STRUCTURE_TYPE_GEOMETRY_NV: VkStructureType = 1000165003;
pub const VkStructureType_VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV: VkStructureType = 1000165004;
pub const VkStructureType_VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV: VkStructureType = 1000165005;
pub const VkStructureType_VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV:
    VkStructureType = 1000165006;
pub const VkStructureType_VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV:
    VkStructureType = 1000165007;
pub const VkStructureType_VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV:
    VkStructureType = 1000165008;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV:
    VkStructureType = 1000165009;
pub const VkStructureType_VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV:
    VkStructureType = 1000165011;
pub const VkStructureType_VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV: VkStructureType =
    1000165012;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV : VkStructureType = 1000166000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV : VkStructureType = 1000166001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT:
    VkStructureType = 1000170000;
pub const VkStructureType_VK_STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT:
    VkStructureType = 1000170001;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT: VkStructureType =
    1000178000;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT: VkStructureType =
    1000178001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT:
    VkStructureType = 1000178002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR:
    VkStructureType = 1000181000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD:
    VkStructureType = 1000183000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD:
    VkStructureType = 1000185000;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_CAPABILITIES_KHR: VkStructureType =
    1000187000;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_CREATE_INFO_KHR:
    VkStructureType = 1000187001;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_ADD_INFO_KHR:
    VkStructureType = 1000187002;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_PROFILE_INFO_KHR: VkStructureType =
    1000187003;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_PICTURE_INFO_KHR: VkStructureType =
    1000187004;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_DPB_SLOT_INFO_KHR: VkStructureType =
    1000187005;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD:
    VkStructureType = 1000189000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT : VkStructureType = 1000190000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP: VkStructureType = 1000191000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV:
    VkStructureType = 1000202000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV:
    VkStructureType = 1000202001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV:
    VkStructureType = 1000204000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV : VkStructureType = 1000205000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV:
    VkStructureType = 1000205002;
pub const VkStructureType_VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV: VkStructureType = 1000206000;
pub const VkStructureType_VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV: VkStructureType =
    1000206001;
pub const VkStructureType_VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_2_NV:
    VkStructureType = 1000314008;
pub const VkStructureType_VK_STRUCTURE_TYPE_CHECKPOINT_DATA_2_NV: VkStructureType = 1000314009;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL : VkStructureType = 1000209000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL:
    VkStructureType = 1000210000;
pub const VkStructureType_VK_STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL: VkStructureType =
    1000210001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL: VkStructureType =
    1000210002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL: VkStructureType =
    1000210003;
pub const VkStructureType_VK_STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL: VkStructureType =
    1000210004;
pub const VkStructureType_VK_STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL:
    VkStructureType = 1000210005;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT:
    VkStructureType = 1000212000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD:
    VkStructureType = 1000213000;
pub const VkStructureType_VK_STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD:
    VkStructureType = 1000213001;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA: VkStructureType =
    1000214000;
pub const VkStructureType_VK_STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT: VkStructureType =
    1000217000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT:
    VkStructureType = 1000218000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT:
    VkStructureType = 1000218001;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT:
    VkStructureType = 1000218002;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_INFO_EXT:
    VkStructureType = 1000044007;
pub const VkStructureType_VK_STRUCTURE_TYPE_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR:
    VkStructureType = 1000226000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_STATE_CREATE_INFO_KHR:
    VkStructureType = 1000226001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_PROPERTIES_KHR:
    VkStructureType = 1000226002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_FEATURES_KHR:
    VkStructureType = 1000226003;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_KHR:
    VkStructureType = 1000226004;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR:
    VkStructureType = 1000044006;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD:
    VkStructureType = 1000227000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD:
    VkStructureType = 1000229000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_ATOMIC_INT64_FEATURES_EXT : VkStructureType = 1000234000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_QUAD_CONTROL_FEATURES_KHR:
    VkStructureType = 1000235000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT:
    VkStructureType = 1000237000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT:
    VkStructureType = 1000238000;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT: VkStructureType =
    1000238001;
pub const VkStructureType_VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR: VkStructureType =
    1000239000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV : VkStructureType = 1000240000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT:
    VkStructureType = 1000244000;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT: VkStructureType =
    1000244002;
pub const VkStructureType_VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT: VkStructureType = 1000247000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_WAIT_FEATURES_KHR:
    VkStructureType = 1000248000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV:
    VkStructureType = 1000249000;
pub const VkStructureType_VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV: VkStructureType =
    1000249001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV:
    VkStructureType = 1000249002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV:
    VkStructureType = 1000250000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV:
    VkStructureType = 1000250001;
pub const VkStructureType_VK_STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV:
    VkStructureType = 1000250002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT : VkStructureType = 1000251000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT:
    VkStructureType = 1000252000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_FEATURES_EXT:
    VkStructureType = 1000254000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_PROVOKING_VERTEX_STATE_CREATE_INFO_EXT : VkStructureType = 1000254001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_PROPERTIES_EXT:
    VkStructureType = 1000254002;
pub const VkStructureType_VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT:
    VkStructureType = 1000255000;
pub const VkStructureType_VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT:
    VkStructureType = 1000255002;
pub const VkStructureType_VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT:
    VkStructureType = 1000255001;
pub const VkStructureType_VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT: VkStructureType =
    1000256000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT:
    VkStructureType = 1000260000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT:
    VkStructureType = 1000267000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR : VkStructureType = 1000269000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR: VkStructureType = 1000269001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR: VkStructureType =
    1000269002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR: VkStructureType =
    1000269003;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR: VkStructureType =
    1000269004;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR:
    VkStructureType = 1000269005;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAP_MEMORY_PLACED_FEATURES_EXT:
    VkStructureType = 1000272000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAP_MEMORY_PLACED_PROPERTIES_EXT:
    VkStructureType = 1000272001;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_MAP_PLACED_INFO_EXT: VkStructureType =
    1000272002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_2_FEATURES_EXT:
    VkStructureType = 1000273000;
pub const VkStructureType_VK_STRUCTURE_TYPE_SURFACE_PRESENT_MODE_EXT: VkStructureType = 1000274000;
pub const VkStructureType_VK_STRUCTURE_TYPE_SURFACE_PRESENT_SCALING_CAPABILITIES_EXT:
    VkStructureType = 1000274001;
pub const VkStructureType_VK_STRUCTURE_TYPE_SURFACE_PRESENT_MODE_COMPATIBILITY_EXT:
    VkStructureType = 1000274002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SWAPCHAIN_MAINTENANCE_1_FEATURES_EXT:
    VkStructureType = 1000275000;
pub const VkStructureType_VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_FENCE_INFO_EXT: VkStructureType =
    1000275001;
pub const VkStructureType_VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_MODES_CREATE_INFO_EXT:
    VkStructureType = 1000275002;
pub const VkStructureType_VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_MODE_INFO_EXT: VkStructureType =
    1000275003;
pub const VkStructureType_VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_SCALING_CREATE_INFO_EXT:
    VkStructureType = 1000275004;
pub const VkStructureType_VK_STRUCTURE_TYPE_RELEASE_SWAPCHAIN_IMAGES_INFO_EXT: VkStructureType =
    1000275005;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV : VkStructureType = 1000277000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_GRAPHICS_SHADER_GROUP_CREATE_INFO_NV: VkStructureType =
    1000277001;
pub const VkStructureType_VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV:
    VkStructureType = 1000277002;
pub const VkStructureType_VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV: VkStructureType =
    1000277003;
pub const VkStructureType_VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV:
    VkStructureType = 1000277004;
pub const VkStructureType_VK_STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV: VkStructureType =
    1000277005;
pub const VkStructureType_VK_STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV:
    VkStructureType = 1000277006;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV : VkStructureType = 1000277007 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INHERITED_VIEWPORT_SCISSOR_FEATURES_NV : VkStructureType = 1000278000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_VIEWPORT_SCISSOR_INFO_NV:
    VkStructureType = 1000278001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT:
    VkStructureType = 1000281000;
pub const VkStructureType_VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM : VkStructureType = 1000282000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM: VkStructureType =
    1000282001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_BIAS_CONTROL_FEATURES_EXT:
    VkStructureType = 1000283000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEPTH_BIAS_INFO_EXT: VkStructureType = 1000283001;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEPTH_BIAS_REPRESENTATION_INFO_EXT: VkStructureType =
    1000283002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_MEMORY_REPORT_FEATURES_EXT:
    VkStructureType = 1000284000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_DEVICE_MEMORY_REPORT_CREATE_INFO_EXT:
    VkStructureType = 1000284001;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_MEMORY_REPORT_CALLBACK_DATA_EXT:
    VkStructureType = 1000284002;
pub const VkStructureType_VK_STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT:
    VkStructureType = 1000287000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT:
    VkStructureType = 1000287001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT:
    VkStructureType = 1000287002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR: VkStructureType =
    1000290000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_BARRIER_FEATURES_NV:
    VkStructureType = 1000292000;
pub const VkStructureType_VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_PRESENT_BARRIER_NV:
    VkStructureType = 1000292001;
pub const VkStructureType_VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_BARRIER_CREATE_INFO_NV:
    VkStructureType = 1000292002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PRESENT_ID_KHR: VkStructureType = 1000294000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_ID_FEATURES_KHR:
    VkStructureType = 1000294001;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_INFO_KHR: VkStructureType = 1000299000;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_RATE_CONTROL_INFO_KHR: VkStructureType =
    1000299001;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_RATE_CONTROL_LAYER_INFO_KHR:
    VkStructureType = 1000299002;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_CAPABILITIES_KHR: VkStructureType =
    1000299003;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_USAGE_INFO_KHR: VkStructureType =
    1000299004;
pub const VkStructureType_VK_STRUCTURE_TYPE_QUERY_POOL_VIDEO_ENCODE_FEEDBACK_CREATE_INFO_KHR:
    VkStructureType = 1000299005;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_ENCODE_QUALITY_LEVEL_INFO_KHR:
    VkStructureType = 1000299006;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_QUALITY_LEVEL_PROPERTIES_KHR:
    VkStructureType = 1000299007;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_QUALITY_LEVEL_INFO_KHR: VkStructureType =
    1000299008;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_SESSION_PARAMETERS_GET_INFO_KHR:
    VkStructureType = 1000299009;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_SESSION_PARAMETERS_FEEDBACK_INFO_KHR:
    VkStructureType = 1000299010;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV:
    VkStructureType = 1000300000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV:
    VkStructureType = 1000300001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TILE_SHADING_FEATURES_QCOM:
    VkStructureType = 1000309000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TILE_SHADING_PROPERTIES_QCOM:
    VkStructureType = 1000309001;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDER_PASS_TILE_SHADING_CREATE_INFO_QCOM:
    VkStructureType = 1000309002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PER_TILE_BEGIN_INFO_QCOM: VkStructureType = 1000309003;
pub const VkStructureType_VK_STRUCTURE_TYPE_PER_TILE_END_INFO_QCOM: VkStructureType = 1000309004;
pub const VkStructureType_VK_STRUCTURE_TYPE_DISPATCH_TILE_INFO_QCOM: VkStructureType = 1000309005;
pub const VkStructureType_VK_STRUCTURE_TYPE_QUERY_LOW_LATENCY_SUPPORT_NV: VkStructureType =
    1000310000;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXPORT_METAL_OBJECT_CREATE_INFO_EXT: VkStructureType =
    1000311000;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXPORT_METAL_OBJECTS_INFO_EXT: VkStructureType =
    1000311001;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXPORT_METAL_DEVICE_INFO_EXT: VkStructureType =
    1000311002;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXPORT_METAL_COMMAND_QUEUE_INFO_EXT: VkStructureType =
    1000311003;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXPORT_METAL_BUFFER_INFO_EXT: VkStructureType =
    1000311004;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMPORT_METAL_BUFFER_INFO_EXT: VkStructureType =
    1000311005;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXPORT_METAL_TEXTURE_INFO_EXT: VkStructureType =
    1000311006;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMPORT_METAL_TEXTURE_INFO_EXT: VkStructureType =
    1000311007;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXPORT_METAL_IO_SURFACE_INFO_EXT: VkStructureType =
    1000311008;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMPORT_METAL_IO_SURFACE_INFO_EXT: VkStructureType =
    1000311009;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXPORT_METAL_SHARED_EVENT_INFO_EXT: VkStructureType =
    1000311010;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMPORT_METAL_SHARED_EVENT_INFO_EXT: VkStructureType =
    1000311011;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_PROPERTIES_EXT:
    VkStructureType = 1000316000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_DENSITY_MAP_PROPERTIES_EXT : VkStructureType = 1000316001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_FEATURES_EXT:
    VkStructureType = 1000316002;
pub const VkStructureType_VK_STRUCTURE_TYPE_DESCRIPTOR_ADDRESS_INFO_EXT: VkStructureType =
    1000316003;
pub const VkStructureType_VK_STRUCTURE_TYPE_DESCRIPTOR_GET_INFO_EXT: VkStructureType = 1000316004;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT:
    VkStructureType = 1000316005;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT:
    VkStructureType = 1000316006;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_VIEW_CAPTURE_DESCRIPTOR_DATA_INFO_EXT:
    VkStructureType = 1000316007;
pub const VkStructureType_VK_STRUCTURE_TYPE_SAMPLER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT:
    VkStructureType = 1000316008;
pub const VkStructureType_VK_STRUCTURE_TYPE_OPAQUE_CAPTURE_DESCRIPTOR_DATA_CREATE_INFO_EXT:
    VkStructureType = 1000316010;
pub const VkStructureType_VK_STRUCTURE_TYPE_DESCRIPTOR_BUFFER_BINDING_INFO_EXT: VkStructureType =
    1000316011;
pub const VkStructureType_VK_STRUCTURE_TYPE_DESCRIPTOR_BUFFER_BINDING_PUSH_DESCRIPTOR_BUFFER_HANDLE_EXT : VkStructureType = 1000316012 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT : VkStructureType = 1000316009 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_FEATURES_EXT : VkStructureType = 1000320000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_PROPERTIES_EXT : VkStructureType = 1000320001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_LIBRARY_CREATE_INFO_EXT:
    VkStructureType = 1000320002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_FEATURES_AMD : VkStructureType = 1000321000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_KHR : VkStructureType = 1000203000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_PROPERTIES_KHR : VkStructureType = 1000322000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_FEATURES_KHR : VkStructureType = 1000323000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_PROPERTIES_NV : VkStructureType = 1000326000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_FEATURES_NV : VkStructureType = 1000326001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_ENUM_STATE_CREATE_INFO_NV : VkStructureType = 1000326002 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_MOTION_TRIANGLES_DATA_NV : VkStructureType = 1000327000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MOTION_BLUR_FEATURES_NV:
    VkStructureType = 1000327001;
pub const VkStructureType_VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MOTION_INFO_NV: VkStructureType =
    1000327002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_EXT:
    VkStructureType = 1000328000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_EXT:
    VkStructureType = 1000328001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_2_PLANE_444_FORMATS_FEATURES_EXT : VkStructureType = 1000330000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT:
    VkStructureType = 1000332000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT : VkStructureType = 1000332001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_COPY_COMMAND_TRANSFORM_INFO_QCOM: VkStructureType =
    1000333000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_FEATURES_KHR : VkStructureType = 1000336000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_FEATURES_EXT : VkStructureType = 1000338000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_COMPRESSION_CONTROL_EXT: VkStructureType =
    1000338001;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_COMPRESSION_PROPERTIES_EXT: VkStructureType =
    1000338004;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_LAYOUT_FEATURES_EXT : VkStructureType = 1000339000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT:
    VkStructureType = 1000340000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FAULT_FEATURES_EXT: VkStructureType =
    1000341000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_FAULT_COUNTS_EXT: VkStructureType = 1000341001;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_FAULT_INFO_EXT: VkStructureType = 1000341002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RGBA10X6_FORMATS_FEATURES_EXT:
    VkStructureType = 1000344000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DIRECTFB_SURFACE_CREATE_INFO_EXT: VkStructureType =
    1000346000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_INPUT_DYNAMIC_STATE_FEATURES_EXT : VkStructureType = 1000352000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_VERTEX_INPUT_BINDING_DESCRIPTION_2_EXT:
    VkStructureType = 1000352001;
pub const VkStructureType_VK_STRUCTURE_TYPE_VERTEX_INPUT_ATTRIBUTE_DESCRIPTION_2_EXT:
    VkStructureType = 1000352002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRM_PROPERTIES_EXT: VkStructureType =
    1000353000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ADDRESS_BINDING_REPORT_FEATURES_EXT:
    VkStructureType = 1000354000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_ADDRESS_BINDING_CALLBACK_DATA_EXT:
    VkStructureType = 1000354001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_CONTROL_FEATURES_EXT:
    VkStructureType = 1000355000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_DEPTH_CLIP_CONTROL_CREATE_INFO_EXT:
    VkStructureType = 1000355001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVE_TOPOLOGY_LIST_RESTART_FEATURES_EXT : VkStructureType = 1000356000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_MODE_FIFO_LATEST_READY_FEATURES_EXT : VkStructureType = 1000361000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMPORT_MEMORY_ZIRCON_HANDLE_INFO_FUCHSIA:
    VkStructureType = 1000364000;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_ZIRCON_HANDLE_PROPERTIES_FUCHSIA:
    VkStructureType = 1000364001;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_GET_ZIRCON_HANDLE_INFO_FUCHSIA: VkStructureType =
    1000364002;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_ZIRCON_HANDLE_INFO_FUCHSIA:
    VkStructureType = 1000365000;
pub const VkStructureType_VK_STRUCTURE_TYPE_SEMAPHORE_GET_ZIRCON_HANDLE_INFO_FUCHSIA:
    VkStructureType = 1000365001;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_COLLECTION_CREATE_INFO_FUCHSIA: VkStructureType =
    1000366000;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMPORT_MEMORY_BUFFER_COLLECTION_FUCHSIA:
    VkStructureType = 1000366001;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_COLLECTION_IMAGE_CREATE_INFO_FUCHSIA:
    VkStructureType = 1000366002;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_COLLECTION_PROPERTIES_FUCHSIA: VkStructureType =
    1000366003;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_CONSTRAINTS_INFO_FUCHSIA: VkStructureType =
    1000366004;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_COLLECTION_BUFFER_CREATE_INFO_FUCHSIA:
    VkStructureType = 1000366005;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_CONSTRAINTS_INFO_FUCHSIA: VkStructureType =
    1000366006;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_FORMAT_CONSTRAINTS_INFO_FUCHSIA: VkStructureType =
    1000366007;
pub const VkStructureType_VK_STRUCTURE_TYPE_SYSMEM_COLOR_SPACE_FUCHSIA: VkStructureType =
    1000366008;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_COLLECTION_CONSTRAINTS_INFO_FUCHSIA:
    VkStructureType = 1000366009;
pub const VkStructureType_VK_STRUCTURE_TYPE_SUBPASS_SHADING_PIPELINE_CREATE_INFO_HUAWEI:
    VkStructureType = 1000369000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_FEATURES_HUAWEI:
    VkStructureType = 1000369001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_PROPERTIES_HUAWEI:
    VkStructureType = 1000369002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INVOCATION_MASK_FEATURES_HUAWEI:
    VkStructureType = 1000370000;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_GET_REMOTE_ADDRESS_INFO_NV: VkStructureType =
    1000371000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_RDMA_FEATURES_NV:
    VkStructureType = 1000371001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_PROPERTIES_IDENTIFIER_EXT: VkStructureType =
    1000372000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROPERTIES_FEATURES_EXT:
    VkStructureType = 1000372001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAME_BOUNDARY_FEATURES_EXT:
    VkStructureType = 1000375000;
pub const VkStructureType_VK_STRUCTURE_TYPE_FRAME_BOUNDARY_EXT: VkStructureType = 1000375001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_FEATURES_EXT : VkStructureType = 1000376000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_SUBPASS_RESOLVE_PERFORMANCE_QUERY_EXT: VkStructureType =
    1000376001;
pub const VkStructureType_VK_STRUCTURE_TYPE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_INFO_EXT:
    VkStructureType = 1000376002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_2_FEATURES_EXT : VkStructureType = 1000377000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_SCREEN_SURFACE_CREATE_INFO_QNX: VkStructureType =
    1000378000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COLOR_WRITE_ENABLE_FEATURES_EXT:
    VkStructureType = 1000381000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_COLOR_WRITE_CREATE_INFO_EXT: VkStructureType =
    1000381001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVES_GENERATED_QUERY_FEATURES_EXT : VkStructureType = 1000382000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MAINTENANCE_1_FEATURES_KHR : VkStructureType = 1000386000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_MIN_LOD_FEATURES_EXT:
    VkStructureType = 1000391000;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_VIEW_MIN_LOD_CREATE_INFO_EXT: VkStructureType =
    1000391001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_FEATURES_EXT:
    VkStructureType = 1000392000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_PROPERTIES_EXT:
    VkStructureType = 1000392001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_2D_VIEW_OF_3D_FEATURES_EXT:
    VkStructureType = 1000393000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TILE_IMAGE_FEATURES_EXT:
    VkStructureType = 1000395000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TILE_IMAGE_PROPERTIES_EXT:
    VkStructureType = 1000395001;
pub const VkStructureType_VK_STRUCTURE_TYPE_MICROMAP_BUILD_INFO_EXT: VkStructureType = 1000396000;
pub const VkStructureType_VK_STRUCTURE_TYPE_MICROMAP_VERSION_INFO_EXT: VkStructureType = 1000396001;
pub const VkStructureType_VK_STRUCTURE_TYPE_COPY_MICROMAP_INFO_EXT: VkStructureType = 1000396002;
pub const VkStructureType_VK_STRUCTURE_TYPE_COPY_MICROMAP_TO_MEMORY_INFO_EXT: VkStructureType =
    1000396003;
pub const VkStructureType_VK_STRUCTURE_TYPE_COPY_MEMORY_TO_MICROMAP_INFO_EXT: VkStructureType =
    1000396004;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPACITY_MICROMAP_FEATURES_EXT:
    VkStructureType = 1000396005;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPACITY_MICROMAP_PROPERTIES_EXT:
    VkStructureType = 1000396006;
pub const VkStructureType_VK_STRUCTURE_TYPE_MICROMAP_CREATE_INFO_EXT: VkStructureType = 1000396007;
pub const VkStructureType_VK_STRUCTURE_TYPE_MICROMAP_BUILD_SIZES_INFO_EXT: VkStructureType =
    1000396008;
pub const VkStructureType_VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_TRIANGLES_OPACITY_MICROMAP_EXT : VkStructureType = 1000396009 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_FEATURES_HUAWEI : VkStructureType = 1000404000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_PROPERTIES_HUAWEI : VkStructureType = 1000404001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_VRS_FEATURES_HUAWEI : VkStructureType = 1000404002 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BORDER_COLOR_SWIZZLE_FEATURES_EXT:
    VkStructureType = 1000411000;
pub const VkStructureType_VK_STRUCTURE_TYPE_SAMPLER_BORDER_COLOR_COMPONENT_MAPPING_CREATE_INFO_EXT : VkStructureType = 1000411001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PAGEABLE_DEVICE_LOCAL_MEMORY_FEATURES_EXT : VkStructureType = 1000412000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_ARM:
    VkStructureType = 1000415000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_QUEUE_SHADER_CORE_CONTROL_CREATE_INFO_ARM:
    VkStructureType = 1000417000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCHEDULING_CONTROLS_FEATURES_ARM:
    VkStructureType = 1000417001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCHEDULING_CONTROLS_PROPERTIES_ARM:
    VkStructureType = 1000417002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_SLICED_VIEW_OF_3D_FEATURES_EXT:
    VkStructureType = 1000418000;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_VIEW_SLICED_CREATE_INFO_EXT: VkStructureType =
    1000418001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_SET_HOST_MAPPING_FEATURES_VALVE : VkStructureType = 1000420000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_DESCRIPTOR_SET_BINDING_REFERENCE_VALVE:
    VkStructureType = 1000420001;
pub const VkStructureType_VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_HOST_MAPPING_INFO_VALVE:
    VkStructureType = 1000420002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_NON_SEAMLESS_CUBE_MAP_FEATURES_EXT:
    VkStructureType = 1000422000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RENDER_PASS_STRIPED_FEATURES_ARM:
    VkStructureType = 1000424000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RENDER_PASS_STRIPED_PROPERTIES_ARM:
    VkStructureType = 1000424001;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDER_PASS_STRIPE_BEGIN_INFO_ARM: VkStructureType =
    1000424002;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDER_PASS_STRIPE_INFO_ARM: VkStructureType =
    1000424003;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDER_PASS_STRIPE_SUBMIT_INFO_ARM: VkStructureType =
    1000424004;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_FEATURES_NV:
    VkStructureType = 1000426000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_PROPERTIES_NV:
    VkStructureType = 1000426001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_FEATURES_NV:
    VkStructureType = 1000427000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_PROPERTIES_NV:
    VkStructureType = 1000427001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_COMPUTE_FEATURES_NV : VkStructureType = 1000428000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_INDIRECT_BUFFER_INFO_NV:
    VkStructureType = 1000428001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_INDIRECT_DEVICE_ADDRESS_INFO_NV:
    VkStructureType = 1000428002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_LINEAR_SWEPT_SPHERES_FEATURES_NV : VkStructureType = 1000429008 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_LINEAR_SWEPT_SPHERES_DATA_NV : VkStructureType = 1000429009 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_SPHERES_DATA_NV:
    VkStructureType = 1000429010;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINEAR_COLOR_ATTACHMENT_FEATURES_NV:
    VkStructureType = 1000430000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MAXIMAL_RECONVERGENCE_FEATURES_KHR : VkStructureType = 1000434000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_FEATURES_EXT : VkStructureType = 1000437000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_FEATURES_QCOM:
    VkStructureType = 1000440000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_PROPERTIES_QCOM:
    VkStructureType = 1000440001;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_VIEW_SAMPLE_WEIGHT_CREATE_INFO_QCOM:
    VkStructureType = 1000440002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_NESTED_COMMAND_BUFFER_FEATURES_EXT:
    VkStructureType = 1000451000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_NESTED_COMMAND_BUFFER_PROPERTIES_EXT:
    VkStructureType = 1000451001;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_ACQUIRE_UNMODIFIED_EXT:
    VkStructureType = 1000453000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_FEATURES_EXT : VkStructureType = 1000455000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_PROPERTIES_EXT : VkStructureType = 1000455001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_MERGE_FEEDBACK_FEATURES_EXT:
    VkStructureType = 1000458000;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDER_PASS_CREATION_CONTROL_EXT: VkStructureType =
    1000458001;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDER_PASS_CREATION_FEEDBACK_CREATE_INFO_EXT:
    VkStructureType = 1000458002;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDER_PASS_SUBPASS_FEEDBACK_CREATE_INFO_EXT:
    VkStructureType = 1000458003;
pub const VkStructureType_VK_STRUCTURE_TYPE_DIRECT_DRIVER_LOADING_INFO_LUNARG: VkStructureType =
    1000459000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DIRECT_DRIVER_LOADING_LIST_LUNARG: VkStructureType =
    1000459001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_FEATURES_EXT : VkStructureType = 1000462000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_PROPERTIES_EXT : VkStructureType = 1000462001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_MODULE_IDENTIFIER_CREATE_INFO_EXT : VkStructureType = 1000462002 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_SHADER_MODULE_IDENTIFIER_EXT: VkStructureType =
    1000462003;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_EXT : VkStructureType = 1000342000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPTICAL_FLOW_FEATURES_NV:
    VkStructureType = 1000464000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPTICAL_FLOW_PROPERTIES_NV:
    VkStructureType = 1000464001;
pub const VkStructureType_VK_STRUCTURE_TYPE_OPTICAL_FLOW_IMAGE_FORMAT_INFO_NV: VkStructureType =
    1000464002;
pub const VkStructureType_VK_STRUCTURE_TYPE_OPTICAL_FLOW_IMAGE_FORMAT_PROPERTIES_NV:
    VkStructureType = 1000464003;
pub const VkStructureType_VK_STRUCTURE_TYPE_OPTICAL_FLOW_SESSION_CREATE_INFO_NV: VkStructureType =
    1000464004;
pub const VkStructureType_VK_STRUCTURE_TYPE_OPTICAL_FLOW_EXECUTE_INFO_NV: VkStructureType =
    1000464005;
pub const VkStructureType_VK_STRUCTURE_TYPE_OPTICAL_FLOW_SESSION_CREATE_PRIVATE_DATA_INFO_NV:
    VkStructureType = 1000464010;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LEGACY_DITHERING_FEATURES_EXT:
    VkStructureType = 1000465000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FORMAT_RESOLVE_FEATURES_ANDROID : VkStructureType = 1000468000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FORMAT_RESOLVE_PROPERTIES_ANDROID : VkStructureType = 1000468001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_RESOLVE_PROPERTIES_ANDROID : VkStructureType = 1000468002 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ANTI_LAG_FEATURES_AMD: VkStructureType =
    1000476000;
pub const VkStructureType_VK_STRUCTURE_TYPE_ANTI_LAG_DATA_AMD: VkStructureType = 1000476001;
pub const VkStructureType_VK_STRUCTURE_TYPE_ANTI_LAG_PRESENTATION_INFO_AMD: VkStructureType =
    1000476002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_POSITION_FETCH_FEATURES_KHR : VkStructureType = 1000481000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_OBJECT_FEATURES_EXT:
    VkStructureType = 1000482000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_OBJECT_PROPERTIES_EXT:
    VkStructureType = 1000482001;
pub const VkStructureType_VK_STRUCTURE_TYPE_SHADER_CREATE_INFO_EXT: VkStructureType = 1000482002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_BINARY_FEATURES_KHR:
    VkStructureType = 1000483000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_BINARY_CREATE_INFO_KHR: VkStructureType =
    1000483001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_BINARY_INFO_KHR: VkStructureType = 1000483002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_BINARY_KEY_KHR: VkStructureType = 1000483003;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_BINARY_PROPERTIES_KHR:
    VkStructureType = 1000483004;
pub const VkStructureType_VK_STRUCTURE_TYPE_RELEASE_CAPTURED_PIPELINE_DATA_INFO_KHR:
    VkStructureType = 1000483005;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_BINARY_DATA_INFO_KHR: VkStructureType =
    1000483006;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_CREATE_INFO_KHR: VkStructureType = 1000483007;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_PIPELINE_BINARY_INTERNAL_CACHE_CONTROL_KHR:
    VkStructureType = 1000483008;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_BINARY_HANDLES_INFO_KHR: VkStructureType =
    1000483009;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TILE_PROPERTIES_FEATURES_QCOM:
    VkStructureType = 1000484000;
pub const VkStructureType_VK_STRUCTURE_TYPE_TILE_PROPERTIES_QCOM: VkStructureType = 1000484001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_AMIGO_PROFILING_FEATURES_SEC:
    VkStructureType = 1000485000;
pub const VkStructureType_VK_STRUCTURE_TYPE_AMIGO_PROFILING_SUBMIT_INFO_SEC: VkStructureType =
    1000485001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_VIEWPORTS_FEATURES_QCOM : VkStructureType = 1000488000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_FEATURES_NV : VkStructureType = 1000490000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_PROPERTIES_NV : VkStructureType = 1000490001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_VECTOR_FEATURES_NV:
    VkStructureType = 1000491000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_VECTOR_PROPERTIES_NV:
    VkStructureType = 1000491001;
pub const VkStructureType_VK_STRUCTURE_TYPE_COOPERATIVE_VECTOR_PROPERTIES_NV: VkStructureType =
    1000491002;
pub const VkStructureType_VK_STRUCTURE_TYPE_CONVERT_COOPERATIVE_VECTOR_MATRIX_INFO_NV:
    VkStructureType = 1000491004;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_SPARSE_ADDRESS_SPACE_FEATURES_NV : VkStructureType = 1000492000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_SPARSE_ADDRESS_SPACE_PROPERTIES_NV : VkStructureType = 1000492001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_EXT:
    VkStructureType = 1000351000;
pub const VkStructureType_VK_STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_EXT:
    VkStructureType = 1000351002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LEGACY_VERTEX_ATTRIBUTES_FEATURES_EXT : VkStructureType = 1000495000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LEGACY_VERTEX_ATTRIBUTES_PROPERTIES_EXT : VkStructureType = 1000495001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_LAYER_SETTINGS_CREATE_INFO_EXT: VkStructureType =
    1000496000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_FEATURES_ARM:
    VkStructureType = 1000497000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_PROPERTIES_ARM:
    VkStructureType = 1000497001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_LIBRARY_GROUP_HANDLES_FEATURES_EXT : VkStructureType = 1000498000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_UNUSED_ATTACHMENTS_FEATURES_EXT : VkStructureType = 1000499000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_LATENCY_SLEEP_MODE_INFO_NV: VkStructureType =
    1000505000;
pub const VkStructureType_VK_STRUCTURE_TYPE_LATENCY_SLEEP_INFO_NV: VkStructureType = 1000505001;
pub const VkStructureType_VK_STRUCTURE_TYPE_SET_LATENCY_MARKER_INFO_NV: VkStructureType =
    1000505002;
pub const VkStructureType_VK_STRUCTURE_TYPE_GET_LATENCY_MARKER_INFO_NV: VkStructureType =
    1000505003;
pub const VkStructureType_VK_STRUCTURE_TYPE_LATENCY_TIMINGS_FRAME_REPORT_NV: VkStructureType =
    1000505004;
pub const VkStructureType_VK_STRUCTURE_TYPE_LATENCY_SUBMISSION_PRESENT_ID_NV: VkStructureType =
    1000505005;
pub const VkStructureType_VK_STRUCTURE_TYPE_OUT_OF_BAND_QUEUE_TYPE_INFO_NV: VkStructureType =
    1000505006;
pub const VkStructureType_VK_STRUCTURE_TYPE_SWAPCHAIN_LATENCY_CREATE_INFO_NV: VkStructureType =
    1000505007;
pub const VkStructureType_VK_STRUCTURE_TYPE_LATENCY_SURFACE_CAPABILITIES_NV: VkStructureType =
    1000505008;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_KHR:
    VkStructureType = 1000506000;
pub const VkStructureType_VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_KHR: VkStructureType =
    1000506001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_KHR:
    VkStructureType = 1000506002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_RENDER_AREAS_FEATURES_QCOM : VkStructureType = 1000510000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_MULTIVIEW_PER_VIEW_RENDER_AREAS_RENDER_PASS_BEGIN_INFO_QCOM : VkStructureType = 1000510001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_KHR : VkStructureType = 1000201000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_PROPERTIES_KHR : VkStructureType = 1000511000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_DECODE_AV1_CAPABILITIES_KHR: VkStructureType =
    1000512000;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_DECODE_AV1_PICTURE_INFO_KHR: VkStructureType =
    1000512001;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_DECODE_AV1_PROFILE_INFO_KHR: VkStructureType =
    1000512003;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_DECODE_AV1_SESSION_PARAMETERS_CREATE_INFO_KHR:
    VkStructureType = 1000512004;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_DECODE_AV1_DPB_SLOT_INFO_KHR: VkStructureType =
    1000512005;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_CAPABILITIES_KHR: VkStructureType =
    1000513000;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_SESSION_PARAMETERS_CREATE_INFO_KHR:
    VkStructureType = 1000513001;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_PICTURE_INFO_KHR: VkStructureType =
    1000513002;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_DPB_SLOT_INFO_KHR: VkStructureType =
    1000513003;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_ENCODE_AV1_FEATURES_KHR:
    VkStructureType = 1000513004;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_PROFILE_INFO_KHR: VkStructureType =
    1000513005;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_RATE_CONTROL_INFO_KHR:
    VkStructureType = 1000513006;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_RATE_CONTROL_LAYER_INFO_KHR:
    VkStructureType = 1000513007;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_QUALITY_LEVEL_PROPERTIES_KHR:
    VkStructureType = 1000513008;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_SESSION_CREATE_INFO_KHR:
    VkStructureType = 1000513009;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_GOP_REMAINING_FRAME_INFO_KHR:
    VkStructureType = 1000513010;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_MAINTENANCE_1_FEATURES_KHR:
    VkStructureType = 1000515000;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_INLINE_QUERY_INFO_KHR: VkStructureType =
    1000515001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PER_STAGE_DESCRIPTOR_SET_FEATURES_NV:
    VkStructureType = 1000516000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_2_FEATURES_QCOM:
    VkStructureType = 1000518000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_2_PROPERTIES_QCOM:
    VkStructureType = 1000518001;
pub const VkStructureType_VK_STRUCTURE_TYPE_SAMPLER_BLOCK_MATCH_WINDOW_CREATE_INFO_QCOM:
    VkStructureType = 1000518002;
pub const VkStructureType_VK_STRUCTURE_TYPE_SAMPLER_CUBIC_WEIGHTS_CREATE_INFO_QCOM:
    VkStructureType = 1000519000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUBIC_WEIGHTS_FEATURES_QCOM:
    VkStructureType = 1000519001;
pub const VkStructureType_VK_STRUCTURE_TYPE_BLIT_IMAGE_CUBIC_WEIGHTS_INFO_QCOM: VkStructureType =
    1000519002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_DEGAMMA_FEATURES_QCOM:
    VkStructureType = 1000520000;
pub const VkStructureType_VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_YCBCR_DEGAMMA_CREATE_INFO_QCOM : VkStructureType = 1000520001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUBIC_CLAMP_FEATURES_QCOM:
    VkStructureType = 1000521000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_DYNAMIC_STATE_FEATURES_EXT : VkStructureType = 1000524000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_SCREEN_BUFFER_PROPERTIES_QNX: VkStructureType =
    1000529000;
pub const VkStructureType_VK_STRUCTURE_TYPE_SCREEN_BUFFER_FORMAT_PROPERTIES_QNX: VkStructureType =
    1000529001;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMPORT_SCREEN_BUFFER_INFO_QNX: VkStructureType =
    1000529002;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_QNX: VkStructureType = 1000529003;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_SCREEN_BUFFER_FEATURES_QNX : VkStructureType = 1000529004 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LAYERED_DRIVER_PROPERTIES_MSFT:
    VkStructureType = 1000530000;
pub const VkStructureType_VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_KHR: VkStructureType =
    1000184000;
pub const VkStructureType_VK_STRUCTURE_TYPE_SET_DESCRIPTOR_BUFFER_OFFSETS_INFO_EXT:
    VkStructureType = 1000545007;
pub const VkStructureType_VK_STRUCTURE_TYPE_BIND_DESCRIPTOR_BUFFER_EMBEDDED_SAMPLERS_INFO_EXT:
    VkStructureType = 1000545008;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_POOL_OVERALLOCATION_FEATURES_NV : VkStructureType = 1000546000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TILE_MEMORY_HEAP_FEATURES_QCOM:
    VkStructureType = 1000547000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TILE_MEMORY_HEAP_PROPERTIES_QCOM:
    VkStructureType = 1000547001;
pub const VkStructureType_VK_STRUCTURE_TYPE_TILE_MEMORY_REQUIREMENTS_QCOM: VkStructureType =
    1000547002;
pub const VkStructureType_VK_STRUCTURE_TYPE_TILE_MEMORY_BIND_INFO_QCOM: VkStructureType =
    1000547003;
pub const VkStructureType_VK_STRUCTURE_TYPE_TILE_MEMORY_SIZE_INFO_QCOM: VkStructureType =
    1000547004;
pub const VkStructureType_VK_STRUCTURE_TYPE_DISPLAY_SURFACE_STEREO_CREATE_INFO_NV: VkStructureType =
    1000551000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DISPLAY_MODE_STEREO_PROPERTIES_NV: VkStructureType =
    1000551001;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_QUANTIZATION_MAP_CAPABILITIES_KHR:
    VkStructureType = 1000553000;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_FORMAT_QUANTIZATION_MAP_PROPERTIES_KHR:
    VkStructureType = 1000553001;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_QUANTIZATION_MAP_INFO_KHR:
    VkStructureType = 1000553002;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_QUANTIZATION_MAP_SESSION_PARAMETERS_CREATE_INFO_KHR : VkStructureType = 1000553005 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_ENCODE_QUANTIZATION_MAP_FEATURES_KHR : VkStructureType = 1000553009 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_QUANTIZATION_MAP_CAPABILITIES_KHR:
    VkStructureType = 1000553003;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_QUANTIZATION_MAP_CAPABILITIES_KHR:
    VkStructureType = 1000553004;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_FORMAT_H265_QUANTIZATION_MAP_PROPERTIES_KHR:
    VkStructureType = 1000553006;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_QUANTIZATION_MAP_CAPABILITIES_KHR:
    VkStructureType = 1000553007;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_FORMAT_AV1_QUANTIZATION_MAP_PROPERTIES_KHR:
    VkStructureType = 1000553008;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAW_ACCESS_CHAINS_FEATURES_NV:
    VkStructureType = 1000555000;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXTERNAL_COMPUTE_QUEUE_DEVICE_CREATE_INFO_NV:
    VkStructureType = 1000556000;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXTERNAL_COMPUTE_QUEUE_CREATE_INFO_NV: VkStructureType =
    1000556001;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXTERNAL_COMPUTE_QUEUE_DATA_PARAMS_NV: VkStructureType =
    1000556002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_COMPUTE_QUEUE_PROPERTIES_NV:
    VkStructureType = 1000556003;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_RELAXED_EXTENDED_INSTRUCTION_FEATURES_KHR : VkStructureType = 1000558000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMMAND_BUFFER_INHERITANCE_FEATURES_NV : VkStructureType = 1000559000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_7_FEATURES_KHR:
    VkStructureType = 1000562000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_7_PROPERTIES_KHR:
    VkStructureType = 1000562001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LAYERED_API_PROPERTIES_LIST_KHR:
    VkStructureType = 1000562002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LAYERED_API_PROPERTIES_KHR:
    VkStructureType = 1000562003;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LAYERED_API_VULKAN_PROPERTIES_KHR:
    VkStructureType = 1000562004;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT16_VECTOR_FEATURES_NV : VkStructureType = 1000563000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_REPLICATED_COMPOSITES_FEATURES_EXT : VkStructureType = 1000564000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_VALIDATION_FEATURES_NV:
    VkStructureType = 1000568000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_ACCELERATION_STRUCTURE_FEATURES_NV : VkStructureType = 1000569000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_ACCELERATION_STRUCTURE_PROPERTIES_NV : VkStructureType = 1000569001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_CLUSTER_ACCELERATION_STRUCTURE_CLUSTERS_BOTTOM_LEVEL_INPUT_NV : VkStructureType = 1000569002 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_CLUSTER_ACCELERATION_STRUCTURE_TRIANGLE_CLUSTER_INPUT_NV : VkStructureType = 1000569003 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_CLUSTER_ACCELERATION_STRUCTURE_MOVE_OBJECTS_INPUT_NV:
    VkStructureType = 1000569004;
pub const VkStructureType_VK_STRUCTURE_TYPE_CLUSTER_ACCELERATION_STRUCTURE_INPUT_INFO_NV:
    VkStructureType = 1000569005;
pub const VkStructureType_VK_STRUCTURE_TYPE_CLUSTER_ACCELERATION_STRUCTURE_COMMANDS_INFO_NV:
    VkStructureType = 1000569006;
pub const VkStructureType_VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CLUSTER_ACCELERATION_STRUCTURE_CREATE_INFO_NV : VkStructureType = 1000569007 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PARTITIONED_ACCELERATION_STRUCTURE_FEATURES_NV : VkStructureType = 1000570000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PARTITIONED_ACCELERATION_STRUCTURE_PROPERTIES_NV : VkStructureType = 1000570001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_PARTITIONED_ACCELERATION_STRUCTURE_NV : VkStructureType = 1000570002 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PARTITIONED_ACCELERATION_STRUCTURE_INSTANCES_INPUT_NV : VkStructureType = 1000570003 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUILD_PARTITIONED_ACCELERATION_STRUCTURE_INFO_NV:
    VkStructureType = 1000570004;
pub const VkStructureType_VK_STRUCTURE_TYPE_PARTITIONED_ACCELERATION_STRUCTURE_FLAGS_NV:
    VkStructureType = 1000570005;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_EXT : VkStructureType = 1000572000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_EXT : VkStructureType = 1000572001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_EXT:
    VkStructureType = 1000572002;
pub const VkStructureType_VK_STRUCTURE_TYPE_INDIRECT_EXECUTION_SET_CREATE_INFO_EXT:
    VkStructureType = 1000572003;
pub const VkStructureType_VK_STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_EXT: VkStructureType =
    1000572004;
pub const VkStructureType_VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_EXT:
    VkStructureType = 1000572006;
pub const VkStructureType_VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_EXT: VkStructureType =
    1000572007;
pub const VkStructureType_VK_STRUCTURE_TYPE_WRITE_INDIRECT_EXECUTION_SET_PIPELINE_EXT:
    VkStructureType = 1000572008;
pub const VkStructureType_VK_STRUCTURE_TYPE_WRITE_INDIRECT_EXECUTION_SET_SHADER_EXT:
    VkStructureType = 1000572009;
pub const VkStructureType_VK_STRUCTURE_TYPE_INDIRECT_EXECUTION_SET_PIPELINE_INFO_EXT:
    VkStructureType = 1000572010;
pub const VkStructureType_VK_STRUCTURE_TYPE_INDIRECT_EXECUTION_SET_SHADER_INFO_EXT:
    VkStructureType = 1000572011;
pub const VkStructureType_VK_STRUCTURE_TYPE_INDIRECT_EXECUTION_SET_SHADER_LAYOUT_INFO_EXT:
    VkStructureType = 1000572012;
pub const VkStructureType_VK_STRUCTURE_TYPE_GENERATED_COMMANDS_PIPELINE_INFO_EXT: VkStructureType =
    1000572013;
pub const VkStructureType_VK_STRUCTURE_TYPE_GENERATED_COMMANDS_SHADER_INFO_EXT: VkStructureType =
    1000572014;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_8_FEATURES_KHR:
    VkStructureType = 1000574000;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_BARRIER_ACCESS_FLAGS_3_KHR: VkStructureType =
    1000574002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ALIGNMENT_CONTROL_FEATURES_MESA : VkStructureType = 1000575000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ALIGNMENT_CONTROL_PROPERTIES_MESA : VkStructureType = 1000575001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_ALIGNMENT_CONTROL_CREATE_INFO_MESA:
    VkStructureType = 1000575002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLAMP_CONTROL_FEATURES_EXT:
    VkStructureType = 1000582000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_DEPTH_CLAMP_CONTROL_CREATE_INFO_EXT : VkStructureType = 1000582001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_MAINTENANCE_2_FEATURES_KHR:
    VkStructureType = 1000586000;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_INLINE_SESSION_PARAMETERS_INFO_KHR:
    VkStructureType = 1000586001;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_INLINE_SESSION_PARAMETERS_INFO_KHR:
    VkStructureType = 1000586002;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_DECODE_AV1_INLINE_SESSION_PARAMETERS_INFO_KHR:
    VkStructureType = 1000586003;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HDR_VIVID_FEATURES_HUAWEI:
    VkStructureType = 1000590000;
pub const VkStructureType_VK_STRUCTURE_TYPE_HDR_VIVID_DYNAMIC_METADATA_HUAWEI: VkStructureType =
    1000590001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_2_FEATURES_NV:
    VkStructureType = 1000593000;
pub const VkStructureType_VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_FLEXIBLE_DIMENSIONS_PROPERTIES_NV:
    VkStructureType = 1000593001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_2_PROPERTIES_NV:
    VkStructureType = 1000593002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_OPACITY_MICROMAP_FEATURES_ARM : VkStructureType = 1000596000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMPORT_MEMORY_METAL_HANDLE_INFO_EXT: VkStructureType =
    1000602000;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_METAL_HANDLE_PROPERTIES_EXT: VkStructureType =
    1000602001;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_GET_METAL_HANDLE_INFO_EXT: VkStructureType =
    1000602002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLAMP_ZERO_ONE_FEATURES_KHR:
    VkStructureType = 1000421000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_ROBUSTNESS_FEATURES_EXT : VkStructureType = 1000608000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_KHR:
    VkStructureType = 1000286000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_KHR:
    VkStructureType = 1000286001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_FEATURES_EXT : VkStructureType = 1000425000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_PROPERTIES_EXT : VkStructureType = 1000425001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_OFFSET_END_INFO_EXT:
    VkStructureType = 1000425002;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDERING_END_INFO_EXT: VkStructureType = 1000619003;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_DEVICE_MEMORY_FEATURES_EXT : VkStructureType = 1000620000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES:
    VkStructureType = 1000120000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETER_FEATURES:
    VkStructureType = 1000063000;
#[doc = " VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT: VkStructureType =
    1000011000;
#[doc = " VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDERING_INFO_KHR: VkStructureType = 1000044000;
#[doc = " VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO_KHR: VkStructureType =
    1000044001;
#[doc = " VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO_KHR: VkStructureType =
    1000044002;
#[doc = " VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES_KHR:
    VkStructureType = 1000044003;
#[doc = " VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO_KHR:
    VkStructureType = 1000044004;
#[doc = " VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO_KHR: VkStructureType =
    1000053000;
#[doc = " VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES_KHR:
    VkStructureType = 1000053001;
#[doc = " VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES_KHR:
    VkStructureType = 1000053002;
#[doc = " VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2_KHR: VkStructureType =
    1000059000;
#[doc = " VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2_KHR: VkStructureType =
    1000059001;
#[doc = " VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2_KHR: VkStructureType = 1000059002;
#[doc = " VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2_KHR: VkStructureType =
    1000059003;
#[doc = " VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2_KHR:
    VkStructureType = 1000059004;
#[doc = " VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2_KHR: VkStructureType =
    1000059005;
#[doc = " VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2_KHR:
    VkStructureType = 1000059006;
#[doc = " VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2_KHR: VkStructureType =
    1000059007;
#[doc = " VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2_KHR:
    VkStructureType = 1000059008;
#[doc = " VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO_KHR: VkStructureType =
    1000060000;
#[doc = " VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO_KHR:
    VkStructureType = 1000060003;
#[doc = " VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO_KHR:
    VkStructureType = 1000060004;
#[doc = " VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO_KHR: VkStructureType =
    1000060005;
#[doc = " VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO_KHR: VkStructureType =
    1000060006;
#[doc = " VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO_KHR:
    VkStructureType = 1000060013;
#[doc = " VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO_KHR:
    VkStructureType = 1000060014;
#[doc = " VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT : VkStructureType = 1000066000 ;
#[doc = " VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_ROBUSTNESS_CREATE_INFO_EXT: VkStructureType =
    1000068000;
#[doc = " VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_FEATURES_EXT:
    VkStructureType = 1000068001;
#[doc = " VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_PROPERTIES_EXT:
    VkStructureType = 1000068002;
#[doc = " VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES_KHR: VkStructureType =
    1000070000;
#[doc = " VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO_KHR: VkStructureType =
    1000070001;
#[doc = " VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO_KHR:
    VkStructureType = 1000071000;
#[doc = " VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES_KHR: VkStructureType =
    1000071001;
#[doc = " VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO_KHR:
    VkStructureType = 1000071002;
#[doc = " VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES_KHR: VkStructureType =
    1000071003;
#[doc = " VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES_KHR: VkStructureType =
    1000071004;
#[doc = " VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO_KHR:
    VkStructureType = 1000072000;
#[doc = " VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_KHR: VkStructureType =
    1000072001;
#[doc = " VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_KHR: VkStructureType =
    1000072002;
#[doc = " VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO_KHR:
    VkStructureType = 1000076000;
#[doc = " VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES_KHR: VkStructureType =
    1000076001;
#[doc = " VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO_KHR: VkStructureType =
    1000077000;
#[doc = " VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR:
    VkStructureType = 1000080000;
#[doc = " VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES_KHR:
    VkStructureType = 1000082000;
#[doc = " VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT16_INT8_FEATURES_KHR:
    VkStructureType = 1000082000;
#[doc = " VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES_KHR:
    VkStructureType = 1000083000;
#[doc = " VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO_KHR:
    VkStructureType = 1000085000;
#[doc = " VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT: VkStructureType = 1000090000;
#[doc = " VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES_KHR:
    VkStructureType = 1000108000;
#[doc = " VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO_KHR:
    VkStructureType = 1000108001;
#[doc = " VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO_KHR: VkStructureType =
    1000108002;
#[doc = " VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO_KHR: VkStructureType =
    1000108003;
#[doc = " VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2_KHR: VkStructureType =
    1000109000;
#[doc = " VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2_KHR: VkStructureType =
    1000109001;
#[doc = " VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2_KHR: VkStructureType = 1000109002;
#[doc = " VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2_KHR: VkStructureType = 1000109003;
#[doc = " VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2_KHR: VkStructureType =
    1000109004;
#[doc = " VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO_KHR: VkStructureType = 1000109005;
#[doc = " VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_SUBPASS_END_INFO_KHR: VkStructureType = 1000109006;
#[doc = " VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO_KHR:
    VkStructureType = 1000112000;
#[doc = " VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES_KHR: VkStructureType =
    1000112001;
#[doc = " VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO_KHR: VkStructureType =
    1000113000;
#[doc = " VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES_KHR:
    VkStructureType = 1000117000;
#[doc = " VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO_KHR:
    VkStructureType = 1000117001;
#[doc = " VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO_KHR: VkStructureType =
    1000117002;
#[doc = " VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO_KHR : VkStructureType = 1000117003 ;
#[doc = " VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES_KHR:
    VkStructureType = 1000120000;
#[doc = " VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES_KHR:
    VkStructureType = 1000120000;
#[doc = " VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS_KHR: VkStructureType =
    1000127000;
#[doc = " VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO_KHR: VkStructureType =
    1000127001;
#[doc = " VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT:
    VkStructureType = 1000130000;
#[doc = " VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT:
    VkStructureType = 1000130001;
#[doc = " VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT:
    VkStructureType = 1000138000;
#[doc = " VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT:
    VkStructureType = 1000138001;
#[doc = " VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT:
    VkStructureType = 1000138002;
#[doc = " VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT:
    VkStructureType = 1000138003;
#[doc = " VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2_KHR: VkStructureType =
    1000146000;
#[doc = " VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2_KHR: VkStructureType =
    1000146001;
#[doc = " VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2_KHR:
    VkStructureType = 1000146002;
#[doc = " VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2_KHR: VkStructureType = 1000146003;
#[doc = " VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2_KHR:
    VkStructureType = 1000146004;
#[doc = " VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO_KHR: VkStructureType =
    1000147000;
#[doc = " VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_NV: VkStructureType =
    1000044008;
#[doc = " VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO_KHR:
    VkStructureType = 1000156000;
#[doc = " VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO_KHR: VkStructureType =
    1000156001;
#[doc = " VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO_KHR: VkStructureType =
    1000156002;
#[doc = " VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO_KHR:
    VkStructureType = 1000156003;
#[doc = " VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES_KHR : VkStructureType = 1000156004 ;
#[doc = " VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES_KHR:
    VkStructureType = 1000156005;
#[doc = " VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO_KHR: VkStructureType =
    1000157000;
#[doc = " VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO_KHR: VkStructureType =
    1000157001;
#[doc = " VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO_EXT:
    VkStructureType = 1000161000;
#[doc = " VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT:
    VkStructureType = 1000161001;
#[doc = " VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES_EXT:
    VkStructureType = 1000161002;
#[doc = " VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO_EXT : VkStructureType = 1000161003 ;
#[doc = " VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT_EXT : VkStructureType = 1000161004 ;
#[doc = " VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES_KHR:
    VkStructureType = 1000168000;
#[doc = " VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT_KHR: VkStructureType =
    1000168001;
#[doc = " VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT:
    VkStructureType = 1000174000;
#[doc = " VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES_KHR : VkStructureType = 1000175000 ;
#[doc = " VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES_KHR:
    VkStructureType = 1000177000;
#[doc = " VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES_KHR:
    VkStructureType = 1000180000;
#[doc = " VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT: VkStructureType =
    1000184000;
#[doc = " VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_KHR:
    VkStructureType = 1000174000;
#[doc = " VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_KHR:
    VkStructureType = 1000388000;
#[doc = " VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_KHR:
    VkStructureType = 1000388001;
#[doc = " VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT:
    VkStructureType = 1000190001;
#[doc = " VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT : VkStructureType = 1000190002 ;
#[doc = " VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT:
    VkStructureType = 1000192000;
#[doc = " VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES_KHR: VkStructureType =
    1000196000;
#[doc = " VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES_KHR:
    VkStructureType = 1000197000;
#[doc = " VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES_KHR:
    VkStructureType = 1000199000;
#[doc = " VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE_KHR:
    VkStructureType = 1000199001;
#[doc = " VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV : VkStructureType = 1000201000 ;
#[doc = " VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV : VkStructureType = 1000203000 ;
#[doc = " VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES_KHR:
    VkStructureType = 1000207000;
#[doc = " VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES_KHR:
    VkStructureType = 1000207001;
#[doc = " VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO_KHR: VkStructureType =
    1000207002;
#[doc = " VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO_KHR: VkStructureType =
    1000207003;
#[doc = " VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO_KHR: VkStructureType = 1000207004;
#[doc = " VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO_KHR: VkStructureType = 1000207005;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL: VkStructureType =
    1000210000;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES_KHR:
    VkStructureType = 1000211000;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES_KHR : VkStructureType = 1000215000 ;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES_EXT:
    VkStructureType = 1000221000;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES_EXT:
    VkStructureType = 1000225000;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT : VkStructureType = 1000225001 ;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT:
    VkStructureType = 1000225002;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_LOCAL_READ_FEATURES_KHR : VkStructureType = 1000232000 ;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_LOCATION_INFO_KHR:
    VkStructureType = 1000232001;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDERING_INPUT_ATTACHMENT_INDEX_INFO_KHR:
    VkStructureType = 1000232002;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES_KHR : VkStructureType = 1000241000 ;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT_KHR:
    VkStructureType = 1000241001;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT_KHR:
    VkStructureType = 1000241002;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_ADDRESS_FEATURES_EXT:
    VkStructureType = 1000244000;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_EXT: VkStructureType =
    1000244001;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES_EXT: VkStructureType =
    1000245000;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO_EXT: VkStructureType =
    1000246000;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES_KHR : VkStructureType = 1000253000 ;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_KHR:
    VkStructureType = 1000257000;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_KHR: VkStructureType =
    1000244001;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO_KHR:
    VkStructureType = 1000257002;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO_KHR:
    VkStructureType = 1000257003;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO_KHR:
    VkStructureType = 1000257004;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT:
    VkStructureType = 1000259000;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT:
    VkStructureType = 1000259001;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT:
    VkStructureType = 1000259002;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES_EXT:
    VkStructureType = 1000261000;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT:
    VkStructureType = 1000265000;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_FEATURES_EXT:
    VkStructureType = 1000270000;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_PROPERTIES_EXT:
    VkStructureType = 1000270001;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_TO_IMAGE_COPY_EXT: VkStructureType = 1000270002;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_TO_MEMORY_COPY_EXT: VkStructureType = 1000270003;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_COPY_IMAGE_TO_MEMORY_INFO_EXT: VkStructureType =
    1000270004;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_COPY_MEMORY_TO_IMAGE_INFO_EXT: VkStructureType =
    1000270005;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_HOST_IMAGE_LAYOUT_TRANSITION_INFO_EXT: VkStructureType =
    1000270006;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_COPY_IMAGE_TO_IMAGE_INFO_EXT: VkStructureType =
    1000270007;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_SUBRESOURCE_HOST_MEMCPY_SIZE_EXT: VkStructureType =
    1000270008;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_HOST_IMAGE_COPY_DEVICE_PERFORMANCE_QUERY_EXT:
    VkStructureType = 1000270009;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_MAP_INFO_KHR: VkStructureType = 1000271000;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_UNMAP_INFO_KHR: VkStructureType = 1000271001;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT : VkStructureType = 1000276000 ;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES_KHR : VkStructureType = 1000280000 ;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES_KHR : VkStructureType = 1000280001 ;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES_EXT : VkStructureType = 1000281001 ;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT:
    VkStructureType = 1000286000;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT:
    VkStructureType = 1000286001;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES_EXT:
    VkStructureType = 1000295000;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO_EXT: VkStructureType =
    1000295001;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO_EXT: VkStructureType =
    1000295002;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES_EXT : VkStructureType = 1000297000 ;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_BARRIER_2_KHR: VkStructureType = 1000314000;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2_KHR: VkStructureType =
    1000314001;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2_KHR: VkStructureType =
    1000314002;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_DEPENDENCY_INFO_KHR: VkStructureType = 1000314003;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_SUBMIT_INFO_2_KHR: VkStructureType = 1000314004;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO_KHR: VkStructureType = 1000314005;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO_KHR: VkStructureType =
    1000314006;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES_KHR:
    VkStructureType = 1000314007;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES_KHR : VkStructureType = 1000325000 ;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES_EXT:
    VkStructureType = 1000335000;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2_KHR: VkStructureType = 1000337000;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2_KHR: VkStructureType = 1000337001;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2_KHR: VkStructureType =
    1000337002;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2_KHR: VkStructureType =
    1000337003;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2_KHR: VkStructureType = 1000337004;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2_KHR: VkStructureType = 1000337005;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_COPY_2_KHR: VkStructureType = 1000337006;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_COPY_2_KHR: VkStructureType = 1000337007;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_BLIT_2_KHR: VkStructureType = 1000337008;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2_KHR: VkStructureType = 1000337009;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2_KHR: VkStructureType = 1000337010;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_SUBRESOURCE_LAYOUT_2_EXT: VkStructureType = 1000338002;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_SUBRESOURCE_2_EXT: VkStructureType = 1000338003;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_ARM : VkStructureType = 1000342000 ;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_VALVE : VkStructureType = 1000351000 ;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_VALVE:
    VkStructureType = 1000351002;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3_KHR: VkStructureType = 1000360000;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_INFO_EXT: VkStructureType = 1000269001;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_EXT:
    VkStructureType = 1000388000;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_EXT:
    VkStructureType = 1000388001;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES_KHR:
    VkStructureType = 1000413000;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES_KHR:
    VkStructureType = 1000413001;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS_KHR: VkStructureType =
    1000413002;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS_KHR: VkStructureType =
    1000413003;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_ROTATE_FEATURES_KHR:
    VkStructureType = 1000416000;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLAMP_ZERO_ONE_FEATURES_EXT:
    VkStructureType = 1000421000;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_FEATURES_QCOM : VkStructureType = 1000425000 ;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_PROPERTIES_QCOM : VkStructureType = 1000425001 ;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_SUBPASS_FRAGMENT_DENSITY_MAP_OFFSET_END_INFO_QCOM:
    VkStructureType = 1000425002;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROTECTED_ACCESS_FEATURES_EXT : VkStructureType = 1000466000 ;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_5_FEATURES_KHR:
    VkStructureType = 1000470000;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_5_PROPERTIES_KHR:
    VkStructureType = 1000470001;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDERING_AREA_INFO_KHR: VkStructureType = 1000470003;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_IMAGE_SUBRESOURCE_INFO_KHR: VkStructureType =
    1000470004;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_SUBRESOURCE_LAYOUT_2_KHR: VkStructureType = 1000338002;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_SUBRESOURCE_2_KHR: VkStructureType = 1000338003;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_CREATE_FLAGS_2_CREATE_INFO_KHR:
    VkStructureType = 1000470005;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_USAGE_FLAGS_2_CREATE_INFO_KHR: VkStructureType =
    1000470006;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_SHADER_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT:
    VkStructureType = 1000225001;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_KHR : VkStructureType = 1000525000 ;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_KHR:
    VkStructureType = 1000190001;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_KHR : VkStructureType = 1000190002 ;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT_CONTROLS_2_FEATURES_KHR:
    VkStructureType = 1000528000;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_KHR:
    VkStructureType = 1000265000;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_KHR:
    VkStructureType = 1000259000;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_KHR:
    VkStructureType = 1000259001;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_KHR:
    VkStructureType = 1000259002;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_EXPECT_ASSUME_FEATURES_KHR:
    VkStructureType = 1000544000;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_6_FEATURES_KHR:
    VkStructureType = 1000545000;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_6_PROPERTIES_KHR:
    VkStructureType = 1000545001;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_BIND_MEMORY_STATUS_KHR: VkStructureType = 1000545002;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_BIND_DESCRIPTOR_SETS_INFO_KHR: VkStructureType =
    1000545003;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PUSH_CONSTANTS_INFO_KHR: VkStructureType = 1000545004;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PUSH_DESCRIPTOR_SET_INFO_KHR: VkStructureType =
    1000545005;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_PUSH_DESCRIPTOR_SET_WITH_TEMPLATE_INFO_KHR:
    VkStructureType = 1000545006;
#[doc = " VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL is a deprecated alias"]
pub const VkStructureType_VK_STRUCTURE_TYPE_MAX_ENUM: VkStructureType = 2147483647;
pub const VkPipelineCacheHeaderVersion_VK_PIPELINE_CACHE_HEADER_VERSION_ONE:
    VkPipelineCacheHeaderVersion = 1;
pub const VkPipelineCacheHeaderVersion_VK_PIPELINE_CACHE_HEADER_VERSION_MAX_ENUM:
    VkPipelineCacheHeaderVersion = 2147483647;
pub const VkImageLayout_VK_IMAGE_LAYOUT_UNDEFINED: VkImageLayout = 0;
pub const VkImageLayout_VK_IMAGE_LAYOUT_GENERAL: VkImageLayout = 1;
pub const VkImageLayout_VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL: VkImageLayout = 2;
pub const VkImageLayout_VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL: VkImageLayout = 3;
pub const VkImageLayout_VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL: VkImageLayout = 4;
pub const VkImageLayout_VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL: VkImageLayout = 5;
pub const VkImageLayout_VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL: VkImageLayout = 6;
pub const VkImageLayout_VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL: VkImageLayout = 7;
pub const VkImageLayout_VK_IMAGE_LAYOUT_PREINITIALIZED: VkImageLayout = 8;
pub const VkImageLayout_VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL: VkImageLayout =
    1000117000;
pub const VkImageLayout_VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL: VkImageLayout =
    1000117001;
pub const VkImageLayout_VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL: VkImageLayout = 1000241000;
pub const VkImageLayout_VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL: VkImageLayout = 1000241001;
pub const VkImageLayout_VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL: VkImageLayout = 1000241002;
pub const VkImageLayout_VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL: VkImageLayout = 1000241003;
pub const VkImageLayout_VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL: VkImageLayout = 1000314000;
pub const VkImageLayout_VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL: VkImageLayout = 1000314001;
pub const VkImageLayout_VK_IMAGE_LAYOUT_RENDERING_LOCAL_READ: VkImageLayout = 1000232000;
pub const VkImageLayout_VK_IMAGE_LAYOUT_PRESENT_SRC_KHR: VkImageLayout = 1000001002;
pub const VkImageLayout_VK_IMAGE_LAYOUT_VIDEO_DECODE_DST_KHR: VkImageLayout = 1000024000;
pub const VkImageLayout_VK_IMAGE_LAYOUT_VIDEO_DECODE_SRC_KHR: VkImageLayout = 1000024001;
pub const VkImageLayout_VK_IMAGE_LAYOUT_VIDEO_DECODE_DPB_KHR: VkImageLayout = 1000024002;
pub const VkImageLayout_VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR: VkImageLayout = 1000111000;
pub const VkImageLayout_VK_IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT: VkImageLayout =
    1000218000;
pub const VkImageLayout_VK_IMAGE_LAYOUT_FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR:
    VkImageLayout = 1000164003;
pub const VkImageLayout_VK_IMAGE_LAYOUT_VIDEO_ENCODE_DST_KHR: VkImageLayout = 1000299000;
pub const VkImageLayout_VK_IMAGE_LAYOUT_VIDEO_ENCODE_SRC_KHR: VkImageLayout = 1000299001;
pub const VkImageLayout_VK_IMAGE_LAYOUT_VIDEO_ENCODE_DPB_KHR: VkImageLayout = 1000299002;
pub const VkImageLayout_VK_IMAGE_LAYOUT_ATTACHMENT_FEEDBACK_LOOP_OPTIMAL_EXT: VkImageLayout =
    1000339000;
pub const VkImageLayout_VK_IMAGE_LAYOUT_VIDEO_ENCODE_QUANTIZATION_MAP_KHR: VkImageLayout =
    1000553000;
pub const VkImageLayout_VK_IMAGE_LAYOUT_ZERO_INITIALIZED_EXT: VkImageLayout = 1000620000;
pub const VkImageLayout_VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR:
    VkImageLayout = 1000117000;
pub const VkImageLayout_VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL_KHR:
    VkImageLayout = 1000117001;
pub const VkImageLayout_VK_IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV: VkImageLayout = 1000164003;
pub const VkImageLayout_VK_IMAGE_LAYOUT_RENDERING_LOCAL_READ_KHR: VkImageLayout = 1000232000;
pub const VkImageLayout_VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL_KHR: VkImageLayout = 1000241000;
pub const VkImageLayout_VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL_KHR: VkImageLayout = 1000241001;
pub const VkImageLayout_VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL_KHR: VkImageLayout = 1000241002;
pub const VkImageLayout_VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL_KHR: VkImageLayout = 1000241003;
pub const VkImageLayout_VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL_KHR: VkImageLayout = 1000314000;
pub const VkImageLayout_VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL_KHR: VkImageLayout = 1000314001;
pub const VkImageLayout_VK_IMAGE_LAYOUT_MAX_ENUM: VkImageLayout = 2147483647;
pub const VkObjectType_VK_OBJECT_TYPE_UNKNOWN: VkObjectType = 0;
pub const VkObjectType_VK_OBJECT_TYPE_INSTANCE: VkObjectType = 1;
pub const VkObjectType_VK_OBJECT_TYPE_PHYSICAL_DEVICE: VkObjectType = 2;
pub const VkObjectType_VK_OBJECT_TYPE_DEVICE: VkObjectType = 3;
pub const VkObjectType_VK_OBJECT_TYPE_QUEUE: VkObjectType = 4;
pub const VkObjectType_VK_OBJECT_TYPE_SEMAPHORE: VkObjectType = 5;
pub const VkObjectType_VK_OBJECT_TYPE_COMMAND_BUFFER: VkObjectType = 6;
pub const VkObjectType_VK_OBJECT_TYPE_FENCE: VkObjectType = 7;
pub const VkObjectType_VK_OBJECT_TYPE_DEVICE_MEMORY: VkObjectType = 8;
pub const VkObjectType_VK_OBJECT_TYPE_BUFFER: VkObjectType = 9;
pub const VkObjectType_VK_OBJECT_TYPE_IMAGE: VkObjectType = 10;
pub const VkObjectType_VK_OBJECT_TYPE_EVENT: VkObjectType = 11;
pub const VkObjectType_VK_OBJECT_TYPE_QUERY_POOL: VkObjectType = 12;
pub const VkObjectType_VK_OBJECT_TYPE_BUFFER_VIEW: VkObjectType = 13;
pub const VkObjectType_VK_OBJECT_TYPE_IMAGE_VIEW: VkObjectType = 14;
pub const VkObjectType_VK_OBJECT_TYPE_SHADER_MODULE: VkObjectType = 15;
pub const VkObjectType_VK_OBJECT_TYPE_PIPELINE_CACHE: VkObjectType = 16;
pub const VkObjectType_VK_OBJECT_TYPE_PIPELINE_LAYOUT: VkObjectType = 17;
pub const VkObjectType_VK_OBJECT_TYPE_RENDER_PASS: VkObjectType = 18;
pub const VkObjectType_VK_OBJECT_TYPE_PIPELINE: VkObjectType = 19;
pub const VkObjectType_VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT: VkObjectType = 20;
pub const VkObjectType_VK_OBJECT_TYPE_SAMPLER: VkObjectType = 21;
pub const VkObjectType_VK_OBJECT_TYPE_DESCRIPTOR_POOL: VkObjectType = 22;
pub const VkObjectType_VK_OBJECT_TYPE_DESCRIPTOR_SET: VkObjectType = 23;
pub const VkObjectType_VK_OBJECT_TYPE_FRAMEBUFFER: VkObjectType = 24;
pub const VkObjectType_VK_OBJECT_TYPE_COMMAND_POOL: VkObjectType = 25;
pub const VkObjectType_VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION: VkObjectType = 1000156000;
pub const VkObjectType_VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE: VkObjectType = 1000085000;
pub const VkObjectType_VK_OBJECT_TYPE_PRIVATE_DATA_SLOT: VkObjectType = 1000295000;
pub const VkObjectType_VK_OBJECT_TYPE_SURFACE_KHR: VkObjectType = 1000000000;
pub const VkObjectType_VK_OBJECT_TYPE_SWAPCHAIN_KHR: VkObjectType = 1000001000;
pub const VkObjectType_VK_OBJECT_TYPE_DISPLAY_KHR: VkObjectType = 1000002000;
pub const VkObjectType_VK_OBJECT_TYPE_DISPLAY_MODE_KHR: VkObjectType = 1000002001;
pub const VkObjectType_VK_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT: VkObjectType = 1000011000;
pub const VkObjectType_VK_OBJECT_TYPE_VIDEO_SESSION_KHR: VkObjectType = 1000023000;
pub const VkObjectType_VK_OBJECT_TYPE_VIDEO_SESSION_PARAMETERS_KHR: VkObjectType = 1000023001;
pub const VkObjectType_VK_OBJECT_TYPE_CU_MODULE_NVX: VkObjectType = 1000029000;
pub const VkObjectType_VK_OBJECT_TYPE_CU_FUNCTION_NVX: VkObjectType = 1000029001;
pub const VkObjectType_VK_OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT: VkObjectType = 1000128000;
pub const VkObjectType_VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR: VkObjectType = 1000150000;
pub const VkObjectType_VK_OBJECT_TYPE_VALIDATION_CACHE_EXT: VkObjectType = 1000160000;
pub const VkObjectType_VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV: VkObjectType = 1000165000;
pub const VkObjectType_VK_OBJECT_TYPE_PERFORMANCE_CONFIGURATION_INTEL: VkObjectType = 1000210000;
pub const VkObjectType_VK_OBJECT_TYPE_DEFERRED_OPERATION_KHR: VkObjectType = 1000268000;
pub const VkObjectType_VK_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NV: VkObjectType = 1000277000;
pub const VkObjectType_VK_OBJECT_TYPE_BUFFER_COLLECTION_FUCHSIA: VkObjectType = 1000366000;
pub const VkObjectType_VK_OBJECT_TYPE_MICROMAP_EXT: VkObjectType = 1000396000;
pub const VkObjectType_VK_OBJECT_TYPE_OPTICAL_FLOW_SESSION_NV: VkObjectType = 1000464000;
pub const VkObjectType_VK_OBJECT_TYPE_SHADER_EXT: VkObjectType = 1000482000;
pub const VkObjectType_VK_OBJECT_TYPE_PIPELINE_BINARY_KHR: VkObjectType = 1000483000;
pub const VkObjectType_VK_OBJECT_TYPE_EXTERNAL_COMPUTE_QUEUE_NV: VkObjectType = 1000556000;
pub const VkObjectType_VK_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_EXT: VkObjectType = 1000572000;
pub const VkObjectType_VK_OBJECT_TYPE_INDIRECT_EXECUTION_SET_EXT: VkObjectType = 1000572001;
pub const VkObjectType_VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR: VkObjectType = 1000085000;
pub const VkObjectType_VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR: VkObjectType = 1000156000;
pub const VkObjectType_VK_OBJECT_TYPE_PRIVATE_DATA_SLOT_EXT: VkObjectType = 1000295000;
pub const VkObjectType_VK_OBJECT_TYPE_MAX_ENUM: VkObjectType = 2147483647;
pub const VkVendorId_VK_VENDOR_ID_KHRONOS: VkVendorId = 65536;
pub const VkVendorId_VK_VENDOR_ID_VIV: VkVendorId = 65537;
pub const VkVendorId_VK_VENDOR_ID_VSI: VkVendorId = 65538;
pub const VkVendorId_VK_VENDOR_ID_KAZAN: VkVendorId = 65539;
pub const VkVendorId_VK_VENDOR_ID_CODEPLAY: VkVendorId = 65540;
pub const VkVendorId_VK_VENDOR_ID_MESA: VkVendorId = 65541;
pub const VkVendorId_VK_VENDOR_ID_POCL: VkVendorId = 65542;
pub const VkVendorId_VK_VENDOR_ID_MOBILEYE: VkVendorId = 65543;
pub const VkVendorId_VK_VENDOR_ID_MAX_ENUM: VkVendorId = 2147483647;
pub const VkSystemAllocationScope_VK_SYSTEM_ALLOCATION_SCOPE_COMMAND: VkSystemAllocationScope = 0;
pub const VkSystemAllocationScope_VK_SYSTEM_ALLOCATION_SCOPE_OBJECT: VkSystemAllocationScope = 1;
pub const VkSystemAllocationScope_VK_SYSTEM_ALLOCATION_SCOPE_CACHE: VkSystemAllocationScope = 2;
pub const VkSystemAllocationScope_VK_SYSTEM_ALLOCATION_SCOPE_DEVICE: VkSystemAllocationScope = 3;
pub const VkSystemAllocationScope_VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE: VkSystemAllocationScope = 4;
pub const VkSystemAllocationScope_VK_SYSTEM_ALLOCATION_SCOPE_MAX_ENUM: VkSystemAllocationScope =
    2147483647;
pub const VkInternalAllocationType_VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE:
    VkInternalAllocationType = 0;
pub const VkInternalAllocationType_VK_INTERNAL_ALLOCATION_TYPE_MAX_ENUM: VkInternalAllocationType =
    2147483647;
pub const VkFormat_VK_FORMAT_UNDEFINED: VkFormat = 0;
pub const VkFormat_VK_FORMAT_R4G4_UNORM_PACK8: VkFormat = 1;
pub const VkFormat_VK_FORMAT_R4G4B4A4_UNORM_PACK16: VkFormat = 2;
pub const VkFormat_VK_FORMAT_B4G4R4A4_UNORM_PACK16: VkFormat = 3;
pub const VkFormat_VK_FORMAT_R5G6B5_UNORM_PACK16: VkFormat = 4;
pub const VkFormat_VK_FORMAT_B5G6R5_UNORM_PACK16: VkFormat = 5;
pub const VkFormat_VK_FORMAT_R5G5B5A1_UNORM_PACK16: VkFormat = 6;
pub const VkFormat_VK_FORMAT_B5G5R5A1_UNORM_PACK16: VkFormat = 7;
pub const VkFormat_VK_FORMAT_A1R5G5B5_UNORM_PACK16: VkFormat = 8;
pub const VkFormat_VK_FORMAT_R8_UNORM: VkFormat = 9;
pub const VkFormat_VK_FORMAT_R8_SNORM: VkFormat = 10;
pub const VkFormat_VK_FORMAT_R8_USCALED: VkFormat = 11;
pub const VkFormat_VK_FORMAT_R8_SSCALED: VkFormat = 12;
pub const VkFormat_VK_FORMAT_R8_UINT: VkFormat = 13;
pub const VkFormat_VK_FORMAT_R8_SINT: VkFormat = 14;
pub const VkFormat_VK_FORMAT_R8_SRGB: VkFormat = 15;
pub const VkFormat_VK_FORMAT_R8G8_UNORM: VkFormat = 16;
pub const VkFormat_VK_FORMAT_R8G8_SNORM: VkFormat = 17;
pub const VkFormat_VK_FORMAT_R8G8_USCALED: VkFormat = 18;
pub const VkFormat_VK_FORMAT_R8G8_SSCALED: VkFormat = 19;
pub const VkFormat_VK_FORMAT_R8G8_UINT: VkFormat = 20;
pub const VkFormat_VK_FORMAT_R8G8_SINT: VkFormat = 21;
pub const VkFormat_VK_FORMAT_R8G8_SRGB: VkFormat = 22;
pub const VkFormat_VK_FORMAT_R8G8B8_UNORM: VkFormat = 23;
pub const VkFormat_VK_FORMAT_R8G8B8_SNORM: VkFormat = 24;
pub const VkFormat_VK_FORMAT_R8G8B8_USCALED: VkFormat = 25;
pub const VkFormat_VK_FORMAT_R8G8B8_SSCALED: VkFormat = 26;
pub const VkFormat_VK_FORMAT_R8G8B8_UINT: VkFormat = 27;
pub const VkFormat_VK_FORMAT_R8G8B8_SINT: VkFormat = 28;
pub const VkFormat_VK_FORMAT_R8G8B8_SRGB: VkFormat = 29;
pub const VkFormat_VK_FORMAT_B8G8R8_UNORM: VkFormat = 30;
pub const VkFormat_VK_FORMAT_B8G8R8_SNORM: VkFormat = 31;
pub const VkFormat_VK_FORMAT_B8G8R8_USCALED: VkFormat = 32;
pub const VkFormat_VK_FORMAT_B8G8R8_SSCALED: VkFormat = 33;
pub const VkFormat_VK_FORMAT_B8G8R8_UINT: VkFormat = 34;
pub const VkFormat_VK_FORMAT_B8G8R8_SINT: VkFormat = 35;
pub const VkFormat_VK_FORMAT_B8G8R8_SRGB: VkFormat = 36;
pub const VkFormat_VK_FORMAT_R8G8B8A8_UNORM: VkFormat = 37;
pub const VkFormat_VK_FORMAT_R8G8B8A8_SNORM: VkFormat = 38;
pub const VkFormat_VK_FORMAT_R8G8B8A8_USCALED: VkFormat = 39;
pub const VkFormat_VK_FORMAT_R8G8B8A8_SSCALED: VkFormat = 40;
pub const VkFormat_VK_FORMAT_R8G8B8A8_UINT: VkFormat = 41;
pub const VkFormat_VK_FORMAT_R8G8B8A8_SINT: VkFormat = 42;
pub const VkFormat_VK_FORMAT_R8G8B8A8_SRGB: VkFormat = 43;
pub const VkFormat_VK_FORMAT_B8G8R8A8_UNORM: VkFormat = 44;
pub const VkFormat_VK_FORMAT_B8G8R8A8_SNORM: VkFormat = 45;
pub const VkFormat_VK_FORMAT_B8G8R8A8_USCALED: VkFormat = 46;
pub const VkFormat_VK_FORMAT_B8G8R8A8_SSCALED: VkFormat = 47;
pub const VkFormat_VK_FORMAT_B8G8R8A8_UINT: VkFormat = 48;
pub const VkFormat_VK_FORMAT_B8G8R8A8_SINT: VkFormat = 49;
pub const VkFormat_VK_FORMAT_B8G8R8A8_SRGB: VkFormat = 50;
pub const VkFormat_VK_FORMAT_A8B8G8R8_UNORM_PACK32: VkFormat = 51;
pub const VkFormat_VK_FORMAT_A8B8G8R8_SNORM_PACK32: VkFormat = 52;
pub const VkFormat_VK_FORMAT_A8B8G8R8_USCALED_PACK32: VkFormat = 53;
pub const VkFormat_VK_FORMAT_A8B8G8R8_SSCALED_PACK32: VkFormat = 54;
pub const VkFormat_VK_FORMAT_A8B8G8R8_UINT_PACK32: VkFormat = 55;
pub const VkFormat_VK_FORMAT_A8B8G8R8_SINT_PACK32: VkFormat = 56;
pub const VkFormat_VK_FORMAT_A8B8G8R8_SRGB_PACK32: VkFormat = 57;
pub const VkFormat_VK_FORMAT_A2R10G10B10_UNORM_PACK32: VkFormat = 58;
pub const VkFormat_VK_FORMAT_A2R10G10B10_SNORM_PACK32: VkFormat = 59;
pub const VkFormat_VK_FORMAT_A2R10G10B10_USCALED_PACK32: VkFormat = 60;
pub const VkFormat_VK_FORMAT_A2R10G10B10_SSCALED_PACK32: VkFormat = 61;
pub const VkFormat_VK_FORMAT_A2R10G10B10_UINT_PACK32: VkFormat = 62;
pub const VkFormat_VK_FORMAT_A2R10G10B10_SINT_PACK32: VkFormat = 63;
pub const VkFormat_VK_FORMAT_A2B10G10R10_UNORM_PACK32: VkFormat = 64;
pub const VkFormat_VK_FORMAT_A2B10G10R10_SNORM_PACK32: VkFormat = 65;
pub const VkFormat_VK_FORMAT_A2B10G10R10_USCALED_PACK32: VkFormat = 66;
pub const VkFormat_VK_FORMAT_A2B10G10R10_SSCALED_PACK32: VkFormat = 67;
pub const VkFormat_VK_FORMAT_A2B10G10R10_UINT_PACK32: VkFormat = 68;
pub const VkFormat_VK_FORMAT_A2B10G10R10_SINT_PACK32: VkFormat = 69;
pub const VkFormat_VK_FORMAT_R16_UNORM: VkFormat = 70;
pub const VkFormat_VK_FORMAT_R16_SNORM: VkFormat = 71;
pub const VkFormat_VK_FORMAT_R16_USCALED: VkFormat = 72;
pub const VkFormat_VK_FORMAT_R16_SSCALED: VkFormat = 73;
pub const VkFormat_VK_FORMAT_R16_UINT: VkFormat = 74;
pub const VkFormat_VK_FORMAT_R16_SINT: VkFormat = 75;
pub const VkFormat_VK_FORMAT_R16_SFLOAT: VkFormat = 76;
pub const VkFormat_VK_FORMAT_R16G16_UNORM: VkFormat = 77;
pub const VkFormat_VK_FORMAT_R16G16_SNORM: VkFormat = 78;
pub const VkFormat_VK_FORMAT_R16G16_USCALED: VkFormat = 79;
pub const VkFormat_VK_FORMAT_R16G16_SSCALED: VkFormat = 80;
pub const VkFormat_VK_FORMAT_R16G16_UINT: VkFormat = 81;
pub const VkFormat_VK_FORMAT_R16G16_SINT: VkFormat = 82;
pub const VkFormat_VK_FORMAT_R16G16_SFLOAT: VkFormat = 83;
pub const VkFormat_VK_FORMAT_R16G16B16_UNORM: VkFormat = 84;
pub const VkFormat_VK_FORMAT_R16G16B16_SNORM: VkFormat = 85;
pub const VkFormat_VK_FORMAT_R16G16B16_USCALED: VkFormat = 86;
pub const VkFormat_VK_FORMAT_R16G16B16_SSCALED: VkFormat = 87;
pub const VkFormat_VK_FORMAT_R16G16B16_UINT: VkFormat = 88;
pub const VkFormat_VK_FORMAT_R16G16B16_SINT: VkFormat = 89;
pub const VkFormat_VK_FORMAT_R16G16B16_SFLOAT: VkFormat = 90;
pub const VkFormat_VK_FORMAT_R16G16B16A16_UNORM: VkFormat = 91;
pub const VkFormat_VK_FORMAT_R16G16B16A16_SNORM: VkFormat = 92;
pub const VkFormat_VK_FORMAT_R16G16B16A16_USCALED: VkFormat = 93;
pub const VkFormat_VK_FORMAT_R16G16B16A16_SSCALED: VkFormat = 94;
pub const VkFormat_VK_FORMAT_R16G16B16A16_UINT: VkFormat = 95;
pub const VkFormat_VK_FORMAT_R16G16B16A16_SINT: VkFormat = 96;
pub const VkFormat_VK_FORMAT_R16G16B16A16_SFLOAT: VkFormat = 97;
pub const VkFormat_VK_FORMAT_R32_UINT: VkFormat = 98;
pub const VkFormat_VK_FORMAT_R32_SINT: VkFormat = 99;
pub const VkFormat_VK_FORMAT_R32_SFLOAT: VkFormat = 100;
pub const VkFormat_VK_FORMAT_R32G32_UINT: VkFormat = 101;
pub const VkFormat_VK_FORMAT_R32G32_SINT: VkFormat = 102;
pub const VkFormat_VK_FORMAT_R32G32_SFLOAT: VkFormat = 103;
pub const VkFormat_VK_FORMAT_R32G32B32_UINT: VkFormat = 104;
pub const VkFormat_VK_FORMAT_R32G32B32_SINT: VkFormat = 105;
pub const VkFormat_VK_FORMAT_R32G32B32_SFLOAT: VkFormat = 106;
pub const VkFormat_VK_FORMAT_R32G32B32A32_UINT: VkFormat = 107;
pub const VkFormat_VK_FORMAT_R32G32B32A32_SINT: VkFormat = 108;
pub const VkFormat_VK_FORMAT_R32G32B32A32_SFLOAT: VkFormat = 109;
pub const VkFormat_VK_FORMAT_R64_UINT: VkFormat = 110;
pub const VkFormat_VK_FORMAT_R64_SINT: VkFormat = 111;
pub const VkFormat_VK_FORMAT_R64_SFLOAT: VkFormat = 112;
pub const VkFormat_VK_FORMAT_R64G64_UINT: VkFormat = 113;
pub const VkFormat_VK_FORMAT_R64G64_SINT: VkFormat = 114;
pub const VkFormat_VK_FORMAT_R64G64_SFLOAT: VkFormat = 115;
pub const VkFormat_VK_FORMAT_R64G64B64_UINT: VkFormat = 116;
pub const VkFormat_VK_FORMAT_R64G64B64_SINT: VkFormat = 117;
pub const VkFormat_VK_FORMAT_R64G64B64_SFLOAT: VkFormat = 118;
pub const VkFormat_VK_FORMAT_R64G64B64A64_UINT: VkFormat = 119;
pub const VkFormat_VK_FORMAT_R64G64B64A64_SINT: VkFormat = 120;
pub const VkFormat_VK_FORMAT_R64G64B64A64_SFLOAT: VkFormat = 121;
pub const VkFormat_VK_FORMAT_B10G11R11_UFLOAT_PACK32: VkFormat = 122;
pub const VkFormat_VK_FORMAT_E5B9G9R9_UFLOAT_PACK32: VkFormat = 123;
pub const VkFormat_VK_FORMAT_D16_UNORM: VkFormat = 124;
pub const VkFormat_VK_FORMAT_X8_D24_UNORM_PACK32: VkFormat = 125;
pub const VkFormat_VK_FORMAT_D32_SFLOAT: VkFormat = 126;
pub const VkFormat_VK_FORMAT_S8_UINT: VkFormat = 127;
pub const VkFormat_VK_FORMAT_D16_UNORM_S8_UINT: VkFormat = 128;
pub const VkFormat_VK_FORMAT_D24_UNORM_S8_UINT: VkFormat = 129;
pub const VkFormat_VK_FORMAT_D32_SFLOAT_S8_UINT: VkFormat = 130;
pub const VkFormat_VK_FORMAT_BC1_RGB_UNORM_BLOCK: VkFormat = 131;
pub const VkFormat_VK_FORMAT_BC1_RGB_SRGB_BLOCK: VkFormat = 132;
pub const VkFormat_VK_FORMAT_BC1_RGBA_UNORM_BLOCK: VkFormat = 133;
pub const VkFormat_VK_FORMAT_BC1_RGBA_SRGB_BLOCK: VkFormat = 134;
pub const VkFormat_VK_FORMAT_BC2_UNORM_BLOCK: VkFormat = 135;
pub const VkFormat_VK_FORMAT_BC2_SRGB_BLOCK: VkFormat = 136;
pub const VkFormat_VK_FORMAT_BC3_UNORM_BLOCK: VkFormat = 137;
pub const VkFormat_VK_FORMAT_BC3_SRGB_BLOCK: VkFormat = 138;
pub const VkFormat_VK_FORMAT_BC4_UNORM_BLOCK: VkFormat = 139;
pub const VkFormat_VK_FORMAT_BC4_SNORM_BLOCK: VkFormat = 140;
pub const VkFormat_VK_FORMAT_BC5_UNORM_BLOCK: VkFormat = 141;
pub const VkFormat_VK_FORMAT_BC5_SNORM_BLOCK: VkFormat = 142;
pub const VkFormat_VK_FORMAT_BC6H_UFLOAT_BLOCK: VkFormat = 143;
pub const VkFormat_VK_FORMAT_BC6H_SFLOAT_BLOCK: VkFormat = 144;
pub const VkFormat_VK_FORMAT_BC7_UNORM_BLOCK: VkFormat = 145;
pub const VkFormat_VK_FORMAT_BC7_SRGB_BLOCK: VkFormat = 146;
pub const VkFormat_VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK: VkFormat = 147;
pub const VkFormat_VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK: VkFormat = 148;
pub const VkFormat_VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK: VkFormat = 149;
pub const VkFormat_VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK: VkFormat = 150;
pub const VkFormat_VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK: VkFormat = 151;
pub const VkFormat_VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK: VkFormat = 152;
pub const VkFormat_VK_FORMAT_EAC_R11_UNORM_BLOCK: VkFormat = 153;
pub const VkFormat_VK_FORMAT_EAC_R11_SNORM_BLOCK: VkFormat = 154;
pub const VkFormat_VK_FORMAT_EAC_R11G11_UNORM_BLOCK: VkFormat = 155;
pub const VkFormat_VK_FORMAT_EAC_R11G11_SNORM_BLOCK: VkFormat = 156;
pub const VkFormat_VK_FORMAT_ASTC_4x4_UNORM_BLOCK: VkFormat = 157;
pub const VkFormat_VK_FORMAT_ASTC_4x4_SRGB_BLOCK: VkFormat = 158;
pub const VkFormat_VK_FORMAT_ASTC_5x4_UNORM_BLOCK: VkFormat = 159;
pub const VkFormat_VK_FORMAT_ASTC_5x4_SRGB_BLOCK: VkFormat = 160;
pub const VkFormat_VK_FORMAT_ASTC_5x5_UNORM_BLOCK: VkFormat = 161;
pub const VkFormat_VK_FORMAT_ASTC_5x5_SRGB_BLOCK: VkFormat = 162;
pub const VkFormat_VK_FORMAT_ASTC_6x5_UNORM_BLOCK: VkFormat = 163;
pub const VkFormat_VK_FORMAT_ASTC_6x5_SRGB_BLOCK: VkFormat = 164;
pub const VkFormat_VK_FORMAT_ASTC_6x6_UNORM_BLOCK: VkFormat = 165;
pub const VkFormat_VK_FORMAT_ASTC_6x6_SRGB_BLOCK: VkFormat = 166;
pub const VkFormat_VK_FORMAT_ASTC_8x5_UNORM_BLOCK: VkFormat = 167;
pub const VkFormat_VK_FORMAT_ASTC_8x5_SRGB_BLOCK: VkFormat = 168;
pub const VkFormat_VK_FORMAT_ASTC_8x6_UNORM_BLOCK: VkFormat = 169;
pub const VkFormat_VK_FORMAT_ASTC_8x6_SRGB_BLOCK: VkFormat = 170;
pub const VkFormat_VK_FORMAT_ASTC_8x8_UNORM_BLOCK: VkFormat = 171;
pub const VkFormat_VK_FORMAT_ASTC_8x8_SRGB_BLOCK: VkFormat = 172;
pub const VkFormat_VK_FORMAT_ASTC_10x5_UNORM_BLOCK: VkFormat = 173;
pub const VkFormat_VK_FORMAT_ASTC_10x5_SRGB_BLOCK: VkFormat = 174;
pub const VkFormat_VK_FORMAT_ASTC_10x6_UNORM_BLOCK: VkFormat = 175;
pub const VkFormat_VK_FORMAT_ASTC_10x6_SRGB_BLOCK: VkFormat = 176;
pub const VkFormat_VK_FORMAT_ASTC_10x8_UNORM_BLOCK: VkFormat = 177;
pub const VkFormat_VK_FORMAT_ASTC_10x8_SRGB_BLOCK: VkFormat = 178;
pub const VkFormat_VK_FORMAT_ASTC_10x10_UNORM_BLOCK: VkFormat = 179;
pub const VkFormat_VK_FORMAT_ASTC_10x10_SRGB_BLOCK: VkFormat = 180;
pub const VkFormat_VK_FORMAT_ASTC_12x10_UNORM_BLOCK: VkFormat = 181;
pub const VkFormat_VK_FORMAT_ASTC_12x10_SRGB_BLOCK: VkFormat = 182;
pub const VkFormat_VK_FORMAT_ASTC_12x12_UNORM_BLOCK: VkFormat = 183;
pub const VkFormat_VK_FORMAT_ASTC_12x12_SRGB_BLOCK: VkFormat = 184;
pub const VkFormat_VK_FORMAT_G8B8G8R8_422_UNORM: VkFormat = 1000156000;
pub const VkFormat_VK_FORMAT_B8G8R8G8_422_UNORM: VkFormat = 1000156001;
pub const VkFormat_VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM: VkFormat = 1000156002;
pub const VkFormat_VK_FORMAT_G8_B8R8_2PLANE_420_UNORM: VkFormat = 1000156003;
pub const VkFormat_VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM: VkFormat = 1000156004;
pub const VkFormat_VK_FORMAT_G8_B8R8_2PLANE_422_UNORM: VkFormat = 1000156005;
pub const VkFormat_VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM: VkFormat = 1000156006;
pub const VkFormat_VK_FORMAT_R10X6_UNORM_PACK16: VkFormat = 1000156007;
pub const VkFormat_VK_FORMAT_R10X6G10X6_UNORM_2PACK16: VkFormat = 1000156008;
pub const VkFormat_VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16: VkFormat = 1000156009;
pub const VkFormat_VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16: VkFormat = 1000156010;
pub const VkFormat_VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16: VkFormat = 1000156011;
pub const VkFormat_VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16: VkFormat = 1000156012;
pub const VkFormat_VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16: VkFormat = 1000156013;
pub const VkFormat_VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16: VkFormat = 1000156014;
pub const VkFormat_VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16: VkFormat = 1000156015;
pub const VkFormat_VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16: VkFormat = 1000156016;
pub const VkFormat_VK_FORMAT_R12X4_UNORM_PACK16: VkFormat = 1000156017;
pub const VkFormat_VK_FORMAT_R12X4G12X4_UNORM_2PACK16: VkFormat = 1000156018;
pub const VkFormat_VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16: VkFormat = 1000156019;
pub const VkFormat_VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16: VkFormat = 1000156020;
pub const VkFormat_VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16: VkFormat = 1000156021;
pub const VkFormat_VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16: VkFormat = 1000156022;
pub const VkFormat_VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16: VkFormat = 1000156023;
pub const VkFormat_VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16: VkFormat = 1000156024;
pub const VkFormat_VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16: VkFormat = 1000156025;
pub const VkFormat_VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16: VkFormat = 1000156026;
pub const VkFormat_VK_FORMAT_G16B16G16R16_422_UNORM: VkFormat = 1000156027;
pub const VkFormat_VK_FORMAT_B16G16R16G16_422_UNORM: VkFormat = 1000156028;
pub const VkFormat_VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM: VkFormat = 1000156029;
pub const VkFormat_VK_FORMAT_G16_B16R16_2PLANE_420_UNORM: VkFormat = 1000156030;
pub const VkFormat_VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM: VkFormat = 1000156031;
pub const VkFormat_VK_FORMAT_G16_B16R16_2PLANE_422_UNORM: VkFormat = 1000156032;
pub const VkFormat_VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM: VkFormat = 1000156033;
pub const VkFormat_VK_FORMAT_G8_B8R8_2PLANE_444_UNORM: VkFormat = 1000330000;
pub const VkFormat_VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16: VkFormat = 1000330001;
pub const VkFormat_VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16: VkFormat = 1000330002;
pub const VkFormat_VK_FORMAT_G16_B16R16_2PLANE_444_UNORM: VkFormat = 1000330003;
pub const VkFormat_VK_FORMAT_A4R4G4B4_UNORM_PACK16: VkFormat = 1000340000;
pub const VkFormat_VK_FORMAT_A4B4G4R4_UNORM_PACK16: VkFormat = 1000340001;
pub const VkFormat_VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK: VkFormat = 1000066000;
pub const VkFormat_VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK: VkFormat = 1000066001;
pub const VkFormat_VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK: VkFormat = 1000066002;
pub const VkFormat_VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK: VkFormat = 1000066003;
pub const VkFormat_VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK: VkFormat = 1000066004;
pub const VkFormat_VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK: VkFormat = 1000066005;
pub const VkFormat_VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK: VkFormat = 1000066006;
pub const VkFormat_VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK: VkFormat = 1000066007;
pub const VkFormat_VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK: VkFormat = 1000066008;
pub const VkFormat_VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK: VkFormat = 1000066009;
pub const VkFormat_VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK: VkFormat = 1000066010;
pub const VkFormat_VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK: VkFormat = 1000066011;
pub const VkFormat_VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK: VkFormat = 1000066012;
pub const VkFormat_VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK: VkFormat = 1000066013;
pub const VkFormat_VK_FORMAT_A1B5G5R5_UNORM_PACK16: VkFormat = 1000470000;
pub const VkFormat_VK_FORMAT_A8_UNORM: VkFormat = 1000470001;
pub const VkFormat_VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG: VkFormat = 1000054000;
pub const VkFormat_VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG: VkFormat = 1000054001;
pub const VkFormat_VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG: VkFormat = 1000054002;
pub const VkFormat_VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG: VkFormat = 1000054003;
pub const VkFormat_VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG: VkFormat = 1000054004;
pub const VkFormat_VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG: VkFormat = 1000054005;
pub const VkFormat_VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG: VkFormat = 1000054006;
pub const VkFormat_VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG: VkFormat = 1000054007;
pub const VkFormat_VK_FORMAT_R16G16_SFIXED5_NV: VkFormat = 1000464000;
pub const VkFormat_VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT: VkFormat = 1000066000;
pub const VkFormat_VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK_EXT: VkFormat = 1000066001;
pub const VkFormat_VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK_EXT: VkFormat = 1000066002;
pub const VkFormat_VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK_EXT: VkFormat = 1000066003;
pub const VkFormat_VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK_EXT: VkFormat = 1000066004;
pub const VkFormat_VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK_EXT: VkFormat = 1000066005;
pub const VkFormat_VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK_EXT: VkFormat = 1000066006;
pub const VkFormat_VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK_EXT: VkFormat = 1000066007;
pub const VkFormat_VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK_EXT: VkFormat = 1000066008;
pub const VkFormat_VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK_EXT: VkFormat = 1000066009;
pub const VkFormat_VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK_EXT: VkFormat = 1000066010;
pub const VkFormat_VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK_EXT: VkFormat = 1000066011;
pub const VkFormat_VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK_EXT: VkFormat = 1000066012;
pub const VkFormat_VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK_EXT: VkFormat = 1000066013;
pub const VkFormat_VK_FORMAT_G8B8G8R8_422_UNORM_KHR: VkFormat = 1000156000;
pub const VkFormat_VK_FORMAT_B8G8R8G8_422_UNORM_KHR: VkFormat = 1000156001;
pub const VkFormat_VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM_KHR: VkFormat = 1000156002;
pub const VkFormat_VK_FORMAT_G8_B8R8_2PLANE_420_UNORM_KHR: VkFormat = 1000156003;
pub const VkFormat_VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM_KHR: VkFormat = 1000156004;
pub const VkFormat_VK_FORMAT_G8_B8R8_2PLANE_422_UNORM_KHR: VkFormat = 1000156005;
pub const VkFormat_VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM_KHR: VkFormat = 1000156006;
pub const VkFormat_VK_FORMAT_R10X6_UNORM_PACK16_KHR: VkFormat = 1000156007;
pub const VkFormat_VK_FORMAT_R10X6G10X6_UNORM_2PACK16_KHR: VkFormat = 1000156008;
pub const VkFormat_VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR: VkFormat = 1000156009;
pub const VkFormat_VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR: VkFormat = 1000156010;
pub const VkFormat_VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR: VkFormat = 1000156011;
pub const VkFormat_VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_KHR: VkFormat = 1000156012;
pub const VkFormat_VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_KHR: VkFormat = 1000156013;
pub const VkFormat_VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16_KHR: VkFormat = 1000156014;
pub const VkFormat_VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16_KHR: VkFormat = 1000156015;
pub const VkFormat_VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16_KHR: VkFormat = 1000156016;
pub const VkFormat_VK_FORMAT_R12X4_UNORM_PACK16_KHR: VkFormat = 1000156017;
pub const VkFormat_VK_FORMAT_R12X4G12X4_UNORM_2PACK16_KHR: VkFormat = 1000156018;
pub const VkFormat_VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR: VkFormat = 1000156019;
pub const VkFormat_VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR: VkFormat = 1000156020;
pub const VkFormat_VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR: VkFormat = 1000156021;
pub const VkFormat_VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_KHR: VkFormat = 1000156022;
pub const VkFormat_VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_KHR: VkFormat = 1000156023;
pub const VkFormat_VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16_KHR: VkFormat = 1000156024;
pub const VkFormat_VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16_KHR: VkFormat = 1000156025;
pub const VkFormat_VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16_KHR: VkFormat = 1000156026;
pub const VkFormat_VK_FORMAT_G16B16G16R16_422_UNORM_KHR: VkFormat = 1000156027;
pub const VkFormat_VK_FORMAT_B16G16R16G16_422_UNORM_KHR: VkFormat = 1000156028;
pub const VkFormat_VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM_KHR: VkFormat = 1000156029;
pub const VkFormat_VK_FORMAT_G16_B16R16_2PLANE_420_UNORM_KHR: VkFormat = 1000156030;
pub const VkFormat_VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM_KHR: VkFormat = 1000156031;
pub const VkFormat_VK_FORMAT_G16_B16R16_2PLANE_422_UNORM_KHR: VkFormat = 1000156032;
pub const VkFormat_VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM_KHR: VkFormat = 1000156033;
pub const VkFormat_VK_FORMAT_G8_B8R8_2PLANE_444_UNORM_EXT: VkFormat = 1000330000;
pub const VkFormat_VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16_EXT: VkFormat = 1000330001;
pub const VkFormat_VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16_EXT: VkFormat = 1000330002;
pub const VkFormat_VK_FORMAT_G16_B16R16_2PLANE_444_UNORM_EXT: VkFormat = 1000330003;
pub const VkFormat_VK_FORMAT_A4R4G4B4_UNORM_PACK16_EXT: VkFormat = 1000340000;
pub const VkFormat_VK_FORMAT_A4B4G4R4_UNORM_PACK16_EXT: VkFormat = 1000340001;
#[doc = " VK_FORMAT_R16G16_S10_5_NV is a deprecated alias"]
pub const VkFormat_VK_FORMAT_R16G16_S10_5_NV: VkFormat = 1000464000;
#[doc = " VK_FORMAT_R16G16_S10_5_NV is a deprecated alias"]
pub const VkFormat_VK_FORMAT_A1B5G5R5_UNORM_PACK16_KHR: VkFormat = 1000470000;
#[doc = " VK_FORMAT_R16G16_S10_5_NV is a deprecated alias"]
pub const VkFormat_VK_FORMAT_A8_UNORM_KHR: VkFormat = 1000470001;
#[doc = " VK_FORMAT_R16G16_S10_5_NV is a deprecated alias"]
pub const VkFormat_VK_FORMAT_MAX_ENUM: VkFormat = 2147483647;
pub const VkImageTiling_VK_IMAGE_TILING_OPTIMAL: VkImageTiling = 0;
pub const VkImageTiling_VK_IMAGE_TILING_LINEAR: VkImageTiling = 1;
pub const VkImageTiling_VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT: VkImageTiling = 1000158000;
pub const VkImageTiling_VK_IMAGE_TILING_MAX_ENUM: VkImageTiling = 2147483647;
pub const VkImageType_VK_IMAGE_TYPE_1D: VkImageType = 0;
pub const VkImageType_VK_IMAGE_TYPE_2D: VkImageType = 1;
pub const VkImageType_VK_IMAGE_TYPE_3D: VkImageType = 2;
pub const VkImageType_VK_IMAGE_TYPE_MAX_ENUM: VkImageType = 2147483647;
pub const VkPhysicalDeviceType_VK_PHYSICAL_DEVICE_TYPE_OTHER: VkPhysicalDeviceType = 0;
pub const VkPhysicalDeviceType_VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU: VkPhysicalDeviceType = 1;
pub const VkPhysicalDeviceType_VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU: VkPhysicalDeviceType = 2;
pub const VkPhysicalDeviceType_VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU: VkPhysicalDeviceType = 3;
pub const VkPhysicalDeviceType_VK_PHYSICAL_DEVICE_TYPE_CPU: VkPhysicalDeviceType = 4;
pub const VkPhysicalDeviceType_VK_PHYSICAL_DEVICE_TYPE_MAX_ENUM: VkPhysicalDeviceType = 2147483647;
pub const VkQueryType_VK_QUERY_TYPE_OCCLUSION: VkQueryType = 0;
pub const VkQueryType_VK_QUERY_TYPE_PIPELINE_STATISTICS: VkQueryType = 1;
pub const VkQueryType_VK_QUERY_TYPE_TIMESTAMP: VkQueryType = 2;
pub const VkQueryType_VK_QUERY_TYPE_RESULT_STATUS_ONLY_KHR: VkQueryType = 1000023000;
pub const VkQueryType_VK_QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT: VkQueryType = 1000028004;
pub const VkQueryType_VK_QUERY_TYPE_PERFORMANCE_QUERY_KHR: VkQueryType = 1000116000;
pub const VkQueryType_VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_KHR: VkQueryType =
    1000150000;
pub const VkQueryType_VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_SIZE_KHR: VkQueryType =
    1000150001;
pub const VkQueryType_VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_NV: VkQueryType =
    1000165000;
pub const VkQueryType_VK_QUERY_TYPE_PERFORMANCE_QUERY_INTEL: VkQueryType = 1000210000;
pub const VkQueryType_VK_QUERY_TYPE_VIDEO_ENCODE_FEEDBACK_KHR: VkQueryType = 1000299000;
pub const VkQueryType_VK_QUERY_TYPE_MESH_PRIMITIVES_GENERATED_EXT: VkQueryType = 1000328000;
pub const VkQueryType_VK_QUERY_TYPE_PRIMITIVES_GENERATED_EXT: VkQueryType = 1000382000;
pub const VkQueryType_VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_BOTTOM_LEVEL_POINTERS_KHR : VkQueryType = 1000386000 ;
pub const VkQueryType_VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SIZE_KHR: VkQueryType = 1000386001;
pub const VkQueryType_VK_QUERY_TYPE_MICROMAP_SERIALIZATION_SIZE_EXT: VkQueryType = 1000396000;
pub const VkQueryType_VK_QUERY_TYPE_MICROMAP_COMPACTED_SIZE_EXT: VkQueryType = 1000396001;
pub const VkQueryType_VK_QUERY_TYPE_MAX_ENUM: VkQueryType = 2147483647;
pub const VkSharingMode_VK_SHARING_MODE_EXCLUSIVE: VkSharingMode = 0;
pub const VkSharingMode_VK_SHARING_MODE_CONCURRENT: VkSharingMode = 1;
pub const VkSharingMode_VK_SHARING_MODE_MAX_ENUM: VkSharingMode = 2147483647;
pub const VkComponentSwizzle_VK_COMPONENT_SWIZZLE_IDENTITY: VkComponentSwizzle = 0;
pub const VkComponentSwizzle_VK_COMPONENT_SWIZZLE_ZERO: VkComponentSwizzle = 1;
pub const VkComponentSwizzle_VK_COMPONENT_SWIZZLE_ONE: VkComponentSwizzle = 2;
pub const VkComponentSwizzle_VK_COMPONENT_SWIZZLE_R: VkComponentSwizzle = 3;
pub const VkComponentSwizzle_VK_COMPONENT_SWIZZLE_G: VkComponentSwizzle = 4;
pub const VkComponentSwizzle_VK_COMPONENT_SWIZZLE_B: VkComponentSwizzle = 5;
pub const VkComponentSwizzle_VK_COMPONENT_SWIZZLE_A: VkComponentSwizzle = 6;
pub const VkComponentSwizzle_VK_COMPONENT_SWIZZLE_MAX_ENUM: VkComponentSwizzle = 2147483647;
pub const VkImageViewType_VK_IMAGE_VIEW_TYPE_1D: VkImageViewType = 0;
pub const VkImageViewType_VK_IMAGE_VIEW_TYPE_2D: VkImageViewType = 1;
pub const VkImageViewType_VK_IMAGE_VIEW_TYPE_3D: VkImageViewType = 2;
pub const VkImageViewType_VK_IMAGE_VIEW_TYPE_CUBE: VkImageViewType = 3;
pub const VkImageViewType_VK_IMAGE_VIEW_TYPE_1D_ARRAY: VkImageViewType = 4;
pub const VkImageViewType_VK_IMAGE_VIEW_TYPE_2D_ARRAY: VkImageViewType = 5;
pub const VkImageViewType_VK_IMAGE_VIEW_TYPE_CUBE_ARRAY: VkImageViewType = 6;
pub const VkImageViewType_VK_IMAGE_VIEW_TYPE_MAX_ENUM: VkImageViewType = 2147483647;
pub const VkBlendFactor_VK_BLEND_FACTOR_ZERO: VkBlendFactor = 0;
pub const VkBlendFactor_VK_BLEND_FACTOR_ONE: VkBlendFactor = 1;
pub const VkBlendFactor_VK_BLEND_FACTOR_SRC_COLOR: VkBlendFactor = 2;
pub const VkBlendFactor_VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR: VkBlendFactor = 3;
pub const VkBlendFactor_VK_BLEND_FACTOR_DST_COLOR: VkBlendFactor = 4;
pub const VkBlendFactor_VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR: VkBlendFactor = 5;
pub const VkBlendFactor_VK_BLEND_FACTOR_SRC_ALPHA: VkBlendFactor = 6;
pub const VkBlendFactor_VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA: VkBlendFactor = 7;
pub const VkBlendFactor_VK_BLEND_FACTOR_DST_ALPHA: VkBlendFactor = 8;
pub const VkBlendFactor_VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA: VkBlendFactor = 9;
pub const VkBlendFactor_VK_BLEND_FACTOR_CONSTANT_COLOR: VkBlendFactor = 10;
pub const VkBlendFactor_VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR: VkBlendFactor = 11;
pub const VkBlendFactor_VK_BLEND_FACTOR_CONSTANT_ALPHA: VkBlendFactor = 12;
pub const VkBlendFactor_VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA: VkBlendFactor = 13;
pub const VkBlendFactor_VK_BLEND_FACTOR_SRC_ALPHA_SATURATE: VkBlendFactor = 14;
pub const VkBlendFactor_VK_BLEND_FACTOR_SRC1_COLOR: VkBlendFactor = 15;
pub const VkBlendFactor_VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR: VkBlendFactor = 16;
pub const VkBlendFactor_VK_BLEND_FACTOR_SRC1_ALPHA: VkBlendFactor = 17;
pub const VkBlendFactor_VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA: VkBlendFactor = 18;
pub const VkBlendFactor_VK_BLEND_FACTOR_MAX_ENUM: VkBlendFactor = 2147483647;
pub const VkBlendOp_VK_BLEND_OP_ADD: VkBlendOp = 0;
pub const VkBlendOp_VK_BLEND_OP_SUBTRACT: VkBlendOp = 1;
pub const VkBlendOp_VK_BLEND_OP_REVERSE_SUBTRACT: VkBlendOp = 2;
pub const VkBlendOp_VK_BLEND_OP_MIN: VkBlendOp = 3;
pub const VkBlendOp_VK_BLEND_OP_MAX: VkBlendOp = 4;
pub const VkBlendOp_VK_BLEND_OP_ZERO_EXT: VkBlendOp = 1000148000;
pub const VkBlendOp_VK_BLEND_OP_SRC_EXT: VkBlendOp = 1000148001;
pub const VkBlendOp_VK_BLEND_OP_DST_EXT: VkBlendOp = 1000148002;
pub const VkBlendOp_VK_BLEND_OP_SRC_OVER_EXT: VkBlendOp = 1000148003;
pub const VkBlendOp_VK_BLEND_OP_DST_OVER_EXT: VkBlendOp = 1000148004;
pub const VkBlendOp_VK_BLEND_OP_SRC_IN_EXT: VkBlendOp = 1000148005;
pub const VkBlendOp_VK_BLEND_OP_DST_IN_EXT: VkBlendOp = 1000148006;
pub const VkBlendOp_VK_BLEND_OP_SRC_OUT_EXT: VkBlendOp = 1000148007;
pub const VkBlendOp_VK_BLEND_OP_DST_OUT_EXT: VkBlendOp = 1000148008;
pub const VkBlendOp_VK_BLEND_OP_SRC_ATOP_EXT: VkBlendOp = 1000148009;
pub const VkBlendOp_VK_BLEND_OP_DST_ATOP_EXT: VkBlendOp = 1000148010;
pub const VkBlendOp_VK_BLEND_OP_XOR_EXT: VkBlendOp = 1000148011;
pub const VkBlendOp_VK_BLEND_OP_MULTIPLY_EXT: VkBlendOp = 1000148012;
pub const VkBlendOp_VK_BLEND_OP_SCREEN_EXT: VkBlendOp = 1000148013;
pub const VkBlendOp_VK_BLEND_OP_OVERLAY_EXT: VkBlendOp = 1000148014;
pub const VkBlendOp_VK_BLEND_OP_DARKEN_EXT: VkBlendOp = 1000148015;
pub const VkBlendOp_VK_BLEND_OP_LIGHTEN_EXT: VkBlendOp = 1000148016;
pub const VkBlendOp_VK_BLEND_OP_COLORDODGE_EXT: VkBlendOp = 1000148017;
pub const VkBlendOp_VK_BLEND_OP_COLORBURN_EXT: VkBlendOp = 1000148018;
pub const VkBlendOp_VK_BLEND_OP_HARDLIGHT_EXT: VkBlendOp = 1000148019;
pub const VkBlendOp_VK_BLEND_OP_SOFTLIGHT_EXT: VkBlendOp = 1000148020;
pub const VkBlendOp_VK_BLEND_OP_DIFFERENCE_EXT: VkBlendOp = 1000148021;
pub const VkBlendOp_VK_BLEND_OP_EXCLUSION_EXT: VkBlendOp = 1000148022;
pub const VkBlendOp_VK_BLEND_OP_INVERT_EXT: VkBlendOp = 1000148023;
pub const VkBlendOp_VK_BLEND_OP_INVERT_RGB_EXT: VkBlendOp = 1000148024;
pub const VkBlendOp_VK_BLEND_OP_LINEARDODGE_EXT: VkBlendOp = 1000148025;
pub const VkBlendOp_VK_BLEND_OP_LINEARBURN_EXT: VkBlendOp = 1000148026;
pub const VkBlendOp_VK_BLEND_OP_VIVIDLIGHT_EXT: VkBlendOp = 1000148027;
pub const VkBlendOp_VK_BLEND_OP_LINEARLIGHT_EXT: VkBlendOp = 1000148028;
pub const VkBlendOp_VK_BLEND_OP_PINLIGHT_EXT: VkBlendOp = 1000148029;
pub const VkBlendOp_VK_BLEND_OP_HARDMIX_EXT: VkBlendOp = 1000148030;
pub const VkBlendOp_VK_BLEND_OP_HSL_HUE_EXT: VkBlendOp = 1000148031;
pub const VkBlendOp_VK_BLEND_OP_HSL_SATURATION_EXT: VkBlendOp = 1000148032;
pub const VkBlendOp_VK_BLEND_OP_HSL_COLOR_EXT: VkBlendOp = 1000148033;
pub const VkBlendOp_VK_BLEND_OP_HSL_LUMINOSITY_EXT: VkBlendOp = 1000148034;
pub const VkBlendOp_VK_BLEND_OP_PLUS_EXT: VkBlendOp = 1000148035;
pub const VkBlendOp_VK_BLEND_OP_PLUS_CLAMPED_EXT: VkBlendOp = 1000148036;
pub const VkBlendOp_VK_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT: VkBlendOp = 1000148037;
pub const VkBlendOp_VK_BLEND_OP_PLUS_DARKER_EXT: VkBlendOp = 1000148038;
pub const VkBlendOp_VK_BLEND_OP_MINUS_EXT: VkBlendOp = 1000148039;
pub const VkBlendOp_VK_BLEND_OP_MINUS_CLAMPED_EXT: VkBlendOp = 1000148040;
pub const VkBlendOp_VK_BLEND_OP_CONTRAST_EXT: VkBlendOp = 1000148041;
pub const VkBlendOp_VK_BLEND_OP_INVERT_OVG_EXT: VkBlendOp = 1000148042;
pub const VkBlendOp_VK_BLEND_OP_RED_EXT: VkBlendOp = 1000148043;
pub const VkBlendOp_VK_BLEND_OP_GREEN_EXT: VkBlendOp = 1000148044;
pub const VkBlendOp_VK_BLEND_OP_BLUE_EXT: VkBlendOp = 1000148045;
pub const VkBlendOp_VK_BLEND_OP_MAX_ENUM: VkBlendOp = 2147483647;
pub const VkCompareOp_VK_COMPARE_OP_NEVER: VkCompareOp = 0;
pub const VkCompareOp_VK_COMPARE_OP_LESS: VkCompareOp = 1;
pub const VkCompareOp_VK_COMPARE_OP_EQUAL: VkCompareOp = 2;
pub const VkCompareOp_VK_COMPARE_OP_LESS_OR_EQUAL: VkCompareOp = 3;
pub const VkCompareOp_VK_COMPARE_OP_GREATER: VkCompareOp = 4;
pub const VkCompareOp_VK_COMPARE_OP_NOT_EQUAL: VkCompareOp = 5;
pub const VkCompareOp_VK_COMPARE_OP_GREATER_OR_EQUAL: VkCompareOp = 6;
pub const VkCompareOp_VK_COMPARE_OP_ALWAYS: VkCompareOp = 7;
pub const VkCompareOp_VK_COMPARE_OP_MAX_ENUM: VkCompareOp = 2147483647;
pub const VkDynamicState_VK_DYNAMIC_STATE_VIEWPORT: VkDynamicState = 0;
pub const VkDynamicState_VK_DYNAMIC_STATE_SCISSOR: VkDynamicState = 1;
pub const VkDynamicState_VK_DYNAMIC_STATE_LINE_WIDTH: VkDynamicState = 2;
pub const VkDynamicState_VK_DYNAMIC_STATE_DEPTH_BIAS: VkDynamicState = 3;
pub const VkDynamicState_VK_DYNAMIC_STATE_BLEND_CONSTANTS: VkDynamicState = 4;
pub const VkDynamicState_VK_DYNAMIC_STATE_DEPTH_BOUNDS: VkDynamicState = 5;
pub const VkDynamicState_VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK: VkDynamicState = 6;
pub const VkDynamicState_VK_DYNAMIC_STATE_STENCIL_WRITE_MASK: VkDynamicState = 7;
pub const VkDynamicState_VK_DYNAMIC_STATE_STENCIL_REFERENCE: VkDynamicState = 8;
pub const VkDynamicState_VK_DYNAMIC_STATE_CULL_MODE: VkDynamicState = 1000267000;
pub const VkDynamicState_VK_DYNAMIC_STATE_FRONT_FACE: VkDynamicState = 1000267001;
pub const VkDynamicState_VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY: VkDynamicState = 1000267002;
pub const VkDynamicState_VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT: VkDynamicState = 1000267003;
pub const VkDynamicState_VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT: VkDynamicState = 1000267004;
pub const VkDynamicState_VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE: VkDynamicState = 1000267005;
pub const VkDynamicState_VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE: VkDynamicState = 1000267006;
pub const VkDynamicState_VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE: VkDynamicState = 1000267007;
pub const VkDynamicState_VK_DYNAMIC_STATE_DEPTH_COMPARE_OP: VkDynamicState = 1000267008;
pub const VkDynamicState_VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE: VkDynamicState = 1000267009;
pub const VkDynamicState_VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE: VkDynamicState = 1000267010;
pub const VkDynamicState_VK_DYNAMIC_STATE_STENCIL_OP: VkDynamicState = 1000267011;
pub const VkDynamicState_VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE: VkDynamicState = 1000377001;
pub const VkDynamicState_VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE: VkDynamicState = 1000377002;
pub const VkDynamicState_VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE: VkDynamicState = 1000377004;
pub const VkDynamicState_VK_DYNAMIC_STATE_LINE_STIPPLE: VkDynamicState = 1000259000;
pub const VkDynamicState_VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_NV: VkDynamicState = 1000087000;
pub const VkDynamicState_VK_DYNAMIC_STATE_DISCARD_RECTANGLE_EXT: VkDynamicState = 1000099000;
pub const VkDynamicState_VK_DYNAMIC_STATE_DISCARD_RECTANGLE_ENABLE_EXT: VkDynamicState = 1000099001;
pub const VkDynamicState_VK_DYNAMIC_STATE_DISCARD_RECTANGLE_MODE_EXT: VkDynamicState = 1000099002;
pub const VkDynamicState_VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT: VkDynamicState = 1000143000;
pub const VkDynamicState_VK_DYNAMIC_STATE_RAY_TRACING_PIPELINE_STACK_SIZE_KHR: VkDynamicState =
    1000347000;
pub const VkDynamicState_VK_DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV: VkDynamicState =
    1000164004;
pub const VkDynamicState_VK_DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV: VkDynamicState =
    1000164006;
pub const VkDynamicState_VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_ENABLE_NV: VkDynamicState = 1000205000;
pub const VkDynamicState_VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV: VkDynamicState = 1000205001;
pub const VkDynamicState_VK_DYNAMIC_STATE_FRAGMENT_SHADING_RATE_KHR: VkDynamicState = 1000226000;
pub const VkDynamicState_VK_DYNAMIC_STATE_VERTEX_INPUT_EXT: VkDynamicState = 1000352000;
pub const VkDynamicState_VK_DYNAMIC_STATE_PATCH_CONTROL_POINTS_EXT: VkDynamicState = 1000377000;
pub const VkDynamicState_VK_DYNAMIC_STATE_LOGIC_OP_EXT: VkDynamicState = 1000377003;
pub const VkDynamicState_VK_DYNAMIC_STATE_COLOR_WRITE_ENABLE_EXT: VkDynamicState = 1000381000;
pub const VkDynamicState_VK_DYNAMIC_STATE_DEPTH_CLAMP_ENABLE_EXT: VkDynamicState = 1000455003;
pub const VkDynamicState_VK_DYNAMIC_STATE_POLYGON_MODE_EXT: VkDynamicState = 1000455004;
pub const VkDynamicState_VK_DYNAMIC_STATE_RASTERIZATION_SAMPLES_EXT: VkDynamicState = 1000455005;
pub const VkDynamicState_VK_DYNAMIC_STATE_SAMPLE_MASK_EXT: VkDynamicState = 1000455006;
pub const VkDynamicState_VK_DYNAMIC_STATE_ALPHA_TO_COVERAGE_ENABLE_EXT: VkDynamicState = 1000455007;
pub const VkDynamicState_VK_DYNAMIC_STATE_ALPHA_TO_ONE_ENABLE_EXT: VkDynamicState = 1000455008;
pub const VkDynamicState_VK_DYNAMIC_STATE_LOGIC_OP_ENABLE_EXT: VkDynamicState = 1000455009;
pub const VkDynamicState_VK_DYNAMIC_STATE_COLOR_BLEND_ENABLE_EXT: VkDynamicState = 1000455010;
pub const VkDynamicState_VK_DYNAMIC_STATE_COLOR_BLEND_EQUATION_EXT: VkDynamicState = 1000455011;
pub const VkDynamicState_VK_DYNAMIC_STATE_COLOR_WRITE_MASK_EXT: VkDynamicState = 1000455012;
pub const VkDynamicState_VK_DYNAMIC_STATE_TESSELLATION_DOMAIN_ORIGIN_EXT: VkDynamicState =
    1000455002;
pub const VkDynamicState_VK_DYNAMIC_STATE_RASTERIZATION_STREAM_EXT: VkDynamicState = 1000455013;
pub const VkDynamicState_VK_DYNAMIC_STATE_CONSERVATIVE_RASTERIZATION_MODE_EXT: VkDynamicState =
    1000455014;
pub const VkDynamicState_VK_DYNAMIC_STATE_EXTRA_PRIMITIVE_OVERESTIMATION_SIZE_EXT: VkDynamicState =
    1000455015;
pub const VkDynamicState_VK_DYNAMIC_STATE_DEPTH_CLIP_ENABLE_EXT: VkDynamicState = 1000455016;
pub const VkDynamicState_VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_ENABLE_EXT: VkDynamicState = 1000455017;
pub const VkDynamicState_VK_DYNAMIC_STATE_COLOR_BLEND_ADVANCED_EXT: VkDynamicState = 1000455018;
pub const VkDynamicState_VK_DYNAMIC_STATE_PROVOKING_VERTEX_MODE_EXT: VkDynamicState = 1000455019;
pub const VkDynamicState_VK_DYNAMIC_STATE_LINE_RASTERIZATION_MODE_EXT: VkDynamicState = 1000455020;
pub const VkDynamicState_VK_DYNAMIC_STATE_LINE_STIPPLE_ENABLE_EXT: VkDynamicState = 1000455021;
pub const VkDynamicState_VK_DYNAMIC_STATE_DEPTH_CLIP_NEGATIVE_ONE_TO_ONE_EXT: VkDynamicState =
    1000455022;
pub const VkDynamicState_VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_ENABLE_NV: VkDynamicState = 1000455023;
pub const VkDynamicState_VK_DYNAMIC_STATE_VIEWPORT_SWIZZLE_NV: VkDynamicState = 1000455024;
pub const VkDynamicState_VK_DYNAMIC_STATE_COVERAGE_TO_COLOR_ENABLE_NV: VkDynamicState = 1000455025;
pub const VkDynamicState_VK_DYNAMIC_STATE_COVERAGE_TO_COLOR_LOCATION_NV: VkDynamicState =
    1000455026;
pub const VkDynamicState_VK_DYNAMIC_STATE_COVERAGE_MODULATION_MODE_NV: VkDynamicState = 1000455027;
pub const VkDynamicState_VK_DYNAMIC_STATE_COVERAGE_MODULATION_TABLE_ENABLE_NV: VkDynamicState =
    1000455028;
pub const VkDynamicState_VK_DYNAMIC_STATE_COVERAGE_MODULATION_TABLE_NV: VkDynamicState = 1000455029;
pub const VkDynamicState_VK_DYNAMIC_STATE_SHADING_RATE_IMAGE_ENABLE_NV: VkDynamicState = 1000455030;
pub const VkDynamicState_VK_DYNAMIC_STATE_REPRESENTATIVE_FRAGMENT_TEST_ENABLE_NV: VkDynamicState =
    1000455031;
pub const VkDynamicState_VK_DYNAMIC_STATE_COVERAGE_REDUCTION_MODE_NV: VkDynamicState = 1000455032;
pub const VkDynamicState_VK_DYNAMIC_STATE_ATTACHMENT_FEEDBACK_LOOP_ENABLE_EXT: VkDynamicState =
    1000524000;
pub const VkDynamicState_VK_DYNAMIC_STATE_DEPTH_CLAMP_RANGE_EXT: VkDynamicState = 1000582000;
pub const VkDynamicState_VK_DYNAMIC_STATE_LINE_STIPPLE_EXT: VkDynamicState = 1000259000;
pub const VkDynamicState_VK_DYNAMIC_STATE_CULL_MODE_EXT: VkDynamicState = 1000267000;
pub const VkDynamicState_VK_DYNAMIC_STATE_FRONT_FACE_EXT: VkDynamicState = 1000267001;
pub const VkDynamicState_VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY_EXT: VkDynamicState = 1000267002;
pub const VkDynamicState_VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT_EXT: VkDynamicState = 1000267003;
pub const VkDynamicState_VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT_EXT: VkDynamicState = 1000267004;
pub const VkDynamicState_VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE_EXT: VkDynamicState =
    1000267005;
pub const VkDynamicState_VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE_EXT: VkDynamicState = 1000267006;
pub const VkDynamicState_VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE_EXT: VkDynamicState = 1000267007;
pub const VkDynamicState_VK_DYNAMIC_STATE_DEPTH_COMPARE_OP_EXT: VkDynamicState = 1000267008;
pub const VkDynamicState_VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE_EXT: VkDynamicState = 1000267009;
pub const VkDynamicState_VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE_EXT: VkDynamicState = 1000267010;
pub const VkDynamicState_VK_DYNAMIC_STATE_STENCIL_OP_EXT: VkDynamicState = 1000267011;
pub const VkDynamicState_VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE_EXT: VkDynamicState =
    1000377001;
pub const VkDynamicState_VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE_EXT: VkDynamicState = 1000377002;
pub const VkDynamicState_VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE_EXT: VkDynamicState = 1000377004;
pub const VkDynamicState_VK_DYNAMIC_STATE_LINE_STIPPLE_KHR: VkDynamicState = 1000259000;
pub const VkDynamicState_VK_DYNAMIC_STATE_MAX_ENUM: VkDynamicState = 2147483647;
pub const VkFrontFace_VK_FRONT_FACE_COUNTER_CLOCKWISE: VkFrontFace = 0;
pub const VkFrontFace_VK_FRONT_FACE_CLOCKWISE: VkFrontFace = 1;
pub const VkFrontFace_VK_FRONT_FACE_MAX_ENUM: VkFrontFace = 2147483647;
pub const VkVertexInputRate_VK_VERTEX_INPUT_RATE_VERTEX: VkVertexInputRate = 0;
pub const VkVertexInputRate_VK_VERTEX_INPUT_RATE_INSTANCE: VkVertexInputRate = 1;
pub const VkVertexInputRate_VK_VERTEX_INPUT_RATE_MAX_ENUM: VkVertexInputRate = 2147483647;
pub const VkPrimitiveTopology_VK_PRIMITIVE_TOPOLOGY_POINT_LIST: VkPrimitiveTopology = 0;
pub const VkPrimitiveTopology_VK_PRIMITIVE_TOPOLOGY_LINE_LIST: VkPrimitiveTopology = 1;
pub const VkPrimitiveTopology_VK_PRIMITIVE_TOPOLOGY_LINE_STRIP: VkPrimitiveTopology = 2;
pub const VkPrimitiveTopology_VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST: VkPrimitiveTopology = 3;
pub const VkPrimitiveTopology_VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP: VkPrimitiveTopology = 4;
pub const VkPrimitiveTopology_VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN: VkPrimitiveTopology = 5;
pub const VkPrimitiveTopology_VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY: VkPrimitiveTopology =
    6;
pub const VkPrimitiveTopology_VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY: VkPrimitiveTopology =
    7;
pub const VkPrimitiveTopology_VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY:
    VkPrimitiveTopology = 8;
pub const VkPrimitiveTopology_VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY:
    VkPrimitiveTopology = 9;
pub const VkPrimitiveTopology_VK_PRIMITIVE_TOPOLOGY_PATCH_LIST: VkPrimitiveTopology = 10;
pub const VkPrimitiveTopology_VK_PRIMITIVE_TOPOLOGY_MAX_ENUM: VkPrimitiveTopology = 2147483647;
pub const VkPolygonMode_VK_POLYGON_MODE_FILL: VkPolygonMode = 0;
pub const VkPolygonMode_VK_POLYGON_MODE_LINE: VkPolygonMode = 1;
pub const VkPolygonMode_VK_POLYGON_MODE_POINT: VkPolygonMode = 2;
pub const VkPolygonMode_VK_POLYGON_MODE_FILL_RECTANGLE_NV: VkPolygonMode = 1000153000;
pub const VkPolygonMode_VK_POLYGON_MODE_MAX_ENUM: VkPolygonMode = 2147483647;
pub const VkStencilOp_VK_STENCIL_OP_KEEP: VkStencilOp = 0;
pub const VkStencilOp_VK_STENCIL_OP_ZERO: VkStencilOp = 1;
pub const VkStencilOp_VK_STENCIL_OP_REPLACE: VkStencilOp = 2;
pub const VkStencilOp_VK_STENCIL_OP_INCREMENT_AND_CLAMP: VkStencilOp = 3;
pub const VkStencilOp_VK_STENCIL_OP_DECREMENT_AND_CLAMP: VkStencilOp = 4;
pub const VkStencilOp_VK_STENCIL_OP_INVERT: VkStencilOp = 5;
pub const VkStencilOp_VK_STENCIL_OP_INCREMENT_AND_WRAP: VkStencilOp = 6;
pub const VkStencilOp_VK_STENCIL_OP_DECREMENT_AND_WRAP: VkStencilOp = 7;
pub const VkStencilOp_VK_STENCIL_OP_MAX_ENUM: VkStencilOp = 2147483647;
pub const VkLogicOp_VK_LOGIC_OP_CLEAR: VkLogicOp = 0;
pub const VkLogicOp_VK_LOGIC_OP_AND: VkLogicOp = 1;
pub const VkLogicOp_VK_LOGIC_OP_AND_REVERSE: VkLogicOp = 2;
pub const VkLogicOp_VK_LOGIC_OP_COPY: VkLogicOp = 3;
pub const VkLogicOp_VK_LOGIC_OP_AND_INVERTED: VkLogicOp = 4;
pub const VkLogicOp_VK_LOGIC_OP_NO_OP: VkLogicOp = 5;
pub const VkLogicOp_VK_LOGIC_OP_XOR: VkLogicOp = 6;
pub const VkLogicOp_VK_LOGIC_OP_OR: VkLogicOp = 7;
pub const VkLogicOp_VK_LOGIC_OP_NOR: VkLogicOp = 8;
pub const VkLogicOp_VK_LOGIC_OP_EQUIVALENT: VkLogicOp = 9;
pub const VkLogicOp_VK_LOGIC_OP_INVERT: VkLogicOp = 10;
pub const VkLogicOp_VK_LOGIC_OP_OR_REVERSE: VkLogicOp = 11;
pub const VkLogicOp_VK_LOGIC_OP_COPY_INVERTED: VkLogicOp = 12;
pub const VkLogicOp_VK_LOGIC_OP_OR_INVERTED: VkLogicOp = 13;
pub const VkLogicOp_VK_LOGIC_OP_NAND: VkLogicOp = 14;
pub const VkLogicOp_VK_LOGIC_OP_SET: VkLogicOp = 15;
pub const VkLogicOp_VK_LOGIC_OP_MAX_ENUM: VkLogicOp = 2147483647;
pub const VkBorderColor_VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK: VkBorderColor = 0;
pub const VkBorderColor_VK_BORDER_COLOR_INT_TRANSPARENT_BLACK: VkBorderColor = 1;
pub const VkBorderColor_VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK: VkBorderColor = 2;
pub const VkBorderColor_VK_BORDER_COLOR_INT_OPAQUE_BLACK: VkBorderColor = 3;
pub const VkBorderColor_VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE: VkBorderColor = 4;
pub const VkBorderColor_VK_BORDER_COLOR_INT_OPAQUE_WHITE: VkBorderColor = 5;
pub const VkBorderColor_VK_BORDER_COLOR_FLOAT_CUSTOM_EXT: VkBorderColor = 1000287003;
pub const VkBorderColor_VK_BORDER_COLOR_INT_CUSTOM_EXT: VkBorderColor = 1000287004;
pub const VkBorderColor_VK_BORDER_COLOR_MAX_ENUM: VkBorderColor = 2147483647;
pub const VkFilter_VK_FILTER_NEAREST: VkFilter = 0;
pub const VkFilter_VK_FILTER_LINEAR: VkFilter = 1;
pub const VkFilter_VK_FILTER_CUBIC_EXT: VkFilter = 1000015000;
pub const VkFilter_VK_FILTER_CUBIC_IMG: VkFilter = 1000015000;
pub const VkFilter_VK_FILTER_MAX_ENUM: VkFilter = 2147483647;
pub const VkSamplerAddressMode_VK_SAMPLER_ADDRESS_MODE_REPEAT: VkSamplerAddressMode = 0;
pub const VkSamplerAddressMode_VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT: VkSamplerAddressMode = 1;
pub const VkSamplerAddressMode_VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE: VkSamplerAddressMode = 2;
pub const VkSamplerAddressMode_VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER: VkSamplerAddressMode = 3;
pub const VkSamplerAddressMode_VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE: VkSamplerAddressMode =
    4;
#[doc = " VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE_KHR is a deprecated alias"]
pub const VkSamplerAddressMode_VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE_KHR:
    VkSamplerAddressMode = 4;
#[doc = " VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE_KHR is a deprecated alias"]
pub const VkSamplerAddressMode_VK_SAMPLER_ADDRESS_MODE_MAX_ENUM: VkSamplerAddressMode = 2147483647;
pub const VkSamplerMipmapMode_VK_SAMPLER_MIPMAP_MODE_NEAREST: VkSamplerMipmapMode = 0;
pub const VkSamplerMipmapMode_VK_SAMPLER_MIPMAP_MODE_LINEAR: VkSamplerMipmapMode = 1;
pub const VkSamplerMipmapMode_VK_SAMPLER_MIPMAP_MODE_MAX_ENUM: VkSamplerMipmapMode = 2147483647;
pub const VkDescriptorType_VK_DESCRIPTOR_TYPE_SAMPLER: VkDescriptorType = 0;
pub const VkDescriptorType_VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER: VkDescriptorType = 1;
pub const VkDescriptorType_VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE: VkDescriptorType = 2;
pub const VkDescriptorType_VK_DESCRIPTOR_TYPE_STORAGE_IMAGE: VkDescriptorType = 3;
pub const VkDescriptorType_VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER: VkDescriptorType = 4;
pub const VkDescriptorType_VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER: VkDescriptorType = 5;
pub const VkDescriptorType_VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER: VkDescriptorType = 6;
pub const VkDescriptorType_VK_DESCRIPTOR_TYPE_STORAGE_BUFFER: VkDescriptorType = 7;
pub const VkDescriptorType_VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC: VkDescriptorType = 8;
pub const VkDescriptorType_VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC: VkDescriptorType = 9;
pub const VkDescriptorType_VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT: VkDescriptorType = 10;
pub const VkDescriptorType_VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK: VkDescriptorType = 1000138000;
pub const VkDescriptorType_VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR: VkDescriptorType =
    1000150000;
pub const VkDescriptorType_VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV: VkDescriptorType =
    1000165000;
pub const VkDescriptorType_VK_DESCRIPTOR_TYPE_SAMPLE_WEIGHT_IMAGE_QCOM: VkDescriptorType =
    1000440000;
pub const VkDescriptorType_VK_DESCRIPTOR_TYPE_BLOCK_MATCH_IMAGE_QCOM: VkDescriptorType = 1000440001;
pub const VkDescriptorType_VK_DESCRIPTOR_TYPE_MUTABLE_EXT: VkDescriptorType = 1000351000;
pub const VkDescriptorType_VK_DESCRIPTOR_TYPE_PARTITIONED_ACCELERATION_STRUCTURE_NV:
    VkDescriptorType = 1000570000;
pub const VkDescriptorType_VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT: VkDescriptorType =
    1000138000;
pub const VkDescriptorType_VK_DESCRIPTOR_TYPE_MUTABLE_VALVE: VkDescriptorType = 1000351000;
pub const VkDescriptorType_VK_DESCRIPTOR_TYPE_MAX_ENUM: VkDescriptorType = 2147483647;
pub const VkAttachmentLoadOp_VK_ATTACHMENT_LOAD_OP_LOAD: VkAttachmentLoadOp = 0;
pub const VkAttachmentLoadOp_VK_ATTACHMENT_LOAD_OP_CLEAR: VkAttachmentLoadOp = 1;
pub const VkAttachmentLoadOp_VK_ATTACHMENT_LOAD_OP_DONT_CARE: VkAttachmentLoadOp = 2;
pub const VkAttachmentLoadOp_VK_ATTACHMENT_LOAD_OP_NONE: VkAttachmentLoadOp = 1000400000;
pub const VkAttachmentLoadOp_VK_ATTACHMENT_LOAD_OP_NONE_EXT: VkAttachmentLoadOp = 1000400000;
pub const VkAttachmentLoadOp_VK_ATTACHMENT_LOAD_OP_NONE_KHR: VkAttachmentLoadOp = 1000400000;
pub const VkAttachmentLoadOp_VK_ATTACHMENT_LOAD_OP_MAX_ENUM: VkAttachmentLoadOp = 2147483647;
pub const VkAttachmentStoreOp_VK_ATTACHMENT_STORE_OP_STORE: VkAttachmentStoreOp = 0;
pub const VkAttachmentStoreOp_VK_ATTACHMENT_STORE_OP_DONT_CARE: VkAttachmentStoreOp = 1;
pub const VkAttachmentStoreOp_VK_ATTACHMENT_STORE_OP_NONE: VkAttachmentStoreOp = 1000301000;
pub const VkAttachmentStoreOp_VK_ATTACHMENT_STORE_OP_NONE_KHR: VkAttachmentStoreOp = 1000301000;
pub const VkAttachmentStoreOp_VK_ATTACHMENT_STORE_OP_NONE_QCOM: VkAttachmentStoreOp = 1000301000;
pub const VkAttachmentStoreOp_VK_ATTACHMENT_STORE_OP_NONE_EXT: VkAttachmentStoreOp = 1000301000;
pub const VkAttachmentStoreOp_VK_ATTACHMENT_STORE_OP_MAX_ENUM: VkAttachmentStoreOp = 2147483647;
pub const VkPipelineBindPoint_VK_PIPELINE_BIND_POINT_GRAPHICS: VkPipelineBindPoint = 0;
pub const VkPipelineBindPoint_VK_PIPELINE_BIND_POINT_COMPUTE: VkPipelineBindPoint = 1;
pub const VkPipelineBindPoint_VK_PIPELINE_BIND_POINT_RAY_TRACING_KHR: VkPipelineBindPoint =
    1000165000;
pub const VkPipelineBindPoint_VK_PIPELINE_BIND_POINT_SUBPASS_SHADING_HUAWEI: VkPipelineBindPoint =
    1000369003;
pub const VkPipelineBindPoint_VK_PIPELINE_BIND_POINT_RAY_TRACING_NV: VkPipelineBindPoint =
    1000165000;
pub const VkPipelineBindPoint_VK_PIPELINE_BIND_POINT_MAX_ENUM: VkPipelineBindPoint = 2147483647;
pub const VkCommandBufferLevel_VK_COMMAND_BUFFER_LEVEL_PRIMARY: VkCommandBufferLevel = 0;
pub const VkCommandBufferLevel_VK_COMMAND_BUFFER_LEVEL_SECONDARY: VkCommandBufferLevel = 1;
pub const VkCommandBufferLevel_VK_COMMAND_BUFFER_LEVEL_MAX_ENUM: VkCommandBufferLevel = 2147483647;
pub const VkIndexType_VK_INDEX_TYPE_UINT16: VkIndexType = 0;
pub const VkIndexType_VK_INDEX_TYPE_UINT32: VkIndexType = 1;
pub const VkIndexType_VK_INDEX_TYPE_UINT8: VkIndexType = 1000265000;
pub const VkIndexType_VK_INDEX_TYPE_NONE_KHR: VkIndexType = 1000165000;
pub const VkIndexType_VK_INDEX_TYPE_NONE_NV: VkIndexType = 1000165000;
pub const VkIndexType_VK_INDEX_TYPE_UINT8_EXT: VkIndexType = 1000265000;
pub const VkIndexType_VK_INDEX_TYPE_UINT8_KHR: VkIndexType = 1000265000;
pub const VkIndexType_VK_INDEX_TYPE_MAX_ENUM: VkIndexType = 2147483647;
pub const VkSubpassContents_VK_SUBPASS_CONTENTS_INLINE: VkSubpassContents = 0;
pub const VkSubpassContents_VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS: VkSubpassContents = 1;
pub const VkSubpassContents_VK_SUBPASS_CONTENTS_INLINE_AND_SECONDARY_COMMAND_BUFFERS_KHR:
    VkSubpassContents = 1000451000;
pub const VkSubpassContents_VK_SUBPASS_CONTENTS_INLINE_AND_SECONDARY_COMMAND_BUFFERS_EXT:
    VkSubpassContents = 1000451000;
pub const VkSubpassContents_VK_SUBPASS_CONTENTS_MAX_ENUM: VkSubpassContents = 2147483647;
pub const VkAccessFlagBits_VK_ACCESS_INDIRECT_COMMAND_READ_BIT: VkAccessFlagBits = 1;
pub const VkAccessFlagBits_VK_ACCESS_INDEX_READ_BIT: VkAccessFlagBits = 2;
pub const VkAccessFlagBits_VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT: VkAccessFlagBits = 4;
pub const VkAccessFlagBits_VK_ACCESS_UNIFORM_READ_BIT: VkAccessFlagBits = 8;
pub const VkAccessFlagBits_VK_ACCESS_INPUT_ATTACHMENT_READ_BIT: VkAccessFlagBits = 16;
pub const VkAccessFlagBits_VK_ACCESS_SHADER_READ_BIT: VkAccessFlagBits = 32;
pub const VkAccessFlagBits_VK_ACCESS_SHADER_WRITE_BIT: VkAccessFlagBits = 64;
pub const VkAccessFlagBits_VK_ACCESS_COLOR_ATTACHMENT_READ_BIT: VkAccessFlagBits = 128;
pub const VkAccessFlagBits_VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT: VkAccessFlagBits = 256;
pub const VkAccessFlagBits_VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT: VkAccessFlagBits = 512;
pub const VkAccessFlagBits_VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT: VkAccessFlagBits = 1024;
pub const VkAccessFlagBits_VK_ACCESS_TRANSFER_READ_BIT: VkAccessFlagBits = 2048;
pub const VkAccessFlagBits_VK_ACCESS_TRANSFER_WRITE_BIT: VkAccessFlagBits = 4096;
pub const VkAccessFlagBits_VK_ACCESS_HOST_READ_BIT: VkAccessFlagBits = 8192;
pub const VkAccessFlagBits_VK_ACCESS_HOST_WRITE_BIT: VkAccessFlagBits = 16384;
pub const VkAccessFlagBits_VK_ACCESS_MEMORY_READ_BIT: VkAccessFlagBits = 32768;
pub const VkAccessFlagBits_VK_ACCESS_MEMORY_WRITE_BIT: VkAccessFlagBits = 65536;
pub const VkAccessFlagBits_VK_ACCESS_NONE: VkAccessFlagBits = 0;
pub const VkAccessFlagBits_VK_ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT: VkAccessFlagBits = 33554432;
pub const VkAccessFlagBits_VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT: VkAccessFlagBits =
    67108864;
pub const VkAccessFlagBits_VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT: VkAccessFlagBits =
    134217728;
pub const VkAccessFlagBits_VK_ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT: VkAccessFlagBits = 1048576;
pub const VkAccessFlagBits_VK_ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT: VkAccessFlagBits =
    524288;
pub const VkAccessFlagBits_VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR: VkAccessFlagBits =
    2097152;
pub const VkAccessFlagBits_VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR: VkAccessFlagBits =
    4194304;
pub const VkAccessFlagBits_VK_ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT: VkAccessFlagBits = 16777216;
pub const VkAccessFlagBits_VK_ACCESS_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR:
    VkAccessFlagBits = 8388608;
pub const VkAccessFlagBits_VK_ACCESS_COMMAND_PREPROCESS_READ_BIT_EXT: VkAccessFlagBits = 131072;
pub const VkAccessFlagBits_VK_ACCESS_COMMAND_PREPROCESS_WRITE_BIT_EXT: VkAccessFlagBits = 262144;
pub const VkAccessFlagBits_VK_ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV: VkAccessFlagBits = 8388608;
pub const VkAccessFlagBits_VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_NV: VkAccessFlagBits = 2097152;
pub const VkAccessFlagBits_VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_NV: VkAccessFlagBits =
    4194304;
pub const VkAccessFlagBits_VK_ACCESS_COMMAND_PREPROCESS_READ_BIT_NV: VkAccessFlagBits = 131072;
pub const VkAccessFlagBits_VK_ACCESS_COMMAND_PREPROCESS_WRITE_BIT_NV: VkAccessFlagBits = 262144;
pub const VkAccessFlagBits_VK_ACCESS_NONE_KHR: VkAccessFlagBits = 0;
pub const VkAccessFlagBits_VK_ACCESS_FLAG_BITS_MAX_ENUM: VkAccessFlagBits = 2147483647;
pub const VkImageAspectFlagBits_VK_IMAGE_ASPECT_COLOR_BIT: VkImageAspectFlagBits = 1;
pub const VkImageAspectFlagBits_VK_IMAGE_ASPECT_DEPTH_BIT: VkImageAspectFlagBits = 2;
pub const VkImageAspectFlagBits_VK_IMAGE_ASPECT_STENCIL_BIT: VkImageAspectFlagBits = 4;
pub const VkImageAspectFlagBits_VK_IMAGE_ASPECT_METADATA_BIT: VkImageAspectFlagBits = 8;
pub const VkImageAspectFlagBits_VK_IMAGE_ASPECT_PLANE_0_BIT: VkImageAspectFlagBits = 16;
pub const VkImageAspectFlagBits_VK_IMAGE_ASPECT_PLANE_1_BIT: VkImageAspectFlagBits = 32;
pub const VkImageAspectFlagBits_VK_IMAGE_ASPECT_PLANE_2_BIT: VkImageAspectFlagBits = 64;
pub const VkImageAspectFlagBits_VK_IMAGE_ASPECT_NONE: VkImageAspectFlagBits = 0;
pub const VkImageAspectFlagBits_VK_IMAGE_ASPECT_MEMORY_PLANE_0_BIT_EXT: VkImageAspectFlagBits = 128;
pub const VkImageAspectFlagBits_VK_IMAGE_ASPECT_MEMORY_PLANE_1_BIT_EXT: VkImageAspectFlagBits = 256;
pub const VkImageAspectFlagBits_VK_IMAGE_ASPECT_MEMORY_PLANE_2_BIT_EXT: VkImageAspectFlagBits = 512;
pub const VkImageAspectFlagBits_VK_IMAGE_ASPECT_MEMORY_PLANE_3_BIT_EXT: VkImageAspectFlagBits =
    1024;
pub const VkImageAspectFlagBits_VK_IMAGE_ASPECT_PLANE_0_BIT_KHR: VkImageAspectFlagBits = 16;
pub const VkImageAspectFlagBits_VK_IMAGE_ASPECT_PLANE_1_BIT_KHR: VkImageAspectFlagBits = 32;
pub const VkImageAspectFlagBits_VK_IMAGE_ASPECT_PLANE_2_BIT_KHR: VkImageAspectFlagBits = 64;
pub const VkImageAspectFlagBits_VK_IMAGE_ASPECT_NONE_KHR: VkImageAspectFlagBits = 0;
pub const VkImageAspectFlagBits_VK_IMAGE_ASPECT_FLAG_BITS_MAX_ENUM: VkImageAspectFlagBits =
    2147483647;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT: VkFormatFeatureFlagBits = 1;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT: VkFormatFeatureFlagBits = 2;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT:
    VkFormatFeatureFlagBits = 4;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT:
    VkFormatFeatureFlagBits = 8;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT:
    VkFormatFeatureFlagBits = 16;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT:
    VkFormatFeatureFlagBits = 32;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT: VkFormatFeatureFlagBits = 64;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT: VkFormatFeatureFlagBits =
    128;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT:
    VkFormatFeatureFlagBits = 256;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT:
    VkFormatFeatureFlagBits = 512;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_BLIT_SRC_BIT: VkFormatFeatureFlagBits = 1024;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_BLIT_DST_BIT: VkFormatFeatureFlagBits = 2048;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT:
    VkFormatFeatureFlagBits = 4096;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_TRANSFER_SRC_BIT: VkFormatFeatureFlagBits =
    16384;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_TRANSFER_DST_BIT: VkFormatFeatureFlagBits =
    32768;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT:
    VkFormatFeatureFlagBits = 131072;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT : VkFormatFeatureFlagBits = 262144 ;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT : VkFormatFeatureFlagBits = 524288 ;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT : VkFormatFeatureFlagBits = 1048576 ;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT : VkFormatFeatureFlagBits = 2097152 ;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_DISJOINT_BIT: VkFormatFeatureFlagBits = 4194304;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT:
    VkFormatFeatureFlagBits = 8388608;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT:
    VkFormatFeatureFlagBits = 65536;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_VIDEO_DECODE_OUTPUT_BIT_KHR:
    VkFormatFeatureFlagBits = 33554432;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_VIDEO_DECODE_DPB_BIT_KHR:
    VkFormatFeatureFlagBits = 67108864;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR:
    VkFormatFeatureFlagBits = 536870912;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT:
    VkFormatFeatureFlagBits = 8192;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_FRAGMENT_DENSITY_MAP_BIT_EXT:
    VkFormatFeatureFlagBits = 16777216;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR:
    VkFormatFeatureFlagBits = 1073741824;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_VIDEO_ENCODE_INPUT_BIT_KHR:
    VkFormatFeatureFlagBits = 134217728;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_VIDEO_ENCODE_DPB_BIT_KHR:
    VkFormatFeatureFlagBits = 268435456;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG:
    VkFormatFeatureFlagBits = 8192;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_TRANSFER_SRC_BIT_KHR: VkFormatFeatureFlagBits =
    16384;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_TRANSFER_DST_BIT_KHR: VkFormatFeatureFlagBits =
    32768;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT_EXT:
    VkFormatFeatureFlagBits = 65536;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT_KHR:
    VkFormatFeatureFlagBits = 131072;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR : VkFormatFeatureFlagBits = 262144 ;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR : VkFormatFeatureFlagBits = 524288 ;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR : VkFormatFeatureFlagBits = 1048576 ;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR : VkFormatFeatureFlagBits = 2097152 ;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_DISJOINT_BIT_KHR: VkFormatFeatureFlagBits =
    4194304;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT_KHR:
    VkFormatFeatureFlagBits = 8388608;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_FLAG_BITS_MAX_ENUM: VkFormatFeatureFlagBits =
    2147483647;
pub const VkImageCreateFlagBits_VK_IMAGE_CREATE_SPARSE_BINDING_BIT: VkImageCreateFlagBits = 1;
pub const VkImageCreateFlagBits_VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT: VkImageCreateFlagBits = 2;
pub const VkImageCreateFlagBits_VK_IMAGE_CREATE_SPARSE_ALIASED_BIT: VkImageCreateFlagBits = 4;
pub const VkImageCreateFlagBits_VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT: VkImageCreateFlagBits = 8;
pub const VkImageCreateFlagBits_VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT: VkImageCreateFlagBits = 16;
pub const VkImageCreateFlagBits_VK_IMAGE_CREATE_ALIAS_BIT: VkImageCreateFlagBits = 1024;
pub const VkImageCreateFlagBits_VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT:
    VkImageCreateFlagBits = 64;
pub const VkImageCreateFlagBits_VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT: VkImageCreateFlagBits = 32;
pub const VkImageCreateFlagBits_VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT:
    VkImageCreateFlagBits = 128;
pub const VkImageCreateFlagBits_VK_IMAGE_CREATE_EXTENDED_USAGE_BIT: VkImageCreateFlagBits = 256;
pub const VkImageCreateFlagBits_VK_IMAGE_CREATE_PROTECTED_BIT: VkImageCreateFlagBits = 2048;
pub const VkImageCreateFlagBits_VK_IMAGE_CREATE_DISJOINT_BIT: VkImageCreateFlagBits = 512;
pub const VkImageCreateFlagBits_VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV: VkImageCreateFlagBits = 8192;
pub const VkImageCreateFlagBits_VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT:
    VkImageCreateFlagBits = 4096;
pub const VkImageCreateFlagBits_VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT: VkImageCreateFlagBits = 16384;
pub const VkImageCreateFlagBits_VK_IMAGE_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT:
    VkImageCreateFlagBits = 65536;
pub const VkImageCreateFlagBits_VK_IMAGE_CREATE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_BIT_EXT:
    VkImageCreateFlagBits = 262144;
pub const VkImageCreateFlagBits_VK_IMAGE_CREATE_2D_VIEW_COMPATIBLE_BIT_EXT: VkImageCreateFlagBits =
    131072;
pub const VkImageCreateFlagBits_VK_IMAGE_CREATE_VIDEO_PROFILE_INDEPENDENT_BIT_KHR:
    VkImageCreateFlagBits = 1048576;
pub const VkImageCreateFlagBits_VK_IMAGE_CREATE_FRAGMENT_DENSITY_MAP_OFFSET_BIT_EXT:
    VkImageCreateFlagBits = 32768;
pub const VkImageCreateFlagBits_VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR:
    VkImageCreateFlagBits = 64;
pub const VkImageCreateFlagBits_VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT_KHR: VkImageCreateFlagBits =
    32;
pub const VkImageCreateFlagBits_VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT_KHR:
    VkImageCreateFlagBits = 128;
pub const VkImageCreateFlagBits_VK_IMAGE_CREATE_EXTENDED_USAGE_BIT_KHR: VkImageCreateFlagBits = 256;
pub const VkImageCreateFlagBits_VK_IMAGE_CREATE_DISJOINT_BIT_KHR: VkImageCreateFlagBits = 512;
pub const VkImageCreateFlagBits_VK_IMAGE_CREATE_ALIAS_BIT_KHR: VkImageCreateFlagBits = 1024;
pub const VkImageCreateFlagBits_VK_IMAGE_CREATE_FRAGMENT_DENSITY_MAP_OFFSET_BIT_QCOM:
    VkImageCreateFlagBits = 32768;
pub const VkImageCreateFlagBits_VK_IMAGE_CREATE_FLAG_BITS_MAX_ENUM: VkImageCreateFlagBits =
    2147483647;
pub const VkSampleCountFlagBits_VK_SAMPLE_COUNT_1_BIT: VkSampleCountFlagBits = 1;
pub const VkSampleCountFlagBits_VK_SAMPLE_COUNT_2_BIT: VkSampleCountFlagBits = 2;
pub const VkSampleCountFlagBits_VK_SAMPLE_COUNT_4_BIT: VkSampleCountFlagBits = 4;
pub const VkSampleCountFlagBits_VK_SAMPLE_COUNT_8_BIT: VkSampleCountFlagBits = 8;
pub const VkSampleCountFlagBits_VK_SAMPLE_COUNT_16_BIT: VkSampleCountFlagBits = 16;
pub const VkSampleCountFlagBits_VK_SAMPLE_COUNT_32_BIT: VkSampleCountFlagBits = 32;
pub const VkSampleCountFlagBits_VK_SAMPLE_COUNT_64_BIT: VkSampleCountFlagBits = 64;
pub const VkSampleCountFlagBits_VK_SAMPLE_COUNT_FLAG_BITS_MAX_ENUM: VkSampleCountFlagBits =
    2147483647;
pub const VkImageUsageFlagBits_VK_IMAGE_USAGE_TRANSFER_SRC_BIT: VkImageUsageFlagBits = 1;
pub const VkImageUsageFlagBits_VK_IMAGE_USAGE_TRANSFER_DST_BIT: VkImageUsageFlagBits = 2;
pub const VkImageUsageFlagBits_VK_IMAGE_USAGE_SAMPLED_BIT: VkImageUsageFlagBits = 4;
pub const VkImageUsageFlagBits_VK_IMAGE_USAGE_STORAGE_BIT: VkImageUsageFlagBits = 8;
pub const VkImageUsageFlagBits_VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT: VkImageUsageFlagBits = 16;
pub const VkImageUsageFlagBits_VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT: VkImageUsageFlagBits =
    32;
pub const VkImageUsageFlagBits_VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT: VkImageUsageFlagBits = 64;
pub const VkImageUsageFlagBits_VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT: VkImageUsageFlagBits = 128;
pub const VkImageUsageFlagBits_VK_IMAGE_USAGE_HOST_TRANSFER_BIT: VkImageUsageFlagBits = 4194304;
pub const VkImageUsageFlagBits_VK_IMAGE_USAGE_VIDEO_DECODE_DST_BIT_KHR: VkImageUsageFlagBits = 1024;
pub const VkImageUsageFlagBits_VK_IMAGE_USAGE_VIDEO_DECODE_SRC_BIT_KHR: VkImageUsageFlagBits = 2048;
pub const VkImageUsageFlagBits_VK_IMAGE_USAGE_VIDEO_DECODE_DPB_BIT_KHR: VkImageUsageFlagBits = 4096;
pub const VkImageUsageFlagBits_VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT: VkImageUsageFlagBits =
    512;
pub const VkImageUsageFlagBits_VK_IMAGE_USAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR:
    VkImageUsageFlagBits = 256;
pub const VkImageUsageFlagBits_VK_IMAGE_USAGE_VIDEO_ENCODE_DST_BIT_KHR: VkImageUsageFlagBits = 8192;
pub const VkImageUsageFlagBits_VK_IMAGE_USAGE_VIDEO_ENCODE_SRC_BIT_KHR: VkImageUsageFlagBits =
    16384;
pub const VkImageUsageFlagBits_VK_IMAGE_USAGE_VIDEO_ENCODE_DPB_BIT_KHR: VkImageUsageFlagBits =
    32768;
pub const VkImageUsageFlagBits_VK_IMAGE_USAGE_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT:
    VkImageUsageFlagBits = 524288;
pub const VkImageUsageFlagBits_VK_IMAGE_USAGE_INVOCATION_MASK_BIT_HUAWEI: VkImageUsageFlagBits =
    262144;
pub const VkImageUsageFlagBits_VK_IMAGE_USAGE_SAMPLE_WEIGHT_BIT_QCOM: VkImageUsageFlagBits =
    1048576;
pub const VkImageUsageFlagBits_VK_IMAGE_USAGE_SAMPLE_BLOCK_MATCH_BIT_QCOM: VkImageUsageFlagBits =
    2097152;
pub const VkImageUsageFlagBits_VK_IMAGE_USAGE_TILE_MEMORY_BIT_QCOM: VkImageUsageFlagBits =
    134217728;
pub const VkImageUsageFlagBits_VK_IMAGE_USAGE_VIDEO_ENCODE_QUANTIZATION_DELTA_MAP_BIT_KHR:
    VkImageUsageFlagBits = 33554432;
pub const VkImageUsageFlagBits_VK_IMAGE_USAGE_VIDEO_ENCODE_EMPHASIS_MAP_BIT_KHR:
    VkImageUsageFlagBits = 67108864;
pub const VkImageUsageFlagBits_VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV: VkImageUsageFlagBits = 256;
pub const VkImageUsageFlagBits_VK_IMAGE_USAGE_HOST_TRANSFER_BIT_EXT: VkImageUsageFlagBits = 4194304;
pub const VkImageUsageFlagBits_VK_IMAGE_USAGE_FLAG_BITS_MAX_ENUM: VkImageUsageFlagBits = 2147483647;
pub const VkInstanceCreateFlagBits_VK_INSTANCE_CREATE_ENUMERATE_PORTABILITY_BIT_KHR:
    VkInstanceCreateFlagBits = 1;
pub const VkInstanceCreateFlagBits_VK_INSTANCE_CREATE_FLAG_BITS_MAX_ENUM: VkInstanceCreateFlagBits =
    2147483647;
pub const VkMemoryHeapFlagBits_VK_MEMORY_HEAP_DEVICE_LOCAL_BIT: VkMemoryHeapFlagBits = 1;
pub const VkMemoryHeapFlagBits_VK_MEMORY_HEAP_MULTI_INSTANCE_BIT: VkMemoryHeapFlagBits = 2;
pub const VkMemoryHeapFlagBits_VK_MEMORY_HEAP_TILE_MEMORY_BIT_QCOM: VkMemoryHeapFlagBits = 8;
pub const VkMemoryHeapFlagBits_VK_MEMORY_HEAP_MULTI_INSTANCE_BIT_KHR: VkMemoryHeapFlagBits = 2;
pub const VkMemoryHeapFlagBits_VK_MEMORY_HEAP_FLAG_BITS_MAX_ENUM: VkMemoryHeapFlagBits = 2147483647;
pub const VkMemoryPropertyFlagBits_VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT: VkMemoryPropertyFlagBits =
    1;
pub const VkMemoryPropertyFlagBits_VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT: VkMemoryPropertyFlagBits =
    2;
pub const VkMemoryPropertyFlagBits_VK_MEMORY_PROPERTY_HOST_COHERENT_BIT: VkMemoryPropertyFlagBits =
    4;
pub const VkMemoryPropertyFlagBits_VK_MEMORY_PROPERTY_HOST_CACHED_BIT: VkMemoryPropertyFlagBits = 8;
pub const VkMemoryPropertyFlagBits_VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT:
    VkMemoryPropertyFlagBits = 16;
pub const VkMemoryPropertyFlagBits_VK_MEMORY_PROPERTY_PROTECTED_BIT: VkMemoryPropertyFlagBits = 32;
pub const VkMemoryPropertyFlagBits_VK_MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD:
    VkMemoryPropertyFlagBits = 64;
pub const VkMemoryPropertyFlagBits_VK_MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD:
    VkMemoryPropertyFlagBits = 128;
pub const VkMemoryPropertyFlagBits_VK_MEMORY_PROPERTY_RDMA_CAPABLE_BIT_NV:
    VkMemoryPropertyFlagBits = 256;
pub const VkMemoryPropertyFlagBits_VK_MEMORY_PROPERTY_FLAG_BITS_MAX_ENUM: VkMemoryPropertyFlagBits =
    2147483647;
pub const VkQueueFlagBits_VK_QUEUE_GRAPHICS_BIT: VkQueueFlagBits = 1;
pub const VkQueueFlagBits_VK_QUEUE_COMPUTE_BIT: VkQueueFlagBits = 2;
pub const VkQueueFlagBits_VK_QUEUE_TRANSFER_BIT: VkQueueFlagBits = 4;
pub const VkQueueFlagBits_VK_QUEUE_SPARSE_BINDING_BIT: VkQueueFlagBits = 8;
pub const VkQueueFlagBits_VK_QUEUE_PROTECTED_BIT: VkQueueFlagBits = 16;
pub const VkQueueFlagBits_VK_QUEUE_VIDEO_DECODE_BIT_KHR: VkQueueFlagBits = 32;
pub const VkQueueFlagBits_VK_QUEUE_VIDEO_ENCODE_BIT_KHR: VkQueueFlagBits = 64;
pub const VkQueueFlagBits_VK_QUEUE_OPTICAL_FLOW_BIT_NV: VkQueueFlagBits = 256;
pub const VkQueueFlagBits_VK_QUEUE_FLAG_BITS_MAX_ENUM: VkQueueFlagBits = 2147483647;
pub const VkDeviceQueueCreateFlagBits_VK_DEVICE_QUEUE_CREATE_PROTECTED_BIT:
    VkDeviceQueueCreateFlagBits = 1;
pub const VkDeviceQueueCreateFlagBits_VK_DEVICE_QUEUE_CREATE_FLAG_BITS_MAX_ENUM:
    VkDeviceQueueCreateFlagBits = 2147483647;
pub const VkPipelineStageFlagBits_VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT: VkPipelineStageFlagBits = 1;
pub const VkPipelineStageFlagBits_VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT: VkPipelineStageFlagBits = 2;
pub const VkPipelineStageFlagBits_VK_PIPELINE_STAGE_VERTEX_INPUT_BIT: VkPipelineStageFlagBits = 4;
pub const VkPipelineStageFlagBits_VK_PIPELINE_STAGE_VERTEX_SHADER_BIT: VkPipelineStageFlagBits = 8;
pub const VkPipelineStageFlagBits_VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT:
    VkPipelineStageFlagBits = 16;
pub const VkPipelineStageFlagBits_VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT:
    VkPipelineStageFlagBits = 32;
pub const VkPipelineStageFlagBits_VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT: VkPipelineStageFlagBits =
    64;
pub const VkPipelineStageFlagBits_VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT: VkPipelineStageFlagBits =
    128;
pub const VkPipelineStageFlagBits_VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT:
    VkPipelineStageFlagBits = 256;
pub const VkPipelineStageFlagBits_VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT:
    VkPipelineStageFlagBits = 512;
pub const VkPipelineStageFlagBits_VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT:
    VkPipelineStageFlagBits = 1024;
pub const VkPipelineStageFlagBits_VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT: VkPipelineStageFlagBits =
    2048;
pub const VkPipelineStageFlagBits_VK_PIPELINE_STAGE_TRANSFER_BIT: VkPipelineStageFlagBits = 4096;
pub const VkPipelineStageFlagBits_VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT: VkPipelineStageFlagBits =
    8192;
pub const VkPipelineStageFlagBits_VK_PIPELINE_STAGE_HOST_BIT: VkPipelineStageFlagBits = 16384;
pub const VkPipelineStageFlagBits_VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT: VkPipelineStageFlagBits =
    32768;
pub const VkPipelineStageFlagBits_VK_PIPELINE_STAGE_ALL_COMMANDS_BIT: VkPipelineStageFlagBits =
    65536;
pub const VkPipelineStageFlagBits_VK_PIPELINE_STAGE_NONE: VkPipelineStageFlagBits = 0;
pub const VkPipelineStageFlagBits_VK_PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT:
    VkPipelineStageFlagBits = 16777216;
pub const VkPipelineStageFlagBits_VK_PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT:
    VkPipelineStageFlagBits = 262144;
pub const VkPipelineStageFlagBits_VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR:
    VkPipelineStageFlagBits = 33554432;
pub const VkPipelineStageFlagBits_VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR:
    VkPipelineStageFlagBits = 2097152;
pub const VkPipelineStageFlagBits_VK_PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT:
    VkPipelineStageFlagBits = 8388608;
pub const VkPipelineStageFlagBits_VK_PIPELINE_STAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR:
    VkPipelineStageFlagBits = 4194304;
pub const VkPipelineStageFlagBits_VK_PIPELINE_STAGE_TASK_SHADER_BIT_EXT: VkPipelineStageFlagBits =
    524288;
pub const VkPipelineStageFlagBits_VK_PIPELINE_STAGE_MESH_SHADER_BIT_EXT: VkPipelineStageFlagBits =
    1048576;
pub const VkPipelineStageFlagBits_VK_PIPELINE_STAGE_COMMAND_PREPROCESS_BIT_EXT:
    VkPipelineStageFlagBits = 131072;
pub const VkPipelineStageFlagBits_VK_PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV:
    VkPipelineStageFlagBits = 4194304;
pub const VkPipelineStageFlagBits_VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_NV:
    VkPipelineStageFlagBits = 2097152;
pub const VkPipelineStageFlagBits_VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_NV:
    VkPipelineStageFlagBits = 33554432;
pub const VkPipelineStageFlagBits_VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV: VkPipelineStageFlagBits =
    524288;
pub const VkPipelineStageFlagBits_VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV: VkPipelineStageFlagBits =
    1048576;
pub const VkPipelineStageFlagBits_VK_PIPELINE_STAGE_COMMAND_PREPROCESS_BIT_NV:
    VkPipelineStageFlagBits = 131072;
pub const VkPipelineStageFlagBits_VK_PIPELINE_STAGE_NONE_KHR: VkPipelineStageFlagBits = 0;
pub const VkPipelineStageFlagBits_VK_PIPELINE_STAGE_FLAG_BITS_MAX_ENUM: VkPipelineStageFlagBits =
    2147483647;
pub const VkMemoryMapFlagBits_VK_MEMORY_MAP_PLACED_BIT_EXT: VkMemoryMapFlagBits = 1;
pub const VkMemoryMapFlagBits_VK_MEMORY_MAP_FLAG_BITS_MAX_ENUM: VkMemoryMapFlagBits = 2147483647;
pub const VkSparseMemoryBindFlagBits_VK_SPARSE_MEMORY_BIND_METADATA_BIT:
    VkSparseMemoryBindFlagBits = 1;
pub const VkSparseMemoryBindFlagBits_VK_SPARSE_MEMORY_BIND_FLAG_BITS_MAX_ENUM:
    VkSparseMemoryBindFlagBits = 2147483647;
pub const VkSparseImageFormatFlagBits_VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT:
    VkSparseImageFormatFlagBits = 1;
pub const VkSparseImageFormatFlagBits_VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT:
    VkSparseImageFormatFlagBits = 2;
pub const VkSparseImageFormatFlagBits_VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT:
    VkSparseImageFormatFlagBits = 4;
pub const VkSparseImageFormatFlagBits_VK_SPARSE_IMAGE_FORMAT_FLAG_BITS_MAX_ENUM:
    VkSparseImageFormatFlagBits = 2147483647;
pub const VkFenceCreateFlagBits_VK_FENCE_CREATE_SIGNALED_BIT: VkFenceCreateFlagBits = 1;
pub const VkFenceCreateFlagBits_VK_FENCE_CREATE_FLAG_BITS_MAX_ENUM: VkFenceCreateFlagBits =
    2147483647;
pub const VkEventCreateFlagBits_VK_EVENT_CREATE_DEVICE_ONLY_BIT: VkEventCreateFlagBits = 1;
pub const VkEventCreateFlagBits_VK_EVENT_CREATE_DEVICE_ONLY_BIT_KHR: VkEventCreateFlagBits = 1;
pub const VkEventCreateFlagBits_VK_EVENT_CREATE_FLAG_BITS_MAX_ENUM: VkEventCreateFlagBits =
    2147483647;
pub const VkQueryPipelineStatisticFlagBits_VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT : VkQueryPipelineStatisticFlagBits = 1 ;
pub const VkQueryPipelineStatisticFlagBits_VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT : VkQueryPipelineStatisticFlagBits = 2 ;
pub const VkQueryPipelineStatisticFlagBits_VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT : VkQueryPipelineStatisticFlagBits = 4 ;
pub const VkQueryPipelineStatisticFlagBits_VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT : VkQueryPipelineStatisticFlagBits = 8 ;
pub const VkQueryPipelineStatisticFlagBits_VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT : VkQueryPipelineStatisticFlagBits = 16 ;
pub const VkQueryPipelineStatisticFlagBits_VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT:
    VkQueryPipelineStatisticFlagBits = 32;
pub const VkQueryPipelineStatisticFlagBits_VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT:
    VkQueryPipelineStatisticFlagBits = 64;
pub const VkQueryPipelineStatisticFlagBits_VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT : VkQueryPipelineStatisticFlagBits = 128 ;
pub const VkQueryPipelineStatisticFlagBits_VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT : VkQueryPipelineStatisticFlagBits = 256 ;
pub const VkQueryPipelineStatisticFlagBits_VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT : VkQueryPipelineStatisticFlagBits = 512 ;
pub const VkQueryPipelineStatisticFlagBits_VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT : VkQueryPipelineStatisticFlagBits = 1024 ;
pub const VkQueryPipelineStatisticFlagBits_VK_QUERY_PIPELINE_STATISTIC_TASK_SHADER_INVOCATIONS_BIT_EXT : VkQueryPipelineStatisticFlagBits = 2048 ;
pub const VkQueryPipelineStatisticFlagBits_VK_QUERY_PIPELINE_STATISTIC_MESH_SHADER_INVOCATIONS_BIT_EXT : VkQueryPipelineStatisticFlagBits = 4096 ;
pub const VkQueryPipelineStatisticFlagBits_VK_QUERY_PIPELINE_STATISTIC_CLUSTER_CULLING_SHADER_INVOCATIONS_BIT_HUAWEI : VkQueryPipelineStatisticFlagBits = 8192 ;
pub const VkQueryPipelineStatisticFlagBits_VK_QUERY_PIPELINE_STATISTIC_FLAG_BITS_MAX_ENUM:
    VkQueryPipelineStatisticFlagBits = 2147483647;
pub const VkQueryResultFlagBits_VK_QUERY_RESULT_64_BIT: VkQueryResultFlagBits = 1;
pub const VkQueryResultFlagBits_VK_QUERY_RESULT_WAIT_BIT: VkQueryResultFlagBits = 2;
pub const VkQueryResultFlagBits_VK_QUERY_RESULT_WITH_AVAILABILITY_BIT: VkQueryResultFlagBits = 4;
pub const VkQueryResultFlagBits_VK_QUERY_RESULT_PARTIAL_BIT: VkQueryResultFlagBits = 8;
pub const VkQueryResultFlagBits_VK_QUERY_RESULT_WITH_STATUS_BIT_KHR: VkQueryResultFlagBits = 16;
pub const VkQueryResultFlagBits_VK_QUERY_RESULT_FLAG_BITS_MAX_ENUM: VkQueryResultFlagBits =
    2147483647;
pub const VkBufferCreateFlagBits_VK_BUFFER_CREATE_SPARSE_BINDING_BIT: VkBufferCreateFlagBits = 1;
pub const VkBufferCreateFlagBits_VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT: VkBufferCreateFlagBits = 2;
pub const VkBufferCreateFlagBits_VK_BUFFER_CREATE_SPARSE_ALIASED_BIT: VkBufferCreateFlagBits = 4;
pub const VkBufferCreateFlagBits_VK_BUFFER_CREATE_PROTECTED_BIT: VkBufferCreateFlagBits = 8;
pub const VkBufferCreateFlagBits_VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT:
    VkBufferCreateFlagBits = 16;
pub const VkBufferCreateFlagBits_VK_BUFFER_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT:
    VkBufferCreateFlagBits = 32;
pub const VkBufferCreateFlagBits_VK_BUFFER_CREATE_VIDEO_PROFILE_INDEPENDENT_BIT_KHR:
    VkBufferCreateFlagBits = 64;
pub const VkBufferCreateFlagBits_VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT:
    VkBufferCreateFlagBits = 16;
pub const VkBufferCreateFlagBits_VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR:
    VkBufferCreateFlagBits = 16;
pub const VkBufferCreateFlagBits_VK_BUFFER_CREATE_FLAG_BITS_MAX_ENUM: VkBufferCreateFlagBits =
    2147483647;
pub const VkBufferUsageFlagBits_VK_BUFFER_USAGE_TRANSFER_SRC_BIT: VkBufferUsageFlagBits = 1;
pub const VkBufferUsageFlagBits_VK_BUFFER_USAGE_TRANSFER_DST_BIT: VkBufferUsageFlagBits = 2;
pub const VkBufferUsageFlagBits_VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT: VkBufferUsageFlagBits = 4;
pub const VkBufferUsageFlagBits_VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT: VkBufferUsageFlagBits = 8;
pub const VkBufferUsageFlagBits_VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT: VkBufferUsageFlagBits = 16;
pub const VkBufferUsageFlagBits_VK_BUFFER_USAGE_STORAGE_BUFFER_BIT: VkBufferUsageFlagBits = 32;
pub const VkBufferUsageFlagBits_VK_BUFFER_USAGE_INDEX_BUFFER_BIT: VkBufferUsageFlagBits = 64;
pub const VkBufferUsageFlagBits_VK_BUFFER_USAGE_VERTEX_BUFFER_BIT: VkBufferUsageFlagBits = 128;
pub const VkBufferUsageFlagBits_VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT: VkBufferUsageFlagBits = 256;
pub const VkBufferUsageFlagBits_VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT: VkBufferUsageFlagBits =
    131072;
pub const VkBufferUsageFlagBits_VK_BUFFER_USAGE_VIDEO_DECODE_SRC_BIT_KHR: VkBufferUsageFlagBits =
    8192;
pub const VkBufferUsageFlagBits_VK_BUFFER_USAGE_VIDEO_DECODE_DST_BIT_KHR: VkBufferUsageFlagBits =
    16384;
pub const VkBufferUsageFlagBits_VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT:
    VkBufferUsageFlagBits = 2048;
pub const VkBufferUsageFlagBits_VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT:
    VkBufferUsageFlagBits = 4096;
pub const VkBufferUsageFlagBits_VK_BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT:
    VkBufferUsageFlagBits = 512;
pub const VkBufferUsageFlagBits_VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY_BIT_KHR : VkBufferUsageFlagBits = 524288 ;
pub const VkBufferUsageFlagBits_VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_STORAGE_BIT_KHR:
    VkBufferUsageFlagBits = 1048576;
pub const VkBufferUsageFlagBits_VK_BUFFER_USAGE_SHADER_BINDING_TABLE_BIT_KHR:
    VkBufferUsageFlagBits = 1024;
pub const VkBufferUsageFlagBits_VK_BUFFER_USAGE_VIDEO_ENCODE_DST_BIT_KHR: VkBufferUsageFlagBits =
    32768;
pub const VkBufferUsageFlagBits_VK_BUFFER_USAGE_VIDEO_ENCODE_SRC_BIT_KHR: VkBufferUsageFlagBits =
    65536;
pub const VkBufferUsageFlagBits_VK_BUFFER_USAGE_SAMPLER_DESCRIPTOR_BUFFER_BIT_EXT:
    VkBufferUsageFlagBits = 2097152;
pub const VkBufferUsageFlagBits_VK_BUFFER_USAGE_RESOURCE_DESCRIPTOR_BUFFER_BIT_EXT:
    VkBufferUsageFlagBits = 4194304;
pub const VkBufferUsageFlagBits_VK_BUFFER_USAGE_PUSH_DESCRIPTORS_DESCRIPTOR_BUFFER_BIT_EXT:
    VkBufferUsageFlagBits = 67108864;
pub const VkBufferUsageFlagBits_VK_BUFFER_USAGE_MICROMAP_BUILD_INPUT_READ_ONLY_BIT_EXT:
    VkBufferUsageFlagBits = 8388608;
pub const VkBufferUsageFlagBits_VK_BUFFER_USAGE_MICROMAP_STORAGE_BIT_EXT: VkBufferUsageFlagBits =
    16777216;
pub const VkBufferUsageFlagBits_VK_BUFFER_USAGE_TILE_MEMORY_BIT_QCOM: VkBufferUsageFlagBits =
    134217728;
pub const VkBufferUsageFlagBits_VK_BUFFER_USAGE_RAY_TRACING_BIT_NV: VkBufferUsageFlagBits = 1024;
pub const VkBufferUsageFlagBits_VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_EXT:
    VkBufferUsageFlagBits = 131072;
pub const VkBufferUsageFlagBits_VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_KHR:
    VkBufferUsageFlagBits = 131072;
pub const VkBufferUsageFlagBits_VK_BUFFER_USAGE_FLAG_BITS_MAX_ENUM: VkBufferUsageFlagBits =
    2147483647;
pub const VkImageViewCreateFlagBits_VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT:
    VkImageViewCreateFlagBits = 1;
pub const VkImageViewCreateFlagBits_VK_IMAGE_VIEW_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT : VkImageViewCreateFlagBits = 4 ;
pub const VkImageViewCreateFlagBits_VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DEFERRED_BIT_EXT:
    VkImageViewCreateFlagBits = 2;
pub const VkImageViewCreateFlagBits_VK_IMAGE_VIEW_CREATE_FLAG_BITS_MAX_ENUM:
    VkImageViewCreateFlagBits = 2147483647;
pub const VkPipelineCacheCreateFlagBits_VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT:
    VkPipelineCacheCreateFlagBits = 1;
pub const VkPipelineCacheCreateFlagBits_VK_PIPELINE_CACHE_CREATE_INTERNALLY_SYNCHRONIZED_MERGE_BIT_KHR : VkPipelineCacheCreateFlagBits = 8 ;
pub const VkPipelineCacheCreateFlagBits_VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT_EXT:
    VkPipelineCacheCreateFlagBits = 1;
pub const VkPipelineCacheCreateFlagBits_VK_PIPELINE_CACHE_CREATE_FLAG_BITS_MAX_ENUM:
    VkPipelineCacheCreateFlagBits = 2147483647;
pub const VkColorComponentFlagBits_VK_COLOR_COMPONENT_R_BIT: VkColorComponentFlagBits = 1;
pub const VkColorComponentFlagBits_VK_COLOR_COMPONENT_G_BIT: VkColorComponentFlagBits = 2;
pub const VkColorComponentFlagBits_VK_COLOR_COMPONENT_B_BIT: VkColorComponentFlagBits = 4;
pub const VkColorComponentFlagBits_VK_COLOR_COMPONENT_A_BIT: VkColorComponentFlagBits = 8;
pub const VkColorComponentFlagBits_VK_COLOR_COMPONENT_FLAG_BITS_MAX_ENUM: VkColorComponentFlagBits =
    2147483647;
pub const VkPipelineCreateFlagBits_VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT:
    VkPipelineCreateFlagBits = 1;
pub const VkPipelineCreateFlagBits_VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT:
    VkPipelineCreateFlagBits = 2;
pub const VkPipelineCreateFlagBits_VK_PIPELINE_CREATE_DERIVATIVE_BIT: VkPipelineCreateFlagBits = 4;
pub const VkPipelineCreateFlagBits_VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT:
    VkPipelineCreateFlagBits = 8;
pub const VkPipelineCreateFlagBits_VK_PIPELINE_CREATE_DISPATCH_BASE_BIT: VkPipelineCreateFlagBits =
    16;
pub const VkPipelineCreateFlagBits_VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT:
    VkPipelineCreateFlagBits = 256;
pub const VkPipelineCreateFlagBits_VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT:
    VkPipelineCreateFlagBits = 512;
pub const VkPipelineCreateFlagBits_VK_PIPELINE_CREATE_NO_PROTECTED_ACCESS_BIT:
    VkPipelineCreateFlagBits = 134217728;
pub const VkPipelineCreateFlagBits_VK_PIPELINE_CREATE_PROTECTED_ACCESS_ONLY_BIT:
    VkPipelineCreateFlagBits = 1073741824;
pub const VkPipelineCreateFlagBits_VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_BIT_KHR : VkPipelineCreateFlagBits = 16384 ;
pub const VkPipelineCreateFlagBits_VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_CLOSEST_HIT_SHADERS_BIT_KHR : VkPipelineCreateFlagBits = 32768 ;
pub const VkPipelineCreateFlagBits_VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR:
    VkPipelineCreateFlagBits = 65536;
pub const VkPipelineCreateFlagBits_VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR : VkPipelineCreateFlagBits = 131072 ;
pub const VkPipelineCreateFlagBits_VK_PIPELINE_CREATE_RAY_TRACING_SKIP_TRIANGLES_BIT_KHR:
    VkPipelineCreateFlagBits = 4096;
pub const VkPipelineCreateFlagBits_VK_PIPELINE_CREATE_RAY_TRACING_SKIP_AABBS_BIT_KHR:
    VkPipelineCreateFlagBits = 8192;
pub const VkPipelineCreateFlagBits_VK_PIPELINE_CREATE_RAY_TRACING_SHADER_GROUP_HANDLE_CAPTURE_REPLAY_BIT_KHR : VkPipelineCreateFlagBits = 524288 ;
pub const VkPipelineCreateFlagBits_VK_PIPELINE_CREATE_DEFER_COMPILE_BIT_NV:
    VkPipelineCreateFlagBits = 32;
pub const VkPipelineCreateFlagBits_VK_PIPELINE_CREATE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT : VkPipelineCreateFlagBits = 4194304 ;
pub const VkPipelineCreateFlagBits_VK_PIPELINE_CREATE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR : VkPipelineCreateFlagBits = 2097152 ;
pub const VkPipelineCreateFlagBits_VK_PIPELINE_CREATE_CAPTURE_STATISTICS_BIT_KHR:
    VkPipelineCreateFlagBits = 64;
pub const VkPipelineCreateFlagBits_VK_PIPELINE_CREATE_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR:
    VkPipelineCreateFlagBits = 128;
pub const VkPipelineCreateFlagBits_VK_PIPELINE_CREATE_INDIRECT_BINDABLE_BIT_NV:
    VkPipelineCreateFlagBits = 262144;
pub const VkPipelineCreateFlagBits_VK_PIPELINE_CREATE_LIBRARY_BIT_KHR: VkPipelineCreateFlagBits =
    2048;
pub const VkPipelineCreateFlagBits_VK_PIPELINE_CREATE_DESCRIPTOR_BUFFER_BIT_EXT:
    VkPipelineCreateFlagBits = 536870912;
pub const VkPipelineCreateFlagBits_VK_PIPELINE_CREATE_RETAIN_LINK_TIME_OPTIMIZATION_INFO_BIT_EXT:
    VkPipelineCreateFlagBits = 8388608;
pub const VkPipelineCreateFlagBits_VK_PIPELINE_CREATE_LINK_TIME_OPTIMIZATION_BIT_EXT:
    VkPipelineCreateFlagBits = 1024;
pub const VkPipelineCreateFlagBits_VK_PIPELINE_CREATE_RAY_TRACING_ALLOW_MOTION_BIT_NV:
    VkPipelineCreateFlagBits = 1048576;
pub const VkPipelineCreateFlagBits_VK_PIPELINE_CREATE_COLOR_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT:
    VkPipelineCreateFlagBits = 33554432;
pub const VkPipelineCreateFlagBits_VK_PIPELINE_CREATE_DEPTH_STENCIL_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT : VkPipelineCreateFlagBits = 67108864 ;
pub const VkPipelineCreateFlagBits_VK_PIPELINE_CREATE_RAY_TRACING_OPACITY_MICROMAP_BIT_EXT:
    VkPipelineCreateFlagBits = 16777216;
pub const VkPipelineCreateFlagBits_VK_PIPELINE_CREATE_DISPATCH_BASE: VkPipelineCreateFlagBits = 16;
pub const VkPipelineCreateFlagBits_VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHR:
    VkPipelineCreateFlagBits = 8;
pub const VkPipelineCreateFlagBits_VK_PIPELINE_CREATE_DISPATCH_BASE_KHR: VkPipelineCreateFlagBits =
    16;
#[doc = " VK_PIPELINE_RASTERIZATION_STATE_CREATE_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT is a deprecated alias"]
pub const VkPipelineCreateFlagBits_VK_PIPELINE_RASTERIZATION_STATE_CREATE_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT : VkPipelineCreateFlagBits = 4194304 ;
#[doc = " VK_PIPELINE_RASTERIZATION_STATE_CREATE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR is a deprecated alias"]
pub const VkPipelineCreateFlagBits_VK_PIPELINE_RASTERIZATION_STATE_CREATE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR : VkPipelineCreateFlagBits = 2097152 ;
#[doc = " VK_PIPELINE_RASTERIZATION_STATE_CREATE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR is a deprecated alias"]
pub const VkPipelineCreateFlagBits_VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT_EXT:
    VkPipelineCreateFlagBits = 256;
#[doc = " VK_PIPELINE_RASTERIZATION_STATE_CREATE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR is a deprecated alias"]
pub const VkPipelineCreateFlagBits_VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT_EXT:
    VkPipelineCreateFlagBits = 512;
#[doc = " VK_PIPELINE_RASTERIZATION_STATE_CREATE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR is a deprecated alias"]
pub const VkPipelineCreateFlagBits_VK_PIPELINE_CREATE_NO_PROTECTED_ACCESS_BIT_EXT:
    VkPipelineCreateFlagBits = 134217728;
#[doc = " VK_PIPELINE_RASTERIZATION_STATE_CREATE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR is a deprecated alias"]
pub const VkPipelineCreateFlagBits_VK_PIPELINE_CREATE_PROTECTED_ACCESS_ONLY_BIT_EXT:
    VkPipelineCreateFlagBits = 1073741824;
#[doc = " VK_PIPELINE_RASTERIZATION_STATE_CREATE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR is a deprecated alias"]
pub const VkPipelineCreateFlagBits_VK_PIPELINE_CREATE_FLAG_BITS_MAX_ENUM: VkPipelineCreateFlagBits =
    2147483647;
pub const VkPipelineShaderStageCreateFlagBits_VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT : VkPipelineShaderStageCreateFlagBits = 1 ;
pub const VkPipelineShaderStageCreateFlagBits_VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT : VkPipelineShaderStageCreateFlagBits = 2 ;
pub const VkPipelineShaderStageCreateFlagBits_VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT : VkPipelineShaderStageCreateFlagBits = 1 ;
pub const VkPipelineShaderStageCreateFlagBits_VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT : VkPipelineShaderStageCreateFlagBits = 2 ;
pub const VkPipelineShaderStageCreateFlagBits_VK_PIPELINE_SHADER_STAGE_CREATE_FLAG_BITS_MAX_ENUM:
    VkPipelineShaderStageCreateFlagBits = 2147483647;
pub const VkShaderStageFlagBits_VK_SHADER_STAGE_VERTEX_BIT: VkShaderStageFlagBits = 1;
pub const VkShaderStageFlagBits_VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT: VkShaderStageFlagBits = 2;
pub const VkShaderStageFlagBits_VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT: VkShaderStageFlagBits =
    4;
pub const VkShaderStageFlagBits_VK_SHADER_STAGE_GEOMETRY_BIT: VkShaderStageFlagBits = 8;
pub const VkShaderStageFlagBits_VK_SHADER_STAGE_FRAGMENT_BIT: VkShaderStageFlagBits = 16;
pub const VkShaderStageFlagBits_VK_SHADER_STAGE_COMPUTE_BIT: VkShaderStageFlagBits = 32;
pub const VkShaderStageFlagBits_VK_SHADER_STAGE_ALL_GRAPHICS: VkShaderStageFlagBits = 31;
pub const VkShaderStageFlagBits_VK_SHADER_STAGE_ALL: VkShaderStageFlagBits = 2147483647;
pub const VkShaderStageFlagBits_VK_SHADER_STAGE_RAYGEN_BIT_KHR: VkShaderStageFlagBits = 256;
pub const VkShaderStageFlagBits_VK_SHADER_STAGE_ANY_HIT_BIT_KHR: VkShaderStageFlagBits = 512;
pub const VkShaderStageFlagBits_VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR: VkShaderStageFlagBits = 1024;
pub const VkShaderStageFlagBits_VK_SHADER_STAGE_MISS_BIT_KHR: VkShaderStageFlagBits = 2048;
pub const VkShaderStageFlagBits_VK_SHADER_STAGE_INTERSECTION_BIT_KHR: VkShaderStageFlagBits = 4096;
pub const VkShaderStageFlagBits_VK_SHADER_STAGE_CALLABLE_BIT_KHR: VkShaderStageFlagBits = 8192;
pub const VkShaderStageFlagBits_VK_SHADER_STAGE_TASK_BIT_EXT: VkShaderStageFlagBits = 64;
pub const VkShaderStageFlagBits_VK_SHADER_STAGE_MESH_BIT_EXT: VkShaderStageFlagBits = 128;
pub const VkShaderStageFlagBits_VK_SHADER_STAGE_SUBPASS_SHADING_BIT_HUAWEI: VkShaderStageFlagBits =
    16384;
pub const VkShaderStageFlagBits_VK_SHADER_STAGE_CLUSTER_CULLING_BIT_HUAWEI: VkShaderStageFlagBits =
    524288;
pub const VkShaderStageFlagBits_VK_SHADER_STAGE_RAYGEN_BIT_NV: VkShaderStageFlagBits = 256;
pub const VkShaderStageFlagBits_VK_SHADER_STAGE_ANY_HIT_BIT_NV: VkShaderStageFlagBits = 512;
pub const VkShaderStageFlagBits_VK_SHADER_STAGE_CLOSEST_HIT_BIT_NV: VkShaderStageFlagBits = 1024;
pub const VkShaderStageFlagBits_VK_SHADER_STAGE_MISS_BIT_NV: VkShaderStageFlagBits = 2048;
pub const VkShaderStageFlagBits_VK_SHADER_STAGE_INTERSECTION_BIT_NV: VkShaderStageFlagBits = 4096;
pub const VkShaderStageFlagBits_VK_SHADER_STAGE_CALLABLE_BIT_NV: VkShaderStageFlagBits = 8192;
pub const VkShaderStageFlagBits_VK_SHADER_STAGE_TASK_BIT_NV: VkShaderStageFlagBits = 64;
pub const VkShaderStageFlagBits_VK_SHADER_STAGE_MESH_BIT_NV: VkShaderStageFlagBits = 128;
pub const VkShaderStageFlagBits_VK_SHADER_STAGE_FLAG_BITS_MAX_ENUM: VkShaderStageFlagBits =
    2147483647;
pub const VkCullModeFlagBits_VK_CULL_MODE_NONE: VkCullModeFlagBits = 0;
pub const VkCullModeFlagBits_VK_CULL_MODE_FRONT_BIT: VkCullModeFlagBits = 1;
pub const VkCullModeFlagBits_VK_CULL_MODE_BACK_BIT: VkCullModeFlagBits = 2;
pub const VkCullModeFlagBits_VK_CULL_MODE_FRONT_AND_BACK: VkCullModeFlagBits = 3;
pub const VkCullModeFlagBits_VK_CULL_MODE_FLAG_BITS_MAX_ENUM: VkCullModeFlagBits = 2147483647;
pub const VkPipelineDepthStencilStateCreateFlagBits_VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_EXT : VkPipelineDepthStencilStateCreateFlagBits = 1 ;
pub const VkPipelineDepthStencilStateCreateFlagBits_VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_EXT : VkPipelineDepthStencilStateCreateFlagBits = 2 ;
pub const VkPipelineDepthStencilStateCreateFlagBits_VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_ARM : VkPipelineDepthStencilStateCreateFlagBits = 1 ;
pub const VkPipelineDepthStencilStateCreateFlagBits_VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_ARM : VkPipelineDepthStencilStateCreateFlagBits = 2 ;
pub const VkPipelineDepthStencilStateCreateFlagBits_VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_FLAG_BITS_MAX_ENUM : VkPipelineDepthStencilStateCreateFlagBits = 2147483647 ;
pub const VkPipelineColorBlendStateCreateFlagBits_VK_PIPELINE_COLOR_BLEND_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_BIT_EXT : VkPipelineColorBlendStateCreateFlagBits = 1 ;
pub const VkPipelineColorBlendStateCreateFlagBits_VK_PIPELINE_COLOR_BLEND_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_BIT_ARM : VkPipelineColorBlendStateCreateFlagBits = 1 ;
pub const VkPipelineColorBlendStateCreateFlagBits_VK_PIPELINE_COLOR_BLEND_STATE_CREATE_FLAG_BITS_MAX_ENUM : VkPipelineColorBlendStateCreateFlagBits = 2147483647 ;
pub const VkPipelineLayoutCreateFlagBits_VK_PIPELINE_LAYOUT_CREATE_INDEPENDENT_SETS_BIT_EXT:
    VkPipelineLayoutCreateFlagBits = 2;
pub const VkPipelineLayoutCreateFlagBits_VK_PIPELINE_LAYOUT_CREATE_FLAG_BITS_MAX_ENUM:
    VkPipelineLayoutCreateFlagBits = 2147483647;
pub const VkSamplerCreateFlagBits_VK_SAMPLER_CREATE_SUBSAMPLED_BIT_EXT: VkSamplerCreateFlagBits = 1;
pub const VkSamplerCreateFlagBits_VK_SAMPLER_CREATE_SUBSAMPLED_COARSE_RECONSTRUCTION_BIT_EXT:
    VkSamplerCreateFlagBits = 2;
pub const VkSamplerCreateFlagBits_VK_SAMPLER_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT:
    VkSamplerCreateFlagBits = 8;
pub const VkSamplerCreateFlagBits_VK_SAMPLER_CREATE_NON_SEAMLESS_CUBE_MAP_BIT_EXT:
    VkSamplerCreateFlagBits = 4;
pub const VkSamplerCreateFlagBits_VK_SAMPLER_CREATE_IMAGE_PROCESSING_BIT_QCOM:
    VkSamplerCreateFlagBits = 16;
pub const VkSamplerCreateFlagBits_VK_SAMPLER_CREATE_FLAG_BITS_MAX_ENUM: VkSamplerCreateFlagBits =
    2147483647;
pub const VkDescriptorPoolCreateFlagBits_VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT:
    VkDescriptorPoolCreateFlagBits = 1;
pub const VkDescriptorPoolCreateFlagBits_VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT:
    VkDescriptorPoolCreateFlagBits = 2;
pub const VkDescriptorPoolCreateFlagBits_VK_DESCRIPTOR_POOL_CREATE_HOST_ONLY_BIT_EXT:
    VkDescriptorPoolCreateFlagBits = 4;
pub const VkDescriptorPoolCreateFlagBits_VK_DESCRIPTOR_POOL_CREATE_ALLOW_OVERALLOCATION_SETS_BIT_NV : VkDescriptorPoolCreateFlagBits = 8 ;
pub const VkDescriptorPoolCreateFlagBits_VK_DESCRIPTOR_POOL_CREATE_ALLOW_OVERALLOCATION_POOLS_BIT_NV : VkDescriptorPoolCreateFlagBits = 16 ;
pub const VkDescriptorPoolCreateFlagBits_VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT_EXT:
    VkDescriptorPoolCreateFlagBits = 2;
pub const VkDescriptorPoolCreateFlagBits_VK_DESCRIPTOR_POOL_CREATE_HOST_ONLY_BIT_VALVE:
    VkDescriptorPoolCreateFlagBits = 4;
pub const VkDescriptorPoolCreateFlagBits_VK_DESCRIPTOR_POOL_CREATE_FLAG_BITS_MAX_ENUM:
    VkDescriptorPoolCreateFlagBits = 2147483647;
pub const VkDescriptorSetLayoutCreateFlagBits_VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT : VkDescriptorSetLayoutCreateFlagBits = 2 ;
pub const VkDescriptorSetLayoutCreateFlagBits_VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT : VkDescriptorSetLayoutCreateFlagBits = 1 ;
pub const VkDescriptorSetLayoutCreateFlagBits_VK_DESCRIPTOR_SET_LAYOUT_CREATE_DESCRIPTOR_BUFFER_BIT_EXT : VkDescriptorSetLayoutCreateFlagBits = 16 ;
pub const VkDescriptorSetLayoutCreateFlagBits_VK_DESCRIPTOR_SET_LAYOUT_CREATE_EMBEDDED_IMMUTABLE_SAMPLERS_BIT_EXT : VkDescriptorSetLayoutCreateFlagBits = 32 ;
pub const VkDescriptorSetLayoutCreateFlagBits_VK_DESCRIPTOR_SET_LAYOUT_CREATE_INDIRECT_BINDABLE_BIT_NV : VkDescriptorSetLayoutCreateFlagBits = 128 ;
pub const VkDescriptorSetLayoutCreateFlagBits_VK_DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_EXT : VkDescriptorSetLayoutCreateFlagBits = 4 ;
pub const VkDescriptorSetLayoutCreateFlagBits_VK_DESCRIPTOR_SET_LAYOUT_CREATE_PER_STAGE_BIT_NV:
    VkDescriptorSetLayoutCreateFlagBits = 64;
pub const VkDescriptorSetLayoutCreateFlagBits_VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR : VkDescriptorSetLayoutCreateFlagBits = 1 ;
pub const VkDescriptorSetLayoutCreateFlagBits_VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT : VkDescriptorSetLayoutCreateFlagBits = 2 ;
pub const VkDescriptorSetLayoutCreateFlagBits_VK_DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_VALVE : VkDescriptorSetLayoutCreateFlagBits = 4 ;
pub const VkDescriptorSetLayoutCreateFlagBits_VK_DESCRIPTOR_SET_LAYOUT_CREATE_FLAG_BITS_MAX_ENUM:
    VkDescriptorSetLayoutCreateFlagBits = 2147483647;
pub const VkAttachmentDescriptionFlagBits_VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT:
    VkAttachmentDescriptionFlagBits = 1;
pub const VkAttachmentDescriptionFlagBits_VK_ATTACHMENT_DESCRIPTION_FLAG_BITS_MAX_ENUM:
    VkAttachmentDescriptionFlagBits = 2147483647;
pub const VkDependencyFlagBits_VK_DEPENDENCY_BY_REGION_BIT: VkDependencyFlagBits = 1;
pub const VkDependencyFlagBits_VK_DEPENDENCY_DEVICE_GROUP_BIT: VkDependencyFlagBits = 4;
pub const VkDependencyFlagBits_VK_DEPENDENCY_VIEW_LOCAL_BIT: VkDependencyFlagBits = 2;
pub const VkDependencyFlagBits_VK_DEPENDENCY_FEEDBACK_LOOP_BIT_EXT: VkDependencyFlagBits = 8;
pub const VkDependencyFlagBits_VK_DEPENDENCY_QUEUE_FAMILY_OWNERSHIP_TRANSFER_USE_ALL_STAGES_BIT_KHR : VkDependencyFlagBits = 32 ;
pub const VkDependencyFlagBits_VK_DEPENDENCY_VIEW_LOCAL_BIT_KHR: VkDependencyFlagBits = 2;
pub const VkDependencyFlagBits_VK_DEPENDENCY_DEVICE_GROUP_BIT_KHR: VkDependencyFlagBits = 4;
pub const VkDependencyFlagBits_VK_DEPENDENCY_FLAG_BITS_MAX_ENUM: VkDependencyFlagBits = 2147483647;
pub const VkFramebufferCreateFlagBits_VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT:
    VkFramebufferCreateFlagBits = 1;
pub const VkFramebufferCreateFlagBits_VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT_KHR:
    VkFramebufferCreateFlagBits = 1;
pub const VkFramebufferCreateFlagBits_VK_FRAMEBUFFER_CREATE_FLAG_BITS_MAX_ENUM:
    VkFramebufferCreateFlagBits = 2147483647;
pub const VkRenderPassCreateFlagBits_VK_RENDER_PASS_CREATE_TRANSFORM_BIT_QCOM:
    VkRenderPassCreateFlagBits = 2;
pub const VkRenderPassCreateFlagBits_VK_RENDER_PASS_CREATE_FLAG_BITS_MAX_ENUM:
    VkRenderPassCreateFlagBits = 2147483647;
pub const VkSubpassDescriptionFlagBits_VK_SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX:
    VkSubpassDescriptionFlagBits = 1;
pub const VkSubpassDescriptionFlagBits_VK_SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX:
    VkSubpassDescriptionFlagBits = 2;
pub const VkSubpassDescriptionFlagBits_VK_SUBPASS_DESCRIPTION_FRAGMENT_REGION_BIT_QCOM:
    VkSubpassDescriptionFlagBits = 4;
pub const VkSubpassDescriptionFlagBits_VK_SUBPASS_DESCRIPTION_SHADER_RESOLVE_BIT_QCOM:
    VkSubpassDescriptionFlagBits = 8;
pub const VkSubpassDescriptionFlagBits_VK_SUBPASS_DESCRIPTION_TILE_SHADING_APRON_BIT_QCOM:
    VkSubpassDescriptionFlagBits = 256;
pub const VkSubpassDescriptionFlagBits_VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_COLOR_ACCESS_BIT_EXT : VkSubpassDescriptionFlagBits = 16 ;
pub const VkSubpassDescriptionFlagBits_VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_EXT : VkSubpassDescriptionFlagBits = 32 ;
pub const VkSubpassDescriptionFlagBits_VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_EXT : VkSubpassDescriptionFlagBits = 64 ;
pub const VkSubpassDescriptionFlagBits_VK_SUBPASS_DESCRIPTION_ENABLE_LEGACY_DITHERING_BIT_EXT:
    VkSubpassDescriptionFlagBits = 128;
pub const VkSubpassDescriptionFlagBits_VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_COLOR_ACCESS_BIT_ARM : VkSubpassDescriptionFlagBits = 16 ;
pub const VkSubpassDescriptionFlagBits_VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_ARM : VkSubpassDescriptionFlagBits = 32 ;
pub const VkSubpassDescriptionFlagBits_VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_ARM : VkSubpassDescriptionFlagBits = 64 ;
pub const VkSubpassDescriptionFlagBits_VK_SUBPASS_DESCRIPTION_FLAG_BITS_MAX_ENUM:
    VkSubpassDescriptionFlagBits = 2147483647;
pub const VkCommandPoolCreateFlagBits_VK_COMMAND_POOL_CREATE_TRANSIENT_BIT:
    VkCommandPoolCreateFlagBits = 1;
pub const VkCommandPoolCreateFlagBits_VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT:
    VkCommandPoolCreateFlagBits = 2;
pub const VkCommandPoolCreateFlagBits_VK_COMMAND_POOL_CREATE_PROTECTED_BIT:
    VkCommandPoolCreateFlagBits = 4;
pub const VkCommandPoolCreateFlagBits_VK_COMMAND_POOL_CREATE_FLAG_BITS_MAX_ENUM:
    VkCommandPoolCreateFlagBits = 2147483647;
pub const VkCommandPoolResetFlagBits_VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT:
    VkCommandPoolResetFlagBits = 1;
pub const VkCommandPoolResetFlagBits_VK_COMMAND_POOL_RESET_FLAG_BITS_MAX_ENUM:
    VkCommandPoolResetFlagBits = 2147483647;
pub const VkCommandBufferUsageFlagBits_VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT:
    VkCommandBufferUsageFlagBits = 1;
pub const VkCommandBufferUsageFlagBits_VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT:
    VkCommandBufferUsageFlagBits = 2;
pub const VkCommandBufferUsageFlagBits_VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT:
    VkCommandBufferUsageFlagBits = 4;
pub const VkCommandBufferUsageFlagBits_VK_COMMAND_BUFFER_USAGE_FLAG_BITS_MAX_ENUM:
    VkCommandBufferUsageFlagBits = 2147483647;
pub const VkQueryControlFlagBits_VK_QUERY_CONTROL_PRECISE_BIT: VkQueryControlFlagBits = 1;
pub const VkQueryControlFlagBits_VK_QUERY_CONTROL_FLAG_BITS_MAX_ENUM: VkQueryControlFlagBits =
    2147483647;
pub const VkCommandBufferResetFlagBits_VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT:
    VkCommandBufferResetFlagBits = 1;
pub const VkCommandBufferResetFlagBits_VK_COMMAND_BUFFER_RESET_FLAG_BITS_MAX_ENUM:
    VkCommandBufferResetFlagBits = 2147483647;
pub const VkStencilFaceFlagBits_VK_STENCIL_FACE_FRONT_BIT: VkStencilFaceFlagBits = 1;
pub const VkStencilFaceFlagBits_VK_STENCIL_FACE_BACK_BIT: VkStencilFaceFlagBits = 2;
pub const VkStencilFaceFlagBits_VK_STENCIL_FACE_FRONT_AND_BACK: VkStencilFaceFlagBits = 3;
#[doc = " VK_STENCIL_FRONT_AND_BACK is a deprecated alias"]
pub const VkStencilFaceFlagBits_VK_STENCIL_FRONT_AND_BACK: VkStencilFaceFlagBits = 3;
#[doc = " VK_STENCIL_FRONT_AND_BACK is a deprecated alias"]
pub const VkStencilFaceFlagBits_VK_STENCIL_FACE_FLAG_BITS_MAX_ENUM: VkStencilFaceFlagBits =
    2147483647;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkExtent2D"][::core::mem::size_of::<VkExtent2D>() - 8usize];
    ["Alignment of VkExtent2D"][::core::mem::align_of::<VkExtent2D>() - 4usize];
    ["Offset of field: VkExtent2D::width"][::core::mem::offset_of!(VkExtent2D, width) - 0usize];
    ["Offset of field: VkExtent2D::height"][::core::mem::offset_of!(VkExtent2D, height) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkExtent3D"][::core::mem::size_of::<VkExtent3D>() - 12usize];
    ["Alignment of VkExtent3D"][::core::mem::align_of::<VkExtent3D>() - 4usize];
    ["Offset of field: VkExtent3D::width"][::core::mem::offset_of!(VkExtent3D, width) - 0usize];
    ["Offset of field: VkExtent3D::height"][::core::mem::offset_of!(VkExtent3D, height) - 4usize];
    ["Offset of field: VkExtent3D::depth"][::core::mem::offset_of!(VkExtent3D, depth) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkOffset2D"][::core::mem::size_of::<VkOffset2D>() - 8usize];
    ["Alignment of VkOffset2D"][::core::mem::align_of::<VkOffset2D>() - 4usize];
    ["Offset of field: VkOffset2D::x"][::core::mem::offset_of!(VkOffset2D, x) - 0usize];
    ["Offset of field: VkOffset2D::y"][::core::mem::offset_of!(VkOffset2D, y) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkOffset3D"][::core::mem::size_of::<VkOffset3D>() - 12usize];
    ["Alignment of VkOffset3D"][::core::mem::align_of::<VkOffset3D>() - 4usize];
    ["Offset of field: VkOffset3D::x"][::core::mem::offset_of!(VkOffset3D, x) - 0usize];
    ["Offset of field: VkOffset3D::y"][::core::mem::offset_of!(VkOffset3D, y) - 4usize];
    ["Offset of field: VkOffset3D::z"][::core::mem::offset_of!(VkOffset3D, z) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkRect2D"][::core::mem::size_of::<VkRect2D>() - 16usize];
    ["Alignment of VkRect2D"][::core::mem::align_of::<VkRect2D>() - 4usize];
    ["Offset of field: VkRect2D::offset"][::core::mem::offset_of!(VkRect2D, offset) - 0usize];
    ["Offset of field: VkRect2D::extent"][::core::mem::offset_of!(VkRect2D, extent) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkBaseInStructure"][::core::mem::size_of::<VkBaseInStructure>() - 8usize];
    ["Alignment of VkBaseInStructure"][::core::mem::align_of::<VkBaseInStructure>() - 4usize];
    ["Offset of field: VkBaseInStructure::sType"]
        [::core::mem::offset_of!(VkBaseInStructure, sType) - 0usize];
    ["Offset of field: VkBaseInStructure::pNext"]
        [::core::mem::offset_of!(VkBaseInStructure, pNext) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkBaseOutStructure"][::core::mem::size_of::<VkBaseOutStructure>() - 8usize];
    ["Alignment of VkBaseOutStructure"][::core::mem::align_of::<VkBaseOutStructure>() - 4usize];
    ["Offset of field: VkBaseOutStructure::sType"]
        [::core::mem::offset_of!(VkBaseOutStructure, sType) - 0usize];
    ["Offset of field: VkBaseOutStructure::pNext"]
        [::core::mem::offset_of!(VkBaseOutStructure, pNext) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkBufferMemoryBarrier"][::core::mem::size_of::<VkBufferMemoryBarrier>() - 48usize];
    ["Alignment of VkBufferMemoryBarrier"]
        [::core::mem::align_of::<VkBufferMemoryBarrier>() - 8usize];
    ["Offset of field: VkBufferMemoryBarrier::sType"]
        [::core::mem::offset_of!(VkBufferMemoryBarrier, sType) - 0usize];
    ["Offset of field: VkBufferMemoryBarrier::pNext"]
        [::core::mem::offset_of!(VkBufferMemoryBarrier, pNext) - 4usize];
    ["Offset of field: VkBufferMemoryBarrier::srcAccessMask"]
        [::core::mem::offset_of!(VkBufferMemoryBarrier, srcAccessMask) - 8usize];
    ["Offset of field: VkBufferMemoryBarrier::dstAccessMask"]
        [::core::mem::offset_of!(VkBufferMemoryBarrier, dstAccessMask) - 12usize];
    ["Offset of field: VkBufferMemoryBarrier::srcQueueFamilyIndex"]
        [::core::mem::offset_of!(VkBufferMemoryBarrier, srcQueueFamilyIndex) - 16usize];
    ["Offset of field: VkBufferMemoryBarrier::dstQueueFamilyIndex"]
        [::core::mem::offset_of!(VkBufferMemoryBarrier, dstQueueFamilyIndex) - 20usize];
    ["Offset of field: VkBufferMemoryBarrier::buffer"]
        [::core::mem::offset_of!(VkBufferMemoryBarrier, buffer) - 24usize];
    ["Offset of field: VkBufferMemoryBarrier::offset"]
        [::core::mem::offset_of!(VkBufferMemoryBarrier, offset) - 32usize];
    ["Offset of field: VkBufferMemoryBarrier::size"]
        [::core::mem::offset_of!(VkBufferMemoryBarrier, size) - 40usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDispatchIndirectCommand"]
        [::core::mem::size_of::<VkDispatchIndirectCommand>() - 12usize];
    ["Alignment of VkDispatchIndirectCommand"]
        [::core::mem::align_of::<VkDispatchIndirectCommand>() - 4usize];
    ["Offset of field: VkDispatchIndirectCommand::x"]
        [::core::mem::offset_of!(VkDispatchIndirectCommand, x) - 0usize];
    ["Offset of field: VkDispatchIndirectCommand::y"]
        [::core::mem::offset_of!(VkDispatchIndirectCommand, y) - 4usize];
    ["Offset of field: VkDispatchIndirectCommand::z"]
        [::core::mem::offset_of!(VkDispatchIndirectCommand, z) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDrawIndexedIndirectCommand"]
        [::core::mem::size_of::<VkDrawIndexedIndirectCommand>() - 20usize];
    ["Alignment of VkDrawIndexedIndirectCommand"]
        [::core::mem::align_of::<VkDrawIndexedIndirectCommand>() - 4usize];
    ["Offset of field: VkDrawIndexedIndirectCommand::indexCount"]
        [::core::mem::offset_of!(VkDrawIndexedIndirectCommand, indexCount) - 0usize];
    ["Offset of field: VkDrawIndexedIndirectCommand::instanceCount"]
        [::core::mem::offset_of!(VkDrawIndexedIndirectCommand, instanceCount) - 4usize];
    ["Offset of field: VkDrawIndexedIndirectCommand::firstIndex"]
        [::core::mem::offset_of!(VkDrawIndexedIndirectCommand, firstIndex) - 8usize];
    ["Offset of field: VkDrawIndexedIndirectCommand::vertexOffset"]
        [::core::mem::offset_of!(VkDrawIndexedIndirectCommand, vertexOffset) - 12usize];
    ["Offset of field: VkDrawIndexedIndirectCommand::firstInstance"]
        [::core::mem::offset_of!(VkDrawIndexedIndirectCommand, firstInstance) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDrawIndirectCommand"][::core::mem::size_of::<VkDrawIndirectCommand>() - 16usize];
    ["Alignment of VkDrawIndirectCommand"]
        [::core::mem::align_of::<VkDrawIndirectCommand>() - 4usize];
    ["Offset of field: VkDrawIndirectCommand::vertexCount"]
        [::core::mem::offset_of!(VkDrawIndirectCommand, vertexCount) - 0usize];
    ["Offset of field: VkDrawIndirectCommand::instanceCount"]
        [::core::mem::offset_of!(VkDrawIndirectCommand, instanceCount) - 4usize];
    ["Offset of field: VkDrawIndirectCommand::firstVertex"]
        [::core::mem::offset_of!(VkDrawIndirectCommand, firstVertex) - 8usize];
    ["Offset of field: VkDrawIndirectCommand::firstInstance"]
        [::core::mem::offset_of!(VkDrawIndirectCommand, firstInstance) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkImageSubresourceRange"]
        [::core::mem::size_of::<VkImageSubresourceRange>() - 20usize];
    ["Alignment of VkImageSubresourceRange"]
        [::core::mem::align_of::<VkImageSubresourceRange>() - 4usize];
    ["Offset of field: VkImageSubresourceRange::aspectMask"]
        [::core::mem::offset_of!(VkImageSubresourceRange, aspectMask) - 0usize];
    ["Offset of field: VkImageSubresourceRange::baseMipLevel"]
        [::core::mem::offset_of!(VkImageSubresourceRange, baseMipLevel) - 4usize];
    ["Offset of field: VkImageSubresourceRange::levelCount"]
        [::core::mem::offset_of!(VkImageSubresourceRange, levelCount) - 8usize];
    ["Offset of field: VkImageSubresourceRange::baseArrayLayer"]
        [::core::mem::offset_of!(VkImageSubresourceRange, baseArrayLayer) - 12usize];
    ["Offset of field: VkImageSubresourceRange::layerCount"]
        [::core::mem::offset_of!(VkImageSubresourceRange, layerCount) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkImageMemoryBarrier"][::core::mem::size_of::<VkImageMemoryBarrier>() - 64usize];
    ["Alignment of VkImageMemoryBarrier"][::core::mem::align_of::<VkImageMemoryBarrier>() - 8usize];
    ["Offset of field: VkImageMemoryBarrier::sType"]
        [::core::mem::offset_of!(VkImageMemoryBarrier, sType) - 0usize];
    ["Offset of field: VkImageMemoryBarrier::pNext"]
        [::core::mem::offset_of!(VkImageMemoryBarrier, pNext) - 4usize];
    ["Offset of field: VkImageMemoryBarrier::srcAccessMask"]
        [::core::mem::offset_of!(VkImageMemoryBarrier, srcAccessMask) - 8usize];
    ["Offset of field: VkImageMemoryBarrier::dstAccessMask"]
        [::core::mem::offset_of!(VkImageMemoryBarrier, dstAccessMask) - 12usize];
    ["Offset of field: VkImageMemoryBarrier::oldLayout"]
        [::core::mem::offset_of!(VkImageMemoryBarrier, oldLayout) - 16usize];
    ["Offset of field: VkImageMemoryBarrier::newLayout"]
        [::core::mem::offset_of!(VkImageMemoryBarrier, newLayout) - 20usize];
    ["Offset of field: VkImageMemoryBarrier::srcQueueFamilyIndex"]
        [::core::mem::offset_of!(VkImageMemoryBarrier, srcQueueFamilyIndex) - 24usize];
    ["Offset of field: VkImageMemoryBarrier::dstQueueFamilyIndex"]
        [::core::mem::offset_of!(VkImageMemoryBarrier, dstQueueFamilyIndex) - 28usize];
    ["Offset of field: VkImageMemoryBarrier::image"]
        [::core::mem::offset_of!(VkImageMemoryBarrier, image) - 32usize];
    ["Offset of field: VkImageMemoryBarrier::subresourceRange"]
        [::core::mem::offset_of!(VkImageMemoryBarrier, subresourceRange) - 40usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkMemoryBarrier"][::core::mem::size_of::<VkMemoryBarrier>() - 16usize];
    ["Alignment of VkMemoryBarrier"][::core::mem::align_of::<VkMemoryBarrier>() - 4usize];
    ["Offset of field: VkMemoryBarrier::sType"]
        [::core::mem::offset_of!(VkMemoryBarrier, sType) - 0usize];
    ["Offset of field: VkMemoryBarrier::pNext"]
        [::core::mem::offset_of!(VkMemoryBarrier, pNext) - 4usize];
    ["Offset of field: VkMemoryBarrier::srcAccessMask"]
        [::core::mem::offset_of!(VkMemoryBarrier, srcAccessMask) - 8usize];
    ["Offset of field: VkMemoryBarrier::dstAccessMask"]
        [::core::mem::offset_of!(VkMemoryBarrier, dstAccessMask) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineCacheHeaderVersionOne"]
        [::core::mem::size_of::<VkPipelineCacheHeaderVersionOne>() - 32usize];
    ["Alignment of VkPipelineCacheHeaderVersionOne"]
        [::core::mem::align_of::<VkPipelineCacheHeaderVersionOne>() - 4usize];
    ["Offset of field: VkPipelineCacheHeaderVersionOne::headerSize"]
        [::core::mem::offset_of!(VkPipelineCacheHeaderVersionOne, headerSize) - 0usize];
    ["Offset of field: VkPipelineCacheHeaderVersionOne::headerVersion"]
        [::core::mem::offset_of!(VkPipelineCacheHeaderVersionOne, headerVersion) - 4usize];
    ["Offset of field: VkPipelineCacheHeaderVersionOne::vendorID"]
        [::core::mem::offset_of!(VkPipelineCacheHeaderVersionOne, vendorID) - 8usize];
    ["Offset of field: VkPipelineCacheHeaderVersionOne::deviceID"]
        [::core::mem::offset_of!(VkPipelineCacheHeaderVersionOne, deviceID) - 12usize];
    ["Offset of field: VkPipelineCacheHeaderVersionOne::pipelineCacheUUID"]
        [::core::mem::offset_of!(VkPipelineCacheHeaderVersionOne, pipelineCacheUUID) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkAllocationCallbacks"][::core::mem::size_of::<VkAllocationCallbacks>() - 24usize];
    ["Alignment of VkAllocationCallbacks"]
        [::core::mem::align_of::<VkAllocationCallbacks>() - 4usize];
    ["Offset of field: VkAllocationCallbacks::pUserData"]
        [::core::mem::offset_of!(VkAllocationCallbacks, pUserData) - 0usize];
    ["Offset of field: VkAllocationCallbacks::pfnAllocation"]
        [::core::mem::offset_of!(VkAllocationCallbacks, pfnAllocation) - 4usize];
    ["Offset of field: VkAllocationCallbacks::pfnReallocation"]
        [::core::mem::offset_of!(VkAllocationCallbacks, pfnReallocation) - 8usize];
    ["Offset of field: VkAllocationCallbacks::pfnFree"]
        [::core::mem::offset_of!(VkAllocationCallbacks, pfnFree) - 12usize];
    ["Offset of field: VkAllocationCallbacks::pfnInternalAllocation"]
        [::core::mem::offset_of!(VkAllocationCallbacks, pfnInternalAllocation) - 16usize];
    ["Offset of field: VkAllocationCallbacks::pfnInternalFree"]
        [::core::mem::offset_of!(VkAllocationCallbacks, pfnInternalFree) - 20usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkApplicationInfo"][::core::mem::size_of::<VkApplicationInfo>() - 28usize];
    ["Alignment of VkApplicationInfo"][::core::mem::align_of::<VkApplicationInfo>() - 4usize];
    ["Offset of field: VkApplicationInfo::sType"]
        [::core::mem::offset_of!(VkApplicationInfo, sType) - 0usize];
    ["Offset of field: VkApplicationInfo::pNext"]
        [::core::mem::offset_of!(VkApplicationInfo, pNext) - 4usize];
    ["Offset of field: VkApplicationInfo::pApplicationName"]
        [::core::mem::offset_of!(VkApplicationInfo, pApplicationName) - 8usize];
    ["Offset of field: VkApplicationInfo::applicationVersion"]
        [::core::mem::offset_of!(VkApplicationInfo, applicationVersion) - 12usize];
    ["Offset of field: VkApplicationInfo::pEngineName"]
        [::core::mem::offset_of!(VkApplicationInfo, pEngineName) - 16usize];
    ["Offset of field: VkApplicationInfo::engineVersion"]
        [::core::mem::offset_of!(VkApplicationInfo, engineVersion) - 20usize];
    ["Offset of field: VkApplicationInfo::apiVersion"]
        [::core::mem::offset_of!(VkApplicationInfo, apiVersion) - 24usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkFormatProperties"][::core::mem::size_of::<VkFormatProperties>() - 12usize];
    ["Alignment of VkFormatProperties"][::core::mem::align_of::<VkFormatProperties>() - 4usize];
    ["Offset of field: VkFormatProperties::linearTilingFeatures"]
        [::core::mem::offset_of!(VkFormatProperties, linearTilingFeatures) - 0usize];
    ["Offset of field: VkFormatProperties::optimalTilingFeatures"]
        [::core::mem::offset_of!(VkFormatProperties, optimalTilingFeatures) - 4usize];
    ["Offset of field: VkFormatProperties::bufferFeatures"]
        [::core::mem::offset_of!(VkFormatProperties, bufferFeatures) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkImageFormatProperties"]
        [::core::mem::size_of::<VkImageFormatProperties>() - 32usize];
    ["Alignment of VkImageFormatProperties"]
        [::core::mem::align_of::<VkImageFormatProperties>() - 8usize];
    ["Offset of field: VkImageFormatProperties::maxExtent"]
        [::core::mem::offset_of!(VkImageFormatProperties, maxExtent) - 0usize];
    ["Offset of field: VkImageFormatProperties::maxMipLevels"]
        [::core::mem::offset_of!(VkImageFormatProperties, maxMipLevels) - 12usize];
    ["Offset of field: VkImageFormatProperties::maxArrayLayers"]
        [::core::mem::offset_of!(VkImageFormatProperties, maxArrayLayers) - 16usize];
    ["Offset of field: VkImageFormatProperties::sampleCounts"]
        [::core::mem::offset_of!(VkImageFormatProperties, sampleCounts) - 20usize];
    ["Offset of field: VkImageFormatProperties::maxResourceSize"]
        [::core::mem::offset_of!(VkImageFormatProperties, maxResourceSize) - 24usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkInstanceCreateInfo"][::core::mem::size_of::<VkInstanceCreateInfo>() - 32usize];
    ["Alignment of VkInstanceCreateInfo"][::core::mem::align_of::<VkInstanceCreateInfo>() - 4usize];
    ["Offset of field: VkInstanceCreateInfo::sType"]
        [::core::mem::offset_of!(VkInstanceCreateInfo, sType) - 0usize];
    ["Offset of field: VkInstanceCreateInfo::pNext"]
        [::core::mem::offset_of!(VkInstanceCreateInfo, pNext) - 4usize];
    ["Offset of field: VkInstanceCreateInfo::flags"]
        [::core::mem::offset_of!(VkInstanceCreateInfo, flags) - 8usize];
    ["Offset of field: VkInstanceCreateInfo::pApplicationInfo"]
        [::core::mem::offset_of!(VkInstanceCreateInfo, pApplicationInfo) - 12usize];
    ["Offset of field: VkInstanceCreateInfo::enabledLayerCount"]
        [::core::mem::offset_of!(VkInstanceCreateInfo, enabledLayerCount) - 16usize];
    ["Offset of field: VkInstanceCreateInfo::ppEnabledLayerNames"]
        [::core::mem::offset_of!(VkInstanceCreateInfo, ppEnabledLayerNames) - 20usize];
    ["Offset of field: VkInstanceCreateInfo::enabledExtensionCount"]
        [::core::mem::offset_of!(VkInstanceCreateInfo, enabledExtensionCount) - 24usize];
    ["Offset of field: VkInstanceCreateInfo::ppEnabledExtensionNames"]
        [::core::mem::offset_of!(VkInstanceCreateInfo, ppEnabledExtensionNames) - 28usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkMemoryHeap"][::core::mem::size_of::<VkMemoryHeap>() - 16usize];
    ["Alignment of VkMemoryHeap"][::core::mem::align_of::<VkMemoryHeap>() - 8usize];
    ["Offset of field: VkMemoryHeap::size"][::core::mem::offset_of!(VkMemoryHeap, size) - 0usize];
    ["Offset of field: VkMemoryHeap::flags"][::core::mem::offset_of!(VkMemoryHeap, flags) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkMemoryType"][::core::mem::size_of::<VkMemoryType>() - 8usize];
    ["Alignment of VkMemoryType"][::core::mem::align_of::<VkMemoryType>() - 4usize];
    ["Offset of field: VkMemoryType::propertyFlags"]
        [::core::mem::offset_of!(VkMemoryType, propertyFlags) - 0usize];
    ["Offset of field: VkMemoryType::heapIndex"]
        [::core::mem::offset_of!(VkMemoryType, heapIndex) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceFeatures"]
        [::core::mem::size_of::<VkPhysicalDeviceFeatures>() - 220usize];
    ["Alignment of VkPhysicalDeviceFeatures"]
        [::core::mem::align_of::<VkPhysicalDeviceFeatures>() - 4usize];
    ["Offset of field: VkPhysicalDeviceFeatures::robustBufferAccess"]
        [::core::mem::offset_of!(VkPhysicalDeviceFeatures, robustBufferAccess) - 0usize];
    ["Offset of field: VkPhysicalDeviceFeatures::fullDrawIndexUint32"]
        [::core::mem::offset_of!(VkPhysicalDeviceFeatures, fullDrawIndexUint32) - 4usize];
    ["Offset of field: VkPhysicalDeviceFeatures::imageCubeArray"]
        [::core::mem::offset_of!(VkPhysicalDeviceFeatures, imageCubeArray) - 8usize];
    ["Offset of field: VkPhysicalDeviceFeatures::independentBlend"]
        [::core::mem::offset_of!(VkPhysicalDeviceFeatures, independentBlend) - 12usize];
    ["Offset of field: VkPhysicalDeviceFeatures::geometryShader"]
        [::core::mem::offset_of!(VkPhysicalDeviceFeatures, geometryShader) - 16usize];
    ["Offset of field: VkPhysicalDeviceFeatures::tessellationShader"]
        [::core::mem::offset_of!(VkPhysicalDeviceFeatures, tessellationShader) - 20usize];
    ["Offset of field: VkPhysicalDeviceFeatures::sampleRateShading"]
        [::core::mem::offset_of!(VkPhysicalDeviceFeatures, sampleRateShading) - 24usize];
    ["Offset of field: VkPhysicalDeviceFeatures::dualSrcBlend"]
        [::core::mem::offset_of!(VkPhysicalDeviceFeatures, dualSrcBlend) - 28usize];
    ["Offset of field: VkPhysicalDeviceFeatures::logicOp"]
        [::core::mem::offset_of!(VkPhysicalDeviceFeatures, logicOp) - 32usize];
    ["Offset of field: VkPhysicalDeviceFeatures::multiDrawIndirect"]
        [::core::mem::offset_of!(VkPhysicalDeviceFeatures, multiDrawIndirect) - 36usize];
    ["Offset of field: VkPhysicalDeviceFeatures::drawIndirectFirstInstance"]
        [::core::mem::offset_of!(VkPhysicalDeviceFeatures, drawIndirectFirstInstance) - 40usize];
    ["Offset of field: VkPhysicalDeviceFeatures::depthClamp"]
        [::core::mem::offset_of!(VkPhysicalDeviceFeatures, depthClamp) - 44usize];
    ["Offset of field: VkPhysicalDeviceFeatures::depthBiasClamp"]
        [::core::mem::offset_of!(VkPhysicalDeviceFeatures, depthBiasClamp) - 48usize];
    ["Offset of field: VkPhysicalDeviceFeatures::fillModeNonSolid"]
        [::core::mem::offset_of!(VkPhysicalDeviceFeatures, fillModeNonSolid) - 52usize];
    ["Offset of field: VkPhysicalDeviceFeatures::depthBounds"]
        [::core::mem::offset_of!(VkPhysicalDeviceFeatures, depthBounds) - 56usize];
    ["Offset of field: VkPhysicalDeviceFeatures::wideLines"]
        [::core::mem::offset_of!(VkPhysicalDeviceFeatures, wideLines) - 60usize];
    ["Offset of field: VkPhysicalDeviceFeatures::largePoints"]
        [::core::mem::offset_of!(VkPhysicalDeviceFeatures, largePoints) - 64usize];
    ["Offset of field: VkPhysicalDeviceFeatures::alphaToOne"]
        [::core::mem::offset_of!(VkPhysicalDeviceFeatures, alphaToOne) - 68usize];
    ["Offset of field: VkPhysicalDeviceFeatures::multiViewport"]
        [::core::mem::offset_of!(VkPhysicalDeviceFeatures, multiViewport) - 72usize];
    ["Offset of field: VkPhysicalDeviceFeatures::samplerAnisotropy"]
        [::core::mem::offset_of!(VkPhysicalDeviceFeatures, samplerAnisotropy) - 76usize];
    ["Offset of field: VkPhysicalDeviceFeatures::textureCompressionETC2"]
        [::core::mem::offset_of!(VkPhysicalDeviceFeatures, textureCompressionETC2) - 80usize];
    ["Offset of field: VkPhysicalDeviceFeatures::textureCompressionASTC_LDR"]
        [::core::mem::offset_of!(VkPhysicalDeviceFeatures, textureCompressionASTC_LDR) - 84usize];
    ["Offset of field: VkPhysicalDeviceFeatures::textureCompressionBC"]
        [::core::mem::offset_of!(VkPhysicalDeviceFeatures, textureCompressionBC) - 88usize];
    ["Offset of field: VkPhysicalDeviceFeatures::occlusionQueryPrecise"]
        [::core::mem::offset_of!(VkPhysicalDeviceFeatures, occlusionQueryPrecise) - 92usize];
    ["Offset of field: VkPhysicalDeviceFeatures::pipelineStatisticsQuery"]
        [::core::mem::offset_of!(VkPhysicalDeviceFeatures, pipelineStatisticsQuery) - 96usize];
    ["Offset of field: VkPhysicalDeviceFeatures::vertexPipelineStoresAndAtomics"][::core::mem::offset_of!(
        VkPhysicalDeviceFeatures,
        vertexPipelineStoresAndAtomics
    ) - 100usize];
    ["Offset of field: VkPhysicalDeviceFeatures::fragmentStoresAndAtomics"]
        [::core::mem::offset_of!(VkPhysicalDeviceFeatures, fragmentStoresAndAtomics) - 104usize];
    ["Offset of field: VkPhysicalDeviceFeatures::shaderTessellationAndGeometryPointSize"][::core::mem::offset_of!(
        VkPhysicalDeviceFeatures,
        shaderTessellationAndGeometryPointSize
    )
        - 108usize];
    ["Offset of field: VkPhysicalDeviceFeatures::shaderImageGatherExtended"]
        [::core::mem::offset_of!(VkPhysicalDeviceFeatures, shaderImageGatherExtended) - 112usize];
    ["Offset of field: VkPhysicalDeviceFeatures::shaderStorageImageExtendedFormats"][::core::mem::offset_of!(
        VkPhysicalDeviceFeatures,
        shaderStorageImageExtendedFormats
    ) - 116usize];
    ["Offset of field: VkPhysicalDeviceFeatures::shaderStorageImageMultisample"][::core::mem::offset_of!(
        VkPhysicalDeviceFeatures,
        shaderStorageImageMultisample
    ) - 120usize];
    ["Offset of field: VkPhysicalDeviceFeatures::shaderStorageImageReadWithoutFormat"][::core::mem::offset_of!(
        VkPhysicalDeviceFeatures,
        shaderStorageImageReadWithoutFormat
    )
        - 124usize];
    ["Offset of field: VkPhysicalDeviceFeatures::shaderStorageImageWriteWithoutFormat"][::core::mem::offset_of!(
        VkPhysicalDeviceFeatures,
        shaderStorageImageWriteWithoutFormat
    )
        - 128usize];
    ["Offset of field: VkPhysicalDeviceFeatures::shaderUniformBufferArrayDynamicIndexing"][::core::mem::offset_of!(
        VkPhysicalDeviceFeatures,
        shaderUniformBufferArrayDynamicIndexing
    )
        - 132usize];
    ["Offset of field: VkPhysicalDeviceFeatures::shaderSampledImageArrayDynamicIndexing"][::core::mem::offset_of!(
        VkPhysicalDeviceFeatures,
        shaderSampledImageArrayDynamicIndexing
    )
        - 136usize];
    ["Offset of field: VkPhysicalDeviceFeatures::shaderStorageBufferArrayDynamicIndexing"][::core::mem::offset_of!(
        VkPhysicalDeviceFeatures,
        shaderStorageBufferArrayDynamicIndexing
    )
        - 140usize];
    ["Offset of field: VkPhysicalDeviceFeatures::shaderStorageImageArrayDynamicIndexing"][::core::mem::offset_of!(
        VkPhysicalDeviceFeatures,
        shaderStorageImageArrayDynamicIndexing
    )
        - 144usize];
    ["Offset of field: VkPhysicalDeviceFeatures::shaderClipDistance"]
        [::core::mem::offset_of!(VkPhysicalDeviceFeatures, shaderClipDistance) - 148usize];
    ["Offset of field: VkPhysicalDeviceFeatures::shaderCullDistance"]
        [::core::mem::offset_of!(VkPhysicalDeviceFeatures, shaderCullDistance) - 152usize];
    ["Offset of field: VkPhysicalDeviceFeatures::shaderFloat64"]
        [::core::mem::offset_of!(VkPhysicalDeviceFeatures, shaderFloat64) - 156usize];
    ["Offset of field: VkPhysicalDeviceFeatures::shaderInt64"]
        [::core::mem::offset_of!(VkPhysicalDeviceFeatures, shaderInt64) - 160usize];
    ["Offset of field: VkPhysicalDeviceFeatures::shaderInt16"]
        [::core::mem::offset_of!(VkPhysicalDeviceFeatures, shaderInt16) - 164usize];
    ["Offset of field: VkPhysicalDeviceFeatures::shaderResourceResidency"]
        [::core::mem::offset_of!(VkPhysicalDeviceFeatures, shaderResourceResidency) - 168usize];
    ["Offset of field: VkPhysicalDeviceFeatures::shaderResourceMinLod"]
        [::core::mem::offset_of!(VkPhysicalDeviceFeatures, shaderResourceMinLod) - 172usize];
    ["Offset of field: VkPhysicalDeviceFeatures::sparseBinding"]
        [::core::mem::offset_of!(VkPhysicalDeviceFeatures, sparseBinding) - 176usize];
    ["Offset of field: VkPhysicalDeviceFeatures::sparseResidencyBuffer"]
        [::core::mem::offset_of!(VkPhysicalDeviceFeatures, sparseResidencyBuffer) - 180usize];
    ["Offset of field: VkPhysicalDeviceFeatures::sparseResidencyImage2D"]
        [::core::mem::offset_of!(VkPhysicalDeviceFeatures, sparseResidencyImage2D) - 184usize];
    ["Offset of field: VkPhysicalDeviceFeatures::sparseResidencyImage3D"]
        [::core::mem::offset_of!(VkPhysicalDeviceFeatures, sparseResidencyImage3D) - 188usize];
    ["Offset of field: VkPhysicalDeviceFeatures::sparseResidency2Samples"]
        [::core::mem::offset_of!(VkPhysicalDeviceFeatures, sparseResidency2Samples) - 192usize];
    ["Offset of field: VkPhysicalDeviceFeatures::sparseResidency4Samples"]
        [::core::mem::offset_of!(VkPhysicalDeviceFeatures, sparseResidency4Samples) - 196usize];
    ["Offset of field: VkPhysicalDeviceFeatures::sparseResidency8Samples"]
        [::core::mem::offset_of!(VkPhysicalDeviceFeatures, sparseResidency8Samples) - 200usize];
    ["Offset of field: VkPhysicalDeviceFeatures::sparseResidency16Samples"]
        [::core::mem::offset_of!(VkPhysicalDeviceFeatures, sparseResidency16Samples) - 204usize];
    ["Offset of field: VkPhysicalDeviceFeatures::sparseResidencyAliased"]
        [::core::mem::offset_of!(VkPhysicalDeviceFeatures, sparseResidencyAliased) - 208usize];
    ["Offset of field: VkPhysicalDeviceFeatures::variableMultisampleRate"]
        [::core::mem::offset_of!(VkPhysicalDeviceFeatures, variableMultisampleRate) - 212usize];
    ["Offset of field: VkPhysicalDeviceFeatures::inheritedQueries"]
        [::core::mem::offset_of!(VkPhysicalDeviceFeatures, inheritedQueries) - 216usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceLimits"][::core::mem::size_of::<VkPhysicalDeviceLimits>() - 496usize];
    ["Alignment of VkPhysicalDeviceLimits"]
        [::core::mem::align_of::<VkPhysicalDeviceLimits>() - 8usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxImageDimension1D"]
        [::core::mem::offset_of!(VkPhysicalDeviceLimits, maxImageDimension1D) - 0usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxImageDimension2D"]
        [::core::mem::offset_of!(VkPhysicalDeviceLimits, maxImageDimension2D) - 4usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxImageDimension3D"]
        [::core::mem::offset_of!(VkPhysicalDeviceLimits, maxImageDimension3D) - 8usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxImageDimensionCube"]
        [::core::mem::offset_of!(VkPhysicalDeviceLimits, maxImageDimensionCube) - 12usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxImageArrayLayers"]
        [::core::mem::offset_of!(VkPhysicalDeviceLimits, maxImageArrayLayers) - 16usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxTexelBufferElements"]
        [::core::mem::offset_of!(VkPhysicalDeviceLimits, maxTexelBufferElements) - 20usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxUniformBufferRange"]
        [::core::mem::offset_of!(VkPhysicalDeviceLimits, maxUniformBufferRange) - 24usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxStorageBufferRange"]
        [::core::mem::offset_of!(VkPhysicalDeviceLimits, maxStorageBufferRange) - 28usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxPushConstantsSize"]
        [::core::mem::offset_of!(VkPhysicalDeviceLimits, maxPushConstantsSize) - 32usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxMemoryAllocationCount"]
        [::core::mem::offset_of!(VkPhysicalDeviceLimits, maxMemoryAllocationCount) - 36usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxSamplerAllocationCount"]
        [::core::mem::offset_of!(VkPhysicalDeviceLimits, maxSamplerAllocationCount) - 40usize];
    ["Offset of field: VkPhysicalDeviceLimits::bufferImageGranularity"]
        [::core::mem::offset_of!(VkPhysicalDeviceLimits, bufferImageGranularity) - 48usize];
    ["Offset of field: VkPhysicalDeviceLimits::sparseAddressSpaceSize"]
        [::core::mem::offset_of!(VkPhysicalDeviceLimits, sparseAddressSpaceSize) - 56usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxBoundDescriptorSets"]
        [::core::mem::offset_of!(VkPhysicalDeviceLimits, maxBoundDescriptorSets) - 64usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxPerStageDescriptorSamplers"]
        [::core::mem::offset_of!(VkPhysicalDeviceLimits, maxPerStageDescriptorSamplers) - 68usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxPerStageDescriptorUniformBuffers"][::core::mem::offset_of!(
        VkPhysicalDeviceLimits,
        maxPerStageDescriptorUniformBuffers
    ) - 72usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxPerStageDescriptorStorageBuffers"][::core::mem::offset_of!(
        VkPhysicalDeviceLimits,
        maxPerStageDescriptorStorageBuffers
    ) - 76usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxPerStageDescriptorSampledImages"][::core::mem::offset_of!(
        VkPhysicalDeviceLimits,
        maxPerStageDescriptorSampledImages
    ) - 80usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxPerStageDescriptorStorageImages"][::core::mem::offset_of!(
        VkPhysicalDeviceLimits,
        maxPerStageDescriptorStorageImages
    ) - 84usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxPerStageDescriptorInputAttachments"][::core::mem::offset_of!(
        VkPhysicalDeviceLimits,
        maxPerStageDescriptorInputAttachments
    ) - 88usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxPerStageResources"]
        [::core::mem::offset_of!(VkPhysicalDeviceLimits, maxPerStageResources) - 92usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxDescriptorSetSamplers"]
        [::core::mem::offset_of!(VkPhysicalDeviceLimits, maxDescriptorSetSamplers) - 96usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxDescriptorSetUniformBuffers"][::core::mem::offset_of!(
        VkPhysicalDeviceLimits,
        maxDescriptorSetUniformBuffers
    ) - 100usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxDescriptorSetUniformBuffersDynamic"][::core::mem::offset_of!(
        VkPhysicalDeviceLimits,
        maxDescriptorSetUniformBuffersDynamic
    )
        - 104usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxDescriptorSetStorageBuffers"][::core::mem::offset_of!(
        VkPhysicalDeviceLimits,
        maxDescriptorSetStorageBuffers
    ) - 108usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxDescriptorSetStorageBuffersDynamic"][::core::mem::offset_of!(
        VkPhysicalDeviceLimits,
        maxDescriptorSetStorageBuffersDynamic
    )
        - 112usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxDescriptorSetSampledImages"]
        [::core::mem::offset_of!(VkPhysicalDeviceLimits, maxDescriptorSetSampledImages) - 116usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxDescriptorSetStorageImages"]
        [::core::mem::offset_of!(VkPhysicalDeviceLimits, maxDescriptorSetStorageImages) - 120usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxDescriptorSetInputAttachments"][::core::mem::offset_of!(
        VkPhysicalDeviceLimits,
        maxDescriptorSetInputAttachments
    ) - 124usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxVertexInputAttributes"]
        [::core::mem::offset_of!(VkPhysicalDeviceLimits, maxVertexInputAttributes) - 128usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxVertexInputBindings"]
        [::core::mem::offset_of!(VkPhysicalDeviceLimits, maxVertexInputBindings) - 132usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxVertexInputAttributeOffset"]
        [::core::mem::offset_of!(VkPhysicalDeviceLimits, maxVertexInputAttributeOffset) - 136usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxVertexInputBindingStride"]
        [::core::mem::offset_of!(VkPhysicalDeviceLimits, maxVertexInputBindingStride) - 140usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxVertexOutputComponents"]
        [::core::mem::offset_of!(VkPhysicalDeviceLimits, maxVertexOutputComponents) - 144usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxTessellationGenerationLevel"][::core::mem::offset_of!(
        VkPhysicalDeviceLimits,
        maxTessellationGenerationLevel
    ) - 148usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxTessellationPatchSize"]
        [::core::mem::offset_of!(VkPhysicalDeviceLimits, maxTessellationPatchSize) - 152usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxTessellationControlPerVertexInputComponents"][::core::mem::offset_of!(
        VkPhysicalDeviceLimits,
        maxTessellationControlPerVertexInputComponents
    )
        - 156usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxTessellationControlPerVertexOutputComponents"][::core::mem::offset_of!(
        VkPhysicalDeviceLimits,
        maxTessellationControlPerVertexOutputComponents
    )
        - 160usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxTessellationControlPerPatchOutputComponents"][::core::mem::offset_of!(
        VkPhysicalDeviceLimits,
        maxTessellationControlPerPatchOutputComponents
    )
        - 164usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxTessellationControlTotalOutputComponents"][::core::mem::offset_of!(
        VkPhysicalDeviceLimits,
        maxTessellationControlTotalOutputComponents
    )
        - 168usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxTessellationEvaluationInputComponents"][::core::mem::offset_of!(
        VkPhysicalDeviceLimits,
        maxTessellationEvaluationInputComponents
    )
        - 172usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxTessellationEvaluationOutputComponents"][::core::mem::offset_of!(
        VkPhysicalDeviceLimits,
        maxTessellationEvaluationOutputComponents
    )
        - 176usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxGeometryShaderInvocations"]
        [::core::mem::offset_of!(VkPhysicalDeviceLimits, maxGeometryShaderInvocations) - 180usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxGeometryInputComponents"]
        [::core::mem::offset_of!(VkPhysicalDeviceLimits, maxGeometryInputComponents) - 184usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxGeometryOutputComponents"]
        [::core::mem::offset_of!(VkPhysicalDeviceLimits, maxGeometryOutputComponents) - 188usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxGeometryOutputVertices"]
        [::core::mem::offset_of!(VkPhysicalDeviceLimits, maxGeometryOutputVertices) - 192usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxGeometryTotalOutputComponents"][::core::mem::offset_of!(
        VkPhysicalDeviceLimits,
        maxGeometryTotalOutputComponents
    ) - 196usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxFragmentInputComponents"]
        [::core::mem::offset_of!(VkPhysicalDeviceLimits, maxFragmentInputComponents) - 200usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxFragmentOutputAttachments"]
        [::core::mem::offset_of!(VkPhysicalDeviceLimits, maxFragmentOutputAttachments) - 204usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxFragmentDualSrcAttachments"]
        [::core::mem::offset_of!(VkPhysicalDeviceLimits, maxFragmentDualSrcAttachments) - 208usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxFragmentCombinedOutputResources"][::core::mem::offset_of!(
        VkPhysicalDeviceLimits,
        maxFragmentCombinedOutputResources
    ) - 212usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxComputeSharedMemorySize"]
        [::core::mem::offset_of!(VkPhysicalDeviceLimits, maxComputeSharedMemorySize) - 216usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxComputeWorkGroupCount"]
        [::core::mem::offset_of!(VkPhysicalDeviceLimits, maxComputeWorkGroupCount) - 220usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxComputeWorkGroupInvocations"][::core::mem::offset_of!(
        VkPhysicalDeviceLimits,
        maxComputeWorkGroupInvocations
    ) - 232usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxComputeWorkGroupSize"]
        [::core::mem::offset_of!(VkPhysicalDeviceLimits, maxComputeWorkGroupSize) - 236usize];
    ["Offset of field: VkPhysicalDeviceLimits::subPixelPrecisionBits"]
        [::core::mem::offset_of!(VkPhysicalDeviceLimits, subPixelPrecisionBits) - 248usize];
    ["Offset of field: VkPhysicalDeviceLimits::subTexelPrecisionBits"]
        [::core::mem::offset_of!(VkPhysicalDeviceLimits, subTexelPrecisionBits) - 252usize];
    ["Offset of field: VkPhysicalDeviceLimits::mipmapPrecisionBits"]
        [::core::mem::offset_of!(VkPhysicalDeviceLimits, mipmapPrecisionBits) - 256usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxDrawIndexedIndexValue"]
        [::core::mem::offset_of!(VkPhysicalDeviceLimits, maxDrawIndexedIndexValue) - 260usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxDrawIndirectCount"]
        [::core::mem::offset_of!(VkPhysicalDeviceLimits, maxDrawIndirectCount) - 264usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxSamplerLodBias"]
        [::core::mem::offset_of!(VkPhysicalDeviceLimits, maxSamplerLodBias) - 268usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxSamplerAnisotropy"]
        [::core::mem::offset_of!(VkPhysicalDeviceLimits, maxSamplerAnisotropy) - 272usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxViewports"]
        [::core::mem::offset_of!(VkPhysicalDeviceLimits, maxViewports) - 276usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxViewportDimensions"]
        [::core::mem::offset_of!(VkPhysicalDeviceLimits, maxViewportDimensions) - 280usize];
    ["Offset of field: VkPhysicalDeviceLimits::viewportBoundsRange"]
        [::core::mem::offset_of!(VkPhysicalDeviceLimits, viewportBoundsRange) - 288usize];
    ["Offset of field: VkPhysicalDeviceLimits::viewportSubPixelBits"]
        [::core::mem::offset_of!(VkPhysicalDeviceLimits, viewportSubPixelBits) - 296usize];
    ["Offset of field: VkPhysicalDeviceLimits::minMemoryMapAlignment"]
        [::core::mem::offset_of!(VkPhysicalDeviceLimits, minMemoryMapAlignment) - 300usize];
    ["Offset of field: VkPhysicalDeviceLimits::minTexelBufferOffsetAlignment"]
        [::core::mem::offset_of!(VkPhysicalDeviceLimits, minTexelBufferOffsetAlignment) - 304usize];
    ["Offset of field: VkPhysicalDeviceLimits::minUniformBufferOffsetAlignment"][::core::mem::offset_of!(
        VkPhysicalDeviceLimits,
        minUniformBufferOffsetAlignment
    ) - 312usize];
    ["Offset of field: VkPhysicalDeviceLimits::minStorageBufferOffsetAlignment"][::core::mem::offset_of!(
        VkPhysicalDeviceLimits,
        minStorageBufferOffsetAlignment
    ) - 320usize];
    ["Offset of field: VkPhysicalDeviceLimits::minTexelOffset"]
        [::core::mem::offset_of!(VkPhysicalDeviceLimits, minTexelOffset) - 328usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxTexelOffset"]
        [::core::mem::offset_of!(VkPhysicalDeviceLimits, maxTexelOffset) - 332usize];
    ["Offset of field: VkPhysicalDeviceLimits::minTexelGatherOffset"]
        [::core::mem::offset_of!(VkPhysicalDeviceLimits, minTexelGatherOffset) - 336usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxTexelGatherOffset"]
        [::core::mem::offset_of!(VkPhysicalDeviceLimits, maxTexelGatherOffset) - 340usize];
    ["Offset of field: VkPhysicalDeviceLimits::minInterpolationOffset"]
        [::core::mem::offset_of!(VkPhysicalDeviceLimits, minInterpolationOffset) - 344usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxInterpolationOffset"]
        [::core::mem::offset_of!(VkPhysicalDeviceLimits, maxInterpolationOffset) - 348usize];
    ["Offset of field: VkPhysicalDeviceLimits::subPixelInterpolationOffsetBits"][::core::mem::offset_of!(
        VkPhysicalDeviceLimits,
        subPixelInterpolationOffsetBits
    ) - 352usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxFramebufferWidth"]
        [::core::mem::offset_of!(VkPhysicalDeviceLimits, maxFramebufferWidth) - 356usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxFramebufferHeight"]
        [::core::mem::offset_of!(VkPhysicalDeviceLimits, maxFramebufferHeight) - 360usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxFramebufferLayers"]
        [::core::mem::offset_of!(VkPhysicalDeviceLimits, maxFramebufferLayers) - 364usize];
    ["Offset of field: VkPhysicalDeviceLimits::framebufferColorSampleCounts"]
        [::core::mem::offset_of!(VkPhysicalDeviceLimits, framebufferColorSampleCounts) - 368usize];
    ["Offset of field: VkPhysicalDeviceLimits::framebufferDepthSampleCounts"]
        [::core::mem::offset_of!(VkPhysicalDeviceLimits, framebufferDepthSampleCounts) - 372usize];
    ["Offset of field: VkPhysicalDeviceLimits::framebufferStencilSampleCounts"][::core::mem::offset_of!(
        VkPhysicalDeviceLimits,
        framebufferStencilSampleCounts
    ) - 376usize];
    ["Offset of field: VkPhysicalDeviceLimits::framebufferNoAttachmentsSampleCounts"][::core::mem::offset_of!(
        VkPhysicalDeviceLimits,
        framebufferNoAttachmentsSampleCounts
    ) - 380usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxColorAttachments"]
        [::core::mem::offset_of!(VkPhysicalDeviceLimits, maxColorAttachments) - 384usize];
    ["Offset of field: VkPhysicalDeviceLimits::sampledImageColorSampleCounts"]
        [::core::mem::offset_of!(VkPhysicalDeviceLimits, sampledImageColorSampleCounts) - 388usize];
    ["Offset of field: VkPhysicalDeviceLimits::sampledImageIntegerSampleCounts"][::core::mem::offset_of!(
        VkPhysicalDeviceLimits,
        sampledImageIntegerSampleCounts
    ) - 392usize];
    ["Offset of field: VkPhysicalDeviceLimits::sampledImageDepthSampleCounts"]
        [::core::mem::offset_of!(VkPhysicalDeviceLimits, sampledImageDepthSampleCounts) - 396usize];
    ["Offset of field: VkPhysicalDeviceLimits::sampledImageStencilSampleCounts"][::core::mem::offset_of!(
        VkPhysicalDeviceLimits,
        sampledImageStencilSampleCounts
    ) - 400usize];
    ["Offset of field: VkPhysicalDeviceLimits::storageImageSampleCounts"]
        [::core::mem::offset_of!(VkPhysicalDeviceLimits, storageImageSampleCounts) - 404usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxSampleMaskWords"]
        [::core::mem::offset_of!(VkPhysicalDeviceLimits, maxSampleMaskWords) - 408usize];
    ["Offset of field: VkPhysicalDeviceLimits::timestampComputeAndGraphics"]
        [::core::mem::offset_of!(VkPhysicalDeviceLimits, timestampComputeAndGraphics) - 412usize];
    ["Offset of field: VkPhysicalDeviceLimits::timestampPeriod"]
        [::core::mem::offset_of!(VkPhysicalDeviceLimits, timestampPeriod) - 416usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxClipDistances"]
        [::core::mem::offset_of!(VkPhysicalDeviceLimits, maxClipDistances) - 420usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxCullDistances"]
        [::core::mem::offset_of!(VkPhysicalDeviceLimits, maxCullDistances) - 424usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxCombinedClipAndCullDistances"][::core::mem::offset_of!(
        VkPhysicalDeviceLimits,
        maxCombinedClipAndCullDistances
    ) - 428usize];
    ["Offset of field: VkPhysicalDeviceLimits::discreteQueuePriorities"]
        [::core::mem::offset_of!(VkPhysicalDeviceLimits, discreteQueuePriorities) - 432usize];
    ["Offset of field: VkPhysicalDeviceLimits::pointSizeRange"]
        [::core::mem::offset_of!(VkPhysicalDeviceLimits, pointSizeRange) - 436usize];
    ["Offset of field: VkPhysicalDeviceLimits::lineWidthRange"]
        [::core::mem::offset_of!(VkPhysicalDeviceLimits, lineWidthRange) - 444usize];
    ["Offset of field: VkPhysicalDeviceLimits::pointSizeGranularity"]
        [::core::mem::offset_of!(VkPhysicalDeviceLimits, pointSizeGranularity) - 452usize];
    ["Offset of field: VkPhysicalDeviceLimits::lineWidthGranularity"]
        [::core::mem::offset_of!(VkPhysicalDeviceLimits, lineWidthGranularity) - 456usize];
    ["Offset of field: VkPhysicalDeviceLimits::strictLines"]
        [::core::mem::offset_of!(VkPhysicalDeviceLimits, strictLines) - 460usize];
    ["Offset of field: VkPhysicalDeviceLimits::standardSampleLocations"]
        [::core::mem::offset_of!(VkPhysicalDeviceLimits, standardSampleLocations) - 464usize];
    ["Offset of field: VkPhysicalDeviceLimits::optimalBufferCopyOffsetAlignment"][::core::mem::offset_of!(
        VkPhysicalDeviceLimits,
        optimalBufferCopyOffsetAlignment
    ) - 472usize];
    ["Offset of field: VkPhysicalDeviceLimits::optimalBufferCopyRowPitchAlignment"][::core::mem::offset_of!(
        VkPhysicalDeviceLimits,
        optimalBufferCopyRowPitchAlignment
    ) - 480usize];
    ["Offset of field: VkPhysicalDeviceLimits::nonCoherentAtomSize"]
        [::core::mem::offset_of!(VkPhysicalDeviceLimits, nonCoherentAtomSize) - 488usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceMemoryProperties"]
        [::core::mem::size_of::<VkPhysicalDeviceMemoryProperties>() - 520usize];
    ["Alignment of VkPhysicalDeviceMemoryProperties"]
        [::core::mem::align_of::<VkPhysicalDeviceMemoryProperties>() - 8usize];
    ["Offset of field: VkPhysicalDeviceMemoryProperties::memoryTypeCount"]
        [::core::mem::offset_of!(VkPhysicalDeviceMemoryProperties, memoryTypeCount) - 0usize];
    ["Offset of field: VkPhysicalDeviceMemoryProperties::memoryTypes"]
        [::core::mem::offset_of!(VkPhysicalDeviceMemoryProperties, memoryTypes) - 4usize];
    ["Offset of field: VkPhysicalDeviceMemoryProperties::memoryHeapCount"]
        [::core::mem::offset_of!(VkPhysicalDeviceMemoryProperties, memoryHeapCount) - 260usize];
    ["Offset of field: VkPhysicalDeviceMemoryProperties::memoryHeaps"]
        [::core::mem::offset_of!(VkPhysicalDeviceMemoryProperties, memoryHeaps) - 264usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceSparseProperties"]
        [::core::mem::size_of::<VkPhysicalDeviceSparseProperties>() - 20usize];
    ["Alignment of VkPhysicalDeviceSparseProperties"]
        [::core::mem::align_of::<VkPhysicalDeviceSparseProperties>() - 4usize];
    ["Offset of field: VkPhysicalDeviceSparseProperties::residencyStandard2DBlockShape"][::core::mem::offset_of!(
        VkPhysicalDeviceSparseProperties,
        residencyStandard2DBlockShape
    )
        - 0usize];
    ["Offset of field: VkPhysicalDeviceSparseProperties::residencyStandard2DMultisampleBlockShape"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceSparseProperties , residencyStandard2DMultisampleBlockShape) - 4usize] ;
    ["Offset of field: VkPhysicalDeviceSparseProperties::residencyStandard3DBlockShape"][::core::mem::offset_of!(
        VkPhysicalDeviceSparseProperties,
        residencyStandard3DBlockShape
    )
        - 8usize];
    ["Offset of field: VkPhysicalDeviceSparseProperties::residencyAlignedMipSize"][::core::mem::offset_of!(
        VkPhysicalDeviceSparseProperties,
        residencyAlignedMipSize
    ) - 12usize];
    ["Offset of field: VkPhysicalDeviceSparseProperties::residencyNonResidentStrict"][::core::mem::offset_of!(
        VkPhysicalDeviceSparseProperties,
        residencyNonResidentStrict
    ) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceProperties"]
        [::core::mem::size_of::<VkPhysicalDeviceProperties>() - 816usize];
    ["Alignment of VkPhysicalDeviceProperties"]
        [::core::mem::align_of::<VkPhysicalDeviceProperties>() - 8usize];
    ["Offset of field: VkPhysicalDeviceProperties::apiVersion"]
        [::core::mem::offset_of!(VkPhysicalDeviceProperties, apiVersion) - 0usize];
    ["Offset of field: VkPhysicalDeviceProperties::driverVersion"]
        [::core::mem::offset_of!(VkPhysicalDeviceProperties, driverVersion) - 4usize];
    ["Offset of field: VkPhysicalDeviceProperties::vendorID"]
        [::core::mem::offset_of!(VkPhysicalDeviceProperties, vendorID) - 8usize];
    ["Offset of field: VkPhysicalDeviceProperties::deviceID"]
        [::core::mem::offset_of!(VkPhysicalDeviceProperties, deviceID) - 12usize];
    ["Offset of field: VkPhysicalDeviceProperties::deviceType"]
        [::core::mem::offset_of!(VkPhysicalDeviceProperties, deviceType) - 16usize];
    ["Offset of field: VkPhysicalDeviceProperties::deviceName"]
        [::core::mem::offset_of!(VkPhysicalDeviceProperties, deviceName) - 20usize];
    ["Offset of field: VkPhysicalDeviceProperties::pipelineCacheUUID"]
        [::core::mem::offset_of!(VkPhysicalDeviceProperties, pipelineCacheUUID) - 276usize];
    ["Offset of field: VkPhysicalDeviceProperties::limits"]
        [::core::mem::offset_of!(VkPhysicalDeviceProperties, limits) - 296usize];
    ["Offset of field: VkPhysicalDeviceProperties::sparseProperties"]
        [::core::mem::offset_of!(VkPhysicalDeviceProperties, sparseProperties) - 792usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkQueueFamilyProperties"]
        [::core::mem::size_of::<VkQueueFamilyProperties>() - 24usize];
    ["Alignment of VkQueueFamilyProperties"]
        [::core::mem::align_of::<VkQueueFamilyProperties>() - 4usize];
    ["Offset of field: VkQueueFamilyProperties::queueFlags"]
        [::core::mem::offset_of!(VkQueueFamilyProperties, queueFlags) - 0usize];
    ["Offset of field: VkQueueFamilyProperties::queueCount"]
        [::core::mem::offset_of!(VkQueueFamilyProperties, queueCount) - 4usize];
    ["Offset of field: VkQueueFamilyProperties::timestampValidBits"]
        [::core::mem::offset_of!(VkQueueFamilyProperties, timestampValidBits) - 8usize];
    ["Offset of field: VkQueueFamilyProperties::minImageTransferGranularity"]
        [::core::mem::offset_of!(VkQueueFamilyProperties, minImageTransferGranularity) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDeviceQueueCreateInfo"]
        [::core::mem::size_of::<VkDeviceQueueCreateInfo>() - 24usize];
    ["Alignment of VkDeviceQueueCreateInfo"]
        [::core::mem::align_of::<VkDeviceQueueCreateInfo>() - 4usize];
    ["Offset of field: VkDeviceQueueCreateInfo::sType"]
        [::core::mem::offset_of!(VkDeviceQueueCreateInfo, sType) - 0usize];
    ["Offset of field: VkDeviceQueueCreateInfo::pNext"]
        [::core::mem::offset_of!(VkDeviceQueueCreateInfo, pNext) - 4usize];
    ["Offset of field: VkDeviceQueueCreateInfo::flags"]
        [::core::mem::offset_of!(VkDeviceQueueCreateInfo, flags) - 8usize];
    ["Offset of field: VkDeviceQueueCreateInfo::queueFamilyIndex"]
        [::core::mem::offset_of!(VkDeviceQueueCreateInfo, queueFamilyIndex) - 12usize];
    ["Offset of field: VkDeviceQueueCreateInfo::queueCount"]
        [::core::mem::offset_of!(VkDeviceQueueCreateInfo, queueCount) - 16usize];
    ["Offset of field: VkDeviceQueueCreateInfo::pQueuePriorities"]
        [::core::mem::offset_of!(VkDeviceQueueCreateInfo, pQueuePriorities) - 20usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDeviceCreateInfo"][::core::mem::size_of::<VkDeviceCreateInfo>() - 40usize];
    ["Alignment of VkDeviceCreateInfo"][::core::mem::align_of::<VkDeviceCreateInfo>() - 4usize];
    ["Offset of field: VkDeviceCreateInfo::sType"]
        [::core::mem::offset_of!(VkDeviceCreateInfo, sType) - 0usize];
    ["Offset of field: VkDeviceCreateInfo::pNext"]
        [::core::mem::offset_of!(VkDeviceCreateInfo, pNext) - 4usize];
    ["Offset of field: VkDeviceCreateInfo::flags"]
        [::core::mem::offset_of!(VkDeviceCreateInfo, flags) - 8usize];
    ["Offset of field: VkDeviceCreateInfo::queueCreateInfoCount"]
        [::core::mem::offset_of!(VkDeviceCreateInfo, queueCreateInfoCount) - 12usize];
    ["Offset of field: VkDeviceCreateInfo::pQueueCreateInfos"]
        [::core::mem::offset_of!(VkDeviceCreateInfo, pQueueCreateInfos) - 16usize];
    ["Offset of field: VkDeviceCreateInfo::enabledLayerCount"]
        [::core::mem::offset_of!(VkDeviceCreateInfo, enabledLayerCount) - 20usize];
    ["Offset of field: VkDeviceCreateInfo::ppEnabledLayerNames"]
        [::core::mem::offset_of!(VkDeviceCreateInfo, ppEnabledLayerNames) - 24usize];
    ["Offset of field: VkDeviceCreateInfo::enabledExtensionCount"]
        [::core::mem::offset_of!(VkDeviceCreateInfo, enabledExtensionCount) - 28usize];
    ["Offset of field: VkDeviceCreateInfo::ppEnabledExtensionNames"]
        [::core::mem::offset_of!(VkDeviceCreateInfo, ppEnabledExtensionNames) - 32usize];
    ["Offset of field: VkDeviceCreateInfo::pEnabledFeatures"]
        [::core::mem::offset_of!(VkDeviceCreateInfo, pEnabledFeatures) - 36usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkExtensionProperties"][::core::mem::size_of::<VkExtensionProperties>() - 260usize];
    ["Alignment of VkExtensionProperties"]
        [::core::mem::align_of::<VkExtensionProperties>() - 4usize];
    ["Offset of field: VkExtensionProperties::extensionName"]
        [::core::mem::offset_of!(VkExtensionProperties, extensionName) - 0usize];
    ["Offset of field: VkExtensionProperties::specVersion"]
        [::core::mem::offset_of!(VkExtensionProperties, specVersion) - 256usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkLayerProperties"][::core::mem::size_of::<VkLayerProperties>() - 520usize];
    ["Alignment of VkLayerProperties"][::core::mem::align_of::<VkLayerProperties>() - 4usize];
    ["Offset of field: VkLayerProperties::layerName"]
        [::core::mem::offset_of!(VkLayerProperties, layerName) - 0usize];
    ["Offset of field: VkLayerProperties::specVersion"]
        [::core::mem::offset_of!(VkLayerProperties, specVersion) - 256usize];
    ["Offset of field: VkLayerProperties::implementationVersion"]
        [::core::mem::offset_of!(VkLayerProperties, implementationVersion) - 260usize];
    ["Offset of field: VkLayerProperties::description"]
        [::core::mem::offset_of!(VkLayerProperties, description) - 264usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSubmitInfo"][::core::mem::size_of::<VkSubmitInfo>() - 36usize];
    ["Alignment of VkSubmitInfo"][::core::mem::align_of::<VkSubmitInfo>() - 4usize];
    ["Offset of field: VkSubmitInfo::sType"][::core::mem::offset_of!(VkSubmitInfo, sType) - 0usize];
    ["Offset of field: VkSubmitInfo::pNext"][::core::mem::offset_of!(VkSubmitInfo, pNext) - 4usize];
    ["Offset of field: VkSubmitInfo::waitSemaphoreCount"]
        [::core::mem::offset_of!(VkSubmitInfo, waitSemaphoreCount) - 8usize];
    ["Offset of field: VkSubmitInfo::pWaitSemaphores"]
        [::core::mem::offset_of!(VkSubmitInfo, pWaitSemaphores) - 12usize];
    ["Offset of field: VkSubmitInfo::pWaitDstStageMask"]
        [::core::mem::offset_of!(VkSubmitInfo, pWaitDstStageMask) - 16usize];
    ["Offset of field: VkSubmitInfo::commandBufferCount"]
        [::core::mem::offset_of!(VkSubmitInfo, commandBufferCount) - 20usize];
    ["Offset of field: VkSubmitInfo::pCommandBuffers"]
        [::core::mem::offset_of!(VkSubmitInfo, pCommandBuffers) - 24usize];
    ["Offset of field: VkSubmitInfo::signalSemaphoreCount"]
        [::core::mem::offset_of!(VkSubmitInfo, signalSemaphoreCount) - 28usize];
    ["Offset of field: VkSubmitInfo::pSignalSemaphores"]
        [::core::mem::offset_of!(VkSubmitInfo, pSignalSemaphores) - 32usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkMappedMemoryRange"][::core::mem::size_of::<VkMappedMemoryRange>() - 32usize];
    ["Alignment of VkMappedMemoryRange"][::core::mem::align_of::<VkMappedMemoryRange>() - 8usize];
    ["Offset of field: VkMappedMemoryRange::sType"]
        [::core::mem::offset_of!(VkMappedMemoryRange, sType) - 0usize];
    ["Offset of field: VkMappedMemoryRange::pNext"]
        [::core::mem::offset_of!(VkMappedMemoryRange, pNext) - 4usize];
    ["Offset of field: VkMappedMemoryRange::memory"]
        [::core::mem::offset_of!(VkMappedMemoryRange, memory) - 8usize];
    ["Offset of field: VkMappedMemoryRange::offset"]
        [::core::mem::offset_of!(VkMappedMemoryRange, offset) - 16usize];
    ["Offset of field: VkMappedMemoryRange::size"]
        [::core::mem::offset_of!(VkMappedMemoryRange, size) - 24usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkMemoryAllocateInfo"][::core::mem::size_of::<VkMemoryAllocateInfo>() - 24usize];
    ["Alignment of VkMemoryAllocateInfo"][::core::mem::align_of::<VkMemoryAllocateInfo>() - 8usize];
    ["Offset of field: VkMemoryAllocateInfo::sType"]
        [::core::mem::offset_of!(VkMemoryAllocateInfo, sType) - 0usize];
    ["Offset of field: VkMemoryAllocateInfo::pNext"]
        [::core::mem::offset_of!(VkMemoryAllocateInfo, pNext) - 4usize];
    ["Offset of field: VkMemoryAllocateInfo::allocationSize"]
        [::core::mem::offset_of!(VkMemoryAllocateInfo, allocationSize) - 8usize];
    ["Offset of field: VkMemoryAllocateInfo::memoryTypeIndex"]
        [::core::mem::offset_of!(VkMemoryAllocateInfo, memoryTypeIndex) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkMemoryRequirements"][::core::mem::size_of::<VkMemoryRequirements>() - 24usize];
    ["Alignment of VkMemoryRequirements"][::core::mem::align_of::<VkMemoryRequirements>() - 8usize];
    ["Offset of field: VkMemoryRequirements::size"]
        [::core::mem::offset_of!(VkMemoryRequirements, size) - 0usize];
    ["Offset of field: VkMemoryRequirements::alignment"]
        [::core::mem::offset_of!(VkMemoryRequirements, alignment) - 8usize];
    ["Offset of field: VkMemoryRequirements::memoryTypeBits"]
        [::core::mem::offset_of!(VkMemoryRequirements, memoryTypeBits) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSparseMemoryBind"][::core::mem::size_of::<VkSparseMemoryBind>() - 40usize];
    ["Alignment of VkSparseMemoryBind"][::core::mem::align_of::<VkSparseMemoryBind>() - 8usize];
    ["Offset of field: VkSparseMemoryBind::resourceOffset"]
        [::core::mem::offset_of!(VkSparseMemoryBind, resourceOffset) - 0usize];
    ["Offset of field: VkSparseMemoryBind::size"]
        [::core::mem::offset_of!(VkSparseMemoryBind, size) - 8usize];
    ["Offset of field: VkSparseMemoryBind::memory"]
        [::core::mem::offset_of!(VkSparseMemoryBind, memory) - 16usize];
    ["Offset of field: VkSparseMemoryBind::memoryOffset"]
        [::core::mem::offset_of!(VkSparseMemoryBind, memoryOffset) - 24usize];
    ["Offset of field: VkSparseMemoryBind::flags"]
        [::core::mem::offset_of!(VkSparseMemoryBind, flags) - 32usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSparseBufferMemoryBindInfo"]
        [::core::mem::size_of::<VkSparseBufferMemoryBindInfo>() - 16usize];
    ["Alignment of VkSparseBufferMemoryBindInfo"]
        [::core::mem::align_of::<VkSparseBufferMemoryBindInfo>() - 8usize];
    ["Offset of field: VkSparseBufferMemoryBindInfo::buffer"]
        [::core::mem::offset_of!(VkSparseBufferMemoryBindInfo, buffer) - 0usize];
    ["Offset of field: VkSparseBufferMemoryBindInfo::bindCount"]
        [::core::mem::offset_of!(VkSparseBufferMemoryBindInfo, bindCount) - 8usize];
    ["Offset of field: VkSparseBufferMemoryBindInfo::pBinds"]
        [::core::mem::offset_of!(VkSparseBufferMemoryBindInfo, pBinds) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSparseImageOpaqueMemoryBindInfo"]
        [::core::mem::size_of::<VkSparseImageOpaqueMemoryBindInfo>() - 16usize];
    ["Alignment of VkSparseImageOpaqueMemoryBindInfo"]
        [::core::mem::align_of::<VkSparseImageOpaqueMemoryBindInfo>() - 8usize];
    ["Offset of field: VkSparseImageOpaqueMemoryBindInfo::image"]
        [::core::mem::offset_of!(VkSparseImageOpaqueMemoryBindInfo, image) - 0usize];
    ["Offset of field: VkSparseImageOpaqueMemoryBindInfo::bindCount"]
        [::core::mem::offset_of!(VkSparseImageOpaqueMemoryBindInfo, bindCount) - 8usize];
    ["Offset of field: VkSparseImageOpaqueMemoryBindInfo::pBinds"]
        [::core::mem::offset_of!(VkSparseImageOpaqueMemoryBindInfo, pBinds) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkImageSubresource"][::core::mem::size_of::<VkImageSubresource>() - 12usize];
    ["Alignment of VkImageSubresource"][::core::mem::align_of::<VkImageSubresource>() - 4usize];
    ["Offset of field: VkImageSubresource::aspectMask"]
        [::core::mem::offset_of!(VkImageSubresource, aspectMask) - 0usize];
    ["Offset of field: VkImageSubresource::mipLevel"]
        [::core::mem::offset_of!(VkImageSubresource, mipLevel) - 4usize];
    ["Offset of field: VkImageSubresource::arrayLayer"]
        [::core::mem::offset_of!(VkImageSubresource, arrayLayer) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSparseImageMemoryBind"]
        [::core::mem::size_of::<VkSparseImageMemoryBind>() - 64usize];
    ["Alignment of VkSparseImageMemoryBind"]
        [::core::mem::align_of::<VkSparseImageMemoryBind>() - 8usize];
    ["Offset of field: VkSparseImageMemoryBind::subresource"]
        [::core::mem::offset_of!(VkSparseImageMemoryBind, subresource) - 0usize];
    ["Offset of field: VkSparseImageMemoryBind::offset"]
        [::core::mem::offset_of!(VkSparseImageMemoryBind, offset) - 12usize];
    ["Offset of field: VkSparseImageMemoryBind::extent"]
        [::core::mem::offset_of!(VkSparseImageMemoryBind, extent) - 24usize];
    ["Offset of field: VkSparseImageMemoryBind::memory"]
        [::core::mem::offset_of!(VkSparseImageMemoryBind, memory) - 40usize];
    ["Offset of field: VkSparseImageMemoryBind::memoryOffset"]
        [::core::mem::offset_of!(VkSparseImageMemoryBind, memoryOffset) - 48usize];
    ["Offset of field: VkSparseImageMemoryBind::flags"]
        [::core::mem::offset_of!(VkSparseImageMemoryBind, flags) - 56usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSparseImageMemoryBindInfo"]
        [::core::mem::size_of::<VkSparseImageMemoryBindInfo>() - 16usize];
    ["Alignment of VkSparseImageMemoryBindInfo"]
        [::core::mem::align_of::<VkSparseImageMemoryBindInfo>() - 8usize];
    ["Offset of field: VkSparseImageMemoryBindInfo::image"]
        [::core::mem::offset_of!(VkSparseImageMemoryBindInfo, image) - 0usize];
    ["Offset of field: VkSparseImageMemoryBindInfo::bindCount"]
        [::core::mem::offset_of!(VkSparseImageMemoryBindInfo, bindCount) - 8usize];
    ["Offset of field: VkSparseImageMemoryBindInfo::pBinds"]
        [::core::mem::offset_of!(VkSparseImageMemoryBindInfo, pBinds) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkBindSparseInfo"][::core::mem::size_of::<VkBindSparseInfo>() - 48usize];
    ["Alignment of VkBindSparseInfo"][::core::mem::align_of::<VkBindSparseInfo>() - 4usize];
    ["Offset of field: VkBindSparseInfo::sType"]
        [::core::mem::offset_of!(VkBindSparseInfo, sType) - 0usize];
    ["Offset of field: VkBindSparseInfo::pNext"]
        [::core::mem::offset_of!(VkBindSparseInfo, pNext) - 4usize];
    ["Offset of field: VkBindSparseInfo::waitSemaphoreCount"]
        [::core::mem::offset_of!(VkBindSparseInfo, waitSemaphoreCount) - 8usize];
    ["Offset of field: VkBindSparseInfo::pWaitSemaphores"]
        [::core::mem::offset_of!(VkBindSparseInfo, pWaitSemaphores) - 12usize];
    ["Offset of field: VkBindSparseInfo::bufferBindCount"]
        [::core::mem::offset_of!(VkBindSparseInfo, bufferBindCount) - 16usize];
    ["Offset of field: VkBindSparseInfo::pBufferBinds"]
        [::core::mem::offset_of!(VkBindSparseInfo, pBufferBinds) - 20usize];
    ["Offset of field: VkBindSparseInfo::imageOpaqueBindCount"]
        [::core::mem::offset_of!(VkBindSparseInfo, imageOpaqueBindCount) - 24usize];
    ["Offset of field: VkBindSparseInfo::pImageOpaqueBinds"]
        [::core::mem::offset_of!(VkBindSparseInfo, pImageOpaqueBinds) - 28usize];
    ["Offset of field: VkBindSparseInfo::imageBindCount"]
        [::core::mem::offset_of!(VkBindSparseInfo, imageBindCount) - 32usize];
    ["Offset of field: VkBindSparseInfo::pImageBinds"]
        [::core::mem::offset_of!(VkBindSparseInfo, pImageBinds) - 36usize];
    ["Offset of field: VkBindSparseInfo::signalSemaphoreCount"]
        [::core::mem::offset_of!(VkBindSparseInfo, signalSemaphoreCount) - 40usize];
    ["Offset of field: VkBindSparseInfo::pSignalSemaphores"]
        [::core::mem::offset_of!(VkBindSparseInfo, pSignalSemaphores) - 44usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSparseImageFormatProperties"]
        [::core::mem::size_of::<VkSparseImageFormatProperties>() - 20usize];
    ["Alignment of VkSparseImageFormatProperties"]
        [::core::mem::align_of::<VkSparseImageFormatProperties>() - 4usize];
    ["Offset of field: VkSparseImageFormatProperties::aspectMask"]
        [::core::mem::offset_of!(VkSparseImageFormatProperties, aspectMask) - 0usize];
    ["Offset of field: VkSparseImageFormatProperties::imageGranularity"]
        [::core::mem::offset_of!(VkSparseImageFormatProperties, imageGranularity) - 4usize];
    ["Offset of field: VkSparseImageFormatProperties::flags"]
        [::core::mem::offset_of!(VkSparseImageFormatProperties, flags) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSparseImageMemoryRequirements"]
        [::core::mem::size_of::<VkSparseImageMemoryRequirements>() - 48usize];
    ["Alignment of VkSparseImageMemoryRequirements"]
        [::core::mem::align_of::<VkSparseImageMemoryRequirements>() - 8usize];
    ["Offset of field: VkSparseImageMemoryRequirements::formatProperties"]
        [::core::mem::offset_of!(VkSparseImageMemoryRequirements, formatProperties) - 0usize];
    ["Offset of field: VkSparseImageMemoryRequirements::imageMipTailFirstLod"]
        [::core::mem::offset_of!(VkSparseImageMemoryRequirements, imageMipTailFirstLod) - 20usize];
    ["Offset of field: VkSparseImageMemoryRequirements::imageMipTailSize"]
        [::core::mem::offset_of!(VkSparseImageMemoryRequirements, imageMipTailSize) - 24usize];
    ["Offset of field: VkSparseImageMemoryRequirements::imageMipTailOffset"]
        [::core::mem::offset_of!(VkSparseImageMemoryRequirements, imageMipTailOffset) - 32usize];
    ["Offset of field: VkSparseImageMemoryRequirements::imageMipTailStride"]
        [::core::mem::offset_of!(VkSparseImageMemoryRequirements, imageMipTailStride) - 40usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkFenceCreateInfo"][::core::mem::size_of::<VkFenceCreateInfo>() - 12usize];
    ["Alignment of VkFenceCreateInfo"][::core::mem::align_of::<VkFenceCreateInfo>() - 4usize];
    ["Offset of field: VkFenceCreateInfo::sType"]
        [::core::mem::offset_of!(VkFenceCreateInfo, sType) - 0usize];
    ["Offset of field: VkFenceCreateInfo::pNext"]
        [::core::mem::offset_of!(VkFenceCreateInfo, pNext) - 4usize];
    ["Offset of field: VkFenceCreateInfo::flags"]
        [::core::mem::offset_of!(VkFenceCreateInfo, flags) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSemaphoreCreateInfo"][::core::mem::size_of::<VkSemaphoreCreateInfo>() - 12usize];
    ["Alignment of VkSemaphoreCreateInfo"]
        [::core::mem::align_of::<VkSemaphoreCreateInfo>() - 4usize];
    ["Offset of field: VkSemaphoreCreateInfo::sType"]
        [::core::mem::offset_of!(VkSemaphoreCreateInfo, sType) - 0usize];
    ["Offset of field: VkSemaphoreCreateInfo::pNext"]
        [::core::mem::offset_of!(VkSemaphoreCreateInfo, pNext) - 4usize];
    ["Offset of field: VkSemaphoreCreateInfo::flags"]
        [::core::mem::offset_of!(VkSemaphoreCreateInfo, flags) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkEventCreateInfo"][::core::mem::size_of::<VkEventCreateInfo>() - 12usize];
    ["Alignment of VkEventCreateInfo"][::core::mem::align_of::<VkEventCreateInfo>() - 4usize];
    ["Offset of field: VkEventCreateInfo::sType"]
        [::core::mem::offset_of!(VkEventCreateInfo, sType) - 0usize];
    ["Offset of field: VkEventCreateInfo::pNext"]
        [::core::mem::offset_of!(VkEventCreateInfo, pNext) - 4usize];
    ["Offset of field: VkEventCreateInfo::flags"]
        [::core::mem::offset_of!(VkEventCreateInfo, flags) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkQueryPoolCreateInfo"][::core::mem::size_of::<VkQueryPoolCreateInfo>() - 24usize];
    ["Alignment of VkQueryPoolCreateInfo"]
        [::core::mem::align_of::<VkQueryPoolCreateInfo>() - 4usize];
    ["Offset of field: VkQueryPoolCreateInfo::sType"]
        [::core::mem::offset_of!(VkQueryPoolCreateInfo, sType) - 0usize];
    ["Offset of field: VkQueryPoolCreateInfo::pNext"]
        [::core::mem::offset_of!(VkQueryPoolCreateInfo, pNext) - 4usize];
    ["Offset of field: VkQueryPoolCreateInfo::flags"]
        [::core::mem::offset_of!(VkQueryPoolCreateInfo, flags) - 8usize];
    ["Offset of field: VkQueryPoolCreateInfo::queryType"]
        [::core::mem::offset_of!(VkQueryPoolCreateInfo, queryType) - 12usize];
    ["Offset of field: VkQueryPoolCreateInfo::queryCount"]
        [::core::mem::offset_of!(VkQueryPoolCreateInfo, queryCount) - 16usize];
    ["Offset of field: VkQueryPoolCreateInfo::pipelineStatistics"]
        [::core::mem::offset_of!(VkQueryPoolCreateInfo, pipelineStatistics) - 20usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkBufferCreateInfo"][::core::mem::size_of::<VkBufferCreateInfo>() - 40usize];
    ["Alignment of VkBufferCreateInfo"][::core::mem::align_of::<VkBufferCreateInfo>() - 8usize];
    ["Offset of field: VkBufferCreateInfo::sType"]
        [::core::mem::offset_of!(VkBufferCreateInfo, sType) - 0usize];
    ["Offset of field: VkBufferCreateInfo::pNext"]
        [::core::mem::offset_of!(VkBufferCreateInfo, pNext) - 4usize];
    ["Offset of field: VkBufferCreateInfo::flags"]
        [::core::mem::offset_of!(VkBufferCreateInfo, flags) - 8usize];
    ["Offset of field: VkBufferCreateInfo::size"]
        [::core::mem::offset_of!(VkBufferCreateInfo, size) - 16usize];
    ["Offset of field: VkBufferCreateInfo::usage"]
        [::core::mem::offset_of!(VkBufferCreateInfo, usage) - 24usize];
    ["Offset of field: VkBufferCreateInfo::sharingMode"]
        [::core::mem::offset_of!(VkBufferCreateInfo, sharingMode) - 28usize];
    ["Offset of field: VkBufferCreateInfo::queueFamilyIndexCount"]
        [::core::mem::offset_of!(VkBufferCreateInfo, queueFamilyIndexCount) - 32usize];
    ["Offset of field: VkBufferCreateInfo::pQueueFamilyIndices"]
        [::core::mem::offset_of!(VkBufferCreateInfo, pQueueFamilyIndices) - 36usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkBufferViewCreateInfo"][::core::mem::size_of::<VkBufferViewCreateInfo>() - 48usize];
    ["Alignment of VkBufferViewCreateInfo"]
        [::core::mem::align_of::<VkBufferViewCreateInfo>() - 8usize];
    ["Offset of field: VkBufferViewCreateInfo::sType"]
        [::core::mem::offset_of!(VkBufferViewCreateInfo, sType) - 0usize];
    ["Offset of field: VkBufferViewCreateInfo::pNext"]
        [::core::mem::offset_of!(VkBufferViewCreateInfo, pNext) - 4usize];
    ["Offset of field: VkBufferViewCreateInfo::flags"]
        [::core::mem::offset_of!(VkBufferViewCreateInfo, flags) - 8usize];
    ["Offset of field: VkBufferViewCreateInfo::buffer"]
        [::core::mem::offset_of!(VkBufferViewCreateInfo, buffer) - 16usize];
    ["Offset of field: VkBufferViewCreateInfo::format"]
        [::core::mem::offset_of!(VkBufferViewCreateInfo, format) - 24usize];
    ["Offset of field: VkBufferViewCreateInfo::offset"]
        [::core::mem::offset_of!(VkBufferViewCreateInfo, offset) - 32usize];
    ["Offset of field: VkBufferViewCreateInfo::range"]
        [::core::mem::offset_of!(VkBufferViewCreateInfo, range) - 40usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkImageCreateInfo"][::core::mem::size_of::<VkImageCreateInfo>() - 68usize];
    ["Alignment of VkImageCreateInfo"][::core::mem::align_of::<VkImageCreateInfo>() - 4usize];
    ["Offset of field: VkImageCreateInfo::sType"]
        [::core::mem::offset_of!(VkImageCreateInfo, sType) - 0usize];
    ["Offset of field: VkImageCreateInfo::pNext"]
        [::core::mem::offset_of!(VkImageCreateInfo, pNext) - 4usize];
    ["Offset of field: VkImageCreateInfo::flags"]
        [::core::mem::offset_of!(VkImageCreateInfo, flags) - 8usize];
    ["Offset of field: VkImageCreateInfo::imageType"]
        [::core::mem::offset_of!(VkImageCreateInfo, imageType) - 12usize];
    ["Offset of field: VkImageCreateInfo::format"]
        [::core::mem::offset_of!(VkImageCreateInfo, format) - 16usize];
    ["Offset of field: VkImageCreateInfo::extent"]
        [::core::mem::offset_of!(VkImageCreateInfo, extent) - 20usize];
    ["Offset of field: VkImageCreateInfo::mipLevels"]
        [::core::mem::offset_of!(VkImageCreateInfo, mipLevels) - 32usize];
    ["Offset of field: VkImageCreateInfo::arrayLayers"]
        [::core::mem::offset_of!(VkImageCreateInfo, arrayLayers) - 36usize];
    ["Offset of field: VkImageCreateInfo::samples"]
        [::core::mem::offset_of!(VkImageCreateInfo, samples) - 40usize];
    ["Offset of field: VkImageCreateInfo::tiling"]
        [::core::mem::offset_of!(VkImageCreateInfo, tiling) - 44usize];
    ["Offset of field: VkImageCreateInfo::usage"]
        [::core::mem::offset_of!(VkImageCreateInfo, usage) - 48usize];
    ["Offset of field: VkImageCreateInfo::sharingMode"]
        [::core::mem::offset_of!(VkImageCreateInfo, sharingMode) - 52usize];
    ["Offset of field: VkImageCreateInfo::queueFamilyIndexCount"]
        [::core::mem::offset_of!(VkImageCreateInfo, queueFamilyIndexCount) - 56usize];
    ["Offset of field: VkImageCreateInfo::pQueueFamilyIndices"]
        [::core::mem::offset_of!(VkImageCreateInfo, pQueueFamilyIndices) - 60usize];
    ["Offset of field: VkImageCreateInfo::initialLayout"]
        [::core::mem::offset_of!(VkImageCreateInfo, initialLayout) - 64usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSubresourceLayout"][::core::mem::size_of::<VkSubresourceLayout>() - 40usize];
    ["Alignment of VkSubresourceLayout"][::core::mem::align_of::<VkSubresourceLayout>() - 8usize];
    ["Offset of field: VkSubresourceLayout::offset"]
        [::core::mem::offset_of!(VkSubresourceLayout, offset) - 0usize];
    ["Offset of field: VkSubresourceLayout::size"]
        [::core::mem::offset_of!(VkSubresourceLayout, size) - 8usize];
    ["Offset of field: VkSubresourceLayout::rowPitch"]
        [::core::mem::offset_of!(VkSubresourceLayout, rowPitch) - 16usize];
    ["Offset of field: VkSubresourceLayout::arrayPitch"]
        [::core::mem::offset_of!(VkSubresourceLayout, arrayPitch) - 24usize];
    ["Offset of field: VkSubresourceLayout::depthPitch"]
        [::core::mem::offset_of!(VkSubresourceLayout, depthPitch) - 32usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkComponentMapping"][::core::mem::size_of::<VkComponentMapping>() - 16usize];
    ["Alignment of VkComponentMapping"][::core::mem::align_of::<VkComponentMapping>() - 4usize];
    ["Offset of field: VkComponentMapping::r"]
        [::core::mem::offset_of!(VkComponentMapping, r) - 0usize];
    ["Offset of field: VkComponentMapping::g"]
        [::core::mem::offset_of!(VkComponentMapping, g) - 4usize];
    ["Offset of field: VkComponentMapping::b"]
        [::core::mem::offset_of!(VkComponentMapping, b) - 8usize];
    ["Offset of field: VkComponentMapping::a"]
        [::core::mem::offset_of!(VkComponentMapping, a) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkImageViewCreateInfo"][::core::mem::size_of::<VkImageViewCreateInfo>() - 72usize];
    ["Alignment of VkImageViewCreateInfo"]
        [::core::mem::align_of::<VkImageViewCreateInfo>() - 8usize];
    ["Offset of field: VkImageViewCreateInfo::sType"]
        [::core::mem::offset_of!(VkImageViewCreateInfo, sType) - 0usize];
    ["Offset of field: VkImageViewCreateInfo::pNext"]
        [::core::mem::offset_of!(VkImageViewCreateInfo, pNext) - 4usize];
    ["Offset of field: VkImageViewCreateInfo::flags"]
        [::core::mem::offset_of!(VkImageViewCreateInfo, flags) - 8usize];
    ["Offset of field: VkImageViewCreateInfo::image"]
        [::core::mem::offset_of!(VkImageViewCreateInfo, image) - 16usize];
    ["Offset of field: VkImageViewCreateInfo::viewType"]
        [::core::mem::offset_of!(VkImageViewCreateInfo, viewType) - 24usize];
    ["Offset of field: VkImageViewCreateInfo::format"]
        [::core::mem::offset_of!(VkImageViewCreateInfo, format) - 28usize];
    ["Offset of field: VkImageViewCreateInfo::components"]
        [::core::mem::offset_of!(VkImageViewCreateInfo, components) - 32usize];
    ["Offset of field: VkImageViewCreateInfo::subresourceRange"]
        [::core::mem::offset_of!(VkImageViewCreateInfo, subresourceRange) - 48usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkShaderModuleCreateInfo"]
        [::core::mem::size_of::<VkShaderModuleCreateInfo>() - 20usize];
    ["Alignment of VkShaderModuleCreateInfo"]
        [::core::mem::align_of::<VkShaderModuleCreateInfo>() - 4usize];
    ["Offset of field: VkShaderModuleCreateInfo::sType"]
        [::core::mem::offset_of!(VkShaderModuleCreateInfo, sType) - 0usize];
    ["Offset of field: VkShaderModuleCreateInfo::pNext"]
        [::core::mem::offset_of!(VkShaderModuleCreateInfo, pNext) - 4usize];
    ["Offset of field: VkShaderModuleCreateInfo::flags"]
        [::core::mem::offset_of!(VkShaderModuleCreateInfo, flags) - 8usize];
    ["Offset of field: VkShaderModuleCreateInfo::codeSize"]
        [::core::mem::offset_of!(VkShaderModuleCreateInfo, codeSize) - 12usize];
    ["Offset of field: VkShaderModuleCreateInfo::pCode"]
        [::core::mem::offset_of!(VkShaderModuleCreateInfo, pCode) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineCacheCreateInfo"]
        [::core::mem::size_of::<VkPipelineCacheCreateInfo>() - 20usize];
    ["Alignment of VkPipelineCacheCreateInfo"]
        [::core::mem::align_of::<VkPipelineCacheCreateInfo>() - 4usize];
    ["Offset of field: VkPipelineCacheCreateInfo::sType"]
        [::core::mem::offset_of!(VkPipelineCacheCreateInfo, sType) - 0usize];
    ["Offset of field: VkPipelineCacheCreateInfo::pNext"]
        [::core::mem::offset_of!(VkPipelineCacheCreateInfo, pNext) - 4usize];
    ["Offset of field: VkPipelineCacheCreateInfo::flags"]
        [::core::mem::offset_of!(VkPipelineCacheCreateInfo, flags) - 8usize];
    ["Offset of field: VkPipelineCacheCreateInfo::initialDataSize"]
        [::core::mem::offset_of!(VkPipelineCacheCreateInfo, initialDataSize) - 12usize];
    ["Offset of field: VkPipelineCacheCreateInfo::pInitialData"]
        [::core::mem::offset_of!(VkPipelineCacheCreateInfo, pInitialData) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSpecializationMapEntry"]
        [::core::mem::size_of::<VkSpecializationMapEntry>() - 12usize];
    ["Alignment of VkSpecializationMapEntry"]
        [::core::mem::align_of::<VkSpecializationMapEntry>() - 4usize];
    ["Offset of field: VkSpecializationMapEntry::constantID"]
        [::core::mem::offset_of!(VkSpecializationMapEntry, constantID) - 0usize];
    ["Offset of field: VkSpecializationMapEntry::offset"]
        [::core::mem::offset_of!(VkSpecializationMapEntry, offset) - 4usize];
    ["Offset of field: VkSpecializationMapEntry::size"]
        [::core::mem::offset_of!(VkSpecializationMapEntry, size) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSpecializationInfo"][::core::mem::size_of::<VkSpecializationInfo>() - 16usize];
    ["Alignment of VkSpecializationInfo"][::core::mem::align_of::<VkSpecializationInfo>() - 4usize];
    ["Offset of field: VkSpecializationInfo::mapEntryCount"]
        [::core::mem::offset_of!(VkSpecializationInfo, mapEntryCount) - 0usize];
    ["Offset of field: VkSpecializationInfo::pMapEntries"]
        [::core::mem::offset_of!(VkSpecializationInfo, pMapEntries) - 4usize];
    ["Offset of field: VkSpecializationInfo::dataSize"]
        [::core::mem::offset_of!(VkSpecializationInfo, dataSize) - 8usize];
    ["Offset of field: VkSpecializationInfo::pData"]
        [::core::mem::offset_of!(VkSpecializationInfo, pData) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineShaderStageCreateInfo"]
        [::core::mem::size_of::<VkPipelineShaderStageCreateInfo>() - 32usize];
    ["Alignment of VkPipelineShaderStageCreateInfo"]
        [::core::mem::align_of::<VkPipelineShaderStageCreateInfo>() - 8usize];
    ["Offset of field: VkPipelineShaderStageCreateInfo::sType"]
        [::core::mem::offset_of!(VkPipelineShaderStageCreateInfo, sType) - 0usize];
    ["Offset of field: VkPipelineShaderStageCreateInfo::pNext"]
        [::core::mem::offset_of!(VkPipelineShaderStageCreateInfo, pNext) - 4usize];
    ["Offset of field: VkPipelineShaderStageCreateInfo::flags"]
        [::core::mem::offset_of!(VkPipelineShaderStageCreateInfo, flags) - 8usize];
    ["Offset of field: VkPipelineShaderStageCreateInfo::stage"]
        [::core::mem::offset_of!(VkPipelineShaderStageCreateInfo, stage) - 12usize];
    ["Offset of field: VkPipelineShaderStageCreateInfo::module"]
        [::core::mem::offset_of!(VkPipelineShaderStageCreateInfo, module) - 16usize];
    ["Offset of field: VkPipelineShaderStageCreateInfo::pName"]
        [::core::mem::offset_of!(VkPipelineShaderStageCreateInfo, pName) - 24usize];
    ["Offset of field: VkPipelineShaderStageCreateInfo::pSpecializationInfo"]
        [::core::mem::offset_of!(VkPipelineShaderStageCreateInfo, pSpecializationInfo) - 28usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkComputePipelineCreateInfo"]
        [::core::mem::size_of::<VkComputePipelineCreateInfo>() - 72usize];
    ["Alignment of VkComputePipelineCreateInfo"]
        [::core::mem::align_of::<VkComputePipelineCreateInfo>() - 8usize];
    ["Offset of field: VkComputePipelineCreateInfo::sType"]
        [::core::mem::offset_of!(VkComputePipelineCreateInfo, sType) - 0usize];
    ["Offset of field: VkComputePipelineCreateInfo::pNext"]
        [::core::mem::offset_of!(VkComputePipelineCreateInfo, pNext) - 4usize];
    ["Offset of field: VkComputePipelineCreateInfo::flags"]
        [::core::mem::offset_of!(VkComputePipelineCreateInfo, flags) - 8usize];
    ["Offset of field: VkComputePipelineCreateInfo::stage"]
        [::core::mem::offset_of!(VkComputePipelineCreateInfo, stage) - 16usize];
    ["Offset of field: VkComputePipelineCreateInfo::layout"]
        [::core::mem::offset_of!(VkComputePipelineCreateInfo, layout) - 48usize];
    ["Offset of field: VkComputePipelineCreateInfo::basePipelineHandle"]
        [::core::mem::offset_of!(VkComputePipelineCreateInfo, basePipelineHandle) - 56usize];
    ["Offset of field: VkComputePipelineCreateInfo::basePipelineIndex"]
        [::core::mem::offset_of!(VkComputePipelineCreateInfo, basePipelineIndex) - 64usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVertexInputBindingDescription"]
        [::core::mem::size_of::<VkVertexInputBindingDescription>() - 12usize];
    ["Alignment of VkVertexInputBindingDescription"]
        [::core::mem::align_of::<VkVertexInputBindingDescription>() - 4usize];
    ["Offset of field: VkVertexInputBindingDescription::binding"]
        [::core::mem::offset_of!(VkVertexInputBindingDescription, binding) - 0usize];
    ["Offset of field: VkVertexInputBindingDescription::stride"]
        [::core::mem::offset_of!(VkVertexInputBindingDescription, stride) - 4usize];
    ["Offset of field: VkVertexInputBindingDescription::inputRate"]
        [::core::mem::offset_of!(VkVertexInputBindingDescription, inputRate) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVertexInputAttributeDescription"]
        [::core::mem::size_of::<VkVertexInputAttributeDescription>() - 16usize];
    ["Alignment of VkVertexInputAttributeDescription"]
        [::core::mem::align_of::<VkVertexInputAttributeDescription>() - 4usize];
    ["Offset of field: VkVertexInputAttributeDescription::location"]
        [::core::mem::offset_of!(VkVertexInputAttributeDescription, location) - 0usize];
    ["Offset of field: VkVertexInputAttributeDescription::binding"]
        [::core::mem::offset_of!(VkVertexInputAttributeDescription, binding) - 4usize];
    ["Offset of field: VkVertexInputAttributeDescription::format"]
        [::core::mem::offset_of!(VkVertexInputAttributeDescription, format) - 8usize];
    ["Offset of field: VkVertexInputAttributeDescription::offset"]
        [::core::mem::offset_of!(VkVertexInputAttributeDescription, offset) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineVertexInputStateCreateInfo"]
        [::core::mem::size_of::<VkPipelineVertexInputStateCreateInfo>() - 28usize];
    ["Alignment of VkPipelineVertexInputStateCreateInfo"]
        [::core::mem::align_of::<VkPipelineVertexInputStateCreateInfo>() - 4usize];
    ["Offset of field: VkPipelineVertexInputStateCreateInfo::sType"]
        [::core::mem::offset_of!(VkPipelineVertexInputStateCreateInfo, sType) - 0usize];
    ["Offset of field: VkPipelineVertexInputStateCreateInfo::pNext"]
        [::core::mem::offset_of!(VkPipelineVertexInputStateCreateInfo, pNext) - 4usize];
    ["Offset of field: VkPipelineVertexInputStateCreateInfo::flags"]
        [::core::mem::offset_of!(VkPipelineVertexInputStateCreateInfo, flags) - 8usize];
    ["Offset of field: VkPipelineVertexInputStateCreateInfo::vertexBindingDescriptionCount"][::core::mem::offset_of!(
        VkPipelineVertexInputStateCreateInfo,
        vertexBindingDescriptionCount
    )
        - 12usize];
    ["Offset of field: VkPipelineVertexInputStateCreateInfo::pVertexBindingDescriptions"][::core::mem::offset_of!(
        VkPipelineVertexInputStateCreateInfo,
        pVertexBindingDescriptions
    )
        - 16usize];
    ["Offset of field: VkPipelineVertexInputStateCreateInfo::vertexAttributeDescriptionCount"][::core::mem::offset_of!(
        VkPipelineVertexInputStateCreateInfo,
        vertexAttributeDescriptionCount
    )
        - 20usize];
    ["Offset of field: VkPipelineVertexInputStateCreateInfo::pVertexAttributeDescriptions"][::core::mem::offset_of!(
        VkPipelineVertexInputStateCreateInfo,
        pVertexAttributeDescriptions
    )
        - 24usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineInputAssemblyStateCreateInfo"]
        [::core::mem::size_of::<VkPipelineInputAssemblyStateCreateInfo>() - 20usize];
    ["Alignment of VkPipelineInputAssemblyStateCreateInfo"]
        [::core::mem::align_of::<VkPipelineInputAssemblyStateCreateInfo>() - 4usize];
    ["Offset of field: VkPipelineInputAssemblyStateCreateInfo::sType"]
        [::core::mem::offset_of!(VkPipelineInputAssemblyStateCreateInfo, sType) - 0usize];
    ["Offset of field: VkPipelineInputAssemblyStateCreateInfo::pNext"]
        [::core::mem::offset_of!(VkPipelineInputAssemblyStateCreateInfo, pNext) - 4usize];
    ["Offset of field: VkPipelineInputAssemblyStateCreateInfo::flags"]
        [::core::mem::offset_of!(VkPipelineInputAssemblyStateCreateInfo, flags) - 8usize];
    ["Offset of field: VkPipelineInputAssemblyStateCreateInfo::topology"]
        [::core::mem::offset_of!(VkPipelineInputAssemblyStateCreateInfo, topology) - 12usize];
    ["Offset of field: VkPipelineInputAssemblyStateCreateInfo::primitiveRestartEnable"][::core::mem::offset_of!(
        VkPipelineInputAssemblyStateCreateInfo,
        primitiveRestartEnable
    )
        - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineTessellationStateCreateInfo"]
        [::core::mem::size_of::<VkPipelineTessellationStateCreateInfo>() - 16usize];
    ["Alignment of VkPipelineTessellationStateCreateInfo"]
        [::core::mem::align_of::<VkPipelineTessellationStateCreateInfo>() - 4usize];
    ["Offset of field: VkPipelineTessellationStateCreateInfo::sType"]
        [::core::mem::offset_of!(VkPipelineTessellationStateCreateInfo, sType) - 0usize];
    ["Offset of field: VkPipelineTessellationStateCreateInfo::pNext"]
        [::core::mem::offset_of!(VkPipelineTessellationStateCreateInfo, pNext) - 4usize];
    ["Offset of field: VkPipelineTessellationStateCreateInfo::flags"]
        [::core::mem::offset_of!(VkPipelineTessellationStateCreateInfo, flags) - 8usize];
    ["Offset of field: VkPipelineTessellationStateCreateInfo::patchControlPoints"][::core::mem::offset_of!(
        VkPipelineTessellationStateCreateInfo,
        patchControlPoints
    ) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkViewport"][::core::mem::size_of::<VkViewport>() - 24usize];
    ["Alignment of VkViewport"][::core::mem::align_of::<VkViewport>() - 4usize];
    ["Offset of field: VkViewport::x"][::core::mem::offset_of!(VkViewport, x) - 0usize];
    ["Offset of field: VkViewport::y"][::core::mem::offset_of!(VkViewport, y) - 4usize];
    ["Offset of field: VkViewport::width"][::core::mem::offset_of!(VkViewport, width) - 8usize];
    ["Offset of field: VkViewport::height"][::core::mem::offset_of!(VkViewport, height) - 12usize];
    ["Offset of field: VkViewport::minDepth"]
        [::core::mem::offset_of!(VkViewport, minDepth) - 16usize];
    ["Offset of field: VkViewport::maxDepth"]
        [::core::mem::offset_of!(VkViewport, maxDepth) - 20usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineViewportStateCreateInfo"]
        [::core::mem::size_of::<VkPipelineViewportStateCreateInfo>() - 28usize];
    ["Alignment of VkPipelineViewportStateCreateInfo"]
        [::core::mem::align_of::<VkPipelineViewportStateCreateInfo>() - 4usize];
    ["Offset of field: VkPipelineViewportStateCreateInfo::sType"]
        [::core::mem::offset_of!(VkPipelineViewportStateCreateInfo, sType) - 0usize];
    ["Offset of field: VkPipelineViewportStateCreateInfo::pNext"]
        [::core::mem::offset_of!(VkPipelineViewportStateCreateInfo, pNext) - 4usize];
    ["Offset of field: VkPipelineViewportStateCreateInfo::flags"]
        [::core::mem::offset_of!(VkPipelineViewportStateCreateInfo, flags) - 8usize];
    ["Offset of field: VkPipelineViewportStateCreateInfo::viewportCount"]
        [::core::mem::offset_of!(VkPipelineViewportStateCreateInfo, viewportCount) - 12usize];
    ["Offset of field: VkPipelineViewportStateCreateInfo::pViewports"]
        [::core::mem::offset_of!(VkPipelineViewportStateCreateInfo, pViewports) - 16usize];
    ["Offset of field: VkPipelineViewportStateCreateInfo::scissorCount"]
        [::core::mem::offset_of!(VkPipelineViewportStateCreateInfo, scissorCount) - 20usize];
    ["Offset of field: VkPipelineViewportStateCreateInfo::pScissors"]
        [::core::mem::offset_of!(VkPipelineViewportStateCreateInfo, pScissors) - 24usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineRasterizationStateCreateInfo"]
        [::core::mem::size_of::<VkPipelineRasterizationStateCreateInfo>() - 52usize];
    ["Alignment of VkPipelineRasterizationStateCreateInfo"]
        [::core::mem::align_of::<VkPipelineRasterizationStateCreateInfo>() - 4usize];
    ["Offset of field: VkPipelineRasterizationStateCreateInfo::sType"]
        [::core::mem::offset_of!(VkPipelineRasterizationStateCreateInfo, sType) - 0usize];
    ["Offset of field: VkPipelineRasterizationStateCreateInfo::pNext"]
        [::core::mem::offset_of!(VkPipelineRasterizationStateCreateInfo, pNext) - 4usize];
    ["Offset of field: VkPipelineRasterizationStateCreateInfo::flags"]
        [::core::mem::offset_of!(VkPipelineRasterizationStateCreateInfo, flags) - 8usize];
    ["Offset of field: VkPipelineRasterizationStateCreateInfo::depthClampEnable"][::core::mem::offset_of!(
        VkPipelineRasterizationStateCreateInfo,
        depthClampEnable
    ) - 12usize];
    ["Offset of field: VkPipelineRasterizationStateCreateInfo::rasterizerDiscardEnable"][::core::mem::offset_of!(
        VkPipelineRasterizationStateCreateInfo,
        rasterizerDiscardEnable
    )
        - 16usize];
    ["Offset of field: VkPipelineRasterizationStateCreateInfo::polygonMode"]
        [::core::mem::offset_of!(VkPipelineRasterizationStateCreateInfo, polygonMode) - 20usize];
    ["Offset of field: VkPipelineRasterizationStateCreateInfo::cullMode"]
        [::core::mem::offset_of!(VkPipelineRasterizationStateCreateInfo, cullMode) - 24usize];
    ["Offset of field: VkPipelineRasterizationStateCreateInfo::frontFace"]
        [::core::mem::offset_of!(VkPipelineRasterizationStateCreateInfo, frontFace) - 28usize];
    ["Offset of field: VkPipelineRasterizationStateCreateInfo::depthBiasEnable"][::core::mem::offset_of!(
        VkPipelineRasterizationStateCreateInfo,
        depthBiasEnable
    ) - 32usize];
    ["Offset of field: VkPipelineRasterizationStateCreateInfo::depthBiasConstantFactor"][::core::mem::offset_of!(
        VkPipelineRasterizationStateCreateInfo,
        depthBiasConstantFactor
    )
        - 36usize];
    ["Offset of field: VkPipelineRasterizationStateCreateInfo::depthBiasClamp"]
        [::core::mem::offset_of!(VkPipelineRasterizationStateCreateInfo, depthBiasClamp) - 40usize];
    ["Offset of field: VkPipelineRasterizationStateCreateInfo::depthBiasSlopeFactor"][::core::mem::offset_of!(
        VkPipelineRasterizationStateCreateInfo,
        depthBiasSlopeFactor
    ) - 44usize];
    ["Offset of field: VkPipelineRasterizationStateCreateInfo::lineWidth"]
        [::core::mem::offset_of!(VkPipelineRasterizationStateCreateInfo, lineWidth) - 48usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineMultisampleStateCreateInfo"]
        [::core::mem::size_of::<VkPipelineMultisampleStateCreateInfo>() - 36usize];
    ["Alignment of VkPipelineMultisampleStateCreateInfo"]
        [::core::mem::align_of::<VkPipelineMultisampleStateCreateInfo>() - 4usize];
    ["Offset of field: VkPipelineMultisampleStateCreateInfo::sType"]
        [::core::mem::offset_of!(VkPipelineMultisampleStateCreateInfo, sType) - 0usize];
    ["Offset of field: VkPipelineMultisampleStateCreateInfo::pNext"]
        [::core::mem::offset_of!(VkPipelineMultisampleStateCreateInfo, pNext) - 4usize];
    ["Offset of field: VkPipelineMultisampleStateCreateInfo::flags"]
        [::core::mem::offset_of!(VkPipelineMultisampleStateCreateInfo, flags) - 8usize];
    ["Offset of field: VkPipelineMultisampleStateCreateInfo::rasterizationSamples"][::core::mem::offset_of!(
        VkPipelineMultisampleStateCreateInfo,
        rasterizationSamples
    ) - 12usize];
    ["Offset of field: VkPipelineMultisampleStateCreateInfo::sampleShadingEnable"][::core::mem::offset_of!(
        VkPipelineMultisampleStateCreateInfo,
        sampleShadingEnable
    ) - 16usize];
    ["Offset of field: VkPipelineMultisampleStateCreateInfo::minSampleShading"]
        [::core::mem::offset_of!(VkPipelineMultisampleStateCreateInfo, minSampleShading) - 20usize];
    ["Offset of field: VkPipelineMultisampleStateCreateInfo::pSampleMask"]
        [::core::mem::offset_of!(VkPipelineMultisampleStateCreateInfo, pSampleMask) - 24usize];
    ["Offset of field: VkPipelineMultisampleStateCreateInfo::alphaToCoverageEnable"][::core::mem::offset_of!(
        VkPipelineMultisampleStateCreateInfo,
        alphaToCoverageEnable
    ) - 28usize];
    ["Offset of field: VkPipelineMultisampleStateCreateInfo::alphaToOneEnable"]
        [::core::mem::offset_of!(VkPipelineMultisampleStateCreateInfo, alphaToOneEnable) - 32usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkStencilOpState"][::core::mem::size_of::<VkStencilOpState>() - 28usize];
    ["Alignment of VkStencilOpState"][::core::mem::align_of::<VkStencilOpState>() - 4usize];
    ["Offset of field: VkStencilOpState::failOp"]
        [::core::mem::offset_of!(VkStencilOpState, failOp) - 0usize];
    ["Offset of field: VkStencilOpState::passOp"]
        [::core::mem::offset_of!(VkStencilOpState, passOp) - 4usize];
    ["Offset of field: VkStencilOpState::depthFailOp"]
        [::core::mem::offset_of!(VkStencilOpState, depthFailOp) - 8usize];
    ["Offset of field: VkStencilOpState::compareOp"]
        [::core::mem::offset_of!(VkStencilOpState, compareOp) - 12usize];
    ["Offset of field: VkStencilOpState::compareMask"]
        [::core::mem::offset_of!(VkStencilOpState, compareMask) - 16usize];
    ["Offset of field: VkStencilOpState::writeMask"]
        [::core::mem::offset_of!(VkStencilOpState, writeMask) - 20usize];
    ["Offset of field: VkStencilOpState::reference"]
        [::core::mem::offset_of!(VkStencilOpState, reference) - 24usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineDepthStencilStateCreateInfo"]
        [::core::mem::size_of::<VkPipelineDepthStencilStateCreateInfo>() - 96usize];
    ["Alignment of VkPipelineDepthStencilStateCreateInfo"]
        [::core::mem::align_of::<VkPipelineDepthStencilStateCreateInfo>() - 4usize];
    ["Offset of field: VkPipelineDepthStencilStateCreateInfo::sType"]
        [::core::mem::offset_of!(VkPipelineDepthStencilStateCreateInfo, sType) - 0usize];
    ["Offset of field: VkPipelineDepthStencilStateCreateInfo::pNext"]
        [::core::mem::offset_of!(VkPipelineDepthStencilStateCreateInfo, pNext) - 4usize];
    ["Offset of field: VkPipelineDepthStencilStateCreateInfo::flags"]
        [::core::mem::offset_of!(VkPipelineDepthStencilStateCreateInfo, flags) - 8usize];
    ["Offset of field: VkPipelineDepthStencilStateCreateInfo::depthTestEnable"]
        [::core::mem::offset_of!(VkPipelineDepthStencilStateCreateInfo, depthTestEnable) - 12usize];
    ["Offset of field: VkPipelineDepthStencilStateCreateInfo::depthWriteEnable"][::core::mem::offset_of!(
        VkPipelineDepthStencilStateCreateInfo,
        depthWriteEnable
    ) - 16usize];
    ["Offset of field: VkPipelineDepthStencilStateCreateInfo::depthCompareOp"]
        [::core::mem::offset_of!(VkPipelineDepthStencilStateCreateInfo, depthCompareOp) - 20usize];
    ["Offset of field: VkPipelineDepthStencilStateCreateInfo::depthBoundsTestEnable"][::core::mem::offset_of!(
        VkPipelineDepthStencilStateCreateInfo,
        depthBoundsTestEnable
    ) - 24usize];
    ["Offset of field: VkPipelineDepthStencilStateCreateInfo::stencilTestEnable"][::core::mem::offset_of!(
        VkPipelineDepthStencilStateCreateInfo,
        stencilTestEnable
    ) - 28usize];
    ["Offset of field: VkPipelineDepthStencilStateCreateInfo::front"]
        [::core::mem::offset_of!(VkPipelineDepthStencilStateCreateInfo, front) - 32usize];
    ["Offset of field: VkPipelineDepthStencilStateCreateInfo::back"]
        [::core::mem::offset_of!(VkPipelineDepthStencilStateCreateInfo, back) - 60usize];
    ["Offset of field: VkPipelineDepthStencilStateCreateInfo::minDepthBounds"]
        [::core::mem::offset_of!(VkPipelineDepthStencilStateCreateInfo, minDepthBounds) - 88usize];
    ["Offset of field: VkPipelineDepthStencilStateCreateInfo::maxDepthBounds"]
        [::core::mem::offset_of!(VkPipelineDepthStencilStateCreateInfo, maxDepthBounds) - 92usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineColorBlendAttachmentState"]
        [::core::mem::size_of::<VkPipelineColorBlendAttachmentState>() - 32usize];
    ["Alignment of VkPipelineColorBlendAttachmentState"]
        [::core::mem::align_of::<VkPipelineColorBlendAttachmentState>() - 4usize];
    ["Offset of field: VkPipelineColorBlendAttachmentState::blendEnable"]
        [::core::mem::offset_of!(VkPipelineColorBlendAttachmentState, blendEnable) - 0usize];
    ["Offset of field: VkPipelineColorBlendAttachmentState::srcColorBlendFactor"][::core::mem::offset_of!(
        VkPipelineColorBlendAttachmentState,
        srcColorBlendFactor
    ) - 4usize];
    ["Offset of field: VkPipelineColorBlendAttachmentState::dstColorBlendFactor"][::core::mem::offset_of!(
        VkPipelineColorBlendAttachmentState,
        dstColorBlendFactor
    ) - 8usize];
    ["Offset of field: VkPipelineColorBlendAttachmentState::colorBlendOp"]
        [::core::mem::offset_of!(VkPipelineColorBlendAttachmentState, colorBlendOp) - 12usize];
    ["Offset of field: VkPipelineColorBlendAttachmentState::srcAlphaBlendFactor"][::core::mem::offset_of!(
        VkPipelineColorBlendAttachmentState,
        srcAlphaBlendFactor
    ) - 16usize];
    ["Offset of field: VkPipelineColorBlendAttachmentState::dstAlphaBlendFactor"][::core::mem::offset_of!(
        VkPipelineColorBlendAttachmentState,
        dstAlphaBlendFactor
    ) - 20usize];
    ["Offset of field: VkPipelineColorBlendAttachmentState::alphaBlendOp"]
        [::core::mem::offset_of!(VkPipelineColorBlendAttachmentState, alphaBlendOp) - 24usize];
    ["Offset of field: VkPipelineColorBlendAttachmentState::colorWriteMask"]
        [::core::mem::offset_of!(VkPipelineColorBlendAttachmentState, colorWriteMask) - 28usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineColorBlendStateCreateInfo"]
        [::core::mem::size_of::<VkPipelineColorBlendStateCreateInfo>() - 44usize];
    ["Alignment of VkPipelineColorBlendStateCreateInfo"]
        [::core::mem::align_of::<VkPipelineColorBlendStateCreateInfo>() - 4usize];
    ["Offset of field: VkPipelineColorBlendStateCreateInfo::sType"]
        [::core::mem::offset_of!(VkPipelineColorBlendStateCreateInfo, sType) - 0usize];
    ["Offset of field: VkPipelineColorBlendStateCreateInfo::pNext"]
        [::core::mem::offset_of!(VkPipelineColorBlendStateCreateInfo, pNext) - 4usize];
    ["Offset of field: VkPipelineColorBlendStateCreateInfo::flags"]
        [::core::mem::offset_of!(VkPipelineColorBlendStateCreateInfo, flags) - 8usize];
    ["Offset of field: VkPipelineColorBlendStateCreateInfo::logicOpEnable"]
        [::core::mem::offset_of!(VkPipelineColorBlendStateCreateInfo, logicOpEnable) - 12usize];
    ["Offset of field: VkPipelineColorBlendStateCreateInfo::logicOp"]
        [::core::mem::offset_of!(VkPipelineColorBlendStateCreateInfo, logicOp) - 16usize];
    ["Offset of field: VkPipelineColorBlendStateCreateInfo::attachmentCount"]
        [::core::mem::offset_of!(VkPipelineColorBlendStateCreateInfo, attachmentCount) - 20usize];
    ["Offset of field: VkPipelineColorBlendStateCreateInfo::pAttachments"]
        [::core::mem::offset_of!(VkPipelineColorBlendStateCreateInfo, pAttachments) - 24usize];
    ["Offset of field: VkPipelineColorBlendStateCreateInfo::blendConstants"]
        [::core::mem::offset_of!(VkPipelineColorBlendStateCreateInfo, blendConstants) - 28usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineDynamicStateCreateInfo"]
        [::core::mem::size_of::<VkPipelineDynamicStateCreateInfo>() - 20usize];
    ["Alignment of VkPipelineDynamicStateCreateInfo"]
        [::core::mem::align_of::<VkPipelineDynamicStateCreateInfo>() - 4usize];
    ["Offset of field: VkPipelineDynamicStateCreateInfo::sType"]
        [::core::mem::offset_of!(VkPipelineDynamicStateCreateInfo, sType) - 0usize];
    ["Offset of field: VkPipelineDynamicStateCreateInfo::pNext"]
        [::core::mem::offset_of!(VkPipelineDynamicStateCreateInfo, pNext) - 4usize];
    ["Offset of field: VkPipelineDynamicStateCreateInfo::flags"]
        [::core::mem::offset_of!(VkPipelineDynamicStateCreateInfo, flags) - 8usize];
    ["Offset of field: VkPipelineDynamicStateCreateInfo::dynamicStateCount"]
        [::core::mem::offset_of!(VkPipelineDynamicStateCreateInfo, dynamicStateCount) - 12usize];
    ["Offset of field: VkPipelineDynamicStateCreateInfo::pDynamicStates"]
        [::core::mem::offset_of!(VkPipelineDynamicStateCreateInfo, pDynamicStates) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkGraphicsPipelineCreateInfo"]
        [::core::mem::size_of::<VkGraphicsPipelineCreateInfo>() - 96usize];
    ["Alignment of VkGraphicsPipelineCreateInfo"]
        [::core::mem::align_of::<VkGraphicsPipelineCreateInfo>() - 8usize];
    ["Offset of field: VkGraphicsPipelineCreateInfo::sType"]
        [::core::mem::offset_of!(VkGraphicsPipelineCreateInfo, sType) - 0usize];
    ["Offset of field: VkGraphicsPipelineCreateInfo::pNext"]
        [::core::mem::offset_of!(VkGraphicsPipelineCreateInfo, pNext) - 4usize];
    ["Offset of field: VkGraphicsPipelineCreateInfo::flags"]
        [::core::mem::offset_of!(VkGraphicsPipelineCreateInfo, flags) - 8usize];
    ["Offset of field: VkGraphicsPipelineCreateInfo::stageCount"]
        [::core::mem::offset_of!(VkGraphicsPipelineCreateInfo, stageCount) - 12usize];
    ["Offset of field: VkGraphicsPipelineCreateInfo::pStages"]
        [::core::mem::offset_of!(VkGraphicsPipelineCreateInfo, pStages) - 16usize];
    ["Offset of field: VkGraphicsPipelineCreateInfo::pVertexInputState"]
        [::core::mem::offset_of!(VkGraphicsPipelineCreateInfo, pVertexInputState) - 20usize];
    ["Offset of field: VkGraphicsPipelineCreateInfo::pInputAssemblyState"]
        [::core::mem::offset_of!(VkGraphicsPipelineCreateInfo, pInputAssemblyState) - 24usize];
    ["Offset of field: VkGraphicsPipelineCreateInfo::pTessellationState"]
        [::core::mem::offset_of!(VkGraphicsPipelineCreateInfo, pTessellationState) - 28usize];
    ["Offset of field: VkGraphicsPipelineCreateInfo::pViewportState"]
        [::core::mem::offset_of!(VkGraphicsPipelineCreateInfo, pViewportState) - 32usize];
    ["Offset of field: VkGraphicsPipelineCreateInfo::pRasterizationState"]
        [::core::mem::offset_of!(VkGraphicsPipelineCreateInfo, pRasterizationState) - 36usize];
    ["Offset of field: VkGraphicsPipelineCreateInfo::pMultisampleState"]
        [::core::mem::offset_of!(VkGraphicsPipelineCreateInfo, pMultisampleState) - 40usize];
    ["Offset of field: VkGraphicsPipelineCreateInfo::pDepthStencilState"]
        [::core::mem::offset_of!(VkGraphicsPipelineCreateInfo, pDepthStencilState) - 44usize];
    ["Offset of field: VkGraphicsPipelineCreateInfo::pColorBlendState"]
        [::core::mem::offset_of!(VkGraphicsPipelineCreateInfo, pColorBlendState) - 48usize];
    ["Offset of field: VkGraphicsPipelineCreateInfo::pDynamicState"]
        [::core::mem::offset_of!(VkGraphicsPipelineCreateInfo, pDynamicState) - 52usize];
    ["Offset of field: VkGraphicsPipelineCreateInfo::layout"]
        [::core::mem::offset_of!(VkGraphicsPipelineCreateInfo, layout) - 56usize];
    ["Offset of field: VkGraphicsPipelineCreateInfo::renderPass"]
        [::core::mem::offset_of!(VkGraphicsPipelineCreateInfo, renderPass) - 64usize];
    ["Offset of field: VkGraphicsPipelineCreateInfo::subpass"]
        [::core::mem::offset_of!(VkGraphicsPipelineCreateInfo, subpass) - 72usize];
    ["Offset of field: VkGraphicsPipelineCreateInfo::basePipelineHandle"]
        [::core::mem::offset_of!(VkGraphicsPipelineCreateInfo, basePipelineHandle) - 80usize];
    ["Offset of field: VkGraphicsPipelineCreateInfo::basePipelineIndex"]
        [::core::mem::offset_of!(VkGraphicsPipelineCreateInfo, basePipelineIndex) - 88usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPushConstantRange"][::core::mem::size_of::<VkPushConstantRange>() - 12usize];
    ["Alignment of VkPushConstantRange"][::core::mem::align_of::<VkPushConstantRange>() - 4usize];
    ["Offset of field: VkPushConstantRange::stageFlags"]
        [::core::mem::offset_of!(VkPushConstantRange, stageFlags) - 0usize];
    ["Offset of field: VkPushConstantRange::offset"]
        [::core::mem::offset_of!(VkPushConstantRange, offset) - 4usize];
    ["Offset of field: VkPushConstantRange::size"]
        [::core::mem::offset_of!(VkPushConstantRange, size) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineLayoutCreateInfo"]
        [::core::mem::size_of::<VkPipelineLayoutCreateInfo>() - 28usize];
    ["Alignment of VkPipelineLayoutCreateInfo"]
        [::core::mem::align_of::<VkPipelineLayoutCreateInfo>() - 4usize];
    ["Offset of field: VkPipelineLayoutCreateInfo::sType"]
        [::core::mem::offset_of!(VkPipelineLayoutCreateInfo, sType) - 0usize];
    ["Offset of field: VkPipelineLayoutCreateInfo::pNext"]
        [::core::mem::offset_of!(VkPipelineLayoutCreateInfo, pNext) - 4usize];
    ["Offset of field: VkPipelineLayoutCreateInfo::flags"]
        [::core::mem::offset_of!(VkPipelineLayoutCreateInfo, flags) - 8usize];
    ["Offset of field: VkPipelineLayoutCreateInfo::setLayoutCount"]
        [::core::mem::offset_of!(VkPipelineLayoutCreateInfo, setLayoutCount) - 12usize];
    ["Offset of field: VkPipelineLayoutCreateInfo::pSetLayouts"]
        [::core::mem::offset_of!(VkPipelineLayoutCreateInfo, pSetLayouts) - 16usize];
    ["Offset of field: VkPipelineLayoutCreateInfo::pushConstantRangeCount"]
        [::core::mem::offset_of!(VkPipelineLayoutCreateInfo, pushConstantRangeCount) - 20usize];
    ["Offset of field: VkPipelineLayoutCreateInfo::pPushConstantRanges"]
        [::core::mem::offset_of!(VkPipelineLayoutCreateInfo, pPushConstantRanges) - 24usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSamplerCreateInfo"][::core::mem::size_of::<VkSamplerCreateInfo>() - 72usize];
    ["Alignment of VkSamplerCreateInfo"][::core::mem::align_of::<VkSamplerCreateInfo>() - 4usize];
    ["Offset of field: VkSamplerCreateInfo::sType"]
        [::core::mem::offset_of!(VkSamplerCreateInfo, sType) - 0usize];
    ["Offset of field: VkSamplerCreateInfo::pNext"]
        [::core::mem::offset_of!(VkSamplerCreateInfo, pNext) - 4usize];
    ["Offset of field: VkSamplerCreateInfo::flags"]
        [::core::mem::offset_of!(VkSamplerCreateInfo, flags) - 8usize];
    ["Offset of field: VkSamplerCreateInfo::magFilter"]
        [::core::mem::offset_of!(VkSamplerCreateInfo, magFilter) - 12usize];
    ["Offset of field: VkSamplerCreateInfo::minFilter"]
        [::core::mem::offset_of!(VkSamplerCreateInfo, minFilter) - 16usize];
    ["Offset of field: VkSamplerCreateInfo::mipmapMode"]
        [::core::mem::offset_of!(VkSamplerCreateInfo, mipmapMode) - 20usize];
    ["Offset of field: VkSamplerCreateInfo::addressModeU"]
        [::core::mem::offset_of!(VkSamplerCreateInfo, addressModeU) - 24usize];
    ["Offset of field: VkSamplerCreateInfo::addressModeV"]
        [::core::mem::offset_of!(VkSamplerCreateInfo, addressModeV) - 28usize];
    ["Offset of field: VkSamplerCreateInfo::addressModeW"]
        [::core::mem::offset_of!(VkSamplerCreateInfo, addressModeW) - 32usize];
    ["Offset of field: VkSamplerCreateInfo::mipLodBias"]
        [::core::mem::offset_of!(VkSamplerCreateInfo, mipLodBias) - 36usize];
    ["Offset of field: VkSamplerCreateInfo::anisotropyEnable"]
        [::core::mem::offset_of!(VkSamplerCreateInfo, anisotropyEnable) - 40usize];
    ["Offset of field: VkSamplerCreateInfo::maxAnisotropy"]
        [::core::mem::offset_of!(VkSamplerCreateInfo, maxAnisotropy) - 44usize];
    ["Offset of field: VkSamplerCreateInfo::compareEnable"]
        [::core::mem::offset_of!(VkSamplerCreateInfo, compareEnable) - 48usize];
    ["Offset of field: VkSamplerCreateInfo::compareOp"]
        [::core::mem::offset_of!(VkSamplerCreateInfo, compareOp) - 52usize];
    ["Offset of field: VkSamplerCreateInfo::minLod"]
        [::core::mem::offset_of!(VkSamplerCreateInfo, minLod) - 56usize];
    ["Offset of field: VkSamplerCreateInfo::maxLod"]
        [::core::mem::offset_of!(VkSamplerCreateInfo, maxLod) - 60usize];
    ["Offset of field: VkSamplerCreateInfo::borderColor"]
        [::core::mem::offset_of!(VkSamplerCreateInfo, borderColor) - 64usize];
    ["Offset of field: VkSamplerCreateInfo::unnormalizedCoordinates"]
        [::core::mem::offset_of!(VkSamplerCreateInfo, unnormalizedCoordinates) - 68usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkCopyDescriptorSet"][::core::mem::size_of::<VkCopyDescriptorSet>() - 48usize];
    ["Alignment of VkCopyDescriptorSet"][::core::mem::align_of::<VkCopyDescriptorSet>() - 8usize];
    ["Offset of field: VkCopyDescriptorSet::sType"]
        [::core::mem::offset_of!(VkCopyDescriptorSet, sType) - 0usize];
    ["Offset of field: VkCopyDescriptorSet::pNext"]
        [::core::mem::offset_of!(VkCopyDescriptorSet, pNext) - 4usize];
    ["Offset of field: VkCopyDescriptorSet::srcSet"]
        [::core::mem::offset_of!(VkCopyDescriptorSet, srcSet) - 8usize];
    ["Offset of field: VkCopyDescriptorSet::srcBinding"]
        [::core::mem::offset_of!(VkCopyDescriptorSet, srcBinding) - 16usize];
    ["Offset of field: VkCopyDescriptorSet::srcArrayElement"]
        [::core::mem::offset_of!(VkCopyDescriptorSet, srcArrayElement) - 20usize];
    ["Offset of field: VkCopyDescriptorSet::dstSet"]
        [::core::mem::offset_of!(VkCopyDescriptorSet, dstSet) - 24usize];
    ["Offset of field: VkCopyDescriptorSet::dstBinding"]
        [::core::mem::offset_of!(VkCopyDescriptorSet, dstBinding) - 32usize];
    ["Offset of field: VkCopyDescriptorSet::dstArrayElement"]
        [::core::mem::offset_of!(VkCopyDescriptorSet, dstArrayElement) - 36usize];
    ["Offset of field: VkCopyDescriptorSet::descriptorCount"]
        [::core::mem::offset_of!(VkCopyDescriptorSet, descriptorCount) - 40usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDescriptorBufferInfo"][::core::mem::size_of::<VkDescriptorBufferInfo>() - 24usize];
    ["Alignment of VkDescriptorBufferInfo"]
        [::core::mem::align_of::<VkDescriptorBufferInfo>() - 8usize];
    ["Offset of field: VkDescriptorBufferInfo::buffer"]
        [::core::mem::offset_of!(VkDescriptorBufferInfo, buffer) - 0usize];
    ["Offset of field: VkDescriptorBufferInfo::offset"]
        [::core::mem::offset_of!(VkDescriptorBufferInfo, offset) - 8usize];
    ["Offset of field: VkDescriptorBufferInfo::range"]
        [::core::mem::offset_of!(VkDescriptorBufferInfo, range) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDescriptorImageInfo"][::core::mem::size_of::<VkDescriptorImageInfo>() - 24usize];
    ["Alignment of VkDescriptorImageInfo"]
        [::core::mem::align_of::<VkDescriptorImageInfo>() - 8usize];
    ["Offset of field: VkDescriptorImageInfo::sampler"]
        [::core::mem::offset_of!(VkDescriptorImageInfo, sampler) - 0usize];
    ["Offset of field: VkDescriptorImageInfo::imageView"]
        [::core::mem::offset_of!(VkDescriptorImageInfo, imageView) - 8usize];
    ["Offset of field: VkDescriptorImageInfo::imageLayout"]
        [::core::mem::offset_of!(VkDescriptorImageInfo, imageLayout) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDescriptorPoolSize"][::core::mem::size_of::<VkDescriptorPoolSize>() - 8usize];
    ["Alignment of VkDescriptorPoolSize"][::core::mem::align_of::<VkDescriptorPoolSize>() - 4usize];
    ["Offset of field: VkDescriptorPoolSize::type_"]
        [::core::mem::offset_of!(VkDescriptorPoolSize, type_) - 0usize];
    ["Offset of field: VkDescriptorPoolSize::descriptorCount"]
        [::core::mem::offset_of!(VkDescriptorPoolSize, descriptorCount) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDescriptorPoolCreateInfo"]
        [::core::mem::size_of::<VkDescriptorPoolCreateInfo>() - 24usize];
    ["Alignment of VkDescriptorPoolCreateInfo"]
        [::core::mem::align_of::<VkDescriptorPoolCreateInfo>() - 4usize];
    ["Offset of field: VkDescriptorPoolCreateInfo::sType"]
        [::core::mem::offset_of!(VkDescriptorPoolCreateInfo, sType) - 0usize];
    ["Offset of field: VkDescriptorPoolCreateInfo::pNext"]
        [::core::mem::offset_of!(VkDescriptorPoolCreateInfo, pNext) - 4usize];
    ["Offset of field: VkDescriptorPoolCreateInfo::flags"]
        [::core::mem::offset_of!(VkDescriptorPoolCreateInfo, flags) - 8usize];
    ["Offset of field: VkDescriptorPoolCreateInfo::maxSets"]
        [::core::mem::offset_of!(VkDescriptorPoolCreateInfo, maxSets) - 12usize];
    ["Offset of field: VkDescriptorPoolCreateInfo::poolSizeCount"]
        [::core::mem::offset_of!(VkDescriptorPoolCreateInfo, poolSizeCount) - 16usize];
    ["Offset of field: VkDescriptorPoolCreateInfo::pPoolSizes"]
        [::core::mem::offset_of!(VkDescriptorPoolCreateInfo, pPoolSizes) - 20usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDescriptorSetAllocateInfo"]
        [::core::mem::size_of::<VkDescriptorSetAllocateInfo>() - 24usize];
    ["Alignment of VkDescriptorSetAllocateInfo"]
        [::core::mem::align_of::<VkDescriptorSetAllocateInfo>() - 8usize];
    ["Offset of field: VkDescriptorSetAllocateInfo::sType"]
        [::core::mem::offset_of!(VkDescriptorSetAllocateInfo, sType) - 0usize];
    ["Offset of field: VkDescriptorSetAllocateInfo::pNext"]
        [::core::mem::offset_of!(VkDescriptorSetAllocateInfo, pNext) - 4usize];
    ["Offset of field: VkDescriptorSetAllocateInfo::descriptorPool"]
        [::core::mem::offset_of!(VkDescriptorSetAllocateInfo, descriptorPool) - 8usize];
    ["Offset of field: VkDescriptorSetAllocateInfo::descriptorSetCount"]
        [::core::mem::offset_of!(VkDescriptorSetAllocateInfo, descriptorSetCount) - 16usize];
    ["Offset of field: VkDescriptorSetAllocateInfo::pSetLayouts"]
        [::core::mem::offset_of!(VkDescriptorSetAllocateInfo, pSetLayouts) - 20usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDescriptorSetLayoutBinding"]
        [::core::mem::size_of::<VkDescriptorSetLayoutBinding>() - 20usize];
    ["Alignment of VkDescriptorSetLayoutBinding"]
        [::core::mem::align_of::<VkDescriptorSetLayoutBinding>() - 4usize];
    ["Offset of field: VkDescriptorSetLayoutBinding::binding"]
        [::core::mem::offset_of!(VkDescriptorSetLayoutBinding, binding) - 0usize];
    ["Offset of field: VkDescriptorSetLayoutBinding::descriptorType"]
        [::core::mem::offset_of!(VkDescriptorSetLayoutBinding, descriptorType) - 4usize];
    ["Offset of field: VkDescriptorSetLayoutBinding::descriptorCount"]
        [::core::mem::offset_of!(VkDescriptorSetLayoutBinding, descriptorCount) - 8usize];
    ["Offset of field: VkDescriptorSetLayoutBinding::stageFlags"]
        [::core::mem::offset_of!(VkDescriptorSetLayoutBinding, stageFlags) - 12usize];
    ["Offset of field: VkDescriptorSetLayoutBinding::pImmutableSamplers"]
        [::core::mem::offset_of!(VkDescriptorSetLayoutBinding, pImmutableSamplers) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDescriptorSetLayoutCreateInfo"]
        [::core::mem::size_of::<VkDescriptorSetLayoutCreateInfo>() - 20usize];
    ["Alignment of VkDescriptorSetLayoutCreateInfo"]
        [::core::mem::align_of::<VkDescriptorSetLayoutCreateInfo>() - 4usize];
    ["Offset of field: VkDescriptorSetLayoutCreateInfo::sType"]
        [::core::mem::offset_of!(VkDescriptorSetLayoutCreateInfo, sType) - 0usize];
    ["Offset of field: VkDescriptorSetLayoutCreateInfo::pNext"]
        [::core::mem::offset_of!(VkDescriptorSetLayoutCreateInfo, pNext) - 4usize];
    ["Offset of field: VkDescriptorSetLayoutCreateInfo::flags"]
        [::core::mem::offset_of!(VkDescriptorSetLayoutCreateInfo, flags) - 8usize];
    ["Offset of field: VkDescriptorSetLayoutCreateInfo::bindingCount"]
        [::core::mem::offset_of!(VkDescriptorSetLayoutCreateInfo, bindingCount) - 12usize];
    ["Offset of field: VkDescriptorSetLayoutCreateInfo::pBindings"]
        [::core::mem::offset_of!(VkDescriptorSetLayoutCreateInfo, pBindings) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkWriteDescriptorSet"][::core::mem::size_of::<VkWriteDescriptorSet>() - 48usize];
    ["Alignment of VkWriteDescriptorSet"][::core::mem::align_of::<VkWriteDescriptorSet>() - 8usize];
    ["Offset of field: VkWriteDescriptorSet::sType"]
        [::core::mem::offset_of!(VkWriteDescriptorSet, sType) - 0usize];
    ["Offset of field: VkWriteDescriptorSet::pNext"]
        [::core::mem::offset_of!(VkWriteDescriptorSet, pNext) - 4usize];
    ["Offset of field: VkWriteDescriptorSet::dstSet"]
        [::core::mem::offset_of!(VkWriteDescriptorSet, dstSet) - 8usize];
    ["Offset of field: VkWriteDescriptorSet::dstBinding"]
        [::core::mem::offset_of!(VkWriteDescriptorSet, dstBinding) - 16usize];
    ["Offset of field: VkWriteDescriptorSet::dstArrayElement"]
        [::core::mem::offset_of!(VkWriteDescriptorSet, dstArrayElement) - 20usize];
    ["Offset of field: VkWriteDescriptorSet::descriptorCount"]
        [::core::mem::offset_of!(VkWriteDescriptorSet, descriptorCount) - 24usize];
    ["Offset of field: VkWriteDescriptorSet::descriptorType"]
        [::core::mem::offset_of!(VkWriteDescriptorSet, descriptorType) - 28usize];
    ["Offset of field: VkWriteDescriptorSet::pImageInfo"]
        [::core::mem::offset_of!(VkWriteDescriptorSet, pImageInfo) - 32usize];
    ["Offset of field: VkWriteDescriptorSet::pBufferInfo"]
        [::core::mem::offset_of!(VkWriteDescriptorSet, pBufferInfo) - 36usize];
    ["Offset of field: VkWriteDescriptorSet::pTexelBufferView"]
        [::core::mem::offset_of!(VkWriteDescriptorSet, pTexelBufferView) - 40usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkAttachmentDescription"]
        [::core::mem::size_of::<VkAttachmentDescription>() - 36usize];
    ["Alignment of VkAttachmentDescription"]
        [::core::mem::align_of::<VkAttachmentDescription>() - 4usize];
    ["Offset of field: VkAttachmentDescription::flags"]
        [::core::mem::offset_of!(VkAttachmentDescription, flags) - 0usize];
    ["Offset of field: VkAttachmentDescription::format"]
        [::core::mem::offset_of!(VkAttachmentDescription, format) - 4usize];
    ["Offset of field: VkAttachmentDescription::samples"]
        [::core::mem::offset_of!(VkAttachmentDescription, samples) - 8usize];
    ["Offset of field: VkAttachmentDescription::loadOp"]
        [::core::mem::offset_of!(VkAttachmentDescription, loadOp) - 12usize];
    ["Offset of field: VkAttachmentDescription::storeOp"]
        [::core::mem::offset_of!(VkAttachmentDescription, storeOp) - 16usize];
    ["Offset of field: VkAttachmentDescription::stencilLoadOp"]
        [::core::mem::offset_of!(VkAttachmentDescription, stencilLoadOp) - 20usize];
    ["Offset of field: VkAttachmentDescription::stencilStoreOp"]
        [::core::mem::offset_of!(VkAttachmentDescription, stencilStoreOp) - 24usize];
    ["Offset of field: VkAttachmentDescription::initialLayout"]
        [::core::mem::offset_of!(VkAttachmentDescription, initialLayout) - 28usize];
    ["Offset of field: VkAttachmentDescription::finalLayout"]
        [::core::mem::offset_of!(VkAttachmentDescription, finalLayout) - 32usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkAttachmentReference"][::core::mem::size_of::<VkAttachmentReference>() - 8usize];
    ["Alignment of VkAttachmentReference"]
        [::core::mem::align_of::<VkAttachmentReference>() - 4usize];
    ["Offset of field: VkAttachmentReference::attachment"]
        [::core::mem::offset_of!(VkAttachmentReference, attachment) - 0usize];
    ["Offset of field: VkAttachmentReference::layout"]
        [::core::mem::offset_of!(VkAttachmentReference, layout) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkFramebufferCreateInfo"]
        [::core::mem::size_of::<VkFramebufferCreateInfo>() - 48usize];
    ["Alignment of VkFramebufferCreateInfo"]
        [::core::mem::align_of::<VkFramebufferCreateInfo>() - 8usize];
    ["Offset of field: VkFramebufferCreateInfo::sType"]
        [::core::mem::offset_of!(VkFramebufferCreateInfo, sType) - 0usize];
    ["Offset of field: VkFramebufferCreateInfo::pNext"]
        [::core::mem::offset_of!(VkFramebufferCreateInfo, pNext) - 4usize];
    ["Offset of field: VkFramebufferCreateInfo::flags"]
        [::core::mem::offset_of!(VkFramebufferCreateInfo, flags) - 8usize];
    ["Offset of field: VkFramebufferCreateInfo::renderPass"]
        [::core::mem::offset_of!(VkFramebufferCreateInfo, renderPass) - 16usize];
    ["Offset of field: VkFramebufferCreateInfo::attachmentCount"]
        [::core::mem::offset_of!(VkFramebufferCreateInfo, attachmentCount) - 24usize];
    ["Offset of field: VkFramebufferCreateInfo::pAttachments"]
        [::core::mem::offset_of!(VkFramebufferCreateInfo, pAttachments) - 28usize];
    ["Offset of field: VkFramebufferCreateInfo::width"]
        [::core::mem::offset_of!(VkFramebufferCreateInfo, width) - 32usize];
    ["Offset of field: VkFramebufferCreateInfo::height"]
        [::core::mem::offset_of!(VkFramebufferCreateInfo, height) - 36usize];
    ["Offset of field: VkFramebufferCreateInfo::layers"]
        [::core::mem::offset_of!(VkFramebufferCreateInfo, layers) - 40usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSubpassDescription"][::core::mem::size_of::<VkSubpassDescription>() - 40usize];
    ["Alignment of VkSubpassDescription"][::core::mem::align_of::<VkSubpassDescription>() - 4usize];
    ["Offset of field: VkSubpassDescription::flags"]
        [::core::mem::offset_of!(VkSubpassDescription, flags) - 0usize];
    ["Offset of field: VkSubpassDescription::pipelineBindPoint"]
        [::core::mem::offset_of!(VkSubpassDescription, pipelineBindPoint) - 4usize];
    ["Offset of field: VkSubpassDescription::inputAttachmentCount"]
        [::core::mem::offset_of!(VkSubpassDescription, inputAttachmentCount) - 8usize];
    ["Offset of field: VkSubpassDescription::pInputAttachments"]
        [::core::mem::offset_of!(VkSubpassDescription, pInputAttachments) - 12usize];
    ["Offset of field: VkSubpassDescription::colorAttachmentCount"]
        [::core::mem::offset_of!(VkSubpassDescription, colorAttachmentCount) - 16usize];
    ["Offset of field: VkSubpassDescription::pColorAttachments"]
        [::core::mem::offset_of!(VkSubpassDescription, pColorAttachments) - 20usize];
    ["Offset of field: VkSubpassDescription::pResolveAttachments"]
        [::core::mem::offset_of!(VkSubpassDescription, pResolveAttachments) - 24usize];
    ["Offset of field: VkSubpassDescription::pDepthStencilAttachment"]
        [::core::mem::offset_of!(VkSubpassDescription, pDepthStencilAttachment) - 28usize];
    ["Offset of field: VkSubpassDescription::preserveAttachmentCount"]
        [::core::mem::offset_of!(VkSubpassDescription, preserveAttachmentCount) - 32usize];
    ["Offset of field: VkSubpassDescription::pPreserveAttachments"]
        [::core::mem::offset_of!(VkSubpassDescription, pPreserveAttachments) - 36usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSubpassDependency"][::core::mem::size_of::<VkSubpassDependency>() - 28usize];
    ["Alignment of VkSubpassDependency"][::core::mem::align_of::<VkSubpassDependency>() - 4usize];
    ["Offset of field: VkSubpassDependency::srcSubpass"]
        [::core::mem::offset_of!(VkSubpassDependency, srcSubpass) - 0usize];
    ["Offset of field: VkSubpassDependency::dstSubpass"]
        [::core::mem::offset_of!(VkSubpassDependency, dstSubpass) - 4usize];
    ["Offset of field: VkSubpassDependency::srcStageMask"]
        [::core::mem::offset_of!(VkSubpassDependency, srcStageMask) - 8usize];
    ["Offset of field: VkSubpassDependency::dstStageMask"]
        [::core::mem::offset_of!(VkSubpassDependency, dstStageMask) - 12usize];
    ["Offset of field: VkSubpassDependency::srcAccessMask"]
        [::core::mem::offset_of!(VkSubpassDependency, srcAccessMask) - 16usize];
    ["Offset of field: VkSubpassDependency::dstAccessMask"]
        [::core::mem::offset_of!(VkSubpassDependency, dstAccessMask) - 20usize];
    ["Offset of field: VkSubpassDependency::dependencyFlags"]
        [::core::mem::offset_of!(VkSubpassDependency, dependencyFlags) - 24usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkRenderPassCreateInfo"][::core::mem::size_of::<VkRenderPassCreateInfo>() - 36usize];
    ["Alignment of VkRenderPassCreateInfo"]
        [::core::mem::align_of::<VkRenderPassCreateInfo>() - 4usize];
    ["Offset of field: VkRenderPassCreateInfo::sType"]
        [::core::mem::offset_of!(VkRenderPassCreateInfo, sType) - 0usize];
    ["Offset of field: VkRenderPassCreateInfo::pNext"]
        [::core::mem::offset_of!(VkRenderPassCreateInfo, pNext) - 4usize];
    ["Offset of field: VkRenderPassCreateInfo::flags"]
        [::core::mem::offset_of!(VkRenderPassCreateInfo, flags) - 8usize];
    ["Offset of field: VkRenderPassCreateInfo::attachmentCount"]
        [::core::mem::offset_of!(VkRenderPassCreateInfo, attachmentCount) - 12usize];
    ["Offset of field: VkRenderPassCreateInfo::pAttachments"]
        [::core::mem::offset_of!(VkRenderPassCreateInfo, pAttachments) - 16usize];
    ["Offset of field: VkRenderPassCreateInfo::subpassCount"]
        [::core::mem::offset_of!(VkRenderPassCreateInfo, subpassCount) - 20usize];
    ["Offset of field: VkRenderPassCreateInfo::pSubpasses"]
        [::core::mem::offset_of!(VkRenderPassCreateInfo, pSubpasses) - 24usize];
    ["Offset of field: VkRenderPassCreateInfo::dependencyCount"]
        [::core::mem::offset_of!(VkRenderPassCreateInfo, dependencyCount) - 28usize];
    ["Offset of field: VkRenderPassCreateInfo::pDependencies"]
        [::core::mem::offset_of!(VkRenderPassCreateInfo, pDependencies) - 32usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkCommandPoolCreateInfo"]
        [::core::mem::size_of::<VkCommandPoolCreateInfo>() - 16usize];
    ["Alignment of VkCommandPoolCreateInfo"]
        [::core::mem::align_of::<VkCommandPoolCreateInfo>() - 4usize];
    ["Offset of field: VkCommandPoolCreateInfo::sType"]
        [::core::mem::offset_of!(VkCommandPoolCreateInfo, sType) - 0usize];
    ["Offset of field: VkCommandPoolCreateInfo::pNext"]
        [::core::mem::offset_of!(VkCommandPoolCreateInfo, pNext) - 4usize];
    ["Offset of field: VkCommandPoolCreateInfo::flags"]
        [::core::mem::offset_of!(VkCommandPoolCreateInfo, flags) - 8usize];
    ["Offset of field: VkCommandPoolCreateInfo::queueFamilyIndex"]
        [::core::mem::offset_of!(VkCommandPoolCreateInfo, queueFamilyIndex) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkCommandBufferAllocateInfo"]
        [::core::mem::size_of::<VkCommandBufferAllocateInfo>() - 24usize];
    ["Alignment of VkCommandBufferAllocateInfo"]
        [::core::mem::align_of::<VkCommandBufferAllocateInfo>() - 8usize];
    ["Offset of field: VkCommandBufferAllocateInfo::sType"]
        [::core::mem::offset_of!(VkCommandBufferAllocateInfo, sType) - 0usize];
    ["Offset of field: VkCommandBufferAllocateInfo::pNext"]
        [::core::mem::offset_of!(VkCommandBufferAllocateInfo, pNext) - 4usize];
    ["Offset of field: VkCommandBufferAllocateInfo::commandPool"]
        [::core::mem::offset_of!(VkCommandBufferAllocateInfo, commandPool) - 8usize];
    ["Offset of field: VkCommandBufferAllocateInfo::level"]
        [::core::mem::offset_of!(VkCommandBufferAllocateInfo, level) - 16usize];
    ["Offset of field: VkCommandBufferAllocateInfo::commandBufferCount"]
        [::core::mem::offset_of!(VkCommandBufferAllocateInfo, commandBufferCount) - 20usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkCommandBufferInheritanceInfo"]
        [::core::mem::size_of::<VkCommandBufferInheritanceInfo>() - 48usize];
    ["Alignment of VkCommandBufferInheritanceInfo"]
        [::core::mem::align_of::<VkCommandBufferInheritanceInfo>() - 8usize];
    ["Offset of field: VkCommandBufferInheritanceInfo::sType"]
        [::core::mem::offset_of!(VkCommandBufferInheritanceInfo, sType) - 0usize];
    ["Offset of field: VkCommandBufferInheritanceInfo::pNext"]
        [::core::mem::offset_of!(VkCommandBufferInheritanceInfo, pNext) - 4usize];
    ["Offset of field: VkCommandBufferInheritanceInfo::renderPass"]
        [::core::mem::offset_of!(VkCommandBufferInheritanceInfo, renderPass) - 8usize];
    ["Offset of field: VkCommandBufferInheritanceInfo::subpass"]
        [::core::mem::offset_of!(VkCommandBufferInheritanceInfo, subpass) - 16usize];
    ["Offset of field: VkCommandBufferInheritanceInfo::framebuffer"]
        [::core::mem::offset_of!(VkCommandBufferInheritanceInfo, framebuffer) - 24usize];
    ["Offset of field: VkCommandBufferInheritanceInfo::occlusionQueryEnable"]
        [::core::mem::offset_of!(VkCommandBufferInheritanceInfo, occlusionQueryEnable) - 32usize];
    ["Offset of field: VkCommandBufferInheritanceInfo::queryFlags"]
        [::core::mem::offset_of!(VkCommandBufferInheritanceInfo, queryFlags) - 36usize];
    ["Offset of field: VkCommandBufferInheritanceInfo::pipelineStatistics"]
        [::core::mem::offset_of!(VkCommandBufferInheritanceInfo, pipelineStatistics) - 40usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkCommandBufferBeginInfo"]
        [::core::mem::size_of::<VkCommandBufferBeginInfo>() - 16usize];
    ["Alignment of VkCommandBufferBeginInfo"]
        [::core::mem::align_of::<VkCommandBufferBeginInfo>() - 4usize];
    ["Offset of field: VkCommandBufferBeginInfo::sType"]
        [::core::mem::offset_of!(VkCommandBufferBeginInfo, sType) - 0usize];
    ["Offset of field: VkCommandBufferBeginInfo::pNext"]
        [::core::mem::offset_of!(VkCommandBufferBeginInfo, pNext) - 4usize];
    ["Offset of field: VkCommandBufferBeginInfo::flags"]
        [::core::mem::offset_of!(VkCommandBufferBeginInfo, flags) - 8usize];
    ["Offset of field: VkCommandBufferBeginInfo::pInheritanceInfo"]
        [::core::mem::offset_of!(VkCommandBufferBeginInfo, pInheritanceInfo) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkBufferCopy"][::core::mem::size_of::<VkBufferCopy>() - 24usize];
    ["Alignment of VkBufferCopy"][::core::mem::align_of::<VkBufferCopy>() - 8usize];
    ["Offset of field: VkBufferCopy::srcOffset"]
        [::core::mem::offset_of!(VkBufferCopy, srcOffset) - 0usize];
    ["Offset of field: VkBufferCopy::dstOffset"]
        [::core::mem::offset_of!(VkBufferCopy, dstOffset) - 8usize];
    ["Offset of field: VkBufferCopy::size"][::core::mem::offset_of!(VkBufferCopy, size) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkImageSubresourceLayers"]
        [::core::mem::size_of::<VkImageSubresourceLayers>() - 16usize];
    ["Alignment of VkImageSubresourceLayers"]
        [::core::mem::align_of::<VkImageSubresourceLayers>() - 4usize];
    ["Offset of field: VkImageSubresourceLayers::aspectMask"]
        [::core::mem::offset_of!(VkImageSubresourceLayers, aspectMask) - 0usize];
    ["Offset of field: VkImageSubresourceLayers::mipLevel"]
        [::core::mem::offset_of!(VkImageSubresourceLayers, mipLevel) - 4usize];
    ["Offset of field: VkImageSubresourceLayers::baseArrayLayer"]
        [::core::mem::offset_of!(VkImageSubresourceLayers, baseArrayLayer) - 8usize];
    ["Offset of field: VkImageSubresourceLayers::layerCount"]
        [::core::mem::offset_of!(VkImageSubresourceLayers, layerCount) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkBufferImageCopy"][::core::mem::size_of::<VkBufferImageCopy>() - 56usize];
    ["Alignment of VkBufferImageCopy"][::core::mem::align_of::<VkBufferImageCopy>() - 8usize];
    ["Offset of field: VkBufferImageCopy::bufferOffset"]
        [::core::mem::offset_of!(VkBufferImageCopy, bufferOffset) - 0usize];
    ["Offset of field: VkBufferImageCopy::bufferRowLength"]
        [::core::mem::offset_of!(VkBufferImageCopy, bufferRowLength) - 8usize];
    ["Offset of field: VkBufferImageCopy::bufferImageHeight"]
        [::core::mem::offset_of!(VkBufferImageCopy, bufferImageHeight) - 12usize];
    ["Offset of field: VkBufferImageCopy::imageSubresource"]
        [::core::mem::offset_of!(VkBufferImageCopy, imageSubresource) - 16usize];
    ["Offset of field: VkBufferImageCopy::imageOffset"]
        [::core::mem::offset_of!(VkBufferImageCopy, imageOffset) - 32usize];
    ["Offset of field: VkBufferImageCopy::imageExtent"]
        [::core::mem::offset_of!(VkBufferImageCopy, imageExtent) - 44usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkClearColorValue"][::core::mem::size_of::<VkClearColorValue>() - 16usize];
    ["Alignment of VkClearColorValue"][::core::mem::align_of::<VkClearColorValue>() - 4usize];
    ["Offset of field: VkClearColorValue::float32"]
        [::core::mem::offset_of!(VkClearColorValue, float32) - 0usize];
    ["Offset of field: VkClearColorValue::int32"]
        [::core::mem::offset_of!(VkClearColorValue, int32) - 0usize];
    ["Offset of field: VkClearColorValue::uint32"]
        [::core::mem::offset_of!(VkClearColorValue, uint32) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkClearDepthStencilValue"]
        [::core::mem::size_of::<VkClearDepthStencilValue>() - 8usize];
    ["Alignment of VkClearDepthStencilValue"]
        [::core::mem::align_of::<VkClearDepthStencilValue>() - 4usize];
    ["Offset of field: VkClearDepthStencilValue::depth"]
        [::core::mem::offset_of!(VkClearDepthStencilValue, depth) - 0usize];
    ["Offset of field: VkClearDepthStencilValue::stencil"]
        [::core::mem::offset_of!(VkClearDepthStencilValue, stencil) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkClearValue"][::core::mem::size_of::<VkClearValue>() - 16usize];
    ["Alignment of VkClearValue"][::core::mem::align_of::<VkClearValue>() - 4usize];
    ["Offset of field: VkClearValue::color"][::core::mem::offset_of!(VkClearValue, color) - 0usize];
    ["Offset of field: VkClearValue::depthStencil"]
        [::core::mem::offset_of!(VkClearValue, depthStencil) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkClearAttachment"][::core::mem::size_of::<VkClearAttachment>() - 24usize];
    ["Alignment of VkClearAttachment"][::core::mem::align_of::<VkClearAttachment>() - 4usize];
    ["Offset of field: VkClearAttachment::aspectMask"]
        [::core::mem::offset_of!(VkClearAttachment, aspectMask) - 0usize];
    ["Offset of field: VkClearAttachment::colorAttachment"]
        [::core::mem::offset_of!(VkClearAttachment, colorAttachment) - 4usize];
    ["Offset of field: VkClearAttachment::clearValue"]
        [::core::mem::offset_of!(VkClearAttachment, clearValue) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkClearRect"][::core::mem::size_of::<VkClearRect>() - 24usize];
    ["Alignment of VkClearRect"][::core::mem::align_of::<VkClearRect>() - 4usize];
    ["Offset of field: VkClearRect::rect"][::core::mem::offset_of!(VkClearRect, rect) - 0usize];
    ["Offset of field: VkClearRect::baseArrayLayer"]
        [::core::mem::offset_of!(VkClearRect, baseArrayLayer) - 16usize];
    ["Offset of field: VkClearRect::layerCount"]
        [::core::mem::offset_of!(VkClearRect, layerCount) - 20usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkImageBlit"][::core::mem::size_of::<VkImageBlit>() - 80usize];
    ["Alignment of VkImageBlit"][::core::mem::align_of::<VkImageBlit>() - 4usize];
    ["Offset of field: VkImageBlit::srcSubresource"]
        [::core::mem::offset_of!(VkImageBlit, srcSubresource) - 0usize];
    ["Offset of field: VkImageBlit::srcOffsets"]
        [::core::mem::offset_of!(VkImageBlit, srcOffsets) - 16usize];
    ["Offset of field: VkImageBlit::dstSubresource"]
        [::core::mem::offset_of!(VkImageBlit, dstSubresource) - 40usize];
    ["Offset of field: VkImageBlit::dstOffsets"]
        [::core::mem::offset_of!(VkImageBlit, dstOffsets) - 56usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkImageCopy"][::core::mem::size_of::<VkImageCopy>() - 68usize];
    ["Alignment of VkImageCopy"][::core::mem::align_of::<VkImageCopy>() - 4usize];
    ["Offset of field: VkImageCopy::srcSubresource"]
        [::core::mem::offset_of!(VkImageCopy, srcSubresource) - 0usize];
    ["Offset of field: VkImageCopy::srcOffset"]
        [::core::mem::offset_of!(VkImageCopy, srcOffset) - 16usize];
    ["Offset of field: VkImageCopy::dstSubresource"]
        [::core::mem::offset_of!(VkImageCopy, dstSubresource) - 28usize];
    ["Offset of field: VkImageCopy::dstOffset"]
        [::core::mem::offset_of!(VkImageCopy, dstOffset) - 44usize];
    ["Offset of field: VkImageCopy::extent"]
        [::core::mem::offset_of!(VkImageCopy, extent) - 56usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkImageResolve"][::core::mem::size_of::<VkImageResolve>() - 68usize];
    ["Alignment of VkImageResolve"][::core::mem::align_of::<VkImageResolve>() - 4usize];
    ["Offset of field: VkImageResolve::srcSubresource"]
        [::core::mem::offset_of!(VkImageResolve, srcSubresource) - 0usize];
    ["Offset of field: VkImageResolve::srcOffset"]
        [::core::mem::offset_of!(VkImageResolve, srcOffset) - 16usize];
    ["Offset of field: VkImageResolve::dstSubresource"]
        [::core::mem::offset_of!(VkImageResolve, dstSubresource) - 28usize];
    ["Offset of field: VkImageResolve::dstOffset"]
        [::core::mem::offset_of!(VkImageResolve, dstOffset) - 44usize];
    ["Offset of field: VkImageResolve::extent"]
        [::core::mem::offset_of!(VkImageResolve, extent) - 56usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkRenderPassBeginInfo"][::core::mem::size_of::<VkRenderPassBeginInfo>() - 48usize];
    ["Alignment of VkRenderPassBeginInfo"]
        [::core::mem::align_of::<VkRenderPassBeginInfo>() - 8usize];
    ["Offset of field: VkRenderPassBeginInfo::sType"]
        [::core::mem::offset_of!(VkRenderPassBeginInfo, sType) - 0usize];
    ["Offset of field: VkRenderPassBeginInfo::pNext"]
        [::core::mem::offset_of!(VkRenderPassBeginInfo, pNext) - 4usize];
    ["Offset of field: VkRenderPassBeginInfo::renderPass"]
        [::core::mem::offset_of!(VkRenderPassBeginInfo, renderPass) - 8usize];
    ["Offset of field: VkRenderPassBeginInfo::framebuffer"]
        [::core::mem::offset_of!(VkRenderPassBeginInfo, framebuffer) - 16usize];
    ["Offset of field: VkRenderPassBeginInfo::renderArea"]
        [::core::mem::offset_of!(VkRenderPassBeginInfo, renderArea) - 24usize];
    ["Offset of field: VkRenderPassBeginInfo::clearValueCount"]
        [::core::mem::offset_of!(VkRenderPassBeginInfo, clearValueCount) - 40usize];
    ["Offset of field: VkRenderPassBeginInfo::pClearValues"]
        [::core::mem::offset_of!(VkRenderPassBeginInfo, pClearValues) - 44usize];
};
pub const VkPointClippingBehavior_VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES:
    VkPointClippingBehavior = 0;
pub const VkPointClippingBehavior_VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY:
    VkPointClippingBehavior = 1;
pub const VkPointClippingBehavior_VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES_KHR:
    VkPointClippingBehavior = 0;
pub const VkPointClippingBehavior_VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY_KHR:
    VkPointClippingBehavior = 1;
pub const VkPointClippingBehavior_VK_POINT_CLIPPING_BEHAVIOR_MAX_ENUM: VkPointClippingBehavior =
    2147483647;
pub const VkTessellationDomainOrigin_VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT:
    VkTessellationDomainOrigin = 0;
pub const VkTessellationDomainOrigin_VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT:
    VkTessellationDomainOrigin = 1;
pub const VkTessellationDomainOrigin_VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT_KHR:
    VkTessellationDomainOrigin = 0;
pub const VkTessellationDomainOrigin_VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT_KHR:
    VkTessellationDomainOrigin = 1;
pub const VkTessellationDomainOrigin_VK_TESSELLATION_DOMAIN_ORIGIN_MAX_ENUM:
    VkTessellationDomainOrigin = 2147483647;
pub const VkSamplerYcbcrModelConversion_VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY:
    VkSamplerYcbcrModelConversion = 0;
pub const VkSamplerYcbcrModelConversion_VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY:
    VkSamplerYcbcrModelConversion = 1;
pub const VkSamplerYcbcrModelConversion_VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709:
    VkSamplerYcbcrModelConversion = 2;
pub const VkSamplerYcbcrModelConversion_VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601:
    VkSamplerYcbcrModelConversion = 3;
pub const VkSamplerYcbcrModelConversion_VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020:
    VkSamplerYcbcrModelConversion = 4;
pub const VkSamplerYcbcrModelConversion_VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY_KHR:
    VkSamplerYcbcrModelConversion = 0;
pub const VkSamplerYcbcrModelConversion_VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY_KHR:
    VkSamplerYcbcrModelConversion = 1;
pub const VkSamplerYcbcrModelConversion_VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709_KHR:
    VkSamplerYcbcrModelConversion = 2;
pub const VkSamplerYcbcrModelConversion_VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601_KHR:
    VkSamplerYcbcrModelConversion = 3;
pub const VkSamplerYcbcrModelConversion_VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020_KHR:
    VkSamplerYcbcrModelConversion = 4;
pub const VkSamplerYcbcrModelConversion_VK_SAMPLER_YCBCR_MODEL_CONVERSION_MAX_ENUM:
    VkSamplerYcbcrModelConversion = 2147483647;
pub const VkSamplerYcbcrRange_VK_SAMPLER_YCBCR_RANGE_ITU_FULL: VkSamplerYcbcrRange = 0;
pub const VkSamplerYcbcrRange_VK_SAMPLER_YCBCR_RANGE_ITU_NARROW: VkSamplerYcbcrRange = 1;
pub const VkSamplerYcbcrRange_VK_SAMPLER_YCBCR_RANGE_ITU_FULL_KHR: VkSamplerYcbcrRange = 0;
pub const VkSamplerYcbcrRange_VK_SAMPLER_YCBCR_RANGE_ITU_NARROW_KHR: VkSamplerYcbcrRange = 1;
pub const VkSamplerYcbcrRange_VK_SAMPLER_YCBCR_RANGE_MAX_ENUM: VkSamplerYcbcrRange = 2147483647;
pub const VkChromaLocation_VK_CHROMA_LOCATION_COSITED_EVEN: VkChromaLocation = 0;
pub const VkChromaLocation_VK_CHROMA_LOCATION_MIDPOINT: VkChromaLocation = 1;
pub const VkChromaLocation_VK_CHROMA_LOCATION_COSITED_EVEN_KHR: VkChromaLocation = 0;
pub const VkChromaLocation_VK_CHROMA_LOCATION_MIDPOINT_KHR: VkChromaLocation = 1;
pub const VkChromaLocation_VK_CHROMA_LOCATION_MAX_ENUM: VkChromaLocation = 2147483647;
pub const VkDescriptorUpdateTemplateType_VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET:
    VkDescriptorUpdateTemplateType = 0;
pub const VkDescriptorUpdateTemplateType_VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS:
    VkDescriptorUpdateTemplateType = 1;
pub const VkDescriptorUpdateTemplateType_VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR:
    VkDescriptorUpdateTemplateType = 1;
pub const VkDescriptorUpdateTemplateType_VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET_KHR:
    VkDescriptorUpdateTemplateType = 0;
pub const VkDescriptorUpdateTemplateType_VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_MAX_ENUM:
    VkDescriptorUpdateTemplateType = 2147483647;
pub const VkSubgroupFeatureFlagBits_VK_SUBGROUP_FEATURE_BASIC_BIT: VkSubgroupFeatureFlagBits = 1;
pub const VkSubgroupFeatureFlagBits_VK_SUBGROUP_FEATURE_VOTE_BIT: VkSubgroupFeatureFlagBits = 2;
pub const VkSubgroupFeatureFlagBits_VK_SUBGROUP_FEATURE_ARITHMETIC_BIT: VkSubgroupFeatureFlagBits =
    4;
pub const VkSubgroupFeatureFlagBits_VK_SUBGROUP_FEATURE_BALLOT_BIT: VkSubgroupFeatureFlagBits = 8;
pub const VkSubgroupFeatureFlagBits_VK_SUBGROUP_FEATURE_SHUFFLE_BIT: VkSubgroupFeatureFlagBits = 16;
pub const VkSubgroupFeatureFlagBits_VK_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT:
    VkSubgroupFeatureFlagBits = 32;
pub const VkSubgroupFeatureFlagBits_VK_SUBGROUP_FEATURE_CLUSTERED_BIT: VkSubgroupFeatureFlagBits =
    64;
pub const VkSubgroupFeatureFlagBits_VK_SUBGROUP_FEATURE_QUAD_BIT: VkSubgroupFeatureFlagBits = 128;
pub const VkSubgroupFeatureFlagBits_VK_SUBGROUP_FEATURE_ROTATE_BIT: VkSubgroupFeatureFlagBits = 512;
pub const VkSubgroupFeatureFlagBits_VK_SUBGROUP_FEATURE_ROTATE_CLUSTERED_BIT:
    VkSubgroupFeatureFlagBits = 1024;
pub const VkSubgroupFeatureFlagBits_VK_SUBGROUP_FEATURE_PARTITIONED_BIT_NV:
    VkSubgroupFeatureFlagBits = 256;
pub const VkSubgroupFeatureFlagBits_VK_SUBGROUP_FEATURE_ROTATE_BIT_KHR: VkSubgroupFeatureFlagBits =
    512;
pub const VkSubgroupFeatureFlagBits_VK_SUBGROUP_FEATURE_ROTATE_CLUSTERED_BIT_KHR:
    VkSubgroupFeatureFlagBits = 1024;
pub const VkSubgroupFeatureFlagBits_VK_SUBGROUP_FEATURE_FLAG_BITS_MAX_ENUM:
    VkSubgroupFeatureFlagBits = 2147483647;
pub const VkPeerMemoryFeatureFlagBits_VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT:
    VkPeerMemoryFeatureFlagBits = 1;
pub const VkPeerMemoryFeatureFlagBits_VK_PEER_MEMORY_FEATURE_COPY_DST_BIT:
    VkPeerMemoryFeatureFlagBits = 2;
pub const VkPeerMemoryFeatureFlagBits_VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT:
    VkPeerMemoryFeatureFlagBits = 4;
pub const VkPeerMemoryFeatureFlagBits_VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT:
    VkPeerMemoryFeatureFlagBits = 8;
pub const VkPeerMemoryFeatureFlagBits_VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT_KHR:
    VkPeerMemoryFeatureFlagBits = 1;
pub const VkPeerMemoryFeatureFlagBits_VK_PEER_MEMORY_FEATURE_COPY_DST_BIT_KHR:
    VkPeerMemoryFeatureFlagBits = 2;
pub const VkPeerMemoryFeatureFlagBits_VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT_KHR:
    VkPeerMemoryFeatureFlagBits = 4;
pub const VkPeerMemoryFeatureFlagBits_VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT_KHR:
    VkPeerMemoryFeatureFlagBits = 8;
pub const VkPeerMemoryFeatureFlagBits_VK_PEER_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM:
    VkPeerMemoryFeatureFlagBits = 2147483647;
pub const VkMemoryAllocateFlagBits_VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT: VkMemoryAllocateFlagBits = 1;
pub const VkMemoryAllocateFlagBits_VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT: VkMemoryAllocateFlagBits =
    2;
pub const VkMemoryAllocateFlagBits_VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT:
    VkMemoryAllocateFlagBits = 4;
pub const VkMemoryAllocateFlagBits_VK_MEMORY_ALLOCATE_ZERO_INITIALIZE_BIT_EXT:
    VkMemoryAllocateFlagBits = 8;
pub const VkMemoryAllocateFlagBits_VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT_KHR:
    VkMemoryAllocateFlagBits = 1;
pub const VkMemoryAllocateFlagBits_VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT_KHR:
    VkMemoryAllocateFlagBits = 2;
pub const VkMemoryAllocateFlagBits_VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR:
    VkMemoryAllocateFlagBits = 4;
pub const VkMemoryAllocateFlagBits_VK_MEMORY_ALLOCATE_FLAG_BITS_MAX_ENUM: VkMemoryAllocateFlagBits =
    2147483647;
pub const VkExternalMemoryHandleTypeFlagBits_VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT:
    VkExternalMemoryHandleTypeFlagBits = 1;
pub const VkExternalMemoryHandleTypeFlagBits_VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT:
    VkExternalMemoryHandleTypeFlagBits = 2;
pub const VkExternalMemoryHandleTypeFlagBits_VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT:
    VkExternalMemoryHandleTypeFlagBits = 4;
pub const VkExternalMemoryHandleTypeFlagBits_VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT:
    VkExternalMemoryHandleTypeFlagBits = 8;
pub const VkExternalMemoryHandleTypeFlagBits_VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT : VkExternalMemoryHandleTypeFlagBits = 16 ;
pub const VkExternalMemoryHandleTypeFlagBits_VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT:
    VkExternalMemoryHandleTypeFlagBits = 32;
pub const VkExternalMemoryHandleTypeFlagBits_VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT:
    VkExternalMemoryHandleTypeFlagBits = 64;
pub const VkExternalMemoryHandleTypeFlagBits_VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT:
    VkExternalMemoryHandleTypeFlagBits = 512;
pub const VkExternalMemoryHandleTypeFlagBits_VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID : VkExternalMemoryHandleTypeFlagBits = 1024 ;
pub const VkExternalMemoryHandleTypeFlagBits_VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT : VkExternalMemoryHandleTypeFlagBits = 128 ;
pub const VkExternalMemoryHandleTypeFlagBits_VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT : VkExternalMemoryHandleTypeFlagBits = 256 ;
pub const VkExternalMemoryHandleTypeFlagBits_VK_EXTERNAL_MEMORY_HANDLE_TYPE_ZIRCON_VMO_BIT_FUCHSIA : VkExternalMemoryHandleTypeFlagBits = 2048 ;
pub const VkExternalMemoryHandleTypeFlagBits_VK_EXTERNAL_MEMORY_HANDLE_TYPE_RDMA_ADDRESS_BIT_NV:
    VkExternalMemoryHandleTypeFlagBits = 4096;
pub const VkExternalMemoryHandleTypeFlagBits_VK_EXTERNAL_MEMORY_HANDLE_TYPE_SCREEN_BUFFER_BIT_QNX : VkExternalMemoryHandleTypeFlagBits = 16384 ;
pub const VkExternalMemoryHandleTypeFlagBits_VK_EXTERNAL_MEMORY_HANDLE_TYPE_MTLBUFFER_BIT_EXT:
    VkExternalMemoryHandleTypeFlagBits = 65536;
pub const VkExternalMemoryHandleTypeFlagBits_VK_EXTERNAL_MEMORY_HANDLE_TYPE_MTLTEXTURE_BIT_EXT:
    VkExternalMemoryHandleTypeFlagBits = 131072;
pub const VkExternalMemoryHandleTypeFlagBits_VK_EXTERNAL_MEMORY_HANDLE_TYPE_MTLHEAP_BIT_EXT:
    VkExternalMemoryHandleTypeFlagBits = 262144;
pub const VkExternalMemoryHandleTypeFlagBits_VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT_KHR:
    VkExternalMemoryHandleTypeFlagBits = 1;
pub const VkExternalMemoryHandleTypeFlagBits_VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR:
    VkExternalMemoryHandleTypeFlagBits = 2;
pub const VkExternalMemoryHandleTypeFlagBits_VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR : VkExternalMemoryHandleTypeFlagBits = 4 ;
pub const VkExternalMemoryHandleTypeFlagBits_VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT_KHR : VkExternalMemoryHandleTypeFlagBits = 8 ;
pub const VkExternalMemoryHandleTypeFlagBits_VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT_KHR : VkExternalMemoryHandleTypeFlagBits = 16 ;
pub const VkExternalMemoryHandleTypeFlagBits_VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT_KHR:
    VkExternalMemoryHandleTypeFlagBits = 32;
pub const VkExternalMemoryHandleTypeFlagBits_VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT_KHR : VkExternalMemoryHandleTypeFlagBits = 64 ;
pub const VkExternalMemoryHandleTypeFlagBits_VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM:
    VkExternalMemoryHandleTypeFlagBits = 2147483647;
pub const VkExternalMemoryFeatureFlagBits_VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT:
    VkExternalMemoryFeatureFlagBits = 1;
pub const VkExternalMemoryFeatureFlagBits_VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT:
    VkExternalMemoryFeatureFlagBits = 2;
pub const VkExternalMemoryFeatureFlagBits_VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT:
    VkExternalMemoryFeatureFlagBits = 4;
pub const VkExternalMemoryFeatureFlagBits_VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_KHR:
    VkExternalMemoryFeatureFlagBits = 1;
pub const VkExternalMemoryFeatureFlagBits_VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_KHR:
    VkExternalMemoryFeatureFlagBits = 2;
pub const VkExternalMemoryFeatureFlagBits_VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_KHR:
    VkExternalMemoryFeatureFlagBits = 4;
pub const VkExternalMemoryFeatureFlagBits_VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM:
    VkExternalMemoryFeatureFlagBits = 2147483647;
pub const VkExternalFenceHandleTypeFlagBits_VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT:
    VkExternalFenceHandleTypeFlagBits = 1;
pub const VkExternalFenceHandleTypeFlagBits_VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT:
    VkExternalFenceHandleTypeFlagBits = 2;
pub const VkExternalFenceHandleTypeFlagBits_VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT:
    VkExternalFenceHandleTypeFlagBits = 4;
pub const VkExternalFenceHandleTypeFlagBits_VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT:
    VkExternalFenceHandleTypeFlagBits = 8;
pub const VkExternalFenceHandleTypeFlagBits_VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR:
    VkExternalFenceHandleTypeFlagBits = 1;
pub const VkExternalFenceHandleTypeFlagBits_VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR:
    VkExternalFenceHandleTypeFlagBits = 2;
pub const VkExternalFenceHandleTypeFlagBits_VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR : VkExternalFenceHandleTypeFlagBits = 4 ;
pub const VkExternalFenceHandleTypeFlagBits_VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT_KHR:
    VkExternalFenceHandleTypeFlagBits = 8;
pub const VkExternalFenceHandleTypeFlagBits_VK_EXTERNAL_FENCE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM:
    VkExternalFenceHandleTypeFlagBits = 2147483647;
pub const VkExternalFenceFeatureFlagBits_VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT:
    VkExternalFenceFeatureFlagBits = 1;
pub const VkExternalFenceFeatureFlagBits_VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT:
    VkExternalFenceFeatureFlagBits = 2;
pub const VkExternalFenceFeatureFlagBits_VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT_KHR:
    VkExternalFenceFeatureFlagBits = 1;
pub const VkExternalFenceFeatureFlagBits_VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT_KHR:
    VkExternalFenceFeatureFlagBits = 2;
pub const VkExternalFenceFeatureFlagBits_VK_EXTERNAL_FENCE_FEATURE_FLAG_BITS_MAX_ENUM:
    VkExternalFenceFeatureFlagBits = 2147483647;
pub const VkFenceImportFlagBits_VK_FENCE_IMPORT_TEMPORARY_BIT: VkFenceImportFlagBits = 1;
pub const VkFenceImportFlagBits_VK_FENCE_IMPORT_TEMPORARY_BIT_KHR: VkFenceImportFlagBits = 1;
pub const VkFenceImportFlagBits_VK_FENCE_IMPORT_FLAG_BITS_MAX_ENUM: VkFenceImportFlagBits =
    2147483647;
pub const VkSemaphoreImportFlagBits_VK_SEMAPHORE_IMPORT_TEMPORARY_BIT: VkSemaphoreImportFlagBits =
    1;
pub const VkSemaphoreImportFlagBits_VK_SEMAPHORE_IMPORT_TEMPORARY_BIT_KHR:
    VkSemaphoreImportFlagBits = 1;
pub const VkSemaphoreImportFlagBits_VK_SEMAPHORE_IMPORT_FLAG_BITS_MAX_ENUM:
    VkSemaphoreImportFlagBits = 2147483647;
pub const VkExternalSemaphoreHandleTypeFlagBits_VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT:
    VkExternalSemaphoreHandleTypeFlagBits = 1;
pub const VkExternalSemaphoreHandleTypeFlagBits_VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT : VkExternalSemaphoreHandleTypeFlagBits = 2 ;
pub const VkExternalSemaphoreHandleTypeFlagBits_VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT : VkExternalSemaphoreHandleTypeFlagBits = 4 ;
pub const VkExternalSemaphoreHandleTypeFlagBits_VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT : VkExternalSemaphoreHandleTypeFlagBits = 8 ;
pub const VkExternalSemaphoreHandleTypeFlagBits_VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT:
    VkExternalSemaphoreHandleTypeFlagBits = 16;
pub const VkExternalSemaphoreHandleTypeFlagBits_VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_ZIRCON_EVENT_BIT_FUCHSIA : VkExternalSemaphoreHandleTypeFlagBits = 128 ;
pub const VkExternalSemaphoreHandleTypeFlagBits_VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_FENCE_BIT : VkExternalSemaphoreHandleTypeFlagBits = 8 ;
pub const VkExternalSemaphoreHandleTypeFlagBits_VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR : VkExternalSemaphoreHandleTypeFlagBits = 1 ;
pub const VkExternalSemaphoreHandleTypeFlagBits_VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR : VkExternalSemaphoreHandleTypeFlagBits = 2 ;
pub const VkExternalSemaphoreHandleTypeFlagBits_VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR : VkExternalSemaphoreHandleTypeFlagBits = 4 ;
pub const VkExternalSemaphoreHandleTypeFlagBits_VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT_KHR : VkExternalSemaphoreHandleTypeFlagBits = 8 ;
pub const VkExternalSemaphoreHandleTypeFlagBits_VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT_KHR : VkExternalSemaphoreHandleTypeFlagBits = 16 ;
pub const VkExternalSemaphoreHandleTypeFlagBits_VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM : VkExternalSemaphoreHandleTypeFlagBits = 2147483647 ;
pub const VkExternalSemaphoreFeatureFlagBits_VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT:
    VkExternalSemaphoreFeatureFlagBits = 1;
pub const VkExternalSemaphoreFeatureFlagBits_VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT:
    VkExternalSemaphoreFeatureFlagBits = 2;
pub const VkExternalSemaphoreFeatureFlagBits_VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT_KHR:
    VkExternalSemaphoreFeatureFlagBits = 1;
pub const VkExternalSemaphoreFeatureFlagBits_VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT_KHR:
    VkExternalSemaphoreFeatureFlagBits = 2;
pub const VkExternalSemaphoreFeatureFlagBits_VK_EXTERNAL_SEMAPHORE_FEATURE_FLAG_BITS_MAX_ENUM:
    VkExternalSemaphoreFeatureFlagBits = 2147483647;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceSubgroupProperties"]
        [::core::mem::size_of::<VkPhysicalDeviceSubgroupProperties>() - 24usize];
    ["Alignment of VkPhysicalDeviceSubgroupProperties"]
        [::core::mem::align_of::<VkPhysicalDeviceSubgroupProperties>() - 4usize];
    ["Offset of field: VkPhysicalDeviceSubgroupProperties::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceSubgroupProperties, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceSubgroupProperties::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceSubgroupProperties, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceSubgroupProperties::subgroupSize"]
        [::core::mem::offset_of!(VkPhysicalDeviceSubgroupProperties, subgroupSize) - 8usize];
    ["Offset of field: VkPhysicalDeviceSubgroupProperties::supportedStages"]
        [::core::mem::offset_of!(VkPhysicalDeviceSubgroupProperties, supportedStages) - 12usize];
    ["Offset of field: VkPhysicalDeviceSubgroupProperties::supportedOperations"][::core::mem::offset_of!(
        VkPhysicalDeviceSubgroupProperties,
        supportedOperations
    ) - 16usize];
    ["Offset of field: VkPhysicalDeviceSubgroupProperties::quadOperationsInAllStages"][::core::mem::offset_of!(
        VkPhysicalDeviceSubgroupProperties,
        quadOperationsInAllStages
    ) - 20usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkBindBufferMemoryInfo"][::core::mem::size_of::<VkBindBufferMemoryInfo>() - 32usize];
    ["Alignment of VkBindBufferMemoryInfo"]
        [::core::mem::align_of::<VkBindBufferMemoryInfo>() - 8usize];
    ["Offset of field: VkBindBufferMemoryInfo::sType"]
        [::core::mem::offset_of!(VkBindBufferMemoryInfo, sType) - 0usize];
    ["Offset of field: VkBindBufferMemoryInfo::pNext"]
        [::core::mem::offset_of!(VkBindBufferMemoryInfo, pNext) - 4usize];
    ["Offset of field: VkBindBufferMemoryInfo::buffer"]
        [::core::mem::offset_of!(VkBindBufferMemoryInfo, buffer) - 8usize];
    ["Offset of field: VkBindBufferMemoryInfo::memory"]
        [::core::mem::offset_of!(VkBindBufferMemoryInfo, memory) - 16usize];
    ["Offset of field: VkBindBufferMemoryInfo::memoryOffset"]
        [::core::mem::offset_of!(VkBindBufferMemoryInfo, memoryOffset) - 24usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkBindImageMemoryInfo"][::core::mem::size_of::<VkBindImageMemoryInfo>() - 32usize];
    ["Alignment of VkBindImageMemoryInfo"]
        [::core::mem::align_of::<VkBindImageMemoryInfo>() - 8usize];
    ["Offset of field: VkBindImageMemoryInfo::sType"]
        [::core::mem::offset_of!(VkBindImageMemoryInfo, sType) - 0usize];
    ["Offset of field: VkBindImageMemoryInfo::pNext"]
        [::core::mem::offset_of!(VkBindImageMemoryInfo, pNext) - 4usize];
    ["Offset of field: VkBindImageMemoryInfo::image"]
        [::core::mem::offset_of!(VkBindImageMemoryInfo, image) - 8usize];
    ["Offset of field: VkBindImageMemoryInfo::memory"]
        [::core::mem::offset_of!(VkBindImageMemoryInfo, memory) - 16usize];
    ["Offset of field: VkBindImageMemoryInfo::memoryOffset"]
        [::core::mem::offset_of!(VkBindImageMemoryInfo, memoryOffset) - 24usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDevice16BitStorageFeatures"]
        [::core::mem::size_of::<VkPhysicalDevice16BitStorageFeatures>() - 24usize];
    ["Alignment of VkPhysicalDevice16BitStorageFeatures"]
        [::core::mem::align_of::<VkPhysicalDevice16BitStorageFeatures>() - 4usize];
    ["Offset of field: VkPhysicalDevice16BitStorageFeatures::sType"]
        [::core::mem::offset_of!(VkPhysicalDevice16BitStorageFeatures, sType) - 0usize];
    ["Offset of field: VkPhysicalDevice16BitStorageFeatures::pNext"]
        [::core::mem::offset_of!(VkPhysicalDevice16BitStorageFeatures, pNext) - 4usize];
    ["Offset of field: VkPhysicalDevice16BitStorageFeatures::storageBuffer16BitAccess"][::core::mem::offset_of!(
        VkPhysicalDevice16BitStorageFeatures,
        storageBuffer16BitAccess
    ) - 8usize];
    ["Offset of field: VkPhysicalDevice16BitStorageFeatures::uniformAndStorageBuffer16BitAccess"][::core::mem::offset_of!(
        VkPhysicalDevice16BitStorageFeatures,
        uniformAndStorageBuffer16BitAccess
    )
        - 12usize];
    ["Offset of field: VkPhysicalDevice16BitStorageFeatures::storagePushConstant16"][::core::mem::offset_of!(
        VkPhysicalDevice16BitStorageFeatures,
        storagePushConstant16
    ) - 16usize];
    ["Offset of field: VkPhysicalDevice16BitStorageFeatures::storageInputOutput16"][::core::mem::offset_of!(
        VkPhysicalDevice16BitStorageFeatures,
        storageInputOutput16
    ) - 20usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkMemoryDedicatedRequirements"]
        [::core::mem::size_of::<VkMemoryDedicatedRequirements>() - 16usize];
    ["Alignment of VkMemoryDedicatedRequirements"]
        [::core::mem::align_of::<VkMemoryDedicatedRequirements>() - 4usize];
    ["Offset of field: VkMemoryDedicatedRequirements::sType"]
        [::core::mem::offset_of!(VkMemoryDedicatedRequirements, sType) - 0usize];
    ["Offset of field: VkMemoryDedicatedRequirements::pNext"]
        [::core::mem::offset_of!(VkMemoryDedicatedRequirements, pNext) - 4usize];
    ["Offset of field: VkMemoryDedicatedRequirements::prefersDedicatedAllocation"][::core::mem::offset_of!(
        VkMemoryDedicatedRequirements,
        prefersDedicatedAllocation
    ) - 8usize];
    ["Offset of field: VkMemoryDedicatedRequirements::requiresDedicatedAllocation"][::core::mem::offset_of!(
        VkMemoryDedicatedRequirements,
        requiresDedicatedAllocation
    ) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkMemoryDedicatedAllocateInfo"]
        [::core::mem::size_of::<VkMemoryDedicatedAllocateInfo>() - 24usize];
    ["Alignment of VkMemoryDedicatedAllocateInfo"]
        [::core::mem::align_of::<VkMemoryDedicatedAllocateInfo>() - 8usize];
    ["Offset of field: VkMemoryDedicatedAllocateInfo::sType"]
        [::core::mem::offset_of!(VkMemoryDedicatedAllocateInfo, sType) - 0usize];
    ["Offset of field: VkMemoryDedicatedAllocateInfo::pNext"]
        [::core::mem::offset_of!(VkMemoryDedicatedAllocateInfo, pNext) - 4usize];
    ["Offset of field: VkMemoryDedicatedAllocateInfo::image"]
        [::core::mem::offset_of!(VkMemoryDedicatedAllocateInfo, image) - 8usize];
    ["Offset of field: VkMemoryDedicatedAllocateInfo::buffer"]
        [::core::mem::offset_of!(VkMemoryDedicatedAllocateInfo, buffer) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkMemoryAllocateFlagsInfo"]
        [::core::mem::size_of::<VkMemoryAllocateFlagsInfo>() - 16usize];
    ["Alignment of VkMemoryAllocateFlagsInfo"]
        [::core::mem::align_of::<VkMemoryAllocateFlagsInfo>() - 4usize];
    ["Offset of field: VkMemoryAllocateFlagsInfo::sType"]
        [::core::mem::offset_of!(VkMemoryAllocateFlagsInfo, sType) - 0usize];
    ["Offset of field: VkMemoryAllocateFlagsInfo::pNext"]
        [::core::mem::offset_of!(VkMemoryAllocateFlagsInfo, pNext) - 4usize];
    ["Offset of field: VkMemoryAllocateFlagsInfo::flags"]
        [::core::mem::offset_of!(VkMemoryAllocateFlagsInfo, flags) - 8usize];
    ["Offset of field: VkMemoryAllocateFlagsInfo::deviceMask"]
        [::core::mem::offset_of!(VkMemoryAllocateFlagsInfo, deviceMask) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDeviceGroupRenderPassBeginInfo"]
        [::core::mem::size_of::<VkDeviceGroupRenderPassBeginInfo>() - 20usize];
    ["Alignment of VkDeviceGroupRenderPassBeginInfo"]
        [::core::mem::align_of::<VkDeviceGroupRenderPassBeginInfo>() - 4usize];
    ["Offset of field: VkDeviceGroupRenderPassBeginInfo::sType"]
        [::core::mem::offset_of!(VkDeviceGroupRenderPassBeginInfo, sType) - 0usize];
    ["Offset of field: VkDeviceGroupRenderPassBeginInfo::pNext"]
        [::core::mem::offset_of!(VkDeviceGroupRenderPassBeginInfo, pNext) - 4usize];
    ["Offset of field: VkDeviceGroupRenderPassBeginInfo::deviceMask"]
        [::core::mem::offset_of!(VkDeviceGroupRenderPassBeginInfo, deviceMask) - 8usize];
    ["Offset of field: VkDeviceGroupRenderPassBeginInfo::deviceRenderAreaCount"][::core::mem::offset_of!(
        VkDeviceGroupRenderPassBeginInfo,
        deviceRenderAreaCount
    ) - 12usize];
    ["Offset of field: VkDeviceGroupRenderPassBeginInfo::pDeviceRenderAreas"]
        [::core::mem::offset_of!(VkDeviceGroupRenderPassBeginInfo, pDeviceRenderAreas) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDeviceGroupCommandBufferBeginInfo"]
        [::core::mem::size_of::<VkDeviceGroupCommandBufferBeginInfo>() - 12usize];
    ["Alignment of VkDeviceGroupCommandBufferBeginInfo"]
        [::core::mem::align_of::<VkDeviceGroupCommandBufferBeginInfo>() - 4usize];
    ["Offset of field: VkDeviceGroupCommandBufferBeginInfo::sType"]
        [::core::mem::offset_of!(VkDeviceGroupCommandBufferBeginInfo, sType) - 0usize];
    ["Offset of field: VkDeviceGroupCommandBufferBeginInfo::pNext"]
        [::core::mem::offset_of!(VkDeviceGroupCommandBufferBeginInfo, pNext) - 4usize];
    ["Offset of field: VkDeviceGroupCommandBufferBeginInfo::deviceMask"]
        [::core::mem::offset_of!(VkDeviceGroupCommandBufferBeginInfo, deviceMask) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDeviceGroupSubmitInfo"]
        [::core::mem::size_of::<VkDeviceGroupSubmitInfo>() - 32usize];
    ["Alignment of VkDeviceGroupSubmitInfo"]
        [::core::mem::align_of::<VkDeviceGroupSubmitInfo>() - 4usize];
    ["Offset of field: VkDeviceGroupSubmitInfo::sType"]
        [::core::mem::offset_of!(VkDeviceGroupSubmitInfo, sType) - 0usize];
    ["Offset of field: VkDeviceGroupSubmitInfo::pNext"]
        [::core::mem::offset_of!(VkDeviceGroupSubmitInfo, pNext) - 4usize];
    ["Offset of field: VkDeviceGroupSubmitInfo::waitSemaphoreCount"]
        [::core::mem::offset_of!(VkDeviceGroupSubmitInfo, waitSemaphoreCount) - 8usize];
    ["Offset of field: VkDeviceGroupSubmitInfo::pWaitSemaphoreDeviceIndices"]
        [::core::mem::offset_of!(VkDeviceGroupSubmitInfo, pWaitSemaphoreDeviceIndices) - 12usize];
    ["Offset of field: VkDeviceGroupSubmitInfo::commandBufferCount"]
        [::core::mem::offset_of!(VkDeviceGroupSubmitInfo, commandBufferCount) - 16usize];
    ["Offset of field: VkDeviceGroupSubmitInfo::pCommandBufferDeviceMasks"]
        [::core::mem::offset_of!(VkDeviceGroupSubmitInfo, pCommandBufferDeviceMasks) - 20usize];
    ["Offset of field: VkDeviceGroupSubmitInfo::signalSemaphoreCount"]
        [::core::mem::offset_of!(VkDeviceGroupSubmitInfo, signalSemaphoreCount) - 24usize];
    ["Offset of field: VkDeviceGroupSubmitInfo::pSignalSemaphoreDeviceIndices"]
        [::core::mem::offset_of!(VkDeviceGroupSubmitInfo, pSignalSemaphoreDeviceIndices) - 28usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDeviceGroupBindSparseInfo"]
        [::core::mem::size_of::<VkDeviceGroupBindSparseInfo>() - 16usize];
    ["Alignment of VkDeviceGroupBindSparseInfo"]
        [::core::mem::align_of::<VkDeviceGroupBindSparseInfo>() - 4usize];
    ["Offset of field: VkDeviceGroupBindSparseInfo::sType"]
        [::core::mem::offset_of!(VkDeviceGroupBindSparseInfo, sType) - 0usize];
    ["Offset of field: VkDeviceGroupBindSparseInfo::pNext"]
        [::core::mem::offset_of!(VkDeviceGroupBindSparseInfo, pNext) - 4usize];
    ["Offset of field: VkDeviceGroupBindSparseInfo::resourceDeviceIndex"]
        [::core::mem::offset_of!(VkDeviceGroupBindSparseInfo, resourceDeviceIndex) - 8usize];
    ["Offset of field: VkDeviceGroupBindSparseInfo::memoryDeviceIndex"]
        [::core::mem::offset_of!(VkDeviceGroupBindSparseInfo, memoryDeviceIndex) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkBindBufferMemoryDeviceGroupInfo"]
        [::core::mem::size_of::<VkBindBufferMemoryDeviceGroupInfo>() - 16usize];
    ["Alignment of VkBindBufferMemoryDeviceGroupInfo"]
        [::core::mem::align_of::<VkBindBufferMemoryDeviceGroupInfo>() - 4usize];
    ["Offset of field: VkBindBufferMemoryDeviceGroupInfo::sType"]
        [::core::mem::offset_of!(VkBindBufferMemoryDeviceGroupInfo, sType) - 0usize];
    ["Offset of field: VkBindBufferMemoryDeviceGroupInfo::pNext"]
        [::core::mem::offset_of!(VkBindBufferMemoryDeviceGroupInfo, pNext) - 4usize];
    ["Offset of field: VkBindBufferMemoryDeviceGroupInfo::deviceIndexCount"]
        [::core::mem::offset_of!(VkBindBufferMemoryDeviceGroupInfo, deviceIndexCount) - 8usize];
    ["Offset of field: VkBindBufferMemoryDeviceGroupInfo::pDeviceIndices"]
        [::core::mem::offset_of!(VkBindBufferMemoryDeviceGroupInfo, pDeviceIndices) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkBindImageMemoryDeviceGroupInfo"]
        [::core::mem::size_of::<VkBindImageMemoryDeviceGroupInfo>() - 24usize];
    ["Alignment of VkBindImageMemoryDeviceGroupInfo"]
        [::core::mem::align_of::<VkBindImageMemoryDeviceGroupInfo>() - 4usize];
    ["Offset of field: VkBindImageMemoryDeviceGroupInfo::sType"]
        [::core::mem::offset_of!(VkBindImageMemoryDeviceGroupInfo, sType) - 0usize];
    ["Offset of field: VkBindImageMemoryDeviceGroupInfo::pNext"]
        [::core::mem::offset_of!(VkBindImageMemoryDeviceGroupInfo, pNext) - 4usize];
    ["Offset of field: VkBindImageMemoryDeviceGroupInfo::deviceIndexCount"]
        [::core::mem::offset_of!(VkBindImageMemoryDeviceGroupInfo, deviceIndexCount) - 8usize];
    ["Offset of field: VkBindImageMemoryDeviceGroupInfo::pDeviceIndices"]
        [::core::mem::offset_of!(VkBindImageMemoryDeviceGroupInfo, pDeviceIndices) - 12usize];
    ["Offset of field: VkBindImageMemoryDeviceGroupInfo::splitInstanceBindRegionCount"][::core::mem::offset_of!(
        VkBindImageMemoryDeviceGroupInfo,
        splitInstanceBindRegionCount
    )
        - 16usize];
    ["Offset of field: VkBindImageMemoryDeviceGroupInfo::pSplitInstanceBindRegions"][::core::mem::offset_of!(
        VkBindImageMemoryDeviceGroupInfo,
        pSplitInstanceBindRegions
    ) - 20usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceGroupProperties"]
        [::core::mem::size_of::<VkPhysicalDeviceGroupProperties>() - 144usize];
    ["Alignment of VkPhysicalDeviceGroupProperties"]
        [::core::mem::align_of::<VkPhysicalDeviceGroupProperties>() - 4usize];
    ["Offset of field: VkPhysicalDeviceGroupProperties::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceGroupProperties, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceGroupProperties::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceGroupProperties, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceGroupProperties::physicalDeviceCount"]
        [::core::mem::offset_of!(VkPhysicalDeviceGroupProperties, physicalDeviceCount) - 8usize];
    ["Offset of field: VkPhysicalDeviceGroupProperties::physicalDevices"]
        [::core::mem::offset_of!(VkPhysicalDeviceGroupProperties, physicalDevices) - 12usize];
    ["Offset of field: VkPhysicalDeviceGroupProperties::subsetAllocation"]
        [::core::mem::offset_of!(VkPhysicalDeviceGroupProperties, subsetAllocation) - 140usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDeviceGroupDeviceCreateInfo"]
        [::core::mem::size_of::<VkDeviceGroupDeviceCreateInfo>() - 16usize];
    ["Alignment of VkDeviceGroupDeviceCreateInfo"]
        [::core::mem::align_of::<VkDeviceGroupDeviceCreateInfo>() - 4usize];
    ["Offset of field: VkDeviceGroupDeviceCreateInfo::sType"]
        [::core::mem::offset_of!(VkDeviceGroupDeviceCreateInfo, sType) - 0usize];
    ["Offset of field: VkDeviceGroupDeviceCreateInfo::pNext"]
        [::core::mem::offset_of!(VkDeviceGroupDeviceCreateInfo, pNext) - 4usize];
    ["Offset of field: VkDeviceGroupDeviceCreateInfo::physicalDeviceCount"]
        [::core::mem::offset_of!(VkDeviceGroupDeviceCreateInfo, physicalDeviceCount) - 8usize];
    ["Offset of field: VkDeviceGroupDeviceCreateInfo::pPhysicalDevices"]
        [::core::mem::offset_of!(VkDeviceGroupDeviceCreateInfo, pPhysicalDevices) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkBufferMemoryRequirementsInfo2"]
        [::core::mem::size_of::<VkBufferMemoryRequirementsInfo2>() - 16usize];
    ["Alignment of VkBufferMemoryRequirementsInfo2"]
        [::core::mem::align_of::<VkBufferMemoryRequirementsInfo2>() - 8usize];
    ["Offset of field: VkBufferMemoryRequirementsInfo2::sType"]
        [::core::mem::offset_of!(VkBufferMemoryRequirementsInfo2, sType) - 0usize];
    ["Offset of field: VkBufferMemoryRequirementsInfo2::pNext"]
        [::core::mem::offset_of!(VkBufferMemoryRequirementsInfo2, pNext) - 4usize];
    ["Offset of field: VkBufferMemoryRequirementsInfo2::buffer"]
        [::core::mem::offset_of!(VkBufferMemoryRequirementsInfo2, buffer) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkImageMemoryRequirementsInfo2"]
        [::core::mem::size_of::<VkImageMemoryRequirementsInfo2>() - 16usize];
    ["Alignment of VkImageMemoryRequirementsInfo2"]
        [::core::mem::align_of::<VkImageMemoryRequirementsInfo2>() - 8usize];
    ["Offset of field: VkImageMemoryRequirementsInfo2::sType"]
        [::core::mem::offset_of!(VkImageMemoryRequirementsInfo2, sType) - 0usize];
    ["Offset of field: VkImageMemoryRequirementsInfo2::pNext"]
        [::core::mem::offset_of!(VkImageMemoryRequirementsInfo2, pNext) - 4usize];
    ["Offset of field: VkImageMemoryRequirementsInfo2::image"]
        [::core::mem::offset_of!(VkImageMemoryRequirementsInfo2, image) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkImageSparseMemoryRequirementsInfo2"]
        [::core::mem::size_of::<VkImageSparseMemoryRequirementsInfo2>() - 16usize];
    ["Alignment of VkImageSparseMemoryRequirementsInfo2"]
        [::core::mem::align_of::<VkImageSparseMemoryRequirementsInfo2>() - 8usize];
    ["Offset of field: VkImageSparseMemoryRequirementsInfo2::sType"]
        [::core::mem::offset_of!(VkImageSparseMemoryRequirementsInfo2, sType) - 0usize];
    ["Offset of field: VkImageSparseMemoryRequirementsInfo2::pNext"]
        [::core::mem::offset_of!(VkImageSparseMemoryRequirementsInfo2, pNext) - 4usize];
    ["Offset of field: VkImageSparseMemoryRequirementsInfo2::image"]
        [::core::mem::offset_of!(VkImageSparseMemoryRequirementsInfo2, image) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkMemoryRequirements2"][::core::mem::size_of::<VkMemoryRequirements2>() - 32usize];
    ["Alignment of VkMemoryRequirements2"]
        [::core::mem::align_of::<VkMemoryRequirements2>() - 8usize];
    ["Offset of field: VkMemoryRequirements2::sType"]
        [::core::mem::offset_of!(VkMemoryRequirements2, sType) - 0usize];
    ["Offset of field: VkMemoryRequirements2::pNext"]
        [::core::mem::offset_of!(VkMemoryRequirements2, pNext) - 4usize];
    ["Offset of field: VkMemoryRequirements2::memoryRequirements"]
        [::core::mem::offset_of!(VkMemoryRequirements2, memoryRequirements) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSparseImageMemoryRequirements2"]
        [::core::mem::size_of::<VkSparseImageMemoryRequirements2>() - 56usize];
    ["Alignment of VkSparseImageMemoryRequirements2"]
        [::core::mem::align_of::<VkSparseImageMemoryRequirements2>() - 8usize];
    ["Offset of field: VkSparseImageMemoryRequirements2::sType"]
        [::core::mem::offset_of!(VkSparseImageMemoryRequirements2, sType) - 0usize];
    ["Offset of field: VkSparseImageMemoryRequirements2::pNext"]
        [::core::mem::offset_of!(VkSparseImageMemoryRequirements2, pNext) - 4usize];
    ["Offset of field: VkSparseImageMemoryRequirements2::memoryRequirements"]
        [::core::mem::offset_of!(VkSparseImageMemoryRequirements2, memoryRequirements) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceFeatures2"]
        [::core::mem::size_of::<VkPhysicalDeviceFeatures2>() - 228usize];
    ["Alignment of VkPhysicalDeviceFeatures2"]
        [::core::mem::align_of::<VkPhysicalDeviceFeatures2>() - 4usize];
    ["Offset of field: VkPhysicalDeviceFeatures2::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceFeatures2, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceFeatures2::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceFeatures2, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceFeatures2::features"]
        [::core::mem::offset_of!(VkPhysicalDeviceFeatures2, features) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceProperties2"]
        [::core::mem::size_of::<VkPhysicalDeviceProperties2>() - 824usize];
    ["Alignment of VkPhysicalDeviceProperties2"]
        [::core::mem::align_of::<VkPhysicalDeviceProperties2>() - 8usize];
    ["Offset of field: VkPhysicalDeviceProperties2::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceProperties2, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceProperties2::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceProperties2, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceProperties2::properties"]
        [::core::mem::offset_of!(VkPhysicalDeviceProperties2, properties) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkFormatProperties2"][::core::mem::size_of::<VkFormatProperties2>() - 20usize];
    ["Alignment of VkFormatProperties2"][::core::mem::align_of::<VkFormatProperties2>() - 4usize];
    ["Offset of field: VkFormatProperties2::sType"]
        [::core::mem::offset_of!(VkFormatProperties2, sType) - 0usize];
    ["Offset of field: VkFormatProperties2::pNext"]
        [::core::mem::offset_of!(VkFormatProperties2, pNext) - 4usize];
    ["Offset of field: VkFormatProperties2::formatProperties"]
        [::core::mem::offset_of!(VkFormatProperties2, formatProperties) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkImageFormatProperties2"]
        [::core::mem::size_of::<VkImageFormatProperties2>() - 40usize];
    ["Alignment of VkImageFormatProperties2"]
        [::core::mem::align_of::<VkImageFormatProperties2>() - 8usize];
    ["Offset of field: VkImageFormatProperties2::sType"]
        [::core::mem::offset_of!(VkImageFormatProperties2, sType) - 0usize];
    ["Offset of field: VkImageFormatProperties2::pNext"]
        [::core::mem::offset_of!(VkImageFormatProperties2, pNext) - 4usize];
    ["Offset of field: VkImageFormatProperties2::imageFormatProperties"]
        [::core::mem::offset_of!(VkImageFormatProperties2, imageFormatProperties) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceImageFormatInfo2"]
        [::core::mem::size_of::<VkPhysicalDeviceImageFormatInfo2>() - 28usize];
    ["Alignment of VkPhysicalDeviceImageFormatInfo2"]
        [::core::mem::align_of::<VkPhysicalDeviceImageFormatInfo2>() - 4usize];
    ["Offset of field: VkPhysicalDeviceImageFormatInfo2::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceImageFormatInfo2, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceImageFormatInfo2::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceImageFormatInfo2, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceImageFormatInfo2::format"]
        [::core::mem::offset_of!(VkPhysicalDeviceImageFormatInfo2, format) - 8usize];
    ["Offset of field: VkPhysicalDeviceImageFormatInfo2::type_"]
        [::core::mem::offset_of!(VkPhysicalDeviceImageFormatInfo2, type_) - 12usize];
    ["Offset of field: VkPhysicalDeviceImageFormatInfo2::tiling"]
        [::core::mem::offset_of!(VkPhysicalDeviceImageFormatInfo2, tiling) - 16usize];
    ["Offset of field: VkPhysicalDeviceImageFormatInfo2::usage"]
        [::core::mem::offset_of!(VkPhysicalDeviceImageFormatInfo2, usage) - 20usize];
    ["Offset of field: VkPhysicalDeviceImageFormatInfo2::flags"]
        [::core::mem::offset_of!(VkPhysicalDeviceImageFormatInfo2, flags) - 24usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkQueueFamilyProperties2"]
        [::core::mem::size_of::<VkQueueFamilyProperties2>() - 32usize];
    ["Alignment of VkQueueFamilyProperties2"]
        [::core::mem::align_of::<VkQueueFamilyProperties2>() - 4usize];
    ["Offset of field: VkQueueFamilyProperties2::sType"]
        [::core::mem::offset_of!(VkQueueFamilyProperties2, sType) - 0usize];
    ["Offset of field: VkQueueFamilyProperties2::pNext"]
        [::core::mem::offset_of!(VkQueueFamilyProperties2, pNext) - 4usize];
    ["Offset of field: VkQueueFamilyProperties2::queueFamilyProperties"]
        [::core::mem::offset_of!(VkQueueFamilyProperties2, queueFamilyProperties) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceMemoryProperties2"]
        [::core::mem::size_of::<VkPhysicalDeviceMemoryProperties2>() - 528usize];
    ["Alignment of VkPhysicalDeviceMemoryProperties2"]
        [::core::mem::align_of::<VkPhysicalDeviceMemoryProperties2>() - 8usize];
    ["Offset of field: VkPhysicalDeviceMemoryProperties2::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceMemoryProperties2, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceMemoryProperties2::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceMemoryProperties2, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceMemoryProperties2::memoryProperties"]
        [::core::mem::offset_of!(VkPhysicalDeviceMemoryProperties2, memoryProperties) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSparseImageFormatProperties2"]
        [::core::mem::size_of::<VkSparseImageFormatProperties2>() - 28usize];
    ["Alignment of VkSparseImageFormatProperties2"]
        [::core::mem::align_of::<VkSparseImageFormatProperties2>() - 4usize];
    ["Offset of field: VkSparseImageFormatProperties2::sType"]
        [::core::mem::offset_of!(VkSparseImageFormatProperties2, sType) - 0usize];
    ["Offset of field: VkSparseImageFormatProperties2::pNext"]
        [::core::mem::offset_of!(VkSparseImageFormatProperties2, pNext) - 4usize];
    ["Offset of field: VkSparseImageFormatProperties2::properties"]
        [::core::mem::offset_of!(VkSparseImageFormatProperties2, properties) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceSparseImageFormatInfo2"]
        [::core::mem::size_of::<VkPhysicalDeviceSparseImageFormatInfo2>() - 28usize];
    ["Alignment of VkPhysicalDeviceSparseImageFormatInfo2"]
        [::core::mem::align_of::<VkPhysicalDeviceSparseImageFormatInfo2>() - 4usize];
    ["Offset of field: VkPhysicalDeviceSparseImageFormatInfo2::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceSparseImageFormatInfo2, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceSparseImageFormatInfo2::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceSparseImageFormatInfo2, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceSparseImageFormatInfo2::format"]
        [::core::mem::offset_of!(VkPhysicalDeviceSparseImageFormatInfo2, format) - 8usize];
    ["Offset of field: VkPhysicalDeviceSparseImageFormatInfo2::type_"]
        [::core::mem::offset_of!(VkPhysicalDeviceSparseImageFormatInfo2, type_) - 12usize];
    ["Offset of field: VkPhysicalDeviceSparseImageFormatInfo2::samples"]
        [::core::mem::offset_of!(VkPhysicalDeviceSparseImageFormatInfo2, samples) - 16usize];
    ["Offset of field: VkPhysicalDeviceSparseImageFormatInfo2::usage"]
        [::core::mem::offset_of!(VkPhysicalDeviceSparseImageFormatInfo2, usage) - 20usize];
    ["Offset of field: VkPhysicalDeviceSparseImageFormatInfo2::tiling"]
        [::core::mem::offset_of!(VkPhysicalDeviceSparseImageFormatInfo2, tiling) - 24usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDevicePointClippingProperties"]
        [::core::mem::size_of::<VkPhysicalDevicePointClippingProperties>() - 12usize];
    ["Alignment of VkPhysicalDevicePointClippingProperties"]
        [::core::mem::align_of::<VkPhysicalDevicePointClippingProperties>() - 4usize];
    ["Offset of field: VkPhysicalDevicePointClippingProperties::sType"]
        [::core::mem::offset_of!(VkPhysicalDevicePointClippingProperties, sType) - 0usize];
    ["Offset of field: VkPhysicalDevicePointClippingProperties::pNext"]
        [::core::mem::offset_of!(VkPhysicalDevicePointClippingProperties, pNext) - 4usize];
    ["Offset of field: VkPhysicalDevicePointClippingProperties::pointClippingBehavior"][::core::mem::offset_of!(
        VkPhysicalDevicePointClippingProperties,
        pointClippingBehavior
    ) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkInputAttachmentAspectReference"]
        [::core::mem::size_of::<VkInputAttachmentAspectReference>() - 12usize];
    ["Alignment of VkInputAttachmentAspectReference"]
        [::core::mem::align_of::<VkInputAttachmentAspectReference>() - 4usize];
    ["Offset of field: VkInputAttachmentAspectReference::subpass"]
        [::core::mem::offset_of!(VkInputAttachmentAspectReference, subpass) - 0usize];
    ["Offset of field: VkInputAttachmentAspectReference::inputAttachmentIndex"]
        [::core::mem::offset_of!(VkInputAttachmentAspectReference, inputAttachmentIndex) - 4usize];
    ["Offset of field: VkInputAttachmentAspectReference::aspectMask"]
        [::core::mem::offset_of!(VkInputAttachmentAspectReference, aspectMask) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkRenderPassInputAttachmentAspectCreateInfo"]
        [::core::mem::size_of::<VkRenderPassInputAttachmentAspectCreateInfo>() - 16usize];
    ["Alignment of VkRenderPassInputAttachmentAspectCreateInfo"]
        [::core::mem::align_of::<VkRenderPassInputAttachmentAspectCreateInfo>() - 4usize];
    ["Offset of field: VkRenderPassInputAttachmentAspectCreateInfo::sType"]
        [::core::mem::offset_of!(VkRenderPassInputAttachmentAspectCreateInfo, sType) - 0usize];
    ["Offset of field: VkRenderPassInputAttachmentAspectCreateInfo::pNext"]
        [::core::mem::offset_of!(VkRenderPassInputAttachmentAspectCreateInfo, pNext) - 4usize];
    ["Offset of field: VkRenderPassInputAttachmentAspectCreateInfo::aspectReferenceCount"][::core::mem::offset_of!(
        VkRenderPassInputAttachmentAspectCreateInfo,
        aspectReferenceCount
    )
        - 8usize];
    ["Offset of field: VkRenderPassInputAttachmentAspectCreateInfo::pAspectReferences"][::core::mem::offset_of!(
        VkRenderPassInputAttachmentAspectCreateInfo,
        pAspectReferences
    )
        - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkImageViewUsageCreateInfo"]
        [::core::mem::size_of::<VkImageViewUsageCreateInfo>() - 12usize];
    ["Alignment of VkImageViewUsageCreateInfo"]
        [::core::mem::align_of::<VkImageViewUsageCreateInfo>() - 4usize];
    ["Offset of field: VkImageViewUsageCreateInfo::sType"]
        [::core::mem::offset_of!(VkImageViewUsageCreateInfo, sType) - 0usize];
    ["Offset of field: VkImageViewUsageCreateInfo::pNext"]
        [::core::mem::offset_of!(VkImageViewUsageCreateInfo, pNext) - 4usize];
    ["Offset of field: VkImageViewUsageCreateInfo::usage"]
        [::core::mem::offset_of!(VkImageViewUsageCreateInfo, usage) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineTessellationDomainOriginStateCreateInfo"]
        [::core::mem::size_of::<VkPipelineTessellationDomainOriginStateCreateInfo>() - 12usize];
    ["Alignment of VkPipelineTessellationDomainOriginStateCreateInfo"]
        [::core::mem::align_of::<VkPipelineTessellationDomainOriginStateCreateInfo>() - 4usize];
    ["Offset of field: VkPipelineTessellationDomainOriginStateCreateInfo::sType"][::core::mem::offset_of!(
        VkPipelineTessellationDomainOriginStateCreateInfo,
        sType
    ) - 0usize];
    ["Offset of field: VkPipelineTessellationDomainOriginStateCreateInfo::pNext"][::core::mem::offset_of!(
        VkPipelineTessellationDomainOriginStateCreateInfo,
        pNext
    ) - 4usize];
    ["Offset of field: VkPipelineTessellationDomainOriginStateCreateInfo::domainOrigin"][::core::mem::offset_of!(
        VkPipelineTessellationDomainOriginStateCreateInfo,
        domainOrigin
    )
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkRenderPassMultiviewCreateInfo"]
        [::core::mem::size_of::<VkRenderPassMultiviewCreateInfo>() - 32usize];
    ["Alignment of VkRenderPassMultiviewCreateInfo"]
        [::core::mem::align_of::<VkRenderPassMultiviewCreateInfo>() - 4usize];
    ["Offset of field: VkRenderPassMultiviewCreateInfo::sType"]
        [::core::mem::offset_of!(VkRenderPassMultiviewCreateInfo, sType) - 0usize];
    ["Offset of field: VkRenderPassMultiviewCreateInfo::pNext"]
        [::core::mem::offset_of!(VkRenderPassMultiviewCreateInfo, pNext) - 4usize];
    ["Offset of field: VkRenderPassMultiviewCreateInfo::subpassCount"]
        [::core::mem::offset_of!(VkRenderPassMultiviewCreateInfo, subpassCount) - 8usize];
    ["Offset of field: VkRenderPassMultiviewCreateInfo::pViewMasks"]
        [::core::mem::offset_of!(VkRenderPassMultiviewCreateInfo, pViewMasks) - 12usize];
    ["Offset of field: VkRenderPassMultiviewCreateInfo::dependencyCount"]
        [::core::mem::offset_of!(VkRenderPassMultiviewCreateInfo, dependencyCount) - 16usize];
    ["Offset of field: VkRenderPassMultiviewCreateInfo::pViewOffsets"]
        [::core::mem::offset_of!(VkRenderPassMultiviewCreateInfo, pViewOffsets) - 20usize];
    ["Offset of field: VkRenderPassMultiviewCreateInfo::correlationMaskCount"]
        [::core::mem::offset_of!(VkRenderPassMultiviewCreateInfo, correlationMaskCount) - 24usize];
    ["Offset of field: VkRenderPassMultiviewCreateInfo::pCorrelationMasks"]
        [::core::mem::offset_of!(VkRenderPassMultiviewCreateInfo, pCorrelationMasks) - 28usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceMultiviewFeatures"]
        [::core::mem::size_of::<VkPhysicalDeviceMultiviewFeatures>() - 20usize];
    ["Alignment of VkPhysicalDeviceMultiviewFeatures"]
        [::core::mem::align_of::<VkPhysicalDeviceMultiviewFeatures>() - 4usize];
    ["Offset of field: VkPhysicalDeviceMultiviewFeatures::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceMultiviewFeatures, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceMultiviewFeatures::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceMultiviewFeatures, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceMultiviewFeatures::multiview"]
        [::core::mem::offset_of!(VkPhysicalDeviceMultiviewFeatures, multiview) - 8usize];
    ["Offset of field: VkPhysicalDeviceMultiviewFeatures::multiviewGeometryShader"][::core::mem::offset_of!(
        VkPhysicalDeviceMultiviewFeatures,
        multiviewGeometryShader
    ) - 12usize];
    ["Offset of field: VkPhysicalDeviceMultiviewFeatures::multiviewTessellationShader"][::core::mem::offset_of!(
        VkPhysicalDeviceMultiviewFeatures,
        multiviewTessellationShader
    )
        - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceMultiviewProperties"]
        [::core::mem::size_of::<VkPhysicalDeviceMultiviewProperties>() - 16usize];
    ["Alignment of VkPhysicalDeviceMultiviewProperties"]
        [::core::mem::align_of::<VkPhysicalDeviceMultiviewProperties>() - 4usize];
    ["Offset of field: VkPhysicalDeviceMultiviewProperties::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceMultiviewProperties, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceMultiviewProperties::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceMultiviewProperties, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceMultiviewProperties::maxMultiviewViewCount"][::core::mem::offset_of!(
        VkPhysicalDeviceMultiviewProperties,
        maxMultiviewViewCount
    ) - 8usize];
    ["Offset of field: VkPhysicalDeviceMultiviewProperties::maxMultiviewInstanceIndex"][::core::mem::offset_of!(
        VkPhysicalDeviceMultiviewProperties,
        maxMultiviewInstanceIndex
    )
        - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceVariablePointersFeatures"]
        [::core::mem::size_of::<VkPhysicalDeviceVariablePointersFeatures>() - 16usize];
    ["Alignment of VkPhysicalDeviceVariablePointersFeatures"]
        [::core::mem::align_of::<VkPhysicalDeviceVariablePointersFeatures>() - 4usize];
    ["Offset of field: VkPhysicalDeviceVariablePointersFeatures::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceVariablePointersFeatures, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceVariablePointersFeatures::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceVariablePointersFeatures, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceVariablePointersFeatures::variablePointersStorageBuffer"][::core::mem::offset_of!(
        VkPhysicalDeviceVariablePointersFeatures,
        variablePointersStorageBuffer
    )
        - 8usize];
    ["Offset of field: VkPhysicalDeviceVariablePointersFeatures::variablePointers"][::core::mem::offset_of!(
        VkPhysicalDeviceVariablePointersFeatures,
        variablePointers
    ) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceProtectedMemoryFeatures"]
        [::core::mem::size_of::<VkPhysicalDeviceProtectedMemoryFeatures>() - 12usize];
    ["Alignment of VkPhysicalDeviceProtectedMemoryFeatures"]
        [::core::mem::align_of::<VkPhysicalDeviceProtectedMemoryFeatures>() - 4usize];
    ["Offset of field: VkPhysicalDeviceProtectedMemoryFeatures::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceProtectedMemoryFeatures, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceProtectedMemoryFeatures::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceProtectedMemoryFeatures, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceProtectedMemoryFeatures::protectedMemory"][::core::mem::offset_of!(
        VkPhysicalDeviceProtectedMemoryFeatures,
        protectedMemory
    ) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceProtectedMemoryProperties"]
        [::core::mem::size_of::<VkPhysicalDeviceProtectedMemoryProperties>() - 12usize];
    ["Alignment of VkPhysicalDeviceProtectedMemoryProperties"]
        [::core::mem::align_of::<VkPhysicalDeviceProtectedMemoryProperties>() - 4usize];
    ["Offset of field: VkPhysicalDeviceProtectedMemoryProperties::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceProtectedMemoryProperties, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceProtectedMemoryProperties::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceProtectedMemoryProperties, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceProtectedMemoryProperties::protectedNoFault"][::core::mem::offset_of!(
        VkPhysicalDeviceProtectedMemoryProperties,
        protectedNoFault
    ) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDeviceQueueInfo2"][::core::mem::size_of::<VkDeviceQueueInfo2>() - 20usize];
    ["Alignment of VkDeviceQueueInfo2"][::core::mem::align_of::<VkDeviceQueueInfo2>() - 4usize];
    ["Offset of field: VkDeviceQueueInfo2::sType"]
        [::core::mem::offset_of!(VkDeviceQueueInfo2, sType) - 0usize];
    ["Offset of field: VkDeviceQueueInfo2::pNext"]
        [::core::mem::offset_of!(VkDeviceQueueInfo2, pNext) - 4usize];
    ["Offset of field: VkDeviceQueueInfo2::flags"]
        [::core::mem::offset_of!(VkDeviceQueueInfo2, flags) - 8usize];
    ["Offset of field: VkDeviceQueueInfo2::queueFamilyIndex"]
        [::core::mem::offset_of!(VkDeviceQueueInfo2, queueFamilyIndex) - 12usize];
    ["Offset of field: VkDeviceQueueInfo2::queueIndex"]
        [::core::mem::offset_of!(VkDeviceQueueInfo2, queueIndex) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkProtectedSubmitInfo"][::core::mem::size_of::<VkProtectedSubmitInfo>() - 12usize];
    ["Alignment of VkProtectedSubmitInfo"]
        [::core::mem::align_of::<VkProtectedSubmitInfo>() - 4usize];
    ["Offset of field: VkProtectedSubmitInfo::sType"]
        [::core::mem::offset_of!(VkProtectedSubmitInfo, sType) - 0usize];
    ["Offset of field: VkProtectedSubmitInfo::pNext"]
        [::core::mem::offset_of!(VkProtectedSubmitInfo, pNext) - 4usize];
    ["Offset of field: VkProtectedSubmitInfo::protectedSubmit"]
        [::core::mem::offset_of!(VkProtectedSubmitInfo, protectedSubmit) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSamplerYcbcrConversionCreateInfo"]
        [::core::mem::size_of::<VkSamplerYcbcrConversionCreateInfo>() - 52usize];
    ["Alignment of VkSamplerYcbcrConversionCreateInfo"]
        [::core::mem::align_of::<VkSamplerYcbcrConversionCreateInfo>() - 4usize];
    ["Offset of field: VkSamplerYcbcrConversionCreateInfo::sType"]
        [::core::mem::offset_of!(VkSamplerYcbcrConversionCreateInfo, sType) - 0usize];
    ["Offset of field: VkSamplerYcbcrConversionCreateInfo::pNext"]
        [::core::mem::offset_of!(VkSamplerYcbcrConversionCreateInfo, pNext) - 4usize];
    ["Offset of field: VkSamplerYcbcrConversionCreateInfo::format"]
        [::core::mem::offset_of!(VkSamplerYcbcrConversionCreateInfo, format) - 8usize];
    ["Offset of field: VkSamplerYcbcrConversionCreateInfo::ycbcrModel"]
        [::core::mem::offset_of!(VkSamplerYcbcrConversionCreateInfo, ycbcrModel) - 12usize];
    ["Offset of field: VkSamplerYcbcrConversionCreateInfo::ycbcrRange"]
        [::core::mem::offset_of!(VkSamplerYcbcrConversionCreateInfo, ycbcrRange) - 16usize];
    ["Offset of field: VkSamplerYcbcrConversionCreateInfo::components"]
        [::core::mem::offset_of!(VkSamplerYcbcrConversionCreateInfo, components) - 20usize];
    ["Offset of field: VkSamplerYcbcrConversionCreateInfo::xChromaOffset"]
        [::core::mem::offset_of!(VkSamplerYcbcrConversionCreateInfo, xChromaOffset) - 36usize];
    ["Offset of field: VkSamplerYcbcrConversionCreateInfo::yChromaOffset"]
        [::core::mem::offset_of!(VkSamplerYcbcrConversionCreateInfo, yChromaOffset) - 40usize];
    ["Offset of field: VkSamplerYcbcrConversionCreateInfo::chromaFilter"]
        [::core::mem::offset_of!(VkSamplerYcbcrConversionCreateInfo, chromaFilter) - 44usize];
    ["Offset of field: VkSamplerYcbcrConversionCreateInfo::forceExplicitReconstruction"][::core::mem::offset_of!(
        VkSamplerYcbcrConversionCreateInfo,
        forceExplicitReconstruction
    )
        - 48usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSamplerYcbcrConversionInfo"]
        [::core::mem::size_of::<VkSamplerYcbcrConversionInfo>() - 16usize];
    ["Alignment of VkSamplerYcbcrConversionInfo"]
        [::core::mem::align_of::<VkSamplerYcbcrConversionInfo>() - 8usize];
    ["Offset of field: VkSamplerYcbcrConversionInfo::sType"]
        [::core::mem::offset_of!(VkSamplerYcbcrConversionInfo, sType) - 0usize];
    ["Offset of field: VkSamplerYcbcrConversionInfo::pNext"]
        [::core::mem::offset_of!(VkSamplerYcbcrConversionInfo, pNext) - 4usize];
    ["Offset of field: VkSamplerYcbcrConversionInfo::conversion"]
        [::core::mem::offset_of!(VkSamplerYcbcrConversionInfo, conversion) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkBindImagePlaneMemoryInfo"]
        [::core::mem::size_of::<VkBindImagePlaneMemoryInfo>() - 12usize];
    ["Alignment of VkBindImagePlaneMemoryInfo"]
        [::core::mem::align_of::<VkBindImagePlaneMemoryInfo>() - 4usize];
    ["Offset of field: VkBindImagePlaneMemoryInfo::sType"]
        [::core::mem::offset_of!(VkBindImagePlaneMemoryInfo, sType) - 0usize];
    ["Offset of field: VkBindImagePlaneMemoryInfo::pNext"]
        [::core::mem::offset_of!(VkBindImagePlaneMemoryInfo, pNext) - 4usize];
    ["Offset of field: VkBindImagePlaneMemoryInfo::planeAspect"]
        [::core::mem::offset_of!(VkBindImagePlaneMemoryInfo, planeAspect) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkImagePlaneMemoryRequirementsInfo"]
        [::core::mem::size_of::<VkImagePlaneMemoryRequirementsInfo>() - 12usize];
    ["Alignment of VkImagePlaneMemoryRequirementsInfo"]
        [::core::mem::align_of::<VkImagePlaneMemoryRequirementsInfo>() - 4usize];
    ["Offset of field: VkImagePlaneMemoryRequirementsInfo::sType"]
        [::core::mem::offset_of!(VkImagePlaneMemoryRequirementsInfo, sType) - 0usize];
    ["Offset of field: VkImagePlaneMemoryRequirementsInfo::pNext"]
        [::core::mem::offset_of!(VkImagePlaneMemoryRequirementsInfo, pNext) - 4usize];
    ["Offset of field: VkImagePlaneMemoryRequirementsInfo::planeAspect"]
        [::core::mem::offset_of!(VkImagePlaneMemoryRequirementsInfo, planeAspect) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceSamplerYcbcrConversionFeatures"]
        [::core::mem::size_of::<VkPhysicalDeviceSamplerYcbcrConversionFeatures>() - 12usize];
    ["Alignment of VkPhysicalDeviceSamplerYcbcrConversionFeatures"]
        [::core::mem::align_of::<VkPhysicalDeviceSamplerYcbcrConversionFeatures>() - 4usize];
    ["Offset of field: VkPhysicalDeviceSamplerYcbcrConversionFeatures::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceSamplerYcbcrConversionFeatures, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceSamplerYcbcrConversionFeatures::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceSamplerYcbcrConversionFeatures, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceSamplerYcbcrConversionFeatures::samplerYcbcrConversion"][::core::mem::offset_of!(
        VkPhysicalDeviceSamplerYcbcrConversionFeatures,
        samplerYcbcrConversion
    )
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSamplerYcbcrConversionImageFormatProperties"]
        [::core::mem::size_of::<VkSamplerYcbcrConversionImageFormatProperties>() - 12usize];
    ["Alignment of VkSamplerYcbcrConversionImageFormatProperties"]
        [::core::mem::align_of::<VkSamplerYcbcrConversionImageFormatProperties>() - 4usize];
    ["Offset of field: VkSamplerYcbcrConversionImageFormatProperties::sType"]
        [::core::mem::offset_of!(VkSamplerYcbcrConversionImageFormatProperties, sType) - 0usize];
    ["Offset of field: VkSamplerYcbcrConversionImageFormatProperties::pNext"]
        [::core::mem::offset_of!(VkSamplerYcbcrConversionImageFormatProperties, pNext) - 4usize];
    ["Offset of field: VkSamplerYcbcrConversionImageFormatProperties::combinedImageSamplerDescriptorCount"] [:: core :: mem :: offset_of ! (VkSamplerYcbcrConversionImageFormatProperties , combinedImageSamplerDescriptorCount) - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDescriptorUpdateTemplateEntry"]
        [::core::mem::size_of::<VkDescriptorUpdateTemplateEntry>() - 24usize];
    ["Alignment of VkDescriptorUpdateTemplateEntry"]
        [::core::mem::align_of::<VkDescriptorUpdateTemplateEntry>() - 4usize];
    ["Offset of field: VkDescriptorUpdateTemplateEntry::dstBinding"]
        [::core::mem::offset_of!(VkDescriptorUpdateTemplateEntry, dstBinding) - 0usize];
    ["Offset of field: VkDescriptorUpdateTemplateEntry::dstArrayElement"]
        [::core::mem::offset_of!(VkDescriptorUpdateTemplateEntry, dstArrayElement) - 4usize];
    ["Offset of field: VkDescriptorUpdateTemplateEntry::descriptorCount"]
        [::core::mem::offset_of!(VkDescriptorUpdateTemplateEntry, descriptorCount) - 8usize];
    ["Offset of field: VkDescriptorUpdateTemplateEntry::descriptorType"]
        [::core::mem::offset_of!(VkDescriptorUpdateTemplateEntry, descriptorType) - 12usize];
    ["Offset of field: VkDescriptorUpdateTemplateEntry::offset"]
        [::core::mem::offset_of!(VkDescriptorUpdateTemplateEntry, offset) - 16usize];
    ["Offset of field: VkDescriptorUpdateTemplateEntry::stride"]
        [::core::mem::offset_of!(VkDescriptorUpdateTemplateEntry, stride) - 20usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDescriptorUpdateTemplateCreateInfo"]
        [::core::mem::size_of::<VkDescriptorUpdateTemplateCreateInfo>() - 56usize];
    ["Alignment of VkDescriptorUpdateTemplateCreateInfo"]
        [::core::mem::align_of::<VkDescriptorUpdateTemplateCreateInfo>() - 8usize];
    ["Offset of field: VkDescriptorUpdateTemplateCreateInfo::sType"]
        [::core::mem::offset_of!(VkDescriptorUpdateTemplateCreateInfo, sType) - 0usize];
    ["Offset of field: VkDescriptorUpdateTemplateCreateInfo::pNext"]
        [::core::mem::offset_of!(VkDescriptorUpdateTemplateCreateInfo, pNext) - 4usize];
    ["Offset of field: VkDescriptorUpdateTemplateCreateInfo::flags"]
        [::core::mem::offset_of!(VkDescriptorUpdateTemplateCreateInfo, flags) - 8usize];
    ["Offset of field: VkDescriptorUpdateTemplateCreateInfo::descriptorUpdateEntryCount"][::core::mem::offset_of!(
        VkDescriptorUpdateTemplateCreateInfo,
        descriptorUpdateEntryCount
    )
        - 12usize];
    ["Offset of field: VkDescriptorUpdateTemplateCreateInfo::pDescriptorUpdateEntries"][::core::mem::offset_of!(
        VkDescriptorUpdateTemplateCreateInfo,
        pDescriptorUpdateEntries
    )
        - 16usize];
    ["Offset of field: VkDescriptorUpdateTemplateCreateInfo::templateType"]
        [::core::mem::offset_of!(VkDescriptorUpdateTemplateCreateInfo, templateType) - 20usize];
    ["Offset of field: VkDescriptorUpdateTemplateCreateInfo::descriptorSetLayout"][::core::mem::offset_of!(
        VkDescriptorUpdateTemplateCreateInfo,
        descriptorSetLayout
    ) - 24usize];
    ["Offset of field: VkDescriptorUpdateTemplateCreateInfo::pipelineBindPoint"][::core::mem::offset_of!(
        VkDescriptorUpdateTemplateCreateInfo,
        pipelineBindPoint
    ) - 32usize];
    ["Offset of field: VkDescriptorUpdateTemplateCreateInfo::pipelineLayout"]
        [::core::mem::offset_of!(VkDescriptorUpdateTemplateCreateInfo, pipelineLayout) - 40usize];
    ["Offset of field: VkDescriptorUpdateTemplateCreateInfo::set"]
        [::core::mem::offset_of!(VkDescriptorUpdateTemplateCreateInfo, set) - 48usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkExternalMemoryProperties"]
        [::core::mem::size_of::<VkExternalMemoryProperties>() - 12usize];
    ["Alignment of VkExternalMemoryProperties"]
        [::core::mem::align_of::<VkExternalMemoryProperties>() - 4usize];
    ["Offset of field: VkExternalMemoryProperties::externalMemoryFeatures"]
        [::core::mem::offset_of!(VkExternalMemoryProperties, externalMemoryFeatures) - 0usize];
    ["Offset of field: VkExternalMemoryProperties::exportFromImportedHandleTypes"][::core::mem::offset_of!(
        VkExternalMemoryProperties,
        exportFromImportedHandleTypes
    ) - 4usize];
    ["Offset of field: VkExternalMemoryProperties::compatibleHandleTypes"]
        [::core::mem::offset_of!(VkExternalMemoryProperties, compatibleHandleTypes) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceExternalImageFormatInfo"]
        [::core::mem::size_of::<VkPhysicalDeviceExternalImageFormatInfo>() - 12usize];
    ["Alignment of VkPhysicalDeviceExternalImageFormatInfo"]
        [::core::mem::align_of::<VkPhysicalDeviceExternalImageFormatInfo>() - 4usize];
    ["Offset of field: VkPhysicalDeviceExternalImageFormatInfo::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceExternalImageFormatInfo, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceExternalImageFormatInfo::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceExternalImageFormatInfo, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceExternalImageFormatInfo::handleType"]
        [::core::mem::offset_of!(VkPhysicalDeviceExternalImageFormatInfo, handleType) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkExternalImageFormatProperties"]
        [::core::mem::size_of::<VkExternalImageFormatProperties>() - 20usize];
    ["Alignment of VkExternalImageFormatProperties"]
        [::core::mem::align_of::<VkExternalImageFormatProperties>() - 4usize];
    ["Offset of field: VkExternalImageFormatProperties::sType"]
        [::core::mem::offset_of!(VkExternalImageFormatProperties, sType) - 0usize];
    ["Offset of field: VkExternalImageFormatProperties::pNext"]
        [::core::mem::offset_of!(VkExternalImageFormatProperties, pNext) - 4usize];
    ["Offset of field: VkExternalImageFormatProperties::externalMemoryProperties"][::core::mem::offset_of!(
        VkExternalImageFormatProperties,
        externalMemoryProperties
    ) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceExternalBufferInfo"]
        [::core::mem::size_of::<VkPhysicalDeviceExternalBufferInfo>() - 20usize];
    ["Alignment of VkPhysicalDeviceExternalBufferInfo"]
        [::core::mem::align_of::<VkPhysicalDeviceExternalBufferInfo>() - 4usize];
    ["Offset of field: VkPhysicalDeviceExternalBufferInfo::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceExternalBufferInfo, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceExternalBufferInfo::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceExternalBufferInfo, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceExternalBufferInfo::flags"]
        [::core::mem::offset_of!(VkPhysicalDeviceExternalBufferInfo, flags) - 8usize];
    ["Offset of field: VkPhysicalDeviceExternalBufferInfo::usage"]
        [::core::mem::offset_of!(VkPhysicalDeviceExternalBufferInfo, usage) - 12usize];
    ["Offset of field: VkPhysicalDeviceExternalBufferInfo::handleType"]
        [::core::mem::offset_of!(VkPhysicalDeviceExternalBufferInfo, handleType) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkExternalBufferProperties"]
        [::core::mem::size_of::<VkExternalBufferProperties>() - 20usize];
    ["Alignment of VkExternalBufferProperties"]
        [::core::mem::align_of::<VkExternalBufferProperties>() - 4usize];
    ["Offset of field: VkExternalBufferProperties::sType"]
        [::core::mem::offset_of!(VkExternalBufferProperties, sType) - 0usize];
    ["Offset of field: VkExternalBufferProperties::pNext"]
        [::core::mem::offset_of!(VkExternalBufferProperties, pNext) - 4usize];
    ["Offset of field: VkExternalBufferProperties::externalMemoryProperties"]
        [::core::mem::offset_of!(VkExternalBufferProperties, externalMemoryProperties) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceIDProperties"]
        [::core::mem::size_of::<VkPhysicalDeviceIDProperties>() - 56usize];
    ["Alignment of VkPhysicalDeviceIDProperties"]
        [::core::mem::align_of::<VkPhysicalDeviceIDProperties>() - 4usize];
    ["Offset of field: VkPhysicalDeviceIDProperties::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceIDProperties, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceIDProperties::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceIDProperties, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceIDProperties::deviceUUID"]
        [::core::mem::offset_of!(VkPhysicalDeviceIDProperties, deviceUUID) - 8usize];
    ["Offset of field: VkPhysicalDeviceIDProperties::driverUUID"]
        [::core::mem::offset_of!(VkPhysicalDeviceIDProperties, driverUUID) - 24usize];
    ["Offset of field: VkPhysicalDeviceIDProperties::deviceLUID"]
        [::core::mem::offset_of!(VkPhysicalDeviceIDProperties, deviceLUID) - 40usize];
    ["Offset of field: VkPhysicalDeviceIDProperties::deviceNodeMask"]
        [::core::mem::offset_of!(VkPhysicalDeviceIDProperties, deviceNodeMask) - 48usize];
    ["Offset of field: VkPhysicalDeviceIDProperties::deviceLUIDValid"]
        [::core::mem::offset_of!(VkPhysicalDeviceIDProperties, deviceLUIDValid) - 52usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkExternalMemoryImageCreateInfo"]
        [::core::mem::size_of::<VkExternalMemoryImageCreateInfo>() - 12usize];
    ["Alignment of VkExternalMemoryImageCreateInfo"]
        [::core::mem::align_of::<VkExternalMemoryImageCreateInfo>() - 4usize];
    ["Offset of field: VkExternalMemoryImageCreateInfo::sType"]
        [::core::mem::offset_of!(VkExternalMemoryImageCreateInfo, sType) - 0usize];
    ["Offset of field: VkExternalMemoryImageCreateInfo::pNext"]
        [::core::mem::offset_of!(VkExternalMemoryImageCreateInfo, pNext) - 4usize];
    ["Offset of field: VkExternalMemoryImageCreateInfo::handleTypes"]
        [::core::mem::offset_of!(VkExternalMemoryImageCreateInfo, handleTypes) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkExternalMemoryBufferCreateInfo"]
        [::core::mem::size_of::<VkExternalMemoryBufferCreateInfo>() - 12usize];
    ["Alignment of VkExternalMemoryBufferCreateInfo"]
        [::core::mem::align_of::<VkExternalMemoryBufferCreateInfo>() - 4usize];
    ["Offset of field: VkExternalMemoryBufferCreateInfo::sType"]
        [::core::mem::offset_of!(VkExternalMemoryBufferCreateInfo, sType) - 0usize];
    ["Offset of field: VkExternalMemoryBufferCreateInfo::pNext"]
        [::core::mem::offset_of!(VkExternalMemoryBufferCreateInfo, pNext) - 4usize];
    ["Offset of field: VkExternalMemoryBufferCreateInfo::handleTypes"]
        [::core::mem::offset_of!(VkExternalMemoryBufferCreateInfo, handleTypes) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkExportMemoryAllocateInfo"]
        [::core::mem::size_of::<VkExportMemoryAllocateInfo>() - 12usize];
    ["Alignment of VkExportMemoryAllocateInfo"]
        [::core::mem::align_of::<VkExportMemoryAllocateInfo>() - 4usize];
    ["Offset of field: VkExportMemoryAllocateInfo::sType"]
        [::core::mem::offset_of!(VkExportMemoryAllocateInfo, sType) - 0usize];
    ["Offset of field: VkExportMemoryAllocateInfo::pNext"]
        [::core::mem::offset_of!(VkExportMemoryAllocateInfo, pNext) - 4usize];
    ["Offset of field: VkExportMemoryAllocateInfo::handleTypes"]
        [::core::mem::offset_of!(VkExportMemoryAllocateInfo, handleTypes) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceExternalFenceInfo"]
        [::core::mem::size_of::<VkPhysicalDeviceExternalFenceInfo>() - 12usize];
    ["Alignment of VkPhysicalDeviceExternalFenceInfo"]
        [::core::mem::align_of::<VkPhysicalDeviceExternalFenceInfo>() - 4usize];
    ["Offset of field: VkPhysicalDeviceExternalFenceInfo::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceExternalFenceInfo, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceExternalFenceInfo::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceExternalFenceInfo, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceExternalFenceInfo::handleType"]
        [::core::mem::offset_of!(VkPhysicalDeviceExternalFenceInfo, handleType) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkExternalFenceProperties"]
        [::core::mem::size_of::<VkExternalFenceProperties>() - 20usize];
    ["Alignment of VkExternalFenceProperties"]
        [::core::mem::align_of::<VkExternalFenceProperties>() - 4usize];
    ["Offset of field: VkExternalFenceProperties::sType"]
        [::core::mem::offset_of!(VkExternalFenceProperties, sType) - 0usize];
    ["Offset of field: VkExternalFenceProperties::pNext"]
        [::core::mem::offset_of!(VkExternalFenceProperties, pNext) - 4usize];
    ["Offset of field: VkExternalFenceProperties::exportFromImportedHandleTypes"][::core::mem::offset_of!(
        VkExternalFenceProperties,
        exportFromImportedHandleTypes
    ) - 8usize];
    ["Offset of field: VkExternalFenceProperties::compatibleHandleTypes"]
        [::core::mem::offset_of!(VkExternalFenceProperties, compatibleHandleTypes) - 12usize];
    ["Offset of field: VkExternalFenceProperties::externalFenceFeatures"]
        [::core::mem::offset_of!(VkExternalFenceProperties, externalFenceFeatures) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkExportFenceCreateInfo"]
        [::core::mem::size_of::<VkExportFenceCreateInfo>() - 12usize];
    ["Alignment of VkExportFenceCreateInfo"]
        [::core::mem::align_of::<VkExportFenceCreateInfo>() - 4usize];
    ["Offset of field: VkExportFenceCreateInfo::sType"]
        [::core::mem::offset_of!(VkExportFenceCreateInfo, sType) - 0usize];
    ["Offset of field: VkExportFenceCreateInfo::pNext"]
        [::core::mem::offset_of!(VkExportFenceCreateInfo, pNext) - 4usize];
    ["Offset of field: VkExportFenceCreateInfo::handleTypes"]
        [::core::mem::offset_of!(VkExportFenceCreateInfo, handleTypes) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkExportSemaphoreCreateInfo"]
        [::core::mem::size_of::<VkExportSemaphoreCreateInfo>() - 12usize];
    ["Alignment of VkExportSemaphoreCreateInfo"]
        [::core::mem::align_of::<VkExportSemaphoreCreateInfo>() - 4usize];
    ["Offset of field: VkExportSemaphoreCreateInfo::sType"]
        [::core::mem::offset_of!(VkExportSemaphoreCreateInfo, sType) - 0usize];
    ["Offset of field: VkExportSemaphoreCreateInfo::pNext"]
        [::core::mem::offset_of!(VkExportSemaphoreCreateInfo, pNext) - 4usize];
    ["Offset of field: VkExportSemaphoreCreateInfo::handleTypes"]
        [::core::mem::offset_of!(VkExportSemaphoreCreateInfo, handleTypes) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceExternalSemaphoreInfo"]
        [::core::mem::size_of::<VkPhysicalDeviceExternalSemaphoreInfo>() - 12usize];
    ["Alignment of VkPhysicalDeviceExternalSemaphoreInfo"]
        [::core::mem::align_of::<VkPhysicalDeviceExternalSemaphoreInfo>() - 4usize];
    ["Offset of field: VkPhysicalDeviceExternalSemaphoreInfo::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceExternalSemaphoreInfo, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceExternalSemaphoreInfo::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceExternalSemaphoreInfo, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceExternalSemaphoreInfo::handleType"]
        [::core::mem::offset_of!(VkPhysicalDeviceExternalSemaphoreInfo, handleType) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkExternalSemaphoreProperties"]
        [::core::mem::size_of::<VkExternalSemaphoreProperties>() - 20usize];
    ["Alignment of VkExternalSemaphoreProperties"]
        [::core::mem::align_of::<VkExternalSemaphoreProperties>() - 4usize];
    ["Offset of field: VkExternalSemaphoreProperties::sType"]
        [::core::mem::offset_of!(VkExternalSemaphoreProperties, sType) - 0usize];
    ["Offset of field: VkExternalSemaphoreProperties::pNext"]
        [::core::mem::offset_of!(VkExternalSemaphoreProperties, pNext) - 4usize];
    ["Offset of field: VkExternalSemaphoreProperties::exportFromImportedHandleTypes"][::core::mem::offset_of!(
        VkExternalSemaphoreProperties,
        exportFromImportedHandleTypes
    ) - 8usize];
    ["Offset of field: VkExternalSemaphoreProperties::compatibleHandleTypes"]
        [::core::mem::offset_of!(VkExternalSemaphoreProperties, compatibleHandleTypes) - 12usize];
    ["Offset of field: VkExternalSemaphoreProperties::externalSemaphoreFeatures"][::core::mem::offset_of!(
        VkExternalSemaphoreProperties,
        externalSemaphoreFeatures
    ) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceMaintenance3Properties"]
        [::core::mem::size_of::<VkPhysicalDeviceMaintenance3Properties>() - 24usize];
    ["Alignment of VkPhysicalDeviceMaintenance3Properties"]
        [::core::mem::align_of::<VkPhysicalDeviceMaintenance3Properties>() - 8usize];
    ["Offset of field: VkPhysicalDeviceMaintenance3Properties::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceMaintenance3Properties, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceMaintenance3Properties::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceMaintenance3Properties, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceMaintenance3Properties::maxPerSetDescriptors"][::core::mem::offset_of!(
        VkPhysicalDeviceMaintenance3Properties,
        maxPerSetDescriptors
    ) - 8usize];
    ["Offset of field: VkPhysicalDeviceMaintenance3Properties::maxMemoryAllocationSize"][::core::mem::offset_of!(
        VkPhysicalDeviceMaintenance3Properties,
        maxMemoryAllocationSize
    )
        - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDescriptorSetLayoutSupport"]
        [::core::mem::size_of::<VkDescriptorSetLayoutSupport>() - 12usize];
    ["Alignment of VkDescriptorSetLayoutSupport"]
        [::core::mem::align_of::<VkDescriptorSetLayoutSupport>() - 4usize];
    ["Offset of field: VkDescriptorSetLayoutSupport::sType"]
        [::core::mem::offset_of!(VkDescriptorSetLayoutSupport, sType) - 0usize];
    ["Offset of field: VkDescriptorSetLayoutSupport::pNext"]
        [::core::mem::offset_of!(VkDescriptorSetLayoutSupport, pNext) - 4usize];
    ["Offset of field: VkDescriptorSetLayoutSupport::supported"]
        [::core::mem::offset_of!(VkDescriptorSetLayoutSupport, supported) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceShaderDrawParametersFeatures"]
        [::core::mem::size_of::<VkPhysicalDeviceShaderDrawParametersFeatures>() - 12usize];
    ["Alignment of VkPhysicalDeviceShaderDrawParametersFeatures"]
        [::core::mem::align_of::<VkPhysicalDeviceShaderDrawParametersFeatures>() - 4usize];
    ["Offset of field: VkPhysicalDeviceShaderDrawParametersFeatures::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceShaderDrawParametersFeatures, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceShaderDrawParametersFeatures::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceShaderDrawParametersFeatures, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceShaderDrawParametersFeatures::shaderDrawParameters"][::core::mem::offset_of!(
        VkPhysicalDeviceShaderDrawParametersFeatures,
        shaderDrawParameters
    )
        - 8usize];
};
pub const VkDriverId_VK_DRIVER_ID_AMD_PROPRIETARY: VkDriverId = 1;
pub const VkDriverId_VK_DRIVER_ID_AMD_OPEN_SOURCE: VkDriverId = 2;
pub const VkDriverId_VK_DRIVER_ID_MESA_RADV: VkDriverId = 3;
pub const VkDriverId_VK_DRIVER_ID_NVIDIA_PROPRIETARY: VkDriverId = 4;
pub const VkDriverId_VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS: VkDriverId = 5;
pub const VkDriverId_VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA: VkDriverId = 6;
pub const VkDriverId_VK_DRIVER_ID_IMAGINATION_PROPRIETARY: VkDriverId = 7;
pub const VkDriverId_VK_DRIVER_ID_QUALCOMM_PROPRIETARY: VkDriverId = 8;
pub const VkDriverId_VK_DRIVER_ID_ARM_PROPRIETARY: VkDriverId = 9;
pub const VkDriverId_VK_DRIVER_ID_GOOGLE_SWIFTSHADER: VkDriverId = 10;
pub const VkDriverId_VK_DRIVER_ID_GGP_PROPRIETARY: VkDriverId = 11;
pub const VkDriverId_VK_DRIVER_ID_BROADCOM_PROPRIETARY: VkDriverId = 12;
pub const VkDriverId_VK_DRIVER_ID_MESA_LLVMPIPE: VkDriverId = 13;
pub const VkDriverId_VK_DRIVER_ID_MOLTENVK: VkDriverId = 14;
pub const VkDriverId_VK_DRIVER_ID_COREAVI_PROPRIETARY: VkDriverId = 15;
pub const VkDriverId_VK_DRIVER_ID_JUICE_PROPRIETARY: VkDriverId = 16;
pub const VkDriverId_VK_DRIVER_ID_VERISILICON_PROPRIETARY: VkDriverId = 17;
pub const VkDriverId_VK_DRIVER_ID_MESA_TURNIP: VkDriverId = 18;
pub const VkDriverId_VK_DRIVER_ID_MESA_V3DV: VkDriverId = 19;
pub const VkDriverId_VK_DRIVER_ID_MESA_PANVK: VkDriverId = 20;
pub const VkDriverId_VK_DRIVER_ID_SAMSUNG_PROPRIETARY: VkDriverId = 21;
pub const VkDriverId_VK_DRIVER_ID_MESA_VENUS: VkDriverId = 22;
pub const VkDriverId_VK_DRIVER_ID_MESA_DOZEN: VkDriverId = 23;
pub const VkDriverId_VK_DRIVER_ID_MESA_NVK: VkDriverId = 24;
pub const VkDriverId_VK_DRIVER_ID_IMAGINATION_OPEN_SOURCE_MESA: VkDriverId = 25;
pub const VkDriverId_VK_DRIVER_ID_MESA_HONEYKRISP: VkDriverId = 26;
pub const VkDriverId_VK_DRIVER_ID_VULKAN_SC_EMULATION_ON_VULKAN: VkDriverId = 27;
pub const VkDriverId_VK_DRIVER_ID_AMD_PROPRIETARY_KHR: VkDriverId = 1;
pub const VkDriverId_VK_DRIVER_ID_AMD_OPEN_SOURCE_KHR: VkDriverId = 2;
pub const VkDriverId_VK_DRIVER_ID_MESA_RADV_KHR: VkDriverId = 3;
pub const VkDriverId_VK_DRIVER_ID_NVIDIA_PROPRIETARY_KHR: VkDriverId = 4;
pub const VkDriverId_VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS_KHR: VkDriverId = 5;
pub const VkDriverId_VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA_KHR: VkDriverId = 6;
pub const VkDriverId_VK_DRIVER_ID_IMAGINATION_PROPRIETARY_KHR: VkDriverId = 7;
pub const VkDriverId_VK_DRIVER_ID_QUALCOMM_PROPRIETARY_KHR: VkDriverId = 8;
pub const VkDriverId_VK_DRIVER_ID_ARM_PROPRIETARY_KHR: VkDriverId = 9;
pub const VkDriverId_VK_DRIVER_ID_GOOGLE_SWIFTSHADER_KHR: VkDriverId = 10;
pub const VkDriverId_VK_DRIVER_ID_GGP_PROPRIETARY_KHR: VkDriverId = 11;
pub const VkDriverId_VK_DRIVER_ID_BROADCOM_PROPRIETARY_KHR: VkDriverId = 12;
pub const VkDriverId_VK_DRIVER_ID_MAX_ENUM: VkDriverId = 2147483647;
pub const VkShaderFloatControlsIndependence_VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY:
    VkShaderFloatControlsIndependence = 0;
pub const VkShaderFloatControlsIndependence_VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL:
    VkShaderFloatControlsIndependence = 1;
pub const VkShaderFloatControlsIndependence_VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE:
    VkShaderFloatControlsIndependence = 2;
pub const VkShaderFloatControlsIndependence_VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY_KHR : VkShaderFloatControlsIndependence = 0 ;
pub const VkShaderFloatControlsIndependence_VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL_KHR:
    VkShaderFloatControlsIndependence = 1;
pub const VkShaderFloatControlsIndependence_VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE_KHR:
    VkShaderFloatControlsIndependence = 2;
pub const VkShaderFloatControlsIndependence_VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_MAX_ENUM:
    VkShaderFloatControlsIndependence = 2147483647;
pub const VkSamplerReductionMode_VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE:
    VkSamplerReductionMode = 0;
pub const VkSamplerReductionMode_VK_SAMPLER_REDUCTION_MODE_MIN: VkSamplerReductionMode = 1;
pub const VkSamplerReductionMode_VK_SAMPLER_REDUCTION_MODE_MAX: VkSamplerReductionMode = 2;
pub const VkSamplerReductionMode_VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_RANGECLAMP_QCOM:
    VkSamplerReductionMode = 1000521000;
pub const VkSamplerReductionMode_VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_EXT:
    VkSamplerReductionMode = 0;
pub const VkSamplerReductionMode_VK_SAMPLER_REDUCTION_MODE_MIN_EXT: VkSamplerReductionMode = 1;
pub const VkSamplerReductionMode_VK_SAMPLER_REDUCTION_MODE_MAX_EXT: VkSamplerReductionMode = 2;
pub const VkSamplerReductionMode_VK_SAMPLER_REDUCTION_MODE_MAX_ENUM: VkSamplerReductionMode =
    2147483647;
pub const VkSemaphoreType_VK_SEMAPHORE_TYPE_BINARY: VkSemaphoreType = 0;
pub const VkSemaphoreType_VK_SEMAPHORE_TYPE_TIMELINE: VkSemaphoreType = 1;
pub const VkSemaphoreType_VK_SEMAPHORE_TYPE_BINARY_KHR: VkSemaphoreType = 0;
pub const VkSemaphoreType_VK_SEMAPHORE_TYPE_TIMELINE_KHR: VkSemaphoreType = 1;
pub const VkSemaphoreType_VK_SEMAPHORE_TYPE_MAX_ENUM: VkSemaphoreType = 2147483647;
pub const VkResolveModeFlagBits_VK_RESOLVE_MODE_NONE: VkResolveModeFlagBits = 0;
pub const VkResolveModeFlagBits_VK_RESOLVE_MODE_SAMPLE_ZERO_BIT: VkResolveModeFlagBits = 1;
pub const VkResolveModeFlagBits_VK_RESOLVE_MODE_AVERAGE_BIT: VkResolveModeFlagBits = 2;
pub const VkResolveModeFlagBits_VK_RESOLVE_MODE_MIN_BIT: VkResolveModeFlagBits = 4;
pub const VkResolveModeFlagBits_VK_RESOLVE_MODE_MAX_BIT: VkResolveModeFlagBits = 8;
pub const VkResolveModeFlagBits_VK_RESOLVE_MODE_EXTERNAL_FORMAT_DOWNSAMPLE_ANDROID:
    VkResolveModeFlagBits = 16;
pub const VkResolveModeFlagBits_VK_RESOLVE_MODE_NONE_KHR: VkResolveModeFlagBits = 0;
pub const VkResolveModeFlagBits_VK_RESOLVE_MODE_SAMPLE_ZERO_BIT_KHR: VkResolveModeFlagBits = 1;
pub const VkResolveModeFlagBits_VK_RESOLVE_MODE_AVERAGE_BIT_KHR: VkResolveModeFlagBits = 2;
pub const VkResolveModeFlagBits_VK_RESOLVE_MODE_MIN_BIT_KHR: VkResolveModeFlagBits = 4;
pub const VkResolveModeFlagBits_VK_RESOLVE_MODE_MAX_BIT_KHR: VkResolveModeFlagBits = 8;
pub const VkResolveModeFlagBits_VK_RESOLVE_MODE_FLAG_BITS_MAX_ENUM: VkResolveModeFlagBits =
    2147483647;
pub const VkDescriptorBindingFlagBits_VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT:
    VkDescriptorBindingFlagBits = 1;
pub const VkDescriptorBindingFlagBits_VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT:
    VkDescriptorBindingFlagBits = 2;
pub const VkDescriptorBindingFlagBits_VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT:
    VkDescriptorBindingFlagBits = 4;
pub const VkDescriptorBindingFlagBits_VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT:
    VkDescriptorBindingFlagBits = 8;
pub const VkDescriptorBindingFlagBits_VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT:
    VkDescriptorBindingFlagBits = 1;
pub const VkDescriptorBindingFlagBits_VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT_EXT:
    VkDescriptorBindingFlagBits = 2;
pub const VkDescriptorBindingFlagBits_VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT_EXT:
    VkDescriptorBindingFlagBits = 4;
pub const VkDescriptorBindingFlagBits_VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT_EXT:
    VkDescriptorBindingFlagBits = 8;
pub const VkDescriptorBindingFlagBits_VK_DESCRIPTOR_BINDING_FLAG_BITS_MAX_ENUM:
    VkDescriptorBindingFlagBits = 2147483647;
pub const VkSemaphoreWaitFlagBits_VK_SEMAPHORE_WAIT_ANY_BIT: VkSemaphoreWaitFlagBits = 1;
pub const VkSemaphoreWaitFlagBits_VK_SEMAPHORE_WAIT_ANY_BIT_KHR: VkSemaphoreWaitFlagBits = 1;
pub const VkSemaphoreWaitFlagBits_VK_SEMAPHORE_WAIT_FLAG_BITS_MAX_ENUM: VkSemaphoreWaitFlagBits =
    2147483647;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceVulkan11Features"]
        [::core::mem::size_of::<VkPhysicalDeviceVulkan11Features>() - 56usize];
    ["Alignment of VkPhysicalDeviceVulkan11Features"]
        [::core::mem::align_of::<VkPhysicalDeviceVulkan11Features>() - 4usize];
    ["Offset of field: VkPhysicalDeviceVulkan11Features::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceVulkan11Features, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceVulkan11Features::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceVulkan11Features, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceVulkan11Features::storageBuffer16BitAccess"][::core::mem::offset_of!(
        VkPhysicalDeviceVulkan11Features,
        storageBuffer16BitAccess
    ) - 8usize];
    ["Offset of field: VkPhysicalDeviceVulkan11Features::uniformAndStorageBuffer16BitAccess"][::core::mem::offset_of!(
        VkPhysicalDeviceVulkan11Features,
        uniformAndStorageBuffer16BitAccess
    )
        - 12usize];
    ["Offset of field: VkPhysicalDeviceVulkan11Features::storagePushConstant16"][::core::mem::offset_of!(
        VkPhysicalDeviceVulkan11Features,
        storagePushConstant16
    ) - 16usize];
    ["Offset of field: VkPhysicalDeviceVulkan11Features::storageInputOutput16"]
        [::core::mem::offset_of!(VkPhysicalDeviceVulkan11Features, storageInputOutput16) - 20usize];
    ["Offset of field: VkPhysicalDeviceVulkan11Features::multiview"]
        [::core::mem::offset_of!(VkPhysicalDeviceVulkan11Features, multiview) - 24usize];
    ["Offset of field: VkPhysicalDeviceVulkan11Features::multiviewGeometryShader"][::core::mem::offset_of!(
        VkPhysicalDeviceVulkan11Features,
        multiviewGeometryShader
    ) - 28usize];
    ["Offset of field: VkPhysicalDeviceVulkan11Features::multiviewTessellationShader"][::core::mem::offset_of!(
        VkPhysicalDeviceVulkan11Features,
        multiviewTessellationShader
    ) - 32usize];
    ["Offset of field: VkPhysicalDeviceVulkan11Features::variablePointersStorageBuffer"][::core::mem::offset_of!(
        VkPhysicalDeviceVulkan11Features,
        variablePointersStorageBuffer
    )
        - 36usize];
    ["Offset of field: VkPhysicalDeviceVulkan11Features::variablePointers"]
        [::core::mem::offset_of!(VkPhysicalDeviceVulkan11Features, variablePointers) - 40usize];
    ["Offset of field: VkPhysicalDeviceVulkan11Features::protectedMemory"]
        [::core::mem::offset_of!(VkPhysicalDeviceVulkan11Features, protectedMemory) - 44usize];
    ["Offset of field: VkPhysicalDeviceVulkan11Features::samplerYcbcrConversion"][::core::mem::offset_of!(
        VkPhysicalDeviceVulkan11Features,
        samplerYcbcrConversion
    ) - 48usize];
    ["Offset of field: VkPhysicalDeviceVulkan11Features::shaderDrawParameters"]
        [::core::mem::offset_of!(VkPhysicalDeviceVulkan11Features, shaderDrawParameters) - 52usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceVulkan11Properties"]
        [::core::mem::size_of::<VkPhysicalDeviceVulkan11Properties>() - 104usize];
    ["Alignment of VkPhysicalDeviceVulkan11Properties"]
        [::core::mem::align_of::<VkPhysicalDeviceVulkan11Properties>() - 8usize];
    ["Offset of field: VkPhysicalDeviceVulkan11Properties::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceVulkan11Properties, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceVulkan11Properties::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceVulkan11Properties, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceVulkan11Properties::deviceUUID"]
        [::core::mem::offset_of!(VkPhysicalDeviceVulkan11Properties, deviceUUID) - 8usize];
    ["Offset of field: VkPhysicalDeviceVulkan11Properties::driverUUID"]
        [::core::mem::offset_of!(VkPhysicalDeviceVulkan11Properties, driverUUID) - 24usize];
    ["Offset of field: VkPhysicalDeviceVulkan11Properties::deviceLUID"]
        [::core::mem::offset_of!(VkPhysicalDeviceVulkan11Properties, deviceLUID) - 40usize];
    ["Offset of field: VkPhysicalDeviceVulkan11Properties::deviceNodeMask"]
        [::core::mem::offset_of!(VkPhysicalDeviceVulkan11Properties, deviceNodeMask) - 48usize];
    ["Offset of field: VkPhysicalDeviceVulkan11Properties::deviceLUIDValid"]
        [::core::mem::offset_of!(VkPhysicalDeviceVulkan11Properties, deviceLUIDValid) - 52usize];
    ["Offset of field: VkPhysicalDeviceVulkan11Properties::subgroupSize"]
        [::core::mem::offset_of!(VkPhysicalDeviceVulkan11Properties, subgroupSize) - 56usize];
    ["Offset of field: VkPhysicalDeviceVulkan11Properties::subgroupSupportedStages"][::core::mem::offset_of!(
        VkPhysicalDeviceVulkan11Properties,
        subgroupSupportedStages
    ) - 60usize];
    ["Offset of field: VkPhysicalDeviceVulkan11Properties::subgroupSupportedOperations"][::core::mem::offset_of!(
        VkPhysicalDeviceVulkan11Properties,
        subgroupSupportedOperations
    )
        - 64usize];
    ["Offset of field: VkPhysicalDeviceVulkan11Properties::subgroupQuadOperationsInAllStages"][::core::mem::offset_of!(
        VkPhysicalDeviceVulkan11Properties,
        subgroupQuadOperationsInAllStages
    )
        - 68usize];
    ["Offset of field: VkPhysicalDeviceVulkan11Properties::pointClippingBehavior"][::core::mem::offset_of!(
        VkPhysicalDeviceVulkan11Properties,
        pointClippingBehavior
    ) - 72usize];
    ["Offset of field: VkPhysicalDeviceVulkan11Properties::maxMultiviewViewCount"][::core::mem::offset_of!(
        VkPhysicalDeviceVulkan11Properties,
        maxMultiviewViewCount
    ) - 76usize];
    ["Offset of field: VkPhysicalDeviceVulkan11Properties::maxMultiviewInstanceIndex"][::core::mem::offset_of!(
        VkPhysicalDeviceVulkan11Properties,
        maxMultiviewInstanceIndex
    ) - 80usize];
    ["Offset of field: VkPhysicalDeviceVulkan11Properties::protectedNoFault"]
        [::core::mem::offset_of!(VkPhysicalDeviceVulkan11Properties, protectedNoFault) - 84usize];
    ["Offset of field: VkPhysicalDeviceVulkan11Properties::maxPerSetDescriptors"][::core::mem::offset_of!(
        VkPhysicalDeviceVulkan11Properties,
        maxPerSetDescriptors
    ) - 88usize];
    ["Offset of field: VkPhysicalDeviceVulkan11Properties::maxMemoryAllocationSize"][::core::mem::offset_of!(
        VkPhysicalDeviceVulkan11Properties,
        maxMemoryAllocationSize
    ) - 96usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceVulkan12Features"]
        [::core::mem::size_of::<VkPhysicalDeviceVulkan12Features>() - 196usize];
    ["Alignment of VkPhysicalDeviceVulkan12Features"]
        [::core::mem::align_of::<VkPhysicalDeviceVulkan12Features>() - 4usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Features::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceVulkan12Features, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Features::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceVulkan12Features, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Features::samplerMirrorClampToEdge"][::core::mem::offset_of!(
        VkPhysicalDeviceVulkan12Features,
        samplerMirrorClampToEdge
    ) - 8usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Features::drawIndirectCount"]
        [::core::mem::offset_of!(VkPhysicalDeviceVulkan12Features, drawIndirectCount) - 12usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Features::storageBuffer8BitAccess"][::core::mem::offset_of!(
        VkPhysicalDeviceVulkan12Features,
        storageBuffer8BitAccess
    ) - 16usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Features::uniformAndStorageBuffer8BitAccess"][::core::mem::offset_of!(
        VkPhysicalDeviceVulkan12Features,
        uniformAndStorageBuffer8BitAccess
    )
        - 20usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Features::storagePushConstant8"]
        [::core::mem::offset_of!(VkPhysicalDeviceVulkan12Features, storagePushConstant8) - 24usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Features::shaderBufferInt64Atomics"][::core::mem::offset_of!(
        VkPhysicalDeviceVulkan12Features,
        shaderBufferInt64Atomics
    ) - 28usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Features::shaderSharedInt64Atomics"][::core::mem::offset_of!(
        VkPhysicalDeviceVulkan12Features,
        shaderSharedInt64Atomics
    ) - 32usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Features::shaderFloat16"]
        [::core::mem::offset_of!(VkPhysicalDeviceVulkan12Features, shaderFloat16) - 36usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Features::shaderInt8"]
        [::core::mem::offset_of!(VkPhysicalDeviceVulkan12Features, shaderInt8) - 40usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Features::descriptorIndexing"]
        [::core::mem::offset_of!(VkPhysicalDeviceVulkan12Features, descriptorIndexing) - 44usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Features::shaderInputAttachmentArrayDynamicIndexing"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceVulkan12Features , shaderInputAttachmentArrayDynamicIndexing) - 48usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan12Features::shaderUniformTexelBufferArrayDynamicIndexing"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceVulkan12Features , shaderUniformTexelBufferArrayDynamicIndexing) - 52usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan12Features::shaderStorageTexelBufferArrayDynamicIndexing"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceVulkan12Features , shaderStorageTexelBufferArrayDynamicIndexing) - 56usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan12Features::shaderUniformBufferArrayNonUniformIndexing"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceVulkan12Features , shaderUniformBufferArrayNonUniformIndexing) - 60usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan12Features::shaderSampledImageArrayNonUniformIndexing"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceVulkan12Features , shaderSampledImageArrayNonUniformIndexing) - 64usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan12Features::shaderStorageBufferArrayNonUniformIndexing"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceVulkan12Features , shaderStorageBufferArrayNonUniformIndexing) - 68usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan12Features::shaderStorageImageArrayNonUniformIndexing"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceVulkan12Features , shaderStorageImageArrayNonUniformIndexing) - 72usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan12Features::shaderInputAttachmentArrayNonUniformIndexing"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceVulkan12Features , shaderInputAttachmentArrayNonUniformIndexing) - 76usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan12Features::shaderUniformTexelBufferArrayNonUniformIndexing"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceVulkan12Features , shaderUniformTexelBufferArrayNonUniformIndexing) - 80usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan12Features::shaderStorageTexelBufferArrayNonUniformIndexing"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceVulkan12Features , shaderStorageTexelBufferArrayNonUniformIndexing) - 84usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan12Features::descriptorBindingUniformBufferUpdateAfterBind"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceVulkan12Features , descriptorBindingUniformBufferUpdateAfterBind) - 88usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan12Features::descriptorBindingSampledImageUpdateAfterBind"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceVulkan12Features , descriptorBindingSampledImageUpdateAfterBind) - 92usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan12Features::descriptorBindingStorageImageUpdateAfterBind"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceVulkan12Features , descriptorBindingStorageImageUpdateAfterBind) - 96usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan12Features::descriptorBindingStorageBufferUpdateAfterBind"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceVulkan12Features , descriptorBindingStorageBufferUpdateAfterBind) - 100usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan12Features::descriptorBindingUniformTexelBufferUpdateAfterBind"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceVulkan12Features , descriptorBindingUniformTexelBufferUpdateAfterBind) - 104usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan12Features::descriptorBindingStorageTexelBufferUpdateAfterBind"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceVulkan12Features , descriptorBindingStorageTexelBufferUpdateAfterBind) - 108usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan12Features::descriptorBindingUpdateUnusedWhilePending"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceVulkan12Features , descriptorBindingUpdateUnusedWhilePending) - 112usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan12Features::descriptorBindingPartiallyBound"][::core::mem::offset_of!(
        VkPhysicalDeviceVulkan12Features,
        descriptorBindingPartiallyBound
    )
        - 116usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Features::descriptorBindingVariableDescriptorCount"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceVulkan12Features , descriptorBindingVariableDescriptorCount) - 120usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan12Features::runtimeDescriptorArray"][::core::mem::offset_of!(
        VkPhysicalDeviceVulkan12Features,
        runtimeDescriptorArray
    ) - 124usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Features::samplerFilterMinmax"]
        [::core::mem::offset_of!(VkPhysicalDeviceVulkan12Features, samplerFilterMinmax) - 128usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Features::scalarBlockLayout"]
        [::core::mem::offset_of!(VkPhysicalDeviceVulkan12Features, scalarBlockLayout) - 132usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Features::imagelessFramebuffer"][::core::mem::offset_of!(
        VkPhysicalDeviceVulkan12Features,
        imagelessFramebuffer
    ) - 136usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Features::uniformBufferStandardLayout"][::core::mem::offset_of!(
        VkPhysicalDeviceVulkan12Features,
        uniformBufferStandardLayout
    )
        - 140usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Features::shaderSubgroupExtendedTypes"][::core::mem::offset_of!(
        VkPhysicalDeviceVulkan12Features,
        shaderSubgroupExtendedTypes
    )
        - 144usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Features::separateDepthStencilLayouts"][::core::mem::offset_of!(
        VkPhysicalDeviceVulkan12Features,
        separateDepthStencilLayouts
    )
        - 148usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Features::hostQueryReset"]
        [::core::mem::offset_of!(VkPhysicalDeviceVulkan12Features, hostQueryReset) - 152usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Features::timelineSemaphore"]
        [::core::mem::offset_of!(VkPhysicalDeviceVulkan12Features, timelineSemaphore) - 156usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Features::bufferDeviceAddress"]
        [::core::mem::offset_of!(VkPhysicalDeviceVulkan12Features, bufferDeviceAddress) - 160usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Features::bufferDeviceAddressCaptureReplay"][::core::mem::offset_of!(
        VkPhysicalDeviceVulkan12Features,
        bufferDeviceAddressCaptureReplay
    )
        - 164usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Features::bufferDeviceAddressMultiDevice"][::core::mem::offset_of!(
        VkPhysicalDeviceVulkan12Features,
        bufferDeviceAddressMultiDevice
    )
        - 168usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Features::vulkanMemoryModel"]
        [::core::mem::offset_of!(VkPhysicalDeviceVulkan12Features, vulkanMemoryModel) - 172usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Features::vulkanMemoryModelDeviceScope"][::core::mem::offset_of!(
        VkPhysicalDeviceVulkan12Features,
        vulkanMemoryModelDeviceScope
    )
        - 176usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Features::vulkanMemoryModelAvailabilityVisibilityChains"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceVulkan12Features , vulkanMemoryModelAvailabilityVisibilityChains) - 180usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan12Features::shaderOutputViewportIndex"][::core::mem::offset_of!(
        VkPhysicalDeviceVulkan12Features,
        shaderOutputViewportIndex
    ) - 184usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Features::shaderOutputLayer"]
        [::core::mem::offset_of!(VkPhysicalDeviceVulkan12Features, shaderOutputLayer) - 188usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Features::subgroupBroadcastDynamicId"][::core::mem::offset_of!(
        VkPhysicalDeviceVulkan12Features,
        subgroupBroadcastDynamicId
    ) - 192usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkConformanceVersion"][::core::mem::size_of::<VkConformanceVersion>() - 4usize];
    ["Alignment of VkConformanceVersion"][::core::mem::align_of::<VkConformanceVersion>() - 1usize];
    ["Offset of field: VkConformanceVersion::major"]
        [::core::mem::offset_of!(VkConformanceVersion, major) - 0usize];
    ["Offset of field: VkConformanceVersion::minor"]
        [::core::mem::offset_of!(VkConformanceVersion, minor) - 1usize];
    ["Offset of field: VkConformanceVersion::subminor"]
        [::core::mem::offset_of!(VkConformanceVersion, subminor) - 2usize];
    ["Offset of field: VkConformanceVersion::patch"]
        [::core::mem::offset_of!(VkConformanceVersion, patch) - 3usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceVulkan12Properties"]
        [::core::mem::size_of::<VkPhysicalDeviceVulkan12Properties>() - 728usize];
    ["Alignment of VkPhysicalDeviceVulkan12Properties"]
        [::core::mem::align_of::<VkPhysicalDeviceVulkan12Properties>() - 8usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceVulkan12Properties, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceVulkan12Properties, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::driverID"]
        [::core::mem::offset_of!(VkPhysicalDeviceVulkan12Properties, driverID) - 8usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::driverName"]
        [::core::mem::offset_of!(VkPhysicalDeviceVulkan12Properties, driverName) - 12usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::driverInfo"]
        [::core::mem::offset_of!(VkPhysicalDeviceVulkan12Properties, driverInfo) - 268usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::conformanceVersion"][::core::mem::offset_of!(
        VkPhysicalDeviceVulkan12Properties,
        conformanceVersion
    ) - 524usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::denormBehaviorIndependence"][::core::mem::offset_of!(
        VkPhysicalDeviceVulkan12Properties,
        denormBehaviorIndependence
    )
        - 528usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::roundingModeIndependence"][::core::mem::offset_of!(
        VkPhysicalDeviceVulkan12Properties,
        roundingModeIndependence
    ) - 532usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::shaderSignedZeroInfNanPreserveFloat16"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceVulkan12Properties , shaderSignedZeroInfNanPreserveFloat16) - 536usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::shaderSignedZeroInfNanPreserveFloat32"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceVulkan12Properties , shaderSignedZeroInfNanPreserveFloat32) - 540usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::shaderSignedZeroInfNanPreserveFloat64"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceVulkan12Properties , shaderSignedZeroInfNanPreserveFloat64) - 544usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::shaderDenormPreserveFloat16"][::core::mem::offset_of!(
        VkPhysicalDeviceVulkan12Properties,
        shaderDenormPreserveFloat16
    )
        - 548usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::shaderDenormPreserveFloat32"][::core::mem::offset_of!(
        VkPhysicalDeviceVulkan12Properties,
        shaderDenormPreserveFloat32
    )
        - 552usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::shaderDenormPreserveFloat64"][::core::mem::offset_of!(
        VkPhysicalDeviceVulkan12Properties,
        shaderDenormPreserveFloat64
    )
        - 556usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::shaderDenormFlushToZeroFloat16"][::core::mem::offset_of!(
        VkPhysicalDeviceVulkan12Properties,
        shaderDenormFlushToZeroFloat16
    )
        - 560usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::shaderDenormFlushToZeroFloat32"][::core::mem::offset_of!(
        VkPhysicalDeviceVulkan12Properties,
        shaderDenormFlushToZeroFloat32
    )
        - 564usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::shaderDenormFlushToZeroFloat64"][::core::mem::offset_of!(
        VkPhysicalDeviceVulkan12Properties,
        shaderDenormFlushToZeroFloat64
    )
        - 568usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::shaderRoundingModeRTEFloat16"][::core::mem::offset_of!(
        VkPhysicalDeviceVulkan12Properties,
        shaderRoundingModeRTEFloat16
    )
        - 572usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::shaderRoundingModeRTEFloat32"][::core::mem::offset_of!(
        VkPhysicalDeviceVulkan12Properties,
        shaderRoundingModeRTEFloat32
    )
        - 576usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::shaderRoundingModeRTEFloat64"][::core::mem::offset_of!(
        VkPhysicalDeviceVulkan12Properties,
        shaderRoundingModeRTEFloat64
    )
        - 580usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::shaderRoundingModeRTZFloat16"][::core::mem::offset_of!(
        VkPhysicalDeviceVulkan12Properties,
        shaderRoundingModeRTZFloat16
    )
        - 584usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::shaderRoundingModeRTZFloat32"][::core::mem::offset_of!(
        VkPhysicalDeviceVulkan12Properties,
        shaderRoundingModeRTZFloat32
    )
        - 588usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::shaderRoundingModeRTZFloat64"][::core::mem::offset_of!(
        VkPhysicalDeviceVulkan12Properties,
        shaderRoundingModeRTZFloat64
    )
        - 592usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::maxUpdateAfterBindDescriptorsInAllPools"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceVulkan12Properties , maxUpdateAfterBindDescriptorsInAllPools) - 596usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::shaderUniformBufferArrayNonUniformIndexingNative"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceVulkan12Properties , shaderUniformBufferArrayNonUniformIndexingNative) - 600usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::shaderSampledImageArrayNonUniformIndexingNative"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceVulkan12Properties , shaderSampledImageArrayNonUniformIndexingNative) - 604usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::shaderStorageBufferArrayNonUniformIndexingNative"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceVulkan12Properties , shaderStorageBufferArrayNonUniformIndexingNative) - 608usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::shaderStorageImageArrayNonUniformIndexingNative"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceVulkan12Properties , shaderStorageImageArrayNonUniformIndexingNative) - 612usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::shaderInputAttachmentArrayNonUniformIndexingNative"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceVulkan12Properties , shaderInputAttachmentArrayNonUniformIndexingNative) - 616usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::robustBufferAccessUpdateAfterBind"][::core::mem::offset_of!(
        VkPhysicalDeviceVulkan12Properties,
        robustBufferAccessUpdateAfterBind
    )
        - 620usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::quadDivergentImplicitLod"][::core::mem::offset_of!(
        VkPhysicalDeviceVulkan12Properties,
        quadDivergentImplicitLod
    ) - 624usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::maxPerStageDescriptorUpdateAfterBindSamplers"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceVulkan12Properties , maxPerStageDescriptorUpdateAfterBindSamplers) - 628usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::maxPerStageDescriptorUpdateAfterBindUniformBuffers"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceVulkan12Properties , maxPerStageDescriptorUpdateAfterBindUniformBuffers) - 632usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::maxPerStageDescriptorUpdateAfterBindStorageBuffers"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceVulkan12Properties , maxPerStageDescriptorUpdateAfterBindStorageBuffers) - 636usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::maxPerStageDescriptorUpdateAfterBindSampledImages"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceVulkan12Properties , maxPerStageDescriptorUpdateAfterBindSampledImages) - 640usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::maxPerStageDescriptorUpdateAfterBindStorageImages"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceVulkan12Properties , maxPerStageDescriptorUpdateAfterBindStorageImages) - 644usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::maxPerStageDescriptorUpdateAfterBindInputAttachments"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceVulkan12Properties , maxPerStageDescriptorUpdateAfterBindInputAttachments) - 648usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::maxPerStageUpdateAfterBindResources"][::core::mem::offset_of!(
        VkPhysicalDeviceVulkan12Properties,
        maxPerStageUpdateAfterBindResources
    )
        - 652usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::maxDescriptorSetUpdateAfterBindSamplers"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceVulkan12Properties , maxDescriptorSetUpdateAfterBindSamplers) - 656usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::maxDescriptorSetUpdateAfterBindUniformBuffers"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceVulkan12Properties , maxDescriptorSetUpdateAfterBindUniformBuffers) - 660usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::maxDescriptorSetUpdateAfterBindUniformBuffersDynamic"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceVulkan12Properties , maxDescriptorSetUpdateAfterBindUniformBuffersDynamic) - 664usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::maxDescriptorSetUpdateAfterBindStorageBuffers"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceVulkan12Properties , maxDescriptorSetUpdateAfterBindStorageBuffers) - 668usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::maxDescriptorSetUpdateAfterBindStorageBuffersDynamic"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceVulkan12Properties , maxDescriptorSetUpdateAfterBindStorageBuffersDynamic) - 672usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::maxDescriptorSetUpdateAfterBindSampledImages"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceVulkan12Properties , maxDescriptorSetUpdateAfterBindSampledImages) - 676usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::maxDescriptorSetUpdateAfterBindStorageImages"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceVulkan12Properties , maxDescriptorSetUpdateAfterBindStorageImages) - 680usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::maxDescriptorSetUpdateAfterBindInputAttachments"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceVulkan12Properties , maxDescriptorSetUpdateAfterBindInputAttachments) - 684usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::supportedDepthResolveModes"][::core::mem::offset_of!(
        VkPhysicalDeviceVulkan12Properties,
        supportedDepthResolveModes
    )
        - 688usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::supportedStencilResolveModes"][::core::mem::offset_of!(
        VkPhysicalDeviceVulkan12Properties,
        supportedStencilResolveModes
    )
        - 692usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::independentResolveNone"][::core::mem::offset_of!(
        VkPhysicalDeviceVulkan12Properties,
        independentResolveNone
    ) - 696usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::independentResolve"][::core::mem::offset_of!(
        VkPhysicalDeviceVulkan12Properties,
        independentResolve
    ) - 700usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::filterMinmaxSingleComponentFormats"][::core::mem::offset_of!(
        VkPhysicalDeviceVulkan12Properties,
        filterMinmaxSingleComponentFormats
    )
        - 704usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::filterMinmaxImageComponentMapping"][::core::mem::offset_of!(
        VkPhysicalDeviceVulkan12Properties,
        filterMinmaxImageComponentMapping
    )
        - 708usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::maxTimelineSemaphoreValueDifference"][::core::mem::offset_of!(
        VkPhysicalDeviceVulkan12Properties,
        maxTimelineSemaphoreValueDifference
    )
        - 712usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::framebufferIntegerColorSampleCounts"][::core::mem::offset_of!(
        VkPhysicalDeviceVulkan12Properties,
        framebufferIntegerColorSampleCounts
    )
        - 720usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkImageFormatListCreateInfo"]
        [::core::mem::size_of::<VkImageFormatListCreateInfo>() - 16usize];
    ["Alignment of VkImageFormatListCreateInfo"]
        [::core::mem::align_of::<VkImageFormatListCreateInfo>() - 4usize];
    ["Offset of field: VkImageFormatListCreateInfo::sType"]
        [::core::mem::offset_of!(VkImageFormatListCreateInfo, sType) - 0usize];
    ["Offset of field: VkImageFormatListCreateInfo::pNext"]
        [::core::mem::offset_of!(VkImageFormatListCreateInfo, pNext) - 4usize];
    ["Offset of field: VkImageFormatListCreateInfo::viewFormatCount"]
        [::core::mem::offset_of!(VkImageFormatListCreateInfo, viewFormatCount) - 8usize];
    ["Offset of field: VkImageFormatListCreateInfo::pViewFormats"]
        [::core::mem::offset_of!(VkImageFormatListCreateInfo, pViewFormats) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkAttachmentDescription2"]
        [::core::mem::size_of::<VkAttachmentDescription2>() - 44usize];
    ["Alignment of VkAttachmentDescription2"]
        [::core::mem::align_of::<VkAttachmentDescription2>() - 4usize];
    ["Offset of field: VkAttachmentDescription2::sType"]
        [::core::mem::offset_of!(VkAttachmentDescription2, sType) - 0usize];
    ["Offset of field: VkAttachmentDescription2::pNext"]
        [::core::mem::offset_of!(VkAttachmentDescription2, pNext) - 4usize];
    ["Offset of field: VkAttachmentDescription2::flags"]
        [::core::mem::offset_of!(VkAttachmentDescription2, flags) - 8usize];
    ["Offset of field: VkAttachmentDescription2::format"]
        [::core::mem::offset_of!(VkAttachmentDescription2, format) - 12usize];
    ["Offset of field: VkAttachmentDescription2::samples"]
        [::core::mem::offset_of!(VkAttachmentDescription2, samples) - 16usize];
    ["Offset of field: VkAttachmentDescription2::loadOp"]
        [::core::mem::offset_of!(VkAttachmentDescription2, loadOp) - 20usize];
    ["Offset of field: VkAttachmentDescription2::storeOp"]
        [::core::mem::offset_of!(VkAttachmentDescription2, storeOp) - 24usize];
    ["Offset of field: VkAttachmentDescription2::stencilLoadOp"]
        [::core::mem::offset_of!(VkAttachmentDescription2, stencilLoadOp) - 28usize];
    ["Offset of field: VkAttachmentDescription2::stencilStoreOp"]
        [::core::mem::offset_of!(VkAttachmentDescription2, stencilStoreOp) - 32usize];
    ["Offset of field: VkAttachmentDescription2::initialLayout"]
        [::core::mem::offset_of!(VkAttachmentDescription2, initialLayout) - 36usize];
    ["Offset of field: VkAttachmentDescription2::finalLayout"]
        [::core::mem::offset_of!(VkAttachmentDescription2, finalLayout) - 40usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkAttachmentReference2"][::core::mem::size_of::<VkAttachmentReference2>() - 20usize];
    ["Alignment of VkAttachmentReference2"]
        [::core::mem::align_of::<VkAttachmentReference2>() - 4usize];
    ["Offset of field: VkAttachmentReference2::sType"]
        [::core::mem::offset_of!(VkAttachmentReference2, sType) - 0usize];
    ["Offset of field: VkAttachmentReference2::pNext"]
        [::core::mem::offset_of!(VkAttachmentReference2, pNext) - 4usize];
    ["Offset of field: VkAttachmentReference2::attachment"]
        [::core::mem::offset_of!(VkAttachmentReference2, attachment) - 8usize];
    ["Offset of field: VkAttachmentReference2::layout"]
        [::core::mem::offset_of!(VkAttachmentReference2, layout) - 12usize];
    ["Offset of field: VkAttachmentReference2::aspectMask"]
        [::core::mem::offset_of!(VkAttachmentReference2, aspectMask) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSubpassDescription2"][::core::mem::size_of::<VkSubpassDescription2>() - 52usize];
    ["Alignment of VkSubpassDescription2"]
        [::core::mem::align_of::<VkSubpassDescription2>() - 4usize];
    ["Offset of field: VkSubpassDescription2::sType"]
        [::core::mem::offset_of!(VkSubpassDescription2, sType) - 0usize];
    ["Offset of field: VkSubpassDescription2::pNext"]
        [::core::mem::offset_of!(VkSubpassDescription2, pNext) - 4usize];
    ["Offset of field: VkSubpassDescription2::flags"]
        [::core::mem::offset_of!(VkSubpassDescription2, flags) - 8usize];
    ["Offset of field: VkSubpassDescription2::pipelineBindPoint"]
        [::core::mem::offset_of!(VkSubpassDescription2, pipelineBindPoint) - 12usize];
    ["Offset of field: VkSubpassDescription2::viewMask"]
        [::core::mem::offset_of!(VkSubpassDescription2, viewMask) - 16usize];
    ["Offset of field: VkSubpassDescription2::inputAttachmentCount"]
        [::core::mem::offset_of!(VkSubpassDescription2, inputAttachmentCount) - 20usize];
    ["Offset of field: VkSubpassDescription2::pInputAttachments"]
        [::core::mem::offset_of!(VkSubpassDescription2, pInputAttachments) - 24usize];
    ["Offset of field: VkSubpassDescription2::colorAttachmentCount"]
        [::core::mem::offset_of!(VkSubpassDescription2, colorAttachmentCount) - 28usize];
    ["Offset of field: VkSubpassDescription2::pColorAttachments"]
        [::core::mem::offset_of!(VkSubpassDescription2, pColorAttachments) - 32usize];
    ["Offset of field: VkSubpassDescription2::pResolveAttachments"]
        [::core::mem::offset_of!(VkSubpassDescription2, pResolveAttachments) - 36usize];
    ["Offset of field: VkSubpassDescription2::pDepthStencilAttachment"]
        [::core::mem::offset_of!(VkSubpassDescription2, pDepthStencilAttachment) - 40usize];
    ["Offset of field: VkSubpassDescription2::preserveAttachmentCount"]
        [::core::mem::offset_of!(VkSubpassDescription2, preserveAttachmentCount) - 44usize];
    ["Offset of field: VkSubpassDescription2::pPreserveAttachments"]
        [::core::mem::offset_of!(VkSubpassDescription2, pPreserveAttachments) - 48usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSubpassDependency2"][::core::mem::size_of::<VkSubpassDependency2>() - 40usize];
    ["Alignment of VkSubpassDependency2"][::core::mem::align_of::<VkSubpassDependency2>() - 4usize];
    ["Offset of field: VkSubpassDependency2::sType"]
        [::core::mem::offset_of!(VkSubpassDependency2, sType) - 0usize];
    ["Offset of field: VkSubpassDependency2::pNext"]
        [::core::mem::offset_of!(VkSubpassDependency2, pNext) - 4usize];
    ["Offset of field: VkSubpassDependency2::srcSubpass"]
        [::core::mem::offset_of!(VkSubpassDependency2, srcSubpass) - 8usize];
    ["Offset of field: VkSubpassDependency2::dstSubpass"]
        [::core::mem::offset_of!(VkSubpassDependency2, dstSubpass) - 12usize];
    ["Offset of field: VkSubpassDependency2::srcStageMask"]
        [::core::mem::offset_of!(VkSubpassDependency2, srcStageMask) - 16usize];
    ["Offset of field: VkSubpassDependency2::dstStageMask"]
        [::core::mem::offset_of!(VkSubpassDependency2, dstStageMask) - 20usize];
    ["Offset of field: VkSubpassDependency2::srcAccessMask"]
        [::core::mem::offset_of!(VkSubpassDependency2, srcAccessMask) - 24usize];
    ["Offset of field: VkSubpassDependency2::dstAccessMask"]
        [::core::mem::offset_of!(VkSubpassDependency2, dstAccessMask) - 28usize];
    ["Offset of field: VkSubpassDependency2::dependencyFlags"]
        [::core::mem::offset_of!(VkSubpassDependency2, dependencyFlags) - 32usize];
    ["Offset of field: VkSubpassDependency2::viewOffset"]
        [::core::mem::offset_of!(VkSubpassDependency2, viewOffset) - 36usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkRenderPassCreateInfo2"]
        [::core::mem::size_of::<VkRenderPassCreateInfo2>() - 44usize];
    ["Alignment of VkRenderPassCreateInfo2"]
        [::core::mem::align_of::<VkRenderPassCreateInfo2>() - 4usize];
    ["Offset of field: VkRenderPassCreateInfo2::sType"]
        [::core::mem::offset_of!(VkRenderPassCreateInfo2, sType) - 0usize];
    ["Offset of field: VkRenderPassCreateInfo2::pNext"]
        [::core::mem::offset_of!(VkRenderPassCreateInfo2, pNext) - 4usize];
    ["Offset of field: VkRenderPassCreateInfo2::flags"]
        [::core::mem::offset_of!(VkRenderPassCreateInfo2, flags) - 8usize];
    ["Offset of field: VkRenderPassCreateInfo2::attachmentCount"]
        [::core::mem::offset_of!(VkRenderPassCreateInfo2, attachmentCount) - 12usize];
    ["Offset of field: VkRenderPassCreateInfo2::pAttachments"]
        [::core::mem::offset_of!(VkRenderPassCreateInfo2, pAttachments) - 16usize];
    ["Offset of field: VkRenderPassCreateInfo2::subpassCount"]
        [::core::mem::offset_of!(VkRenderPassCreateInfo2, subpassCount) - 20usize];
    ["Offset of field: VkRenderPassCreateInfo2::pSubpasses"]
        [::core::mem::offset_of!(VkRenderPassCreateInfo2, pSubpasses) - 24usize];
    ["Offset of field: VkRenderPassCreateInfo2::dependencyCount"]
        [::core::mem::offset_of!(VkRenderPassCreateInfo2, dependencyCount) - 28usize];
    ["Offset of field: VkRenderPassCreateInfo2::pDependencies"]
        [::core::mem::offset_of!(VkRenderPassCreateInfo2, pDependencies) - 32usize];
    ["Offset of field: VkRenderPassCreateInfo2::correlatedViewMaskCount"]
        [::core::mem::offset_of!(VkRenderPassCreateInfo2, correlatedViewMaskCount) - 36usize];
    ["Offset of field: VkRenderPassCreateInfo2::pCorrelatedViewMasks"]
        [::core::mem::offset_of!(VkRenderPassCreateInfo2, pCorrelatedViewMasks) - 40usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSubpassBeginInfo"][::core::mem::size_of::<VkSubpassBeginInfo>() - 12usize];
    ["Alignment of VkSubpassBeginInfo"][::core::mem::align_of::<VkSubpassBeginInfo>() - 4usize];
    ["Offset of field: VkSubpassBeginInfo::sType"]
        [::core::mem::offset_of!(VkSubpassBeginInfo, sType) - 0usize];
    ["Offset of field: VkSubpassBeginInfo::pNext"]
        [::core::mem::offset_of!(VkSubpassBeginInfo, pNext) - 4usize];
    ["Offset of field: VkSubpassBeginInfo::contents"]
        [::core::mem::offset_of!(VkSubpassBeginInfo, contents) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSubpassEndInfo"][::core::mem::size_of::<VkSubpassEndInfo>() - 8usize];
    ["Alignment of VkSubpassEndInfo"][::core::mem::align_of::<VkSubpassEndInfo>() - 4usize];
    ["Offset of field: VkSubpassEndInfo::sType"]
        [::core::mem::offset_of!(VkSubpassEndInfo, sType) - 0usize];
    ["Offset of field: VkSubpassEndInfo::pNext"]
        [::core::mem::offset_of!(VkSubpassEndInfo, pNext) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDevice8BitStorageFeatures"]
        [::core::mem::size_of::<VkPhysicalDevice8BitStorageFeatures>() - 20usize];
    ["Alignment of VkPhysicalDevice8BitStorageFeatures"]
        [::core::mem::align_of::<VkPhysicalDevice8BitStorageFeatures>() - 4usize];
    ["Offset of field: VkPhysicalDevice8BitStorageFeatures::sType"]
        [::core::mem::offset_of!(VkPhysicalDevice8BitStorageFeatures, sType) - 0usize];
    ["Offset of field: VkPhysicalDevice8BitStorageFeatures::pNext"]
        [::core::mem::offset_of!(VkPhysicalDevice8BitStorageFeatures, pNext) - 4usize];
    ["Offset of field: VkPhysicalDevice8BitStorageFeatures::storageBuffer8BitAccess"][::core::mem::offset_of!(
        VkPhysicalDevice8BitStorageFeatures,
        storageBuffer8BitAccess
    ) - 8usize];
    ["Offset of field: VkPhysicalDevice8BitStorageFeatures::uniformAndStorageBuffer8BitAccess"][::core::mem::offset_of!(
        VkPhysicalDevice8BitStorageFeatures,
        uniformAndStorageBuffer8BitAccess
    )
        - 12usize];
    ["Offset of field: VkPhysicalDevice8BitStorageFeatures::storagePushConstant8"][::core::mem::offset_of!(
        VkPhysicalDevice8BitStorageFeatures,
        storagePushConstant8
    ) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceDriverProperties"]
        [::core::mem::size_of::<VkPhysicalDeviceDriverProperties>() - 528usize];
    ["Alignment of VkPhysicalDeviceDriverProperties"]
        [::core::mem::align_of::<VkPhysicalDeviceDriverProperties>() - 4usize];
    ["Offset of field: VkPhysicalDeviceDriverProperties::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceDriverProperties, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceDriverProperties::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceDriverProperties, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceDriverProperties::driverID"]
        [::core::mem::offset_of!(VkPhysicalDeviceDriverProperties, driverID) - 8usize];
    ["Offset of field: VkPhysicalDeviceDriverProperties::driverName"]
        [::core::mem::offset_of!(VkPhysicalDeviceDriverProperties, driverName) - 12usize];
    ["Offset of field: VkPhysicalDeviceDriverProperties::driverInfo"]
        [::core::mem::offset_of!(VkPhysicalDeviceDriverProperties, driverInfo) - 268usize];
    ["Offset of field: VkPhysicalDeviceDriverProperties::conformanceVersion"]
        [::core::mem::offset_of!(VkPhysicalDeviceDriverProperties, conformanceVersion) - 524usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceShaderAtomicInt64Features"]
        [::core::mem::size_of::<VkPhysicalDeviceShaderAtomicInt64Features>() - 16usize];
    ["Alignment of VkPhysicalDeviceShaderAtomicInt64Features"]
        [::core::mem::align_of::<VkPhysicalDeviceShaderAtomicInt64Features>() - 4usize];
    ["Offset of field: VkPhysicalDeviceShaderAtomicInt64Features::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceShaderAtomicInt64Features, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceShaderAtomicInt64Features::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceShaderAtomicInt64Features, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceShaderAtomicInt64Features::shaderBufferInt64Atomics"][::core::mem::offset_of!(
        VkPhysicalDeviceShaderAtomicInt64Features,
        shaderBufferInt64Atomics
    )
        - 8usize];
    ["Offset of field: VkPhysicalDeviceShaderAtomicInt64Features::shaderSharedInt64Atomics"][::core::mem::offset_of!(
        VkPhysicalDeviceShaderAtomicInt64Features,
        shaderSharedInt64Atomics
    )
        - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceShaderFloat16Int8Features"]
        [::core::mem::size_of::<VkPhysicalDeviceShaderFloat16Int8Features>() - 16usize];
    ["Alignment of VkPhysicalDeviceShaderFloat16Int8Features"]
        [::core::mem::align_of::<VkPhysicalDeviceShaderFloat16Int8Features>() - 4usize];
    ["Offset of field: VkPhysicalDeviceShaderFloat16Int8Features::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceShaderFloat16Int8Features, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceShaderFloat16Int8Features::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceShaderFloat16Int8Features, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceShaderFloat16Int8Features::shaderFloat16"][::core::mem::offset_of!(
        VkPhysicalDeviceShaderFloat16Int8Features,
        shaderFloat16
    ) - 8usize];
    ["Offset of field: VkPhysicalDeviceShaderFloat16Int8Features::shaderInt8"]
        [::core::mem::offset_of!(VkPhysicalDeviceShaderFloat16Int8Features, shaderInt8) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceFloatControlsProperties"]
        [::core::mem::size_of::<VkPhysicalDeviceFloatControlsProperties>() - 76usize];
    ["Alignment of VkPhysicalDeviceFloatControlsProperties"]
        [::core::mem::align_of::<VkPhysicalDeviceFloatControlsProperties>() - 4usize];
    ["Offset of field: VkPhysicalDeviceFloatControlsProperties::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceFloatControlsProperties, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceFloatControlsProperties::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceFloatControlsProperties, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceFloatControlsProperties::denormBehaviorIndependence"][::core::mem::offset_of!(
        VkPhysicalDeviceFloatControlsProperties,
        denormBehaviorIndependence
    )
        - 8usize];
    ["Offset of field: VkPhysicalDeviceFloatControlsProperties::roundingModeIndependence"][::core::mem::offset_of!(
        VkPhysicalDeviceFloatControlsProperties,
        roundingModeIndependence
    )
        - 12usize];
    ["Offset of field: VkPhysicalDeviceFloatControlsProperties::shaderSignedZeroInfNanPreserveFloat16"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceFloatControlsProperties , shaderSignedZeroInfNanPreserveFloat16) - 16usize] ;
    ["Offset of field: VkPhysicalDeviceFloatControlsProperties::shaderSignedZeroInfNanPreserveFloat32"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceFloatControlsProperties , shaderSignedZeroInfNanPreserveFloat32) - 20usize] ;
    ["Offset of field: VkPhysicalDeviceFloatControlsProperties::shaderSignedZeroInfNanPreserveFloat64"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceFloatControlsProperties , shaderSignedZeroInfNanPreserveFloat64) - 24usize] ;
    ["Offset of field: VkPhysicalDeviceFloatControlsProperties::shaderDenormPreserveFloat16"][::core::mem::offset_of!(
        VkPhysicalDeviceFloatControlsProperties,
        shaderDenormPreserveFloat16
    )
        - 28usize];
    ["Offset of field: VkPhysicalDeviceFloatControlsProperties::shaderDenormPreserveFloat32"][::core::mem::offset_of!(
        VkPhysicalDeviceFloatControlsProperties,
        shaderDenormPreserveFloat32
    )
        - 32usize];
    ["Offset of field: VkPhysicalDeviceFloatControlsProperties::shaderDenormPreserveFloat64"][::core::mem::offset_of!(
        VkPhysicalDeviceFloatControlsProperties,
        shaderDenormPreserveFloat64
    )
        - 36usize];
    ["Offset of field: VkPhysicalDeviceFloatControlsProperties::shaderDenormFlushToZeroFloat16"][::core::mem::offset_of!(
        VkPhysicalDeviceFloatControlsProperties,
        shaderDenormFlushToZeroFloat16
    )
        - 40usize];
    ["Offset of field: VkPhysicalDeviceFloatControlsProperties::shaderDenormFlushToZeroFloat32"][::core::mem::offset_of!(
        VkPhysicalDeviceFloatControlsProperties,
        shaderDenormFlushToZeroFloat32
    )
        - 44usize];
    ["Offset of field: VkPhysicalDeviceFloatControlsProperties::shaderDenormFlushToZeroFloat64"][::core::mem::offset_of!(
        VkPhysicalDeviceFloatControlsProperties,
        shaderDenormFlushToZeroFloat64
    )
        - 48usize];
    ["Offset of field: VkPhysicalDeviceFloatControlsProperties::shaderRoundingModeRTEFloat16"][::core::mem::offset_of!(
        VkPhysicalDeviceFloatControlsProperties,
        shaderRoundingModeRTEFloat16
    )
        - 52usize];
    ["Offset of field: VkPhysicalDeviceFloatControlsProperties::shaderRoundingModeRTEFloat32"][::core::mem::offset_of!(
        VkPhysicalDeviceFloatControlsProperties,
        shaderRoundingModeRTEFloat32
    )
        - 56usize];
    ["Offset of field: VkPhysicalDeviceFloatControlsProperties::shaderRoundingModeRTEFloat64"][::core::mem::offset_of!(
        VkPhysicalDeviceFloatControlsProperties,
        shaderRoundingModeRTEFloat64
    )
        - 60usize];
    ["Offset of field: VkPhysicalDeviceFloatControlsProperties::shaderRoundingModeRTZFloat16"][::core::mem::offset_of!(
        VkPhysicalDeviceFloatControlsProperties,
        shaderRoundingModeRTZFloat16
    )
        - 64usize];
    ["Offset of field: VkPhysicalDeviceFloatControlsProperties::shaderRoundingModeRTZFloat32"][::core::mem::offset_of!(
        VkPhysicalDeviceFloatControlsProperties,
        shaderRoundingModeRTZFloat32
    )
        - 68usize];
    ["Offset of field: VkPhysicalDeviceFloatControlsProperties::shaderRoundingModeRTZFloat64"][::core::mem::offset_of!(
        VkPhysicalDeviceFloatControlsProperties,
        shaderRoundingModeRTZFloat64
    )
        - 72usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDescriptorSetLayoutBindingFlagsCreateInfo"]
        [::core::mem::size_of::<VkDescriptorSetLayoutBindingFlagsCreateInfo>() - 16usize];
    ["Alignment of VkDescriptorSetLayoutBindingFlagsCreateInfo"]
        [::core::mem::align_of::<VkDescriptorSetLayoutBindingFlagsCreateInfo>() - 4usize];
    ["Offset of field: VkDescriptorSetLayoutBindingFlagsCreateInfo::sType"]
        [::core::mem::offset_of!(VkDescriptorSetLayoutBindingFlagsCreateInfo, sType) - 0usize];
    ["Offset of field: VkDescriptorSetLayoutBindingFlagsCreateInfo::pNext"]
        [::core::mem::offset_of!(VkDescriptorSetLayoutBindingFlagsCreateInfo, pNext) - 4usize];
    ["Offset of field: VkDescriptorSetLayoutBindingFlagsCreateInfo::bindingCount"][::core::mem::offset_of!(
        VkDescriptorSetLayoutBindingFlagsCreateInfo,
        bindingCount
    ) - 8usize];
    ["Offset of field: VkDescriptorSetLayoutBindingFlagsCreateInfo::pBindingFlags"][::core::mem::offset_of!(
        VkDescriptorSetLayoutBindingFlagsCreateInfo,
        pBindingFlags
    ) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceDescriptorIndexingFeatures"]
        [::core::mem::size_of::<VkPhysicalDeviceDescriptorIndexingFeatures>() - 88usize];
    ["Alignment of VkPhysicalDeviceDescriptorIndexingFeatures"]
        [::core::mem::align_of::<VkPhysicalDeviceDescriptorIndexingFeatures>() - 4usize];
    ["Offset of field: VkPhysicalDeviceDescriptorIndexingFeatures::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceDescriptorIndexingFeatures, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceDescriptorIndexingFeatures::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceDescriptorIndexingFeatures, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceDescriptorIndexingFeatures::shaderInputAttachmentArrayDynamicIndexing"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDescriptorIndexingFeatures , shaderInputAttachmentArrayDynamicIndexing) - 8usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorIndexingFeatures::shaderUniformTexelBufferArrayDynamicIndexing"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDescriptorIndexingFeatures , shaderUniformTexelBufferArrayDynamicIndexing) - 12usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorIndexingFeatures::shaderStorageTexelBufferArrayDynamicIndexing"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDescriptorIndexingFeatures , shaderStorageTexelBufferArrayDynamicIndexing) - 16usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorIndexingFeatures::shaderUniformBufferArrayNonUniformIndexing"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDescriptorIndexingFeatures , shaderUniformBufferArrayNonUniformIndexing) - 20usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorIndexingFeatures::shaderSampledImageArrayNonUniformIndexing"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDescriptorIndexingFeatures , shaderSampledImageArrayNonUniformIndexing) - 24usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorIndexingFeatures::shaderStorageBufferArrayNonUniformIndexing"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDescriptorIndexingFeatures , shaderStorageBufferArrayNonUniformIndexing) - 28usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorIndexingFeatures::shaderStorageImageArrayNonUniformIndexing"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDescriptorIndexingFeatures , shaderStorageImageArrayNonUniformIndexing) - 32usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorIndexingFeatures::shaderInputAttachmentArrayNonUniformIndexing"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDescriptorIndexingFeatures , shaderInputAttachmentArrayNonUniformIndexing) - 36usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorIndexingFeatures::shaderUniformTexelBufferArrayNonUniformIndexing"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDescriptorIndexingFeatures , shaderUniformTexelBufferArrayNonUniformIndexing) - 40usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorIndexingFeatures::shaderStorageTexelBufferArrayNonUniformIndexing"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDescriptorIndexingFeatures , shaderStorageTexelBufferArrayNonUniformIndexing) - 44usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorIndexingFeatures::descriptorBindingUniformBufferUpdateAfterBind"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDescriptorIndexingFeatures , descriptorBindingUniformBufferUpdateAfterBind) - 48usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorIndexingFeatures::descriptorBindingSampledImageUpdateAfterBind"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDescriptorIndexingFeatures , descriptorBindingSampledImageUpdateAfterBind) - 52usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorIndexingFeatures::descriptorBindingStorageImageUpdateAfterBind"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDescriptorIndexingFeatures , descriptorBindingStorageImageUpdateAfterBind) - 56usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorIndexingFeatures::descriptorBindingStorageBufferUpdateAfterBind"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDescriptorIndexingFeatures , descriptorBindingStorageBufferUpdateAfterBind) - 60usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorIndexingFeatures::descriptorBindingUniformTexelBufferUpdateAfterBind"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDescriptorIndexingFeatures , descriptorBindingUniformTexelBufferUpdateAfterBind) - 64usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorIndexingFeatures::descriptorBindingStorageTexelBufferUpdateAfterBind"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDescriptorIndexingFeatures , descriptorBindingStorageTexelBufferUpdateAfterBind) - 68usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorIndexingFeatures::descriptorBindingUpdateUnusedWhilePending"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDescriptorIndexingFeatures , descriptorBindingUpdateUnusedWhilePending) - 72usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorIndexingFeatures::descriptorBindingPartiallyBound"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDescriptorIndexingFeatures , descriptorBindingPartiallyBound) - 76usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorIndexingFeatures::descriptorBindingVariableDescriptorCount"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDescriptorIndexingFeatures , descriptorBindingVariableDescriptorCount) - 80usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorIndexingFeatures::runtimeDescriptorArray"][::core::mem::offset_of!(
        VkPhysicalDeviceDescriptorIndexingFeatures,
        runtimeDescriptorArray
    )
        - 84usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceDescriptorIndexingProperties"]
        [::core::mem::size_of::<VkPhysicalDeviceDescriptorIndexingProperties>() - 100usize];
    ["Alignment of VkPhysicalDeviceDescriptorIndexingProperties"]
        [::core::mem::align_of::<VkPhysicalDeviceDescriptorIndexingProperties>() - 4usize];
    ["Offset of field: VkPhysicalDeviceDescriptorIndexingProperties::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceDescriptorIndexingProperties, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceDescriptorIndexingProperties::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceDescriptorIndexingProperties, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceDescriptorIndexingProperties::maxUpdateAfterBindDescriptorsInAllPools"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDescriptorIndexingProperties , maxUpdateAfterBindDescriptorsInAllPools) - 8usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorIndexingProperties::shaderUniformBufferArrayNonUniformIndexingNative"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDescriptorIndexingProperties , shaderUniformBufferArrayNonUniformIndexingNative) - 12usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorIndexingProperties::shaderSampledImageArrayNonUniformIndexingNative"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDescriptorIndexingProperties , shaderSampledImageArrayNonUniformIndexingNative) - 16usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorIndexingProperties::shaderStorageBufferArrayNonUniformIndexingNative"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDescriptorIndexingProperties , shaderStorageBufferArrayNonUniformIndexingNative) - 20usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorIndexingProperties::shaderStorageImageArrayNonUniformIndexingNative"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDescriptorIndexingProperties , shaderStorageImageArrayNonUniformIndexingNative) - 24usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorIndexingProperties::shaderInputAttachmentArrayNonUniformIndexingNative"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDescriptorIndexingProperties , shaderInputAttachmentArrayNonUniformIndexingNative) - 28usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorIndexingProperties::robustBufferAccessUpdateAfterBind"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDescriptorIndexingProperties , robustBufferAccessUpdateAfterBind) - 32usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorIndexingProperties::quadDivergentImplicitLod"][::core::mem::offset_of!(
        VkPhysicalDeviceDescriptorIndexingProperties,
        quadDivergentImplicitLod
    )
        - 36usize];
    ["Offset of field: VkPhysicalDeviceDescriptorIndexingProperties::maxPerStageDescriptorUpdateAfterBindSamplers"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDescriptorIndexingProperties , maxPerStageDescriptorUpdateAfterBindSamplers) - 40usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorIndexingProperties::maxPerStageDescriptorUpdateAfterBindUniformBuffers"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDescriptorIndexingProperties , maxPerStageDescriptorUpdateAfterBindUniformBuffers) - 44usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorIndexingProperties::maxPerStageDescriptorUpdateAfterBindStorageBuffers"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDescriptorIndexingProperties , maxPerStageDescriptorUpdateAfterBindStorageBuffers) - 48usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorIndexingProperties::maxPerStageDescriptorUpdateAfterBindSampledImages"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDescriptorIndexingProperties , maxPerStageDescriptorUpdateAfterBindSampledImages) - 52usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorIndexingProperties::maxPerStageDescriptorUpdateAfterBindStorageImages"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDescriptorIndexingProperties , maxPerStageDescriptorUpdateAfterBindStorageImages) - 56usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorIndexingProperties::maxPerStageDescriptorUpdateAfterBindInputAttachments"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDescriptorIndexingProperties , maxPerStageDescriptorUpdateAfterBindInputAttachments) - 60usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorIndexingProperties::maxPerStageUpdateAfterBindResources"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDescriptorIndexingProperties , maxPerStageUpdateAfterBindResources) - 64usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorIndexingProperties::maxDescriptorSetUpdateAfterBindSamplers"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDescriptorIndexingProperties , maxDescriptorSetUpdateAfterBindSamplers) - 68usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorIndexingProperties::maxDescriptorSetUpdateAfterBindUniformBuffers"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDescriptorIndexingProperties , maxDescriptorSetUpdateAfterBindUniformBuffers) - 72usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorIndexingProperties::maxDescriptorSetUpdateAfterBindUniformBuffersDynamic"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDescriptorIndexingProperties , maxDescriptorSetUpdateAfterBindUniformBuffersDynamic) - 76usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorIndexingProperties::maxDescriptorSetUpdateAfterBindStorageBuffers"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDescriptorIndexingProperties , maxDescriptorSetUpdateAfterBindStorageBuffers) - 80usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorIndexingProperties::maxDescriptorSetUpdateAfterBindStorageBuffersDynamic"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDescriptorIndexingProperties , maxDescriptorSetUpdateAfterBindStorageBuffersDynamic) - 84usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorIndexingProperties::maxDescriptorSetUpdateAfterBindSampledImages"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDescriptorIndexingProperties , maxDescriptorSetUpdateAfterBindSampledImages) - 88usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorIndexingProperties::maxDescriptorSetUpdateAfterBindStorageImages"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDescriptorIndexingProperties , maxDescriptorSetUpdateAfterBindStorageImages) - 92usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorIndexingProperties::maxDescriptorSetUpdateAfterBindInputAttachments"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDescriptorIndexingProperties , maxDescriptorSetUpdateAfterBindInputAttachments) - 96usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDescriptorSetVariableDescriptorCountAllocateInfo"]
        [::core::mem::size_of::<VkDescriptorSetVariableDescriptorCountAllocateInfo>() - 16usize];
    ["Alignment of VkDescriptorSetVariableDescriptorCountAllocateInfo"]
        [::core::mem::align_of::<VkDescriptorSetVariableDescriptorCountAllocateInfo>() - 4usize];
    ["Offset of field: VkDescriptorSetVariableDescriptorCountAllocateInfo::sType"][::core::mem::offset_of!(
        VkDescriptorSetVariableDescriptorCountAllocateInfo,
        sType
    ) - 0usize];
    ["Offset of field: VkDescriptorSetVariableDescriptorCountAllocateInfo::pNext"][::core::mem::offset_of!(
        VkDescriptorSetVariableDescriptorCountAllocateInfo,
        pNext
    ) - 4usize];
    ["Offset of field: VkDescriptorSetVariableDescriptorCountAllocateInfo::descriptorSetCount"][::core::mem::offset_of!(
        VkDescriptorSetVariableDescriptorCountAllocateInfo,
        descriptorSetCount
    )
        - 8usize];
    ["Offset of field: VkDescriptorSetVariableDescriptorCountAllocateInfo::pDescriptorCounts"][::core::mem::offset_of!(
        VkDescriptorSetVariableDescriptorCountAllocateInfo,
        pDescriptorCounts
    )
        - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDescriptorSetVariableDescriptorCountLayoutSupport"]
        [::core::mem::size_of::<VkDescriptorSetVariableDescriptorCountLayoutSupport>() - 12usize];
    ["Alignment of VkDescriptorSetVariableDescriptorCountLayoutSupport"]
        [::core::mem::align_of::<VkDescriptorSetVariableDescriptorCountLayoutSupport>() - 4usize];
    ["Offset of field: VkDescriptorSetVariableDescriptorCountLayoutSupport::sType"][::core::mem::offset_of!(
        VkDescriptorSetVariableDescriptorCountLayoutSupport,
        sType
    ) - 0usize];
    ["Offset of field: VkDescriptorSetVariableDescriptorCountLayoutSupport::pNext"][::core::mem::offset_of!(
        VkDescriptorSetVariableDescriptorCountLayoutSupport,
        pNext
    ) - 4usize];
    ["Offset of field: VkDescriptorSetVariableDescriptorCountLayoutSupport::maxVariableDescriptorCount"] [:: core :: mem :: offset_of ! (VkDescriptorSetVariableDescriptorCountLayoutSupport , maxVariableDescriptorCount) - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSubpassDescriptionDepthStencilResolve"]
        [::core::mem::size_of::<VkSubpassDescriptionDepthStencilResolve>() - 20usize];
    ["Alignment of VkSubpassDescriptionDepthStencilResolve"]
        [::core::mem::align_of::<VkSubpassDescriptionDepthStencilResolve>() - 4usize];
    ["Offset of field: VkSubpassDescriptionDepthStencilResolve::sType"]
        [::core::mem::offset_of!(VkSubpassDescriptionDepthStencilResolve, sType) - 0usize];
    ["Offset of field: VkSubpassDescriptionDepthStencilResolve::pNext"]
        [::core::mem::offset_of!(VkSubpassDescriptionDepthStencilResolve, pNext) - 4usize];
    ["Offset of field: VkSubpassDescriptionDepthStencilResolve::depthResolveMode"][::core::mem::offset_of!(
        VkSubpassDescriptionDepthStencilResolve,
        depthResolveMode
    ) - 8usize];
    ["Offset of field: VkSubpassDescriptionDepthStencilResolve::stencilResolveMode"][::core::mem::offset_of!(
        VkSubpassDescriptionDepthStencilResolve,
        stencilResolveMode
    ) - 12usize];
    ["Offset of field: VkSubpassDescriptionDepthStencilResolve::pDepthStencilResolveAttachment"][::core::mem::offset_of!(
        VkSubpassDescriptionDepthStencilResolve,
        pDepthStencilResolveAttachment
    )
        - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceDepthStencilResolveProperties"]
        [::core::mem::size_of::<VkPhysicalDeviceDepthStencilResolveProperties>() - 24usize];
    ["Alignment of VkPhysicalDeviceDepthStencilResolveProperties"]
        [::core::mem::align_of::<VkPhysicalDeviceDepthStencilResolveProperties>() - 4usize];
    ["Offset of field: VkPhysicalDeviceDepthStencilResolveProperties::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceDepthStencilResolveProperties, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceDepthStencilResolveProperties::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceDepthStencilResolveProperties, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceDepthStencilResolveProperties::supportedDepthResolveModes"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDepthStencilResolveProperties , supportedDepthResolveModes) - 8usize] ;
    ["Offset of field: VkPhysicalDeviceDepthStencilResolveProperties::supportedStencilResolveModes"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDepthStencilResolveProperties , supportedStencilResolveModes) - 12usize] ;
    ["Offset of field: VkPhysicalDeviceDepthStencilResolveProperties::independentResolveNone"][::core::mem::offset_of!(
        VkPhysicalDeviceDepthStencilResolveProperties,
        independentResolveNone
    )
        - 16usize];
    ["Offset of field: VkPhysicalDeviceDepthStencilResolveProperties::independentResolve"][::core::mem::offset_of!(
        VkPhysicalDeviceDepthStencilResolveProperties,
        independentResolve
    )
        - 20usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceScalarBlockLayoutFeatures"]
        [::core::mem::size_of::<VkPhysicalDeviceScalarBlockLayoutFeatures>() - 12usize];
    ["Alignment of VkPhysicalDeviceScalarBlockLayoutFeatures"]
        [::core::mem::align_of::<VkPhysicalDeviceScalarBlockLayoutFeatures>() - 4usize];
    ["Offset of field: VkPhysicalDeviceScalarBlockLayoutFeatures::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceScalarBlockLayoutFeatures, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceScalarBlockLayoutFeatures::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceScalarBlockLayoutFeatures, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceScalarBlockLayoutFeatures::scalarBlockLayout"][::core::mem::offset_of!(
        VkPhysicalDeviceScalarBlockLayoutFeatures,
        scalarBlockLayout
    ) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkImageStencilUsageCreateInfo"]
        [::core::mem::size_of::<VkImageStencilUsageCreateInfo>() - 12usize];
    ["Alignment of VkImageStencilUsageCreateInfo"]
        [::core::mem::align_of::<VkImageStencilUsageCreateInfo>() - 4usize];
    ["Offset of field: VkImageStencilUsageCreateInfo::sType"]
        [::core::mem::offset_of!(VkImageStencilUsageCreateInfo, sType) - 0usize];
    ["Offset of field: VkImageStencilUsageCreateInfo::pNext"]
        [::core::mem::offset_of!(VkImageStencilUsageCreateInfo, pNext) - 4usize];
    ["Offset of field: VkImageStencilUsageCreateInfo::stencilUsage"]
        [::core::mem::offset_of!(VkImageStencilUsageCreateInfo, stencilUsage) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSamplerReductionModeCreateInfo"]
        [::core::mem::size_of::<VkSamplerReductionModeCreateInfo>() - 12usize];
    ["Alignment of VkSamplerReductionModeCreateInfo"]
        [::core::mem::align_of::<VkSamplerReductionModeCreateInfo>() - 4usize];
    ["Offset of field: VkSamplerReductionModeCreateInfo::sType"]
        [::core::mem::offset_of!(VkSamplerReductionModeCreateInfo, sType) - 0usize];
    ["Offset of field: VkSamplerReductionModeCreateInfo::pNext"]
        [::core::mem::offset_of!(VkSamplerReductionModeCreateInfo, pNext) - 4usize];
    ["Offset of field: VkSamplerReductionModeCreateInfo::reductionMode"]
        [::core::mem::offset_of!(VkSamplerReductionModeCreateInfo, reductionMode) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceSamplerFilterMinmaxProperties"]
        [::core::mem::size_of::<VkPhysicalDeviceSamplerFilterMinmaxProperties>() - 16usize];
    ["Alignment of VkPhysicalDeviceSamplerFilterMinmaxProperties"]
        [::core::mem::align_of::<VkPhysicalDeviceSamplerFilterMinmaxProperties>() - 4usize];
    ["Offset of field: VkPhysicalDeviceSamplerFilterMinmaxProperties::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceSamplerFilterMinmaxProperties, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceSamplerFilterMinmaxProperties::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceSamplerFilterMinmaxProperties, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceSamplerFilterMinmaxProperties::filterMinmaxSingleComponentFormats"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceSamplerFilterMinmaxProperties , filterMinmaxSingleComponentFormats) - 8usize] ;
    ["Offset of field: VkPhysicalDeviceSamplerFilterMinmaxProperties::filterMinmaxImageComponentMapping"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceSamplerFilterMinmaxProperties , filterMinmaxImageComponentMapping) - 12usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceVulkanMemoryModelFeatures"]
        [::core::mem::size_of::<VkPhysicalDeviceVulkanMemoryModelFeatures>() - 20usize];
    ["Alignment of VkPhysicalDeviceVulkanMemoryModelFeatures"]
        [::core::mem::align_of::<VkPhysicalDeviceVulkanMemoryModelFeatures>() - 4usize];
    ["Offset of field: VkPhysicalDeviceVulkanMemoryModelFeatures::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceVulkanMemoryModelFeatures, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceVulkanMemoryModelFeatures::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceVulkanMemoryModelFeatures, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceVulkanMemoryModelFeatures::vulkanMemoryModel"][::core::mem::offset_of!(
        VkPhysicalDeviceVulkanMemoryModelFeatures,
        vulkanMemoryModel
    ) - 8usize];
    ["Offset of field: VkPhysicalDeviceVulkanMemoryModelFeatures::vulkanMemoryModelDeviceScope"][::core::mem::offset_of!(
        VkPhysicalDeviceVulkanMemoryModelFeatures,
        vulkanMemoryModelDeviceScope
    )
        - 12usize];
    ["Offset of field: VkPhysicalDeviceVulkanMemoryModelFeatures::vulkanMemoryModelAvailabilityVisibilityChains"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceVulkanMemoryModelFeatures , vulkanMemoryModelAvailabilityVisibilityChains) - 16usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceImagelessFramebufferFeatures"]
        [::core::mem::size_of::<VkPhysicalDeviceImagelessFramebufferFeatures>() - 12usize];
    ["Alignment of VkPhysicalDeviceImagelessFramebufferFeatures"]
        [::core::mem::align_of::<VkPhysicalDeviceImagelessFramebufferFeatures>() - 4usize];
    ["Offset of field: VkPhysicalDeviceImagelessFramebufferFeatures::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceImagelessFramebufferFeatures, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceImagelessFramebufferFeatures::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceImagelessFramebufferFeatures, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceImagelessFramebufferFeatures::imagelessFramebuffer"][::core::mem::offset_of!(
        VkPhysicalDeviceImagelessFramebufferFeatures,
        imagelessFramebuffer
    )
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkFramebufferAttachmentImageInfo"]
        [::core::mem::size_of::<VkFramebufferAttachmentImageInfo>() - 36usize];
    ["Alignment of VkFramebufferAttachmentImageInfo"]
        [::core::mem::align_of::<VkFramebufferAttachmentImageInfo>() - 4usize];
    ["Offset of field: VkFramebufferAttachmentImageInfo::sType"]
        [::core::mem::offset_of!(VkFramebufferAttachmentImageInfo, sType) - 0usize];
    ["Offset of field: VkFramebufferAttachmentImageInfo::pNext"]
        [::core::mem::offset_of!(VkFramebufferAttachmentImageInfo, pNext) - 4usize];
    ["Offset of field: VkFramebufferAttachmentImageInfo::flags"]
        [::core::mem::offset_of!(VkFramebufferAttachmentImageInfo, flags) - 8usize];
    ["Offset of field: VkFramebufferAttachmentImageInfo::usage"]
        [::core::mem::offset_of!(VkFramebufferAttachmentImageInfo, usage) - 12usize];
    ["Offset of field: VkFramebufferAttachmentImageInfo::width"]
        [::core::mem::offset_of!(VkFramebufferAttachmentImageInfo, width) - 16usize];
    ["Offset of field: VkFramebufferAttachmentImageInfo::height"]
        [::core::mem::offset_of!(VkFramebufferAttachmentImageInfo, height) - 20usize];
    ["Offset of field: VkFramebufferAttachmentImageInfo::layerCount"]
        [::core::mem::offset_of!(VkFramebufferAttachmentImageInfo, layerCount) - 24usize];
    ["Offset of field: VkFramebufferAttachmentImageInfo::viewFormatCount"]
        [::core::mem::offset_of!(VkFramebufferAttachmentImageInfo, viewFormatCount) - 28usize];
    ["Offset of field: VkFramebufferAttachmentImageInfo::pViewFormats"]
        [::core::mem::offset_of!(VkFramebufferAttachmentImageInfo, pViewFormats) - 32usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkFramebufferAttachmentsCreateInfo"]
        [::core::mem::size_of::<VkFramebufferAttachmentsCreateInfo>() - 16usize];
    ["Alignment of VkFramebufferAttachmentsCreateInfo"]
        [::core::mem::align_of::<VkFramebufferAttachmentsCreateInfo>() - 4usize];
    ["Offset of field: VkFramebufferAttachmentsCreateInfo::sType"]
        [::core::mem::offset_of!(VkFramebufferAttachmentsCreateInfo, sType) - 0usize];
    ["Offset of field: VkFramebufferAttachmentsCreateInfo::pNext"]
        [::core::mem::offset_of!(VkFramebufferAttachmentsCreateInfo, pNext) - 4usize];
    ["Offset of field: VkFramebufferAttachmentsCreateInfo::attachmentImageInfoCount"][::core::mem::offset_of!(
        VkFramebufferAttachmentsCreateInfo,
        attachmentImageInfoCount
    ) - 8usize];
    ["Offset of field: VkFramebufferAttachmentsCreateInfo::pAttachmentImageInfos"][::core::mem::offset_of!(
        VkFramebufferAttachmentsCreateInfo,
        pAttachmentImageInfos
    ) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkRenderPassAttachmentBeginInfo"]
        [::core::mem::size_of::<VkRenderPassAttachmentBeginInfo>() - 16usize];
    ["Alignment of VkRenderPassAttachmentBeginInfo"]
        [::core::mem::align_of::<VkRenderPassAttachmentBeginInfo>() - 4usize];
    ["Offset of field: VkRenderPassAttachmentBeginInfo::sType"]
        [::core::mem::offset_of!(VkRenderPassAttachmentBeginInfo, sType) - 0usize];
    ["Offset of field: VkRenderPassAttachmentBeginInfo::pNext"]
        [::core::mem::offset_of!(VkRenderPassAttachmentBeginInfo, pNext) - 4usize];
    ["Offset of field: VkRenderPassAttachmentBeginInfo::attachmentCount"]
        [::core::mem::offset_of!(VkRenderPassAttachmentBeginInfo, attachmentCount) - 8usize];
    ["Offset of field: VkRenderPassAttachmentBeginInfo::pAttachments"]
        [::core::mem::offset_of!(VkRenderPassAttachmentBeginInfo, pAttachments) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceUniformBufferStandardLayoutFeatures"]
        [::core::mem::size_of::<VkPhysicalDeviceUniformBufferStandardLayoutFeatures>() - 12usize];
    ["Alignment of VkPhysicalDeviceUniformBufferStandardLayoutFeatures"]
        [::core::mem::align_of::<VkPhysicalDeviceUniformBufferStandardLayoutFeatures>() - 4usize];
    ["Offset of field: VkPhysicalDeviceUniformBufferStandardLayoutFeatures::sType"][::core::mem::offset_of!(
        VkPhysicalDeviceUniformBufferStandardLayoutFeatures,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceUniformBufferStandardLayoutFeatures::pNext"][::core::mem::offset_of!(
        VkPhysicalDeviceUniformBufferStandardLayoutFeatures,
        pNext
    ) - 4usize];
    ["Offset of field: VkPhysicalDeviceUniformBufferStandardLayoutFeatures::uniformBufferStandardLayout"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceUniformBufferStandardLayoutFeatures , uniformBufferStandardLayout) - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures"]
        [::core::mem::size_of::<VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures>() - 12usize];
    ["Alignment of VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures"]
        [::core::mem::align_of::<VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures>() - 4usize];
    ["Offset of field: VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures::sType"][::core::mem::offset_of!(
        VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures::pNext"][::core::mem::offset_of!(
        VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures,
        pNext
    ) - 4usize];
    ["Offset of field: VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures::shaderSubgroupExtendedTypes"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures , shaderSubgroupExtendedTypes) - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures"]
        [::core::mem::size_of::<VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures>() - 12usize];
    ["Alignment of VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures"]
        [::core::mem::align_of::<VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures>() - 4usize];
    ["Offset of field: VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures::sType"][::core::mem::offset_of!(
        VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures::pNext"][::core::mem::offset_of!(
        VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures,
        pNext
    ) - 4usize];
    ["Offset of field: VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures::separateDepthStencilLayouts"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures , separateDepthStencilLayouts) - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkAttachmentReferenceStencilLayout"]
        [::core::mem::size_of::<VkAttachmentReferenceStencilLayout>() - 12usize];
    ["Alignment of VkAttachmentReferenceStencilLayout"]
        [::core::mem::align_of::<VkAttachmentReferenceStencilLayout>() - 4usize];
    ["Offset of field: VkAttachmentReferenceStencilLayout::sType"]
        [::core::mem::offset_of!(VkAttachmentReferenceStencilLayout, sType) - 0usize];
    ["Offset of field: VkAttachmentReferenceStencilLayout::pNext"]
        [::core::mem::offset_of!(VkAttachmentReferenceStencilLayout, pNext) - 4usize];
    ["Offset of field: VkAttachmentReferenceStencilLayout::stencilLayout"]
        [::core::mem::offset_of!(VkAttachmentReferenceStencilLayout, stencilLayout) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkAttachmentDescriptionStencilLayout"]
        [::core::mem::size_of::<VkAttachmentDescriptionStencilLayout>() - 16usize];
    ["Alignment of VkAttachmentDescriptionStencilLayout"]
        [::core::mem::align_of::<VkAttachmentDescriptionStencilLayout>() - 4usize];
    ["Offset of field: VkAttachmentDescriptionStencilLayout::sType"]
        [::core::mem::offset_of!(VkAttachmentDescriptionStencilLayout, sType) - 0usize];
    ["Offset of field: VkAttachmentDescriptionStencilLayout::pNext"]
        [::core::mem::offset_of!(VkAttachmentDescriptionStencilLayout, pNext) - 4usize];
    ["Offset of field: VkAttachmentDescriptionStencilLayout::stencilInitialLayout"][::core::mem::offset_of!(
        VkAttachmentDescriptionStencilLayout,
        stencilInitialLayout
    ) - 8usize];
    ["Offset of field: VkAttachmentDescriptionStencilLayout::stencilFinalLayout"][::core::mem::offset_of!(
        VkAttachmentDescriptionStencilLayout,
        stencilFinalLayout
    ) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceHostQueryResetFeatures"]
        [::core::mem::size_of::<VkPhysicalDeviceHostQueryResetFeatures>() - 12usize];
    ["Alignment of VkPhysicalDeviceHostQueryResetFeatures"]
        [::core::mem::align_of::<VkPhysicalDeviceHostQueryResetFeatures>() - 4usize];
    ["Offset of field: VkPhysicalDeviceHostQueryResetFeatures::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceHostQueryResetFeatures, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceHostQueryResetFeatures::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceHostQueryResetFeatures, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceHostQueryResetFeatures::hostQueryReset"]
        [::core::mem::offset_of!(VkPhysicalDeviceHostQueryResetFeatures, hostQueryReset) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceTimelineSemaphoreFeatures"]
        [::core::mem::size_of::<VkPhysicalDeviceTimelineSemaphoreFeatures>() - 12usize];
    ["Alignment of VkPhysicalDeviceTimelineSemaphoreFeatures"]
        [::core::mem::align_of::<VkPhysicalDeviceTimelineSemaphoreFeatures>() - 4usize];
    ["Offset of field: VkPhysicalDeviceTimelineSemaphoreFeatures::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceTimelineSemaphoreFeatures, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceTimelineSemaphoreFeatures::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceTimelineSemaphoreFeatures, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceTimelineSemaphoreFeatures::timelineSemaphore"][::core::mem::offset_of!(
        VkPhysicalDeviceTimelineSemaphoreFeatures,
        timelineSemaphore
    ) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceTimelineSemaphoreProperties"]
        [::core::mem::size_of::<VkPhysicalDeviceTimelineSemaphoreProperties>() - 16usize];
    ["Alignment of VkPhysicalDeviceTimelineSemaphoreProperties"]
        [::core::mem::align_of::<VkPhysicalDeviceTimelineSemaphoreProperties>() - 8usize];
    ["Offset of field: VkPhysicalDeviceTimelineSemaphoreProperties::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceTimelineSemaphoreProperties, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceTimelineSemaphoreProperties::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceTimelineSemaphoreProperties, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceTimelineSemaphoreProperties::maxTimelineSemaphoreValueDifference"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceTimelineSemaphoreProperties , maxTimelineSemaphoreValueDifference) - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSemaphoreTypeCreateInfo"]
        [::core::mem::size_of::<VkSemaphoreTypeCreateInfo>() - 24usize];
    ["Alignment of VkSemaphoreTypeCreateInfo"]
        [::core::mem::align_of::<VkSemaphoreTypeCreateInfo>() - 8usize];
    ["Offset of field: VkSemaphoreTypeCreateInfo::sType"]
        [::core::mem::offset_of!(VkSemaphoreTypeCreateInfo, sType) - 0usize];
    ["Offset of field: VkSemaphoreTypeCreateInfo::pNext"]
        [::core::mem::offset_of!(VkSemaphoreTypeCreateInfo, pNext) - 4usize];
    ["Offset of field: VkSemaphoreTypeCreateInfo::semaphoreType"]
        [::core::mem::offset_of!(VkSemaphoreTypeCreateInfo, semaphoreType) - 8usize];
    ["Offset of field: VkSemaphoreTypeCreateInfo::initialValue"]
        [::core::mem::offset_of!(VkSemaphoreTypeCreateInfo, initialValue) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkTimelineSemaphoreSubmitInfo"]
        [::core::mem::size_of::<VkTimelineSemaphoreSubmitInfo>() - 24usize];
    ["Alignment of VkTimelineSemaphoreSubmitInfo"]
        [::core::mem::align_of::<VkTimelineSemaphoreSubmitInfo>() - 4usize];
    ["Offset of field: VkTimelineSemaphoreSubmitInfo::sType"]
        [::core::mem::offset_of!(VkTimelineSemaphoreSubmitInfo, sType) - 0usize];
    ["Offset of field: VkTimelineSemaphoreSubmitInfo::pNext"]
        [::core::mem::offset_of!(VkTimelineSemaphoreSubmitInfo, pNext) - 4usize];
    ["Offset of field: VkTimelineSemaphoreSubmitInfo::waitSemaphoreValueCount"]
        [::core::mem::offset_of!(VkTimelineSemaphoreSubmitInfo, waitSemaphoreValueCount) - 8usize];
    ["Offset of field: VkTimelineSemaphoreSubmitInfo::pWaitSemaphoreValues"]
        [::core::mem::offset_of!(VkTimelineSemaphoreSubmitInfo, pWaitSemaphoreValues) - 12usize];
    ["Offset of field: VkTimelineSemaphoreSubmitInfo::signalSemaphoreValueCount"][::core::mem::offset_of!(
        VkTimelineSemaphoreSubmitInfo,
        signalSemaphoreValueCount
    ) - 16usize];
    ["Offset of field: VkTimelineSemaphoreSubmitInfo::pSignalSemaphoreValues"]
        [::core::mem::offset_of!(VkTimelineSemaphoreSubmitInfo, pSignalSemaphoreValues) - 20usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSemaphoreWaitInfo"][::core::mem::size_of::<VkSemaphoreWaitInfo>() - 24usize];
    ["Alignment of VkSemaphoreWaitInfo"][::core::mem::align_of::<VkSemaphoreWaitInfo>() - 4usize];
    ["Offset of field: VkSemaphoreWaitInfo::sType"]
        [::core::mem::offset_of!(VkSemaphoreWaitInfo, sType) - 0usize];
    ["Offset of field: VkSemaphoreWaitInfo::pNext"]
        [::core::mem::offset_of!(VkSemaphoreWaitInfo, pNext) - 4usize];
    ["Offset of field: VkSemaphoreWaitInfo::flags"]
        [::core::mem::offset_of!(VkSemaphoreWaitInfo, flags) - 8usize];
    ["Offset of field: VkSemaphoreWaitInfo::semaphoreCount"]
        [::core::mem::offset_of!(VkSemaphoreWaitInfo, semaphoreCount) - 12usize];
    ["Offset of field: VkSemaphoreWaitInfo::pSemaphores"]
        [::core::mem::offset_of!(VkSemaphoreWaitInfo, pSemaphores) - 16usize];
    ["Offset of field: VkSemaphoreWaitInfo::pValues"]
        [::core::mem::offset_of!(VkSemaphoreWaitInfo, pValues) - 20usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSemaphoreSignalInfo"][::core::mem::size_of::<VkSemaphoreSignalInfo>() - 24usize];
    ["Alignment of VkSemaphoreSignalInfo"]
        [::core::mem::align_of::<VkSemaphoreSignalInfo>() - 8usize];
    ["Offset of field: VkSemaphoreSignalInfo::sType"]
        [::core::mem::offset_of!(VkSemaphoreSignalInfo, sType) - 0usize];
    ["Offset of field: VkSemaphoreSignalInfo::pNext"]
        [::core::mem::offset_of!(VkSemaphoreSignalInfo, pNext) - 4usize];
    ["Offset of field: VkSemaphoreSignalInfo::semaphore"]
        [::core::mem::offset_of!(VkSemaphoreSignalInfo, semaphore) - 8usize];
    ["Offset of field: VkSemaphoreSignalInfo::value"]
        [::core::mem::offset_of!(VkSemaphoreSignalInfo, value) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceBufferDeviceAddressFeatures"]
        [::core::mem::size_of::<VkPhysicalDeviceBufferDeviceAddressFeatures>() - 20usize];
    ["Alignment of VkPhysicalDeviceBufferDeviceAddressFeatures"]
        [::core::mem::align_of::<VkPhysicalDeviceBufferDeviceAddressFeatures>() - 4usize];
    ["Offset of field: VkPhysicalDeviceBufferDeviceAddressFeatures::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceBufferDeviceAddressFeatures, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceBufferDeviceAddressFeatures::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceBufferDeviceAddressFeatures, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceBufferDeviceAddressFeatures::bufferDeviceAddress"][::core::mem::offset_of!(
        VkPhysicalDeviceBufferDeviceAddressFeatures,
        bufferDeviceAddress
    )
        - 8usize];
    ["Offset of field: VkPhysicalDeviceBufferDeviceAddressFeatures::bufferDeviceAddressCaptureReplay"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceBufferDeviceAddressFeatures , bufferDeviceAddressCaptureReplay) - 12usize] ;
    ["Offset of field: VkPhysicalDeviceBufferDeviceAddressFeatures::bufferDeviceAddressMultiDevice"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceBufferDeviceAddressFeatures , bufferDeviceAddressMultiDevice) - 16usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkBufferDeviceAddressInfo"]
        [::core::mem::size_of::<VkBufferDeviceAddressInfo>() - 16usize];
    ["Alignment of VkBufferDeviceAddressInfo"]
        [::core::mem::align_of::<VkBufferDeviceAddressInfo>() - 8usize];
    ["Offset of field: VkBufferDeviceAddressInfo::sType"]
        [::core::mem::offset_of!(VkBufferDeviceAddressInfo, sType) - 0usize];
    ["Offset of field: VkBufferDeviceAddressInfo::pNext"]
        [::core::mem::offset_of!(VkBufferDeviceAddressInfo, pNext) - 4usize];
    ["Offset of field: VkBufferDeviceAddressInfo::buffer"]
        [::core::mem::offset_of!(VkBufferDeviceAddressInfo, buffer) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkBufferOpaqueCaptureAddressCreateInfo"]
        [::core::mem::size_of::<VkBufferOpaqueCaptureAddressCreateInfo>() - 16usize];
    ["Alignment of VkBufferOpaqueCaptureAddressCreateInfo"]
        [::core::mem::align_of::<VkBufferOpaqueCaptureAddressCreateInfo>() - 8usize];
    ["Offset of field: VkBufferOpaqueCaptureAddressCreateInfo::sType"]
        [::core::mem::offset_of!(VkBufferOpaqueCaptureAddressCreateInfo, sType) - 0usize];
    ["Offset of field: VkBufferOpaqueCaptureAddressCreateInfo::pNext"]
        [::core::mem::offset_of!(VkBufferOpaqueCaptureAddressCreateInfo, pNext) - 4usize];
    ["Offset of field: VkBufferOpaqueCaptureAddressCreateInfo::opaqueCaptureAddress"][::core::mem::offset_of!(
        VkBufferOpaqueCaptureAddressCreateInfo,
        opaqueCaptureAddress
    ) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkMemoryOpaqueCaptureAddressAllocateInfo"]
        [::core::mem::size_of::<VkMemoryOpaqueCaptureAddressAllocateInfo>() - 16usize];
    ["Alignment of VkMemoryOpaqueCaptureAddressAllocateInfo"]
        [::core::mem::align_of::<VkMemoryOpaqueCaptureAddressAllocateInfo>() - 8usize];
    ["Offset of field: VkMemoryOpaqueCaptureAddressAllocateInfo::sType"]
        [::core::mem::offset_of!(VkMemoryOpaqueCaptureAddressAllocateInfo, sType) - 0usize];
    ["Offset of field: VkMemoryOpaqueCaptureAddressAllocateInfo::pNext"]
        [::core::mem::offset_of!(VkMemoryOpaqueCaptureAddressAllocateInfo, pNext) - 4usize];
    ["Offset of field: VkMemoryOpaqueCaptureAddressAllocateInfo::opaqueCaptureAddress"][::core::mem::offset_of!(
        VkMemoryOpaqueCaptureAddressAllocateInfo,
        opaqueCaptureAddress
    ) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDeviceMemoryOpaqueCaptureAddressInfo"]
        [::core::mem::size_of::<VkDeviceMemoryOpaqueCaptureAddressInfo>() - 16usize];
    ["Alignment of VkDeviceMemoryOpaqueCaptureAddressInfo"]
        [::core::mem::align_of::<VkDeviceMemoryOpaqueCaptureAddressInfo>() - 8usize];
    ["Offset of field: VkDeviceMemoryOpaqueCaptureAddressInfo::sType"]
        [::core::mem::offset_of!(VkDeviceMemoryOpaqueCaptureAddressInfo, sType) - 0usize];
    ["Offset of field: VkDeviceMemoryOpaqueCaptureAddressInfo::pNext"]
        [::core::mem::offset_of!(VkDeviceMemoryOpaqueCaptureAddressInfo, pNext) - 4usize];
    ["Offset of field: VkDeviceMemoryOpaqueCaptureAddressInfo::memory"]
        [::core::mem::offset_of!(VkDeviceMemoryOpaqueCaptureAddressInfo, memory) - 8usize];
};
pub const VkPipelineCreationFeedbackFlagBits_VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT:
    VkPipelineCreationFeedbackFlagBits = 1;
pub const VkPipelineCreationFeedbackFlagBits_VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT : VkPipelineCreationFeedbackFlagBits = 2 ;
pub const VkPipelineCreationFeedbackFlagBits_VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT : VkPipelineCreationFeedbackFlagBits = 4 ;
pub const VkPipelineCreationFeedbackFlagBits_VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT_EXT:
    VkPipelineCreationFeedbackFlagBits = 1;
pub const VkPipelineCreationFeedbackFlagBits_VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT_EXT : VkPipelineCreationFeedbackFlagBits = 2 ;
pub const VkPipelineCreationFeedbackFlagBits_VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT_EXT : VkPipelineCreationFeedbackFlagBits = 4 ;
pub const VkPipelineCreationFeedbackFlagBits_VK_PIPELINE_CREATION_FEEDBACK_FLAG_BITS_MAX_ENUM:
    VkPipelineCreationFeedbackFlagBits = 2147483647;
pub const VkToolPurposeFlagBits_VK_TOOL_PURPOSE_VALIDATION_BIT: VkToolPurposeFlagBits = 1;
pub const VkToolPurposeFlagBits_VK_TOOL_PURPOSE_PROFILING_BIT: VkToolPurposeFlagBits = 2;
pub const VkToolPurposeFlagBits_VK_TOOL_PURPOSE_TRACING_BIT: VkToolPurposeFlagBits = 4;
pub const VkToolPurposeFlagBits_VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT: VkToolPurposeFlagBits = 8;
pub const VkToolPurposeFlagBits_VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT: VkToolPurposeFlagBits = 16;
pub const VkToolPurposeFlagBits_VK_TOOL_PURPOSE_DEBUG_REPORTING_BIT_EXT: VkToolPurposeFlagBits = 32;
pub const VkToolPurposeFlagBits_VK_TOOL_PURPOSE_DEBUG_MARKERS_BIT_EXT: VkToolPurposeFlagBits = 64;
pub const VkToolPurposeFlagBits_VK_TOOL_PURPOSE_VALIDATION_BIT_EXT: VkToolPurposeFlagBits = 1;
pub const VkToolPurposeFlagBits_VK_TOOL_PURPOSE_PROFILING_BIT_EXT: VkToolPurposeFlagBits = 2;
pub const VkToolPurposeFlagBits_VK_TOOL_PURPOSE_TRACING_BIT_EXT: VkToolPurposeFlagBits = 4;
pub const VkToolPurposeFlagBits_VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT_EXT: VkToolPurposeFlagBits =
    8;
pub const VkToolPurposeFlagBits_VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT_EXT: VkToolPurposeFlagBits =
    16;
pub const VkToolPurposeFlagBits_VK_TOOL_PURPOSE_FLAG_BITS_MAX_ENUM: VkToolPurposeFlagBits =
    2147483647;
pub const VK_PIPELINE_STAGE_2_NONE: VkPipelineStageFlagBits2 = 0;
pub const VK_PIPELINE_STAGE_2_TOP_OF_PIPE_BIT: VkPipelineStageFlagBits2 = 1;
pub const VK_PIPELINE_STAGE_2_DRAW_INDIRECT_BIT: VkPipelineStageFlagBits2 = 2;
pub const VK_PIPELINE_STAGE_2_VERTEX_INPUT_BIT: VkPipelineStageFlagBits2 = 4;
pub const VK_PIPELINE_STAGE_2_VERTEX_SHADER_BIT: VkPipelineStageFlagBits2 = 8;
pub const VK_PIPELINE_STAGE_2_TESSELLATION_CONTROL_SHADER_BIT: VkPipelineStageFlagBits2 = 16;
pub const VK_PIPELINE_STAGE_2_TESSELLATION_EVALUATION_SHADER_BIT: VkPipelineStageFlagBits2 = 32;
pub const VK_PIPELINE_STAGE_2_GEOMETRY_SHADER_BIT: VkPipelineStageFlagBits2 = 64;
pub const VK_PIPELINE_STAGE_2_FRAGMENT_SHADER_BIT: VkPipelineStageFlagBits2 = 128;
pub const VK_PIPELINE_STAGE_2_EARLY_FRAGMENT_TESTS_BIT: VkPipelineStageFlagBits2 = 256;
pub const VK_PIPELINE_STAGE_2_LATE_FRAGMENT_TESTS_BIT: VkPipelineStageFlagBits2 = 512;
pub const VK_PIPELINE_STAGE_2_COLOR_ATTACHMENT_OUTPUT_BIT: VkPipelineStageFlagBits2 = 1024;
pub const VK_PIPELINE_STAGE_2_COMPUTE_SHADER_BIT: VkPipelineStageFlagBits2 = 2048;
pub const VK_PIPELINE_STAGE_2_ALL_TRANSFER_BIT: VkPipelineStageFlagBits2 = 4096;
pub const VK_PIPELINE_STAGE_2_TRANSFER_BIT: VkPipelineStageFlagBits2 = 4096;
pub const VK_PIPELINE_STAGE_2_BOTTOM_OF_PIPE_BIT: VkPipelineStageFlagBits2 = 8192;
pub const VK_PIPELINE_STAGE_2_HOST_BIT: VkPipelineStageFlagBits2 = 16384;
pub const VK_PIPELINE_STAGE_2_ALL_GRAPHICS_BIT: VkPipelineStageFlagBits2 = 32768;
pub const VK_PIPELINE_STAGE_2_ALL_COMMANDS_BIT: VkPipelineStageFlagBits2 = 65536;
pub const VK_PIPELINE_STAGE_2_COPY_BIT: VkPipelineStageFlagBits2 = 4294967296;
pub const VK_PIPELINE_STAGE_2_RESOLVE_BIT: VkPipelineStageFlagBits2 = 8589934592;
pub const VK_PIPELINE_STAGE_2_BLIT_BIT: VkPipelineStageFlagBits2 = 17179869184;
pub const VK_PIPELINE_STAGE_2_CLEAR_BIT: VkPipelineStageFlagBits2 = 34359738368;
pub const VK_PIPELINE_STAGE_2_INDEX_INPUT_BIT: VkPipelineStageFlagBits2 = 68719476736;
pub const VK_PIPELINE_STAGE_2_VERTEX_ATTRIBUTE_INPUT_BIT: VkPipelineStageFlagBits2 = 137438953472;
pub const VK_PIPELINE_STAGE_2_PRE_RASTERIZATION_SHADERS_BIT: VkPipelineStageFlagBits2 =
    274877906944;
pub const VK_PIPELINE_STAGE_2_VIDEO_DECODE_BIT_KHR: VkPipelineStageFlagBits2 = 67108864;
pub const VK_PIPELINE_STAGE_2_VIDEO_ENCODE_BIT_KHR: VkPipelineStageFlagBits2 = 134217728;
pub const VK_PIPELINE_STAGE_2_NONE_KHR: VkPipelineStageFlagBits2 = 0;
pub const VK_PIPELINE_STAGE_2_TOP_OF_PIPE_BIT_KHR: VkPipelineStageFlagBits2 = 1;
pub const VK_PIPELINE_STAGE_2_DRAW_INDIRECT_BIT_KHR: VkPipelineStageFlagBits2 = 2;
pub const VK_PIPELINE_STAGE_2_VERTEX_INPUT_BIT_KHR: VkPipelineStageFlagBits2 = 4;
pub const VK_PIPELINE_STAGE_2_VERTEX_SHADER_BIT_KHR: VkPipelineStageFlagBits2 = 8;
pub const VK_PIPELINE_STAGE_2_TESSELLATION_CONTROL_SHADER_BIT_KHR: VkPipelineStageFlagBits2 = 16;
pub const VK_PIPELINE_STAGE_2_TESSELLATION_EVALUATION_SHADER_BIT_KHR: VkPipelineStageFlagBits2 = 32;
pub const VK_PIPELINE_STAGE_2_GEOMETRY_SHADER_BIT_KHR: VkPipelineStageFlagBits2 = 64;
pub const VK_PIPELINE_STAGE_2_FRAGMENT_SHADER_BIT_KHR: VkPipelineStageFlagBits2 = 128;
pub const VK_PIPELINE_STAGE_2_EARLY_FRAGMENT_TESTS_BIT_KHR: VkPipelineStageFlagBits2 = 256;
pub const VK_PIPELINE_STAGE_2_LATE_FRAGMENT_TESTS_BIT_KHR: VkPipelineStageFlagBits2 = 512;
pub const VK_PIPELINE_STAGE_2_COLOR_ATTACHMENT_OUTPUT_BIT_KHR: VkPipelineStageFlagBits2 = 1024;
pub const VK_PIPELINE_STAGE_2_COMPUTE_SHADER_BIT_KHR: VkPipelineStageFlagBits2 = 2048;
pub const VK_PIPELINE_STAGE_2_ALL_TRANSFER_BIT_KHR: VkPipelineStageFlagBits2 = 4096;
pub const VK_PIPELINE_STAGE_2_TRANSFER_BIT_KHR: VkPipelineStageFlagBits2 = 4096;
pub const VK_PIPELINE_STAGE_2_BOTTOM_OF_PIPE_BIT_KHR: VkPipelineStageFlagBits2 = 8192;
pub const VK_PIPELINE_STAGE_2_HOST_BIT_KHR: VkPipelineStageFlagBits2 = 16384;
pub const VK_PIPELINE_STAGE_2_ALL_GRAPHICS_BIT_KHR: VkPipelineStageFlagBits2 = 32768;
pub const VK_PIPELINE_STAGE_2_ALL_COMMANDS_BIT_KHR: VkPipelineStageFlagBits2 = 65536;
pub const VK_PIPELINE_STAGE_2_COPY_BIT_KHR: VkPipelineStageFlagBits2 = 4294967296;
pub const VK_PIPELINE_STAGE_2_RESOLVE_BIT_KHR: VkPipelineStageFlagBits2 = 8589934592;
pub const VK_PIPELINE_STAGE_2_BLIT_BIT_KHR: VkPipelineStageFlagBits2 = 17179869184;
pub const VK_PIPELINE_STAGE_2_CLEAR_BIT_KHR: VkPipelineStageFlagBits2 = 34359738368;
pub const VK_PIPELINE_STAGE_2_INDEX_INPUT_BIT_KHR: VkPipelineStageFlagBits2 = 68719476736;
pub const VK_PIPELINE_STAGE_2_VERTEX_ATTRIBUTE_INPUT_BIT_KHR: VkPipelineStageFlagBits2 =
    137438953472;
pub const VK_PIPELINE_STAGE_2_PRE_RASTERIZATION_SHADERS_BIT_KHR: VkPipelineStageFlagBits2 =
    274877906944;
pub const VK_PIPELINE_STAGE_2_TRANSFORM_FEEDBACK_BIT_EXT: VkPipelineStageFlagBits2 = 16777216;
pub const VK_PIPELINE_STAGE_2_CONDITIONAL_RENDERING_BIT_EXT: VkPipelineStageFlagBits2 = 262144;
pub const VK_PIPELINE_STAGE_2_COMMAND_PREPROCESS_BIT_NV: VkPipelineStageFlagBits2 = 131072;
pub const VK_PIPELINE_STAGE_2_COMMAND_PREPROCESS_BIT_EXT: VkPipelineStageFlagBits2 = 131072;
pub const VK_PIPELINE_STAGE_2_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR: VkPipelineStageFlagBits2 =
    4194304;
pub const VK_PIPELINE_STAGE_2_SHADING_RATE_IMAGE_BIT_NV: VkPipelineStageFlagBits2 = 4194304;
pub const VK_PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_BUILD_BIT_KHR: VkPipelineStageFlagBits2 =
    33554432;
pub const VK_PIPELINE_STAGE_2_RAY_TRACING_SHADER_BIT_KHR: VkPipelineStageFlagBits2 = 2097152;
pub const VK_PIPELINE_STAGE_2_RAY_TRACING_SHADER_BIT_NV: VkPipelineStageFlagBits2 = 2097152;
pub const VK_PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_BUILD_BIT_NV: VkPipelineStageFlagBits2 =
    33554432;
pub const VK_PIPELINE_STAGE_2_FRAGMENT_DENSITY_PROCESS_BIT_EXT: VkPipelineStageFlagBits2 = 8388608;
pub const VK_PIPELINE_STAGE_2_TASK_SHADER_BIT_NV: VkPipelineStageFlagBits2 = 524288;
pub const VK_PIPELINE_STAGE_2_MESH_SHADER_BIT_NV: VkPipelineStageFlagBits2 = 1048576;
pub const VK_PIPELINE_STAGE_2_TASK_SHADER_BIT_EXT: VkPipelineStageFlagBits2 = 524288;
pub const VK_PIPELINE_STAGE_2_MESH_SHADER_BIT_EXT: VkPipelineStageFlagBits2 = 1048576;
pub const VK_PIPELINE_STAGE_2_SUBPASS_SHADER_BIT_HUAWEI: VkPipelineStageFlagBits2 = 549755813888;
#[doc = " VK_PIPELINE_STAGE_2_SUBPASS_SHADING_BIT_HUAWEI is a deprecated alias"]
pub const VK_PIPELINE_STAGE_2_SUBPASS_SHADING_BIT_HUAWEI: VkPipelineStageFlagBits2 = 549755813888;
pub const VK_PIPELINE_STAGE_2_INVOCATION_MASK_BIT_HUAWEI: VkPipelineStageFlagBits2 = 1099511627776;
pub const VK_PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_COPY_BIT_KHR: VkPipelineStageFlagBits2 =
    268435456;
pub const VK_PIPELINE_STAGE_2_MICROMAP_BUILD_BIT_EXT: VkPipelineStageFlagBits2 = 1073741824;
pub const VK_PIPELINE_STAGE_2_CLUSTER_CULLING_SHADER_BIT_HUAWEI: VkPipelineStageFlagBits2 =
    2199023255552;
pub const VK_PIPELINE_STAGE_2_OPTICAL_FLOW_BIT_NV: VkPipelineStageFlagBits2 = 536870912;
pub const VK_PIPELINE_STAGE_2_CONVERT_COOPERATIVE_VECTOR_MATRIX_BIT_NV: VkPipelineStageFlagBits2 =
    17592186044416;
pub const VK_ACCESS_2_NONE: VkAccessFlagBits2 = 0;
pub const VK_ACCESS_2_INDIRECT_COMMAND_READ_BIT: VkAccessFlagBits2 = 1;
pub const VK_ACCESS_2_INDEX_READ_BIT: VkAccessFlagBits2 = 2;
pub const VK_ACCESS_2_VERTEX_ATTRIBUTE_READ_BIT: VkAccessFlagBits2 = 4;
pub const VK_ACCESS_2_UNIFORM_READ_BIT: VkAccessFlagBits2 = 8;
pub const VK_ACCESS_2_INPUT_ATTACHMENT_READ_BIT: VkAccessFlagBits2 = 16;
pub const VK_ACCESS_2_SHADER_READ_BIT: VkAccessFlagBits2 = 32;
pub const VK_ACCESS_2_SHADER_WRITE_BIT: VkAccessFlagBits2 = 64;
pub const VK_ACCESS_2_COLOR_ATTACHMENT_READ_BIT: VkAccessFlagBits2 = 128;
pub const VK_ACCESS_2_COLOR_ATTACHMENT_WRITE_BIT: VkAccessFlagBits2 = 256;
pub const VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_READ_BIT: VkAccessFlagBits2 = 512;
pub const VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT: VkAccessFlagBits2 = 1024;
pub const VK_ACCESS_2_TRANSFER_READ_BIT: VkAccessFlagBits2 = 2048;
pub const VK_ACCESS_2_TRANSFER_WRITE_BIT: VkAccessFlagBits2 = 4096;
pub const VK_ACCESS_2_HOST_READ_BIT: VkAccessFlagBits2 = 8192;
pub const VK_ACCESS_2_HOST_WRITE_BIT: VkAccessFlagBits2 = 16384;
pub const VK_ACCESS_2_MEMORY_READ_BIT: VkAccessFlagBits2 = 32768;
pub const VK_ACCESS_2_MEMORY_WRITE_BIT: VkAccessFlagBits2 = 65536;
pub const VK_ACCESS_2_SHADER_SAMPLED_READ_BIT: VkAccessFlagBits2 = 4294967296;
pub const VK_ACCESS_2_SHADER_STORAGE_READ_BIT: VkAccessFlagBits2 = 8589934592;
pub const VK_ACCESS_2_SHADER_STORAGE_WRITE_BIT: VkAccessFlagBits2 = 17179869184;
pub const VK_ACCESS_2_VIDEO_DECODE_READ_BIT_KHR: VkAccessFlagBits2 = 34359738368;
pub const VK_ACCESS_2_VIDEO_DECODE_WRITE_BIT_KHR: VkAccessFlagBits2 = 68719476736;
pub const VK_ACCESS_2_VIDEO_ENCODE_READ_BIT_KHR: VkAccessFlagBits2 = 137438953472;
pub const VK_ACCESS_2_VIDEO_ENCODE_WRITE_BIT_KHR: VkAccessFlagBits2 = 274877906944;
pub const VK_ACCESS_2_SHADER_TILE_ATTACHMENT_READ_BIT_QCOM: VkAccessFlagBits2 = 2251799813685248;
pub const VK_ACCESS_2_SHADER_TILE_ATTACHMENT_WRITE_BIT_QCOM: VkAccessFlagBits2 = 4503599627370496;
pub const VK_ACCESS_2_NONE_KHR: VkAccessFlagBits2 = 0;
pub const VK_ACCESS_2_INDIRECT_COMMAND_READ_BIT_KHR: VkAccessFlagBits2 = 1;
pub const VK_ACCESS_2_INDEX_READ_BIT_KHR: VkAccessFlagBits2 = 2;
pub const VK_ACCESS_2_VERTEX_ATTRIBUTE_READ_BIT_KHR: VkAccessFlagBits2 = 4;
pub const VK_ACCESS_2_UNIFORM_READ_BIT_KHR: VkAccessFlagBits2 = 8;
pub const VK_ACCESS_2_INPUT_ATTACHMENT_READ_BIT_KHR: VkAccessFlagBits2 = 16;
pub const VK_ACCESS_2_SHADER_READ_BIT_KHR: VkAccessFlagBits2 = 32;
pub const VK_ACCESS_2_SHADER_WRITE_BIT_KHR: VkAccessFlagBits2 = 64;
pub const VK_ACCESS_2_COLOR_ATTACHMENT_READ_BIT_KHR: VkAccessFlagBits2 = 128;
pub const VK_ACCESS_2_COLOR_ATTACHMENT_WRITE_BIT_KHR: VkAccessFlagBits2 = 256;
pub const VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_READ_BIT_KHR: VkAccessFlagBits2 = 512;
pub const VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT_KHR: VkAccessFlagBits2 = 1024;
pub const VK_ACCESS_2_TRANSFER_READ_BIT_KHR: VkAccessFlagBits2 = 2048;
pub const VK_ACCESS_2_TRANSFER_WRITE_BIT_KHR: VkAccessFlagBits2 = 4096;
pub const VK_ACCESS_2_HOST_READ_BIT_KHR: VkAccessFlagBits2 = 8192;
pub const VK_ACCESS_2_HOST_WRITE_BIT_KHR: VkAccessFlagBits2 = 16384;
pub const VK_ACCESS_2_MEMORY_READ_BIT_KHR: VkAccessFlagBits2 = 32768;
pub const VK_ACCESS_2_MEMORY_WRITE_BIT_KHR: VkAccessFlagBits2 = 65536;
pub const VK_ACCESS_2_SHADER_SAMPLED_READ_BIT_KHR: VkAccessFlagBits2 = 4294967296;
pub const VK_ACCESS_2_SHADER_STORAGE_READ_BIT_KHR: VkAccessFlagBits2 = 8589934592;
pub const VK_ACCESS_2_SHADER_STORAGE_WRITE_BIT_KHR: VkAccessFlagBits2 = 17179869184;
pub const VK_ACCESS_2_TRANSFORM_FEEDBACK_WRITE_BIT_EXT: VkAccessFlagBits2 = 33554432;
pub const VK_ACCESS_2_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT: VkAccessFlagBits2 = 67108864;
pub const VK_ACCESS_2_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT: VkAccessFlagBits2 = 134217728;
pub const VK_ACCESS_2_CONDITIONAL_RENDERING_READ_BIT_EXT: VkAccessFlagBits2 = 1048576;
pub const VK_ACCESS_2_COMMAND_PREPROCESS_READ_BIT_NV: VkAccessFlagBits2 = 131072;
pub const VK_ACCESS_2_COMMAND_PREPROCESS_WRITE_BIT_NV: VkAccessFlagBits2 = 262144;
pub const VK_ACCESS_2_COMMAND_PREPROCESS_READ_BIT_EXT: VkAccessFlagBits2 = 131072;
pub const VK_ACCESS_2_COMMAND_PREPROCESS_WRITE_BIT_EXT: VkAccessFlagBits2 = 262144;
pub const VK_ACCESS_2_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR: VkAccessFlagBits2 = 8388608;
pub const VK_ACCESS_2_SHADING_RATE_IMAGE_READ_BIT_NV: VkAccessFlagBits2 = 8388608;
pub const VK_ACCESS_2_ACCELERATION_STRUCTURE_READ_BIT_KHR: VkAccessFlagBits2 = 2097152;
pub const VK_ACCESS_2_ACCELERATION_STRUCTURE_WRITE_BIT_KHR: VkAccessFlagBits2 = 4194304;
pub const VK_ACCESS_2_ACCELERATION_STRUCTURE_READ_BIT_NV: VkAccessFlagBits2 = 2097152;
pub const VK_ACCESS_2_ACCELERATION_STRUCTURE_WRITE_BIT_NV: VkAccessFlagBits2 = 4194304;
pub const VK_ACCESS_2_FRAGMENT_DENSITY_MAP_READ_BIT_EXT: VkAccessFlagBits2 = 16777216;
pub const VK_ACCESS_2_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT: VkAccessFlagBits2 = 524288;
pub const VK_ACCESS_2_DESCRIPTOR_BUFFER_READ_BIT_EXT: VkAccessFlagBits2 = 2199023255552;
pub const VK_ACCESS_2_INVOCATION_MASK_READ_BIT_HUAWEI: VkAccessFlagBits2 = 549755813888;
pub const VK_ACCESS_2_SHADER_BINDING_TABLE_READ_BIT_KHR: VkAccessFlagBits2 = 1099511627776;
pub const VK_ACCESS_2_MICROMAP_READ_BIT_EXT: VkAccessFlagBits2 = 17592186044416;
pub const VK_ACCESS_2_MICROMAP_WRITE_BIT_EXT: VkAccessFlagBits2 = 35184372088832;
pub const VK_ACCESS_2_OPTICAL_FLOW_READ_BIT_NV: VkAccessFlagBits2 = 4398046511104;
pub const VK_ACCESS_2_OPTICAL_FLOW_WRITE_BIT_NV: VkAccessFlagBits2 = 8796093022208;
pub const VkSubmitFlagBits_VK_SUBMIT_PROTECTED_BIT: VkSubmitFlagBits = 1;
pub const VkSubmitFlagBits_VK_SUBMIT_PROTECTED_BIT_KHR: VkSubmitFlagBits = 1;
pub const VkSubmitFlagBits_VK_SUBMIT_FLAG_BITS_MAX_ENUM: VkSubmitFlagBits = 2147483647;
pub const VkRenderingFlagBits_VK_RENDERING_CONTENTS_SECONDARY_COMMAND_BUFFERS_BIT:
    VkRenderingFlagBits = 1;
pub const VkRenderingFlagBits_VK_RENDERING_SUSPENDING_BIT: VkRenderingFlagBits = 2;
pub const VkRenderingFlagBits_VK_RENDERING_RESUMING_BIT: VkRenderingFlagBits = 4;
pub const VkRenderingFlagBits_VK_RENDERING_ENABLE_LEGACY_DITHERING_BIT_EXT: VkRenderingFlagBits = 8;
pub const VkRenderingFlagBits_VK_RENDERING_CONTENTS_INLINE_BIT_KHR: VkRenderingFlagBits = 16;
pub const VkRenderingFlagBits_VK_RENDERING_CONTENTS_SECONDARY_COMMAND_BUFFERS_BIT_KHR:
    VkRenderingFlagBits = 1;
pub const VkRenderingFlagBits_VK_RENDERING_SUSPENDING_BIT_KHR: VkRenderingFlagBits = 2;
pub const VkRenderingFlagBits_VK_RENDERING_RESUMING_BIT_KHR: VkRenderingFlagBits = 4;
pub const VkRenderingFlagBits_VK_RENDERING_CONTENTS_INLINE_BIT_EXT: VkRenderingFlagBits = 16;
pub const VkRenderingFlagBits_VK_RENDERING_FLAG_BITS_MAX_ENUM: VkRenderingFlagBits = 2147483647;
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT: VkFormatFeatureFlagBits2 = 1;
pub const VK_FORMAT_FEATURE_2_STORAGE_IMAGE_BIT: VkFormatFeatureFlagBits2 = 2;
pub const VK_FORMAT_FEATURE_2_STORAGE_IMAGE_ATOMIC_BIT: VkFormatFeatureFlagBits2 = 4;
pub const VK_FORMAT_FEATURE_2_UNIFORM_TEXEL_BUFFER_BIT: VkFormatFeatureFlagBits2 = 8;
pub const VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_BIT: VkFormatFeatureFlagBits2 = 16;
pub const VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_ATOMIC_BIT: VkFormatFeatureFlagBits2 = 32;
pub const VK_FORMAT_FEATURE_2_VERTEX_BUFFER_BIT: VkFormatFeatureFlagBits2 = 64;
pub const VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BIT: VkFormatFeatureFlagBits2 = 128;
pub const VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BLEND_BIT: VkFormatFeatureFlagBits2 = 256;
pub const VK_FORMAT_FEATURE_2_DEPTH_STENCIL_ATTACHMENT_BIT: VkFormatFeatureFlagBits2 = 512;
pub const VK_FORMAT_FEATURE_2_BLIT_SRC_BIT: VkFormatFeatureFlagBits2 = 1024;
pub const VK_FORMAT_FEATURE_2_BLIT_DST_BIT: VkFormatFeatureFlagBits2 = 2048;
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT: VkFormatFeatureFlagBits2 = 4096;
pub const VK_FORMAT_FEATURE_2_TRANSFER_SRC_BIT: VkFormatFeatureFlagBits2 = 16384;
pub const VK_FORMAT_FEATURE_2_TRANSFER_DST_BIT: VkFormatFeatureFlagBits2 = 32768;
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT: VkFormatFeatureFlagBits2 = 65536;
pub const VK_FORMAT_FEATURE_2_MIDPOINT_CHROMA_SAMPLES_BIT: VkFormatFeatureFlagBits2 = 131072;
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT:
    VkFormatFeatureFlagBits2 = 262144;
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT:
    VkFormatFeatureFlagBits2 = 524288;
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT:
    VkFormatFeatureFlagBits2 = 1048576;
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT : VkFormatFeatureFlagBits2 = 2097152 ;
pub const VK_FORMAT_FEATURE_2_DISJOINT_BIT: VkFormatFeatureFlagBits2 = 4194304;
pub const VK_FORMAT_FEATURE_2_COSITED_CHROMA_SAMPLES_BIT: VkFormatFeatureFlagBits2 = 8388608;
pub const VK_FORMAT_FEATURE_2_STORAGE_READ_WITHOUT_FORMAT_BIT: VkFormatFeatureFlagBits2 =
    2147483648;
pub const VK_FORMAT_FEATURE_2_STORAGE_WRITE_WITHOUT_FORMAT_BIT: VkFormatFeatureFlagBits2 =
    4294967296;
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_DEPTH_COMPARISON_BIT: VkFormatFeatureFlagBits2 =
    8589934592;
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_CUBIC_BIT: VkFormatFeatureFlagBits2 = 8192;
pub const VK_FORMAT_FEATURE_2_HOST_IMAGE_TRANSFER_BIT: VkFormatFeatureFlagBits2 = 70368744177664;
pub const VK_FORMAT_FEATURE_2_VIDEO_DECODE_OUTPUT_BIT_KHR: VkFormatFeatureFlagBits2 = 33554432;
pub const VK_FORMAT_FEATURE_2_VIDEO_DECODE_DPB_BIT_KHR: VkFormatFeatureFlagBits2 = 67108864;
pub const VK_FORMAT_FEATURE_2_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR:
    VkFormatFeatureFlagBits2 = 536870912;
pub const VK_FORMAT_FEATURE_2_FRAGMENT_DENSITY_MAP_BIT_EXT: VkFormatFeatureFlagBits2 = 16777216;
pub const VK_FORMAT_FEATURE_2_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR: VkFormatFeatureFlagBits2 =
    1073741824;
pub const VK_FORMAT_FEATURE_2_HOST_IMAGE_TRANSFER_BIT_EXT: VkFormatFeatureFlagBits2 =
    70368744177664;
pub const VK_FORMAT_FEATURE_2_VIDEO_ENCODE_INPUT_BIT_KHR: VkFormatFeatureFlagBits2 = 134217728;
pub const VK_FORMAT_FEATURE_2_VIDEO_ENCODE_DPB_BIT_KHR: VkFormatFeatureFlagBits2 = 268435456;
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT_KHR: VkFormatFeatureFlagBits2 = 1;
pub const VK_FORMAT_FEATURE_2_STORAGE_IMAGE_BIT_KHR: VkFormatFeatureFlagBits2 = 2;
pub const VK_FORMAT_FEATURE_2_STORAGE_IMAGE_ATOMIC_BIT_KHR: VkFormatFeatureFlagBits2 = 4;
pub const VK_FORMAT_FEATURE_2_UNIFORM_TEXEL_BUFFER_BIT_KHR: VkFormatFeatureFlagBits2 = 8;
pub const VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_BIT_KHR: VkFormatFeatureFlagBits2 = 16;
pub const VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_ATOMIC_BIT_KHR: VkFormatFeatureFlagBits2 = 32;
pub const VK_FORMAT_FEATURE_2_VERTEX_BUFFER_BIT_KHR: VkFormatFeatureFlagBits2 = 64;
pub const VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BIT_KHR: VkFormatFeatureFlagBits2 = 128;
pub const VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BLEND_BIT_KHR: VkFormatFeatureFlagBits2 = 256;
pub const VK_FORMAT_FEATURE_2_DEPTH_STENCIL_ATTACHMENT_BIT_KHR: VkFormatFeatureFlagBits2 = 512;
pub const VK_FORMAT_FEATURE_2_BLIT_SRC_BIT_KHR: VkFormatFeatureFlagBits2 = 1024;
pub const VK_FORMAT_FEATURE_2_BLIT_DST_BIT_KHR: VkFormatFeatureFlagBits2 = 2048;
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT_KHR: VkFormatFeatureFlagBits2 = 4096;
pub const VK_FORMAT_FEATURE_2_TRANSFER_SRC_BIT_KHR: VkFormatFeatureFlagBits2 = 16384;
pub const VK_FORMAT_FEATURE_2_TRANSFER_DST_BIT_KHR: VkFormatFeatureFlagBits2 = 32768;
pub const VK_FORMAT_FEATURE_2_MIDPOINT_CHROMA_SAMPLES_BIT_KHR: VkFormatFeatureFlagBits2 = 131072;
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR:
    VkFormatFeatureFlagBits2 = 262144;
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR : VkFormatFeatureFlagBits2 = 524288 ;
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR : VkFormatFeatureFlagBits2 = 1048576 ;
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR : VkFormatFeatureFlagBits2 = 2097152 ;
pub const VK_FORMAT_FEATURE_2_DISJOINT_BIT_KHR: VkFormatFeatureFlagBits2 = 4194304;
pub const VK_FORMAT_FEATURE_2_COSITED_CHROMA_SAMPLES_BIT_KHR: VkFormatFeatureFlagBits2 = 8388608;
pub const VK_FORMAT_FEATURE_2_STORAGE_READ_WITHOUT_FORMAT_BIT_KHR: VkFormatFeatureFlagBits2 =
    2147483648;
pub const VK_FORMAT_FEATURE_2_STORAGE_WRITE_WITHOUT_FORMAT_BIT_KHR: VkFormatFeatureFlagBits2 =
    4294967296;
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_DEPTH_COMPARISON_BIT_KHR: VkFormatFeatureFlagBits2 =
    8589934592;
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT_KHR: VkFormatFeatureFlagBits2 = 65536;
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT: VkFormatFeatureFlagBits2 = 8192;
pub const VK_FORMAT_FEATURE_2_ACCELERATION_STRUCTURE_RADIUS_BUFFER_BIT_NV:
    VkFormatFeatureFlagBits2 = 2251799813685248;
pub const VK_FORMAT_FEATURE_2_LINEAR_COLOR_ATTACHMENT_BIT_NV: VkFormatFeatureFlagBits2 =
    274877906944;
pub const VK_FORMAT_FEATURE_2_WEIGHT_IMAGE_BIT_QCOM: VkFormatFeatureFlagBits2 = 17179869184;
pub const VK_FORMAT_FEATURE_2_WEIGHT_SAMPLED_IMAGE_BIT_QCOM: VkFormatFeatureFlagBits2 = 34359738368;
pub const VK_FORMAT_FEATURE_2_BLOCK_MATCHING_BIT_QCOM: VkFormatFeatureFlagBits2 = 68719476736;
pub const VK_FORMAT_FEATURE_2_BOX_FILTER_SAMPLED_BIT_QCOM: VkFormatFeatureFlagBits2 = 137438953472;
pub const VK_FORMAT_FEATURE_2_OPTICAL_FLOW_IMAGE_BIT_NV: VkFormatFeatureFlagBits2 = 1099511627776;
pub const VK_FORMAT_FEATURE_2_OPTICAL_FLOW_VECTOR_BIT_NV: VkFormatFeatureFlagBits2 = 2199023255552;
pub const VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV: VkFormatFeatureFlagBits2 = 4398046511104;
pub const VK_FORMAT_FEATURE_2_VIDEO_ENCODE_QUANTIZATION_DELTA_MAP_BIT_KHR:
    VkFormatFeatureFlagBits2 = 562949953421312;
pub const VK_FORMAT_FEATURE_2_VIDEO_ENCODE_EMPHASIS_MAP_BIT_KHR: VkFormatFeatureFlagBits2 =
    1125899906842624;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceVulkan13Features"]
        [::core::mem::size_of::<VkPhysicalDeviceVulkan13Features>() - 68usize];
    ["Alignment of VkPhysicalDeviceVulkan13Features"]
        [::core::mem::align_of::<VkPhysicalDeviceVulkan13Features>() - 4usize];
    ["Offset of field: VkPhysicalDeviceVulkan13Features::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceVulkan13Features, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceVulkan13Features::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceVulkan13Features, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceVulkan13Features::robustImageAccess"]
        [::core::mem::offset_of!(VkPhysicalDeviceVulkan13Features, robustImageAccess) - 8usize];
    ["Offset of field: VkPhysicalDeviceVulkan13Features::inlineUniformBlock"]
        [::core::mem::offset_of!(VkPhysicalDeviceVulkan13Features, inlineUniformBlock) - 12usize];
    ["Offset of field: VkPhysicalDeviceVulkan13Features::descriptorBindingInlineUniformBlockUpdateAfterBind"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceVulkan13Features , descriptorBindingInlineUniformBlockUpdateAfterBind) - 16usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan13Features::pipelineCreationCacheControl"][::core::mem::offset_of!(
        VkPhysicalDeviceVulkan13Features,
        pipelineCreationCacheControl
    )
        - 20usize];
    ["Offset of field: VkPhysicalDeviceVulkan13Features::privateData"]
        [::core::mem::offset_of!(VkPhysicalDeviceVulkan13Features, privateData) - 24usize];
    ["Offset of field: VkPhysicalDeviceVulkan13Features::shaderDemoteToHelperInvocation"][::core::mem::offset_of!(
        VkPhysicalDeviceVulkan13Features,
        shaderDemoteToHelperInvocation
    )
        - 28usize];
    ["Offset of field: VkPhysicalDeviceVulkan13Features::shaderTerminateInvocation"][::core::mem::offset_of!(
        VkPhysicalDeviceVulkan13Features,
        shaderTerminateInvocation
    ) - 32usize];
    ["Offset of field: VkPhysicalDeviceVulkan13Features::subgroupSizeControl"]
        [::core::mem::offset_of!(VkPhysicalDeviceVulkan13Features, subgroupSizeControl) - 36usize];
    ["Offset of field: VkPhysicalDeviceVulkan13Features::computeFullSubgroups"]
        [::core::mem::offset_of!(VkPhysicalDeviceVulkan13Features, computeFullSubgroups) - 40usize];
    ["Offset of field: VkPhysicalDeviceVulkan13Features::synchronization2"]
        [::core::mem::offset_of!(VkPhysicalDeviceVulkan13Features, synchronization2) - 44usize];
    ["Offset of field: VkPhysicalDeviceVulkan13Features::textureCompressionASTC_HDR"][::core::mem::offset_of!(
        VkPhysicalDeviceVulkan13Features,
        textureCompressionASTC_HDR
    ) - 48usize];
    ["Offset of field: VkPhysicalDeviceVulkan13Features::shaderZeroInitializeWorkgroupMemory"][::core::mem::offset_of!(
        VkPhysicalDeviceVulkan13Features,
        shaderZeroInitializeWorkgroupMemory
    )
        - 52usize];
    ["Offset of field: VkPhysicalDeviceVulkan13Features::dynamicRendering"]
        [::core::mem::offset_of!(VkPhysicalDeviceVulkan13Features, dynamicRendering) - 56usize];
    ["Offset of field: VkPhysicalDeviceVulkan13Features::shaderIntegerDotProduct"][::core::mem::offset_of!(
        VkPhysicalDeviceVulkan13Features,
        shaderIntegerDotProduct
    ) - 60usize];
    ["Offset of field: VkPhysicalDeviceVulkan13Features::maintenance4"]
        [::core::mem::offset_of!(VkPhysicalDeviceVulkan13Features, maintenance4) - 64usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceVulkan13Properties"]
        [::core::mem::size_of::<VkPhysicalDeviceVulkan13Properties>() - 208usize];
    ["Alignment of VkPhysicalDeviceVulkan13Properties"]
        [::core::mem::align_of::<VkPhysicalDeviceVulkan13Properties>() - 8usize];
    ["Offset of field: VkPhysicalDeviceVulkan13Properties::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceVulkan13Properties, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceVulkan13Properties::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceVulkan13Properties, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceVulkan13Properties::minSubgroupSize"]
        [::core::mem::offset_of!(VkPhysicalDeviceVulkan13Properties, minSubgroupSize) - 8usize];
    ["Offset of field: VkPhysicalDeviceVulkan13Properties::maxSubgroupSize"]
        [::core::mem::offset_of!(VkPhysicalDeviceVulkan13Properties, maxSubgroupSize) - 12usize];
    ["Offset of field: VkPhysicalDeviceVulkan13Properties::maxComputeWorkgroupSubgroups"][::core::mem::offset_of!(
        VkPhysicalDeviceVulkan13Properties,
        maxComputeWorkgroupSubgroups
    )
        - 16usize];
    ["Offset of field: VkPhysicalDeviceVulkan13Properties::requiredSubgroupSizeStages"][::core::mem::offset_of!(
        VkPhysicalDeviceVulkan13Properties,
        requiredSubgroupSizeStages
    )
        - 20usize];
    ["Offset of field: VkPhysicalDeviceVulkan13Properties::maxInlineUniformBlockSize"][::core::mem::offset_of!(
        VkPhysicalDeviceVulkan13Properties,
        maxInlineUniformBlockSize
    ) - 24usize];
    ["Offset of field: VkPhysicalDeviceVulkan13Properties::maxPerStageDescriptorInlineUniformBlocks"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceVulkan13Properties , maxPerStageDescriptorInlineUniformBlocks) - 28usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan13Properties::maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceVulkan13Properties , maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks) - 32usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan13Properties::maxDescriptorSetInlineUniformBlocks"][::core::mem::offset_of!(
        VkPhysicalDeviceVulkan13Properties,
        maxDescriptorSetInlineUniformBlocks
    )
        - 36usize];
    ["Offset of field: VkPhysicalDeviceVulkan13Properties::maxDescriptorSetUpdateAfterBindInlineUniformBlocks"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceVulkan13Properties , maxDescriptorSetUpdateAfterBindInlineUniformBlocks) - 40usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan13Properties::maxInlineUniformTotalSize"][::core::mem::offset_of!(
        VkPhysicalDeviceVulkan13Properties,
        maxInlineUniformTotalSize
    ) - 44usize];
    ["Offset of field: VkPhysicalDeviceVulkan13Properties::integerDotProduct8BitUnsignedAccelerated"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceVulkan13Properties , integerDotProduct8BitUnsignedAccelerated) - 48usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan13Properties::integerDotProduct8BitSignedAccelerated"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceVulkan13Properties , integerDotProduct8BitSignedAccelerated) - 52usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan13Properties::integerDotProduct8BitMixedSignednessAccelerated"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceVulkan13Properties , integerDotProduct8BitMixedSignednessAccelerated) - 56usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan13Properties::integerDotProduct4x8BitPackedUnsignedAccelerated"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceVulkan13Properties , integerDotProduct4x8BitPackedUnsignedAccelerated) - 60usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan13Properties::integerDotProduct4x8BitPackedSignedAccelerated"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceVulkan13Properties , integerDotProduct4x8BitPackedSignedAccelerated) - 64usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan13Properties::integerDotProduct4x8BitPackedMixedSignednessAccelerated"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceVulkan13Properties , integerDotProduct4x8BitPackedMixedSignednessAccelerated) - 68usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan13Properties::integerDotProduct16BitUnsignedAccelerated"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceVulkan13Properties , integerDotProduct16BitUnsignedAccelerated) - 72usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan13Properties::integerDotProduct16BitSignedAccelerated"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceVulkan13Properties , integerDotProduct16BitSignedAccelerated) - 76usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan13Properties::integerDotProduct16BitMixedSignednessAccelerated"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceVulkan13Properties , integerDotProduct16BitMixedSignednessAccelerated) - 80usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan13Properties::integerDotProduct32BitUnsignedAccelerated"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceVulkan13Properties , integerDotProduct32BitUnsignedAccelerated) - 84usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan13Properties::integerDotProduct32BitSignedAccelerated"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceVulkan13Properties , integerDotProduct32BitSignedAccelerated) - 88usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan13Properties::integerDotProduct32BitMixedSignednessAccelerated"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceVulkan13Properties , integerDotProduct32BitMixedSignednessAccelerated) - 92usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan13Properties::integerDotProduct64BitUnsignedAccelerated"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceVulkan13Properties , integerDotProduct64BitUnsignedAccelerated) - 96usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan13Properties::integerDotProduct64BitSignedAccelerated"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceVulkan13Properties , integerDotProduct64BitSignedAccelerated) - 100usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan13Properties::integerDotProduct64BitMixedSignednessAccelerated"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceVulkan13Properties , integerDotProduct64BitMixedSignednessAccelerated) - 104usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan13Properties::integerDotProductAccumulatingSaturating8BitUnsignedAccelerated"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceVulkan13Properties , integerDotProductAccumulatingSaturating8BitUnsignedAccelerated) - 108usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan13Properties::integerDotProductAccumulatingSaturating8BitSignedAccelerated"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceVulkan13Properties , integerDotProductAccumulatingSaturating8BitSignedAccelerated) - 112usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan13Properties::integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceVulkan13Properties , integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated) - 116usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan13Properties::integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceVulkan13Properties , integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated) - 120usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan13Properties::integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceVulkan13Properties , integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated) - 124usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan13Properties::integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceVulkan13Properties , integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated) - 128usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan13Properties::integerDotProductAccumulatingSaturating16BitUnsignedAccelerated"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceVulkan13Properties , integerDotProductAccumulatingSaturating16BitUnsignedAccelerated) - 132usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan13Properties::integerDotProductAccumulatingSaturating16BitSignedAccelerated"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceVulkan13Properties , integerDotProductAccumulatingSaturating16BitSignedAccelerated) - 136usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan13Properties::integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceVulkan13Properties , integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated) - 140usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan13Properties::integerDotProductAccumulatingSaturating32BitUnsignedAccelerated"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceVulkan13Properties , integerDotProductAccumulatingSaturating32BitUnsignedAccelerated) - 144usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan13Properties::integerDotProductAccumulatingSaturating32BitSignedAccelerated"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceVulkan13Properties , integerDotProductAccumulatingSaturating32BitSignedAccelerated) - 148usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan13Properties::integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceVulkan13Properties , integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated) - 152usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan13Properties::integerDotProductAccumulatingSaturating64BitUnsignedAccelerated"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceVulkan13Properties , integerDotProductAccumulatingSaturating64BitUnsignedAccelerated) - 156usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan13Properties::integerDotProductAccumulatingSaturating64BitSignedAccelerated"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceVulkan13Properties , integerDotProductAccumulatingSaturating64BitSignedAccelerated) - 160usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan13Properties::integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceVulkan13Properties , integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated) - 164usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan13Properties::storageTexelBufferOffsetAlignmentBytes"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceVulkan13Properties , storageTexelBufferOffsetAlignmentBytes) - 168usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan13Properties::storageTexelBufferOffsetSingleTexelAlignment"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceVulkan13Properties , storageTexelBufferOffsetSingleTexelAlignment) - 176usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan13Properties::uniformTexelBufferOffsetAlignmentBytes"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceVulkan13Properties , uniformTexelBufferOffsetAlignmentBytes) - 184usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan13Properties::uniformTexelBufferOffsetSingleTexelAlignment"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceVulkan13Properties , uniformTexelBufferOffsetSingleTexelAlignment) - 192usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan13Properties::maxBufferSize"]
        [::core::mem::offset_of!(VkPhysicalDeviceVulkan13Properties, maxBufferSize) - 200usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineCreationFeedback"]
        [::core::mem::size_of::<VkPipelineCreationFeedback>() - 16usize];
    ["Alignment of VkPipelineCreationFeedback"]
        [::core::mem::align_of::<VkPipelineCreationFeedback>() - 8usize];
    ["Offset of field: VkPipelineCreationFeedback::flags"]
        [::core::mem::offset_of!(VkPipelineCreationFeedback, flags) - 0usize];
    ["Offset of field: VkPipelineCreationFeedback::duration"]
        [::core::mem::offset_of!(VkPipelineCreationFeedback, duration) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineCreationFeedbackCreateInfo"]
        [::core::mem::size_of::<VkPipelineCreationFeedbackCreateInfo>() - 20usize];
    ["Alignment of VkPipelineCreationFeedbackCreateInfo"]
        [::core::mem::align_of::<VkPipelineCreationFeedbackCreateInfo>() - 4usize];
    ["Offset of field: VkPipelineCreationFeedbackCreateInfo::sType"]
        [::core::mem::offset_of!(VkPipelineCreationFeedbackCreateInfo, sType) - 0usize];
    ["Offset of field: VkPipelineCreationFeedbackCreateInfo::pNext"]
        [::core::mem::offset_of!(VkPipelineCreationFeedbackCreateInfo, pNext) - 4usize];
    ["Offset of field: VkPipelineCreationFeedbackCreateInfo::pPipelineCreationFeedback"][::core::mem::offset_of!(
        VkPipelineCreationFeedbackCreateInfo,
        pPipelineCreationFeedback
    )
        - 8usize];
    ["Offset of field: VkPipelineCreationFeedbackCreateInfo::pipelineStageCreationFeedbackCount"][::core::mem::offset_of!(
        VkPipelineCreationFeedbackCreateInfo,
        pipelineStageCreationFeedbackCount
    )
        - 12usize];
    ["Offset of field: VkPipelineCreationFeedbackCreateInfo::pPipelineStageCreationFeedbacks"][::core::mem::offset_of!(
        VkPipelineCreationFeedbackCreateInfo,
        pPipelineStageCreationFeedbacks
    )
        - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceShaderTerminateInvocationFeatures"]
        [::core::mem::size_of::<VkPhysicalDeviceShaderTerminateInvocationFeatures>() - 12usize];
    ["Alignment of VkPhysicalDeviceShaderTerminateInvocationFeatures"]
        [::core::mem::align_of::<VkPhysicalDeviceShaderTerminateInvocationFeatures>() - 4usize];
    ["Offset of field: VkPhysicalDeviceShaderTerminateInvocationFeatures::sType"][::core::mem::offset_of!(
        VkPhysicalDeviceShaderTerminateInvocationFeatures,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceShaderTerminateInvocationFeatures::pNext"][::core::mem::offset_of!(
        VkPhysicalDeviceShaderTerminateInvocationFeatures,
        pNext
    ) - 4usize];
    ["Offset of field: VkPhysicalDeviceShaderTerminateInvocationFeatures::shaderTerminateInvocation"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceShaderTerminateInvocationFeatures , shaderTerminateInvocation) - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceToolProperties"]
        [::core::mem::size_of::<VkPhysicalDeviceToolProperties>() - 1036usize];
    ["Alignment of VkPhysicalDeviceToolProperties"]
        [::core::mem::align_of::<VkPhysicalDeviceToolProperties>() - 4usize];
    ["Offset of field: VkPhysicalDeviceToolProperties::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceToolProperties, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceToolProperties::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceToolProperties, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceToolProperties::name"]
        [::core::mem::offset_of!(VkPhysicalDeviceToolProperties, name) - 8usize];
    ["Offset of field: VkPhysicalDeviceToolProperties::version"]
        [::core::mem::offset_of!(VkPhysicalDeviceToolProperties, version) - 264usize];
    ["Offset of field: VkPhysicalDeviceToolProperties::purposes"]
        [::core::mem::offset_of!(VkPhysicalDeviceToolProperties, purposes) - 520usize];
    ["Offset of field: VkPhysicalDeviceToolProperties::description"]
        [::core::mem::offset_of!(VkPhysicalDeviceToolProperties, description) - 524usize];
    ["Offset of field: VkPhysicalDeviceToolProperties::layer"]
        [::core::mem::offset_of!(VkPhysicalDeviceToolProperties, layer) - 780usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures"][::core::mem::size_of::<
        VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures,
    >() - 12usize];
    ["Alignment of VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures"][::core::mem::align_of::<
        VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures,
    >() - 4usize];
    ["Offset of field: VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures::sType"][::core::mem::offset_of!(
        VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures::pNext"][::core::mem::offset_of!(
        VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures,
        pNext
    ) - 4usize];
    ["Offset of field: VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures::shaderDemoteToHelperInvocation"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures , shaderDemoteToHelperInvocation) - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDevicePrivateDataFeatures"]
        [::core::mem::size_of::<VkPhysicalDevicePrivateDataFeatures>() - 12usize];
    ["Alignment of VkPhysicalDevicePrivateDataFeatures"]
        [::core::mem::align_of::<VkPhysicalDevicePrivateDataFeatures>() - 4usize];
    ["Offset of field: VkPhysicalDevicePrivateDataFeatures::sType"]
        [::core::mem::offset_of!(VkPhysicalDevicePrivateDataFeatures, sType) - 0usize];
    ["Offset of field: VkPhysicalDevicePrivateDataFeatures::pNext"]
        [::core::mem::offset_of!(VkPhysicalDevicePrivateDataFeatures, pNext) - 4usize];
    ["Offset of field: VkPhysicalDevicePrivateDataFeatures::privateData"]
        [::core::mem::offset_of!(VkPhysicalDevicePrivateDataFeatures, privateData) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDevicePrivateDataCreateInfo"]
        [::core::mem::size_of::<VkDevicePrivateDataCreateInfo>() - 12usize];
    ["Alignment of VkDevicePrivateDataCreateInfo"]
        [::core::mem::align_of::<VkDevicePrivateDataCreateInfo>() - 4usize];
    ["Offset of field: VkDevicePrivateDataCreateInfo::sType"]
        [::core::mem::offset_of!(VkDevicePrivateDataCreateInfo, sType) - 0usize];
    ["Offset of field: VkDevicePrivateDataCreateInfo::pNext"]
        [::core::mem::offset_of!(VkDevicePrivateDataCreateInfo, pNext) - 4usize];
    ["Offset of field: VkDevicePrivateDataCreateInfo::privateDataSlotRequestCount"][::core::mem::offset_of!(
        VkDevicePrivateDataCreateInfo,
        privateDataSlotRequestCount
    ) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPrivateDataSlotCreateInfo"]
        [::core::mem::size_of::<VkPrivateDataSlotCreateInfo>() - 12usize];
    ["Alignment of VkPrivateDataSlotCreateInfo"]
        [::core::mem::align_of::<VkPrivateDataSlotCreateInfo>() - 4usize];
    ["Offset of field: VkPrivateDataSlotCreateInfo::sType"]
        [::core::mem::offset_of!(VkPrivateDataSlotCreateInfo, sType) - 0usize];
    ["Offset of field: VkPrivateDataSlotCreateInfo::pNext"]
        [::core::mem::offset_of!(VkPrivateDataSlotCreateInfo, pNext) - 4usize];
    ["Offset of field: VkPrivateDataSlotCreateInfo::flags"]
        [::core::mem::offset_of!(VkPrivateDataSlotCreateInfo, flags) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDevicePipelineCreationCacheControlFeatures"]
        [::core::mem::size_of::<VkPhysicalDevicePipelineCreationCacheControlFeatures>() - 12usize];
    ["Alignment of VkPhysicalDevicePipelineCreationCacheControlFeatures"]
        [::core::mem::align_of::<VkPhysicalDevicePipelineCreationCacheControlFeatures>() - 4usize];
    ["Offset of field: VkPhysicalDevicePipelineCreationCacheControlFeatures::sType"][::core::mem::offset_of!(
        VkPhysicalDevicePipelineCreationCacheControlFeatures,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDevicePipelineCreationCacheControlFeatures::pNext"][::core::mem::offset_of!(
        VkPhysicalDevicePipelineCreationCacheControlFeatures,
        pNext
    ) - 4usize];
    ["Offset of field: VkPhysicalDevicePipelineCreationCacheControlFeatures::pipelineCreationCacheControl"] [:: core :: mem :: offset_of ! (VkPhysicalDevicePipelineCreationCacheControlFeatures , pipelineCreationCacheControl) - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkMemoryBarrier2"][::core::mem::size_of::<VkMemoryBarrier2>() - 40usize];
    ["Alignment of VkMemoryBarrier2"][::core::mem::align_of::<VkMemoryBarrier2>() - 8usize];
    ["Offset of field: VkMemoryBarrier2::sType"]
        [::core::mem::offset_of!(VkMemoryBarrier2, sType) - 0usize];
    ["Offset of field: VkMemoryBarrier2::pNext"]
        [::core::mem::offset_of!(VkMemoryBarrier2, pNext) - 4usize];
    ["Offset of field: VkMemoryBarrier2::srcStageMask"]
        [::core::mem::offset_of!(VkMemoryBarrier2, srcStageMask) - 8usize];
    ["Offset of field: VkMemoryBarrier2::srcAccessMask"]
        [::core::mem::offset_of!(VkMemoryBarrier2, srcAccessMask) - 16usize];
    ["Offset of field: VkMemoryBarrier2::dstStageMask"]
        [::core::mem::offset_of!(VkMemoryBarrier2, dstStageMask) - 24usize];
    ["Offset of field: VkMemoryBarrier2::dstAccessMask"]
        [::core::mem::offset_of!(VkMemoryBarrier2, dstAccessMask) - 32usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkBufferMemoryBarrier2"][::core::mem::size_of::<VkBufferMemoryBarrier2>() - 72usize];
    ["Alignment of VkBufferMemoryBarrier2"]
        [::core::mem::align_of::<VkBufferMemoryBarrier2>() - 8usize];
    ["Offset of field: VkBufferMemoryBarrier2::sType"]
        [::core::mem::offset_of!(VkBufferMemoryBarrier2, sType) - 0usize];
    ["Offset of field: VkBufferMemoryBarrier2::pNext"]
        [::core::mem::offset_of!(VkBufferMemoryBarrier2, pNext) - 4usize];
    ["Offset of field: VkBufferMemoryBarrier2::srcStageMask"]
        [::core::mem::offset_of!(VkBufferMemoryBarrier2, srcStageMask) - 8usize];
    ["Offset of field: VkBufferMemoryBarrier2::srcAccessMask"]
        [::core::mem::offset_of!(VkBufferMemoryBarrier2, srcAccessMask) - 16usize];
    ["Offset of field: VkBufferMemoryBarrier2::dstStageMask"]
        [::core::mem::offset_of!(VkBufferMemoryBarrier2, dstStageMask) - 24usize];
    ["Offset of field: VkBufferMemoryBarrier2::dstAccessMask"]
        [::core::mem::offset_of!(VkBufferMemoryBarrier2, dstAccessMask) - 32usize];
    ["Offset of field: VkBufferMemoryBarrier2::srcQueueFamilyIndex"]
        [::core::mem::offset_of!(VkBufferMemoryBarrier2, srcQueueFamilyIndex) - 40usize];
    ["Offset of field: VkBufferMemoryBarrier2::dstQueueFamilyIndex"]
        [::core::mem::offset_of!(VkBufferMemoryBarrier2, dstQueueFamilyIndex) - 44usize];
    ["Offset of field: VkBufferMemoryBarrier2::buffer"]
        [::core::mem::offset_of!(VkBufferMemoryBarrier2, buffer) - 48usize];
    ["Offset of field: VkBufferMemoryBarrier2::offset"]
        [::core::mem::offset_of!(VkBufferMemoryBarrier2, offset) - 56usize];
    ["Offset of field: VkBufferMemoryBarrier2::size"]
        [::core::mem::offset_of!(VkBufferMemoryBarrier2, size) - 64usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkImageMemoryBarrier2"][::core::mem::size_of::<VkImageMemoryBarrier2>() - 88usize];
    ["Alignment of VkImageMemoryBarrier2"]
        [::core::mem::align_of::<VkImageMemoryBarrier2>() - 8usize];
    ["Offset of field: VkImageMemoryBarrier2::sType"]
        [::core::mem::offset_of!(VkImageMemoryBarrier2, sType) - 0usize];
    ["Offset of field: VkImageMemoryBarrier2::pNext"]
        [::core::mem::offset_of!(VkImageMemoryBarrier2, pNext) - 4usize];
    ["Offset of field: VkImageMemoryBarrier2::srcStageMask"]
        [::core::mem::offset_of!(VkImageMemoryBarrier2, srcStageMask) - 8usize];
    ["Offset of field: VkImageMemoryBarrier2::srcAccessMask"]
        [::core::mem::offset_of!(VkImageMemoryBarrier2, srcAccessMask) - 16usize];
    ["Offset of field: VkImageMemoryBarrier2::dstStageMask"]
        [::core::mem::offset_of!(VkImageMemoryBarrier2, dstStageMask) - 24usize];
    ["Offset of field: VkImageMemoryBarrier2::dstAccessMask"]
        [::core::mem::offset_of!(VkImageMemoryBarrier2, dstAccessMask) - 32usize];
    ["Offset of field: VkImageMemoryBarrier2::oldLayout"]
        [::core::mem::offset_of!(VkImageMemoryBarrier2, oldLayout) - 40usize];
    ["Offset of field: VkImageMemoryBarrier2::newLayout"]
        [::core::mem::offset_of!(VkImageMemoryBarrier2, newLayout) - 44usize];
    ["Offset of field: VkImageMemoryBarrier2::srcQueueFamilyIndex"]
        [::core::mem::offset_of!(VkImageMemoryBarrier2, srcQueueFamilyIndex) - 48usize];
    ["Offset of field: VkImageMemoryBarrier2::dstQueueFamilyIndex"]
        [::core::mem::offset_of!(VkImageMemoryBarrier2, dstQueueFamilyIndex) - 52usize];
    ["Offset of field: VkImageMemoryBarrier2::image"]
        [::core::mem::offset_of!(VkImageMemoryBarrier2, image) - 56usize];
    ["Offset of field: VkImageMemoryBarrier2::subresourceRange"]
        [::core::mem::offset_of!(VkImageMemoryBarrier2, subresourceRange) - 64usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDependencyInfo"][::core::mem::size_of::<VkDependencyInfo>() - 36usize];
    ["Alignment of VkDependencyInfo"][::core::mem::align_of::<VkDependencyInfo>() - 4usize];
    ["Offset of field: VkDependencyInfo::sType"]
        [::core::mem::offset_of!(VkDependencyInfo, sType) - 0usize];
    ["Offset of field: VkDependencyInfo::pNext"]
        [::core::mem::offset_of!(VkDependencyInfo, pNext) - 4usize];
    ["Offset of field: VkDependencyInfo::dependencyFlags"]
        [::core::mem::offset_of!(VkDependencyInfo, dependencyFlags) - 8usize];
    ["Offset of field: VkDependencyInfo::memoryBarrierCount"]
        [::core::mem::offset_of!(VkDependencyInfo, memoryBarrierCount) - 12usize];
    ["Offset of field: VkDependencyInfo::pMemoryBarriers"]
        [::core::mem::offset_of!(VkDependencyInfo, pMemoryBarriers) - 16usize];
    ["Offset of field: VkDependencyInfo::bufferMemoryBarrierCount"]
        [::core::mem::offset_of!(VkDependencyInfo, bufferMemoryBarrierCount) - 20usize];
    ["Offset of field: VkDependencyInfo::pBufferMemoryBarriers"]
        [::core::mem::offset_of!(VkDependencyInfo, pBufferMemoryBarriers) - 24usize];
    ["Offset of field: VkDependencyInfo::imageMemoryBarrierCount"]
        [::core::mem::offset_of!(VkDependencyInfo, imageMemoryBarrierCount) - 28usize];
    ["Offset of field: VkDependencyInfo::pImageMemoryBarriers"]
        [::core::mem::offset_of!(VkDependencyInfo, pImageMemoryBarriers) - 32usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSemaphoreSubmitInfo"][::core::mem::size_of::<VkSemaphoreSubmitInfo>() - 40usize];
    ["Alignment of VkSemaphoreSubmitInfo"]
        [::core::mem::align_of::<VkSemaphoreSubmitInfo>() - 8usize];
    ["Offset of field: VkSemaphoreSubmitInfo::sType"]
        [::core::mem::offset_of!(VkSemaphoreSubmitInfo, sType) - 0usize];
    ["Offset of field: VkSemaphoreSubmitInfo::pNext"]
        [::core::mem::offset_of!(VkSemaphoreSubmitInfo, pNext) - 4usize];
    ["Offset of field: VkSemaphoreSubmitInfo::semaphore"]
        [::core::mem::offset_of!(VkSemaphoreSubmitInfo, semaphore) - 8usize];
    ["Offset of field: VkSemaphoreSubmitInfo::value"]
        [::core::mem::offset_of!(VkSemaphoreSubmitInfo, value) - 16usize];
    ["Offset of field: VkSemaphoreSubmitInfo::stageMask"]
        [::core::mem::offset_of!(VkSemaphoreSubmitInfo, stageMask) - 24usize];
    ["Offset of field: VkSemaphoreSubmitInfo::deviceIndex"]
        [::core::mem::offset_of!(VkSemaphoreSubmitInfo, deviceIndex) - 32usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkCommandBufferSubmitInfo"]
        [::core::mem::size_of::<VkCommandBufferSubmitInfo>() - 16usize];
    ["Alignment of VkCommandBufferSubmitInfo"]
        [::core::mem::align_of::<VkCommandBufferSubmitInfo>() - 4usize];
    ["Offset of field: VkCommandBufferSubmitInfo::sType"]
        [::core::mem::offset_of!(VkCommandBufferSubmitInfo, sType) - 0usize];
    ["Offset of field: VkCommandBufferSubmitInfo::pNext"]
        [::core::mem::offset_of!(VkCommandBufferSubmitInfo, pNext) - 4usize];
    ["Offset of field: VkCommandBufferSubmitInfo::commandBuffer"]
        [::core::mem::offset_of!(VkCommandBufferSubmitInfo, commandBuffer) - 8usize];
    ["Offset of field: VkCommandBufferSubmitInfo::deviceMask"]
        [::core::mem::offset_of!(VkCommandBufferSubmitInfo, deviceMask) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSubmitInfo2"][::core::mem::size_of::<VkSubmitInfo2>() - 36usize];
    ["Alignment of VkSubmitInfo2"][::core::mem::align_of::<VkSubmitInfo2>() - 4usize];
    ["Offset of field: VkSubmitInfo2::sType"]
        [::core::mem::offset_of!(VkSubmitInfo2, sType) - 0usize];
    ["Offset of field: VkSubmitInfo2::pNext"]
        [::core::mem::offset_of!(VkSubmitInfo2, pNext) - 4usize];
    ["Offset of field: VkSubmitInfo2::flags"]
        [::core::mem::offset_of!(VkSubmitInfo2, flags) - 8usize];
    ["Offset of field: VkSubmitInfo2::waitSemaphoreInfoCount"]
        [::core::mem::offset_of!(VkSubmitInfo2, waitSemaphoreInfoCount) - 12usize];
    ["Offset of field: VkSubmitInfo2::pWaitSemaphoreInfos"]
        [::core::mem::offset_of!(VkSubmitInfo2, pWaitSemaphoreInfos) - 16usize];
    ["Offset of field: VkSubmitInfo2::commandBufferInfoCount"]
        [::core::mem::offset_of!(VkSubmitInfo2, commandBufferInfoCount) - 20usize];
    ["Offset of field: VkSubmitInfo2::pCommandBufferInfos"]
        [::core::mem::offset_of!(VkSubmitInfo2, pCommandBufferInfos) - 24usize];
    ["Offset of field: VkSubmitInfo2::signalSemaphoreInfoCount"]
        [::core::mem::offset_of!(VkSubmitInfo2, signalSemaphoreInfoCount) - 28usize];
    ["Offset of field: VkSubmitInfo2::pSignalSemaphoreInfos"]
        [::core::mem::offset_of!(VkSubmitInfo2, pSignalSemaphoreInfos) - 32usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceSynchronization2Features"]
        [::core::mem::size_of::<VkPhysicalDeviceSynchronization2Features>() - 12usize];
    ["Alignment of VkPhysicalDeviceSynchronization2Features"]
        [::core::mem::align_of::<VkPhysicalDeviceSynchronization2Features>() - 4usize];
    ["Offset of field: VkPhysicalDeviceSynchronization2Features::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceSynchronization2Features, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceSynchronization2Features::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceSynchronization2Features, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceSynchronization2Features::synchronization2"][::core::mem::offset_of!(
        VkPhysicalDeviceSynchronization2Features,
        synchronization2
    ) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures"]
        [::core::mem::size_of::<VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures>() - 12usize];
    ["Alignment of VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures"]
        [::core::mem::align_of::<VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures>() - 4usize];
    ["Offset of field: VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures::sType"][::core::mem::offset_of!(
        VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures::pNext"][::core::mem::offset_of!(
        VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures,
        pNext
    ) - 4usize];
    ["Offset of field: VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures::shaderZeroInitializeWorkgroupMemory"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures , shaderZeroInitializeWorkgroupMemory) - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceImageRobustnessFeatures"]
        [::core::mem::size_of::<VkPhysicalDeviceImageRobustnessFeatures>() - 12usize];
    ["Alignment of VkPhysicalDeviceImageRobustnessFeatures"]
        [::core::mem::align_of::<VkPhysicalDeviceImageRobustnessFeatures>() - 4usize];
    ["Offset of field: VkPhysicalDeviceImageRobustnessFeatures::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceImageRobustnessFeatures, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceImageRobustnessFeatures::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceImageRobustnessFeatures, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceImageRobustnessFeatures::robustImageAccess"][::core::mem::offset_of!(
        VkPhysicalDeviceImageRobustnessFeatures,
        robustImageAccess
    ) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkBufferCopy2"][::core::mem::size_of::<VkBufferCopy2>() - 32usize];
    ["Alignment of VkBufferCopy2"][::core::mem::align_of::<VkBufferCopy2>() - 8usize];
    ["Offset of field: VkBufferCopy2::sType"]
        [::core::mem::offset_of!(VkBufferCopy2, sType) - 0usize];
    ["Offset of field: VkBufferCopy2::pNext"]
        [::core::mem::offset_of!(VkBufferCopy2, pNext) - 4usize];
    ["Offset of field: VkBufferCopy2::srcOffset"]
        [::core::mem::offset_of!(VkBufferCopy2, srcOffset) - 8usize];
    ["Offset of field: VkBufferCopy2::dstOffset"]
        [::core::mem::offset_of!(VkBufferCopy2, dstOffset) - 16usize];
    ["Offset of field: VkBufferCopy2::size"]
        [::core::mem::offset_of!(VkBufferCopy2, size) - 24usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkCopyBufferInfo2"][::core::mem::size_of::<VkCopyBufferInfo2>() - 32usize];
    ["Alignment of VkCopyBufferInfo2"][::core::mem::align_of::<VkCopyBufferInfo2>() - 8usize];
    ["Offset of field: VkCopyBufferInfo2::sType"]
        [::core::mem::offset_of!(VkCopyBufferInfo2, sType) - 0usize];
    ["Offset of field: VkCopyBufferInfo2::pNext"]
        [::core::mem::offset_of!(VkCopyBufferInfo2, pNext) - 4usize];
    ["Offset of field: VkCopyBufferInfo2::srcBuffer"]
        [::core::mem::offset_of!(VkCopyBufferInfo2, srcBuffer) - 8usize];
    ["Offset of field: VkCopyBufferInfo2::dstBuffer"]
        [::core::mem::offset_of!(VkCopyBufferInfo2, dstBuffer) - 16usize];
    ["Offset of field: VkCopyBufferInfo2::regionCount"]
        [::core::mem::offset_of!(VkCopyBufferInfo2, regionCount) - 24usize];
    ["Offset of field: VkCopyBufferInfo2::pRegions"]
        [::core::mem::offset_of!(VkCopyBufferInfo2, pRegions) - 28usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkImageCopy2"][::core::mem::size_of::<VkImageCopy2>() - 76usize];
    ["Alignment of VkImageCopy2"][::core::mem::align_of::<VkImageCopy2>() - 4usize];
    ["Offset of field: VkImageCopy2::sType"][::core::mem::offset_of!(VkImageCopy2, sType) - 0usize];
    ["Offset of field: VkImageCopy2::pNext"][::core::mem::offset_of!(VkImageCopy2, pNext) - 4usize];
    ["Offset of field: VkImageCopy2::srcSubresource"]
        [::core::mem::offset_of!(VkImageCopy2, srcSubresource) - 8usize];
    ["Offset of field: VkImageCopy2::srcOffset"]
        [::core::mem::offset_of!(VkImageCopy2, srcOffset) - 24usize];
    ["Offset of field: VkImageCopy2::dstSubresource"]
        [::core::mem::offset_of!(VkImageCopy2, dstSubresource) - 36usize];
    ["Offset of field: VkImageCopy2::dstOffset"]
        [::core::mem::offset_of!(VkImageCopy2, dstOffset) - 52usize];
    ["Offset of field: VkImageCopy2::extent"]
        [::core::mem::offset_of!(VkImageCopy2, extent) - 64usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkCopyImageInfo2"][::core::mem::size_of::<VkCopyImageInfo2>() - 48usize];
    ["Alignment of VkCopyImageInfo2"][::core::mem::align_of::<VkCopyImageInfo2>() - 8usize];
    ["Offset of field: VkCopyImageInfo2::sType"]
        [::core::mem::offset_of!(VkCopyImageInfo2, sType) - 0usize];
    ["Offset of field: VkCopyImageInfo2::pNext"]
        [::core::mem::offset_of!(VkCopyImageInfo2, pNext) - 4usize];
    ["Offset of field: VkCopyImageInfo2::srcImage"]
        [::core::mem::offset_of!(VkCopyImageInfo2, srcImage) - 8usize];
    ["Offset of field: VkCopyImageInfo2::srcImageLayout"]
        [::core::mem::offset_of!(VkCopyImageInfo2, srcImageLayout) - 16usize];
    ["Offset of field: VkCopyImageInfo2::dstImage"]
        [::core::mem::offset_of!(VkCopyImageInfo2, dstImage) - 24usize];
    ["Offset of field: VkCopyImageInfo2::dstImageLayout"]
        [::core::mem::offset_of!(VkCopyImageInfo2, dstImageLayout) - 32usize];
    ["Offset of field: VkCopyImageInfo2::regionCount"]
        [::core::mem::offset_of!(VkCopyImageInfo2, regionCount) - 36usize];
    ["Offset of field: VkCopyImageInfo2::pRegions"]
        [::core::mem::offset_of!(VkCopyImageInfo2, pRegions) - 40usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkBufferImageCopy2"][::core::mem::size_of::<VkBufferImageCopy2>() - 64usize];
    ["Alignment of VkBufferImageCopy2"][::core::mem::align_of::<VkBufferImageCopy2>() - 8usize];
    ["Offset of field: VkBufferImageCopy2::sType"]
        [::core::mem::offset_of!(VkBufferImageCopy2, sType) - 0usize];
    ["Offset of field: VkBufferImageCopy2::pNext"]
        [::core::mem::offset_of!(VkBufferImageCopy2, pNext) - 4usize];
    ["Offset of field: VkBufferImageCopy2::bufferOffset"]
        [::core::mem::offset_of!(VkBufferImageCopy2, bufferOffset) - 8usize];
    ["Offset of field: VkBufferImageCopy2::bufferRowLength"]
        [::core::mem::offset_of!(VkBufferImageCopy2, bufferRowLength) - 16usize];
    ["Offset of field: VkBufferImageCopy2::bufferImageHeight"]
        [::core::mem::offset_of!(VkBufferImageCopy2, bufferImageHeight) - 20usize];
    ["Offset of field: VkBufferImageCopy2::imageSubresource"]
        [::core::mem::offset_of!(VkBufferImageCopy2, imageSubresource) - 24usize];
    ["Offset of field: VkBufferImageCopy2::imageOffset"]
        [::core::mem::offset_of!(VkBufferImageCopy2, imageOffset) - 40usize];
    ["Offset of field: VkBufferImageCopy2::imageExtent"]
        [::core::mem::offset_of!(VkBufferImageCopy2, imageExtent) - 52usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkCopyBufferToImageInfo2"]
        [::core::mem::size_of::<VkCopyBufferToImageInfo2>() - 40usize];
    ["Alignment of VkCopyBufferToImageInfo2"]
        [::core::mem::align_of::<VkCopyBufferToImageInfo2>() - 8usize];
    ["Offset of field: VkCopyBufferToImageInfo2::sType"]
        [::core::mem::offset_of!(VkCopyBufferToImageInfo2, sType) - 0usize];
    ["Offset of field: VkCopyBufferToImageInfo2::pNext"]
        [::core::mem::offset_of!(VkCopyBufferToImageInfo2, pNext) - 4usize];
    ["Offset of field: VkCopyBufferToImageInfo2::srcBuffer"]
        [::core::mem::offset_of!(VkCopyBufferToImageInfo2, srcBuffer) - 8usize];
    ["Offset of field: VkCopyBufferToImageInfo2::dstImage"]
        [::core::mem::offset_of!(VkCopyBufferToImageInfo2, dstImage) - 16usize];
    ["Offset of field: VkCopyBufferToImageInfo2::dstImageLayout"]
        [::core::mem::offset_of!(VkCopyBufferToImageInfo2, dstImageLayout) - 24usize];
    ["Offset of field: VkCopyBufferToImageInfo2::regionCount"]
        [::core::mem::offset_of!(VkCopyBufferToImageInfo2, regionCount) - 28usize];
    ["Offset of field: VkCopyBufferToImageInfo2::pRegions"]
        [::core::mem::offset_of!(VkCopyBufferToImageInfo2, pRegions) - 32usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkCopyImageToBufferInfo2"]
        [::core::mem::size_of::<VkCopyImageToBufferInfo2>() - 40usize];
    ["Alignment of VkCopyImageToBufferInfo2"]
        [::core::mem::align_of::<VkCopyImageToBufferInfo2>() - 8usize];
    ["Offset of field: VkCopyImageToBufferInfo2::sType"]
        [::core::mem::offset_of!(VkCopyImageToBufferInfo2, sType) - 0usize];
    ["Offset of field: VkCopyImageToBufferInfo2::pNext"]
        [::core::mem::offset_of!(VkCopyImageToBufferInfo2, pNext) - 4usize];
    ["Offset of field: VkCopyImageToBufferInfo2::srcImage"]
        [::core::mem::offset_of!(VkCopyImageToBufferInfo2, srcImage) - 8usize];
    ["Offset of field: VkCopyImageToBufferInfo2::srcImageLayout"]
        [::core::mem::offset_of!(VkCopyImageToBufferInfo2, srcImageLayout) - 16usize];
    ["Offset of field: VkCopyImageToBufferInfo2::dstBuffer"]
        [::core::mem::offset_of!(VkCopyImageToBufferInfo2, dstBuffer) - 24usize];
    ["Offset of field: VkCopyImageToBufferInfo2::regionCount"]
        [::core::mem::offset_of!(VkCopyImageToBufferInfo2, regionCount) - 32usize];
    ["Offset of field: VkCopyImageToBufferInfo2::pRegions"]
        [::core::mem::offset_of!(VkCopyImageToBufferInfo2, pRegions) - 36usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkImageBlit2"][::core::mem::size_of::<VkImageBlit2>() - 88usize];
    ["Alignment of VkImageBlit2"][::core::mem::align_of::<VkImageBlit2>() - 4usize];
    ["Offset of field: VkImageBlit2::sType"][::core::mem::offset_of!(VkImageBlit2, sType) - 0usize];
    ["Offset of field: VkImageBlit2::pNext"][::core::mem::offset_of!(VkImageBlit2, pNext) - 4usize];
    ["Offset of field: VkImageBlit2::srcSubresource"]
        [::core::mem::offset_of!(VkImageBlit2, srcSubresource) - 8usize];
    ["Offset of field: VkImageBlit2::srcOffsets"]
        [::core::mem::offset_of!(VkImageBlit2, srcOffsets) - 24usize];
    ["Offset of field: VkImageBlit2::dstSubresource"]
        [::core::mem::offset_of!(VkImageBlit2, dstSubresource) - 48usize];
    ["Offset of field: VkImageBlit2::dstOffsets"]
        [::core::mem::offset_of!(VkImageBlit2, dstOffsets) - 64usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkBlitImageInfo2"][::core::mem::size_of::<VkBlitImageInfo2>() - 48usize];
    ["Alignment of VkBlitImageInfo2"][::core::mem::align_of::<VkBlitImageInfo2>() - 8usize];
    ["Offset of field: VkBlitImageInfo2::sType"]
        [::core::mem::offset_of!(VkBlitImageInfo2, sType) - 0usize];
    ["Offset of field: VkBlitImageInfo2::pNext"]
        [::core::mem::offset_of!(VkBlitImageInfo2, pNext) - 4usize];
    ["Offset of field: VkBlitImageInfo2::srcImage"]
        [::core::mem::offset_of!(VkBlitImageInfo2, srcImage) - 8usize];
    ["Offset of field: VkBlitImageInfo2::srcImageLayout"]
        [::core::mem::offset_of!(VkBlitImageInfo2, srcImageLayout) - 16usize];
    ["Offset of field: VkBlitImageInfo2::dstImage"]
        [::core::mem::offset_of!(VkBlitImageInfo2, dstImage) - 24usize];
    ["Offset of field: VkBlitImageInfo2::dstImageLayout"]
        [::core::mem::offset_of!(VkBlitImageInfo2, dstImageLayout) - 32usize];
    ["Offset of field: VkBlitImageInfo2::regionCount"]
        [::core::mem::offset_of!(VkBlitImageInfo2, regionCount) - 36usize];
    ["Offset of field: VkBlitImageInfo2::pRegions"]
        [::core::mem::offset_of!(VkBlitImageInfo2, pRegions) - 40usize];
    ["Offset of field: VkBlitImageInfo2::filter"]
        [::core::mem::offset_of!(VkBlitImageInfo2, filter) - 44usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkImageResolve2"][::core::mem::size_of::<VkImageResolve2>() - 76usize];
    ["Alignment of VkImageResolve2"][::core::mem::align_of::<VkImageResolve2>() - 4usize];
    ["Offset of field: VkImageResolve2::sType"]
        [::core::mem::offset_of!(VkImageResolve2, sType) - 0usize];
    ["Offset of field: VkImageResolve2::pNext"]
        [::core::mem::offset_of!(VkImageResolve2, pNext) - 4usize];
    ["Offset of field: VkImageResolve2::srcSubresource"]
        [::core::mem::offset_of!(VkImageResolve2, srcSubresource) - 8usize];
    ["Offset of field: VkImageResolve2::srcOffset"]
        [::core::mem::offset_of!(VkImageResolve2, srcOffset) - 24usize];
    ["Offset of field: VkImageResolve2::dstSubresource"]
        [::core::mem::offset_of!(VkImageResolve2, dstSubresource) - 36usize];
    ["Offset of field: VkImageResolve2::dstOffset"]
        [::core::mem::offset_of!(VkImageResolve2, dstOffset) - 52usize];
    ["Offset of field: VkImageResolve2::extent"]
        [::core::mem::offset_of!(VkImageResolve2, extent) - 64usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkResolveImageInfo2"][::core::mem::size_of::<VkResolveImageInfo2>() - 48usize];
    ["Alignment of VkResolveImageInfo2"][::core::mem::align_of::<VkResolveImageInfo2>() - 8usize];
    ["Offset of field: VkResolveImageInfo2::sType"]
        [::core::mem::offset_of!(VkResolveImageInfo2, sType) - 0usize];
    ["Offset of field: VkResolveImageInfo2::pNext"]
        [::core::mem::offset_of!(VkResolveImageInfo2, pNext) - 4usize];
    ["Offset of field: VkResolveImageInfo2::srcImage"]
        [::core::mem::offset_of!(VkResolveImageInfo2, srcImage) - 8usize];
    ["Offset of field: VkResolveImageInfo2::srcImageLayout"]
        [::core::mem::offset_of!(VkResolveImageInfo2, srcImageLayout) - 16usize];
    ["Offset of field: VkResolveImageInfo2::dstImage"]
        [::core::mem::offset_of!(VkResolveImageInfo2, dstImage) - 24usize];
    ["Offset of field: VkResolveImageInfo2::dstImageLayout"]
        [::core::mem::offset_of!(VkResolveImageInfo2, dstImageLayout) - 32usize];
    ["Offset of field: VkResolveImageInfo2::regionCount"]
        [::core::mem::offset_of!(VkResolveImageInfo2, regionCount) - 36usize];
    ["Offset of field: VkResolveImageInfo2::pRegions"]
        [::core::mem::offset_of!(VkResolveImageInfo2, pRegions) - 40usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceSubgroupSizeControlFeatures"]
        [::core::mem::size_of::<VkPhysicalDeviceSubgroupSizeControlFeatures>() - 16usize];
    ["Alignment of VkPhysicalDeviceSubgroupSizeControlFeatures"]
        [::core::mem::align_of::<VkPhysicalDeviceSubgroupSizeControlFeatures>() - 4usize];
    ["Offset of field: VkPhysicalDeviceSubgroupSizeControlFeatures::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceSubgroupSizeControlFeatures, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceSubgroupSizeControlFeatures::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceSubgroupSizeControlFeatures, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceSubgroupSizeControlFeatures::subgroupSizeControl"][::core::mem::offset_of!(
        VkPhysicalDeviceSubgroupSizeControlFeatures,
        subgroupSizeControl
    )
        - 8usize];
    ["Offset of field: VkPhysicalDeviceSubgroupSizeControlFeatures::computeFullSubgroups"][::core::mem::offset_of!(
        VkPhysicalDeviceSubgroupSizeControlFeatures,
        computeFullSubgroups
    )
        - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceSubgroupSizeControlProperties"]
        [::core::mem::size_of::<VkPhysicalDeviceSubgroupSizeControlProperties>() - 24usize];
    ["Alignment of VkPhysicalDeviceSubgroupSizeControlProperties"]
        [::core::mem::align_of::<VkPhysicalDeviceSubgroupSizeControlProperties>() - 4usize];
    ["Offset of field: VkPhysicalDeviceSubgroupSizeControlProperties::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceSubgroupSizeControlProperties, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceSubgroupSizeControlProperties::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceSubgroupSizeControlProperties, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceSubgroupSizeControlProperties::minSubgroupSize"][::core::mem::offset_of!(
        VkPhysicalDeviceSubgroupSizeControlProperties,
        minSubgroupSize
    ) - 8usize];
    ["Offset of field: VkPhysicalDeviceSubgroupSizeControlProperties::maxSubgroupSize"][::core::mem::offset_of!(
        VkPhysicalDeviceSubgroupSizeControlProperties,
        maxSubgroupSize
    )
        - 12usize];
    ["Offset of field: VkPhysicalDeviceSubgroupSizeControlProperties::maxComputeWorkgroupSubgroups"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceSubgroupSizeControlProperties , maxComputeWorkgroupSubgroups) - 16usize] ;
    ["Offset of field: VkPhysicalDeviceSubgroupSizeControlProperties::requiredSubgroupSizeStages"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceSubgroupSizeControlProperties , requiredSubgroupSizeStages) - 20usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineShaderStageRequiredSubgroupSizeCreateInfo"]
        [::core::mem::size_of::<VkPipelineShaderStageRequiredSubgroupSizeCreateInfo>() - 12usize];
    ["Alignment of VkPipelineShaderStageRequiredSubgroupSizeCreateInfo"]
        [::core::mem::align_of::<VkPipelineShaderStageRequiredSubgroupSizeCreateInfo>() - 4usize];
    ["Offset of field: VkPipelineShaderStageRequiredSubgroupSizeCreateInfo::sType"][::core::mem::offset_of!(
        VkPipelineShaderStageRequiredSubgroupSizeCreateInfo,
        sType
    ) - 0usize];
    ["Offset of field: VkPipelineShaderStageRequiredSubgroupSizeCreateInfo::pNext"][::core::mem::offset_of!(
        VkPipelineShaderStageRequiredSubgroupSizeCreateInfo,
        pNext
    ) - 4usize];
    ["Offset of field: VkPipelineShaderStageRequiredSubgroupSizeCreateInfo::requiredSubgroupSize"] [:: core :: mem :: offset_of ! (VkPipelineShaderStageRequiredSubgroupSizeCreateInfo , requiredSubgroupSize) - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceInlineUniformBlockFeatures"]
        [::core::mem::size_of::<VkPhysicalDeviceInlineUniformBlockFeatures>() - 16usize];
    ["Alignment of VkPhysicalDeviceInlineUniformBlockFeatures"]
        [::core::mem::align_of::<VkPhysicalDeviceInlineUniformBlockFeatures>() - 4usize];
    ["Offset of field: VkPhysicalDeviceInlineUniformBlockFeatures::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceInlineUniformBlockFeatures, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceInlineUniformBlockFeatures::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceInlineUniformBlockFeatures, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceInlineUniformBlockFeatures::inlineUniformBlock"][::core::mem::offset_of!(
        VkPhysicalDeviceInlineUniformBlockFeatures,
        inlineUniformBlock
    ) - 8usize];
    ["Offset of field: VkPhysicalDeviceInlineUniformBlockFeatures::descriptorBindingInlineUniformBlockUpdateAfterBind"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceInlineUniformBlockFeatures , descriptorBindingInlineUniformBlockUpdateAfterBind) - 12usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceInlineUniformBlockProperties"]
        [::core::mem::size_of::<VkPhysicalDeviceInlineUniformBlockProperties>() - 28usize];
    ["Alignment of VkPhysicalDeviceInlineUniformBlockProperties"]
        [::core::mem::align_of::<VkPhysicalDeviceInlineUniformBlockProperties>() - 4usize];
    ["Offset of field: VkPhysicalDeviceInlineUniformBlockProperties::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceInlineUniformBlockProperties, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceInlineUniformBlockProperties::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceInlineUniformBlockProperties, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceInlineUniformBlockProperties::maxInlineUniformBlockSize"][::core::mem::offset_of!(
        VkPhysicalDeviceInlineUniformBlockProperties,
        maxInlineUniformBlockSize
    )
        - 8usize];
    ["Offset of field: VkPhysicalDeviceInlineUniformBlockProperties::maxPerStageDescriptorInlineUniformBlocks"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceInlineUniformBlockProperties , maxPerStageDescriptorInlineUniformBlocks) - 12usize] ;
    ["Offset of field: VkPhysicalDeviceInlineUniformBlockProperties::maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceInlineUniformBlockProperties , maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks) - 16usize] ;
    ["Offset of field: VkPhysicalDeviceInlineUniformBlockProperties::maxDescriptorSetInlineUniformBlocks"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceInlineUniformBlockProperties , maxDescriptorSetInlineUniformBlocks) - 20usize] ;
    ["Offset of field: VkPhysicalDeviceInlineUniformBlockProperties::maxDescriptorSetUpdateAfterBindInlineUniformBlocks"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceInlineUniformBlockProperties , maxDescriptorSetUpdateAfterBindInlineUniformBlocks) - 24usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkWriteDescriptorSetInlineUniformBlock"]
        [::core::mem::size_of::<VkWriteDescriptorSetInlineUniformBlock>() - 16usize];
    ["Alignment of VkWriteDescriptorSetInlineUniformBlock"]
        [::core::mem::align_of::<VkWriteDescriptorSetInlineUniformBlock>() - 4usize];
    ["Offset of field: VkWriteDescriptorSetInlineUniformBlock::sType"]
        [::core::mem::offset_of!(VkWriteDescriptorSetInlineUniformBlock, sType) - 0usize];
    ["Offset of field: VkWriteDescriptorSetInlineUniformBlock::pNext"]
        [::core::mem::offset_of!(VkWriteDescriptorSetInlineUniformBlock, pNext) - 4usize];
    ["Offset of field: VkWriteDescriptorSetInlineUniformBlock::dataSize"]
        [::core::mem::offset_of!(VkWriteDescriptorSetInlineUniformBlock, dataSize) - 8usize];
    ["Offset of field: VkWriteDescriptorSetInlineUniformBlock::pData"]
        [::core::mem::offset_of!(VkWriteDescriptorSetInlineUniformBlock, pData) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDescriptorPoolInlineUniformBlockCreateInfo"]
        [::core::mem::size_of::<VkDescriptorPoolInlineUniformBlockCreateInfo>() - 12usize];
    ["Alignment of VkDescriptorPoolInlineUniformBlockCreateInfo"]
        [::core::mem::align_of::<VkDescriptorPoolInlineUniformBlockCreateInfo>() - 4usize];
    ["Offset of field: VkDescriptorPoolInlineUniformBlockCreateInfo::sType"]
        [::core::mem::offset_of!(VkDescriptorPoolInlineUniformBlockCreateInfo, sType) - 0usize];
    ["Offset of field: VkDescriptorPoolInlineUniformBlockCreateInfo::pNext"]
        [::core::mem::offset_of!(VkDescriptorPoolInlineUniformBlockCreateInfo, pNext) - 4usize];
    ["Offset of field: VkDescriptorPoolInlineUniformBlockCreateInfo::maxInlineUniformBlockBindings"] [:: core :: mem :: offset_of ! (VkDescriptorPoolInlineUniformBlockCreateInfo , maxInlineUniformBlockBindings) - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceTextureCompressionASTCHDRFeatures"]
        [::core::mem::size_of::<VkPhysicalDeviceTextureCompressionASTCHDRFeatures>() - 12usize];
    ["Alignment of VkPhysicalDeviceTextureCompressionASTCHDRFeatures"]
        [::core::mem::align_of::<VkPhysicalDeviceTextureCompressionASTCHDRFeatures>() - 4usize];
    ["Offset of field: VkPhysicalDeviceTextureCompressionASTCHDRFeatures::sType"][::core::mem::offset_of!(
        VkPhysicalDeviceTextureCompressionASTCHDRFeatures,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceTextureCompressionASTCHDRFeatures::pNext"][::core::mem::offset_of!(
        VkPhysicalDeviceTextureCompressionASTCHDRFeatures,
        pNext
    ) - 4usize];
    ["Offset of field: VkPhysicalDeviceTextureCompressionASTCHDRFeatures::textureCompressionASTC_HDR"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceTextureCompressionASTCHDRFeatures , textureCompressionASTC_HDR) - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkRenderingAttachmentInfo"]
        [::core::mem::size_of::<VkRenderingAttachmentInfo>() - 64usize];
    ["Alignment of VkRenderingAttachmentInfo"]
        [::core::mem::align_of::<VkRenderingAttachmentInfo>() - 8usize];
    ["Offset of field: VkRenderingAttachmentInfo::sType"]
        [::core::mem::offset_of!(VkRenderingAttachmentInfo, sType) - 0usize];
    ["Offset of field: VkRenderingAttachmentInfo::pNext"]
        [::core::mem::offset_of!(VkRenderingAttachmentInfo, pNext) - 4usize];
    ["Offset of field: VkRenderingAttachmentInfo::imageView"]
        [::core::mem::offset_of!(VkRenderingAttachmentInfo, imageView) - 8usize];
    ["Offset of field: VkRenderingAttachmentInfo::imageLayout"]
        [::core::mem::offset_of!(VkRenderingAttachmentInfo, imageLayout) - 16usize];
    ["Offset of field: VkRenderingAttachmentInfo::resolveMode"]
        [::core::mem::offset_of!(VkRenderingAttachmentInfo, resolveMode) - 20usize];
    ["Offset of field: VkRenderingAttachmentInfo::resolveImageView"]
        [::core::mem::offset_of!(VkRenderingAttachmentInfo, resolveImageView) - 24usize];
    ["Offset of field: VkRenderingAttachmentInfo::resolveImageLayout"]
        [::core::mem::offset_of!(VkRenderingAttachmentInfo, resolveImageLayout) - 32usize];
    ["Offset of field: VkRenderingAttachmentInfo::loadOp"]
        [::core::mem::offset_of!(VkRenderingAttachmentInfo, loadOp) - 36usize];
    ["Offset of field: VkRenderingAttachmentInfo::storeOp"]
        [::core::mem::offset_of!(VkRenderingAttachmentInfo, storeOp) - 40usize];
    ["Offset of field: VkRenderingAttachmentInfo::clearValue"]
        [::core::mem::offset_of!(VkRenderingAttachmentInfo, clearValue) - 44usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkRenderingInfo"][::core::mem::size_of::<VkRenderingInfo>() - 52usize];
    ["Alignment of VkRenderingInfo"][::core::mem::align_of::<VkRenderingInfo>() - 4usize];
    ["Offset of field: VkRenderingInfo::sType"]
        [::core::mem::offset_of!(VkRenderingInfo, sType) - 0usize];
    ["Offset of field: VkRenderingInfo::pNext"]
        [::core::mem::offset_of!(VkRenderingInfo, pNext) - 4usize];
    ["Offset of field: VkRenderingInfo::flags"]
        [::core::mem::offset_of!(VkRenderingInfo, flags) - 8usize];
    ["Offset of field: VkRenderingInfo::renderArea"]
        [::core::mem::offset_of!(VkRenderingInfo, renderArea) - 12usize];
    ["Offset of field: VkRenderingInfo::layerCount"]
        [::core::mem::offset_of!(VkRenderingInfo, layerCount) - 28usize];
    ["Offset of field: VkRenderingInfo::viewMask"]
        [::core::mem::offset_of!(VkRenderingInfo, viewMask) - 32usize];
    ["Offset of field: VkRenderingInfo::colorAttachmentCount"]
        [::core::mem::offset_of!(VkRenderingInfo, colorAttachmentCount) - 36usize];
    ["Offset of field: VkRenderingInfo::pColorAttachments"]
        [::core::mem::offset_of!(VkRenderingInfo, pColorAttachments) - 40usize];
    ["Offset of field: VkRenderingInfo::pDepthAttachment"]
        [::core::mem::offset_of!(VkRenderingInfo, pDepthAttachment) - 44usize];
    ["Offset of field: VkRenderingInfo::pStencilAttachment"]
        [::core::mem::offset_of!(VkRenderingInfo, pStencilAttachment) - 48usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineRenderingCreateInfo"]
        [::core::mem::size_of::<VkPipelineRenderingCreateInfo>() - 28usize];
    ["Alignment of VkPipelineRenderingCreateInfo"]
        [::core::mem::align_of::<VkPipelineRenderingCreateInfo>() - 4usize];
    ["Offset of field: VkPipelineRenderingCreateInfo::sType"]
        [::core::mem::offset_of!(VkPipelineRenderingCreateInfo, sType) - 0usize];
    ["Offset of field: VkPipelineRenderingCreateInfo::pNext"]
        [::core::mem::offset_of!(VkPipelineRenderingCreateInfo, pNext) - 4usize];
    ["Offset of field: VkPipelineRenderingCreateInfo::viewMask"]
        [::core::mem::offset_of!(VkPipelineRenderingCreateInfo, viewMask) - 8usize];
    ["Offset of field: VkPipelineRenderingCreateInfo::colorAttachmentCount"]
        [::core::mem::offset_of!(VkPipelineRenderingCreateInfo, colorAttachmentCount) - 12usize];
    ["Offset of field: VkPipelineRenderingCreateInfo::pColorAttachmentFormats"]
        [::core::mem::offset_of!(VkPipelineRenderingCreateInfo, pColorAttachmentFormats) - 16usize];
    ["Offset of field: VkPipelineRenderingCreateInfo::depthAttachmentFormat"]
        [::core::mem::offset_of!(VkPipelineRenderingCreateInfo, depthAttachmentFormat) - 20usize];
    ["Offset of field: VkPipelineRenderingCreateInfo::stencilAttachmentFormat"]
        [::core::mem::offset_of!(VkPipelineRenderingCreateInfo, stencilAttachmentFormat) - 24usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceDynamicRenderingFeatures"]
        [::core::mem::size_of::<VkPhysicalDeviceDynamicRenderingFeatures>() - 12usize];
    ["Alignment of VkPhysicalDeviceDynamicRenderingFeatures"]
        [::core::mem::align_of::<VkPhysicalDeviceDynamicRenderingFeatures>() - 4usize];
    ["Offset of field: VkPhysicalDeviceDynamicRenderingFeatures::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceDynamicRenderingFeatures, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceDynamicRenderingFeatures::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceDynamicRenderingFeatures, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceDynamicRenderingFeatures::dynamicRendering"][::core::mem::offset_of!(
        VkPhysicalDeviceDynamicRenderingFeatures,
        dynamicRendering
    ) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkCommandBufferInheritanceRenderingInfo"]
        [::core::mem::size_of::<VkCommandBufferInheritanceRenderingInfo>() - 36usize];
    ["Alignment of VkCommandBufferInheritanceRenderingInfo"]
        [::core::mem::align_of::<VkCommandBufferInheritanceRenderingInfo>() - 4usize];
    ["Offset of field: VkCommandBufferInheritanceRenderingInfo::sType"]
        [::core::mem::offset_of!(VkCommandBufferInheritanceRenderingInfo, sType) - 0usize];
    ["Offset of field: VkCommandBufferInheritanceRenderingInfo::pNext"]
        [::core::mem::offset_of!(VkCommandBufferInheritanceRenderingInfo, pNext) - 4usize];
    ["Offset of field: VkCommandBufferInheritanceRenderingInfo::flags"]
        [::core::mem::offset_of!(VkCommandBufferInheritanceRenderingInfo, flags) - 8usize];
    ["Offset of field: VkCommandBufferInheritanceRenderingInfo::viewMask"]
        [::core::mem::offset_of!(VkCommandBufferInheritanceRenderingInfo, viewMask) - 12usize];
    ["Offset of field: VkCommandBufferInheritanceRenderingInfo::colorAttachmentCount"][::core::mem::offset_of!(
        VkCommandBufferInheritanceRenderingInfo,
        colorAttachmentCount
    ) - 16usize];
    ["Offset of field: VkCommandBufferInheritanceRenderingInfo::pColorAttachmentFormats"][::core::mem::offset_of!(
        VkCommandBufferInheritanceRenderingInfo,
        pColorAttachmentFormats
    )
        - 20usize];
    ["Offset of field: VkCommandBufferInheritanceRenderingInfo::depthAttachmentFormat"][::core::mem::offset_of!(
        VkCommandBufferInheritanceRenderingInfo,
        depthAttachmentFormat
    )
        - 24usize];
    ["Offset of field: VkCommandBufferInheritanceRenderingInfo::stencilAttachmentFormat"][::core::mem::offset_of!(
        VkCommandBufferInheritanceRenderingInfo,
        stencilAttachmentFormat
    )
        - 28usize];
    ["Offset of field: VkCommandBufferInheritanceRenderingInfo::rasterizationSamples"][::core::mem::offset_of!(
        VkCommandBufferInheritanceRenderingInfo,
        rasterizationSamples
    ) - 32usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceShaderIntegerDotProductFeatures"]
        [::core::mem::size_of::<VkPhysicalDeviceShaderIntegerDotProductFeatures>() - 12usize];
    ["Alignment of VkPhysicalDeviceShaderIntegerDotProductFeatures"]
        [::core::mem::align_of::<VkPhysicalDeviceShaderIntegerDotProductFeatures>() - 4usize];
    ["Offset of field: VkPhysicalDeviceShaderIntegerDotProductFeatures::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceShaderIntegerDotProductFeatures, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceShaderIntegerDotProductFeatures::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceShaderIntegerDotProductFeatures, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceShaderIntegerDotProductFeatures::shaderIntegerDotProduct"][::core::mem::offset_of!(
        VkPhysicalDeviceShaderIntegerDotProductFeatures,
        shaderIntegerDotProduct
    )
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceShaderIntegerDotProductProperties"]
        [::core::mem::size_of::<VkPhysicalDeviceShaderIntegerDotProductProperties>() - 128usize];
    ["Alignment of VkPhysicalDeviceShaderIntegerDotProductProperties"]
        [::core::mem::align_of::<VkPhysicalDeviceShaderIntegerDotProductProperties>() - 4usize];
    ["Offset of field: VkPhysicalDeviceShaderIntegerDotProductProperties::sType"][::core::mem::offset_of!(
        VkPhysicalDeviceShaderIntegerDotProductProperties,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceShaderIntegerDotProductProperties::pNext"][::core::mem::offset_of!(
        VkPhysicalDeviceShaderIntegerDotProductProperties,
        pNext
    ) - 4usize];
    ["Offset of field: VkPhysicalDeviceShaderIntegerDotProductProperties::integerDotProduct8BitUnsignedAccelerated"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceShaderIntegerDotProductProperties , integerDotProduct8BitUnsignedAccelerated) - 8usize] ;
    ["Offset of field: VkPhysicalDeviceShaderIntegerDotProductProperties::integerDotProduct8BitSignedAccelerated"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceShaderIntegerDotProductProperties , integerDotProduct8BitSignedAccelerated) - 12usize] ;
    ["Offset of field: VkPhysicalDeviceShaderIntegerDotProductProperties::integerDotProduct8BitMixedSignednessAccelerated"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceShaderIntegerDotProductProperties , integerDotProduct8BitMixedSignednessAccelerated) - 16usize] ;
    ["Offset of field: VkPhysicalDeviceShaderIntegerDotProductProperties::integerDotProduct4x8BitPackedUnsignedAccelerated"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceShaderIntegerDotProductProperties , integerDotProduct4x8BitPackedUnsignedAccelerated) - 20usize] ;
    ["Offset of field: VkPhysicalDeviceShaderIntegerDotProductProperties::integerDotProduct4x8BitPackedSignedAccelerated"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceShaderIntegerDotProductProperties , integerDotProduct4x8BitPackedSignedAccelerated) - 24usize] ;
    ["Offset of field: VkPhysicalDeviceShaderIntegerDotProductProperties::integerDotProduct4x8BitPackedMixedSignednessAccelerated"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceShaderIntegerDotProductProperties , integerDotProduct4x8BitPackedMixedSignednessAccelerated) - 28usize] ;
    ["Offset of field: VkPhysicalDeviceShaderIntegerDotProductProperties::integerDotProduct16BitUnsignedAccelerated"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceShaderIntegerDotProductProperties , integerDotProduct16BitUnsignedAccelerated) - 32usize] ;
    ["Offset of field: VkPhysicalDeviceShaderIntegerDotProductProperties::integerDotProduct16BitSignedAccelerated"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceShaderIntegerDotProductProperties , integerDotProduct16BitSignedAccelerated) - 36usize] ;
    ["Offset of field: VkPhysicalDeviceShaderIntegerDotProductProperties::integerDotProduct16BitMixedSignednessAccelerated"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceShaderIntegerDotProductProperties , integerDotProduct16BitMixedSignednessAccelerated) - 40usize] ;
    ["Offset of field: VkPhysicalDeviceShaderIntegerDotProductProperties::integerDotProduct32BitUnsignedAccelerated"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceShaderIntegerDotProductProperties , integerDotProduct32BitUnsignedAccelerated) - 44usize] ;
    ["Offset of field: VkPhysicalDeviceShaderIntegerDotProductProperties::integerDotProduct32BitSignedAccelerated"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceShaderIntegerDotProductProperties , integerDotProduct32BitSignedAccelerated) - 48usize] ;
    ["Offset of field: VkPhysicalDeviceShaderIntegerDotProductProperties::integerDotProduct32BitMixedSignednessAccelerated"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceShaderIntegerDotProductProperties , integerDotProduct32BitMixedSignednessAccelerated) - 52usize] ;
    ["Offset of field: VkPhysicalDeviceShaderIntegerDotProductProperties::integerDotProduct64BitUnsignedAccelerated"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceShaderIntegerDotProductProperties , integerDotProduct64BitUnsignedAccelerated) - 56usize] ;
    ["Offset of field: VkPhysicalDeviceShaderIntegerDotProductProperties::integerDotProduct64BitSignedAccelerated"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceShaderIntegerDotProductProperties , integerDotProduct64BitSignedAccelerated) - 60usize] ;
    ["Offset of field: VkPhysicalDeviceShaderIntegerDotProductProperties::integerDotProduct64BitMixedSignednessAccelerated"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceShaderIntegerDotProductProperties , integerDotProduct64BitMixedSignednessAccelerated) - 64usize] ;
    ["Offset of field: VkPhysicalDeviceShaderIntegerDotProductProperties::integerDotProductAccumulatingSaturating8BitUnsignedAccelerated"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceShaderIntegerDotProductProperties , integerDotProductAccumulatingSaturating8BitUnsignedAccelerated) - 68usize] ;
    ["Offset of field: VkPhysicalDeviceShaderIntegerDotProductProperties::integerDotProductAccumulatingSaturating8BitSignedAccelerated"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceShaderIntegerDotProductProperties , integerDotProductAccumulatingSaturating8BitSignedAccelerated) - 72usize] ;
    ["Offset of field: VkPhysicalDeviceShaderIntegerDotProductProperties::integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceShaderIntegerDotProductProperties , integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated) - 76usize] ;
    ["Offset of field: VkPhysicalDeviceShaderIntegerDotProductProperties::integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceShaderIntegerDotProductProperties , integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated) - 80usize] ;
    ["Offset of field: VkPhysicalDeviceShaderIntegerDotProductProperties::integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceShaderIntegerDotProductProperties , integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated) - 84usize] ;
    ["Offset of field: VkPhysicalDeviceShaderIntegerDotProductProperties::integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceShaderIntegerDotProductProperties , integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated) - 88usize] ;
    ["Offset of field: VkPhysicalDeviceShaderIntegerDotProductProperties::integerDotProductAccumulatingSaturating16BitUnsignedAccelerated"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceShaderIntegerDotProductProperties , integerDotProductAccumulatingSaturating16BitUnsignedAccelerated) - 92usize] ;
    ["Offset of field: VkPhysicalDeviceShaderIntegerDotProductProperties::integerDotProductAccumulatingSaturating16BitSignedAccelerated"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceShaderIntegerDotProductProperties , integerDotProductAccumulatingSaturating16BitSignedAccelerated) - 96usize] ;
    ["Offset of field: VkPhysicalDeviceShaderIntegerDotProductProperties::integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceShaderIntegerDotProductProperties , integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated) - 100usize] ;
    ["Offset of field: VkPhysicalDeviceShaderIntegerDotProductProperties::integerDotProductAccumulatingSaturating32BitUnsignedAccelerated"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceShaderIntegerDotProductProperties , integerDotProductAccumulatingSaturating32BitUnsignedAccelerated) - 104usize] ;
    ["Offset of field: VkPhysicalDeviceShaderIntegerDotProductProperties::integerDotProductAccumulatingSaturating32BitSignedAccelerated"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceShaderIntegerDotProductProperties , integerDotProductAccumulatingSaturating32BitSignedAccelerated) - 108usize] ;
    ["Offset of field: VkPhysicalDeviceShaderIntegerDotProductProperties::integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceShaderIntegerDotProductProperties , integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated) - 112usize] ;
    ["Offset of field: VkPhysicalDeviceShaderIntegerDotProductProperties::integerDotProductAccumulatingSaturating64BitUnsignedAccelerated"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceShaderIntegerDotProductProperties , integerDotProductAccumulatingSaturating64BitUnsignedAccelerated) - 116usize] ;
    ["Offset of field: VkPhysicalDeviceShaderIntegerDotProductProperties::integerDotProductAccumulatingSaturating64BitSignedAccelerated"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceShaderIntegerDotProductProperties , integerDotProductAccumulatingSaturating64BitSignedAccelerated) - 120usize] ;
    ["Offset of field: VkPhysicalDeviceShaderIntegerDotProductProperties::integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceShaderIntegerDotProductProperties , integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated) - 124usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceTexelBufferAlignmentProperties"]
        [::core::mem::size_of::<VkPhysicalDeviceTexelBufferAlignmentProperties>() - 40usize];
    ["Alignment of VkPhysicalDeviceTexelBufferAlignmentProperties"]
        [::core::mem::align_of::<VkPhysicalDeviceTexelBufferAlignmentProperties>() - 8usize];
    ["Offset of field: VkPhysicalDeviceTexelBufferAlignmentProperties::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceTexelBufferAlignmentProperties, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceTexelBufferAlignmentProperties::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceTexelBufferAlignmentProperties, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceTexelBufferAlignmentProperties::storageTexelBufferOffsetAlignmentBytes"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceTexelBufferAlignmentProperties , storageTexelBufferOffsetAlignmentBytes) - 8usize] ;
    ["Offset of field: VkPhysicalDeviceTexelBufferAlignmentProperties::storageTexelBufferOffsetSingleTexelAlignment"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceTexelBufferAlignmentProperties , storageTexelBufferOffsetSingleTexelAlignment) - 16usize] ;
    ["Offset of field: VkPhysicalDeviceTexelBufferAlignmentProperties::uniformTexelBufferOffsetAlignmentBytes"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceTexelBufferAlignmentProperties , uniformTexelBufferOffsetAlignmentBytes) - 24usize] ;
    ["Offset of field: VkPhysicalDeviceTexelBufferAlignmentProperties::uniformTexelBufferOffsetSingleTexelAlignment"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceTexelBufferAlignmentProperties , uniformTexelBufferOffsetSingleTexelAlignment) - 32usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkFormatProperties3"][::core::mem::size_of::<VkFormatProperties3>() - 32usize];
    ["Alignment of VkFormatProperties3"][::core::mem::align_of::<VkFormatProperties3>() - 8usize];
    ["Offset of field: VkFormatProperties3::sType"]
        [::core::mem::offset_of!(VkFormatProperties3, sType) - 0usize];
    ["Offset of field: VkFormatProperties3::pNext"]
        [::core::mem::offset_of!(VkFormatProperties3, pNext) - 4usize];
    ["Offset of field: VkFormatProperties3::linearTilingFeatures"]
        [::core::mem::offset_of!(VkFormatProperties3, linearTilingFeatures) - 8usize];
    ["Offset of field: VkFormatProperties3::optimalTilingFeatures"]
        [::core::mem::offset_of!(VkFormatProperties3, optimalTilingFeatures) - 16usize];
    ["Offset of field: VkFormatProperties3::bufferFeatures"]
        [::core::mem::offset_of!(VkFormatProperties3, bufferFeatures) - 24usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceMaintenance4Features"]
        [::core::mem::size_of::<VkPhysicalDeviceMaintenance4Features>() - 12usize];
    ["Alignment of VkPhysicalDeviceMaintenance4Features"]
        [::core::mem::align_of::<VkPhysicalDeviceMaintenance4Features>() - 4usize];
    ["Offset of field: VkPhysicalDeviceMaintenance4Features::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceMaintenance4Features, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceMaintenance4Features::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceMaintenance4Features, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceMaintenance4Features::maintenance4"]
        [::core::mem::offset_of!(VkPhysicalDeviceMaintenance4Features, maintenance4) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceMaintenance4Properties"]
        [::core::mem::size_of::<VkPhysicalDeviceMaintenance4Properties>() - 16usize];
    ["Alignment of VkPhysicalDeviceMaintenance4Properties"]
        [::core::mem::align_of::<VkPhysicalDeviceMaintenance4Properties>() - 8usize];
    ["Offset of field: VkPhysicalDeviceMaintenance4Properties::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceMaintenance4Properties, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceMaintenance4Properties::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceMaintenance4Properties, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceMaintenance4Properties::maxBufferSize"]
        [::core::mem::offset_of!(VkPhysicalDeviceMaintenance4Properties, maxBufferSize) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDeviceBufferMemoryRequirements"]
        [::core::mem::size_of::<VkDeviceBufferMemoryRequirements>() - 12usize];
    ["Alignment of VkDeviceBufferMemoryRequirements"]
        [::core::mem::align_of::<VkDeviceBufferMemoryRequirements>() - 4usize];
    ["Offset of field: VkDeviceBufferMemoryRequirements::sType"]
        [::core::mem::offset_of!(VkDeviceBufferMemoryRequirements, sType) - 0usize];
    ["Offset of field: VkDeviceBufferMemoryRequirements::pNext"]
        [::core::mem::offset_of!(VkDeviceBufferMemoryRequirements, pNext) - 4usize];
    ["Offset of field: VkDeviceBufferMemoryRequirements::pCreateInfo"]
        [::core::mem::offset_of!(VkDeviceBufferMemoryRequirements, pCreateInfo) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDeviceImageMemoryRequirements"]
        [::core::mem::size_of::<VkDeviceImageMemoryRequirements>() - 16usize];
    ["Alignment of VkDeviceImageMemoryRequirements"]
        [::core::mem::align_of::<VkDeviceImageMemoryRequirements>() - 4usize];
    ["Offset of field: VkDeviceImageMemoryRequirements::sType"]
        [::core::mem::offset_of!(VkDeviceImageMemoryRequirements, sType) - 0usize];
    ["Offset of field: VkDeviceImageMemoryRequirements::pNext"]
        [::core::mem::offset_of!(VkDeviceImageMemoryRequirements, pNext) - 4usize];
    ["Offset of field: VkDeviceImageMemoryRequirements::pCreateInfo"]
        [::core::mem::offset_of!(VkDeviceImageMemoryRequirements, pCreateInfo) - 8usize];
    ["Offset of field: VkDeviceImageMemoryRequirements::planeAspect"]
        [::core::mem::offset_of!(VkDeviceImageMemoryRequirements, planeAspect) - 12usize];
};
pub const VkPipelineRobustnessBufferBehavior_VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DEVICE_DEFAULT : VkPipelineRobustnessBufferBehavior = 0 ;
pub const VkPipelineRobustnessBufferBehavior_VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DISABLED:
    VkPipelineRobustnessBufferBehavior = 1;
pub const VkPipelineRobustnessBufferBehavior_VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS : VkPipelineRobustnessBufferBehavior = 2 ;
pub const VkPipelineRobustnessBufferBehavior_VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_2 : VkPipelineRobustnessBufferBehavior = 3 ;
pub const VkPipelineRobustnessBufferBehavior_VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DEVICE_DEFAULT_EXT : VkPipelineRobustnessBufferBehavior = 0 ;
pub const VkPipelineRobustnessBufferBehavior_VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DISABLED_EXT:
    VkPipelineRobustnessBufferBehavior = 1;
pub const VkPipelineRobustnessBufferBehavior_VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_EXT : VkPipelineRobustnessBufferBehavior = 2 ;
pub const VkPipelineRobustnessBufferBehavior_VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_2_EXT : VkPipelineRobustnessBufferBehavior = 3 ;
pub const VkPipelineRobustnessBufferBehavior_VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_MAX_ENUM:
    VkPipelineRobustnessBufferBehavior = 2147483647;
pub const VkPipelineRobustnessImageBehavior_VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DEVICE_DEFAULT:
    VkPipelineRobustnessImageBehavior = 0;
pub const VkPipelineRobustnessImageBehavior_VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DISABLED:
    VkPipelineRobustnessImageBehavior = 1;
pub const VkPipelineRobustnessImageBehavior_VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS : VkPipelineRobustnessImageBehavior = 2 ;
pub const VkPipelineRobustnessImageBehavior_VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_2 : VkPipelineRobustnessImageBehavior = 3 ;
pub const VkPipelineRobustnessImageBehavior_VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DEVICE_DEFAULT_EXT : VkPipelineRobustnessImageBehavior = 0 ;
pub const VkPipelineRobustnessImageBehavior_VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DISABLED_EXT:
    VkPipelineRobustnessImageBehavior = 1;
pub const VkPipelineRobustnessImageBehavior_VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_EXT : VkPipelineRobustnessImageBehavior = 2 ;
pub const VkPipelineRobustnessImageBehavior_VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_2_EXT : VkPipelineRobustnessImageBehavior = 3 ;
pub const VkPipelineRobustnessImageBehavior_VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_MAX_ENUM:
    VkPipelineRobustnessImageBehavior = 2147483647;
pub const VkQueueGlobalPriority_VK_QUEUE_GLOBAL_PRIORITY_LOW: VkQueueGlobalPriority = 128;
pub const VkQueueGlobalPriority_VK_QUEUE_GLOBAL_PRIORITY_MEDIUM: VkQueueGlobalPriority = 256;
pub const VkQueueGlobalPriority_VK_QUEUE_GLOBAL_PRIORITY_HIGH: VkQueueGlobalPriority = 512;
pub const VkQueueGlobalPriority_VK_QUEUE_GLOBAL_PRIORITY_REALTIME: VkQueueGlobalPriority = 1024;
pub const VkQueueGlobalPriority_VK_QUEUE_GLOBAL_PRIORITY_LOW_EXT: VkQueueGlobalPriority = 128;
pub const VkQueueGlobalPriority_VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_EXT: VkQueueGlobalPriority = 256;
pub const VkQueueGlobalPriority_VK_QUEUE_GLOBAL_PRIORITY_HIGH_EXT: VkQueueGlobalPriority = 512;
pub const VkQueueGlobalPriority_VK_QUEUE_GLOBAL_PRIORITY_REALTIME_EXT: VkQueueGlobalPriority = 1024;
pub const VkQueueGlobalPriority_VK_QUEUE_GLOBAL_PRIORITY_LOW_KHR: VkQueueGlobalPriority = 128;
pub const VkQueueGlobalPriority_VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_KHR: VkQueueGlobalPriority = 256;
pub const VkQueueGlobalPriority_VK_QUEUE_GLOBAL_PRIORITY_HIGH_KHR: VkQueueGlobalPriority = 512;
pub const VkQueueGlobalPriority_VK_QUEUE_GLOBAL_PRIORITY_REALTIME_KHR: VkQueueGlobalPriority = 1024;
pub const VkQueueGlobalPriority_VK_QUEUE_GLOBAL_PRIORITY_MAX_ENUM: VkQueueGlobalPriority =
    2147483647;
pub const VkLineRasterizationMode_VK_LINE_RASTERIZATION_MODE_DEFAULT: VkLineRasterizationMode = 0;
pub const VkLineRasterizationMode_VK_LINE_RASTERIZATION_MODE_RECTANGULAR: VkLineRasterizationMode =
    1;
pub const VkLineRasterizationMode_VK_LINE_RASTERIZATION_MODE_BRESENHAM: VkLineRasterizationMode = 2;
pub const VkLineRasterizationMode_VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH:
    VkLineRasterizationMode = 3;
pub const VkLineRasterizationMode_VK_LINE_RASTERIZATION_MODE_DEFAULT_EXT: VkLineRasterizationMode =
    0;
pub const VkLineRasterizationMode_VK_LINE_RASTERIZATION_MODE_RECTANGULAR_EXT:
    VkLineRasterizationMode = 1;
pub const VkLineRasterizationMode_VK_LINE_RASTERIZATION_MODE_BRESENHAM_EXT:
    VkLineRasterizationMode = 2;
pub const VkLineRasterizationMode_VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_EXT:
    VkLineRasterizationMode = 3;
pub const VkLineRasterizationMode_VK_LINE_RASTERIZATION_MODE_DEFAULT_KHR: VkLineRasterizationMode =
    0;
pub const VkLineRasterizationMode_VK_LINE_RASTERIZATION_MODE_RECTANGULAR_KHR:
    VkLineRasterizationMode = 1;
pub const VkLineRasterizationMode_VK_LINE_RASTERIZATION_MODE_BRESENHAM_KHR:
    VkLineRasterizationMode = 2;
pub const VkLineRasterizationMode_VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_KHR:
    VkLineRasterizationMode = 3;
pub const VkLineRasterizationMode_VK_LINE_RASTERIZATION_MODE_MAX_ENUM: VkLineRasterizationMode =
    2147483647;
pub const VkMemoryUnmapFlagBits_VK_MEMORY_UNMAP_RESERVE_BIT_EXT: VkMemoryUnmapFlagBits = 1;
pub const VkMemoryUnmapFlagBits_VK_MEMORY_UNMAP_FLAG_BITS_MAX_ENUM: VkMemoryUnmapFlagBits =
    2147483647;
pub const VK_PIPELINE_CREATE_2_DISABLE_OPTIMIZATION_BIT: VkPipelineCreateFlagBits2 = 1;
pub const VK_PIPELINE_CREATE_2_ALLOW_DERIVATIVES_BIT: VkPipelineCreateFlagBits2 = 2;
pub const VK_PIPELINE_CREATE_2_DERIVATIVE_BIT: VkPipelineCreateFlagBits2 = 4;
pub const VK_PIPELINE_CREATE_2_VIEW_INDEX_FROM_DEVICE_INDEX_BIT: VkPipelineCreateFlagBits2 = 8;
pub const VK_PIPELINE_CREATE_2_DISPATCH_BASE_BIT: VkPipelineCreateFlagBits2 = 16;
pub const VK_PIPELINE_CREATE_2_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT: VkPipelineCreateFlagBits2 =
    256;
pub const VK_PIPELINE_CREATE_2_EARLY_RETURN_ON_FAILURE_BIT: VkPipelineCreateFlagBits2 = 512;
pub const VK_PIPELINE_CREATE_2_NO_PROTECTED_ACCESS_BIT: VkPipelineCreateFlagBits2 = 134217728;
pub const VK_PIPELINE_CREATE_2_PROTECTED_ACCESS_ONLY_BIT: VkPipelineCreateFlagBits2 = 1073741824;
pub const VK_PIPELINE_CREATE_2_RAY_TRACING_SKIP_BUILT_IN_PRIMITIVES_BIT_KHR:
    VkPipelineCreateFlagBits2 = 4096;
pub const VK_PIPELINE_CREATE_2_RAY_TRACING_ALLOW_SPHERES_AND_LINEAR_SWEPT_SPHERES_BIT_NV:
    VkPipelineCreateFlagBits2 = 8589934592;
pub const VK_PIPELINE_CREATE_2_ENABLE_LEGACY_DITHERING_BIT_EXT: VkPipelineCreateFlagBits2 =
    17179869184;
pub const VK_PIPELINE_CREATE_2_DISABLE_OPTIMIZATION_BIT_KHR: VkPipelineCreateFlagBits2 = 1;
pub const VK_PIPELINE_CREATE_2_ALLOW_DERIVATIVES_BIT_KHR: VkPipelineCreateFlagBits2 = 2;
pub const VK_PIPELINE_CREATE_2_DERIVATIVE_BIT_KHR: VkPipelineCreateFlagBits2 = 4;
pub const VK_PIPELINE_CREATE_2_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHR: VkPipelineCreateFlagBits2 = 8;
pub const VK_PIPELINE_CREATE_2_DISPATCH_BASE_BIT_KHR: VkPipelineCreateFlagBits2 = 16;
pub const VK_PIPELINE_CREATE_2_DEFER_COMPILE_BIT_NV: VkPipelineCreateFlagBits2 = 32;
pub const VK_PIPELINE_CREATE_2_CAPTURE_STATISTICS_BIT_KHR: VkPipelineCreateFlagBits2 = 64;
pub const VK_PIPELINE_CREATE_2_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR: VkPipelineCreateFlagBits2 =
    128;
pub const VK_PIPELINE_CREATE_2_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT_KHR:
    VkPipelineCreateFlagBits2 = 256;
pub const VK_PIPELINE_CREATE_2_EARLY_RETURN_ON_FAILURE_BIT_KHR: VkPipelineCreateFlagBits2 = 512;
pub const VK_PIPELINE_CREATE_2_LINK_TIME_OPTIMIZATION_BIT_EXT: VkPipelineCreateFlagBits2 = 1024;
pub const VK_PIPELINE_CREATE_2_RETAIN_LINK_TIME_OPTIMIZATION_INFO_BIT_EXT:
    VkPipelineCreateFlagBits2 = 8388608;
pub const VK_PIPELINE_CREATE_2_LIBRARY_BIT_KHR: VkPipelineCreateFlagBits2 = 2048;
pub const VK_PIPELINE_CREATE_2_RAY_TRACING_SKIP_TRIANGLES_BIT_KHR: VkPipelineCreateFlagBits2 = 4096;
pub const VK_PIPELINE_CREATE_2_RAY_TRACING_SKIP_AABBS_BIT_KHR: VkPipelineCreateFlagBits2 = 8192;
pub const VK_PIPELINE_CREATE_2_RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_BIT_KHR:
    VkPipelineCreateFlagBits2 = 16384;
pub const VK_PIPELINE_CREATE_2_RAY_TRACING_NO_NULL_CLOSEST_HIT_SHADERS_BIT_KHR:
    VkPipelineCreateFlagBits2 = 32768;
pub const VK_PIPELINE_CREATE_2_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR: VkPipelineCreateFlagBits2 =
    65536;
pub const VK_PIPELINE_CREATE_2_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR:
    VkPipelineCreateFlagBits2 = 131072;
pub const VK_PIPELINE_CREATE_2_RAY_TRACING_SHADER_GROUP_HANDLE_CAPTURE_REPLAY_BIT_KHR:
    VkPipelineCreateFlagBits2 = 524288;
pub const VK_PIPELINE_CREATE_2_INDIRECT_BINDABLE_BIT_NV: VkPipelineCreateFlagBits2 = 262144;
pub const VK_PIPELINE_CREATE_2_RAY_TRACING_ALLOW_MOTION_BIT_NV: VkPipelineCreateFlagBits2 = 1048576;
pub const VK_PIPELINE_CREATE_2_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR:
    VkPipelineCreateFlagBits2 = 2097152;
pub const VK_PIPELINE_CREATE_2_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT:
    VkPipelineCreateFlagBits2 = 4194304;
pub const VK_PIPELINE_CREATE_2_RAY_TRACING_OPACITY_MICROMAP_BIT_EXT: VkPipelineCreateFlagBits2 =
    16777216;
pub const VK_PIPELINE_CREATE_2_COLOR_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT: VkPipelineCreateFlagBits2 =
    33554432;
pub const VK_PIPELINE_CREATE_2_DEPTH_STENCIL_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT:
    VkPipelineCreateFlagBits2 = 67108864;
pub const VK_PIPELINE_CREATE_2_NO_PROTECTED_ACCESS_BIT_EXT: VkPipelineCreateFlagBits2 = 134217728;
pub const VK_PIPELINE_CREATE_2_PROTECTED_ACCESS_ONLY_BIT_EXT: VkPipelineCreateFlagBits2 =
    1073741824;
pub const VK_PIPELINE_CREATE_2_RAY_TRACING_DISPLACEMENT_MICROMAP_BIT_NV: VkPipelineCreateFlagBits2 =
    268435456;
pub const VK_PIPELINE_CREATE_2_DESCRIPTOR_BUFFER_BIT_EXT: VkPipelineCreateFlagBits2 = 536870912;
pub const VK_PIPELINE_CREATE_2_DISALLOW_OPACITY_MICROMAP_BIT_ARM: VkPipelineCreateFlagBits2 =
    137438953472;
pub const VK_PIPELINE_CREATE_2_CAPTURE_DATA_BIT_KHR: VkPipelineCreateFlagBits2 = 2147483648;
pub const VK_PIPELINE_CREATE_2_INDIRECT_BINDABLE_BIT_EXT: VkPipelineCreateFlagBits2 = 274877906944;
pub const VK_BUFFER_USAGE_2_TRANSFER_SRC_BIT: VkBufferUsageFlagBits2 = 1;
pub const VK_BUFFER_USAGE_2_TRANSFER_DST_BIT: VkBufferUsageFlagBits2 = 2;
pub const VK_BUFFER_USAGE_2_UNIFORM_TEXEL_BUFFER_BIT: VkBufferUsageFlagBits2 = 4;
pub const VK_BUFFER_USAGE_2_STORAGE_TEXEL_BUFFER_BIT: VkBufferUsageFlagBits2 = 8;
pub const VK_BUFFER_USAGE_2_UNIFORM_BUFFER_BIT: VkBufferUsageFlagBits2 = 16;
pub const VK_BUFFER_USAGE_2_STORAGE_BUFFER_BIT: VkBufferUsageFlagBits2 = 32;
pub const VK_BUFFER_USAGE_2_INDEX_BUFFER_BIT: VkBufferUsageFlagBits2 = 64;
pub const VK_BUFFER_USAGE_2_VERTEX_BUFFER_BIT: VkBufferUsageFlagBits2 = 128;
pub const VK_BUFFER_USAGE_2_INDIRECT_BUFFER_BIT: VkBufferUsageFlagBits2 = 256;
pub const VK_BUFFER_USAGE_2_SHADER_DEVICE_ADDRESS_BIT: VkBufferUsageFlagBits2 = 131072;
pub const VK_BUFFER_USAGE_2_TRANSFER_SRC_BIT_KHR: VkBufferUsageFlagBits2 = 1;
pub const VK_BUFFER_USAGE_2_TRANSFER_DST_BIT_KHR: VkBufferUsageFlagBits2 = 2;
pub const VK_BUFFER_USAGE_2_UNIFORM_TEXEL_BUFFER_BIT_KHR: VkBufferUsageFlagBits2 = 4;
pub const VK_BUFFER_USAGE_2_STORAGE_TEXEL_BUFFER_BIT_KHR: VkBufferUsageFlagBits2 = 8;
pub const VK_BUFFER_USAGE_2_UNIFORM_BUFFER_BIT_KHR: VkBufferUsageFlagBits2 = 16;
pub const VK_BUFFER_USAGE_2_STORAGE_BUFFER_BIT_KHR: VkBufferUsageFlagBits2 = 32;
pub const VK_BUFFER_USAGE_2_INDEX_BUFFER_BIT_KHR: VkBufferUsageFlagBits2 = 64;
pub const VK_BUFFER_USAGE_2_VERTEX_BUFFER_BIT_KHR: VkBufferUsageFlagBits2 = 128;
pub const VK_BUFFER_USAGE_2_INDIRECT_BUFFER_BIT_KHR: VkBufferUsageFlagBits2 = 256;
pub const VK_BUFFER_USAGE_2_CONDITIONAL_RENDERING_BIT_EXT: VkBufferUsageFlagBits2 = 512;
pub const VK_BUFFER_USAGE_2_SHADER_BINDING_TABLE_BIT_KHR: VkBufferUsageFlagBits2 = 1024;
pub const VK_BUFFER_USAGE_2_RAY_TRACING_BIT_NV: VkBufferUsageFlagBits2 = 1024;
pub const VK_BUFFER_USAGE_2_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT: VkBufferUsageFlagBits2 = 2048;
pub const VK_BUFFER_USAGE_2_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT: VkBufferUsageFlagBits2 =
    4096;
pub const VK_BUFFER_USAGE_2_VIDEO_DECODE_SRC_BIT_KHR: VkBufferUsageFlagBits2 = 8192;
pub const VK_BUFFER_USAGE_2_VIDEO_DECODE_DST_BIT_KHR: VkBufferUsageFlagBits2 = 16384;
pub const VK_BUFFER_USAGE_2_VIDEO_ENCODE_DST_BIT_KHR: VkBufferUsageFlagBits2 = 32768;
pub const VK_BUFFER_USAGE_2_VIDEO_ENCODE_SRC_BIT_KHR: VkBufferUsageFlagBits2 = 65536;
pub const VK_BUFFER_USAGE_2_SHADER_DEVICE_ADDRESS_BIT_KHR: VkBufferUsageFlagBits2 = 131072;
pub const VK_BUFFER_USAGE_2_ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY_BIT_KHR:
    VkBufferUsageFlagBits2 = 524288;
pub const VK_BUFFER_USAGE_2_ACCELERATION_STRUCTURE_STORAGE_BIT_KHR: VkBufferUsageFlagBits2 =
    1048576;
pub const VK_BUFFER_USAGE_2_SAMPLER_DESCRIPTOR_BUFFER_BIT_EXT: VkBufferUsageFlagBits2 = 2097152;
pub const VK_BUFFER_USAGE_2_RESOURCE_DESCRIPTOR_BUFFER_BIT_EXT: VkBufferUsageFlagBits2 = 4194304;
pub const VK_BUFFER_USAGE_2_PUSH_DESCRIPTORS_DESCRIPTOR_BUFFER_BIT_EXT: VkBufferUsageFlagBits2 =
    67108864;
pub const VK_BUFFER_USAGE_2_MICROMAP_BUILD_INPUT_READ_ONLY_BIT_EXT: VkBufferUsageFlagBits2 =
    8388608;
pub const VK_BUFFER_USAGE_2_MICROMAP_STORAGE_BIT_EXT: VkBufferUsageFlagBits2 = 16777216;
pub const VK_BUFFER_USAGE_2_TILE_MEMORY_BIT_QCOM: VkBufferUsageFlagBits2 = 134217728;
pub const VK_BUFFER_USAGE_2_PREPROCESS_BUFFER_BIT_EXT: VkBufferUsageFlagBits2 = 2147483648;
pub const VkHostImageCopyFlagBits_VK_HOST_IMAGE_COPY_MEMCPY: VkHostImageCopyFlagBits = 1;
pub const VkHostImageCopyFlagBits_VK_HOST_IMAGE_COPY_MEMCPY_EXT: VkHostImageCopyFlagBits = 1;
pub const VkHostImageCopyFlagBits_VK_HOST_IMAGE_COPY_FLAG_BITS_MAX_ENUM: VkHostImageCopyFlagBits =
    2147483647;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceVulkan14Features"]
        [::core::mem::size_of::<VkPhysicalDeviceVulkan14Features>() - 92usize];
    ["Alignment of VkPhysicalDeviceVulkan14Features"]
        [::core::mem::align_of::<VkPhysicalDeviceVulkan14Features>() - 4usize];
    ["Offset of field: VkPhysicalDeviceVulkan14Features::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceVulkan14Features, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceVulkan14Features::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceVulkan14Features, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceVulkan14Features::globalPriorityQuery"]
        [::core::mem::offset_of!(VkPhysicalDeviceVulkan14Features, globalPriorityQuery) - 8usize];
    ["Offset of field: VkPhysicalDeviceVulkan14Features::shaderSubgroupRotate"]
        [::core::mem::offset_of!(VkPhysicalDeviceVulkan14Features, shaderSubgroupRotate) - 12usize];
    ["Offset of field: VkPhysicalDeviceVulkan14Features::shaderSubgroupRotateClustered"][::core::mem::offset_of!(
        VkPhysicalDeviceVulkan14Features,
        shaderSubgroupRotateClustered
    )
        - 16usize];
    ["Offset of field: VkPhysicalDeviceVulkan14Features::shaderFloatControls2"]
        [::core::mem::offset_of!(VkPhysicalDeviceVulkan14Features, shaderFloatControls2) - 20usize];
    ["Offset of field: VkPhysicalDeviceVulkan14Features::shaderExpectAssume"]
        [::core::mem::offset_of!(VkPhysicalDeviceVulkan14Features, shaderExpectAssume) - 24usize];
    ["Offset of field: VkPhysicalDeviceVulkan14Features::rectangularLines"]
        [::core::mem::offset_of!(VkPhysicalDeviceVulkan14Features, rectangularLines) - 28usize];
    ["Offset of field: VkPhysicalDeviceVulkan14Features::bresenhamLines"]
        [::core::mem::offset_of!(VkPhysicalDeviceVulkan14Features, bresenhamLines) - 32usize];
    ["Offset of field: VkPhysicalDeviceVulkan14Features::smoothLines"]
        [::core::mem::offset_of!(VkPhysicalDeviceVulkan14Features, smoothLines) - 36usize];
    ["Offset of field: VkPhysicalDeviceVulkan14Features::stippledRectangularLines"][::core::mem::offset_of!(
        VkPhysicalDeviceVulkan14Features,
        stippledRectangularLines
    ) - 40usize];
    ["Offset of field: VkPhysicalDeviceVulkan14Features::stippledBresenhamLines"][::core::mem::offset_of!(
        VkPhysicalDeviceVulkan14Features,
        stippledBresenhamLines
    ) - 44usize];
    ["Offset of field: VkPhysicalDeviceVulkan14Features::stippledSmoothLines"]
        [::core::mem::offset_of!(VkPhysicalDeviceVulkan14Features, stippledSmoothLines) - 48usize];
    ["Offset of field: VkPhysicalDeviceVulkan14Features::vertexAttributeInstanceRateDivisor"][::core::mem::offset_of!(
        VkPhysicalDeviceVulkan14Features,
        vertexAttributeInstanceRateDivisor
    )
        - 52usize];
    ["Offset of field: VkPhysicalDeviceVulkan14Features::vertexAttributeInstanceRateZeroDivisor"][::core::mem::offset_of!(
        VkPhysicalDeviceVulkan14Features,
        vertexAttributeInstanceRateZeroDivisor
    )
        - 56usize];
    ["Offset of field: VkPhysicalDeviceVulkan14Features::indexTypeUint8"]
        [::core::mem::offset_of!(VkPhysicalDeviceVulkan14Features, indexTypeUint8) - 60usize];
    ["Offset of field: VkPhysicalDeviceVulkan14Features::dynamicRenderingLocalRead"][::core::mem::offset_of!(
        VkPhysicalDeviceVulkan14Features,
        dynamicRenderingLocalRead
    ) - 64usize];
    ["Offset of field: VkPhysicalDeviceVulkan14Features::maintenance5"]
        [::core::mem::offset_of!(VkPhysicalDeviceVulkan14Features, maintenance5) - 68usize];
    ["Offset of field: VkPhysicalDeviceVulkan14Features::maintenance6"]
        [::core::mem::offset_of!(VkPhysicalDeviceVulkan14Features, maintenance6) - 72usize];
    ["Offset of field: VkPhysicalDeviceVulkan14Features::pipelineProtectedAccess"][::core::mem::offset_of!(
        VkPhysicalDeviceVulkan14Features,
        pipelineProtectedAccess
    ) - 76usize];
    ["Offset of field: VkPhysicalDeviceVulkan14Features::pipelineRobustness"]
        [::core::mem::offset_of!(VkPhysicalDeviceVulkan14Features, pipelineRobustness) - 80usize];
    ["Offset of field: VkPhysicalDeviceVulkan14Features::hostImageCopy"]
        [::core::mem::offset_of!(VkPhysicalDeviceVulkan14Features, hostImageCopy) - 84usize];
    ["Offset of field: VkPhysicalDeviceVulkan14Features::pushDescriptor"]
        [::core::mem::offset_of!(VkPhysicalDeviceVulkan14Features, pushDescriptor) - 88usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceVulkan14Properties"]
        [::core::mem::size_of::<VkPhysicalDeviceVulkan14Properties>() - 120usize];
    ["Alignment of VkPhysicalDeviceVulkan14Properties"]
        [::core::mem::align_of::<VkPhysicalDeviceVulkan14Properties>() - 4usize];
    ["Offset of field: VkPhysicalDeviceVulkan14Properties::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceVulkan14Properties, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceVulkan14Properties::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceVulkan14Properties, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceVulkan14Properties::lineSubPixelPrecisionBits"][::core::mem::offset_of!(
        VkPhysicalDeviceVulkan14Properties,
        lineSubPixelPrecisionBits
    ) - 8usize];
    ["Offset of field: VkPhysicalDeviceVulkan14Properties::maxVertexAttribDivisor"][::core::mem::offset_of!(
        VkPhysicalDeviceVulkan14Properties,
        maxVertexAttribDivisor
    ) - 12usize];
    ["Offset of field: VkPhysicalDeviceVulkan14Properties::supportsNonZeroFirstInstance"][::core::mem::offset_of!(
        VkPhysicalDeviceVulkan14Properties,
        supportsNonZeroFirstInstance
    )
        - 16usize];
    ["Offset of field: VkPhysicalDeviceVulkan14Properties::maxPushDescriptors"]
        [::core::mem::offset_of!(VkPhysicalDeviceVulkan14Properties, maxPushDescriptors) - 20usize];
    ["Offset of field: VkPhysicalDeviceVulkan14Properties::dynamicRenderingLocalReadDepthStencilAttachments"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceVulkan14Properties , dynamicRenderingLocalReadDepthStencilAttachments) - 24usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan14Properties::dynamicRenderingLocalReadMultisampledAttachments"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceVulkan14Properties , dynamicRenderingLocalReadMultisampledAttachments) - 28usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan14Properties::earlyFragmentMultisampleCoverageAfterSampleCounting"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceVulkan14Properties , earlyFragmentMultisampleCoverageAfterSampleCounting) - 32usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan14Properties::earlyFragmentSampleMaskTestBeforeSampleCounting"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceVulkan14Properties , earlyFragmentSampleMaskTestBeforeSampleCounting) - 36usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan14Properties::depthStencilSwizzleOneSupport"][::core::mem::offset_of!(
        VkPhysicalDeviceVulkan14Properties,
        depthStencilSwizzleOneSupport
    )
        - 40usize];
    ["Offset of field: VkPhysicalDeviceVulkan14Properties::polygonModePointSize"][::core::mem::offset_of!(
        VkPhysicalDeviceVulkan14Properties,
        polygonModePointSize
    ) - 44usize];
    ["Offset of field: VkPhysicalDeviceVulkan14Properties::nonStrictSinglePixelWideLinesUseParallelogram"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceVulkan14Properties , nonStrictSinglePixelWideLinesUseParallelogram) - 48usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan14Properties::nonStrictWideLinesUseParallelogram"][::core::mem::offset_of!(
        VkPhysicalDeviceVulkan14Properties,
        nonStrictWideLinesUseParallelogram
    )
        - 52usize];
    ["Offset of field: VkPhysicalDeviceVulkan14Properties::blockTexelViewCompatibleMultipleLayers"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceVulkan14Properties , blockTexelViewCompatibleMultipleLayers) - 56usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan14Properties::maxCombinedImageSamplerDescriptorCount"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceVulkan14Properties , maxCombinedImageSamplerDescriptorCount) - 60usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan14Properties::fragmentShadingRateClampCombinerInputs"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceVulkan14Properties , fragmentShadingRateClampCombinerInputs) - 64usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan14Properties::defaultRobustnessStorageBuffers"][::core::mem::offset_of!(
        VkPhysicalDeviceVulkan14Properties,
        defaultRobustnessStorageBuffers
    )
        - 68usize];
    ["Offset of field: VkPhysicalDeviceVulkan14Properties::defaultRobustnessUniformBuffers"][::core::mem::offset_of!(
        VkPhysicalDeviceVulkan14Properties,
        defaultRobustnessUniformBuffers
    )
        - 72usize];
    ["Offset of field: VkPhysicalDeviceVulkan14Properties::defaultRobustnessVertexInputs"][::core::mem::offset_of!(
        VkPhysicalDeviceVulkan14Properties,
        defaultRobustnessVertexInputs
    )
        - 76usize];
    ["Offset of field: VkPhysicalDeviceVulkan14Properties::defaultRobustnessImages"][::core::mem::offset_of!(
        VkPhysicalDeviceVulkan14Properties,
        defaultRobustnessImages
    ) - 80usize];
    ["Offset of field: VkPhysicalDeviceVulkan14Properties::copySrcLayoutCount"]
        [::core::mem::offset_of!(VkPhysicalDeviceVulkan14Properties, copySrcLayoutCount) - 84usize];
    ["Offset of field: VkPhysicalDeviceVulkan14Properties::pCopySrcLayouts"]
        [::core::mem::offset_of!(VkPhysicalDeviceVulkan14Properties, pCopySrcLayouts) - 88usize];
    ["Offset of field: VkPhysicalDeviceVulkan14Properties::copyDstLayoutCount"]
        [::core::mem::offset_of!(VkPhysicalDeviceVulkan14Properties, copyDstLayoutCount) - 92usize];
    ["Offset of field: VkPhysicalDeviceVulkan14Properties::pCopyDstLayouts"]
        [::core::mem::offset_of!(VkPhysicalDeviceVulkan14Properties, pCopyDstLayouts) - 96usize];
    ["Offset of field: VkPhysicalDeviceVulkan14Properties::optimalTilingLayoutUUID"][::core::mem::offset_of!(
        VkPhysicalDeviceVulkan14Properties,
        optimalTilingLayoutUUID
    ) - 100usize];
    ["Offset of field: VkPhysicalDeviceVulkan14Properties::identicalMemoryTypeRequirements"][::core::mem::offset_of!(
        VkPhysicalDeviceVulkan14Properties,
        identicalMemoryTypeRequirements
    )
        - 116usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDeviceQueueGlobalPriorityCreateInfo"]
        [::core::mem::size_of::<VkDeviceQueueGlobalPriorityCreateInfo>() - 12usize];
    ["Alignment of VkDeviceQueueGlobalPriorityCreateInfo"]
        [::core::mem::align_of::<VkDeviceQueueGlobalPriorityCreateInfo>() - 4usize];
    ["Offset of field: VkDeviceQueueGlobalPriorityCreateInfo::sType"]
        [::core::mem::offset_of!(VkDeviceQueueGlobalPriorityCreateInfo, sType) - 0usize];
    ["Offset of field: VkDeviceQueueGlobalPriorityCreateInfo::pNext"]
        [::core::mem::offset_of!(VkDeviceQueueGlobalPriorityCreateInfo, pNext) - 4usize];
    ["Offset of field: VkDeviceQueueGlobalPriorityCreateInfo::globalPriority"]
        [::core::mem::offset_of!(VkDeviceQueueGlobalPriorityCreateInfo, globalPriority) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceGlobalPriorityQueryFeatures"]
        [::core::mem::size_of::<VkPhysicalDeviceGlobalPriorityQueryFeatures>() - 12usize];
    ["Alignment of VkPhysicalDeviceGlobalPriorityQueryFeatures"]
        [::core::mem::align_of::<VkPhysicalDeviceGlobalPriorityQueryFeatures>() - 4usize];
    ["Offset of field: VkPhysicalDeviceGlobalPriorityQueryFeatures::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceGlobalPriorityQueryFeatures, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceGlobalPriorityQueryFeatures::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceGlobalPriorityQueryFeatures, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceGlobalPriorityQueryFeatures::globalPriorityQuery"][::core::mem::offset_of!(
        VkPhysicalDeviceGlobalPriorityQueryFeatures,
        globalPriorityQuery
    )
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkQueueFamilyGlobalPriorityProperties"]
        [::core::mem::size_of::<VkQueueFamilyGlobalPriorityProperties>() - 76usize];
    ["Alignment of VkQueueFamilyGlobalPriorityProperties"]
        [::core::mem::align_of::<VkQueueFamilyGlobalPriorityProperties>() - 4usize];
    ["Offset of field: VkQueueFamilyGlobalPriorityProperties::sType"]
        [::core::mem::offset_of!(VkQueueFamilyGlobalPriorityProperties, sType) - 0usize];
    ["Offset of field: VkQueueFamilyGlobalPriorityProperties::pNext"]
        [::core::mem::offset_of!(VkQueueFamilyGlobalPriorityProperties, pNext) - 4usize];
    ["Offset of field: VkQueueFamilyGlobalPriorityProperties::priorityCount"]
        [::core::mem::offset_of!(VkQueueFamilyGlobalPriorityProperties, priorityCount) - 8usize];
    ["Offset of field: VkQueueFamilyGlobalPriorityProperties::priorities"]
        [::core::mem::offset_of!(VkQueueFamilyGlobalPriorityProperties, priorities) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceShaderSubgroupRotateFeatures"]
        [::core::mem::size_of::<VkPhysicalDeviceShaderSubgroupRotateFeatures>() - 16usize];
    ["Alignment of VkPhysicalDeviceShaderSubgroupRotateFeatures"]
        [::core::mem::align_of::<VkPhysicalDeviceShaderSubgroupRotateFeatures>() - 4usize];
    ["Offset of field: VkPhysicalDeviceShaderSubgroupRotateFeatures::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceShaderSubgroupRotateFeatures, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceShaderSubgroupRotateFeatures::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceShaderSubgroupRotateFeatures, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceShaderSubgroupRotateFeatures::shaderSubgroupRotate"][::core::mem::offset_of!(
        VkPhysicalDeviceShaderSubgroupRotateFeatures,
        shaderSubgroupRotate
    )
        - 8usize];
    ["Offset of field: VkPhysicalDeviceShaderSubgroupRotateFeatures::shaderSubgroupRotateClustered"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceShaderSubgroupRotateFeatures , shaderSubgroupRotateClustered) - 12usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceShaderFloatControls2Features"]
        [::core::mem::size_of::<VkPhysicalDeviceShaderFloatControls2Features>() - 12usize];
    ["Alignment of VkPhysicalDeviceShaderFloatControls2Features"]
        [::core::mem::align_of::<VkPhysicalDeviceShaderFloatControls2Features>() - 4usize];
    ["Offset of field: VkPhysicalDeviceShaderFloatControls2Features::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceShaderFloatControls2Features, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceShaderFloatControls2Features::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceShaderFloatControls2Features, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceShaderFloatControls2Features::shaderFloatControls2"][::core::mem::offset_of!(
        VkPhysicalDeviceShaderFloatControls2Features,
        shaderFloatControls2
    )
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceShaderExpectAssumeFeatures"]
        [::core::mem::size_of::<VkPhysicalDeviceShaderExpectAssumeFeatures>() - 12usize];
    ["Alignment of VkPhysicalDeviceShaderExpectAssumeFeatures"]
        [::core::mem::align_of::<VkPhysicalDeviceShaderExpectAssumeFeatures>() - 4usize];
    ["Offset of field: VkPhysicalDeviceShaderExpectAssumeFeatures::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceShaderExpectAssumeFeatures, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceShaderExpectAssumeFeatures::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceShaderExpectAssumeFeatures, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceShaderExpectAssumeFeatures::shaderExpectAssume"][::core::mem::offset_of!(
        VkPhysicalDeviceShaderExpectAssumeFeatures,
        shaderExpectAssume
    ) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceLineRasterizationFeatures"]
        [::core::mem::size_of::<VkPhysicalDeviceLineRasterizationFeatures>() - 32usize];
    ["Alignment of VkPhysicalDeviceLineRasterizationFeatures"]
        [::core::mem::align_of::<VkPhysicalDeviceLineRasterizationFeatures>() - 4usize];
    ["Offset of field: VkPhysicalDeviceLineRasterizationFeatures::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceLineRasterizationFeatures, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceLineRasterizationFeatures::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceLineRasterizationFeatures, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceLineRasterizationFeatures::rectangularLines"][::core::mem::offset_of!(
        VkPhysicalDeviceLineRasterizationFeatures,
        rectangularLines
    ) - 8usize];
    ["Offset of field: VkPhysicalDeviceLineRasterizationFeatures::bresenhamLines"][::core::mem::offset_of!(
        VkPhysicalDeviceLineRasterizationFeatures,
        bresenhamLines
    ) - 12usize];
    ["Offset of field: VkPhysicalDeviceLineRasterizationFeatures::smoothLines"]
        [::core::mem::offset_of!(VkPhysicalDeviceLineRasterizationFeatures, smoothLines) - 16usize];
    ["Offset of field: VkPhysicalDeviceLineRasterizationFeatures::stippledRectangularLines"][::core::mem::offset_of!(
        VkPhysicalDeviceLineRasterizationFeatures,
        stippledRectangularLines
    )
        - 20usize];
    ["Offset of field: VkPhysicalDeviceLineRasterizationFeatures::stippledBresenhamLines"][::core::mem::offset_of!(
        VkPhysicalDeviceLineRasterizationFeatures,
        stippledBresenhamLines
    )
        - 24usize];
    ["Offset of field: VkPhysicalDeviceLineRasterizationFeatures::stippledSmoothLines"][::core::mem::offset_of!(
        VkPhysicalDeviceLineRasterizationFeatures,
        stippledSmoothLines
    )
        - 28usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceLineRasterizationProperties"]
        [::core::mem::size_of::<VkPhysicalDeviceLineRasterizationProperties>() - 12usize];
    ["Alignment of VkPhysicalDeviceLineRasterizationProperties"]
        [::core::mem::align_of::<VkPhysicalDeviceLineRasterizationProperties>() - 4usize];
    ["Offset of field: VkPhysicalDeviceLineRasterizationProperties::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceLineRasterizationProperties, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceLineRasterizationProperties::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceLineRasterizationProperties, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceLineRasterizationProperties::lineSubPixelPrecisionBits"][::core::mem::offset_of!(
        VkPhysicalDeviceLineRasterizationProperties,
        lineSubPixelPrecisionBits
    )
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineRasterizationLineStateCreateInfo"]
        [::core::mem::size_of::<VkPipelineRasterizationLineStateCreateInfo>() - 24usize];
    ["Alignment of VkPipelineRasterizationLineStateCreateInfo"]
        [::core::mem::align_of::<VkPipelineRasterizationLineStateCreateInfo>() - 4usize];
    ["Offset of field: VkPipelineRasterizationLineStateCreateInfo::sType"]
        [::core::mem::offset_of!(VkPipelineRasterizationLineStateCreateInfo, sType) - 0usize];
    ["Offset of field: VkPipelineRasterizationLineStateCreateInfo::pNext"]
        [::core::mem::offset_of!(VkPipelineRasterizationLineStateCreateInfo, pNext) - 4usize];
    ["Offset of field: VkPipelineRasterizationLineStateCreateInfo::lineRasterizationMode"][::core::mem::offset_of!(
        VkPipelineRasterizationLineStateCreateInfo,
        lineRasterizationMode
    )
        - 8usize];
    ["Offset of field: VkPipelineRasterizationLineStateCreateInfo::stippledLineEnable"][::core::mem::offset_of!(
        VkPipelineRasterizationLineStateCreateInfo,
        stippledLineEnable
    )
        - 12usize];
    ["Offset of field: VkPipelineRasterizationLineStateCreateInfo::lineStippleFactor"][::core::mem::offset_of!(
        VkPipelineRasterizationLineStateCreateInfo,
        lineStippleFactor
    ) - 16usize];
    ["Offset of field: VkPipelineRasterizationLineStateCreateInfo::lineStipplePattern"][::core::mem::offset_of!(
        VkPipelineRasterizationLineStateCreateInfo,
        lineStipplePattern
    )
        - 20usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceVertexAttributeDivisorProperties"]
        [::core::mem::size_of::<VkPhysicalDeviceVertexAttributeDivisorProperties>() - 16usize];
    ["Alignment of VkPhysicalDeviceVertexAttributeDivisorProperties"]
        [::core::mem::align_of::<VkPhysicalDeviceVertexAttributeDivisorProperties>() - 4usize];
    ["Offset of field: VkPhysicalDeviceVertexAttributeDivisorProperties::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceVertexAttributeDivisorProperties, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceVertexAttributeDivisorProperties::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceVertexAttributeDivisorProperties, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceVertexAttributeDivisorProperties::maxVertexAttribDivisor"][::core::mem::offset_of!(
        VkPhysicalDeviceVertexAttributeDivisorProperties,
        maxVertexAttribDivisor
    )
        - 8usize];
    ["Offset of field: VkPhysicalDeviceVertexAttributeDivisorProperties::supportsNonZeroFirstInstance"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceVertexAttributeDivisorProperties , supportsNonZeroFirstInstance) - 12usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVertexInputBindingDivisorDescription"]
        [::core::mem::size_of::<VkVertexInputBindingDivisorDescription>() - 8usize];
    ["Alignment of VkVertexInputBindingDivisorDescription"]
        [::core::mem::align_of::<VkVertexInputBindingDivisorDescription>() - 4usize];
    ["Offset of field: VkVertexInputBindingDivisorDescription::binding"]
        [::core::mem::offset_of!(VkVertexInputBindingDivisorDescription, binding) - 0usize];
    ["Offset of field: VkVertexInputBindingDivisorDescription::divisor"]
        [::core::mem::offset_of!(VkVertexInputBindingDivisorDescription, divisor) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineVertexInputDivisorStateCreateInfo"]
        [::core::mem::size_of::<VkPipelineVertexInputDivisorStateCreateInfo>() - 16usize];
    ["Alignment of VkPipelineVertexInputDivisorStateCreateInfo"]
        [::core::mem::align_of::<VkPipelineVertexInputDivisorStateCreateInfo>() - 4usize];
    ["Offset of field: VkPipelineVertexInputDivisorStateCreateInfo::sType"]
        [::core::mem::offset_of!(VkPipelineVertexInputDivisorStateCreateInfo, sType) - 0usize];
    ["Offset of field: VkPipelineVertexInputDivisorStateCreateInfo::pNext"]
        [::core::mem::offset_of!(VkPipelineVertexInputDivisorStateCreateInfo, pNext) - 4usize];
    ["Offset of field: VkPipelineVertexInputDivisorStateCreateInfo::vertexBindingDivisorCount"][::core::mem::offset_of!(
        VkPipelineVertexInputDivisorStateCreateInfo,
        vertexBindingDivisorCount
    )
        - 8usize];
    ["Offset of field: VkPipelineVertexInputDivisorStateCreateInfo::pVertexBindingDivisors"][::core::mem::offset_of!(
        VkPipelineVertexInputDivisorStateCreateInfo,
        pVertexBindingDivisors
    )
        - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceVertexAttributeDivisorFeatures"]
        [::core::mem::size_of::<VkPhysicalDeviceVertexAttributeDivisorFeatures>() - 16usize];
    ["Alignment of VkPhysicalDeviceVertexAttributeDivisorFeatures"]
        [::core::mem::align_of::<VkPhysicalDeviceVertexAttributeDivisorFeatures>() - 4usize];
    ["Offset of field: VkPhysicalDeviceVertexAttributeDivisorFeatures::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceVertexAttributeDivisorFeatures, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceVertexAttributeDivisorFeatures::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceVertexAttributeDivisorFeatures, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceVertexAttributeDivisorFeatures::vertexAttributeInstanceRateDivisor"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceVertexAttributeDivisorFeatures , vertexAttributeInstanceRateDivisor) - 8usize] ;
    ["Offset of field: VkPhysicalDeviceVertexAttributeDivisorFeatures::vertexAttributeInstanceRateZeroDivisor"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceVertexAttributeDivisorFeatures , vertexAttributeInstanceRateZeroDivisor) - 12usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceIndexTypeUint8Features"]
        [::core::mem::size_of::<VkPhysicalDeviceIndexTypeUint8Features>() - 12usize];
    ["Alignment of VkPhysicalDeviceIndexTypeUint8Features"]
        [::core::mem::align_of::<VkPhysicalDeviceIndexTypeUint8Features>() - 4usize];
    ["Offset of field: VkPhysicalDeviceIndexTypeUint8Features::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceIndexTypeUint8Features, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceIndexTypeUint8Features::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceIndexTypeUint8Features, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceIndexTypeUint8Features::indexTypeUint8"]
        [::core::mem::offset_of!(VkPhysicalDeviceIndexTypeUint8Features, indexTypeUint8) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkMemoryMapInfo"][::core::mem::size_of::<VkMemoryMapInfo>() - 40usize];
    ["Alignment of VkMemoryMapInfo"][::core::mem::align_of::<VkMemoryMapInfo>() - 8usize];
    ["Offset of field: VkMemoryMapInfo::sType"]
        [::core::mem::offset_of!(VkMemoryMapInfo, sType) - 0usize];
    ["Offset of field: VkMemoryMapInfo::pNext"]
        [::core::mem::offset_of!(VkMemoryMapInfo, pNext) - 4usize];
    ["Offset of field: VkMemoryMapInfo::flags"]
        [::core::mem::offset_of!(VkMemoryMapInfo, flags) - 8usize];
    ["Offset of field: VkMemoryMapInfo::memory"]
        [::core::mem::offset_of!(VkMemoryMapInfo, memory) - 16usize];
    ["Offset of field: VkMemoryMapInfo::offset"]
        [::core::mem::offset_of!(VkMemoryMapInfo, offset) - 24usize];
    ["Offset of field: VkMemoryMapInfo::size"]
        [::core::mem::offset_of!(VkMemoryMapInfo, size) - 32usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkMemoryUnmapInfo"][::core::mem::size_of::<VkMemoryUnmapInfo>() - 24usize];
    ["Alignment of VkMemoryUnmapInfo"][::core::mem::align_of::<VkMemoryUnmapInfo>() - 8usize];
    ["Offset of field: VkMemoryUnmapInfo::sType"]
        [::core::mem::offset_of!(VkMemoryUnmapInfo, sType) - 0usize];
    ["Offset of field: VkMemoryUnmapInfo::pNext"]
        [::core::mem::offset_of!(VkMemoryUnmapInfo, pNext) - 4usize];
    ["Offset of field: VkMemoryUnmapInfo::flags"]
        [::core::mem::offset_of!(VkMemoryUnmapInfo, flags) - 8usize];
    ["Offset of field: VkMemoryUnmapInfo::memory"]
        [::core::mem::offset_of!(VkMemoryUnmapInfo, memory) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceMaintenance5Features"]
        [::core::mem::size_of::<VkPhysicalDeviceMaintenance5Features>() - 12usize];
    ["Alignment of VkPhysicalDeviceMaintenance5Features"]
        [::core::mem::align_of::<VkPhysicalDeviceMaintenance5Features>() - 4usize];
    ["Offset of field: VkPhysicalDeviceMaintenance5Features::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceMaintenance5Features, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceMaintenance5Features::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceMaintenance5Features, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceMaintenance5Features::maintenance5"]
        [::core::mem::offset_of!(VkPhysicalDeviceMaintenance5Features, maintenance5) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceMaintenance5Properties"]
        [::core::mem::size_of::<VkPhysicalDeviceMaintenance5Properties>() - 32usize];
    ["Alignment of VkPhysicalDeviceMaintenance5Properties"]
        [::core::mem::align_of::<VkPhysicalDeviceMaintenance5Properties>() - 4usize];
    ["Offset of field: VkPhysicalDeviceMaintenance5Properties::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceMaintenance5Properties, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceMaintenance5Properties::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceMaintenance5Properties, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceMaintenance5Properties::earlyFragmentMultisampleCoverageAfterSampleCounting"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceMaintenance5Properties , earlyFragmentMultisampleCoverageAfterSampleCounting) - 8usize] ;
    ["Offset of field: VkPhysicalDeviceMaintenance5Properties::earlyFragmentSampleMaskTestBeforeSampleCounting"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceMaintenance5Properties , earlyFragmentSampleMaskTestBeforeSampleCounting) - 12usize] ;
    ["Offset of field: VkPhysicalDeviceMaintenance5Properties::depthStencilSwizzleOneSupport"][::core::mem::offset_of!(
        VkPhysicalDeviceMaintenance5Properties,
        depthStencilSwizzleOneSupport
    )
        - 16usize];
    ["Offset of field: VkPhysicalDeviceMaintenance5Properties::polygonModePointSize"][::core::mem::offset_of!(
        VkPhysicalDeviceMaintenance5Properties,
        polygonModePointSize
    ) - 20usize];
    ["Offset of field: VkPhysicalDeviceMaintenance5Properties::nonStrictSinglePixelWideLinesUseParallelogram"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceMaintenance5Properties , nonStrictSinglePixelWideLinesUseParallelogram) - 24usize] ;
    ["Offset of field: VkPhysicalDeviceMaintenance5Properties::nonStrictWideLinesUseParallelogram"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceMaintenance5Properties , nonStrictWideLinesUseParallelogram) - 28usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkRenderingAreaInfo"][::core::mem::size_of::<VkRenderingAreaInfo>() - 28usize];
    ["Alignment of VkRenderingAreaInfo"][::core::mem::align_of::<VkRenderingAreaInfo>() - 4usize];
    ["Offset of field: VkRenderingAreaInfo::sType"]
        [::core::mem::offset_of!(VkRenderingAreaInfo, sType) - 0usize];
    ["Offset of field: VkRenderingAreaInfo::pNext"]
        [::core::mem::offset_of!(VkRenderingAreaInfo, pNext) - 4usize];
    ["Offset of field: VkRenderingAreaInfo::viewMask"]
        [::core::mem::offset_of!(VkRenderingAreaInfo, viewMask) - 8usize];
    ["Offset of field: VkRenderingAreaInfo::colorAttachmentCount"]
        [::core::mem::offset_of!(VkRenderingAreaInfo, colorAttachmentCount) - 12usize];
    ["Offset of field: VkRenderingAreaInfo::pColorAttachmentFormats"]
        [::core::mem::offset_of!(VkRenderingAreaInfo, pColorAttachmentFormats) - 16usize];
    ["Offset of field: VkRenderingAreaInfo::depthAttachmentFormat"]
        [::core::mem::offset_of!(VkRenderingAreaInfo, depthAttachmentFormat) - 20usize];
    ["Offset of field: VkRenderingAreaInfo::stencilAttachmentFormat"]
        [::core::mem::offset_of!(VkRenderingAreaInfo, stencilAttachmentFormat) - 24usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkImageSubresource2"][::core::mem::size_of::<VkImageSubresource2>() - 20usize];
    ["Alignment of VkImageSubresource2"][::core::mem::align_of::<VkImageSubresource2>() - 4usize];
    ["Offset of field: VkImageSubresource2::sType"]
        [::core::mem::offset_of!(VkImageSubresource2, sType) - 0usize];
    ["Offset of field: VkImageSubresource2::pNext"]
        [::core::mem::offset_of!(VkImageSubresource2, pNext) - 4usize];
    ["Offset of field: VkImageSubresource2::imageSubresource"]
        [::core::mem::offset_of!(VkImageSubresource2, imageSubresource) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDeviceImageSubresourceInfo"]
        [::core::mem::size_of::<VkDeviceImageSubresourceInfo>() - 16usize];
    ["Alignment of VkDeviceImageSubresourceInfo"]
        [::core::mem::align_of::<VkDeviceImageSubresourceInfo>() - 4usize];
    ["Offset of field: VkDeviceImageSubresourceInfo::sType"]
        [::core::mem::offset_of!(VkDeviceImageSubresourceInfo, sType) - 0usize];
    ["Offset of field: VkDeviceImageSubresourceInfo::pNext"]
        [::core::mem::offset_of!(VkDeviceImageSubresourceInfo, pNext) - 4usize];
    ["Offset of field: VkDeviceImageSubresourceInfo::pCreateInfo"]
        [::core::mem::offset_of!(VkDeviceImageSubresourceInfo, pCreateInfo) - 8usize];
    ["Offset of field: VkDeviceImageSubresourceInfo::pSubresource"]
        [::core::mem::offset_of!(VkDeviceImageSubresourceInfo, pSubresource) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSubresourceLayout2"][::core::mem::size_of::<VkSubresourceLayout2>() - 48usize];
    ["Alignment of VkSubresourceLayout2"][::core::mem::align_of::<VkSubresourceLayout2>() - 8usize];
    ["Offset of field: VkSubresourceLayout2::sType"]
        [::core::mem::offset_of!(VkSubresourceLayout2, sType) - 0usize];
    ["Offset of field: VkSubresourceLayout2::pNext"]
        [::core::mem::offset_of!(VkSubresourceLayout2, pNext) - 4usize];
    ["Offset of field: VkSubresourceLayout2::subresourceLayout"]
        [::core::mem::offset_of!(VkSubresourceLayout2, subresourceLayout) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineCreateFlags2CreateInfo"]
        [::core::mem::size_of::<VkPipelineCreateFlags2CreateInfo>() - 16usize];
    ["Alignment of VkPipelineCreateFlags2CreateInfo"]
        [::core::mem::align_of::<VkPipelineCreateFlags2CreateInfo>() - 8usize];
    ["Offset of field: VkPipelineCreateFlags2CreateInfo::sType"]
        [::core::mem::offset_of!(VkPipelineCreateFlags2CreateInfo, sType) - 0usize];
    ["Offset of field: VkPipelineCreateFlags2CreateInfo::pNext"]
        [::core::mem::offset_of!(VkPipelineCreateFlags2CreateInfo, pNext) - 4usize];
    ["Offset of field: VkPipelineCreateFlags2CreateInfo::flags"]
        [::core::mem::offset_of!(VkPipelineCreateFlags2CreateInfo, flags) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkBufferUsageFlags2CreateInfo"]
        [::core::mem::size_of::<VkBufferUsageFlags2CreateInfo>() - 16usize];
    ["Alignment of VkBufferUsageFlags2CreateInfo"]
        [::core::mem::align_of::<VkBufferUsageFlags2CreateInfo>() - 8usize];
    ["Offset of field: VkBufferUsageFlags2CreateInfo::sType"]
        [::core::mem::offset_of!(VkBufferUsageFlags2CreateInfo, sType) - 0usize];
    ["Offset of field: VkBufferUsageFlags2CreateInfo::pNext"]
        [::core::mem::offset_of!(VkBufferUsageFlags2CreateInfo, pNext) - 4usize];
    ["Offset of field: VkBufferUsageFlags2CreateInfo::usage"]
        [::core::mem::offset_of!(VkBufferUsageFlags2CreateInfo, usage) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDevicePushDescriptorProperties"]
        [::core::mem::size_of::<VkPhysicalDevicePushDescriptorProperties>() - 12usize];
    ["Alignment of VkPhysicalDevicePushDescriptorProperties"]
        [::core::mem::align_of::<VkPhysicalDevicePushDescriptorProperties>() - 4usize];
    ["Offset of field: VkPhysicalDevicePushDescriptorProperties::sType"]
        [::core::mem::offset_of!(VkPhysicalDevicePushDescriptorProperties, sType) - 0usize];
    ["Offset of field: VkPhysicalDevicePushDescriptorProperties::pNext"]
        [::core::mem::offset_of!(VkPhysicalDevicePushDescriptorProperties, pNext) - 4usize];
    ["Offset of field: VkPhysicalDevicePushDescriptorProperties::maxPushDescriptors"][::core::mem::offset_of!(
        VkPhysicalDevicePushDescriptorProperties,
        maxPushDescriptors
    ) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceDynamicRenderingLocalReadFeatures"]
        [::core::mem::size_of::<VkPhysicalDeviceDynamicRenderingLocalReadFeatures>() - 12usize];
    ["Alignment of VkPhysicalDeviceDynamicRenderingLocalReadFeatures"]
        [::core::mem::align_of::<VkPhysicalDeviceDynamicRenderingLocalReadFeatures>() - 4usize];
    ["Offset of field: VkPhysicalDeviceDynamicRenderingLocalReadFeatures::sType"][::core::mem::offset_of!(
        VkPhysicalDeviceDynamicRenderingLocalReadFeatures,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceDynamicRenderingLocalReadFeatures::pNext"][::core::mem::offset_of!(
        VkPhysicalDeviceDynamicRenderingLocalReadFeatures,
        pNext
    ) - 4usize];
    ["Offset of field: VkPhysicalDeviceDynamicRenderingLocalReadFeatures::dynamicRenderingLocalRead"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDynamicRenderingLocalReadFeatures , dynamicRenderingLocalRead) - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkRenderingAttachmentLocationInfo"]
        [::core::mem::size_of::<VkRenderingAttachmentLocationInfo>() - 16usize];
    ["Alignment of VkRenderingAttachmentLocationInfo"]
        [::core::mem::align_of::<VkRenderingAttachmentLocationInfo>() - 4usize];
    ["Offset of field: VkRenderingAttachmentLocationInfo::sType"]
        [::core::mem::offset_of!(VkRenderingAttachmentLocationInfo, sType) - 0usize];
    ["Offset of field: VkRenderingAttachmentLocationInfo::pNext"]
        [::core::mem::offset_of!(VkRenderingAttachmentLocationInfo, pNext) - 4usize];
    ["Offset of field: VkRenderingAttachmentLocationInfo::colorAttachmentCount"]
        [::core::mem::offset_of!(VkRenderingAttachmentLocationInfo, colorAttachmentCount) - 8usize];
    ["Offset of field: VkRenderingAttachmentLocationInfo::pColorAttachmentLocations"][::core::mem::offset_of!(
        VkRenderingAttachmentLocationInfo,
        pColorAttachmentLocations
    ) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkRenderingInputAttachmentIndexInfo"]
        [::core::mem::size_of::<VkRenderingInputAttachmentIndexInfo>() - 24usize];
    ["Alignment of VkRenderingInputAttachmentIndexInfo"]
        [::core::mem::align_of::<VkRenderingInputAttachmentIndexInfo>() - 4usize];
    ["Offset of field: VkRenderingInputAttachmentIndexInfo::sType"]
        [::core::mem::offset_of!(VkRenderingInputAttachmentIndexInfo, sType) - 0usize];
    ["Offset of field: VkRenderingInputAttachmentIndexInfo::pNext"]
        [::core::mem::offset_of!(VkRenderingInputAttachmentIndexInfo, pNext) - 4usize];
    ["Offset of field: VkRenderingInputAttachmentIndexInfo::colorAttachmentCount"][::core::mem::offset_of!(
        VkRenderingInputAttachmentIndexInfo,
        colorAttachmentCount
    ) - 8usize];
    ["Offset of field: VkRenderingInputAttachmentIndexInfo::pColorAttachmentInputIndices"][::core::mem::offset_of!(
        VkRenderingInputAttachmentIndexInfo,
        pColorAttachmentInputIndices
    )
        - 12usize];
    ["Offset of field: VkRenderingInputAttachmentIndexInfo::pDepthInputAttachmentIndex"][::core::mem::offset_of!(
        VkRenderingInputAttachmentIndexInfo,
        pDepthInputAttachmentIndex
    )
        - 16usize];
    ["Offset of field: VkRenderingInputAttachmentIndexInfo::pStencilInputAttachmentIndex"][::core::mem::offset_of!(
        VkRenderingInputAttachmentIndexInfo,
        pStencilInputAttachmentIndex
    )
        - 20usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceMaintenance6Features"]
        [::core::mem::size_of::<VkPhysicalDeviceMaintenance6Features>() - 12usize];
    ["Alignment of VkPhysicalDeviceMaintenance6Features"]
        [::core::mem::align_of::<VkPhysicalDeviceMaintenance6Features>() - 4usize];
    ["Offset of field: VkPhysicalDeviceMaintenance6Features::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceMaintenance6Features, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceMaintenance6Features::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceMaintenance6Features, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceMaintenance6Features::maintenance6"]
        [::core::mem::offset_of!(VkPhysicalDeviceMaintenance6Features, maintenance6) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceMaintenance6Properties"]
        [::core::mem::size_of::<VkPhysicalDeviceMaintenance6Properties>() - 20usize];
    ["Alignment of VkPhysicalDeviceMaintenance6Properties"]
        [::core::mem::align_of::<VkPhysicalDeviceMaintenance6Properties>() - 4usize];
    ["Offset of field: VkPhysicalDeviceMaintenance6Properties::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceMaintenance6Properties, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceMaintenance6Properties::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceMaintenance6Properties, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceMaintenance6Properties::blockTexelViewCompatibleMultipleLayers"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceMaintenance6Properties , blockTexelViewCompatibleMultipleLayers) - 8usize] ;
    ["Offset of field: VkPhysicalDeviceMaintenance6Properties::maxCombinedImageSamplerDescriptorCount"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceMaintenance6Properties , maxCombinedImageSamplerDescriptorCount) - 12usize] ;
    ["Offset of field: VkPhysicalDeviceMaintenance6Properties::fragmentShadingRateClampCombinerInputs"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceMaintenance6Properties , fragmentShadingRateClampCombinerInputs) - 16usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkBindMemoryStatus"][::core::mem::size_of::<VkBindMemoryStatus>() - 12usize];
    ["Alignment of VkBindMemoryStatus"][::core::mem::align_of::<VkBindMemoryStatus>() - 4usize];
    ["Offset of field: VkBindMemoryStatus::sType"]
        [::core::mem::offset_of!(VkBindMemoryStatus, sType) - 0usize];
    ["Offset of field: VkBindMemoryStatus::pNext"]
        [::core::mem::offset_of!(VkBindMemoryStatus, pNext) - 4usize];
    ["Offset of field: VkBindMemoryStatus::pResult"]
        [::core::mem::offset_of!(VkBindMemoryStatus, pResult) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkBindDescriptorSetsInfo"]
        [::core::mem::size_of::<VkBindDescriptorSetsInfo>() - 48usize];
    ["Alignment of VkBindDescriptorSetsInfo"]
        [::core::mem::align_of::<VkBindDescriptorSetsInfo>() - 8usize];
    ["Offset of field: VkBindDescriptorSetsInfo::sType"]
        [::core::mem::offset_of!(VkBindDescriptorSetsInfo, sType) - 0usize];
    ["Offset of field: VkBindDescriptorSetsInfo::pNext"]
        [::core::mem::offset_of!(VkBindDescriptorSetsInfo, pNext) - 4usize];
    ["Offset of field: VkBindDescriptorSetsInfo::stageFlags"]
        [::core::mem::offset_of!(VkBindDescriptorSetsInfo, stageFlags) - 8usize];
    ["Offset of field: VkBindDescriptorSetsInfo::layout"]
        [::core::mem::offset_of!(VkBindDescriptorSetsInfo, layout) - 16usize];
    ["Offset of field: VkBindDescriptorSetsInfo::firstSet"]
        [::core::mem::offset_of!(VkBindDescriptorSetsInfo, firstSet) - 24usize];
    ["Offset of field: VkBindDescriptorSetsInfo::descriptorSetCount"]
        [::core::mem::offset_of!(VkBindDescriptorSetsInfo, descriptorSetCount) - 28usize];
    ["Offset of field: VkBindDescriptorSetsInfo::pDescriptorSets"]
        [::core::mem::offset_of!(VkBindDescriptorSetsInfo, pDescriptorSets) - 32usize];
    ["Offset of field: VkBindDescriptorSetsInfo::dynamicOffsetCount"]
        [::core::mem::offset_of!(VkBindDescriptorSetsInfo, dynamicOffsetCount) - 36usize];
    ["Offset of field: VkBindDescriptorSetsInfo::pDynamicOffsets"]
        [::core::mem::offset_of!(VkBindDescriptorSetsInfo, pDynamicOffsets) - 40usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPushConstantsInfo"][::core::mem::size_of::<VkPushConstantsInfo>() - 32usize];
    ["Alignment of VkPushConstantsInfo"][::core::mem::align_of::<VkPushConstantsInfo>() - 8usize];
    ["Offset of field: VkPushConstantsInfo::sType"]
        [::core::mem::offset_of!(VkPushConstantsInfo, sType) - 0usize];
    ["Offset of field: VkPushConstantsInfo::pNext"]
        [::core::mem::offset_of!(VkPushConstantsInfo, pNext) - 4usize];
    ["Offset of field: VkPushConstantsInfo::layout"]
        [::core::mem::offset_of!(VkPushConstantsInfo, layout) - 8usize];
    ["Offset of field: VkPushConstantsInfo::stageFlags"]
        [::core::mem::offset_of!(VkPushConstantsInfo, stageFlags) - 16usize];
    ["Offset of field: VkPushConstantsInfo::offset"]
        [::core::mem::offset_of!(VkPushConstantsInfo, offset) - 20usize];
    ["Offset of field: VkPushConstantsInfo::size"]
        [::core::mem::offset_of!(VkPushConstantsInfo, size) - 24usize];
    ["Offset of field: VkPushConstantsInfo::pValues"]
        [::core::mem::offset_of!(VkPushConstantsInfo, pValues) - 28usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPushDescriptorSetInfo"]
        [::core::mem::size_of::<VkPushDescriptorSetInfo>() - 40usize];
    ["Alignment of VkPushDescriptorSetInfo"]
        [::core::mem::align_of::<VkPushDescriptorSetInfo>() - 8usize];
    ["Offset of field: VkPushDescriptorSetInfo::sType"]
        [::core::mem::offset_of!(VkPushDescriptorSetInfo, sType) - 0usize];
    ["Offset of field: VkPushDescriptorSetInfo::pNext"]
        [::core::mem::offset_of!(VkPushDescriptorSetInfo, pNext) - 4usize];
    ["Offset of field: VkPushDescriptorSetInfo::stageFlags"]
        [::core::mem::offset_of!(VkPushDescriptorSetInfo, stageFlags) - 8usize];
    ["Offset of field: VkPushDescriptorSetInfo::layout"]
        [::core::mem::offset_of!(VkPushDescriptorSetInfo, layout) - 16usize];
    ["Offset of field: VkPushDescriptorSetInfo::set"]
        [::core::mem::offset_of!(VkPushDescriptorSetInfo, set) - 24usize];
    ["Offset of field: VkPushDescriptorSetInfo::descriptorWriteCount"]
        [::core::mem::offset_of!(VkPushDescriptorSetInfo, descriptorWriteCount) - 28usize];
    ["Offset of field: VkPushDescriptorSetInfo::pDescriptorWrites"]
        [::core::mem::offset_of!(VkPushDescriptorSetInfo, pDescriptorWrites) - 32usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPushDescriptorSetWithTemplateInfo"]
        [::core::mem::size_of::<VkPushDescriptorSetWithTemplateInfo>() - 32usize];
    ["Alignment of VkPushDescriptorSetWithTemplateInfo"]
        [::core::mem::align_of::<VkPushDescriptorSetWithTemplateInfo>() - 8usize];
    ["Offset of field: VkPushDescriptorSetWithTemplateInfo::sType"]
        [::core::mem::offset_of!(VkPushDescriptorSetWithTemplateInfo, sType) - 0usize];
    ["Offset of field: VkPushDescriptorSetWithTemplateInfo::pNext"]
        [::core::mem::offset_of!(VkPushDescriptorSetWithTemplateInfo, pNext) - 4usize];
    ["Offset of field: VkPushDescriptorSetWithTemplateInfo::descriptorUpdateTemplate"][::core::mem::offset_of!(
        VkPushDescriptorSetWithTemplateInfo,
        descriptorUpdateTemplate
    ) - 8usize];
    ["Offset of field: VkPushDescriptorSetWithTemplateInfo::layout"]
        [::core::mem::offset_of!(VkPushDescriptorSetWithTemplateInfo, layout) - 16usize];
    ["Offset of field: VkPushDescriptorSetWithTemplateInfo::set"]
        [::core::mem::offset_of!(VkPushDescriptorSetWithTemplateInfo, set) - 24usize];
    ["Offset of field: VkPushDescriptorSetWithTemplateInfo::pData"]
        [::core::mem::offset_of!(VkPushDescriptorSetWithTemplateInfo, pData) - 28usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDevicePipelineProtectedAccessFeatures"]
        [::core::mem::size_of::<VkPhysicalDevicePipelineProtectedAccessFeatures>() - 12usize];
    ["Alignment of VkPhysicalDevicePipelineProtectedAccessFeatures"]
        [::core::mem::align_of::<VkPhysicalDevicePipelineProtectedAccessFeatures>() - 4usize];
    ["Offset of field: VkPhysicalDevicePipelineProtectedAccessFeatures::sType"]
        [::core::mem::offset_of!(VkPhysicalDevicePipelineProtectedAccessFeatures, sType) - 0usize];
    ["Offset of field: VkPhysicalDevicePipelineProtectedAccessFeatures::pNext"]
        [::core::mem::offset_of!(VkPhysicalDevicePipelineProtectedAccessFeatures, pNext) - 4usize];
    ["Offset of field: VkPhysicalDevicePipelineProtectedAccessFeatures::pipelineProtectedAccess"][::core::mem::offset_of!(
        VkPhysicalDevicePipelineProtectedAccessFeatures,
        pipelineProtectedAccess
    )
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDevicePipelineRobustnessFeatures"]
        [::core::mem::size_of::<VkPhysicalDevicePipelineRobustnessFeatures>() - 12usize];
    ["Alignment of VkPhysicalDevicePipelineRobustnessFeatures"]
        [::core::mem::align_of::<VkPhysicalDevicePipelineRobustnessFeatures>() - 4usize];
    ["Offset of field: VkPhysicalDevicePipelineRobustnessFeatures::sType"]
        [::core::mem::offset_of!(VkPhysicalDevicePipelineRobustnessFeatures, sType) - 0usize];
    ["Offset of field: VkPhysicalDevicePipelineRobustnessFeatures::pNext"]
        [::core::mem::offset_of!(VkPhysicalDevicePipelineRobustnessFeatures, pNext) - 4usize];
    ["Offset of field: VkPhysicalDevicePipelineRobustnessFeatures::pipelineRobustness"][::core::mem::offset_of!(
        VkPhysicalDevicePipelineRobustnessFeatures,
        pipelineRobustness
    ) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDevicePipelineRobustnessProperties"]
        [::core::mem::size_of::<VkPhysicalDevicePipelineRobustnessProperties>() - 24usize];
    ["Alignment of VkPhysicalDevicePipelineRobustnessProperties"]
        [::core::mem::align_of::<VkPhysicalDevicePipelineRobustnessProperties>() - 4usize];
    ["Offset of field: VkPhysicalDevicePipelineRobustnessProperties::sType"]
        [::core::mem::offset_of!(VkPhysicalDevicePipelineRobustnessProperties, sType) - 0usize];
    ["Offset of field: VkPhysicalDevicePipelineRobustnessProperties::pNext"]
        [::core::mem::offset_of!(VkPhysicalDevicePipelineRobustnessProperties, pNext) - 4usize];
    ["Offset of field: VkPhysicalDevicePipelineRobustnessProperties::defaultRobustnessStorageBuffers"] [:: core :: mem :: offset_of ! (VkPhysicalDevicePipelineRobustnessProperties , defaultRobustnessStorageBuffers) - 8usize] ;
    ["Offset of field: VkPhysicalDevicePipelineRobustnessProperties::defaultRobustnessUniformBuffers"] [:: core :: mem :: offset_of ! (VkPhysicalDevicePipelineRobustnessProperties , defaultRobustnessUniformBuffers) - 12usize] ;
    ["Offset of field: VkPhysicalDevicePipelineRobustnessProperties::defaultRobustnessVertexInputs"] [:: core :: mem :: offset_of ! (VkPhysicalDevicePipelineRobustnessProperties , defaultRobustnessVertexInputs) - 16usize] ;
    ["Offset of field: VkPhysicalDevicePipelineRobustnessProperties::defaultRobustnessImages"][::core::mem::offset_of!(
        VkPhysicalDevicePipelineRobustnessProperties,
        defaultRobustnessImages
    )
        - 20usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineRobustnessCreateInfo"]
        [::core::mem::size_of::<VkPipelineRobustnessCreateInfo>() - 24usize];
    ["Alignment of VkPipelineRobustnessCreateInfo"]
        [::core::mem::align_of::<VkPipelineRobustnessCreateInfo>() - 4usize];
    ["Offset of field: VkPipelineRobustnessCreateInfo::sType"]
        [::core::mem::offset_of!(VkPipelineRobustnessCreateInfo, sType) - 0usize];
    ["Offset of field: VkPipelineRobustnessCreateInfo::pNext"]
        [::core::mem::offset_of!(VkPipelineRobustnessCreateInfo, pNext) - 4usize];
    ["Offset of field: VkPipelineRobustnessCreateInfo::storageBuffers"]
        [::core::mem::offset_of!(VkPipelineRobustnessCreateInfo, storageBuffers) - 8usize];
    ["Offset of field: VkPipelineRobustnessCreateInfo::uniformBuffers"]
        [::core::mem::offset_of!(VkPipelineRobustnessCreateInfo, uniformBuffers) - 12usize];
    ["Offset of field: VkPipelineRobustnessCreateInfo::vertexInputs"]
        [::core::mem::offset_of!(VkPipelineRobustnessCreateInfo, vertexInputs) - 16usize];
    ["Offset of field: VkPipelineRobustnessCreateInfo::images"]
        [::core::mem::offset_of!(VkPipelineRobustnessCreateInfo, images) - 20usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceHostImageCopyFeatures"]
        [::core::mem::size_of::<VkPhysicalDeviceHostImageCopyFeatures>() - 12usize];
    ["Alignment of VkPhysicalDeviceHostImageCopyFeatures"]
        [::core::mem::align_of::<VkPhysicalDeviceHostImageCopyFeatures>() - 4usize];
    ["Offset of field: VkPhysicalDeviceHostImageCopyFeatures::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceHostImageCopyFeatures, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceHostImageCopyFeatures::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceHostImageCopyFeatures, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceHostImageCopyFeatures::hostImageCopy"]
        [::core::mem::offset_of!(VkPhysicalDeviceHostImageCopyFeatures, hostImageCopy) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceHostImageCopyProperties"]
        [::core::mem::size_of::<VkPhysicalDeviceHostImageCopyProperties>() - 44usize];
    ["Alignment of VkPhysicalDeviceHostImageCopyProperties"]
        [::core::mem::align_of::<VkPhysicalDeviceHostImageCopyProperties>() - 4usize];
    ["Offset of field: VkPhysicalDeviceHostImageCopyProperties::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceHostImageCopyProperties, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceHostImageCopyProperties::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceHostImageCopyProperties, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceHostImageCopyProperties::copySrcLayoutCount"][::core::mem::offset_of!(
        VkPhysicalDeviceHostImageCopyProperties,
        copySrcLayoutCount
    ) - 8usize];
    ["Offset of field: VkPhysicalDeviceHostImageCopyProperties::pCopySrcLayouts"][::core::mem::offset_of!(
        VkPhysicalDeviceHostImageCopyProperties,
        pCopySrcLayouts
    ) - 12usize];
    ["Offset of field: VkPhysicalDeviceHostImageCopyProperties::copyDstLayoutCount"][::core::mem::offset_of!(
        VkPhysicalDeviceHostImageCopyProperties,
        copyDstLayoutCount
    ) - 16usize];
    ["Offset of field: VkPhysicalDeviceHostImageCopyProperties::pCopyDstLayouts"][::core::mem::offset_of!(
        VkPhysicalDeviceHostImageCopyProperties,
        pCopyDstLayouts
    ) - 20usize];
    ["Offset of field: VkPhysicalDeviceHostImageCopyProperties::optimalTilingLayoutUUID"][::core::mem::offset_of!(
        VkPhysicalDeviceHostImageCopyProperties,
        optimalTilingLayoutUUID
    )
        - 24usize];
    ["Offset of field: VkPhysicalDeviceHostImageCopyProperties::identicalMemoryTypeRequirements"][::core::mem::offset_of!(
        VkPhysicalDeviceHostImageCopyProperties,
        identicalMemoryTypeRequirements
    )
        - 40usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkMemoryToImageCopy"][::core::mem::size_of::<VkMemoryToImageCopy>() - 60usize];
    ["Alignment of VkMemoryToImageCopy"][::core::mem::align_of::<VkMemoryToImageCopy>() - 4usize];
    ["Offset of field: VkMemoryToImageCopy::sType"]
        [::core::mem::offset_of!(VkMemoryToImageCopy, sType) - 0usize];
    ["Offset of field: VkMemoryToImageCopy::pNext"]
        [::core::mem::offset_of!(VkMemoryToImageCopy, pNext) - 4usize];
    ["Offset of field: VkMemoryToImageCopy::pHostPointer"]
        [::core::mem::offset_of!(VkMemoryToImageCopy, pHostPointer) - 8usize];
    ["Offset of field: VkMemoryToImageCopy::memoryRowLength"]
        [::core::mem::offset_of!(VkMemoryToImageCopy, memoryRowLength) - 12usize];
    ["Offset of field: VkMemoryToImageCopy::memoryImageHeight"]
        [::core::mem::offset_of!(VkMemoryToImageCopy, memoryImageHeight) - 16usize];
    ["Offset of field: VkMemoryToImageCopy::imageSubresource"]
        [::core::mem::offset_of!(VkMemoryToImageCopy, imageSubresource) - 20usize];
    ["Offset of field: VkMemoryToImageCopy::imageOffset"]
        [::core::mem::offset_of!(VkMemoryToImageCopy, imageOffset) - 36usize];
    ["Offset of field: VkMemoryToImageCopy::imageExtent"]
        [::core::mem::offset_of!(VkMemoryToImageCopy, imageExtent) - 48usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkImageToMemoryCopy"][::core::mem::size_of::<VkImageToMemoryCopy>() - 60usize];
    ["Alignment of VkImageToMemoryCopy"][::core::mem::align_of::<VkImageToMemoryCopy>() - 4usize];
    ["Offset of field: VkImageToMemoryCopy::sType"]
        [::core::mem::offset_of!(VkImageToMemoryCopy, sType) - 0usize];
    ["Offset of field: VkImageToMemoryCopy::pNext"]
        [::core::mem::offset_of!(VkImageToMemoryCopy, pNext) - 4usize];
    ["Offset of field: VkImageToMemoryCopy::pHostPointer"]
        [::core::mem::offset_of!(VkImageToMemoryCopy, pHostPointer) - 8usize];
    ["Offset of field: VkImageToMemoryCopy::memoryRowLength"]
        [::core::mem::offset_of!(VkImageToMemoryCopy, memoryRowLength) - 12usize];
    ["Offset of field: VkImageToMemoryCopy::memoryImageHeight"]
        [::core::mem::offset_of!(VkImageToMemoryCopy, memoryImageHeight) - 16usize];
    ["Offset of field: VkImageToMemoryCopy::imageSubresource"]
        [::core::mem::offset_of!(VkImageToMemoryCopy, imageSubresource) - 20usize];
    ["Offset of field: VkImageToMemoryCopy::imageOffset"]
        [::core::mem::offset_of!(VkImageToMemoryCopy, imageOffset) - 36usize];
    ["Offset of field: VkImageToMemoryCopy::imageExtent"]
        [::core::mem::offset_of!(VkImageToMemoryCopy, imageExtent) - 48usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkCopyMemoryToImageInfo"]
        [::core::mem::size_of::<VkCopyMemoryToImageInfo>() - 40usize];
    ["Alignment of VkCopyMemoryToImageInfo"]
        [::core::mem::align_of::<VkCopyMemoryToImageInfo>() - 8usize];
    ["Offset of field: VkCopyMemoryToImageInfo::sType"]
        [::core::mem::offset_of!(VkCopyMemoryToImageInfo, sType) - 0usize];
    ["Offset of field: VkCopyMemoryToImageInfo::pNext"]
        [::core::mem::offset_of!(VkCopyMemoryToImageInfo, pNext) - 4usize];
    ["Offset of field: VkCopyMemoryToImageInfo::flags"]
        [::core::mem::offset_of!(VkCopyMemoryToImageInfo, flags) - 8usize];
    ["Offset of field: VkCopyMemoryToImageInfo::dstImage"]
        [::core::mem::offset_of!(VkCopyMemoryToImageInfo, dstImage) - 16usize];
    ["Offset of field: VkCopyMemoryToImageInfo::dstImageLayout"]
        [::core::mem::offset_of!(VkCopyMemoryToImageInfo, dstImageLayout) - 24usize];
    ["Offset of field: VkCopyMemoryToImageInfo::regionCount"]
        [::core::mem::offset_of!(VkCopyMemoryToImageInfo, regionCount) - 28usize];
    ["Offset of field: VkCopyMemoryToImageInfo::pRegions"]
        [::core::mem::offset_of!(VkCopyMemoryToImageInfo, pRegions) - 32usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkCopyImageToMemoryInfo"]
        [::core::mem::size_of::<VkCopyImageToMemoryInfo>() - 40usize];
    ["Alignment of VkCopyImageToMemoryInfo"]
        [::core::mem::align_of::<VkCopyImageToMemoryInfo>() - 8usize];
    ["Offset of field: VkCopyImageToMemoryInfo::sType"]
        [::core::mem::offset_of!(VkCopyImageToMemoryInfo, sType) - 0usize];
    ["Offset of field: VkCopyImageToMemoryInfo::pNext"]
        [::core::mem::offset_of!(VkCopyImageToMemoryInfo, pNext) - 4usize];
    ["Offset of field: VkCopyImageToMemoryInfo::flags"]
        [::core::mem::offset_of!(VkCopyImageToMemoryInfo, flags) - 8usize];
    ["Offset of field: VkCopyImageToMemoryInfo::srcImage"]
        [::core::mem::offset_of!(VkCopyImageToMemoryInfo, srcImage) - 16usize];
    ["Offset of field: VkCopyImageToMemoryInfo::srcImageLayout"]
        [::core::mem::offset_of!(VkCopyImageToMemoryInfo, srcImageLayout) - 24usize];
    ["Offset of field: VkCopyImageToMemoryInfo::regionCount"]
        [::core::mem::offset_of!(VkCopyImageToMemoryInfo, regionCount) - 28usize];
    ["Offset of field: VkCopyImageToMemoryInfo::pRegions"]
        [::core::mem::offset_of!(VkCopyImageToMemoryInfo, pRegions) - 32usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkCopyImageToImageInfo"][::core::mem::size_of::<VkCopyImageToImageInfo>() - 56usize];
    ["Alignment of VkCopyImageToImageInfo"]
        [::core::mem::align_of::<VkCopyImageToImageInfo>() - 8usize];
    ["Offset of field: VkCopyImageToImageInfo::sType"]
        [::core::mem::offset_of!(VkCopyImageToImageInfo, sType) - 0usize];
    ["Offset of field: VkCopyImageToImageInfo::pNext"]
        [::core::mem::offset_of!(VkCopyImageToImageInfo, pNext) - 4usize];
    ["Offset of field: VkCopyImageToImageInfo::flags"]
        [::core::mem::offset_of!(VkCopyImageToImageInfo, flags) - 8usize];
    ["Offset of field: VkCopyImageToImageInfo::srcImage"]
        [::core::mem::offset_of!(VkCopyImageToImageInfo, srcImage) - 16usize];
    ["Offset of field: VkCopyImageToImageInfo::srcImageLayout"]
        [::core::mem::offset_of!(VkCopyImageToImageInfo, srcImageLayout) - 24usize];
    ["Offset of field: VkCopyImageToImageInfo::dstImage"]
        [::core::mem::offset_of!(VkCopyImageToImageInfo, dstImage) - 32usize];
    ["Offset of field: VkCopyImageToImageInfo::dstImageLayout"]
        [::core::mem::offset_of!(VkCopyImageToImageInfo, dstImageLayout) - 40usize];
    ["Offset of field: VkCopyImageToImageInfo::regionCount"]
        [::core::mem::offset_of!(VkCopyImageToImageInfo, regionCount) - 44usize];
    ["Offset of field: VkCopyImageToImageInfo::pRegions"]
        [::core::mem::offset_of!(VkCopyImageToImageInfo, pRegions) - 48usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkHostImageLayoutTransitionInfo"]
        [::core::mem::size_of::<VkHostImageLayoutTransitionInfo>() - 48usize];
    ["Alignment of VkHostImageLayoutTransitionInfo"]
        [::core::mem::align_of::<VkHostImageLayoutTransitionInfo>() - 8usize];
    ["Offset of field: VkHostImageLayoutTransitionInfo::sType"]
        [::core::mem::offset_of!(VkHostImageLayoutTransitionInfo, sType) - 0usize];
    ["Offset of field: VkHostImageLayoutTransitionInfo::pNext"]
        [::core::mem::offset_of!(VkHostImageLayoutTransitionInfo, pNext) - 4usize];
    ["Offset of field: VkHostImageLayoutTransitionInfo::image"]
        [::core::mem::offset_of!(VkHostImageLayoutTransitionInfo, image) - 8usize];
    ["Offset of field: VkHostImageLayoutTransitionInfo::oldLayout"]
        [::core::mem::offset_of!(VkHostImageLayoutTransitionInfo, oldLayout) - 16usize];
    ["Offset of field: VkHostImageLayoutTransitionInfo::newLayout"]
        [::core::mem::offset_of!(VkHostImageLayoutTransitionInfo, newLayout) - 20usize];
    ["Offset of field: VkHostImageLayoutTransitionInfo::subresourceRange"]
        [::core::mem::offset_of!(VkHostImageLayoutTransitionInfo, subresourceRange) - 24usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSubresourceHostMemcpySize"]
        [::core::mem::size_of::<VkSubresourceHostMemcpySize>() - 16usize];
    ["Alignment of VkSubresourceHostMemcpySize"]
        [::core::mem::align_of::<VkSubresourceHostMemcpySize>() - 8usize];
    ["Offset of field: VkSubresourceHostMemcpySize::sType"]
        [::core::mem::offset_of!(VkSubresourceHostMemcpySize, sType) - 0usize];
    ["Offset of field: VkSubresourceHostMemcpySize::pNext"]
        [::core::mem::offset_of!(VkSubresourceHostMemcpySize, pNext) - 4usize];
    ["Offset of field: VkSubresourceHostMemcpySize::size"]
        [::core::mem::offset_of!(VkSubresourceHostMemcpySize, size) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkHostImageCopyDevicePerformanceQuery"]
        [::core::mem::size_of::<VkHostImageCopyDevicePerformanceQuery>() - 16usize];
    ["Alignment of VkHostImageCopyDevicePerformanceQuery"]
        [::core::mem::align_of::<VkHostImageCopyDevicePerformanceQuery>() - 4usize];
    ["Offset of field: VkHostImageCopyDevicePerformanceQuery::sType"]
        [::core::mem::offset_of!(VkHostImageCopyDevicePerformanceQuery, sType) - 0usize];
    ["Offset of field: VkHostImageCopyDevicePerformanceQuery::pNext"]
        [::core::mem::offset_of!(VkHostImageCopyDevicePerformanceQuery, pNext) - 4usize];
    ["Offset of field: VkHostImageCopyDevicePerformanceQuery::optimalDeviceAccess"][::core::mem::offset_of!(
        VkHostImageCopyDevicePerformanceQuery,
        optimalDeviceAccess
    ) - 8usize];
    ["Offset of field: VkHostImageCopyDevicePerformanceQuery::identicalMemoryLayout"][::core::mem::offset_of!(
        VkHostImageCopyDevicePerformanceQuery,
        identicalMemoryLayout
    ) - 12usize];
};
pub const VkPresentModeKHR_VK_PRESENT_MODE_IMMEDIATE_KHR: VkPresentModeKHR = 0;
pub const VkPresentModeKHR_VK_PRESENT_MODE_MAILBOX_KHR: VkPresentModeKHR = 1;
pub const VkPresentModeKHR_VK_PRESENT_MODE_FIFO_KHR: VkPresentModeKHR = 2;
pub const VkPresentModeKHR_VK_PRESENT_MODE_FIFO_RELAXED_KHR: VkPresentModeKHR = 3;
pub const VkPresentModeKHR_VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR: VkPresentModeKHR = 1000111000;
pub const VkPresentModeKHR_VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR: VkPresentModeKHR =
    1000111001;
pub const VkPresentModeKHR_VK_PRESENT_MODE_FIFO_LATEST_READY_EXT: VkPresentModeKHR = 1000361000;
pub const VkPresentModeKHR_VK_PRESENT_MODE_MAX_ENUM_KHR: VkPresentModeKHR = 2147483647;
pub const VkColorSpaceKHR_VK_COLOR_SPACE_SRGB_NONLINEAR_KHR: VkColorSpaceKHR = 0;
pub const VkColorSpaceKHR_VK_COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT: VkColorSpaceKHR = 1000104001;
pub const VkColorSpaceKHR_VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT: VkColorSpaceKHR = 1000104002;
pub const VkColorSpaceKHR_VK_COLOR_SPACE_DISPLAY_P3_LINEAR_EXT: VkColorSpaceKHR = 1000104003;
pub const VkColorSpaceKHR_VK_COLOR_SPACE_DCI_P3_NONLINEAR_EXT: VkColorSpaceKHR = 1000104004;
pub const VkColorSpaceKHR_VK_COLOR_SPACE_BT709_LINEAR_EXT: VkColorSpaceKHR = 1000104005;
pub const VkColorSpaceKHR_VK_COLOR_SPACE_BT709_NONLINEAR_EXT: VkColorSpaceKHR = 1000104006;
pub const VkColorSpaceKHR_VK_COLOR_SPACE_BT2020_LINEAR_EXT: VkColorSpaceKHR = 1000104007;
pub const VkColorSpaceKHR_VK_COLOR_SPACE_HDR10_ST2084_EXT: VkColorSpaceKHR = 1000104008;
#[doc = " VK_COLOR_SPACE_DOLBYVISION_EXT is deprecated, but no reason was given in the API XML"]
pub const VkColorSpaceKHR_VK_COLOR_SPACE_DOLBYVISION_EXT: VkColorSpaceKHR = 1000104009;
#[doc = " VK_COLOR_SPACE_DOLBYVISION_EXT is deprecated, but no reason was given in the API XML"]
pub const VkColorSpaceKHR_VK_COLOR_SPACE_HDR10_HLG_EXT: VkColorSpaceKHR = 1000104010;
#[doc = " VK_COLOR_SPACE_DOLBYVISION_EXT is deprecated, but no reason was given in the API XML"]
pub const VkColorSpaceKHR_VK_COLOR_SPACE_ADOBERGB_LINEAR_EXT: VkColorSpaceKHR = 1000104011;
#[doc = " VK_COLOR_SPACE_DOLBYVISION_EXT is deprecated, but no reason was given in the API XML"]
pub const VkColorSpaceKHR_VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT: VkColorSpaceKHR = 1000104012;
#[doc = " VK_COLOR_SPACE_DOLBYVISION_EXT is deprecated, but no reason was given in the API XML"]
pub const VkColorSpaceKHR_VK_COLOR_SPACE_PASS_THROUGH_EXT: VkColorSpaceKHR = 1000104013;
#[doc = " VK_COLOR_SPACE_DOLBYVISION_EXT is deprecated, but no reason was given in the API XML"]
pub const VkColorSpaceKHR_VK_COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT: VkColorSpaceKHR = 1000104014;
#[doc = " VK_COLOR_SPACE_DOLBYVISION_EXT is deprecated, but no reason was given in the API XML"]
pub const VkColorSpaceKHR_VK_COLOR_SPACE_DISPLAY_NATIVE_AMD: VkColorSpaceKHR = 1000213000;
#[doc = " VK_COLORSPACE_SRGB_NONLINEAR_KHR is a deprecated alias"]
pub const VkColorSpaceKHR_VK_COLORSPACE_SRGB_NONLINEAR_KHR: VkColorSpaceKHR = 0;
#[doc = " VK_COLOR_SPACE_DCI_P3_LINEAR_EXT is a deprecated alias"]
pub const VkColorSpaceKHR_VK_COLOR_SPACE_DCI_P3_LINEAR_EXT: VkColorSpaceKHR = 1000104003;
#[doc = " VK_COLOR_SPACE_DCI_P3_LINEAR_EXT is a deprecated alias"]
pub const VkColorSpaceKHR_VK_COLOR_SPACE_MAX_ENUM_KHR: VkColorSpaceKHR = 2147483647;
pub const VkSurfaceTransformFlagBitsKHR_VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR:
    VkSurfaceTransformFlagBitsKHR = 1;
pub const VkSurfaceTransformFlagBitsKHR_VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR:
    VkSurfaceTransformFlagBitsKHR = 2;
pub const VkSurfaceTransformFlagBitsKHR_VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR:
    VkSurfaceTransformFlagBitsKHR = 4;
pub const VkSurfaceTransformFlagBitsKHR_VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR:
    VkSurfaceTransformFlagBitsKHR = 8;
pub const VkSurfaceTransformFlagBitsKHR_VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR:
    VkSurfaceTransformFlagBitsKHR = 16;
pub const VkSurfaceTransformFlagBitsKHR_VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR:
    VkSurfaceTransformFlagBitsKHR = 32;
pub const VkSurfaceTransformFlagBitsKHR_VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR : VkSurfaceTransformFlagBitsKHR = 64 ;
pub const VkSurfaceTransformFlagBitsKHR_VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR : VkSurfaceTransformFlagBitsKHR = 128 ;
pub const VkSurfaceTransformFlagBitsKHR_VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR:
    VkSurfaceTransformFlagBitsKHR = 256;
pub const VkSurfaceTransformFlagBitsKHR_VK_SURFACE_TRANSFORM_FLAG_BITS_MAX_ENUM_KHR:
    VkSurfaceTransformFlagBitsKHR = 2147483647;
pub const VkCompositeAlphaFlagBitsKHR_VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR:
    VkCompositeAlphaFlagBitsKHR = 1;
pub const VkCompositeAlphaFlagBitsKHR_VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR:
    VkCompositeAlphaFlagBitsKHR = 2;
pub const VkCompositeAlphaFlagBitsKHR_VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR:
    VkCompositeAlphaFlagBitsKHR = 4;
pub const VkCompositeAlphaFlagBitsKHR_VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR:
    VkCompositeAlphaFlagBitsKHR = 8;
pub const VkCompositeAlphaFlagBitsKHR_VK_COMPOSITE_ALPHA_FLAG_BITS_MAX_ENUM_KHR:
    VkCompositeAlphaFlagBitsKHR = 2147483647;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSurfaceCapabilitiesKHR"]
        [::core::mem::size_of::<VkSurfaceCapabilitiesKHR>() - 52usize];
    ["Alignment of VkSurfaceCapabilitiesKHR"]
        [::core::mem::align_of::<VkSurfaceCapabilitiesKHR>() - 4usize];
    ["Offset of field: VkSurfaceCapabilitiesKHR::minImageCount"]
        [::core::mem::offset_of!(VkSurfaceCapabilitiesKHR, minImageCount) - 0usize];
    ["Offset of field: VkSurfaceCapabilitiesKHR::maxImageCount"]
        [::core::mem::offset_of!(VkSurfaceCapabilitiesKHR, maxImageCount) - 4usize];
    ["Offset of field: VkSurfaceCapabilitiesKHR::currentExtent"]
        [::core::mem::offset_of!(VkSurfaceCapabilitiesKHR, currentExtent) - 8usize];
    ["Offset of field: VkSurfaceCapabilitiesKHR::minImageExtent"]
        [::core::mem::offset_of!(VkSurfaceCapabilitiesKHR, minImageExtent) - 16usize];
    ["Offset of field: VkSurfaceCapabilitiesKHR::maxImageExtent"]
        [::core::mem::offset_of!(VkSurfaceCapabilitiesKHR, maxImageExtent) - 24usize];
    ["Offset of field: VkSurfaceCapabilitiesKHR::maxImageArrayLayers"]
        [::core::mem::offset_of!(VkSurfaceCapabilitiesKHR, maxImageArrayLayers) - 32usize];
    ["Offset of field: VkSurfaceCapabilitiesKHR::supportedTransforms"]
        [::core::mem::offset_of!(VkSurfaceCapabilitiesKHR, supportedTransforms) - 36usize];
    ["Offset of field: VkSurfaceCapabilitiesKHR::currentTransform"]
        [::core::mem::offset_of!(VkSurfaceCapabilitiesKHR, currentTransform) - 40usize];
    ["Offset of field: VkSurfaceCapabilitiesKHR::supportedCompositeAlpha"]
        [::core::mem::offset_of!(VkSurfaceCapabilitiesKHR, supportedCompositeAlpha) - 44usize];
    ["Offset of field: VkSurfaceCapabilitiesKHR::supportedUsageFlags"]
        [::core::mem::offset_of!(VkSurfaceCapabilitiesKHR, supportedUsageFlags) - 48usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSurfaceFormatKHR"][::core::mem::size_of::<VkSurfaceFormatKHR>() - 8usize];
    ["Alignment of VkSurfaceFormatKHR"][::core::mem::align_of::<VkSurfaceFormatKHR>() - 4usize];
    ["Offset of field: VkSurfaceFormatKHR::format"]
        [::core::mem::offset_of!(VkSurfaceFormatKHR, format) - 0usize];
    ["Offset of field: VkSurfaceFormatKHR::colorSpace"]
        [::core::mem::offset_of!(VkSurfaceFormatKHR, colorSpace) - 4usize];
};
pub const VkSwapchainCreateFlagBitsKHR_VK_SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR:
    VkSwapchainCreateFlagBitsKHR = 1;
pub const VkSwapchainCreateFlagBitsKHR_VK_SWAPCHAIN_CREATE_PROTECTED_BIT_KHR:
    VkSwapchainCreateFlagBitsKHR = 2;
pub const VkSwapchainCreateFlagBitsKHR_VK_SWAPCHAIN_CREATE_MUTABLE_FORMAT_BIT_KHR:
    VkSwapchainCreateFlagBitsKHR = 4;
pub const VkSwapchainCreateFlagBitsKHR_VK_SWAPCHAIN_CREATE_DEFERRED_MEMORY_ALLOCATION_BIT_EXT:
    VkSwapchainCreateFlagBitsKHR = 8;
pub const VkSwapchainCreateFlagBitsKHR_VK_SWAPCHAIN_CREATE_FLAG_BITS_MAX_ENUM_KHR:
    VkSwapchainCreateFlagBitsKHR = 2147483647;
pub const VkDeviceGroupPresentModeFlagBitsKHR_VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR:
    VkDeviceGroupPresentModeFlagBitsKHR = 1;
pub const VkDeviceGroupPresentModeFlagBitsKHR_VK_DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR:
    VkDeviceGroupPresentModeFlagBitsKHR = 2;
pub const VkDeviceGroupPresentModeFlagBitsKHR_VK_DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR:
    VkDeviceGroupPresentModeFlagBitsKHR = 4;
pub const VkDeviceGroupPresentModeFlagBitsKHR_VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR : VkDeviceGroupPresentModeFlagBitsKHR = 8 ;
pub const VkDeviceGroupPresentModeFlagBitsKHR_VK_DEVICE_GROUP_PRESENT_MODE_FLAG_BITS_MAX_ENUM_KHR : VkDeviceGroupPresentModeFlagBitsKHR = 2147483647 ;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSwapchainCreateInfoKHR"]
        [::core::mem::size_of::<VkSwapchainCreateInfoKHR>() - 88usize];
    ["Alignment of VkSwapchainCreateInfoKHR"]
        [::core::mem::align_of::<VkSwapchainCreateInfoKHR>() - 8usize];
    ["Offset of field: VkSwapchainCreateInfoKHR::sType"]
        [::core::mem::offset_of!(VkSwapchainCreateInfoKHR, sType) - 0usize];
    ["Offset of field: VkSwapchainCreateInfoKHR::pNext"]
        [::core::mem::offset_of!(VkSwapchainCreateInfoKHR, pNext) - 4usize];
    ["Offset of field: VkSwapchainCreateInfoKHR::flags"]
        [::core::mem::offset_of!(VkSwapchainCreateInfoKHR, flags) - 8usize];
    ["Offset of field: VkSwapchainCreateInfoKHR::surface"]
        [::core::mem::offset_of!(VkSwapchainCreateInfoKHR, surface) - 16usize];
    ["Offset of field: VkSwapchainCreateInfoKHR::minImageCount"]
        [::core::mem::offset_of!(VkSwapchainCreateInfoKHR, minImageCount) - 24usize];
    ["Offset of field: VkSwapchainCreateInfoKHR::imageFormat"]
        [::core::mem::offset_of!(VkSwapchainCreateInfoKHR, imageFormat) - 28usize];
    ["Offset of field: VkSwapchainCreateInfoKHR::imageColorSpace"]
        [::core::mem::offset_of!(VkSwapchainCreateInfoKHR, imageColorSpace) - 32usize];
    ["Offset of field: VkSwapchainCreateInfoKHR::imageExtent"]
        [::core::mem::offset_of!(VkSwapchainCreateInfoKHR, imageExtent) - 36usize];
    ["Offset of field: VkSwapchainCreateInfoKHR::imageArrayLayers"]
        [::core::mem::offset_of!(VkSwapchainCreateInfoKHR, imageArrayLayers) - 44usize];
    ["Offset of field: VkSwapchainCreateInfoKHR::imageUsage"]
        [::core::mem::offset_of!(VkSwapchainCreateInfoKHR, imageUsage) - 48usize];
    ["Offset of field: VkSwapchainCreateInfoKHR::imageSharingMode"]
        [::core::mem::offset_of!(VkSwapchainCreateInfoKHR, imageSharingMode) - 52usize];
    ["Offset of field: VkSwapchainCreateInfoKHR::queueFamilyIndexCount"]
        [::core::mem::offset_of!(VkSwapchainCreateInfoKHR, queueFamilyIndexCount) - 56usize];
    ["Offset of field: VkSwapchainCreateInfoKHR::pQueueFamilyIndices"]
        [::core::mem::offset_of!(VkSwapchainCreateInfoKHR, pQueueFamilyIndices) - 60usize];
    ["Offset of field: VkSwapchainCreateInfoKHR::preTransform"]
        [::core::mem::offset_of!(VkSwapchainCreateInfoKHR, preTransform) - 64usize];
    ["Offset of field: VkSwapchainCreateInfoKHR::compositeAlpha"]
        [::core::mem::offset_of!(VkSwapchainCreateInfoKHR, compositeAlpha) - 68usize];
    ["Offset of field: VkSwapchainCreateInfoKHR::presentMode"]
        [::core::mem::offset_of!(VkSwapchainCreateInfoKHR, presentMode) - 72usize];
    ["Offset of field: VkSwapchainCreateInfoKHR::clipped"]
        [::core::mem::offset_of!(VkSwapchainCreateInfoKHR, clipped) - 76usize];
    ["Offset of field: VkSwapchainCreateInfoKHR::oldSwapchain"]
        [::core::mem::offset_of!(VkSwapchainCreateInfoKHR, oldSwapchain) - 80usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPresentInfoKHR"][::core::mem::size_of::<VkPresentInfoKHR>() - 32usize];
    ["Alignment of VkPresentInfoKHR"][::core::mem::align_of::<VkPresentInfoKHR>() - 4usize];
    ["Offset of field: VkPresentInfoKHR::sType"]
        [::core::mem::offset_of!(VkPresentInfoKHR, sType) - 0usize];
    ["Offset of field: VkPresentInfoKHR::pNext"]
        [::core::mem::offset_of!(VkPresentInfoKHR, pNext) - 4usize];
    ["Offset of field: VkPresentInfoKHR::waitSemaphoreCount"]
        [::core::mem::offset_of!(VkPresentInfoKHR, waitSemaphoreCount) - 8usize];
    ["Offset of field: VkPresentInfoKHR::pWaitSemaphores"]
        [::core::mem::offset_of!(VkPresentInfoKHR, pWaitSemaphores) - 12usize];
    ["Offset of field: VkPresentInfoKHR::swapchainCount"]
        [::core::mem::offset_of!(VkPresentInfoKHR, swapchainCount) - 16usize];
    ["Offset of field: VkPresentInfoKHR::pSwapchains"]
        [::core::mem::offset_of!(VkPresentInfoKHR, pSwapchains) - 20usize];
    ["Offset of field: VkPresentInfoKHR::pImageIndices"]
        [::core::mem::offset_of!(VkPresentInfoKHR, pImageIndices) - 24usize];
    ["Offset of field: VkPresentInfoKHR::pResults"]
        [::core::mem::offset_of!(VkPresentInfoKHR, pResults) - 28usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkImageSwapchainCreateInfoKHR"]
        [::core::mem::size_of::<VkImageSwapchainCreateInfoKHR>() - 16usize];
    ["Alignment of VkImageSwapchainCreateInfoKHR"]
        [::core::mem::align_of::<VkImageSwapchainCreateInfoKHR>() - 8usize];
    ["Offset of field: VkImageSwapchainCreateInfoKHR::sType"]
        [::core::mem::offset_of!(VkImageSwapchainCreateInfoKHR, sType) - 0usize];
    ["Offset of field: VkImageSwapchainCreateInfoKHR::pNext"]
        [::core::mem::offset_of!(VkImageSwapchainCreateInfoKHR, pNext) - 4usize];
    ["Offset of field: VkImageSwapchainCreateInfoKHR::swapchain"]
        [::core::mem::offset_of!(VkImageSwapchainCreateInfoKHR, swapchain) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkBindImageMemorySwapchainInfoKHR"]
        [::core::mem::size_of::<VkBindImageMemorySwapchainInfoKHR>() - 24usize];
    ["Alignment of VkBindImageMemorySwapchainInfoKHR"]
        [::core::mem::align_of::<VkBindImageMemorySwapchainInfoKHR>() - 8usize];
    ["Offset of field: VkBindImageMemorySwapchainInfoKHR::sType"]
        [::core::mem::offset_of!(VkBindImageMemorySwapchainInfoKHR, sType) - 0usize];
    ["Offset of field: VkBindImageMemorySwapchainInfoKHR::pNext"]
        [::core::mem::offset_of!(VkBindImageMemorySwapchainInfoKHR, pNext) - 4usize];
    ["Offset of field: VkBindImageMemorySwapchainInfoKHR::swapchain"]
        [::core::mem::offset_of!(VkBindImageMemorySwapchainInfoKHR, swapchain) - 8usize];
    ["Offset of field: VkBindImageMemorySwapchainInfoKHR::imageIndex"]
        [::core::mem::offset_of!(VkBindImageMemorySwapchainInfoKHR, imageIndex) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkAcquireNextImageInfoKHR"]
        [::core::mem::size_of::<VkAcquireNextImageInfoKHR>() - 48usize];
    ["Alignment of VkAcquireNextImageInfoKHR"]
        [::core::mem::align_of::<VkAcquireNextImageInfoKHR>() - 8usize];
    ["Offset of field: VkAcquireNextImageInfoKHR::sType"]
        [::core::mem::offset_of!(VkAcquireNextImageInfoKHR, sType) - 0usize];
    ["Offset of field: VkAcquireNextImageInfoKHR::pNext"]
        [::core::mem::offset_of!(VkAcquireNextImageInfoKHR, pNext) - 4usize];
    ["Offset of field: VkAcquireNextImageInfoKHR::swapchain"]
        [::core::mem::offset_of!(VkAcquireNextImageInfoKHR, swapchain) - 8usize];
    ["Offset of field: VkAcquireNextImageInfoKHR::timeout"]
        [::core::mem::offset_of!(VkAcquireNextImageInfoKHR, timeout) - 16usize];
    ["Offset of field: VkAcquireNextImageInfoKHR::semaphore"]
        [::core::mem::offset_of!(VkAcquireNextImageInfoKHR, semaphore) - 24usize];
    ["Offset of field: VkAcquireNextImageInfoKHR::fence"]
        [::core::mem::offset_of!(VkAcquireNextImageInfoKHR, fence) - 32usize];
    ["Offset of field: VkAcquireNextImageInfoKHR::deviceMask"]
        [::core::mem::offset_of!(VkAcquireNextImageInfoKHR, deviceMask) - 40usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDeviceGroupPresentCapabilitiesKHR"]
        [::core::mem::size_of::<VkDeviceGroupPresentCapabilitiesKHR>() - 140usize];
    ["Alignment of VkDeviceGroupPresentCapabilitiesKHR"]
        [::core::mem::align_of::<VkDeviceGroupPresentCapabilitiesKHR>() - 4usize];
    ["Offset of field: VkDeviceGroupPresentCapabilitiesKHR::sType"]
        [::core::mem::offset_of!(VkDeviceGroupPresentCapabilitiesKHR, sType) - 0usize];
    ["Offset of field: VkDeviceGroupPresentCapabilitiesKHR::pNext"]
        [::core::mem::offset_of!(VkDeviceGroupPresentCapabilitiesKHR, pNext) - 4usize];
    ["Offset of field: VkDeviceGroupPresentCapabilitiesKHR::presentMask"]
        [::core::mem::offset_of!(VkDeviceGroupPresentCapabilitiesKHR, presentMask) - 8usize];
    ["Offset of field: VkDeviceGroupPresentCapabilitiesKHR::modes"]
        [::core::mem::offset_of!(VkDeviceGroupPresentCapabilitiesKHR, modes) - 136usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDeviceGroupPresentInfoKHR"]
        [::core::mem::size_of::<VkDeviceGroupPresentInfoKHR>() - 20usize];
    ["Alignment of VkDeviceGroupPresentInfoKHR"]
        [::core::mem::align_of::<VkDeviceGroupPresentInfoKHR>() - 4usize];
    ["Offset of field: VkDeviceGroupPresentInfoKHR::sType"]
        [::core::mem::offset_of!(VkDeviceGroupPresentInfoKHR, sType) - 0usize];
    ["Offset of field: VkDeviceGroupPresentInfoKHR::pNext"]
        [::core::mem::offset_of!(VkDeviceGroupPresentInfoKHR, pNext) - 4usize];
    ["Offset of field: VkDeviceGroupPresentInfoKHR::swapchainCount"]
        [::core::mem::offset_of!(VkDeviceGroupPresentInfoKHR, swapchainCount) - 8usize];
    ["Offset of field: VkDeviceGroupPresentInfoKHR::pDeviceMasks"]
        [::core::mem::offset_of!(VkDeviceGroupPresentInfoKHR, pDeviceMasks) - 12usize];
    ["Offset of field: VkDeviceGroupPresentInfoKHR::mode"]
        [::core::mem::offset_of!(VkDeviceGroupPresentInfoKHR, mode) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDeviceGroupSwapchainCreateInfoKHR"]
        [::core::mem::size_of::<VkDeviceGroupSwapchainCreateInfoKHR>() - 12usize];
    ["Alignment of VkDeviceGroupSwapchainCreateInfoKHR"]
        [::core::mem::align_of::<VkDeviceGroupSwapchainCreateInfoKHR>() - 4usize];
    ["Offset of field: VkDeviceGroupSwapchainCreateInfoKHR::sType"]
        [::core::mem::offset_of!(VkDeviceGroupSwapchainCreateInfoKHR, sType) - 0usize];
    ["Offset of field: VkDeviceGroupSwapchainCreateInfoKHR::pNext"]
        [::core::mem::offset_of!(VkDeviceGroupSwapchainCreateInfoKHR, pNext) - 4usize];
    ["Offset of field: VkDeviceGroupSwapchainCreateInfoKHR::modes"]
        [::core::mem::offset_of!(VkDeviceGroupSwapchainCreateInfoKHR, modes) - 8usize];
};
pub const VkDisplayPlaneAlphaFlagBitsKHR_VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR:
    VkDisplayPlaneAlphaFlagBitsKHR = 1;
pub const VkDisplayPlaneAlphaFlagBitsKHR_VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR:
    VkDisplayPlaneAlphaFlagBitsKHR = 2;
pub const VkDisplayPlaneAlphaFlagBitsKHR_VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR:
    VkDisplayPlaneAlphaFlagBitsKHR = 4;
pub const VkDisplayPlaneAlphaFlagBitsKHR_VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR:
    VkDisplayPlaneAlphaFlagBitsKHR = 8;
pub const VkDisplayPlaneAlphaFlagBitsKHR_VK_DISPLAY_PLANE_ALPHA_FLAG_BITS_MAX_ENUM_KHR:
    VkDisplayPlaneAlphaFlagBitsKHR = 2147483647;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDisplayModeParametersKHR"]
        [::core::mem::size_of::<VkDisplayModeParametersKHR>() - 12usize];
    ["Alignment of VkDisplayModeParametersKHR"]
        [::core::mem::align_of::<VkDisplayModeParametersKHR>() - 4usize];
    ["Offset of field: VkDisplayModeParametersKHR::visibleRegion"]
        [::core::mem::offset_of!(VkDisplayModeParametersKHR, visibleRegion) - 0usize];
    ["Offset of field: VkDisplayModeParametersKHR::refreshRate"]
        [::core::mem::offset_of!(VkDisplayModeParametersKHR, refreshRate) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDisplayModeCreateInfoKHR"]
        [::core::mem::size_of::<VkDisplayModeCreateInfoKHR>() - 24usize];
    ["Alignment of VkDisplayModeCreateInfoKHR"]
        [::core::mem::align_of::<VkDisplayModeCreateInfoKHR>() - 4usize];
    ["Offset of field: VkDisplayModeCreateInfoKHR::sType"]
        [::core::mem::offset_of!(VkDisplayModeCreateInfoKHR, sType) - 0usize];
    ["Offset of field: VkDisplayModeCreateInfoKHR::pNext"]
        [::core::mem::offset_of!(VkDisplayModeCreateInfoKHR, pNext) - 4usize];
    ["Offset of field: VkDisplayModeCreateInfoKHR::flags"]
        [::core::mem::offset_of!(VkDisplayModeCreateInfoKHR, flags) - 8usize];
    ["Offset of field: VkDisplayModeCreateInfoKHR::parameters"]
        [::core::mem::offset_of!(VkDisplayModeCreateInfoKHR, parameters) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDisplayModePropertiesKHR"]
        [::core::mem::size_of::<VkDisplayModePropertiesKHR>() - 24usize];
    ["Alignment of VkDisplayModePropertiesKHR"]
        [::core::mem::align_of::<VkDisplayModePropertiesKHR>() - 8usize];
    ["Offset of field: VkDisplayModePropertiesKHR::displayMode"]
        [::core::mem::offset_of!(VkDisplayModePropertiesKHR, displayMode) - 0usize];
    ["Offset of field: VkDisplayModePropertiesKHR::parameters"]
        [::core::mem::offset_of!(VkDisplayModePropertiesKHR, parameters) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDisplayPlaneCapabilitiesKHR"]
        [::core::mem::size_of::<VkDisplayPlaneCapabilitiesKHR>() - 68usize];
    ["Alignment of VkDisplayPlaneCapabilitiesKHR"]
        [::core::mem::align_of::<VkDisplayPlaneCapabilitiesKHR>() - 4usize];
    ["Offset of field: VkDisplayPlaneCapabilitiesKHR::supportedAlpha"]
        [::core::mem::offset_of!(VkDisplayPlaneCapabilitiesKHR, supportedAlpha) - 0usize];
    ["Offset of field: VkDisplayPlaneCapabilitiesKHR::minSrcPosition"]
        [::core::mem::offset_of!(VkDisplayPlaneCapabilitiesKHR, minSrcPosition) - 4usize];
    ["Offset of field: VkDisplayPlaneCapabilitiesKHR::maxSrcPosition"]
        [::core::mem::offset_of!(VkDisplayPlaneCapabilitiesKHR, maxSrcPosition) - 12usize];
    ["Offset of field: VkDisplayPlaneCapabilitiesKHR::minSrcExtent"]
        [::core::mem::offset_of!(VkDisplayPlaneCapabilitiesKHR, minSrcExtent) - 20usize];
    ["Offset of field: VkDisplayPlaneCapabilitiesKHR::maxSrcExtent"]
        [::core::mem::offset_of!(VkDisplayPlaneCapabilitiesKHR, maxSrcExtent) - 28usize];
    ["Offset of field: VkDisplayPlaneCapabilitiesKHR::minDstPosition"]
        [::core::mem::offset_of!(VkDisplayPlaneCapabilitiesKHR, minDstPosition) - 36usize];
    ["Offset of field: VkDisplayPlaneCapabilitiesKHR::maxDstPosition"]
        [::core::mem::offset_of!(VkDisplayPlaneCapabilitiesKHR, maxDstPosition) - 44usize];
    ["Offset of field: VkDisplayPlaneCapabilitiesKHR::minDstExtent"]
        [::core::mem::offset_of!(VkDisplayPlaneCapabilitiesKHR, minDstExtent) - 52usize];
    ["Offset of field: VkDisplayPlaneCapabilitiesKHR::maxDstExtent"]
        [::core::mem::offset_of!(VkDisplayPlaneCapabilitiesKHR, maxDstExtent) - 60usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDisplayPlanePropertiesKHR"]
        [::core::mem::size_of::<VkDisplayPlanePropertiesKHR>() - 16usize];
    ["Alignment of VkDisplayPlanePropertiesKHR"]
        [::core::mem::align_of::<VkDisplayPlanePropertiesKHR>() - 8usize];
    ["Offset of field: VkDisplayPlanePropertiesKHR::currentDisplay"]
        [::core::mem::offset_of!(VkDisplayPlanePropertiesKHR, currentDisplay) - 0usize];
    ["Offset of field: VkDisplayPlanePropertiesKHR::currentStackIndex"]
        [::core::mem::offset_of!(VkDisplayPlanePropertiesKHR, currentStackIndex) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDisplayPropertiesKHR"][::core::mem::size_of::<VkDisplayPropertiesKHR>() - 40usize];
    ["Alignment of VkDisplayPropertiesKHR"]
        [::core::mem::align_of::<VkDisplayPropertiesKHR>() - 8usize];
    ["Offset of field: VkDisplayPropertiesKHR::display"]
        [::core::mem::offset_of!(VkDisplayPropertiesKHR, display) - 0usize];
    ["Offset of field: VkDisplayPropertiesKHR::displayName"]
        [::core::mem::offset_of!(VkDisplayPropertiesKHR, displayName) - 8usize];
    ["Offset of field: VkDisplayPropertiesKHR::physicalDimensions"]
        [::core::mem::offset_of!(VkDisplayPropertiesKHR, physicalDimensions) - 12usize];
    ["Offset of field: VkDisplayPropertiesKHR::physicalResolution"]
        [::core::mem::offset_of!(VkDisplayPropertiesKHR, physicalResolution) - 20usize];
    ["Offset of field: VkDisplayPropertiesKHR::supportedTransforms"]
        [::core::mem::offset_of!(VkDisplayPropertiesKHR, supportedTransforms) - 28usize];
    ["Offset of field: VkDisplayPropertiesKHR::planeReorderPossible"]
        [::core::mem::offset_of!(VkDisplayPropertiesKHR, planeReorderPossible) - 32usize];
    ["Offset of field: VkDisplayPropertiesKHR::persistentContent"]
        [::core::mem::offset_of!(VkDisplayPropertiesKHR, persistentContent) - 36usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDisplaySurfaceCreateInfoKHR"]
        [::core::mem::size_of::<VkDisplaySurfaceCreateInfoKHR>() - 56usize];
    ["Alignment of VkDisplaySurfaceCreateInfoKHR"]
        [::core::mem::align_of::<VkDisplaySurfaceCreateInfoKHR>() - 8usize];
    ["Offset of field: VkDisplaySurfaceCreateInfoKHR::sType"]
        [::core::mem::offset_of!(VkDisplaySurfaceCreateInfoKHR, sType) - 0usize];
    ["Offset of field: VkDisplaySurfaceCreateInfoKHR::pNext"]
        [::core::mem::offset_of!(VkDisplaySurfaceCreateInfoKHR, pNext) - 4usize];
    ["Offset of field: VkDisplaySurfaceCreateInfoKHR::flags"]
        [::core::mem::offset_of!(VkDisplaySurfaceCreateInfoKHR, flags) - 8usize];
    ["Offset of field: VkDisplaySurfaceCreateInfoKHR::displayMode"]
        [::core::mem::offset_of!(VkDisplaySurfaceCreateInfoKHR, displayMode) - 16usize];
    ["Offset of field: VkDisplaySurfaceCreateInfoKHR::planeIndex"]
        [::core::mem::offset_of!(VkDisplaySurfaceCreateInfoKHR, planeIndex) - 24usize];
    ["Offset of field: VkDisplaySurfaceCreateInfoKHR::planeStackIndex"]
        [::core::mem::offset_of!(VkDisplaySurfaceCreateInfoKHR, planeStackIndex) - 28usize];
    ["Offset of field: VkDisplaySurfaceCreateInfoKHR::transform"]
        [::core::mem::offset_of!(VkDisplaySurfaceCreateInfoKHR, transform) - 32usize];
    ["Offset of field: VkDisplaySurfaceCreateInfoKHR::globalAlpha"]
        [::core::mem::offset_of!(VkDisplaySurfaceCreateInfoKHR, globalAlpha) - 36usize];
    ["Offset of field: VkDisplaySurfaceCreateInfoKHR::alphaMode"]
        [::core::mem::offset_of!(VkDisplaySurfaceCreateInfoKHR, alphaMode) - 40usize];
    ["Offset of field: VkDisplaySurfaceCreateInfoKHR::imageExtent"]
        [::core::mem::offset_of!(VkDisplaySurfaceCreateInfoKHR, imageExtent) - 44usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDisplayPresentInfoKHR"]
        [::core::mem::size_of::<VkDisplayPresentInfoKHR>() - 44usize];
    ["Alignment of VkDisplayPresentInfoKHR"]
        [::core::mem::align_of::<VkDisplayPresentInfoKHR>() - 4usize];
    ["Offset of field: VkDisplayPresentInfoKHR::sType"]
        [::core::mem::offset_of!(VkDisplayPresentInfoKHR, sType) - 0usize];
    ["Offset of field: VkDisplayPresentInfoKHR::pNext"]
        [::core::mem::offset_of!(VkDisplayPresentInfoKHR, pNext) - 4usize];
    ["Offset of field: VkDisplayPresentInfoKHR::srcRect"]
        [::core::mem::offset_of!(VkDisplayPresentInfoKHR, srcRect) - 8usize];
    ["Offset of field: VkDisplayPresentInfoKHR::dstRect"]
        [::core::mem::offset_of!(VkDisplayPresentInfoKHR, dstRect) - 24usize];
    ["Offset of field: VkDisplayPresentInfoKHR::persistent"]
        [::core::mem::offset_of!(VkDisplayPresentInfoKHR, persistent) - 40usize];
};
pub const VkQueryResultStatusKHR_VK_QUERY_RESULT_STATUS_ERROR_KHR: VkQueryResultStatusKHR = -1;
pub const VkQueryResultStatusKHR_VK_QUERY_RESULT_STATUS_NOT_READY_KHR: VkQueryResultStatusKHR = 0;
pub const VkQueryResultStatusKHR_VK_QUERY_RESULT_STATUS_COMPLETE_KHR: VkQueryResultStatusKHR = 1;
pub const VkQueryResultStatusKHR_VK_QUERY_RESULT_STATUS_INSUFFICIENT_BITSTREAM_BUFFER_RANGE_KHR:
    VkQueryResultStatusKHR = -1000299000;
pub const VkQueryResultStatusKHR_VK_QUERY_RESULT_STATUS_MAX_ENUM_KHR: VkQueryResultStatusKHR =
    2147483647;
pub const VkVideoCodecOperationFlagBitsKHR_VK_VIDEO_CODEC_OPERATION_NONE_KHR:
    VkVideoCodecOperationFlagBitsKHR = 0;
pub const VkVideoCodecOperationFlagBitsKHR_VK_VIDEO_CODEC_OPERATION_ENCODE_H264_BIT_KHR:
    VkVideoCodecOperationFlagBitsKHR = 65536;
pub const VkVideoCodecOperationFlagBitsKHR_VK_VIDEO_CODEC_OPERATION_ENCODE_H265_BIT_KHR:
    VkVideoCodecOperationFlagBitsKHR = 131072;
pub const VkVideoCodecOperationFlagBitsKHR_VK_VIDEO_CODEC_OPERATION_DECODE_H264_BIT_KHR:
    VkVideoCodecOperationFlagBitsKHR = 1;
pub const VkVideoCodecOperationFlagBitsKHR_VK_VIDEO_CODEC_OPERATION_DECODE_H265_BIT_KHR:
    VkVideoCodecOperationFlagBitsKHR = 2;
pub const VkVideoCodecOperationFlagBitsKHR_VK_VIDEO_CODEC_OPERATION_DECODE_AV1_BIT_KHR:
    VkVideoCodecOperationFlagBitsKHR = 4;
pub const VkVideoCodecOperationFlagBitsKHR_VK_VIDEO_CODEC_OPERATION_ENCODE_AV1_BIT_KHR:
    VkVideoCodecOperationFlagBitsKHR = 262144;
pub const VkVideoCodecOperationFlagBitsKHR_VK_VIDEO_CODEC_OPERATION_FLAG_BITS_MAX_ENUM_KHR:
    VkVideoCodecOperationFlagBitsKHR = 2147483647;
pub const VkVideoChromaSubsamplingFlagBitsKHR_VK_VIDEO_CHROMA_SUBSAMPLING_INVALID_KHR:
    VkVideoChromaSubsamplingFlagBitsKHR = 0;
pub const VkVideoChromaSubsamplingFlagBitsKHR_VK_VIDEO_CHROMA_SUBSAMPLING_MONOCHROME_BIT_KHR:
    VkVideoChromaSubsamplingFlagBitsKHR = 1;
pub const VkVideoChromaSubsamplingFlagBitsKHR_VK_VIDEO_CHROMA_SUBSAMPLING_420_BIT_KHR:
    VkVideoChromaSubsamplingFlagBitsKHR = 2;
pub const VkVideoChromaSubsamplingFlagBitsKHR_VK_VIDEO_CHROMA_SUBSAMPLING_422_BIT_KHR:
    VkVideoChromaSubsamplingFlagBitsKHR = 4;
pub const VkVideoChromaSubsamplingFlagBitsKHR_VK_VIDEO_CHROMA_SUBSAMPLING_444_BIT_KHR:
    VkVideoChromaSubsamplingFlagBitsKHR = 8;
pub const VkVideoChromaSubsamplingFlagBitsKHR_VK_VIDEO_CHROMA_SUBSAMPLING_FLAG_BITS_MAX_ENUM_KHR:
    VkVideoChromaSubsamplingFlagBitsKHR = 2147483647;
pub const VkVideoComponentBitDepthFlagBitsKHR_VK_VIDEO_COMPONENT_BIT_DEPTH_INVALID_KHR:
    VkVideoComponentBitDepthFlagBitsKHR = 0;
pub const VkVideoComponentBitDepthFlagBitsKHR_VK_VIDEO_COMPONENT_BIT_DEPTH_8_BIT_KHR:
    VkVideoComponentBitDepthFlagBitsKHR = 1;
pub const VkVideoComponentBitDepthFlagBitsKHR_VK_VIDEO_COMPONENT_BIT_DEPTH_10_BIT_KHR:
    VkVideoComponentBitDepthFlagBitsKHR = 4;
pub const VkVideoComponentBitDepthFlagBitsKHR_VK_VIDEO_COMPONENT_BIT_DEPTH_12_BIT_KHR:
    VkVideoComponentBitDepthFlagBitsKHR = 16;
pub const VkVideoComponentBitDepthFlagBitsKHR_VK_VIDEO_COMPONENT_BIT_DEPTH_FLAG_BITS_MAX_ENUM_KHR : VkVideoComponentBitDepthFlagBitsKHR = 2147483647 ;
pub const VkVideoCapabilityFlagBitsKHR_VK_VIDEO_CAPABILITY_PROTECTED_CONTENT_BIT_KHR:
    VkVideoCapabilityFlagBitsKHR = 1;
pub const VkVideoCapabilityFlagBitsKHR_VK_VIDEO_CAPABILITY_SEPARATE_REFERENCE_IMAGES_BIT_KHR:
    VkVideoCapabilityFlagBitsKHR = 2;
pub const VkVideoCapabilityFlagBitsKHR_VK_VIDEO_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR:
    VkVideoCapabilityFlagBitsKHR = 2147483647;
pub const VkVideoSessionCreateFlagBitsKHR_VK_VIDEO_SESSION_CREATE_PROTECTED_CONTENT_BIT_KHR:
    VkVideoSessionCreateFlagBitsKHR = 1;
pub const VkVideoSessionCreateFlagBitsKHR_VK_VIDEO_SESSION_CREATE_ALLOW_ENCODE_PARAMETER_OPTIMIZATIONS_BIT_KHR : VkVideoSessionCreateFlagBitsKHR = 2 ;
pub const VkVideoSessionCreateFlagBitsKHR_VK_VIDEO_SESSION_CREATE_INLINE_QUERIES_BIT_KHR:
    VkVideoSessionCreateFlagBitsKHR = 4;
pub const VkVideoSessionCreateFlagBitsKHR_VK_VIDEO_SESSION_CREATE_ALLOW_ENCODE_QUANTIZATION_DELTA_MAP_BIT_KHR : VkVideoSessionCreateFlagBitsKHR = 8 ;
pub const VkVideoSessionCreateFlagBitsKHR_VK_VIDEO_SESSION_CREATE_ALLOW_ENCODE_EMPHASIS_MAP_BIT_KHR : VkVideoSessionCreateFlagBitsKHR = 16 ;
pub const VkVideoSessionCreateFlagBitsKHR_VK_VIDEO_SESSION_CREATE_INLINE_SESSION_PARAMETERS_BIT_KHR : VkVideoSessionCreateFlagBitsKHR = 32 ;
pub const VkVideoSessionCreateFlagBitsKHR_VK_VIDEO_SESSION_CREATE_FLAG_BITS_MAX_ENUM_KHR:
    VkVideoSessionCreateFlagBitsKHR = 2147483647;
pub const VkVideoSessionParametersCreateFlagBitsKHR_VK_VIDEO_SESSION_PARAMETERS_CREATE_QUANTIZATION_MAP_COMPATIBLE_BIT_KHR : VkVideoSessionParametersCreateFlagBitsKHR = 1 ;
pub const VkVideoSessionParametersCreateFlagBitsKHR_VK_VIDEO_SESSION_PARAMETERS_CREATE_FLAG_BITS_MAX_ENUM_KHR : VkVideoSessionParametersCreateFlagBitsKHR = 2147483647 ;
pub const VkVideoCodingControlFlagBitsKHR_VK_VIDEO_CODING_CONTROL_RESET_BIT_KHR:
    VkVideoCodingControlFlagBitsKHR = 1;
pub const VkVideoCodingControlFlagBitsKHR_VK_VIDEO_CODING_CONTROL_ENCODE_RATE_CONTROL_BIT_KHR:
    VkVideoCodingControlFlagBitsKHR = 2;
pub const VkVideoCodingControlFlagBitsKHR_VK_VIDEO_CODING_CONTROL_ENCODE_QUALITY_LEVEL_BIT_KHR:
    VkVideoCodingControlFlagBitsKHR = 4;
pub const VkVideoCodingControlFlagBitsKHR_VK_VIDEO_CODING_CONTROL_FLAG_BITS_MAX_ENUM_KHR:
    VkVideoCodingControlFlagBitsKHR = 2147483647;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkQueueFamilyQueryResultStatusPropertiesKHR"]
        [::core::mem::size_of::<VkQueueFamilyQueryResultStatusPropertiesKHR>() - 12usize];
    ["Alignment of VkQueueFamilyQueryResultStatusPropertiesKHR"]
        [::core::mem::align_of::<VkQueueFamilyQueryResultStatusPropertiesKHR>() - 4usize];
    ["Offset of field: VkQueueFamilyQueryResultStatusPropertiesKHR::sType"]
        [::core::mem::offset_of!(VkQueueFamilyQueryResultStatusPropertiesKHR, sType) - 0usize];
    ["Offset of field: VkQueueFamilyQueryResultStatusPropertiesKHR::pNext"]
        [::core::mem::offset_of!(VkQueueFamilyQueryResultStatusPropertiesKHR, pNext) - 4usize];
    ["Offset of field: VkQueueFamilyQueryResultStatusPropertiesKHR::queryResultStatusSupport"][::core::mem::offset_of!(
        VkQueueFamilyQueryResultStatusPropertiesKHR,
        queryResultStatusSupport
    )
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkQueueFamilyVideoPropertiesKHR"]
        [::core::mem::size_of::<VkQueueFamilyVideoPropertiesKHR>() - 12usize];
    ["Alignment of VkQueueFamilyVideoPropertiesKHR"]
        [::core::mem::align_of::<VkQueueFamilyVideoPropertiesKHR>() - 4usize];
    ["Offset of field: VkQueueFamilyVideoPropertiesKHR::sType"]
        [::core::mem::offset_of!(VkQueueFamilyVideoPropertiesKHR, sType) - 0usize];
    ["Offset of field: VkQueueFamilyVideoPropertiesKHR::pNext"]
        [::core::mem::offset_of!(VkQueueFamilyVideoPropertiesKHR, pNext) - 4usize];
    ["Offset of field: VkQueueFamilyVideoPropertiesKHR::videoCodecOperations"]
        [::core::mem::offset_of!(VkQueueFamilyVideoPropertiesKHR, videoCodecOperations) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoProfileInfoKHR"][::core::mem::size_of::<VkVideoProfileInfoKHR>() - 24usize];
    ["Alignment of VkVideoProfileInfoKHR"]
        [::core::mem::align_of::<VkVideoProfileInfoKHR>() - 4usize];
    ["Offset of field: VkVideoProfileInfoKHR::sType"]
        [::core::mem::offset_of!(VkVideoProfileInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoProfileInfoKHR::pNext"]
        [::core::mem::offset_of!(VkVideoProfileInfoKHR, pNext) - 4usize];
    ["Offset of field: VkVideoProfileInfoKHR::videoCodecOperation"]
        [::core::mem::offset_of!(VkVideoProfileInfoKHR, videoCodecOperation) - 8usize];
    ["Offset of field: VkVideoProfileInfoKHR::chromaSubsampling"]
        [::core::mem::offset_of!(VkVideoProfileInfoKHR, chromaSubsampling) - 12usize];
    ["Offset of field: VkVideoProfileInfoKHR::lumaBitDepth"]
        [::core::mem::offset_of!(VkVideoProfileInfoKHR, lumaBitDepth) - 16usize];
    ["Offset of field: VkVideoProfileInfoKHR::chromaBitDepth"]
        [::core::mem::offset_of!(VkVideoProfileInfoKHR, chromaBitDepth) - 20usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoProfileListInfoKHR"]
        [::core::mem::size_of::<VkVideoProfileListInfoKHR>() - 16usize];
    ["Alignment of VkVideoProfileListInfoKHR"]
        [::core::mem::align_of::<VkVideoProfileListInfoKHR>() - 4usize];
    ["Offset of field: VkVideoProfileListInfoKHR::sType"]
        [::core::mem::offset_of!(VkVideoProfileListInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoProfileListInfoKHR::pNext"]
        [::core::mem::offset_of!(VkVideoProfileListInfoKHR, pNext) - 4usize];
    ["Offset of field: VkVideoProfileListInfoKHR::profileCount"]
        [::core::mem::offset_of!(VkVideoProfileListInfoKHR, profileCount) - 8usize];
    ["Offset of field: VkVideoProfileListInfoKHR::pProfiles"]
        [::core::mem::offset_of!(VkVideoProfileListInfoKHR, pProfiles) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoCapabilitiesKHR"][::core::mem::size_of::<VkVideoCapabilitiesKHR>() - 328usize];
    ["Alignment of VkVideoCapabilitiesKHR"]
        [::core::mem::align_of::<VkVideoCapabilitiesKHR>() - 8usize];
    ["Offset of field: VkVideoCapabilitiesKHR::sType"]
        [::core::mem::offset_of!(VkVideoCapabilitiesKHR, sType) - 0usize];
    ["Offset of field: VkVideoCapabilitiesKHR::pNext"]
        [::core::mem::offset_of!(VkVideoCapabilitiesKHR, pNext) - 4usize];
    ["Offset of field: VkVideoCapabilitiesKHR::flags"]
        [::core::mem::offset_of!(VkVideoCapabilitiesKHR, flags) - 8usize];
    ["Offset of field: VkVideoCapabilitiesKHR::minBitstreamBufferOffsetAlignment"][::core::mem::offset_of!(
        VkVideoCapabilitiesKHR,
        minBitstreamBufferOffsetAlignment
    ) - 16usize];
    ["Offset of field: VkVideoCapabilitiesKHR::minBitstreamBufferSizeAlignment"][::core::mem::offset_of!(
        VkVideoCapabilitiesKHR,
        minBitstreamBufferSizeAlignment
    ) - 24usize];
    ["Offset of field: VkVideoCapabilitiesKHR::pictureAccessGranularity"]
        [::core::mem::offset_of!(VkVideoCapabilitiesKHR, pictureAccessGranularity) - 32usize];
    ["Offset of field: VkVideoCapabilitiesKHR::minCodedExtent"]
        [::core::mem::offset_of!(VkVideoCapabilitiesKHR, minCodedExtent) - 40usize];
    ["Offset of field: VkVideoCapabilitiesKHR::maxCodedExtent"]
        [::core::mem::offset_of!(VkVideoCapabilitiesKHR, maxCodedExtent) - 48usize];
    ["Offset of field: VkVideoCapabilitiesKHR::maxDpbSlots"]
        [::core::mem::offset_of!(VkVideoCapabilitiesKHR, maxDpbSlots) - 56usize];
    ["Offset of field: VkVideoCapabilitiesKHR::maxActiveReferencePictures"]
        [::core::mem::offset_of!(VkVideoCapabilitiesKHR, maxActiveReferencePictures) - 60usize];
    ["Offset of field: VkVideoCapabilitiesKHR::stdHeaderVersion"]
        [::core::mem::offset_of!(VkVideoCapabilitiesKHR, stdHeaderVersion) - 64usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceVideoFormatInfoKHR"]
        [::core::mem::size_of::<VkPhysicalDeviceVideoFormatInfoKHR>() - 12usize];
    ["Alignment of VkPhysicalDeviceVideoFormatInfoKHR"]
        [::core::mem::align_of::<VkPhysicalDeviceVideoFormatInfoKHR>() - 4usize];
    ["Offset of field: VkPhysicalDeviceVideoFormatInfoKHR::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceVideoFormatInfoKHR, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceVideoFormatInfoKHR::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceVideoFormatInfoKHR, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceVideoFormatInfoKHR::imageUsage"]
        [::core::mem::offset_of!(VkPhysicalDeviceVideoFormatInfoKHR, imageUsage) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoFormatPropertiesKHR"]
        [::core::mem::size_of::<VkVideoFormatPropertiesKHR>() - 44usize];
    ["Alignment of VkVideoFormatPropertiesKHR"]
        [::core::mem::align_of::<VkVideoFormatPropertiesKHR>() - 4usize];
    ["Offset of field: VkVideoFormatPropertiesKHR::sType"]
        [::core::mem::offset_of!(VkVideoFormatPropertiesKHR, sType) - 0usize];
    ["Offset of field: VkVideoFormatPropertiesKHR::pNext"]
        [::core::mem::offset_of!(VkVideoFormatPropertiesKHR, pNext) - 4usize];
    ["Offset of field: VkVideoFormatPropertiesKHR::format"]
        [::core::mem::offset_of!(VkVideoFormatPropertiesKHR, format) - 8usize];
    ["Offset of field: VkVideoFormatPropertiesKHR::componentMapping"]
        [::core::mem::offset_of!(VkVideoFormatPropertiesKHR, componentMapping) - 12usize];
    ["Offset of field: VkVideoFormatPropertiesKHR::imageCreateFlags"]
        [::core::mem::offset_of!(VkVideoFormatPropertiesKHR, imageCreateFlags) - 28usize];
    ["Offset of field: VkVideoFormatPropertiesKHR::imageType"]
        [::core::mem::offset_of!(VkVideoFormatPropertiesKHR, imageType) - 32usize];
    ["Offset of field: VkVideoFormatPropertiesKHR::imageTiling"]
        [::core::mem::offset_of!(VkVideoFormatPropertiesKHR, imageTiling) - 36usize];
    ["Offset of field: VkVideoFormatPropertiesKHR::imageUsageFlags"]
        [::core::mem::offset_of!(VkVideoFormatPropertiesKHR, imageUsageFlags) - 40usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoPictureResourceInfoKHR"]
        [::core::mem::size_of::<VkVideoPictureResourceInfoKHR>() - 40usize];
    ["Alignment of VkVideoPictureResourceInfoKHR"]
        [::core::mem::align_of::<VkVideoPictureResourceInfoKHR>() - 8usize];
    ["Offset of field: VkVideoPictureResourceInfoKHR::sType"]
        [::core::mem::offset_of!(VkVideoPictureResourceInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoPictureResourceInfoKHR::pNext"]
        [::core::mem::offset_of!(VkVideoPictureResourceInfoKHR, pNext) - 4usize];
    ["Offset of field: VkVideoPictureResourceInfoKHR::codedOffset"]
        [::core::mem::offset_of!(VkVideoPictureResourceInfoKHR, codedOffset) - 8usize];
    ["Offset of field: VkVideoPictureResourceInfoKHR::codedExtent"]
        [::core::mem::offset_of!(VkVideoPictureResourceInfoKHR, codedExtent) - 16usize];
    ["Offset of field: VkVideoPictureResourceInfoKHR::baseArrayLayer"]
        [::core::mem::offset_of!(VkVideoPictureResourceInfoKHR, baseArrayLayer) - 24usize];
    ["Offset of field: VkVideoPictureResourceInfoKHR::imageViewBinding"]
        [::core::mem::offset_of!(VkVideoPictureResourceInfoKHR, imageViewBinding) - 32usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoReferenceSlotInfoKHR"]
        [::core::mem::size_of::<VkVideoReferenceSlotInfoKHR>() - 16usize];
    ["Alignment of VkVideoReferenceSlotInfoKHR"]
        [::core::mem::align_of::<VkVideoReferenceSlotInfoKHR>() - 4usize];
    ["Offset of field: VkVideoReferenceSlotInfoKHR::sType"]
        [::core::mem::offset_of!(VkVideoReferenceSlotInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoReferenceSlotInfoKHR::pNext"]
        [::core::mem::offset_of!(VkVideoReferenceSlotInfoKHR, pNext) - 4usize];
    ["Offset of field: VkVideoReferenceSlotInfoKHR::slotIndex"]
        [::core::mem::offset_of!(VkVideoReferenceSlotInfoKHR, slotIndex) - 8usize];
    ["Offset of field: VkVideoReferenceSlotInfoKHR::pPictureResource"]
        [::core::mem::offset_of!(VkVideoReferenceSlotInfoKHR, pPictureResource) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoSessionMemoryRequirementsKHR"]
        [::core::mem::size_of::<VkVideoSessionMemoryRequirementsKHR>() - 40usize];
    ["Alignment of VkVideoSessionMemoryRequirementsKHR"]
        [::core::mem::align_of::<VkVideoSessionMemoryRequirementsKHR>() - 8usize];
    ["Offset of field: VkVideoSessionMemoryRequirementsKHR::sType"]
        [::core::mem::offset_of!(VkVideoSessionMemoryRequirementsKHR, sType) - 0usize];
    ["Offset of field: VkVideoSessionMemoryRequirementsKHR::pNext"]
        [::core::mem::offset_of!(VkVideoSessionMemoryRequirementsKHR, pNext) - 4usize];
    ["Offset of field: VkVideoSessionMemoryRequirementsKHR::memoryBindIndex"]
        [::core::mem::offset_of!(VkVideoSessionMemoryRequirementsKHR, memoryBindIndex) - 8usize];
    ["Offset of field: VkVideoSessionMemoryRequirementsKHR::memoryRequirements"][::core::mem::offset_of!(
        VkVideoSessionMemoryRequirementsKHR,
        memoryRequirements
    ) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkBindVideoSessionMemoryInfoKHR"]
        [::core::mem::size_of::<VkBindVideoSessionMemoryInfoKHR>() - 40usize];
    ["Alignment of VkBindVideoSessionMemoryInfoKHR"]
        [::core::mem::align_of::<VkBindVideoSessionMemoryInfoKHR>() - 8usize];
    ["Offset of field: VkBindVideoSessionMemoryInfoKHR::sType"]
        [::core::mem::offset_of!(VkBindVideoSessionMemoryInfoKHR, sType) - 0usize];
    ["Offset of field: VkBindVideoSessionMemoryInfoKHR::pNext"]
        [::core::mem::offset_of!(VkBindVideoSessionMemoryInfoKHR, pNext) - 4usize];
    ["Offset of field: VkBindVideoSessionMemoryInfoKHR::memoryBindIndex"]
        [::core::mem::offset_of!(VkBindVideoSessionMemoryInfoKHR, memoryBindIndex) - 8usize];
    ["Offset of field: VkBindVideoSessionMemoryInfoKHR::memory"]
        [::core::mem::offset_of!(VkBindVideoSessionMemoryInfoKHR, memory) - 16usize];
    ["Offset of field: VkBindVideoSessionMemoryInfoKHR::memoryOffset"]
        [::core::mem::offset_of!(VkBindVideoSessionMemoryInfoKHR, memoryOffset) - 24usize];
    ["Offset of field: VkBindVideoSessionMemoryInfoKHR::memorySize"]
        [::core::mem::offset_of!(VkBindVideoSessionMemoryInfoKHR, memorySize) - 32usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoSessionCreateInfoKHR"]
        [::core::mem::size_of::<VkVideoSessionCreateInfoKHR>() - 48usize];
    ["Alignment of VkVideoSessionCreateInfoKHR"]
        [::core::mem::align_of::<VkVideoSessionCreateInfoKHR>() - 4usize];
    ["Offset of field: VkVideoSessionCreateInfoKHR::sType"]
        [::core::mem::offset_of!(VkVideoSessionCreateInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoSessionCreateInfoKHR::pNext"]
        [::core::mem::offset_of!(VkVideoSessionCreateInfoKHR, pNext) - 4usize];
    ["Offset of field: VkVideoSessionCreateInfoKHR::queueFamilyIndex"]
        [::core::mem::offset_of!(VkVideoSessionCreateInfoKHR, queueFamilyIndex) - 8usize];
    ["Offset of field: VkVideoSessionCreateInfoKHR::flags"]
        [::core::mem::offset_of!(VkVideoSessionCreateInfoKHR, flags) - 12usize];
    ["Offset of field: VkVideoSessionCreateInfoKHR::pVideoProfile"]
        [::core::mem::offset_of!(VkVideoSessionCreateInfoKHR, pVideoProfile) - 16usize];
    ["Offset of field: VkVideoSessionCreateInfoKHR::pictureFormat"]
        [::core::mem::offset_of!(VkVideoSessionCreateInfoKHR, pictureFormat) - 20usize];
    ["Offset of field: VkVideoSessionCreateInfoKHR::maxCodedExtent"]
        [::core::mem::offset_of!(VkVideoSessionCreateInfoKHR, maxCodedExtent) - 24usize];
    ["Offset of field: VkVideoSessionCreateInfoKHR::referencePictureFormat"]
        [::core::mem::offset_of!(VkVideoSessionCreateInfoKHR, referencePictureFormat) - 32usize];
    ["Offset of field: VkVideoSessionCreateInfoKHR::maxDpbSlots"]
        [::core::mem::offset_of!(VkVideoSessionCreateInfoKHR, maxDpbSlots) - 36usize];
    ["Offset of field: VkVideoSessionCreateInfoKHR::maxActiveReferencePictures"][::core::mem::offset_of!(
        VkVideoSessionCreateInfoKHR,
        maxActiveReferencePictures
    ) - 40usize];
    ["Offset of field: VkVideoSessionCreateInfoKHR::pStdHeaderVersion"]
        [::core::mem::offset_of!(VkVideoSessionCreateInfoKHR, pStdHeaderVersion) - 44usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoSessionParametersCreateInfoKHR"]
        [::core::mem::size_of::<VkVideoSessionParametersCreateInfoKHR>() - 32usize];
    ["Alignment of VkVideoSessionParametersCreateInfoKHR"]
        [::core::mem::align_of::<VkVideoSessionParametersCreateInfoKHR>() - 8usize];
    ["Offset of field: VkVideoSessionParametersCreateInfoKHR::sType"]
        [::core::mem::offset_of!(VkVideoSessionParametersCreateInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoSessionParametersCreateInfoKHR::pNext"]
        [::core::mem::offset_of!(VkVideoSessionParametersCreateInfoKHR, pNext) - 4usize];
    ["Offset of field: VkVideoSessionParametersCreateInfoKHR::flags"]
        [::core::mem::offset_of!(VkVideoSessionParametersCreateInfoKHR, flags) - 8usize];
    ["Offset of field: VkVideoSessionParametersCreateInfoKHR::videoSessionParametersTemplate"][::core::mem::offset_of!(
        VkVideoSessionParametersCreateInfoKHR,
        videoSessionParametersTemplate
    )
        - 16usize];
    ["Offset of field: VkVideoSessionParametersCreateInfoKHR::videoSession"]
        [::core::mem::offset_of!(VkVideoSessionParametersCreateInfoKHR, videoSession) - 24usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoSessionParametersUpdateInfoKHR"]
        [::core::mem::size_of::<VkVideoSessionParametersUpdateInfoKHR>() - 12usize];
    ["Alignment of VkVideoSessionParametersUpdateInfoKHR"]
        [::core::mem::align_of::<VkVideoSessionParametersUpdateInfoKHR>() - 4usize];
    ["Offset of field: VkVideoSessionParametersUpdateInfoKHR::sType"]
        [::core::mem::offset_of!(VkVideoSessionParametersUpdateInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoSessionParametersUpdateInfoKHR::pNext"]
        [::core::mem::offset_of!(VkVideoSessionParametersUpdateInfoKHR, pNext) - 4usize];
    ["Offset of field: VkVideoSessionParametersUpdateInfoKHR::updateSequenceCount"][::core::mem::offset_of!(
        VkVideoSessionParametersUpdateInfoKHR,
        updateSequenceCount
    ) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoBeginCodingInfoKHR"]
        [::core::mem::size_of::<VkVideoBeginCodingInfoKHR>() - 40usize];
    ["Alignment of VkVideoBeginCodingInfoKHR"]
        [::core::mem::align_of::<VkVideoBeginCodingInfoKHR>() - 8usize];
    ["Offset of field: VkVideoBeginCodingInfoKHR::sType"]
        [::core::mem::offset_of!(VkVideoBeginCodingInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoBeginCodingInfoKHR::pNext"]
        [::core::mem::offset_of!(VkVideoBeginCodingInfoKHR, pNext) - 4usize];
    ["Offset of field: VkVideoBeginCodingInfoKHR::flags"]
        [::core::mem::offset_of!(VkVideoBeginCodingInfoKHR, flags) - 8usize];
    ["Offset of field: VkVideoBeginCodingInfoKHR::videoSession"]
        [::core::mem::offset_of!(VkVideoBeginCodingInfoKHR, videoSession) - 16usize];
    ["Offset of field: VkVideoBeginCodingInfoKHR::videoSessionParameters"]
        [::core::mem::offset_of!(VkVideoBeginCodingInfoKHR, videoSessionParameters) - 24usize];
    ["Offset of field: VkVideoBeginCodingInfoKHR::referenceSlotCount"]
        [::core::mem::offset_of!(VkVideoBeginCodingInfoKHR, referenceSlotCount) - 32usize];
    ["Offset of field: VkVideoBeginCodingInfoKHR::pReferenceSlots"]
        [::core::mem::offset_of!(VkVideoBeginCodingInfoKHR, pReferenceSlots) - 36usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEndCodingInfoKHR"]
        [::core::mem::size_of::<VkVideoEndCodingInfoKHR>() - 12usize];
    ["Alignment of VkVideoEndCodingInfoKHR"]
        [::core::mem::align_of::<VkVideoEndCodingInfoKHR>() - 4usize];
    ["Offset of field: VkVideoEndCodingInfoKHR::sType"]
        [::core::mem::offset_of!(VkVideoEndCodingInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoEndCodingInfoKHR::pNext"]
        [::core::mem::offset_of!(VkVideoEndCodingInfoKHR, pNext) - 4usize];
    ["Offset of field: VkVideoEndCodingInfoKHR::flags"]
        [::core::mem::offset_of!(VkVideoEndCodingInfoKHR, flags) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoCodingControlInfoKHR"]
        [::core::mem::size_of::<VkVideoCodingControlInfoKHR>() - 12usize];
    ["Alignment of VkVideoCodingControlInfoKHR"]
        [::core::mem::align_of::<VkVideoCodingControlInfoKHR>() - 4usize];
    ["Offset of field: VkVideoCodingControlInfoKHR::sType"]
        [::core::mem::offset_of!(VkVideoCodingControlInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoCodingControlInfoKHR::pNext"]
        [::core::mem::offset_of!(VkVideoCodingControlInfoKHR, pNext) - 4usize];
    ["Offset of field: VkVideoCodingControlInfoKHR::flags"]
        [::core::mem::offset_of!(VkVideoCodingControlInfoKHR, flags) - 8usize];
};
pub const VkVideoDecodeCapabilityFlagBitsKHR_VK_VIDEO_DECODE_CAPABILITY_DPB_AND_OUTPUT_COINCIDE_BIT_KHR : VkVideoDecodeCapabilityFlagBitsKHR = 1 ;
pub const VkVideoDecodeCapabilityFlagBitsKHR_VK_VIDEO_DECODE_CAPABILITY_DPB_AND_OUTPUT_DISTINCT_BIT_KHR : VkVideoDecodeCapabilityFlagBitsKHR = 2 ;
pub const VkVideoDecodeCapabilityFlagBitsKHR_VK_VIDEO_DECODE_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR:
    VkVideoDecodeCapabilityFlagBitsKHR = 2147483647;
pub const VkVideoDecodeUsageFlagBitsKHR_VK_VIDEO_DECODE_USAGE_DEFAULT_KHR:
    VkVideoDecodeUsageFlagBitsKHR = 0;
pub const VkVideoDecodeUsageFlagBitsKHR_VK_VIDEO_DECODE_USAGE_TRANSCODING_BIT_KHR:
    VkVideoDecodeUsageFlagBitsKHR = 1;
pub const VkVideoDecodeUsageFlagBitsKHR_VK_VIDEO_DECODE_USAGE_OFFLINE_BIT_KHR:
    VkVideoDecodeUsageFlagBitsKHR = 2;
pub const VkVideoDecodeUsageFlagBitsKHR_VK_VIDEO_DECODE_USAGE_STREAMING_BIT_KHR:
    VkVideoDecodeUsageFlagBitsKHR = 4;
pub const VkVideoDecodeUsageFlagBitsKHR_VK_VIDEO_DECODE_USAGE_FLAG_BITS_MAX_ENUM_KHR:
    VkVideoDecodeUsageFlagBitsKHR = 2147483647;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoDecodeCapabilitiesKHR"]
        [::core::mem::size_of::<VkVideoDecodeCapabilitiesKHR>() - 12usize];
    ["Alignment of VkVideoDecodeCapabilitiesKHR"]
        [::core::mem::align_of::<VkVideoDecodeCapabilitiesKHR>() - 4usize];
    ["Offset of field: VkVideoDecodeCapabilitiesKHR::sType"]
        [::core::mem::offset_of!(VkVideoDecodeCapabilitiesKHR, sType) - 0usize];
    ["Offset of field: VkVideoDecodeCapabilitiesKHR::pNext"]
        [::core::mem::offset_of!(VkVideoDecodeCapabilitiesKHR, pNext) - 4usize];
    ["Offset of field: VkVideoDecodeCapabilitiesKHR::flags"]
        [::core::mem::offset_of!(VkVideoDecodeCapabilitiesKHR, flags) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoDecodeUsageInfoKHR"]
        [::core::mem::size_of::<VkVideoDecodeUsageInfoKHR>() - 12usize];
    ["Alignment of VkVideoDecodeUsageInfoKHR"]
        [::core::mem::align_of::<VkVideoDecodeUsageInfoKHR>() - 4usize];
    ["Offset of field: VkVideoDecodeUsageInfoKHR::sType"]
        [::core::mem::offset_of!(VkVideoDecodeUsageInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoDecodeUsageInfoKHR::pNext"]
        [::core::mem::offset_of!(VkVideoDecodeUsageInfoKHR, pNext) - 4usize];
    ["Offset of field: VkVideoDecodeUsageInfoKHR::videoUsageHints"]
        [::core::mem::offset_of!(VkVideoDecodeUsageInfoKHR, videoUsageHints) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoDecodeInfoKHR"][::core::mem::size_of::<VkVideoDecodeInfoKHR>() - 96usize];
    ["Alignment of VkVideoDecodeInfoKHR"][::core::mem::align_of::<VkVideoDecodeInfoKHR>() - 8usize];
    ["Offset of field: VkVideoDecodeInfoKHR::sType"]
        [::core::mem::offset_of!(VkVideoDecodeInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoDecodeInfoKHR::pNext"]
        [::core::mem::offset_of!(VkVideoDecodeInfoKHR, pNext) - 4usize];
    ["Offset of field: VkVideoDecodeInfoKHR::flags"]
        [::core::mem::offset_of!(VkVideoDecodeInfoKHR, flags) - 8usize];
    ["Offset of field: VkVideoDecodeInfoKHR::srcBuffer"]
        [::core::mem::offset_of!(VkVideoDecodeInfoKHR, srcBuffer) - 16usize];
    ["Offset of field: VkVideoDecodeInfoKHR::srcBufferOffset"]
        [::core::mem::offset_of!(VkVideoDecodeInfoKHR, srcBufferOffset) - 24usize];
    ["Offset of field: VkVideoDecodeInfoKHR::srcBufferRange"]
        [::core::mem::offset_of!(VkVideoDecodeInfoKHR, srcBufferRange) - 32usize];
    ["Offset of field: VkVideoDecodeInfoKHR::dstPictureResource"]
        [::core::mem::offset_of!(VkVideoDecodeInfoKHR, dstPictureResource) - 40usize];
    ["Offset of field: VkVideoDecodeInfoKHR::pSetupReferenceSlot"]
        [::core::mem::offset_of!(VkVideoDecodeInfoKHR, pSetupReferenceSlot) - 80usize];
    ["Offset of field: VkVideoDecodeInfoKHR::referenceSlotCount"]
        [::core::mem::offset_of!(VkVideoDecodeInfoKHR, referenceSlotCount) - 84usize];
    ["Offset of field: VkVideoDecodeInfoKHR::pReferenceSlots"]
        [::core::mem::offset_of!(VkVideoDecodeInfoKHR, pReferenceSlots) - 88usize];
};
pub const StdVideoH264ChromaFormatIdc_STD_VIDEO_H264_CHROMA_FORMAT_IDC_MONOCHROME:
    StdVideoH264ChromaFormatIdc = 0;
pub const StdVideoH264ChromaFormatIdc_STD_VIDEO_H264_CHROMA_FORMAT_IDC_420:
    StdVideoH264ChromaFormatIdc = 1;
pub const StdVideoH264ChromaFormatIdc_STD_VIDEO_H264_CHROMA_FORMAT_IDC_422:
    StdVideoH264ChromaFormatIdc = 2;
pub const StdVideoH264ChromaFormatIdc_STD_VIDEO_H264_CHROMA_FORMAT_IDC_444:
    StdVideoH264ChromaFormatIdc = 3;
pub const StdVideoH264ChromaFormatIdc_STD_VIDEO_H264_CHROMA_FORMAT_IDC_INVALID:
    StdVideoH264ChromaFormatIdc = 2147483647;
pub const StdVideoH264ChromaFormatIdc_STD_VIDEO_H264_CHROMA_FORMAT_IDC_MAX_ENUM:
    StdVideoH264ChromaFormatIdc = 2147483647;
pub const StdVideoH264ProfileIdc_STD_VIDEO_H264_PROFILE_IDC_BASELINE: StdVideoH264ProfileIdc = 66;
pub const StdVideoH264ProfileIdc_STD_VIDEO_H264_PROFILE_IDC_MAIN: StdVideoH264ProfileIdc = 77;
pub const StdVideoH264ProfileIdc_STD_VIDEO_H264_PROFILE_IDC_HIGH: StdVideoH264ProfileIdc = 100;
pub const StdVideoH264ProfileIdc_STD_VIDEO_H264_PROFILE_IDC_HIGH_444_PREDICTIVE:
    StdVideoH264ProfileIdc = 244;
pub const StdVideoH264ProfileIdc_STD_VIDEO_H264_PROFILE_IDC_INVALID: StdVideoH264ProfileIdc =
    2147483647;
pub const StdVideoH264ProfileIdc_STD_VIDEO_H264_PROFILE_IDC_MAX_ENUM: StdVideoH264ProfileIdc =
    2147483647;
pub const StdVideoH264LevelIdc_STD_VIDEO_H264_LEVEL_IDC_1_0: StdVideoH264LevelIdc = 0;
pub const StdVideoH264LevelIdc_STD_VIDEO_H264_LEVEL_IDC_1_1: StdVideoH264LevelIdc = 1;
pub const StdVideoH264LevelIdc_STD_VIDEO_H264_LEVEL_IDC_1_2: StdVideoH264LevelIdc = 2;
pub const StdVideoH264LevelIdc_STD_VIDEO_H264_LEVEL_IDC_1_3: StdVideoH264LevelIdc = 3;
pub const StdVideoH264LevelIdc_STD_VIDEO_H264_LEVEL_IDC_2_0: StdVideoH264LevelIdc = 4;
pub const StdVideoH264LevelIdc_STD_VIDEO_H264_LEVEL_IDC_2_1: StdVideoH264LevelIdc = 5;
pub const StdVideoH264LevelIdc_STD_VIDEO_H264_LEVEL_IDC_2_2: StdVideoH264LevelIdc = 6;
pub const StdVideoH264LevelIdc_STD_VIDEO_H264_LEVEL_IDC_3_0: StdVideoH264LevelIdc = 7;
pub const StdVideoH264LevelIdc_STD_VIDEO_H264_LEVEL_IDC_3_1: StdVideoH264LevelIdc = 8;
pub const StdVideoH264LevelIdc_STD_VIDEO_H264_LEVEL_IDC_3_2: StdVideoH264LevelIdc = 9;
pub const StdVideoH264LevelIdc_STD_VIDEO_H264_LEVEL_IDC_4_0: StdVideoH264LevelIdc = 10;
pub const StdVideoH264LevelIdc_STD_VIDEO_H264_LEVEL_IDC_4_1: StdVideoH264LevelIdc = 11;
pub const StdVideoH264LevelIdc_STD_VIDEO_H264_LEVEL_IDC_4_2: StdVideoH264LevelIdc = 12;
pub const StdVideoH264LevelIdc_STD_VIDEO_H264_LEVEL_IDC_5_0: StdVideoH264LevelIdc = 13;
pub const StdVideoH264LevelIdc_STD_VIDEO_H264_LEVEL_IDC_5_1: StdVideoH264LevelIdc = 14;
pub const StdVideoH264LevelIdc_STD_VIDEO_H264_LEVEL_IDC_5_2: StdVideoH264LevelIdc = 15;
pub const StdVideoH264LevelIdc_STD_VIDEO_H264_LEVEL_IDC_6_0: StdVideoH264LevelIdc = 16;
pub const StdVideoH264LevelIdc_STD_VIDEO_H264_LEVEL_IDC_6_1: StdVideoH264LevelIdc = 17;
pub const StdVideoH264LevelIdc_STD_VIDEO_H264_LEVEL_IDC_6_2: StdVideoH264LevelIdc = 18;
pub const StdVideoH264LevelIdc_STD_VIDEO_H264_LEVEL_IDC_INVALID: StdVideoH264LevelIdc = 2147483647;
pub const StdVideoH264LevelIdc_STD_VIDEO_H264_LEVEL_IDC_MAX_ENUM: StdVideoH264LevelIdc = 2147483647;
pub const StdVideoH264PocType_STD_VIDEO_H264_POC_TYPE_0: StdVideoH264PocType = 0;
pub const StdVideoH264PocType_STD_VIDEO_H264_POC_TYPE_1: StdVideoH264PocType = 1;
pub const StdVideoH264PocType_STD_VIDEO_H264_POC_TYPE_2: StdVideoH264PocType = 2;
pub const StdVideoH264PocType_STD_VIDEO_H264_POC_TYPE_INVALID: StdVideoH264PocType = 2147483647;
pub const StdVideoH264PocType_STD_VIDEO_H264_POC_TYPE_MAX_ENUM: StdVideoH264PocType = 2147483647;
pub const StdVideoH264AspectRatioIdc_STD_VIDEO_H264_ASPECT_RATIO_IDC_UNSPECIFIED:
    StdVideoH264AspectRatioIdc = 0;
pub const StdVideoH264AspectRatioIdc_STD_VIDEO_H264_ASPECT_RATIO_IDC_SQUARE:
    StdVideoH264AspectRatioIdc = 1;
pub const StdVideoH264AspectRatioIdc_STD_VIDEO_H264_ASPECT_RATIO_IDC_12_11:
    StdVideoH264AspectRatioIdc = 2;
pub const StdVideoH264AspectRatioIdc_STD_VIDEO_H264_ASPECT_RATIO_IDC_10_11:
    StdVideoH264AspectRatioIdc = 3;
pub const StdVideoH264AspectRatioIdc_STD_VIDEO_H264_ASPECT_RATIO_IDC_16_11:
    StdVideoH264AspectRatioIdc = 4;
pub const StdVideoH264AspectRatioIdc_STD_VIDEO_H264_ASPECT_RATIO_IDC_40_33:
    StdVideoH264AspectRatioIdc = 5;
pub const StdVideoH264AspectRatioIdc_STD_VIDEO_H264_ASPECT_RATIO_IDC_24_11:
    StdVideoH264AspectRatioIdc = 6;
pub const StdVideoH264AspectRatioIdc_STD_VIDEO_H264_ASPECT_RATIO_IDC_20_11:
    StdVideoH264AspectRatioIdc = 7;
pub const StdVideoH264AspectRatioIdc_STD_VIDEO_H264_ASPECT_RATIO_IDC_32_11:
    StdVideoH264AspectRatioIdc = 8;
pub const StdVideoH264AspectRatioIdc_STD_VIDEO_H264_ASPECT_RATIO_IDC_80_33:
    StdVideoH264AspectRatioIdc = 9;
pub const StdVideoH264AspectRatioIdc_STD_VIDEO_H264_ASPECT_RATIO_IDC_18_11:
    StdVideoH264AspectRatioIdc = 10;
pub const StdVideoH264AspectRatioIdc_STD_VIDEO_H264_ASPECT_RATIO_IDC_15_11:
    StdVideoH264AspectRatioIdc = 11;
pub const StdVideoH264AspectRatioIdc_STD_VIDEO_H264_ASPECT_RATIO_IDC_64_33:
    StdVideoH264AspectRatioIdc = 12;
pub const StdVideoH264AspectRatioIdc_STD_VIDEO_H264_ASPECT_RATIO_IDC_160_99:
    StdVideoH264AspectRatioIdc = 13;
pub const StdVideoH264AspectRatioIdc_STD_VIDEO_H264_ASPECT_RATIO_IDC_4_3:
    StdVideoH264AspectRatioIdc = 14;
pub const StdVideoH264AspectRatioIdc_STD_VIDEO_H264_ASPECT_RATIO_IDC_3_2:
    StdVideoH264AspectRatioIdc = 15;
pub const StdVideoH264AspectRatioIdc_STD_VIDEO_H264_ASPECT_RATIO_IDC_2_1:
    StdVideoH264AspectRatioIdc = 16;
pub const StdVideoH264AspectRatioIdc_STD_VIDEO_H264_ASPECT_RATIO_IDC_EXTENDED_SAR:
    StdVideoH264AspectRatioIdc = 255;
pub const StdVideoH264AspectRatioIdc_STD_VIDEO_H264_ASPECT_RATIO_IDC_INVALID:
    StdVideoH264AspectRatioIdc = 2147483647;
pub const StdVideoH264AspectRatioIdc_STD_VIDEO_H264_ASPECT_RATIO_IDC_MAX_ENUM:
    StdVideoH264AspectRatioIdc = 2147483647;
pub const StdVideoH264WeightedBipredIdc_STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_DEFAULT:
    StdVideoH264WeightedBipredIdc = 0;
pub const StdVideoH264WeightedBipredIdc_STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_EXPLICIT:
    StdVideoH264WeightedBipredIdc = 1;
pub const StdVideoH264WeightedBipredIdc_STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_IMPLICIT:
    StdVideoH264WeightedBipredIdc = 2;
pub const StdVideoH264WeightedBipredIdc_STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_INVALID:
    StdVideoH264WeightedBipredIdc = 2147483647;
pub const StdVideoH264WeightedBipredIdc_STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_MAX_ENUM:
    StdVideoH264WeightedBipredIdc = 2147483647;
pub const StdVideoH264ModificationOfPicNumsIdc_STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_SHORT_TERM_SUBTRACT : StdVideoH264ModificationOfPicNumsIdc = 0 ;
pub const StdVideoH264ModificationOfPicNumsIdc_STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_SHORT_TERM_ADD : StdVideoH264ModificationOfPicNumsIdc = 1 ;
pub const StdVideoH264ModificationOfPicNumsIdc_STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_LONG_TERM : StdVideoH264ModificationOfPicNumsIdc = 2 ;
pub const StdVideoH264ModificationOfPicNumsIdc_STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_END:
    StdVideoH264ModificationOfPicNumsIdc = 3;
pub const StdVideoH264ModificationOfPicNumsIdc_STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_INVALID : StdVideoH264ModificationOfPicNumsIdc = 2147483647 ;
pub const StdVideoH264ModificationOfPicNumsIdc_STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_MAX_ENUM : StdVideoH264ModificationOfPicNumsIdc = 2147483647 ;
pub const StdVideoH264MemMgmtControlOp_STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_END:
    StdVideoH264MemMgmtControlOp = 0;
pub const StdVideoH264MemMgmtControlOp_STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_UNMARK_SHORT_TERM:
    StdVideoH264MemMgmtControlOp = 1;
pub const StdVideoH264MemMgmtControlOp_STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_UNMARK_LONG_TERM:
    StdVideoH264MemMgmtControlOp = 2;
pub const StdVideoH264MemMgmtControlOp_STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_MARK_LONG_TERM:
    StdVideoH264MemMgmtControlOp = 3;
pub const StdVideoH264MemMgmtControlOp_STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_SET_MAX_LONG_TERM_INDEX : StdVideoH264MemMgmtControlOp = 4 ;
pub const StdVideoH264MemMgmtControlOp_STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_UNMARK_ALL:
    StdVideoH264MemMgmtControlOp = 5;
pub const StdVideoH264MemMgmtControlOp_STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_MARK_CURRENT_AS_LONG_TERM : StdVideoH264MemMgmtControlOp = 6 ;
pub const StdVideoH264MemMgmtControlOp_STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_INVALID:
    StdVideoH264MemMgmtControlOp = 2147483647;
pub const StdVideoH264MemMgmtControlOp_STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_MAX_ENUM:
    StdVideoH264MemMgmtControlOp = 2147483647;
pub const StdVideoH264CabacInitIdc_STD_VIDEO_H264_CABAC_INIT_IDC_0: StdVideoH264CabacInitIdc = 0;
pub const StdVideoH264CabacInitIdc_STD_VIDEO_H264_CABAC_INIT_IDC_1: StdVideoH264CabacInitIdc = 1;
pub const StdVideoH264CabacInitIdc_STD_VIDEO_H264_CABAC_INIT_IDC_2: StdVideoH264CabacInitIdc = 2;
pub const StdVideoH264CabacInitIdc_STD_VIDEO_H264_CABAC_INIT_IDC_INVALID: StdVideoH264CabacInitIdc =
    2147483647;
pub const StdVideoH264CabacInitIdc_STD_VIDEO_H264_CABAC_INIT_IDC_MAX_ENUM:
    StdVideoH264CabacInitIdc = 2147483647;
pub const StdVideoH264DisableDeblockingFilterIdc_STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_DISABLED : StdVideoH264DisableDeblockingFilterIdc = 0 ;
pub const StdVideoH264DisableDeblockingFilterIdc_STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_ENABLED : StdVideoH264DisableDeblockingFilterIdc = 1 ;
pub const StdVideoH264DisableDeblockingFilterIdc_STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_PARTIAL : StdVideoH264DisableDeblockingFilterIdc = 2 ;
pub const StdVideoH264DisableDeblockingFilterIdc_STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_INVALID : StdVideoH264DisableDeblockingFilterIdc = 2147483647 ;
pub const StdVideoH264DisableDeblockingFilterIdc_STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_MAX_ENUM : StdVideoH264DisableDeblockingFilterIdc = 2147483647 ;
pub const StdVideoH264SliceType_STD_VIDEO_H264_SLICE_TYPE_P: StdVideoH264SliceType = 0;
pub const StdVideoH264SliceType_STD_VIDEO_H264_SLICE_TYPE_B: StdVideoH264SliceType = 1;
pub const StdVideoH264SliceType_STD_VIDEO_H264_SLICE_TYPE_I: StdVideoH264SliceType = 2;
pub const StdVideoH264SliceType_STD_VIDEO_H264_SLICE_TYPE_INVALID: StdVideoH264SliceType =
    2147483647;
pub const StdVideoH264SliceType_STD_VIDEO_H264_SLICE_TYPE_MAX_ENUM: StdVideoH264SliceType =
    2147483647;
pub const StdVideoH264PictureType_STD_VIDEO_H264_PICTURE_TYPE_P: StdVideoH264PictureType = 0;
pub const StdVideoH264PictureType_STD_VIDEO_H264_PICTURE_TYPE_B: StdVideoH264PictureType = 1;
pub const StdVideoH264PictureType_STD_VIDEO_H264_PICTURE_TYPE_I: StdVideoH264PictureType = 2;
pub const StdVideoH264PictureType_STD_VIDEO_H264_PICTURE_TYPE_IDR: StdVideoH264PictureType = 5;
pub const StdVideoH264PictureType_STD_VIDEO_H264_PICTURE_TYPE_INVALID: StdVideoH264PictureType =
    2147483647;
pub const StdVideoH264PictureType_STD_VIDEO_H264_PICTURE_TYPE_MAX_ENUM: StdVideoH264PictureType =
    2147483647;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoH264SpsVuiFlags"][::core::mem::size_of::<StdVideoH264SpsVuiFlags>() - 4usize];
    ["Alignment of StdVideoH264SpsVuiFlags"]
        [::core::mem::align_of::<StdVideoH264SpsVuiFlags>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoH264HrdParameters"]
        [::core::mem::size_of::<StdVideoH264HrdParameters>() - 308usize];
    ["Alignment of StdVideoH264HrdParameters"]
        [::core::mem::align_of::<StdVideoH264HrdParameters>() - 4usize];
    ["Offset of field: StdVideoH264HrdParameters::cpb_cnt_minus1"]
        [::core::mem::offset_of!(StdVideoH264HrdParameters, cpb_cnt_minus1) - 0usize];
    ["Offset of field: StdVideoH264HrdParameters::bit_rate_scale"]
        [::core::mem::offset_of!(StdVideoH264HrdParameters, bit_rate_scale) - 1usize];
    ["Offset of field: StdVideoH264HrdParameters::cpb_size_scale"]
        [::core::mem::offset_of!(StdVideoH264HrdParameters, cpb_size_scale) - 2usize];
    ["Offset of field: StdVideoH264HrdParameters::reserved1"]
        [::core::mem::offset_of!(StdVideoH264HrdParameters, reserved1) - 3usize];
    ["Offset of field: StdVideoH264HrdParameters::bit_rate_value_minus1"]
        [::core::mem::offset_of!(StdVideoH264HrdParameters, bit_rate_value_minus1) - 4usize];
    ["Offset of field: StdVideoH264HrdParameters::cpb_size_value_minus1"]
        [::core::mem::offset_of!(StdVideoH264HrdParameters, cpb_size_value_minus1) - 132usize];
    ["Offset of field: StdVideoH264HrdParameters::cbr_flag"]
        [::core::mem::offset_of!(StdVideoH264HrdParameters, cbr_flag) - 260usize];
    ["Offset of field: StdVideoH264HrdParameters::initial_cpb_removal_delay_length_minus1"][::core::mem::offset_of!(
        StdVideoH264HrdParameters,
        initial_cpb_removal_delay_length_minus1
    )
        - 292usize];
    ["Offset of field: StdVideoH264HrdParameters::cpb_removal_delay_length_minus1"][::core::mem::offset_of!(
        StdVideoH264HrdParameters,
        cpb_removal_delay_length_minus1
    ) - 296usize];
    ["Offset of field: StdVideoH264HrdParameters::dpb_output_delay_length_minus1"][::core::mem::offset_of!(
        StdVideoH264HrdParameters,
        dpb_output_delay_length_minus1
    ) - 300usize];
    ["Offset of field: StdVideoH264HrdParameters::time_offset_length"]
        [::core::mem::offset_of!(StdVideoH264HrdParameters, time_offset_length) - 304usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoH264SequenceParameterSetVui"]
        [::core::mem::size_of::<StdVideoH264SequenceParameterSetVui>() - 36usize];
    ["Alignment of StdVideoH264SequenceParameterSetVui"]
        [::core::mem::align_of::<StdVideoH264SequenceParameterSetVui>() - 4usize];
    ["Offset of field: StdVideoH264SequenceParameterSetVui::flags"]
        [::core::mem::offset_of!(StdVideoH264SequenceParameterSetVui, flags) - 0usize];
    ["Offset of field: StdVideoH264SequenceParameterSetVui::aspect_ratio_idc"]
        [::core::mem::offset_of!(StdVideoH264SequenceParameterSetVui, aspect_ratio_idc) - 4usize];
    ["Offset of field: StdVideoH264SequenceParameterSetVui::sar_width"]
        [::core::mem::offset_of!(StdVideoH264SequenceParameterSetVui, sar_width) - 8usize];
    ["Offset of field: StdVideoH264SequenceParameterSetVui::sar_height"]
        [::core::mem::offset_of!(StdVideoH264SequenceParameterSetVui, sar_height) - 10usize];
    ["Offset of field: StdVideoH264SequenceParameterSetVui::video_format"]
        [::core::mem::offset_of!(StdVideoH264SequenceParameterSetVui, video_format) - 12usize];
    ["Offset of field: StdVideoH264SequenceParameterSetVui::colour_primaries"]
        [::core::mem::offset_of!(StdVideoH264SequenceParameterSetVui, colour_primaries) - 13usize];
    ["Offset of field: StdVideoH264SequenceParameterSetVui::transfer_characteristics"][::core::mem::offset_of!(
        StdVideoH264SequenceParameterSetVui,
        transfer_characteristics
    ) - 14usize];
    ["Offset of field: StdVideoH264SequenceParameterSetVui::matrix_coefficients"][::core::mem::offset_of!(
        StdVideoH264SequenceParameterSetVui,
        matrix_coefficients
    ) - 15usize];
    ["Offset of field: StdVideoH264SequenceParameterSetVui::num_units_in_tick"]
        [::core::mem::offset_of!(StdVideoH264SequenceParameterSetVui, num_units_in_tick) - 16usize];
    ["Offset of field: StdVideoH264SequenceParameterSetVui::time_scale"]
        [::core::mem::offset_of!(StdVideoH264SequenceParameterSetVui, time_scale) - 20usize];
    ["Offset of field: StdVideoH264SequenceParameterSetVui::max_num_reorder_frames"][::core::mem::offset_of!(
        StdVideoH264SequenceParameterSetVui,
        max_num_reorder_frames
    ) - 24usize];
    ["Offset of field: StdVideoH264SequenceParameterSetVui::max_dec_frame_buffering"][::core::mem::offset_of!(
        StdVideoH264SequenceParameterSetVui,
        max_dec_frame_buffering
    ) - 25usize];
    ["Offset of field: StdVideoH264SequenceParameterSetVui::chroma_sample_loc_type_top_field"][::core::mem::offset_of!(
        StdVideoH264SequenceParameterSetVui,
        chroma_sample_loc_type_top_field
    )
        - 26usize];
    ["Offset of field: StdVideoH264SequenceParameterSetVui::chroma_sample_loc_type_bottom_field"][::core::mem::offset_of!(
        StdVideoH264SequenceParameterSetVui,
        chroma_sample_loc_type_bottom_field
    )
        - 27usize];
    ["Offset of field: StdVideoH264SequenceParameterSetVui::reserved1"]
        [::core::mem::offset_of!(StdVideoH264SequenceParameterSetVui, reserved1) - 28usize];
    ["Offset of field: StdVideoH264SequenceParameterSetVui::pHrdParameters"]
        [::core::mem::offset_of!(StdVideoH264SequenceParameterSetVui, pHrdParameters) - 32usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoH264SpsFlags"][::core::mem::size_of::<StdVideoH264SpsFlags>() - 4usize];
    ["Alignment of StdVideoH264SpsFlags"][::core::mem::align_of::<StdVideoH264SpsFlags>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoH264ScalingLists"]
        [::core::mem::size_of::<StdVideoH264ScalingLists>() - 484usize];
    ["Alignment of StdVideoH264ScalingLists"]
        [::core::mem::align_of::<StdVideoH264ScalingLists>() - 2usize];
    ["Offset of field: StdVideoH264ScalingLists::scaling_list_present_mask"]
        [::core::mem::offset_of!(StdVideoH264ScalingLists, scaling_list_present_mask) - 0usize];
    ["Offset of field: StdVideoH264ScalingLists::use_default_scaling_matrix_mask"][::core::mem::offset_of!(
        StdVideoH264ScalingLists,
        use_default_scaling_matrix_mask
    ) - 2usize];
    ["Offset of field: StdVideoH264ScalingLists::ScalingList4x4"]
        [::core::mem::offset_of!(StdVideoH264ScalingLists, ScalingList4x4) - 4usize];
    ["Offset of field: StdVideoH264ScalingLists::ScalingList8x8"]
        [::core::mem::offset_of!(StdVideoH264ScalingLists, ScalingList8x8) - 100usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoH264SequenceParameterSet"]
        [::core::mem::size_of::<StdVideoH264SequenceParameterSet>() - 76usize];
    ["Alignment of StdVideoH264SequenceParameterSet"]
        [::core::mem::align_of::<StdVideoH264SequenceParameterSet>() - 4usize];
    ["Offset of field: StdVideoH264SequenceParameterSet::flags"]
        [::core::mem::offset_of!(StdVideoH264SequenceParameterSet, flags) - 0usize];
    ["Offset of field: StdVideoH264SequenceParameterSet::profile_idc"]
        [::core::mem::offset_of!(StdVideoH264SequenceParameterSet, profile_idc) - 4usize];
    ["Offset of field: StdVideoH264SequenceParameterSet::level_idc"]
        [::core::mem::offset_of!(StdVideoH264SequenceParameterSet, level_idc) - 8usize];
    ["Offset of field: StdVideoH264SequenceParameterSet::chroma_format_idc"]
        [::core::mem::offset_of!(StdVideoH264SequenceParameterSet, chroma_format_idc) - 12usize];
    ["Offset of field: StdVideoH264SequenceParameterSet::seq_parameter_set_id"]
        [::core::mem::offset_of!(StdVideoH264SequenceParameterSet, seq_parameter_set_id) - 16usize];
    ["Offset of field: StdVideoH264SequenceParameterSet::bit_depth_luma_minus8"][::core::mem::offset_of!(
        StdVideoH264SequenceParameterSet,
        bit_depth_luma_minus8
    ) - 17usize];
    ["Offset of field: StdVideoH264SequenceParameterSet::bit_depth_chroma_minus8"][::core::mem::offset_of!(
        StdVideoH264SequenceParameterSet,
        bit_depth_chroma_minus8
    ) - 18usize];
    ["Offset of field: StdVideoH264SequenceParameterSet::log2_max_frame_num_minus4"][::core::mem::offset_of!(
        StdVideoH264SequenceParameterSet,
        log2_max_frame_num_minus4
    ) - 19usize];
    ["Offset of field: StdVideoH264SequenceParameterSet::pic_order_cnt_type"]
        [::core::mem::offset_of!(StdVideoH264SequenceParameterSet, pic_order_cnt_type) - 20usize];
    ["Offset of field: StdVideoH264SequenceParameterSet::offset_for_non_ref_pic"][::core::mem::offset_of!(
        StdVideoH264SequenceParameterSet,
        offset_for_non_ref_pic
    ) - 24usize];
    ["Offset of field: StdVideoH264SequenceParameterSet::offset_for_top_to_bottom_field"][::core::mem::offset_of!(
        StdVideoH264SequenceParameterSet,
        offset_for_top_to_bottom_field
    )
        - 28usize];
    ["Offset of field: StdVideoH264SequenceParameterSet::log2_max_pic_order_cnt_lsb_minus4"][::core::mem::offset_of!(
        StdVideoH264SequenceParameterSet,
        log2_max_pic_order_cnt_lsb_minus4
    )
        - 32usize];
    ["Offset of field: StdVideoH264SequenceParameterSet::num_ref_frames_in_pic_order_cnt_cycle"][::core::mem::offset_of!(
        StdVideoH264SequenceParameterSet,
        num_ref_frames_in_pic_order_cnt_cycle
    )
        - 33usize];
    ["Offset of field: StdVideoH264SequenceParameterSet::max_num_ref_frames"]
        [::core::mem::offset_of!(StdVideoH264SequenceParameterSet, max_num_ref_frames) - 34usize];
    ["Offset of field: StdVideoH264SequenceParameterSet::reserved1"]
        [::core::mem::offset_of!(StdVideoH264SequenceParameterSet, reserved1) - 35usize];
    ["Offset of field: StdVideoH264SequenceParameterSet::pic_width_in_mbs_minus1"][::core::mem::offset_of!(
        StdVideoH264SequenceParameterSet,
        pic_width_in_mbs_minus1
    ) - 36usize];
    ["Offset of field: StdVideoH264SequenceParameterSet::pic_height_in_map_units_minus1"][::core::mem::offset_of!(
        StdVideoH264SequenceParameterSet,
        pic_height_in_map_units_minus1
    )
        - 40usize];
    ["Offset of field: StdVideoH264SequenceParameterSet::frame_crop_left_offset"][::core::mem::offset_of!(
        StdVideoH264SequenceParameterSet,
        frame_crop_left_offset
    ) - 44usize];
    ["Offset of field: StdVideoH264SequenceParameterSet::frame_crop_right_offset"][::core::mem::offset_of!(
        StdVideoH264SequenceParameterSet,
        frame_crop_right_offset
    ) - 48usize];
    ["Offset of field: StdVideoH264SequenceParameterSet::frame_crop_top_offset"][::core::mem::offset_of!(
        StdVideoH264SequenceParameterSet,
        frame_crop_top_offset
    ) - 52usize];
    ["Offset of field: StdVideoH264SequenceParameterSet::frame_crop_bottom_offset"][::core::mem::offset_of!(
        StdVideoH264SequenceParameterSet,
        frame_crop_bottom_offset
    ) - 56usize];
    ["Offset of field: StdVideoH264SequenceParameterSet::reserved2"]
        [::core::mem::offset_of!(StdVideoH264SequenceParameterSet, reserved2) - 60usize];
    ["Offset of field: StdVideoH264SequenceParameterSet::pOffsetForRefFrame"]
        [::core::mem::offset_of!(StdVideoH264SequenceParameterSet, pOffsetForRefFrame) - 64usize];
    ["Offset of field: StdVideoH264SequenceParameterSet::pScalingLists"]
        [::core::mem::offset_of!(StdVideoH264SequenceParameterSet, pScalingLists) - 68usize];
    ["Offset of field: StdVideoH264SequenceParameterSet::pSequenceParameterSetVui"][::core::mem::offset_of!(
        StdVideoH264SequenceParameterSet,
        pSequenceParameterSetVui
    ) - 72usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoH264PpsFlags"][::core::mem::size_of::<StdVideoH264PpsFlags>() - 4usize];
    ["Alignment of StdVideoH264PpsFlags"][::core::mem::align_of::<StdVideoH264PpsFlags>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoH264PictureParameterSet"]
        [::core::mem::size_of::<StdVideoH264PictureParameterSet>() - 20usize];
    ["Alignment of StdVideoH264PictureParameterSet"]
        [::core::mem::align_of::<StdVideoH264PictureParameterSet>() - 4usize];
    ["Offset of field: StdVideoH264PictureParameterSet::flags"]
        [::core::mem::offset_of!(StdVideoH264PictureParameterSet, flags) - 0usize];
    ["Offset of field: StdVideoH264PictureParameterSet::seq_parameter_set_id"]
        [::core::mem::offset_of!(StdVideoH264PictureParameterSet, seq_parameter_set_id) - 4usize];
    ["Offset of field: StdVideoH264PictureParameterSet::pic_parameter_set_id"]
        [::core::mem::offset_of!(StdVideoH264PictureParameterSet, pic_parameter_set_id) - 5usize];
    ["Offset of field: StdVideoH264PictureParameterSet::num_ref_idx_l0_default_active_minus1"][::core::mem::offset_of!(
        StdVideoH264PictureParameterSet,
        num_ref_idx_l0_default_active_minus1
    )
        - 6usize];
    ["Offset of field: StdVideoH264PictureParameterSet::num_ref_idx_l1_default_active_minus1"][::core::mem::offset_of!(
        StdVideoH264PictureParameterSet,
        num_ref_idx_l1_default_active_minus1
    )
        - 7usize];
    ["Offset of field: StdVideoH264PictureParameterSet::weighted_bipred_idc"]
        [::core::mem::offset_of!(StdVideoH264PictureParameterSet, weighted_bipred_idc) - 8usize];
    ["Offset of field: StdVideoH264PictureParameterSet::pic_init_qp_minus26"]
        [::core::mem::offset_of!(StdVideoH264PictureParameterSet, pic_init_qp_minus26) - 12usize];
    ["Offset of field: StdVideoH264PictureParameterSet::pic_init_qs_minus26"]
        [::core::mem::offset_of!(StdVideoH264PictureParameterSet, pic_init_qs_minus26) - 13usize];
    ["Offset of field: StdVideoH264PictureParameterSet::chroma_qp_index_offset"][::core::mem::offset_of!(
        StdVideoH264PictureParameterSet,
        chroma_qp_index_offset
    ) - 14usize];
    ["Offset of field: StdVideoH264PictureParameterSet::second_chroma_qp_index_offset"][::core::mem::offset_of!(
        StdVideoH264PictureParameterSet,
        second_chroma_qp_index_offset
    )
        - 15usize];
    ["Offset of field: StdVideoH264PictureParameterSet::pScalingLists"]
        [::core::mem::offset_of!(StdVideoH264PictureParameterSet, pScalingLists) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoEncodeH264WeightTableFlags"]
        [::core::mem::size_of::<StdVideoEncodeH264WeightTableFlags>() - 16usize];
    ["Alignment of StdVideoEncodeH264WeightTableFlags"]
        [::core::mem::align_of::<StdVideoEncodeH264WeightTableFlags>() - 4usize];
    ["Offset of field: StdVideoEncodeH264WeightTableFlags::luma_weight_l0_flag"]
        [::core::mem::offset_of!(StdVideoEncodeH264WeightTableFlags, luma_weight_l0_flag) - 0usize];
    ["Offset of field: StdVideoEncodeH264WeightTableFlags::chroma_weight_l0_flag"][::core::mem::offset_of!(
        StdVideoEncodeH264WeightTableFlags,
        chroma_weight_l0_flag
    ) - 4usize];
    ["Offset of field: StdVideoEncodeH264WeightTableFlags::luma_weight_l1_flag"]
        [::core::mem::offset_of!(StdVideoEncodeH264WeightTableFlags, luma_weight_l1_flag) - 8usize];
    ["Offset of field: StdVideoEncodeH264WeightTableFlags::chroma_weight_l1_flag"][::core::mem::offset_of!(
        StdVideoEncodeH264WeightTableFlags,
        chroma_weight_l1_flag
    ) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoEncodeH264WeightTable"]
        [::core::mem::size_of::<StdVideoEncodeH264WeightTable>() - 404usize];
    ["Alignment of StdVideoEncodeH264WeightTable"]
        [::core::mem::align_of::<StdVideoEncodeH264WeightTable>() - 4usize];
    ["Offset of field: StdVideoEncodeH264WeightTable::flags"]
        [::core::mem::offset_of!(StdVideoEncodeH264WeightTable, flags) - 0usize];
    ["Offset of field: StdVideoEncodeH264WeightTable::luma_log2_weight_denom"]
        [::core::mem::offset_of!(StdVideoEncodeH264WeightTable, luma_log2_weight_denom) - 16usize];
    ["Offset of field: StdVideoEncodeH264WeightTable::chroma_log2_weight_denom"][::core::mem::offset_of!(
        StdVideoEncodeH264WeightTable,
        chroma_log2_weight_denom
    ) - 17usize];
    ["Offset of field: StdVideoEncodeH264WeightTable::luma_weight_l0"]
        [::core::mem::offset_of!(StdVideoEncodeH264WeightTable, luma_weight_l0) - 18usize];
    ["Offset of field: StdVideoEncodeH264WeightTable::luma_offset_l0"]
        [::core::mem::offset_of!(StdVideoEncodeH264WeightTable, luma_offset_l0) - 50usize];
    ["Offset of field: StdVideoEncodeH264WeightTable::chroma_weight_l0"]
        [::core::mem::offset_of!(StdVideoEncodeH264WeightTable, chroma_weight_l0) - 82usize];
    ["Offset of field: StdVideoEncodeH264WeightTable::chroma_offset_l0"]
        [::core::mem::offset_of!(StdVideoEncodeH264WeightTable, chroma_offset_l0) - 146usize];
    ["Offset of field: StdVideoEncodeH264WeightTable::luma_weight_l1"]
        [::core::mem::offset_of!(StdVideoEncodeH264WeightTable, luma_weight_l1) - 210usize];
    ["Offset of field: StdVideoEncodeH264WeightTable::luma_offset_l1"]
        [::core::mem::offset_of!(StdVideoEncodeH264WeightTable, luma_offset_l1) - 242usize];
    ["Offset of field: StdVideoEncodeH264WeightTable::chroma_weight_l1"]
        [::core::mem::offset_of!(StdVideoEncodeH264WeightTable, chroma_weight_l1) - 274usize];
    ["Offset of field: StdVideoEncodeH264WeightTable::chroma_offset_l1"]
        [::core::mem::offset_of!(StdVideoEncodeH264WeightTable, chroma_offset_l1) - 338usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoEncodeH264SliceHeaderFlags"]
        [::core::mem::size_of::<StdVideoEncodeH264SliceHeaderFlags>() - 4usize];
    ["Alignment of StdVideoEncodeH264SliceHeaderFlags"]
        [::core::mem::align_of::<StdVideoEncodeH264SliceHeaderFlags>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoEncodeH264PictureInfoFlags"]
        [::core::mem::size_of::<StdVideoEncodeH264PictureInfoFlags>() - 4usize];
    ["Alignment of StdVideoEncodeH264PictureInfoFlags"]
        [::core::mem::align_of::<StdVideoEncodeH264PictureInfoFlags>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoEncodeH264ReferenceInfoFlags"]
        [::core::mem::size_of::<StdVideoEncodeH264ReferenceInfoFlags>() - 4usize];
    ["Alignment of StdVideoEncodeH264ReferenceInfoFlags"]
        [::core::mem::align_of::<StdVideoEncodeH264ReferenceInfoFlags>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoEncodeH264ReferenceListsInfoFlags"]
        [::core::mem::size_of::<StdVideoEncodeH264ReferenceListsInfoFlags>() - 4usize];
    ["Alignment of StdVideoEncodeH264ReferenceListsInfoFlags"]
        [::core::mem::align_of::<StdVideoEncodeH264ReferenceListsInfoFlags>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoEncodeH264RefListModEntry"]
        [::core::mem::size_of::<StdVideoEncodeH264RefListModEntry>() - 8usize];
    ["Alignment of StdVideoEncodeH264RefListModEntry"]
        [::core::mem::align_of::<StdVideoEncodeH264RefListModEntry>() - 4usize];
    ["Offset of field: StdVideoEncodeH264RefListModEntry::modification_of_pic_nums_idc"][::core::mem::offset_of!(
        StdVideoEncodeH264RefListModEntry,
        modification_of_pic_nums_idc
    )
        - 0usize];
    ["Offset of field: StdVideoEncodeH264RefListModEntry::abs_diff_pic_num_minus1"][::core::mem::offset_of!(
        StdVideoEncodeH264RefListModEntry,
        abs_diff_pic_num_minus1
    ) - 4usize];
    ["Offset of field: StdVideoEncodeH264RefListModEntry::long_term_pic_num"]
        [::core::mem::offset_of!(StdVideoEncodeH264RefListModEntry, long_term_pic_num) - 6usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoEncodeH264RefPicMarkingEntry"]
        [::core::mem::size_of::<StdVideoEncodeH264RefPicMarkingEntry>() - 12usize];
    ["Alignment of StdVideoEncodeH264RefPicMarkingEntry"]
        [::core::mem::align_of::<StdVideoEncodeH264RefPicMarkingEntry>() - 4usize];
    ["Offset of field: StdVideoEncodeH264RefPicMarkingEntry::memory_management_control_operation"] [:: core :: mem :: offset_of ! (StdVideoEncodeH264RefPicMarkingEntry , memory_management_control_operation) - 0usize] ;
    ["Offset of field: StdVideoEncodeH264RefPicMarkingEntry::difference_of_pic_nums_minus1"][::core::mem::offset_of!(
        StdVideoEncodeH264RefPicMarkingEntry,
        difference_of_pic_nums_minus1
    )
        - 4usize];
    ["Offset of field: StdVideoEncodeH264RefPicMarkingEntry::long_term_pic_num"]
        [::core::mem::offset_of!(StdVideoEncodeH264RefPicMarkingEntry, long_term_pic_num) - 6usize];
    ["Offset of field: StdVideoEncodeH264RefPicMarkingEntry::long_term_frame_idx"][::core::mem::offset_of!(
        StdVideoEncodeH264RefPicMarkingEntry,
        long_term_frame_idx
    ) - 8usize];
    ["Offset of field: StdVideoEncodeH264RefPicMarkingEntry::max_long_term_frame_idx_plus1"][::core::mem::offset_of!(
        StdVideoEncodeH264RefPicMarkingEntry,
        max_long_term_frame_idx_plus1
    )
        - 10usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoEncodeH264ReferenceListsInfo"]
        [::core::mem::size_of::<StdVideoEncodeH264ReferenceListsInfo>() - 92usize];
    ["Alignment of StdVideoEncodeH264ReferenceListsInfo"]
        [::core::mem::align_of::<StdVideoEncodeH264ReferenceListsInfo>() - 4usize];
    ["Offset of field: StdVideoEncodeH264ReferenceListsInfo::flags"]
        [::core::mem::offset_of!(StdVideoEncodeH264ReferenceListsInfo, flags) - 0usize];
    ["Offset of field: StdVideoEncodeH264ReferenceListsInfo::num_ref_idx_l0_active_minus1"][::core::mem::offset_of!(
        StdVideoEncodeH264ReferenceListsInfo,
        num_ref_idx_l0_active_minus1
    )
        - 4usize];
    ["Offset of field: StdVideoEncodeH264ReferenceListsInfo::num_ref_idx_l1_active_minus1"][::core::mem::offset_of!(
        StdVideoEncodeH264ReferenceListsInfo,
        num_ref_idx_l1_active_minus1
    )
        - 5usize];
    ["Offset of field: StdVideoEncodeH264ReferenceListsInfo::RefPicList0"]
        [::core::mem::offset_of!(StdVideoEncodeH264ReferenceListsInfo, RefPicList0) - 6usize];
    ["Offset of field: StdVideoEncodeH264ReferenceListsInfo::RefPicList1"]
        [::core::mem::offset_of!(StdVideoEncodeH264ReferenceListsInfo, RefPicList1) - 38usize];
    ["Offset of field: StdVideoEncodeH264ReferenceListsInfo::refList0ModOpCount"][::core::mem::offset_of!(
        StdVideoEncodeH264ReferenceListsInfo,
        refList0ModOpCount
    ) - 70usize];
    ["Offset of field: StdVideoEncodeH264ReferenceListsInfo::refList1ModOpCount"][::core::mem::offset_of!(
        StdVideoEncodeH264ReferenceListsInfo,
        refList1ModOpCount
    ) - 71usize];
    ["Offset of field: StdVideoEncodeH264ReferenceListsInfo::refPicMarkingOpCount"][::core::mem::offset_of!(
        StdVideoEncodeH264ReferenceListsInfo,
        refPicMarkingOpCount
    ) - 72usize];
    ["Offset of field: StdVideoEncodeH264ReferenceListsInfo::reserved1"]
        [::core::mem::offset_of!(StdVideoEncodeH264ReferenceListsInfo, reserved1) - 73usize];
    ["Offset of field: StdVideoEncodeH264ReferenceListsInfo::pRefList0ModOperations"][::core::mem::offset_of!(
        StdVideoEncodeH264ReferenceListsInfo,
        pRefList0ModOperations
    ) - 80usize];
    ["Offset of field: StdVideoEncodeH264ReferenceListsInfo::pRefList1ModOperations"][::core::mem::offset_of!(
        StdVideoEncodeH264ReferenceListsInfo,
        pRefList1ModOperations
    ) - 84usize];
    ["Offset of field: StdVideoEncodeH264ReferenceListsInfo::pRefPicMarkingOperations"][::core::mem::offset_of!(
        StdVideoEncodeH264ReferenceListsInfo,
        pRefPicMarkingOperations
    )
        - 88usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoEncodeH264PictureInfo"]
        [::core::mem::size_of::<StdVideoEncodeH264PictureInfo>() - 28usize];
    ["Alignment of StdVideoEncodeH264PictureInfo"]
        [::core::mem::align_of::<StdVideoEncodeH264PictureInfo>() - 4usize];
    ["Offset of field: StdVideoEncodeH264PictureInfo::flags"]
        [::core::mem::offset_of!(StdVideoEncodeH264PictureInfo, flags) - 0usize];
    ["Offset of field: StdVideoEncodeH264PictureInfo::seq_parameter_set_id"]
        [::core::mem::offset_of!(StdVideoEncodeH264PictureInfo, seq_parameter_set_id) - 4usize];
    ["Offset of field: StdVideoEncodeH264PictureInfo::pic_parameter_set_id"]
        [::core::mem::offset_of!(StdVideoEncodeH264PictureInfo, pic_parameter_set_id) - 5usize];
    ["Offset of field: StdVideoEncodeH264PictureInfo::idr_pic_id"]
        [::core::mem::offset_of!(StdVideoEncodeH264PictureInfo, idr_pic_id) - 6usize];
    ["Offset of field: StdVideoEncodeH264PictureInfo::primary_pic_type"]
        [::core::mem::offset_of!(StdVideoEncodeH264PictureInfo, primary_pic_type) - 8usize];
    ["Offset of field: StdVideoEncodeH264PictureInfo::frame_num"]
        [::core::mem::offset_of!(StdVideoEncodeH264PictureInfo, frame_num) - 12usize];
    ["Offset of field: StdVideoEncodeH264PictureInfo::PicOrderCnt"]
        [::core::mem::offset_of!(StdVideoEncodeH264PictureInfo, PicOrderCnt) - 16usize];
    ["Offset of field: StdVideoEncodeH264PictureInfo::temporal_id"]
        [::core::mem::offset_of!(StdVideoEncodeH264PictureInfo, temporal_id) - 20usize];
    ["Offset of field: StdVideoEncodeH264PictureInfo::reserved1"]
        [::core::mem::offset_of!(StdVideoEncodeH264PictureInfo, reserved1) - 21usize];
    ["Offset of field: StdVideoEncodeH264PictureInfo::pRefLists"]
        [::core::mem::offset_of!(StdVideoEncodeH264PictureInfo, pRefLists) - 24usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoEncodeH264ReferenceInfo"]
        [::core::mem::size_of::<StdVideoEncodeH264ReferenceInfo>() - 24usize];
    ["Alignment of StdVideoEncodeH264ReferenceInfo"]
        [::core::mem::align_of::<StdVideoEncodeH264ReferenceInfo>() - 4usize];
    ["Offset of field: StdVideoEncodeH264ReferenceInfo::flags"]
        [::core::mem::offset_of!(StdVideoEncodeH264ReferenceInfo, flags) - 0usize];
    ["Offset of field: StdVideoEncodeH264ReferenceInfo::primary_pic_type"]
        [::core::mem::offset_of!(StdVideoEncodeH264ReferenceInfo, primary_pic_type) - 4usize];
    ["Offset of field: StdVideoEncodeH264ReferenceInfo::FrameNum"]
        [::core::mem::offset_of!(StdVideoEncodeH264ReferenceInfo, FrameNum) - 8usize];
    ["Offset of field: StdVideoEncodeH264ReferenceInfo::PicOrderCnt"]
        [::core::mem::offset_of!(StdVideoEncodeH264ReferenceInfo, PicOrderCnt) - 12usize];
    ["Offset of field: StdVideoEncodeH264ReferenceInfo::long_term_pic_num"]
        [::core::mem::offset_of!(StdVideoEncodeH264ReferenceInfo, long_term_pic_num) - 16usize];
    ["Offset of field: StdVideoEncodeH264ReferenceInfo::long_term_frame_idx"]
        [::core::mem::offset_of!(StdVideoEncodeH264ReferenceInfo, long_term_frame_idx) - 18usize];
    ["Offset of field: StdVideoEncodeH264ReferenceInfo::temporal_id"]
        [::core::mem::offset_of!(StdVideoEncodeH264ReferenceInfo, temporal_id) - 20usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoEncodeH264SliceHeader"]
        [::core::mem::size_of::<StdVideoEncodeH264SliceHeader>() - 28usize];
    ["Alignment of StdVideoEncodeH264SliceHeader"]
        [::core::mem::align_of::<StdVideoEncodeH264SliceHeader>() - 4usize];
    ["Offset of field: StdVideoEncodeH264SliceHeader::flags"]
        [::core::mem::offset_of!(StdVideoEncodeH264SliceHeader, flags) - 0usize];
    ["Offset of field: StdVideoEncodeH264SliceHeader::first_mb_in_slice"]
        [::core::mem::offset_of!(StdVideoEncodeH264SliceHeader, first_mb_in_slice) - 4usize];
    ["Offset of field: StdVideoEncodeH264SliceHeader::slice_type"]
        [::core::mem::offset_of!(StdVideoEncodeH264SliceHeader, slice_type) - 8usize];
    ["Offset of field: StdVideoEncodeH264SliceHeader::slice_alpha_c0_offset_div2"][::core::mem::offset_of!(
        StdVideoEncodeH264SliceHeader,
        slice_alpha_c0_offset_div2
    ) - 12usize];
    ["Offset of field: StdVideoEncodeH264SliceHeader::slice_beta_offset_div2"]
        [::core::mem::offset_of!(StdVideoEncodeH264SliceHeader, slice_beta_offset_div2) - 13usize];
    ["Offset of field: StdVideoEncodeH264SliceHeader::slice_qp_delta"]
        [::core::mem::offset_of!(StdVideoEncodeH264SliceHeader, slice_qp_delta) - 14usize];
    ["Offset of field: StdVideoEncodeH264SliceHeader::reserved1"]
        [::core::mem::offset_of!(StdVideoEncodeH264SliceHeader, reserved1) - 15usize];
    ["Offset of field: StdVideoEncodeH264SliceHeader::cabac_init_idc"]
        [::core::mem::offset_of!(StdVideoEncodeH264SliceHeader, cabac_init_idc) - 16usize];
    ["Offset of field: StdVideoEncodeH264SliceHeader::disable_deblocking_filter_idc"][::core::mem::offset_of!(
        StdVideoEncodeH264SliceHeader,
        disable_deblocking_filter_idc
    ) - 20usize];
    ["Offset of field: StdVideoEncodeH264SliceHeader::pWeightTable"]
        [::core::mem::offset_of!(StdVideoEncodeH264SliceHeader, pWeightTable) - 24usize];
};
pub const VkVideoEncodeH264CapabilityFlagBitsKHR_VK_VIDEO_ENCODE_H264_CAPABILITY_HRD_COMPLIANCE_BIT_KHR : VkVideoEncodeH264CapabilityFlagBitsKHR = 1 ;
pub const VkVideoEncodeH264CapabilityFlagBitsKHR_VK_VIDEO_ENCODE_H264_CAPABILITY_PREDICTION_WEIGHT_TABLE_GENERATED_BIT_KHR : VkVideoEncodeH264CapabilityFlagBitsKHR = 2 ;
pub const VkVideoEncodeH264CapabilityFlagBitsKHR_VK_VIDEO_ENCODE_H264_CAPABILITY_ROW_UNALIGNED_SLICE_BIT_KHR : VkVideoEncodeH264CapabilityFlagBitsKHR = 4 ;
pub const VkVideoEncodeH264CapabilityFlagBitsKHR_VK_VIDEO_ENCODE_H264_CAPABILITY_DIFFERENT_SLICE_TYPE_BIT_KHR : VkVideoEncodeH264CapabilityFlagBitsKHR = 8 ;
pub const VkVideoEncodeH264CapabilityFlagBitsKHR_VK_VIDEO_ENCODE_H264_CAPABILITY_B_FRAME_IN_L0_LIST_BIT_KHR : VkVideoEncodeH264CapabilityFlagBitsKHR = 16 ;
pub const VkVideoEncodeH264CapabilityFlagBitsKHR_VK_VIDEO_ENCODE_H264_CAPABILITY_B_FRAME_IN_L1_LIST_BIT_KHR : VkVideoEncodeH264CapabilityFlagBitsKHR = 32 ;
pub const VkVideoEncodeH264CapabilityFlagBitsKHR_VK_VIDEO_ENCODE_H264_CAPABILITY_PER_PICTURE_TYPE_MIN_MAX_QP_BIT_KHR : VkVideoEncodeH264CapabilityFlagBitsKHR = 64 ;
pub const VkVideoEncodeH264CapabilityFlagBitsKHR_VK_VIDEO_ENCODE_H264_CAPABILITY_PER_SLICE_CONSTANT_QP_BIT_KHR : VkVideoEncodeH264CapabilityFlagBitsKHR = 128 ;
pub const VkVideoEncodeH264CapabilityFlagBitsKHR_VK_VIDEO_ENCODE_H264_CAPABILITY_GENERATE_PREFIX_NALU_BIT_KHR : VkVideoEncodeH264CapabilityFlagBitsKHR = 256 ;
pub const VkVideoEncodeH264CapabilityFlagBitsKHR_VK_VIDEO_ENCODE_H264_CAPABILITY_MB_QP_DIFF_WRAPAROUND_BIT_KHR : VkVideoEncodeH264CapabilityFlagBitsKHR = 512 ;
pub const VkVideoEncodeH264CapabilityFlagBitsKHR_VK_VIDEO_ENCODE_H264_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR : VkVideoEncodeH264CapabilityFlagBitsKHR = 2147483647 ;
pub const VkVideoEncodeH264StdFlagBitsKHR_VK_VIDEO_ENCODE_H264_STD_SEPARATE_COLOR_PLANE_FLAG_SET_BIT_KHR : VkVideoEncodeH264StdFlagBitsKHR = 1 ;
pub const VkVideoEncodeH264StdFlagBitsKHR_VK_VIDEO_ENCODE_H264_STD_QPPRIME_Y_ZERO_TRANSFORM_BYPASS_FLAG_SET_BIT_KHR : VkVideoEncodeH264StdFlagBitsKHR = 2 ;
pub const VkVideoEncodeH264StdFlagBitsKHR_VK_VIDEO_ENCODE_H264_STD_SCALING_MATRIX_PRESENT_FLAG_SET_BIT_KHR : VkVideoEncodeH264StdFlagBitsKHR = 4 ;
pub const VkVideoEncodeH264StdFlagBitsKHR_VK_VIDEO_ENCODE_H264_STD_CHROMA_QP_INDEX_OFFSET_BIT_KHR : VkVideoEncodeH264StdFlagBitsKHR = 8 ;
pub const VkVideoEncodeH264StdFlagBitsKHR_VK_VIDEO_ENCODE_H264_STD_SECOND_CHROMA_QP_INDEX_OFFSET_BIT_KHR : VkVideoEncodeH264StdFlagBitsKHR = 16 ;
pub const VkVideoEncodeH264StdFlagBitsKHR_VK_VIDEO_ENCODE_H264_STD_PIC_INIT_QP_MINUS26_BIT_KHR:
    VkVideoEncodeH264StdFlagBitsKHR = 32;
pub const VkVideoEncodeH264StdFlagBitsKHR_VK_VIDEO_ENCODE_H264_STD_WEIGHTED_PRED_FLAG_SET_BIT_KHR : VkVideoEncodeH264StdFlagBitsKHR = 64 ;
pub const VkVideoEncodeH264StdFlagBitsKHR_VK_VIDEO_ENCODE_H264_STD_WEIGHTED_BIPRED_IDC_EXPLICIT_BIT_KHR : VkVideoEncodeH264StdFlagBitsKHR = 128 ;
pub const VkVideoEncodeH264StdFlagBitsKHR_VK_VIDEO_ENCODE_H264_STD_WEIGHTED_BIPRED_IDC_IMPLICIT_BIT_KHR : VkVideoEncodeH264StdFlagBitsKHR = 256 ;
pub const VkVideoEncodeH264StdFlagBitsKHR_VK_VIDEO_ENCODE_H264_STD_TRANSFORM_8X8_MODE_FLAG_SET_BIT_KHR : VkVideoEncodeH264StdFlagBitsKHR = 512 ;
pub const VkVideoEncodeH264StdFlagBitsKHR_VK_VIDEO_ENCODE_H264_STD_DIRECT_SPATIAL_MV_PRED_FLAG_UNSET_BIT_KHR : VkVideoEncodeH264StdFlagBitsKHR = 1024 ;
pub const VkVideoEncodeH264StdFlagBitsKHR_VK_VIDEO_ENCODE_H264_STD_ENTROPY_CODING_MODE_FLAG_UNSET_BIT_KHR : VkVideoEncodeH264StdFlagBitsKHR = 2048 ;
pub const VkVideoEncodeH264StdFlagBitsKHR_VK_VIDEO_ENCODE_H264_STD_ENTROPY_CODING_MODE_FLAG_SET_BIT_KHR : VkVideoEncodeH264StdFlagBitsKHR = 4096 ;
pub const VkVideoEncodeH264StdFlagBitsKHR_VK_VIDEO_ENCODE_H264_STD_DIRECT_8X8_INFERENCE_FLAG_UNSET_BIT_KHR : VkVideoEncodeH264StdFlagBitsKHR = 8192 ;
pub const VkVideoEncodeH264StdFlagBitsKHR_VK_VIDEO_ENCODE_H264_STD_CONSTRAINED_INTRA_PRED_FLAG_SET_BIT_KHR : VkVideoEncodeH264StdFlagBitsKHR = 16384 ;
pub const VkVideoEncodeH264StdFlagBitsKHR_VK_VIDEO_ENCODE_H264_STD_DEBLOCKING_FILTER_DISABLED_BIT_KHR : VkVideoEncodeH264StdFlagBitsKHR = 32768 ;
pub const VkVideoEncodeH264StdFlagBitsKHR_VK_VIDEO_ENCODE_H264_STD_DEBLOCKING_FILTER_ENABLED_BIT_KHR : VkVideoEncodeH264StdFlagBitsKHR = 65536 ;
pub const VkVideoEncodeH264StdFlagBitsKHR_VK_VIDEO_ENCODE_H264_STD_DEBLOCKING_FILTER_PARTIAL_BIT_KHR : VkVideoEncodeH264StdFlagBitsKHR = 131072 ;
pub const VkVideoEncodeH264StdFlagBitsKHR_VK_VIDEO_ENCODE_H264_STD_SLICE_QP_DELTA_BIT_KHR:
    VkVideoEncodeH264StdFlagBitsKHR = 524288;
pub const VkVideoEncodeH264StdFlagBitsKHR_VK_VIDEO_ENCODE_H264_STD_DIFFERENT_SLICE_QP_DELTA_BIT_KHR : VkVideoEncodeH264StdFlagBitsKHR = 1048576 ;
pub const VkVideoEncodeH264StdFlagBitsKHR_VK_VIDEO_ENCODE_H264_STD_FLAG_BITS_MAX_ENUM_KHR:
    VkVideoEncodeH264StdFlagBitsKHR = 2147483647;
pub const VkVideoEncodeH264RateControlFlagBitsKHR_VK_VIDEO_ENCODE_H264_RATE_CONTROL_ATTEMPT_HRD_COMPLIANCE_BIT_KHR : VkVideoEncodeH264RateControlFlagBitsKHR = 1 ;
pub const VkVideoEncodeH264RateControlFlagBitsKHR_VK_VIDEO_ENCODE_H264_RATE_CONTROL_REGULAR_GOP_BIT_KHR : VkVideoEncodeH264RateControlFlagBitsKHR = 2 ;
pub const VkVideoEncodeH264RateControlFlagBitsKHR_VK_VIDEO_ENCODE_H264_RATE_CONTROL_REFERENCE_PATTERN_FLAT_BIT_KHR : VkVideoEncodeH264RateControlFlagBitsKHR = 4 ;
pub const VkVideoEncodeH264RateControlFlagBitsKHR_VK_VIDEO_ENCODE_H264_RATE_CONTROL_REFERENCE_PATTERN_DYADIC_BIT_KHR : VkVideoEncodeH264RateControlFlagBitsKHR = 8 ;
pub const VkVideoEncodeH264RateControlFlagBitsKHR_VK_VIDEO_ENCODE_H264_RATE_CONTROL_TEMPORAL_LAYER_PATTERN_DYADIC_BIT_KHR : VkVideoEncodeH264RateControlFlagBitsKHR = 16 ;
pub const VkVideoEncodeH264RateControlFlagBitsKHR_VK_VIDEO_ENCODE_H264_RATE_CONTROL_FLAG_BITS_MAX_ENUM_KHR : VkVideoEncodeH264RateControlFlagBitsKHR = 2147483647 ;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeH264CapabilitiesKHR"]
        [::core::mem::size_of::<VkVideoEncodeH264CapabilitiesKHR>() - 60usize];
    ["Alignment of VkVideoEncodeH264CapabilitiesKHR"]
        [::core::mem::align_of::<VkVideoEncodeH264CapabilitiesKHR>() - 4usize];
    ["Offset of field: VkVideoEncodeH264CapabilitiesKHR::sType"]
        [::core::mem::offset_of!(VkVideoEncodeH264CapabilitiesKHR, sType) - 0usize];
    ["Offset of field: VkVideoEncodeH264CapabilitiesKHR::pNext"]
        [::core::mem::offset_of!(VkVideoEncodeH264CapabilitiesKHR, pNext) - 4usize];
    ["Offset of field: VkVideoEncodeH264CapabilitiesKHR::flags"]
        [::core::mem::offset_of!(VkVideoEncodeH264CapabilitiesKHR, flags) - 8usize];
    ["Offset of field: VkVideoEncodeH264CapabilitiesKHR::maxLevelIdc"]
        [::core::mem::offset_of!(VkVideoEncodeH264CapabilitiesKHR, maxLevelIdc) - 12usize];
    ["Offset of field: VkVideoEncodeH264CapabilitiesKHR::maxSliceCount"]
        [::core::mem::offset_of!(VkVideoEncodeH264CapabilitiesKHR, maxSliceCount) - 16usize];
    ["Offset of field: VkVideoEncodeH264CapabilitiesKHR::maxPPictureL0ReferenceCount"][::core::mem::offset_of!(
        VkVideoEncodeH264CapabilitiesKHR,
        maxPPictureL0ReferenceCount
    ) - 20usize];
    ["Offset of field: VkVideoEncodeH264CapabilitiesKHR::maxBPictureL0ReferenceCount"][::core::mem::offset_of!(
        VkVideoEncodeH264CapabilitiesKHR,
        maxBPictureL0ReferenceCount
    ) - 24usize];
    ["Offset of field: VkVideoEncodeH264CapabilitiesKHR::maxL1ReferenceCount"]
        [::core::mem::offset_of!(VkVideoEncodeH264CapabilitiesKHR, maxL1ReferenceCount) - 28usize];
    ["Offset of field: VkVideoEncodeH264CapabilitiesKHR::maxTemporalLayerCount"][::core::mem::offset_of!(
        VkVideoEncodeH264CapabilitiesKHR,
        maxTemporalLayerCount
    ) - 32usize];
    ["Offset of field: VkVideoEncodeH264CapabilitiesKHR::expectDyadicTemporalLayerPattern"][::core::mem::offset_of!(
        VkVideoEncodeH264CapabilitiesKHR,
        expectDyadicTemporalLayerPattern
    )
        - 36usize];
    ["Offset of field: VkVideoEncodeH264CapabilitiesKHR::minQp"]
        [::core::mem::offset_of!(VkVideoEncodeH264CapabilitiesKHR, minQp) - 40usize];
    ["Offset of field: VkVideoEncodeH264CapabilitiesKHR::maxQp"]
        [::core::mem::offset_of!(VkVideoEncodeH264CapabilitiesKHR, maxQp) - 44usize];
    ["Offset of field: VkVideoEncodeH264CapabilitiesKHR::prefersGopRemainingFrames"][::core::mem::offset_of!(
        VkVideoEncodeH264CapabilitiesKHR,
        prefersGopRemainingFrames
    ) - 48usize];
    ["Offset of field: VkVideoEncodeH264CapabilitiesKHR::requiresGopRemainingFrames"][::core::mem::offset_of!(
        VkVideoEncodeH264CapabilitiesKHR,
        requiresGopRemainingFrames
    ) - 52usize];
    ["Offset of field: VkVideoEncodeH264CapabilitiesKHR::stdSyntaxFlags"]
        [::core::mem::offset_of!(VkVideoEncodeH264CapabilitiesKHR, stdSyntaxFlags) - 56usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeH264QpKHR"][::core::mem::size_of::<VkVideoEncodeH264QpKHR>() - 12usize];
    ["Alignment of VkVideoEncodeH264QpKHR"]
        [::core::mem::align_of::<VkVideoEncodeH264QpKHR>() - 4usize];
    ["Offset of field: VkVideoEncodeH264QpKHR::qpI"]
        [::core::mem::offset_of!(VkVideoEncodeH264QpKHR, qpI) - 0usize];
    ["Offset of field: VkVideoEncodeH264QpKHR::qpP"]
        [::core::mem::offset_of!(VkVideoEncodeH264QpKHR, qpP) - 4usize];
    ["Offset of field: VkVideoEncodeH264QpKHR::qpB"]
        [::core::mem::offset_of!(VkVideoEncodeH264QpKHR, qpB) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeH264QualityLevelPropertiesKHR"]
        [::core::mem::size_of::<VkVideoEncodeH264QualityLevelPropertiesKHR>() - 52usize];
    ["Alignment of VkVideoEncodeH264QualityLevelPropertiesKHR"]
        [::core::mem::align_of::<VkVideoEncodeH264QualityLevelPropertiesKHR>() - 4usize];
    ["Offset of field: VkVideoEncodeH264QualityLevelPropertiesKHR::sType"]
        [::core::mem::offset_of!(VkVideoEncodeH264QualityLevelPropertiesKHR, sType) - 0usize];
    ["Offset of field: VkVideoEncodeH264QualityLevelPropertiesKHR::pNext"]
        [::core::mem::offset_of!(VkVideoEncodeH264QualityLevelPropertiesKHR, pNext) - 4usize];
    ["Offset of field: VkVideoEncodeH264QualityLevelPropertiesKHR::preferredRateControlFlags"][::core::mem::offset_of!(
        VkVideoEncodeH264QualityLevelPropertiesKHR,
        preferredRateControlFlags
    )
        - 8usize];
    ["Offset of field: VkVideoEncodeH264QualityLevelPropertiesKHR::preferredGopFrameCount"][::core::mem::offset_of!(
        VkVideoEncodeH264QualityLevelPropertiesKHR,
        preferredGopFrameCount
    )
        - 12usize];
    ["Offset of field: VkVideoEncodeH264QualityLevelPropertiesKHR::preferredIdrPeriod"][::core::mem::offset_of!(
        VkVideoEncodeH264QualityLevelPropertiesKHR,
        preferredIdrPeriod
    )
        - 16usize];
    ["Offset of field: VkVideoEncodeH264QualityLevelPropertiesKHR::preferredConsecutiveBFrameCount"] [:: core :: mem :: offset_of ! (VkVideoEncodeH264QualityLevelPropertiesKHR , preferredConsecutiveBFrameCount) - 20usize] ;
    ["Offset of field: VkVideoEncodeH264QualityLevelPropertiesKHR::preferredTemporalLayerCount"][::core::mem::offset_of!(
        VkVideoEncodeH264QualityLevelPropertiesKHR,
        preferredTemporalLayerCount
    )
        - 24usize];
    ["Offset of field: VkVideoEncodeH264QualityLevelPropertiesKHR::preferredConstantQp"][::core::mem::offset_of!(
        VkVideoEncodeH264QualityLevelPropertiesKHR,
        preferredConstantQp
    )
        - 28usize];
    ["Offset of field: VkVideoEncodeH264QualityLevelPropertiesKHR::preferredMaxL0ReferenceCount"][::core::mem::offset_of!(
        VkVideoEncodeH264QualityLevelPropertiesKHR,
        preferredMaxL0ReferenceCount
    )
        - 40usize];
    ["Offset of field: VkVideoEncodeH264QualityLevelPropertiesKHR::preferredMaxL1ReferenceCount"][::core::mem::offset_of!(
        VkVideoEncodeH264QualityLevelPropertiesKHR,
        preferredMaxL1ReferenceCount
    )
        - 44usize];
    ["Offset of field: VkVideoEncodeH264QualityLevelPropertiesKHR::preferredStdEntropyCodingModeFlag"] [:: core :: mem :: offset_of ! (VkVideoEncodeH264QualityLevelPropertiesKHR , preferredStdEntropyCodingModeFlag) - 48usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeH264SessionCreateInfoKHR"]
        [::core::mem::size_of::<VkVideoEncodeH264SessionCreateInfoKHR>() - 16usize];
    ["Alignment of VkVideoEncodeH264SessionCreateInfoKHR"]
        [::core::mem::align_of::<VkVideoEncodeH264SessionCreateInfoKHR>() - 4usize];
    ["Offset of field: VkVideoEncodeH264SessionCreateInfoKHR::sType"]
        [::core::mem::offset_of!(VkVideoEncodeH264SessionCreateInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoEncodeH264SessionCreateInfoKHR::pNext"]
        [::core::mem::offset_of!(VkVideoEncodeH264SessionCreateInfoKHR, pNext) - 4usize];
    ["Offset of field: VkVideoEncodeH264SessionCreateInfoKHR::useMaxLevelIdc"]
        [::core::mem::offset_of!(VkVideoEncodeH264SessionCreateInfoKHR, useMaxLevelIdc) - 8usize];
    ["Offset of field: VkVideoEncodeH264SessionCreateInfoKHR::maxLevelIdc"]
        [::core::mem::offset_of!(VkVideoEncodeH264SessionCreateInfoKHR, maxLevelIdc) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeH264SessionParametersAddInfoKHR"]
        [::core::mem::size_of::<VkVideoEncodeH264SessionParametersAddInfoKHR>() - 24usize];
    ["Alignment of VkVideoEncodeH264SessionParametersAddInfoKHR"]
        [::core::mem::align_of::<VkVideoEncodeH264SessionParametersAddInfoKHR>() - 4usize];
    ["Offset of field: VkVideoEncodeH264SessionParametersAddInfoKHR::sType"]
        [::core::mem::offset_of!(VkVideoEncodeH264SessionParametersAddInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoEncodeH264SessionParametersAddInfoKHR::pNext"]
        [::core::mem::offset_of!(VkVideoEncodeH264SessionParametersAddInfoKHR, pNext) - 4usize];
    ["Offset of field: VkVideoEncodeH264SessionParametersAddInfoKHR::stdSPSCount"][::core::mem::offset_of!(
        VkVideoEncodeH264SessionParametersAddInfoKHR,
        stdSPSCount
    ) - 8usize];
    ["Offset of field: VkVideoEncodeH264SessionParametersAddInfoKHR::pStdSPSs"]
        [::core::mem::offset_of!(VkVideoEncodeH264SessionParametersAddInfoKHR, pStdSPSs) - 12usize];
    ["Offset of field: VkVideoEncodeH264SessionParametersAddInfoKHR::stdPPSCount"][::core::mem::offset_of!(
        VkVideoEncodeH264SessionParametersAddInfoKHR,
        stdPPSCount
    ) - 16usize];
    ["Offset of field: VkVideoEncodeH264SessionParametersAddInfoKHR::pStdPPSs"]
        [::core::mem::offset_of!(VkVideoEncodeH264SessionParametersAddInfoKHR, pStdPPSs) - 20usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeH264SessionParametersCreateInfoKHR"]
        [::core::mem::size_of::<VkVideoEncodeH264SessionParametersCreateInfoKHR>() - 20usize];
    ["Alignment of VkVideoEncodeH264SessionParametersCreateInfoKHR"]
        [::core::mem::align_of::<VkVideoEncodeH264SessionParametersCreateInfoKHR>() - 4usize];
    ["Offset of field: VkVideoEncodeH264SessionParametersCreateInfoKHR::sType"]
        [::core::mem::offset_of!(VkVideoEncodeH264SessionParametersCreateInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoEncodeH264SessionParametersCreateInfoKHR::pNext"]
        [::core::mem::offset_of!(VkVideoEncodeH264SessionParametersCreateInfoKHR, pNext) - 4usize];
    ["Offset of field: VkVideoEncodeH264SessionParametersCreateInfoKHR::maxStdSPSCount"][::core::mem::offset_of!(
        VkVideoEncodeH264SessionParametersCreateInfoKHR,
        maxStdSPSCount
    )
        - 8usize];
    ["Offset of field: VkVideoEncodeH264SessionParametersCreateInfoKHR::maxStdPPSCount"][::core::mem::offset_of!(
        VkVideoEncodeH264SessionParametersCreateInfoKHR,
        maxStdPPSCount
    )
        - 12usize];
    ["Offset of field: VkVideoEncodeH264SessionParametersCreateInfoKHR::pParametersAddInfo"][::core::mem::offset_of!(
        VkVideoEncodeH264SessionParametersCreateInfoKHR,
        pParametersAddInfo
    )
        - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeH264SessionParametersGetInfoKHR"]
        [::core::mem::size_of::<VkVideoEncodeH264SessionParametersGetInfoKHR>() - 24usize];
    ["Alignment of VkVideoEncodeH264SessionParametersGetInfoKHR"]
        [::core::mem::align_of::<VkVideoEncodeH264SessionParametersGetInfoKHR>() - 4usize];
    ["Offset of field: VkVideoEncodeH264SessionParametersGetInfoKHR::sType"]
        [::core::mem::offset_of!(VkVideoEncodeH264SessionParametersGetInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoEncodeH264SessionParametersGetInfoKHR::pNext"]
        [::core::mem::offset_of!(VkVideoEncodeH264SessionParametersGetInfoKHR, pNext) - 4usize];
    ["Offset of field: VkVideoEncodeH264SessionParametersGetInfoKHR::writeStdSPS"][::core::mem::offset_of!(
        VkVideoEncodeH264SessionParametersGetInfoKHR,
        writeStdSPS
    ) - 8usize];
    ["Offset of field: VkVideoEncodeH264SessionParametersGetInfoKHR::writeStdPPS"][::core::mem::offset_of!(
        VkVideoEncodeH264SessionParametersGetInfoKHR,
        writeStdPPS
    ) - 12usize];
    ["Offset of field: VkVideoEncodeH264SessionParametersGetInfoKHR::stdSPSId"]
        [::core::mem::offset_of!(VkVideoEncodeH264SessionParametersGetInfoKHR, stdSPSId) - 16usize];
    ["Offset of field: VkVideoEncodeH264SessionParametersGetInfoKHR::stdPPSId"]
        [::core::mem::offset_of!(VkVideoEncodeH264SessionParametersGetInfoKHR, stdPPSId) - 20usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeH264SessionParametersFeedbackInfoKHR"]
        [::core::mem::size_of::<VkVideoEncodeH264SessionParametersFeedbackInfoKHR>() - 16usize];
    ["Alignment of VkVideoEncodeH264SessionParametersFeedbackInfoKHR"]
        [::core::mem::align_of::<VkVideoEncodeH264SessionParametersFeedbackInfoKHR>() - 4usize];
    ["Offset of field: VkVideoEncodeH264SessionParametersFeedbackInfoKHR::sType"][::core::mem::offset_of!(
        VkVideoEncodeH264SessionParametersFeedbackInfoKHR,
        sType
    ) - 0usize];
    ["Offset of field: VkVideoEncodeH264SessionParametersFeedbackInfoKHR::pNext"][::core::mem::offset_of!(
        VkVideoEncodeH264SessionParametersFeedbackInfoKHR,
        pNext
    ) - 4usize];
    ["Offset of field: VkVideoEncodeH264SessionParametersFeedbackInfoKHR::hasStdSPSOverrides"][::core::mem::offset_of!(
        VkVideoEncodeH264SessionParametersFeedbackInfoKHR,
        hasStdSPSOverrides
    )
        - 8usize];
    ["Offset of field: VkVideoEncodeH264SessionParametersFeedbackInfoKHR::hasStdPPSOverrides"][::core::mem::offset_of!(
        VkVideoEncodeH264SessionParametersFeedbackInfoKHR,
        hasStdPPSOverrides
    )
        - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeH264NaluSliceInfoKHR"]
        [::core::mem::size_of::<VkVideoEncodeH264NaluSliceInfoKHR>() - 16usize];
    ["Alignment of VkVideoEncodeH264NaluSliceInfoKHR"]
        [::core::mem::align_of::<VkVideoEncodeH264NaluSliceInfoKHR>() - 4usize];
    ["Offset of field: VkVideoEncodeH264NaluSliceInfoKHR::sType"]
        [::core::mem::offset_of!(VkVideoEncodeH264NaluSliceInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoEncodeH264NaluSliceInfoKHR::pNext"]
        [::core::mem::offset_of!(VkVideoEncodeH264NaluSliceInfoKHR, pNext) - 4usize];
    ["Offset of field: VkVideoEncodeH264NaluSliceInfoKHR::constantQp"]
        [::core::mem::offset_of!(VkVideoEncodeH264NaluSliceInfoKHR, constantQp) - 8usize];
    ["Offset of field: VkVideoEncodeH264NaluSliceInfoKHR::pStdSliceHeader"]
        [::core::mem::offset_of!(VkVideoEncodeH264NaluSliceInfoKHR, pStdSliceHeader) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeH264PictureInfoKHR"]
        [::core::mem::size_of::<VkVideoEncodeH264PictureInfoKHR>() - 24usize];
    ["Alignment of VkVideoEncodeH264PictureInfoKHR"]
        [::core::mem::align_of::<VkVideoEncodeH264PictureInfoKHR>() - 4usize];
    ["Offset of field: VkVideoEncodeH264PictureInfoKHR::sType"]
        [::core::mem::offset_of!(VkVideoEncodeH264PictureInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoEncodeH264PictureInfoKHR::pNext"]
        [::core::mem::offset_of!(VkVideoEncodeH264PictureInfoKHR, pNext) - 4usize];
    ["Offset of field: VkVideoEncodeH264PictureInfoKHR::naluSliceEntryCount"]
        [::core::mem::offset_of!(VkVideoEncodeH264PictureInfoKHR, naluSliceEntryCount) - 8usize];
    ["Offset of field: VkVideoEncodeH264PictureInfoKHR::pNaluSliceEntries"]
        [::core::mem::offset_of!(VkVideoEncodeH264PictureInfoKHR, pNaluSliceEntries) - 12usize];
    ["Offset of field: VkVideoEncodeH264PictureInfoKHR::pStdPictureInfo"]
        [::core::mem::offset_of!(VkVideoEncodeH264PictureInfoKHR, pStdPictureInfo) - 16usize];
    ["Offset of field: VkVideoEncodeH264PictureInfoKHR::generatePrefixNalu"]
        [::core::mem::offset_of!(VkVideoEncodeH264PictureInfoKHR, generatePrefixNalu) - 20usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeH264DpbSlotInfoKHR"]
        [::core::mem::size_of::<VkVideoEncodeH264DpbSlotInfoKHR>() - 12usize];
    ["Alignment of VkVideoEncodeH264DpbSlotInfoKHR"]
        [::core::mem::align_of::<VkVideoEncodeH264DpbSlotInfoKHR>() - 4usize];
    ["Offset of field: VkVideoEncodeH264DpbSlotInfoKHR::sType"]
        [::core::mem::offset_of!(VkVideoEncodeH264DpbSlotInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoEncodeH264DpbSlotInfoKHR::pNext"]
        [::core::mem::offset_of!(VkVideoEncodeH264DpbSlotInfoKHR, pNext) - 4usize];
    ["Offset of field: VkVideoEncodeH264DpbSlotInfoKHR::pStdReferenceInfo"]
        [::core::mem::offset_of!(VkVideoEncodeH264DpbSlotInfoKHR, pStdReferenceInfo) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeH264ProfileInfoKHR"]
        [::core::mem::size_of::<VkVideoEncodeH264ProfileInfoKHR>() - 12usize];
    ["Alignment of VkVideoEncodeH264ProfileInfoKHR"]
        [::core::mem::align_of::<VkVideoEncodeH264ProfileInfoKHR>() - 4usize];
    ["Offset of field: VkVideoEncodeH264ProfileInfoKHR::sType"]
        [::core::mem::offset_of!(VkVideoEncodeH264ProfileInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoEncodeH264ProfileInfoKHR::pNext"]
        [::core::mem::offset_of!(VkVideoEncodeH264ProfileInfoKHR, pNext) - 4usize];
    ["Offset of field: VkVideoEncodeH264ProfileInfoKHR::stdProfileIdc"]
        [::core::mem::offset_of!(VkVideoEncodeH264ProfileInfoKHR, stdProfileIdc) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeH264RateControlInfoKHR"]
        [::core::mem::size_of::<VkVideoEncodeH264RateControlInfoKHR>() - 28usize];
    ["Alignment of VkVideoEncodeH264RateControlInfoKHR"]
        [::core::mem::align_of::<VkVideoEncodeH264RateControlInfoKHR>() - 4usize];
    ["Offset of field: VkVideoEncodeH264RateControlInfoKHR::sType"]
        [::core::mem::offset_of!(VkVideoEncodeH264RateControlInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoEncodeH264RateControlInfoKHR::pNext"]
        [::core::mem::offset_of!(VkVideoEncodeH264RateControlInfoKHR, pNext) - 4usize];
    ["Offset of field: VkVideoEncodeH264RateControlInfoKHR::flags"]
        [::core::mem::offset_of!(VkVideoEncodeH264RateControlInfoKHR, flags) - 8usize];
    ["Offset of field: VkVideoEncodeH264RateControlInfoKHR::gopFrameCount"]
        [::core::mem::offset_of!(VkVideoEncodeH264RateControlInfoKHR, gopFrameCount) - 12usize];
    ["Offset of field: VkVideoEncodeH264RateControlInfoKHR::idrPeriod"]
        [::core::mem::offset_of!(VkVideoEncodeH264RateControlInfoKHR, idrPeriod) - 16usize];
    ["Offset of field: VkVideoEncodeH264RateControlInfoKHR::consecutiveBFrameCount"][::core::mem::offset_of!(
        VkVideoEncodeH264RateControlInfoKHR,
        consecutiveBFrameCount
    ) - 20usize];
    ["Offset of field: VkVideoEncodeH264RateControlInfoKHR::temporalLayerCount"][::core::mem::offset_of!(
        VkVideoEncodeH264RateControlInfoKHR,
        temporalLayerCount
    ) - 24usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeH264FrameSizeKHR"]
        [::core::mem::size_of::<VkVideoEncodeH264FrameSizeKHR>() - 12usize];
    ["Alignment of VkVideoEncodeH264FrameSizeKHR"]
        [::core::mem::align_of::<VkVideoEncodeH264FrameSizeKHR>() - 4usize];
    ["Offset of field: VkVideoEncodeH264FrameSizeKHR::frameISize"]
        [::core::mem::offset_of!(VkVideoEncodeH264FrameSizeKHR, frameISize) - 0usize];
    ["Offset of field: VkVideoEncodeH264FrameSizeKHR::framePSize"]
        [::core::mem::offset_of!(VkVideoEncodeH264FrameSizeKHR, framePSize) - 4usize];
    ["Offset of field: VkVideoEncodeH264FrameSizeKHR::frameBSize"]
        [::core::mem::offset_of!(VkVideoEncodeH264FrameSizeKHR, frameBSize) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeH264RateControlLayerInfoKHR"]
        [::core::mem::size_of::<VkVideoEncodeH264RateControlLayerInfoKHR>() - 56usize];
    ["Alignment of VkVideoEncodeH264RateControlLayerInfoKHR"]
        [::core::mem::align_of::<VkVideoEncodeH264RateControlLayerInfoKHR>() - 4usize];
    ["Offset of field: VkVideoEncodeH264RateControlLayerInfoKHR::sType"]
        [::core::mem::offset_of!(VkVideoEncodeH264RateControlLayerInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoEncodeH264RateControlLayerInfoKHR::pNext"]
        [::core::mem::offset_of!(VkVideoEncodeH264RateControlLayerInfoKHR, pNext) - 4usize];
    ["Offset of field: VkVideoEncodeH264RateControlLayerInfoKHR::useMinQp"]
        [::core::mem::offset_of!(VkVideoEncodeH264RateControlLayerInfoKHR, useMinQp) - 8usize];
    ["Offset of field: VkVideoEncodeH264RateControlLayerInfoKHR::minQp"]
        [::core::mem::offset_of!(VkVideoEncodeH264RateControlLayerInfoKHR, minQp) - 12usize];
    ["Offset of field: VkVideoEncodeH264RateControlLayerInfoKHR::useMaxQp"]
        [::core::mem::offset_of!(VkVideoEncodeH264RateControlLayerInfoKHR, useMaxQp) - 24usize];
    ["Offset of field: VkVideoEncodeH264RateControlLayerInfoKHR::maxQp"]
        [::core::mem::offset_of!(VkVideoEncodeH264RateControlLayerInfoKHR, maxQp) - 28usize];
    ["Offset of field: VkVideoEncodeH264RateControlLayerInfoKHR::useMaxFrameSize"][::core::mem::offset_of!(
        VkVideoEncodeH264RateControlLayerInfoKHR,
        useMaxFrameSize
    ) - 40usize];
    ["Offset of field: VkVideoEncodeH264RateControlLayerInfoKHR::maxFrameSize"]
        [::core::mem::offset_of!(VkVideoEncodeH264RateControlLayerInfoKHR, maxFrameSize) - 44usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeH264GopRemainingFrameInfoKHR"]
        [::core::mem::size_of::<VkVideoEncodeH264GopRemainingFrameInfoKHR>() - 24usize];
    ["Alignment of VkVideoEncodeH264GopRemainingFrameInfoKHR"]
        [::core::mem::align_of::<VkVideoEncodeH264GopRemainingFrameInfoKHR>() - 4usize];
    ["Offset of field: VkVideoEncodeH264GopRemainingFrameInfoKHR::sType"]
        [::core::mem::offset_of!(VkVideoEncodeH264GopRemainingFrameInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoEncodeH264GopRemainingFrameInfoKHR::pNext"]
        [::core::mem::offset_of!(VkVideoEncodeH264GopRemainingFrameInfoKHR, pNext) - 4usize];
    ["Offset of field: VkVideoEncodeH264GopRemainingFrameInfoKHR::useGopRemainingFrames"][::core::mem::offset_of!(
        VkVideoEncodeH264GopRemainingFrameInfoKHR,
        useGopRemainingFrames
    )
        - 8usize];
    ["Offset of field: VkVideoEncodeH264GopRemainingFrameInfoKHR::gopRemainingI"][::core::mem::offset_of!(
        VkVideoEncodeH264GopRemainingFrameInfoKHR,
        gopRemainingI
    ) - 12usize];
    ["Offset of field: VkVideoEncodeH264GopRemainingFrameInfoKHR::gopRemainingP"][::core::mem::offset_of!(
        VkVideoEncodeH264GopRemainingFrameInfoKHR,
        gopRemainingP
    ) - 16usize];
    ["Offset of field: VkVideoEncodeH264GopRemainingFrameInfoKHR::gopRemainingB"][::core::mem::offset_of!(
        VkVideoEncodeH264GopRemainingFrameInfoKHR,
        gopRemainingB
    ) - 20usize];
};
pub const StdVideoH265ChromaFormatIdc_STD_VIDEO_H265_CHROMA_FORMAT_IDC_MONOCHROME:
    StdVideoH265ChromaFormatIdc = 0;
pub const StdVideoH265ChromaFormatIdc_STD_VIDEO_H265_CHROMA_FORMAT_IDC_420:
    StdVideoH265ChromaFormatIdc = 1;
pub const StdVideoH265ChromaFormatIdc_STD_VIDEO_H265_CHROMA_FORMAT_IDC_422:
    StdVideoH265ChromaFormatIdc = 2;
pub const StdVideoH265ChromaFormatIdc_STD_VIDEO_H265_CHROMA_FORMAT_IDC_444:
    StdVideoH265ChromaFormatIdc = 3;
pub const StdVideoH265ChromaFormatIdc_STD_VIDEO_H265_CHROMA_FORMAT_IDC_INVALID:
    StdVideoH265ChromaFormatIdc = 2147483647;
pub const StdVideoH265ChromaFormatIdc_STD_VIDEO_H265_CHROMA_FORMAT_IDC_MAX_ENUM:
    StdVideoH265ChromaFormatIdc = 2147483647;
pub const StdVideoH265ProfileIdc_STD_VIDEO_H265_PROFILE_IDC_MAIN: StdVideoH265ProfileIdc = 1;
pub const StdVideoH265ProfileIdc_STD_VIDEO_H265_PROFILE_IDC_MAIN_10: StdVideoH265ProfileIdc = 2;
pub const StdVideoH265ProfileIdc_STD_VIDEO_H265_PROFILE_IDC_MAIN_STILL_PICTURE:
    StdVideoH265ProfileIdc = 3;
pub const StdVideoH265ProfileIdc_STD_VIDEO_H265_PROFILE_IDC_FORMAT_RANGE_EXTENSIONS:
    StdVideoH265ProfileIdc = 4;
pub const StdVideoH265ProfileIdc_STD_VIDEO_H265_PROFILE_IDC_SCC_EXTENSIONS: StdVideoH265ProfileIdc =
    9;
pub const StdVideoH265ProfileIdc_STD_VIDEO_H265_PROFILE_IDC_INVALID: StdVideoH265ProfileIdc =
    2147483647;
pub const StdVideoH265ProfileIdc_STD_VIDEO_H265_PROFILE_IDC_MAX_ENUM: StdVideoH265ProfileIdc =
    2147483647;
pub const StdVideoH265LevelIdc_STD_VIDEO_H265_LEVEL_IDC_1_0: StdVideoH265LevelIdc = 0;
pub const StdVideoH265LevelIdc_STD_VIDEO_H265_LEVEL_IDC_2_0: StdVideoH265LevelIdc = 1;
pub const StdVideoH265LevelIdc_STD_VIDEO_H265_LEVEL_IDC_2_1: StdVideoH265LevelIdc = 2;
pub const StdVideoH265LevelIdc_STD_VIDEO_H265_LEVEL_IDC_3_0: StdVideoH265LevelIdc = 3;
pub const StdVideoH265LevelIdc_STD_VIDEO_H265_LEVEL_IDC_3_1: StdVideoH265LevelIdc = 4;
pub const StdVideoH265LevelIdc_STD_VIDEO_H265_LEVEL_IDC_4_0: StdVideoH265LevelIdc = 5;
pub const StdVideoH265LevelIdc_STD_VIDEO_H265_LEVEL_IDC_4_1: StdVideoH265LevelIdc = 6;
pub const StdVideoH265LevelIdc_STD_VIDEO_H265_LEVEL_IDC_5_0: StdVideoH265LevelIdc = 7;
pub const StdVideoH265LevelIdc_STD_VIDEO_H265_LEVEL_IDC_5_1: StdVideoH265LevelIdc = 8;
pub const StdVideoH265LevelIdc_STD_VIDEO_H265_LEVEL_IDC_5_2: StdVideoH265LevelIdc = 9;
pub const StdVideoH265LevelIdc_STD_VIDEO_H265_LEVEL_IDC_6_0: StdVideoH265LevelIdc = 10;
pub const StdVideoH265LevelIdc_STD_VIDEO_H265_LEVEL_IDC_6_1: StdVideoH265LevelIdc = 11;
pub const StdVideoH265LevelIdc_STD_VIDEO_H265_LEVEL_IDC_6_2: StdVideoH265LevelIdc = 12;
pub const StdVideoH265LevelIdc_STD_VIDEO_H265_LEVEL_IDC_INVALID: StdVideoH265LevelIdc = 2147483647;
pub const StdVideoH265LevelIdc_STD_VIDEO_H265_LEVEL_IDC_MAX_ENUM: StdVideoH265LevelIdc = 2147483647;
pub const StdVideoH265SliceType_STD_VIDEO_H265_SLICE_TYPE_B: StdVideoH265SliceType = 0;
pub const StdVideoH265SliceType_STD_VIDEO_H265_SLICE_TYPE_P: StdVideoH265SliceType = 1;
pub const StdVideoH265SliceType_STD_VIDEO_H265_SLICE_TYPE_I: StdVideoH265SliceType = 2;
pub const StdVideoH265SliceType_STD_VIDEO_H265_SLICE_TYPE_INVALID: StdVideoH265SliceType =
    2147483647;
pub const StdVideoH265SliceType_STD_VIDEO_H265_SLICE_TYPE_MAX_ENUM: StdVideoH265SliceType =
    2147483647;
pub const StdVideoH265PictureType_STD_VIDEO_H265_PICTURE_TYPE_P: StdVideoH265PictureType = 0;
pub const StdVideoH265PictureType_STD_VIDEO_H265_PICTURE_TYPE_B: StdVideoH265PictureType = 1;
pub const StdVideoH265PictureType_STD_VIDEO_H265_PICTURE_TYPE_I: StdVideoH265PictureType = 2;
pub const StdVideoH265PictureType_STD_VIDEO_H265_PICTURE_TYPE_IDR: StdVideoH265PictureType = 3;
pub const StdVideoH265PictureType_STD_VIDEO_H265_PICTURE_TYPE_INVALID: StdVideoH265PictureType =
    2147483647;
pub const StdVideoH265PictureType_STD_VIDEO_H265_PICTURE_TYPE_MAX_ENUM: StdVideoH265PictureType =
    2147483647;
pub const StdVideoH265AspectRatioIdc_STD_VIDEO_H265_ASPECT_RATIO_IDC_UNSPECIFIED:
    StdVideoH265AspectRatioIdc = 0;
pub const StdVideoH265AspectRatioIdc_STD_VIDEO_H265_ASPECT_RATIO_IDC_SQUARE:
    StdVideoH265AspectRatioIdc = 1;
pub const StdVideoH265AspectRatioIdc_STD_VIDEO_H265_ASPECT_RATIO_IDC_12_11:
    StdVideoH265AspectRatioIdc = 2;
pub const StdVideoH265AspectRatioIdc_STD_VIDEO_H265_ASPECT_RATIO_IDC_10_11:
    StdVideoH265AspectRatioIdc = 3;
pub const StdVideoH265AspectRatioIdc_STD_VIDEO_H265_ASPECT_RATIO_IDC_16_11:
    StdVideoH265AspectRatioIdc = 4;
pub const StdVideoH265AspectRatioIdc_STD_VIDEO_H265_ASPECT_RATIO_IDC_40_33:
    StdVideoH265AspectRatioIdc = 5;
pub const StdVideoH265AspectRatioIdc_STD_VIDEO_H265_ASPECT_RATIO_IDC_24_11:
    StdVideoH265AspectRatioIdc = 6;
pub const StdVideoH265AspectRatioIdc_STD_VIDEO_H265_ASPECT_RATIO_IDC_20_11:
    StdVideoH265AspectRatioIdc = 7;
pub const StdVideoH265AspectRatioIdc_STD_VIDEO_H265_ASPECT_RATIO_IDC_32_11:
    StdVideoH265AspectRatioIdc = 8;
pub const StdVideoH265AspectRatioIdc_STD_VIDEO_H265_ASPECT_RATIO_IDC_80_33:
    StdVideoH265AspectRatioIdc = 9;
pub const StdVideoH265AspectRatioIdc_STD_VIDEO_H265_ASPECT_RATIO_IDC_18_11:
    StdVideoH265AspectRatioIdc = 10;
pub const StdVideoH265AspectRatioIdc_STD_VIDEO_H265_ASPECT_RATIO_IDC_15_11:
    StdVideoH265AspectRatioIdc = 11;
pub const StdVideoH265AspectRatioIdc_STD_VIDEO_H265_ASPECT_RATIO_IDC_64_33:
    StdVideoH265AspectRatioIdc = 12;
pub const StdVideoH265AspectRatioIdc_STD_VIDEO_H265_ASPECT_RATIO_IDC_160_99:
    StdVideoH265AspectRatioIdc = 13;
pub const StdVideoH265AspectRatioIdc_STD_VIDEO_H265_ASPECT_RATIO_IDC_4_3:
    StdVideoH265AspectRatioIdc = 14;
pub const StdVideoH265AspectRatioIdc_STD_VIDEO_H265_ASPECT_RATIO_IDC_3_2:
    StdVideoH265AspectRatioIdc = 15;
pub const StdVideoH265AspectRatioIdc_STD_VIDEO_H265_ASPECT_RATIO_IDC_2_1:
    StdVideoH265AspectRatioIdc = 16;
pub const StdVideoH265AspectRatioIdc_STD_VIDEO_H265_ASPECT_RATIO_IDC_EXTENDED_SAR:
    StdVideoH265AspectRatioIdc = 255;
pub const StdVideoH265AspectRatioIdc_STD_VIDEO_H265_ASPECT_RATIO_IDC_INVALID:
    StdVideoH265AspectRatioIdc = 2147483647;
pub const StdVideoH265AspectRatioIdc_STD_VIDEO_H265_ASPECT_RATIO_IDC_MAX_ENUM:
    StdVideoH265AspectRatioIdc = 2147483647;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoH265DecPicBufMgr"]
        [::core::mem::size_of::<StdVideoH265DecPicBufMgr>() - 44usize];
    ["Alignment of StdVideoH265DecPicBufMgr"]
        [::core::mem::align_of::<StdVideoH265DecPicBufMgr>() - 4usize];
    ["Offset of field: StdVideoH265DecPicBufMgr::max_latency_increase_plus1"]
        [::core::mem::offset_of!(StdVideoH265DecPicBufMgr, max_latency_increase_plus1) - 0usize];
    ["Offset of field: StdVideoH265DecPicBufMgr::max_dec_pic_buffering_minus1"]
        [::core::mem::offset_of!(StdVideoH265DecPicBufMgr, max_dec_pic_buffering_minus1) - 28usize];
    ["Offset of field: StdVideoH265DecPicBufMgr::max_num_reorder_pics"]
        [::core::mem::offset_of!(StdVideoH265DecPicBufMgr, max_num_reorder_pics) - 35usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoH265SubLayerHrdParameters"]
        [::core::mem::size_of::<StdVideoH265SubLayerHrdParameters>() - 516usize];
    ["Alignment of StdVideoH265SubLayerHrdParameters"]
        [::core::mem::align_of::<StdVideoH265SubLayerHrdParameters>() - 4usize];
    ["Offset of field: StdVideoH265SubLayerHrdParameters::bit_rate_value_minus1"][::core::mem::offset_of!(
        StdVideoH265SubLayerHrdParameters,
        bit_rate_value_minus1
    ) - 0usize];
    ["Offset of field: StdVideoH265SubLayerHrdParameters::cpb_size_value_minus1"][::core::mem::offset_of!(
        StdVideoH265SubLayerHrdParameters,
        cpb_size_value_minus1
    ) - 128usize];
    ["Offset of field: StdVideoH265SubLayerHrdParameters::cpb_size_du_value_minus1"][::core::mem::offset_of!(
        StdVideoH265SubLayerHrdParameters,
        cpb_size_du_value_minus1
    ) - 256usize];
    ["Offset of field: StdVideoH265SubLayerHrdParameters::bit_rate_du_value_minus1"][::core::mem::offset_of!(
        StdVideoH265SubLayerHrdParameters,
        bit_rate_du_value_minus1
    ) - 384usize];
    ["Offset of field: StdVideoH265SubLayerHrdParameters::cbr_flag"]
        [::core::mem::offset_of!(StdVideoH265SubLayerHrdParameters, cbr_flag) - 512usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoH265HrdFlags"][::core::mem::size_of::<StdVideoH265HrdFlags>() - 4usize];
    ["Alignment of StdVideoH265HrdFlags"][::core::mem::align_of::<StdVideoH265HrdFlags>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoH265HrdParameters"]
        [::core::mem::size_of::<StdVideoH265HrdParameters>() - 48usize];
    ["Alignment of StdVideoH265HrdParameters"]
        [::core::mem::align_of::<StdVideoH265HrdParameters>() - 4usize];
    ["Offset of field: StdVideoH265HrdParameters::flags"]
        [::core::mem::offset_of!(StdVideoH265HrdParameters, flags) - 0usize];
    ["Offset of field: StdVideoH265HrdParameters::tick_divisor_minus2"]
        [::core::mem::offset_of!(StdVideoH265HrdParameters, tick_divisor_minus2) - 4usize];
    ["Offset of field: StdVideoH265HrdParameters::du_cpb_removal_delay_increment_length_minus1"][::core::mem::offset_of!(
        StdVideoH265HrdParameters,
        du_cpb_removal_delay_increment_length_minus1
    )
        - 5usize];
    ["Offset of field: StdVideoH265HrdParameters::dpb_output_delay_du_length_minus1"][::core::mem::offset_of!(
        StdVideoH265HrdParameters,
        dpb_output_delay_du_length_minus1
    ) - 6usize];
    ["Offset of field: StdVideoH265HrdParameters::bit_rate_scale"]
        [::core::mem::offset_of!(StdVideoH265HrdParameters, bit_rate_scale) - 7usize];
    ["Offset of field: StdVideoH265HrdParameters::cpb_size_scale"]
        [::core::mem::offset_of!(StdVideoH265HrdParameters, cpb_size_scale) - 8usize];
    ["Offset of field: StdVideoH265HrdParameters::cpb_size_du_scale"]
        [::core::mem::offset_of!(StdVideoH265HrdParameters, cpb_size_du_scale) - 9usize];
    ["Offset of field: StdVideoH265HrdParameters::initial_cpb_removal_delay_length_minus1"][::core::mem::offset_of!(
        StdVideoH265HrdParameters,
        initial_cpb_removal_delay_length_minus1
    )
        - 10usize];
    ["Offset of field: StdVideoH265HrdParameters::au_cpb_removal_delay_length_minus1"][::core::mem::offset_of!(
        StdVideoH265HrdParameters,
        au_cpb_removal_delay_length_minus1
    ) - 11usize];
    ["Offset of field: StdVideoH265HrdParameters::dpb_output_delay_length_minus1"][::core::mem::offset_of!(
        StdVideoH265HrdParameters,
        dpb_output_delay_length_minus1
    ) - 12usize];
    ["Offset of field: StdVideoH265HrdParameters::cpb_cnt_minus1"]
        [::core::mem::offset_of!(StdVideoH265HrdParameters, cpb_cnt_minus1) - 13usize];
    ["Offset of field: StdVideoH265HrdParameters::elemental_duration_in_tc_minus1"][::core::mem::offset_of!(
        StdVideoH265HrdParameters,
        elemental_duration_in_tc_minus1
    ) - 20usize];
    ["Offset of field: StdVideoH265HrdParameters::reserved"]
        [::core::mem::offset_of!(StdVideoH265HrdParameters, reserved) - 34usize];
    ["Offset of field: StdVideoH265HrdParameters::pSubLayerHrdParametersNal"]
        [::core::mem::offset_of!(StdVideoH265HrdParameters, pSubLayerHrdParametersNal) - 40usize];
    ["Offset of field: StdVideoH265HrdParameters::pSubLayerHrdParametersVcl"]
        [::core::mem::offset_of!(StdVideoH265HrdParameters, pSubLayerHrdParametersVcl) - 44usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoH265VpsFlags"][::core::mem::size_of::<StdVideoH265VpsFlags>() - 4usize];
    ["Alignment of StdVideoH265VpsFlags"][::core::mem::align_of::<StdVideoH265VpsFlags>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoH265ProfileTierLevelFlags"]
        [::core::mem::size_of::<StdVideoH265ProfileTierLevelFlags>() - 4usize];
    ["Alignment of StdVideoH265ProfileTierLevelFlags"]
        [::core::mem::align_of::<StdVideoH265ProfileTierLevelFlags>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoH265ProfileTierLevel"]
        [::core::mem::size_of::<StdVideoH265ProfileTierLevel>() - 12usize];
    ["Alignment of StdVideoH265ProfileTierLevel"]
        [::core::mem::align_of::<StdVideoH265ProfileTierLevel>() - 4usize];
    ["Offset of field: StdVideoH265ProfileTierLevel::flags"]
        [::core::mem::offset_of!(StdVideoH265ProfileTierLevel, flags) - 0usize];
    ["Offset of field: StdVideoH265ProfileTierLevel::general_profile_idc"]
        [::core::mem::offset_of!(StdVideoH265ProfileTierLevel, general_profile_idc) - 4usize];
    ["Offset of field: StdVideoH265ProfileTierLevel::general_level_idc"]
        [::core::mem::offset_of!(StdVideoH265ProfileTierLevel, general_level_idc) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoH265VideoParameterSet"]
        [::core::mem::size_of::<StdVideoH265VideoParameterSet>() - 36usize];
    ["Alignment of StdVideoH265VideoParameterSet"]
        [::core::mem::align_of::<StdVideoH265VideoParameterSet>() - 4usize];
    ["Offset of field: StdVideoH265VideoParameterSet::flags"]
        [::core::mem::offset_of!(StdVideoH265VideoParameterSet, flags) - 0usize];
    ["Offset of field: StdVideoH265VideoParameterSet::vps_video_parameter_set_id"][::core::mem::offset_of!(
        StdVideoH265VideoParameterSet,
        vps_video_parameter_set_id
    ) - 4usize];
    ["Offset of field: StdVideoH265VideoParameterSet::vps_max_sub_layers_minus1"][::core::mem::offset_of!(
        StdVideoH265VideoParameterSet,
        vps_max_sub_layers_minus1
    ) - 5usize];
    ["Offset of field: StdVideoH265VideoParameterSet::reserved1"]
        [::core::mem::offset_of!(StdVideoH265VideoParameterSet, reserved1) - 6usize];
    ["Offset of field: StdVideoH265VideoParameterSet::reserved2"]
        [::core::mem::offset_of!(StdVideoH265VideoParameterSet, reserved2) - 7usize];
    ["Offset of field: StdVideoH265VideoParameterSet::vps_num_units_in_tick"]
        [::core::mem::offset_of!(StdVideoH265VideoParameterSet, vps_num_units_in_tick) - 8usize];
    ["Offset of field: StdVideoH265VideoParameterSet::vps_time_scale"]
        [::core::mem::offset_of!(StdVideoH265VideoParameterSet, vps_time_scale) - 12usize];
    ["Offset of field: StdVideoH265VideoParameterSet::vps_num_ticks_poc_diff_one_minus1"][::core::mem::offset_of!(
        StdVideoH265VideoParameterSet,
        vps_num_ticks_poc_diff_one_minus1
    )
        - 16usize];
    ["Offset of field: StdVideoH265VideoParameterSet::reserved3"]
        [::core::mem::offset_of!(StdVideoH265VideoParameterSet, reserved3) - 20usize];
    ["Offset of field: StdVideoH265VideoParameterSet::pDecPicBufMgr"]
        [::core::mem::offset_of!(StdVideoH265VideoParameterSet, pDecPicBufMgr) - 24usize];
    ["Offset of field: StdVideoH265VideoParameterSet::pHrdParameters"]
        [::core::mem::offset_of!(StdVideoH265VideoParameterSet, pHrdParameters) - 28usize];
    ["Offset of field: StdVideoH265VideoParameterSet::pProfileTierLevel"]
        [::core::mem::offset_of!(StdVideoH265VideoParameterSet, pProfileTierLevel) - 32usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoH265ScalingLists"]
        [::core::mem::size_of::<StdVideoH265ScalingLists>() - 1000usize];
    ["Alignment of StdVideoH265ScalingLists"]
        [::core::mem::align_of::<StdVideoH265ScalingLists>() - 1usize];
    ["Offset of field: StdVideoH265ScalingLists::ScalingList4x4"]
        [::core::mem::offset_of!(StdVideoH265ScalingLists, ScalingList4x4) - 0usize];
    ["Offset of field: StdVideoH265ScalingLists::ScalingList8x8"]
        [::core::mem::offset_of!(StdVideoH265ScalingLists, ScalingList8x8) - 96usize];
    ["Offset of field: StdVideoH265ScalingLists::ScalingList16x16"]
        [::core::mem::offset_of!(StdVideoH265ScalingLists, ScalingList16x16) - 480usize];
    ["Offset of field: StdVideoH265ScalingLists::ScalingList32x32"]
        [::core::mem::offset_of!(StdVideoH265ScalingLists, ScalingList32x32) - 864usize];
    ["Offset of field: StdVideoH265ScalingLists::ScalingListDCCoef16x16"]
        [::core::mem::offset_of!(StdVideoH265ScalingLists, ScalingListDCCoef16x16) - 992usize];
    ["Offset of field: StdVideoH265ScalingLists::ScalingListDCCoef32x32"]
        [::core::mem::offset_of!(StdVideoH265ScalingLists, ScalingListDCCoef32x32) - 998usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoH265SpsVuiFlags"][::core::mem::size_of::<StdVideoH265SpsVuiFlags>() - 4usize];
    ["Alignment of StdVideoH265SpsVuiFlags"]
        [::core::mem::align_of::<StdVideoH265SpsVuiFlags>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoH265SequenceParameterSetVui"]
        [::core::mem::size_of::<StdVideoH265SequenceParameterSetVui>() - 52usize];
    ["Alignment of StdVideoH265SequenceParameterSetVui"]
        [::core::mem::align_of::<StdVideoH265SequenceParameterSetVui>() - 4usize];
    ["Offset of field: StdVideoH265SequenceParameterSetVui::flags"]
        [::core::mem::offset_of!(StdVideoH265SequenceParameterSetVui, flags) - 0usize];
    ["Offset of field: StdVideoH265SequenceParameterSetVui::aspect_ratio_idc"]
        [::core::mem::offset_of!(StdVideoH265SequenceParameterSetVui, aspect_ratio_idc) - 4usize];
    ["Offset of field: StdVideoH265SequenceParameterSetVui::sar_width"]
        [::core::mem::offset_of!(StdVideoH265SequenceParameterSetVui, sar_width) - 8usize];
    ["Offset of field: StdVideoH265SequenceParameterSetVui::sar_height"]
        [::core::mem::offset_of!(StdVideoH265SequenceParameterSetVui, sar_height) - 10usize];
    ["Offset of field: StdVideoH265SequenceParameterSetVui::video_format"]
        [::core::mem::offset_of!(StdVideoH265SequenceParameterSetVui, video_format) - 12usize];
    ["Offset of field: StdVideoH265SequenceParameterSetVui::colour_primaries"]
        [::core::mem::offset_of!(StdVideoH265SequenceParameterSetVui, colour_primaries) - 13usize];
    ["Offset of field: StdVideoH265SequenceParameterSetVui::transfer_characteristics"][::core::mem::offset_of!(
        StdVideoH265SequenceParameterSetVui,
        transfer_characteristics
    ) - 14usize];
    ["Offset of field: StdVideoH265SequenceParameterSetVui::matrix_coeffs"]
        [::core::mem::offset_of!(StdVideoH265SequenceParameterSetVui, matrix_coeffs) - 15usize];
    ["Offset of field: StdVideoH265SequenceParameterSetVui::chroma_sample_loc_type_top_field"][::core::mem::offset_of!(
        StdVideoH265SequenceParameterSetVui,
        chroma_sample_loc_type_top_field
    )
        - 16usize];
    ["Offset of field: StdVideoH265SequenceParameterSetVui::chroma_sample_loc_type_bottom_field"][::core::mem::offset_of!(
        StdVideoH265SequenceParameterSetVui,
        chroma_sample_loc_type_bottom_field
    )
        - 17usize];
    ["Offset of field: StdVideoH265SequenceParameterSetVui::reserved1"]
        [::core::mem::offset_of!(StdVideoH265SequenceParameterSetVui, reserved1) - 18usize];
    ["Offset of field: StdVideoH265SequenceParameterSetVui::reserved2"]
        [::core::mem::offset_of!(StdVideoH265SequenceParameterSetVui, reserved2) - 19usize];
    ["Offset of field: StdVideoH265SequenceParameterSetVui::def_disp_win_left_offset"][::core::mem::offset_of!(
        StdVideoH265SequenceParameterSetVui,
        def_disp_win_left_offset
    ) - 20usize];
    ["Offset of field: StdVideoH265SequenceParameterSetVui::def_disp_win_right_offset"][::core::mem::offset_of!(
        StdVideoH265SequenceParameterSetVui,
        def_disp_win_right_offset
    )
        - 22usize];
    ["Offset of field: StdVideoH265SequenceParameterSetVui::def_disp_win_top_offset"][::core::mem::offset_of!(
        StdVideoH265SequenceParameterSetVui,
        def_disp_win_top_offset
    ) - 24usize];
    ["Offset of field: StdVideoH265SequenceParameterSetVui::def_disp_win_bottom_offset"][::core::mem::offset_of!(
        StdVideoH265SequenceParameterSetVui,
        def_disp_win_bottom_offset
    )
        - 26usize];
    ["Offset of field: StdVideoH265SequenceParameterSetVui::vui_num_units_in_tick"][::core::mem::offset_of!(
        StdVideoH265SequenceParameterSetVui,
        vui_num_units_in_tick
    ) - 28usize];
    ["Offset of field: StdVideoH265SequenceParameterSetVui::vui_time_scale"]
        [::core::mem::offset_of!(StdVideoH265SequenceParameterSetVui, vui_time_scale) - 32usize];
    ["Offset of field: StdVideoH265SequenceParameterSetVui::vui_num_ticks_poc_diff_one_minus1"][::core::mem::offset_of!(
        StdVideoH265SequenceParameterSetVui,
        vui_num_ticks_poc_diff_one_minus1
    )
        - 36usize];
    ["Offset of field: StdVideoH265SequenceParameterSetVui::min_spatial_segmentation_idc"][::core::mem::offset_of!(
        StdVideoH265SequenceParameterSetVui,
        min_spatial_segmentation_idc
    )
        - 40usize];
    ["Offset of field: StdVideoH265SequenceParameterSetVui::reserved3"]
        [::core::mem::offset_of!(StdVideoH265SequenceParameterSetVui, reserved3) - 42usize];
    ["Offset of field: StdVideoH265SequenceParameterSetVui::max_bytes_per_pic_denom"][::core::mem::offset_of!(
        StdVideoH265SequenceParameterSetVui,
        max_bytes_per_pic_denom
    ) - 44usize];
    ["Offset of field: StdVideoH265SequenceParameterSetVui::max_bits_per_min_cu_denom"][::core::mem::offset_of!(
        StdVideoH265SequenceParameterSetVui,
        max_bits_per_min_cu_denom
    )
        - 45usize];
    ["Offset of field: StdVideoH265SequenceParameterSetVui::log2_max_mv_length_horizontal"][::core::mem::offset_of!(
        StdVideoH265SequenceParameterSetVui,
        log2_max_mv_length_horizontal
    )
        - 46usize];
    ["Offset of field: StdVideoH265SequenceParameterSetVui::log2_max_mv_length_vertical"][::core::mem::offset_of!(
        StdVideoH265SequenceParameterSetVui,
        log2_max_mv_length_vertical
    )
        - 47usize];
    ["Offset of field: StdVideoH265SequenceParameterSetVui::pHrdParameters"]
        [::core::mem::offset_of!(StdVideoH265SequenceParameterSetVui, pHrdParameters) - 48usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoH265PredictorPaletteEntries"]
        [::core::mem::size_of::<StdVideoH265PredictorPaletteEntries>() - 768usize];
    ["Alignment of StdVideoH265PredictorPaletteEntries"]
        [::core::mem::align_of::<StdVideoH265PredictorPaletteEntries>() - 2usize];
    ["Offset of field: StdVideoH265PredictorPaletteEntries::PredictorPaletteEntries"][::core::mem::offset_of!(
        StdVideoH265PredictorPaletteEntries,
        PredictorPaletteEntries
    ) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoH265SpsFlags"][::core::mem::size_of::<StdVideoH265SpsFlags>() - 4usize];
    ["Alignment of StdVideoH265SpsFlags"][::core::mem::align_of::<StdVideoH265SpsFlags>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoH265ShortTermRefPicSetFlags"]
        [::core::mem::size_of::<StdVideoH265ShortTermRefPicSetFlags>() - 4usize];
    ["Alignment of StdVideoH265ShortTermRefPicSetFlags"]
        [::core::mem::align_of::<StdVideoH265ShortTermRefPicSetFlags>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoH265ShortTermRefPicSet"]
        [::core::mem::size_of::<StdVideoH265ShortTermRefPicSet>() - 88usize];
    ["Alignment of StdVideoH265ShortTermRefPicSet"]
        [::core::mem::align_of::<StdVideoH265ShortTermRefPicSet>() - 4usize];
    ["Offset of field: StdVideoH265ShortTermRefPicSet::flags"]
        [::core::mem::offset_of!(StdVideoH265ShortTermRefPicSet, flags) - 0usize];
    ["Offset of field: StdVideoH265ShortTermRefPicSet::delta_idx_minus1"]
        [::core::mem::offset_of!(StdVideoH265ShortTermRefPicSet, delta_idx_minus1) - 4usize];
    ["Offset of field: StdVideoH265ShortTermRefPicSet::use_delta_flag"]
        [::core::mem::offset_of!(StdVideoH265ShortTermRefPicSet, use_delta_flag) - 8usize];
    ["Offset of field: StdVideoH265ShortTermRefPicSet::abs_delta_rps_minus1"]
        [::core::mem::offset_of!(StdVideoH265ShortTermRefPicSet, abs_delta_rps_minus1) - 10usize];
    ["Offset of field: StdVideoH265ShortTermRefPicSet::used_by_curr_pic_flag"]
        [::core::mem::offset_of!(StdVideoH265ShortTermRefPicSet, used_by_curr_pic_flag) - 12usize];
    ["Offset of field: StdVideoH265ShortTermRefPicSet::used_by_curr_pic_s0_flag"][::core::mem::offset_of!(
        StdVideoH265ShortTermRefPicSet,
        used_by_curr_pic_s0_flag
    ) - 14usize];
    ["Offset of field: StdVideoH265ShortTermRefPicSet::used_by_curr_pic_s1_flag"][::core::mem::offset_of!(
        StdVideoH265ShortTermRefPicSet,
        used_by_curr_pic_s1_flag
    ) - 16usize];
    ["Offset of field: StdVideoH265ShortTermRefPicSet::reserved1"]
        [::core::mem::offset_of!(StdVideoH265ShortTermRefPicSet, reserved1) - 18usize];
    ["Offset of field: StdVideoH265ShortTermRefPicSet::reserved2"]
        [::core::mem::offset_of!(StdVideoH265ShortTermRefPicSet, reserved2) - 20usize];
    ["Offset of field: StdVideoH265ShortTermRefPicSet::reserved3"]
        [::core::mem::offset_of!(StdVideoH265ShortTermRefPicSet, reserved3) - 21usize];
    ["Offset of field: StdVideoH265ShortTermRefPicSet::num_negative_pics"]
        [::core::mem::offset_of!(StdVideoH265ShortTermRefPicSet, num_negative_pics) - 22usize];
    ["Offset of field: StdVideoH265ShortTermRefPicSet::num_positive_pics"]
        [::core::mem::offset_of!(StdVideoH265ShortTermRefPicSet, num_positive_pics) - 23usize];
    ["Offset of field: StdVideoH265ShortTermRefPicSet::delta_poc_s0_minus1"]
        [::core::mem::offset_of!(StdVideoH265ShortTermRefPicSet, delta_poc_s0_minus1) - 24usize];
    ["Offset of field: StdVideoH265ShortTermRefPicSet::delta_poc_s1_minus1"]
        [::core::mem::offset_of!(StdVideoH265ShortTermRefPicSet, delta_poc_s1_minus1) - 56usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoH265LongTermRefPicsSps"]
        [::core::mem::size_of::<StdVideoH265LongTermRefPicsSps>() - 132usize];
    ["Alignment of StdVideoH265LongTermRefPicsSps"]
        [::core::mem::align_of::<StdVideoH265LongTermRefPicsSps>() - 4usize];
    ["Offset of field: StdVideoH265LongTermRefPicsSps::used_by_curr_pic_lt_sps_flag"][::core::mem::offset_of!(
        StdVideoH265LongTermRefPicsSps,
        used_by_curr_pic_lt_sps_flag
    ) - 0usize];
    ["Offset of field: StdVideoH265LongTermRefPicsSps::lt_ref_pic_poc_lsb_sps"]
        [::core::mem::offset_of!(StdVideoH265LongTermRefPicsSps, lt_ref_pic_poc_lsb_sps) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoH265SequenceParameterSet"]
        [::core::mem::size_of::<StdVideoH265SequenceParameterSet>() - 84usize];
    ["Alignment of StdVideoH265SequenceParameterSet"]
        [::core::mem::align_of::<StdVideoH265SequenceParameterSet>() - 4usize];
    ["Offset of field: StdVideoH265SequenceParameterSet::flags"]
        [::core::mem::offset_of!(StdVideoH265SequenceParameterSet, flags) - 0usize];
    ["Offset of field: StdVideoH265SequenceParameterSet::chroma_format_idc"]
        [::core::mem::offset_of!(StdVideoH265SequenceParameterSet, chroma_format_idc) - 4usize];
    ["Offset of field: StdVideoH265SequenceParameterSet::pic_width_in_luma_samples"][::core::mem::offset_of!(
        StdVideoH265SequenceParameterSet,
        pic_width_in_luma_samples
    ) - 8usize];
    ["Offset of field: StdVideoH265SequenceParameterSet::pic_height_in_luma_samples"][::core::mem::offset_of!(
        StdVideoH265SequenceParameterSet,
        pic_height_in_luma_samples
    ) - 12usize];
    ["Offset of field: StdVideoH265SequenceParameterSet::sps_video_parameter_set_id"][::core::mem::offset_of!(
        StdVideoH265SequenceParameterSet,
        sps_video_parameter_set_id
    ) - 16usize];
    ["Offset of field: StdVideoH265SequenceParameterSet::sps_max_sub_layers_minus1"][::core::mem::offset_of!(
        StdVideoH265SequenceParameterSet,
        sps_max_sub_layers_minus1
    ) - 17usize];
    ["Offset of field: StdVideoH265SequenceParameterSet::sps_seq_parameter_set_id"][::core::mem::offset_of!(
        StdVideoH265SequenceParameterSet,
        sps_seq_parameter_set_id
    ) - 18usize];
    ["Offset of field: StdVideoH265SequenceParameterSet::bit_depth_luma_minus8"][::core::mem::offset_of!(
        StdVideoH265SequenceParameterSet,
        bit_depth_luma_minus8
    ) - 19usize];
    ["Offset of field: StdVideoH265SequenceParameterSet::bit_depth_chroma_minus8"][::core::mem::offset_of!(
        StdVideoH265SequenceParameterSet,
        bit_depth_chroma_minus8
    ) - 20usize];
    ["Offset of field: StdVideoH265SequenceParameterSet::log2_max_pic_order_cnt_lsb_minus4"][::core::mem::offset_of!(
        StdVideoH265SequenceParameterSet,
        log2_max_pic_order_cnt_lsb_minus4
    )
        - 21usize];
    ["Offset of field: StdVideoH265SequenceParameterSet::log2_min_luma_coding_block_size_minus3"][::core::mem::offset_of!(
        StdVideoH265SequenceParameterSet,
        log2_min_luma_coding_block_size_minus3
    )
        - 22usize];
    ["Offset of field: StdVideoH265SequenceParameterSet::log2_diff_max_min_luma_coding_block_size"] [:: core :: mem :: offset_of ! (StdVideoH265SequenceParameterSet , log2_diff_max_min_luma_coding_block_size) - 23usize] ;
    ["Offset of field: StdVideoH265SequenceParameterSet::log2_min_luma_transform_block_size_minus2"] [:: core :: mem :: offset_of ! (StdVideoH265SequenceParameterSet , log2_min_luma_transform_block_size_minus2) - 24usize] ;
    ["Offset of field: StdVideoH265SequenceParameterSet::log2_diff_max_min_luma_transform_block_size"] [:: core :: mem :: offset_of ! (StdVideoH265SequenceParameterSet , log2_diff_max_min_luma_transform_block_size) - 25usize] ;
    ["Offset of field: StdVideoH265SequenceParameterSet::max_transform_hierarchy_depth_inter"][::core::mem::offset_of!(
        StdVideoH265SequenceParameterSet,
        max_transform_hierarchy_depth_inter
    )
        - 26usize];
    ["Offset of field: StdVideoH265SequenceParameterSet::max_transform_hierarchy_depth_intra"][::core::mem::offset_of!(
        StdVideoH265SequenceParameterSet,
        max_transform_hierarchy_depth_intra
    )
        - 27usize];
    ["Offset of field: StdVideoH265SequenceParameterSet::num_short_term_ref_pic_sets"][::core::mem::offset_of!(
        StdVideoH265SequenceParameterSet,
        num_short_term_ref_pic_sets
    ) - 28usize];
    ["Offset of field: StdVideoH265SequenceParameterSet::num_long_term_ref_pics_sps"][::core::mem::offset_of!(
        StdVideoH265SequenceParameterSet,
        num_long_term_ref_pics_sps
    ) - 29usize];
    ["Offset of field: StdVideoH265SequenceParameterSet::pcm_sample_bit_depth_luma_minus1"][::core::mem::offset_of!(
        StdVideoH265SequenceParameterSet,
        pcm_sample_bit_depth_luma_minus1
    )
        - 30usize];
    ["Offset of field: StdVideoH265SequenceParameterSet::pcm_sample_bit_depth_chroma_minus1"][::core::mem::offset_of!(
        StdVideoH265SequenceParameterSet,
        pcm_sample_bit_depth_chroma_minus1
    )
        - 31usize];
    ["Offset of field: StdVideoH265SequenceParameterSet::log2_min_pcm_luma_coding_block_size_minus3"] [:: core :: mem :: offset_of ! (StdVideoH265SequenceParameterSet , log2_min_pcm_luma_coding_block_size_minus3) - 32usize] ;
    ["Offset of field: StdVideoH265SequenceParameterSet::log2_diff_max_min_pcm_luma_coding_block_size"] [:: core :: mem :: offset_of ! (StdVideoH265SequenceParameterSet , log2_diff_max_min_pcm_luma_coding_block_size) - 33usize] ;
    ["Offset of field: StdVideoH265SequenceParameterSet::reserved1"]
        [::core::mem::offset_of!(StdVideoH265SequenceParameterSet, reserved1) - 34usize];
    ["Offset of field: StdVideoH265SequenceParameterSet::reserved2"]
        [::core::mem::offset_of!(StdVideoH265SequenceParameterSet, reserved2) - 35usize];
    ["Offset of field: StdVideoH265SequenceParameterSet::palette_max_size"]
        [::core::mem::offset_of!(StdVideoH265SequenceParameterSet, palette_max_size) - 36usize];
    ["Offset of field: StdVideoH265SequenceParameterSet::delta_palette_max_predictor_size"][::core::mem::offset_of!(
        StdVideoH265SequenceParameterSet,
        delta_palette_max_predictor_size
    )
        - 37usize];
    ["Offset of field: StdVideoH265SequenceParameterSet::motion_vector_resolution_control_idc"][::core::mem::offset_of!(
        StdVideoH265SequenceParameterSet,
        motion_vector_resolution_control_idc
    )
        - 38usize];
    ["Offset of field: StdVideoH265SequenceParameterSet::sps_num_palette_predictor_initializers_minus1"] [:: core :: mem :: offset_of ! (StdVideoH265SequenceParameterSet , sps_num_palette_predictor_initializers_minus1) - 39usize] ;
    ["Offset of field: StdVideoH265SequenceParameterSet::conf_win_left_offset"]
        [::core::mem::offset_of!(StdVideoH265SequenceParameterSet, conf_win_left_offset) - 40usize];
    ["Offset of field: StdVideoH265SequenceParameterSet::conf_win_right_offset"][::core::mem::offset_of!(
        StdVideoH265SequenceParameterSet,
        conf_win_right_offset
    ) - 44usize];
    ["Offset of field: StdVideoH265SequenceParameterSet::conf_win_top_offset"]
        [::core::mem::offset_of!(StdVideoH265SequenceParameterSet, conf_win_top_offset) - 48usize];
    ["Offset of field: StdVideoH265SequenceParameterSet::conf_win_bottom_offset"][::core::mem::offset_of!(
        StdVideoH265SequenceParameterSet,
        conf_win_bottom_offset
    ) - 52usize];
    ["Offset of field: StdVideoH265SequenceParameterSet::pProfileTierLevel"]
        [::core::mem::offset_of!(StdVideoH265SequenceParameterSet, pProfileTierLevel) - 56usize];
    ["Offset of field: StdVideoH265SequenceParameterSet::pDecPicBufMgr"]
        [::core::mem::offset_of!(StdVideoH265SequenceParameterSet, pDecPicBufMgr) - 60usize];
    ["Offset of field: StdVideoH265SequenceParameterSet::pScalingLists"]
        [::core::mem::offset_of!(StdVideoH265SequenceParameterSet, pScalingLists) - 64usize];
    ["Offset of field: StdVideoH265SequenceParameterSet::pShortTermRefPicSet"]
        [::core::mem::offset_of!(StdVideoH265SequenceParameterSet, pShortTermRefPicSet) - 68usize];
    ["Offset of field: StdVideoH265SequenceParameterSet::pLongTermRefPicsSps"]
        [::core::mem::offset_of!(StdVideoH265SequenceParameterSet, pLongTermRefPicsSps) - 72usize];
    ["Offset of field: StdVideoH265SequenceParameterSet::pSequenceParameterSetVui"][::core::mem::offset_of!(
        StdVideoH265SequenceParameterSet,
        pSequenceParameterSetVui
    ) - 76usize];
    ["Offset of field: StdVideoH265SequenceParameterSet::pPredictorPaletteEntries"][::core::mem::offset_of!(
        StdVideoH265SequenceParameterSet,
        pPredictorPaletteEntries
    ) - 80usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoH265PpsFlags"][::core::mem::size_of::<StdVideoH265PpsFlags>() - 4usize];
    ["Alignment of StdVideoH265PpsFlags"][::core::mem::align_of::<StdVideoH265PpsFlags>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoH265PictureParameterSet"]
        [::core::mem::size_of::<StdVideoH265PictureParameterSet>() - 136usize];
    ["Alignment of StdVideoH265PictureParameterSet"]
        [::core::mem::align_of::<StdVideoH265PictureParameterSet>() - 4usize];
    ["Offset of field: StdVideoH265PictureParameterSet::flags"]
        [::core::mem::offset_of!(StdVideoH265PictureParameterSet, flags) - 0usize];
    ["Offset of field: StdVideoH265PictureParameterSet::pps_pic_parameter_set_id"][::core::mem::offset_of!(
        StdVideoH265PictureParameterSet,
        pps_pic_parameter_set_id
    ) - 4usize];
    ["Offset of field: StdVideoH265PictureParameterSet::pps_seq_parameter_set_id"][::core::mem::offset_of!(
        StdVideoH265PictureParameterSet,
        pps_seq_parameter_set_id
    ) - 5usize];
    ["Offset of field: StdVideoH265PictureParameterSet::sps_video_parameter_set_id"][::core::mem::offset_of!(
        StdVideoH265PictureParameterSet,
        sps_video_parameter_set_id
    ) - 6usize];
    ["Offset of field: StdVideoH265PictureParameterSet::num_extra_slice_header_bits"][::core::mem::offset_of!(
        StdVideoH265PictureParameterSet,
        num_extra_slice_header_bits
    ) - 7usize];
    ["Offset of field: StdVideoH265PictureParameterSet::num_ref_idx_l0_default_active_minus1"][::core::mem::offset_of!(
        StdVideoH265PictureParameterSet,
        num_ref_idx_l0_default_active_minus1
    )
        - 8usize];
    ["Offset of field: StdVideoH265PictureParameterSet::num_ref_idx_l1_default_active_minus1"][::core::mem::offset_of!(
        StdVideoH265PictureParameterSet,
        num_ref_idx_l1_default_active_minus1
    )
        - 9usize];
    ["Offset of field: StdVideoH265PictureParameterSet::init_qp_minus26"]
        [::core::mem::offset_of!(StdVideoH265PictureParameterSet, init_qp_minus26) - 10usize];
    ["Offset of field: StdVideoH265PictureParameterSet::diff_cu_qp_delta_depth"][::core::mem::offset_of!(
        StdVideoH265PictureParameterSet,
        diff_cu_qp_delta_depth
    ) - 11usize];
    ["Offset of field: StdVideoH265PictureParameterSet::pps_cb_qp_offset"]
        [::core::mem::offset_of!(StdVideoH265PictureParameterSet, pps_cb_qp_offset) - 12usize];
    ["Offset of field: StdVideoH265PictureParameterSet::pps_cr_qp_offset"]
        [::core::mem::offset_of!(StdVideoH265PictureParameterSet, pps_cr_qp_offset) - 13usize];
    ["Offset of field: StdVideoH265PictureParameterSet::pps_beta_offset_div2"]
        [::core::mem::offset_of!(StdVideoH265PictureParameterSet, pps_beta_offset_div2) - 14usize];
    ["Offset of field: StdVideoH265PictureParameterSet::pps_tc_offset_div2"]
        [::core::mem::offset_of!(StdVideoH265PictureParameterSet, pps_tc_offset_div2) - 15usize];
    ["Offset of field: StdVideoH265PictureParameterSet::log2_parallel_merge_level_minus2"][::core::mem::offset_of!(
        StdVideoH265PictureParameterSet,
        log2_parallel_merge_level_minus2
    )
        - 16usize];
    ["Offset of field: StdVideoH265PictureParameterSet::log2_max_transform_skip_block_size_minus2"] [:: core :: mem :: offset_of ! (StdVideoH265PictureParameterSet , log2_max_transform_skip_block_size_minus2) - 17usize] ;
    ["Offset of field: StdVideoH265PictureParameterSet::diff_cu_chroma_qp_offset_depth"][::core::mem::offset_of!(
        StdVideoH265PictureParameterSet,
        diff_cu_chroma_qp_offset_depth
    )
        - 18usize];
    ["Offset of field: StdVideoH265PictureParameterSet::chroma_qp_offset_list_len_minus1"][::core::mem::offset_of!(
        StdVideoH265PictureParameterSet,
        chroma_qp_offset_list_len_minus1
    )
        - 19usize];
    ["Offset of field: StdVideoH265PictureParameterSet::cb_qp_offset_list"]
        [::core::mem::offset_of!(StdVideoH265PictureParameterSet, cb_qp_offset_list) - 20usize];
    ["Offset of field: StdVideoH265PictureParameterSet::cr_qp_offset_list"]
        [::core::mem::offset_of!(StdVideoH265PictureParameterSet, cr_qp_offset_list) - 26usize];
    ["Offset of field: StdVideoH265PictureParameterSet::log2_sao_offset_scale_luma"][::core::mem::offset_of!(
        StdVideoH265PictureParameterSet,
        log2_sao_offset_scale_luma
    ) - 32usize];
    ["Offset of field: StdVideoH265PictureParameterSet::log2_sao_offset_scale_chroma"][::core::mem::offset_of!(
        StdVideoH265PictureParameterSet,
        log2_sao_offset_scale_chroma
    ) - 33usize];
    ["Offset of field: StdVideoH265PictureParameterSet::pps_act_y_qp_offset_plus5"][::core::mem::offset_of!(
        StdVideoH265PictureParameterSet,
        pps_act_y_qp_offset_plus5
    ) - 34usize];
    ["Offset of field: StdVideoH265PictureParameterSet::pps_act_cb_qp_offset_plus5"][::core::mem::offset_of!(
        StdVideoH265PictureParameterSet,
        pps_act_cb_qp_offset_plus5
    ) - 35usize];
    ["Offset of field: StdVideoH265PictureParameterSet::pps_act_cr_qp_offset_plus3"][::core::mem::offset_of!(
        StdVideoH265PictureParameterSet,
        pps_act_cr_qp_offset_plus3
    ) - 36usize];
    ["Offset of field: StdVideoH265PictureParameterSet::pps_num_palette_predictor_initializers"][::core::mem::offset_of!(
        StdVideoH265PictureParameterSet,
        pps_num_palette_predictor_initializers
    )
        - 37usize];
    ["Offset of field: StdVideoH265PictureParameterSet::luma_bit_depth_entry_minus8"][::core::mem::offset_of!(
        StdVideoH265PictureParameterSet,
        luma_bit_depth_entry_minus8
    ) - 38usize];
    ["Offset of field: StdVideoH265PictureParameterSet::chroma_bit_depth_entry_minus8"][::core::mem::offset_of!(
        StdVideoH265PictureParameterSet,
        chroma_bit_depth_entry_minus8
    )
        - 39usize];
    ["Offset of field: StdVideoH265PictureParameterSet::num_tile_columns_minus1"][::core::mem::offset_of!(
        StdVideoH265PictureParameterSet,
        num_tile_columns_minus1
    ) - 40usize];
    ["Offset of field: StdVideoH265PictureParameterSet::num_tile_rows_minus1"]
        [::core::mem::offset_of!(StdVideoH265PictureParameterSet, num_tile_rows_minus1) - 41usize];
    ["Offset of field: StdVideoH265PictureParameterSet::reserved1"]
        [::core::mem::offset_of!(StdVideoH265PictureParameterSet, reserved1) - 42usize];
    ["Offset of field: StdVideoH265PictureParameterSet::reserved2"]
        [::core::mem::offset_of!(StdVideoH265PictureParameterSet, reserved2) - 43usize];
    ["Offset of field: StdVideoH265PictureParameterSet::column_width_minus1"]
        [::core::mem::offset_of!(StdVideoH265PictureParameterSet, column_width_minus1) - 44usize];
    ["Offset of field: StdVideoH265PictureParameterSet::row_height_minus1"]
        [::core::mem::offset_of!(StdVideoH265PictureParameterSet, row_height_minus1) - 82usize];
    ["Offset of field: StdVideoH265PictureParameterSet::reserved3"]
        [::core::mem::offset_of!(StdVideoH265PictureParameterSet, reserved3) - 124usize];
    ["Offset of field: StdVideoH265PictureParameterSet::pScalingLists"]
        [::core::mem::offset_of!(StdVideoH265PictureParameterSet, pScalingLists) - 128usize];
    ["Offset of field: StdVideoH265PictureParameterSet::pPredictorPaletteEntries"][::core::mem::offset_of!(
        StdVideoH265PictureParameterSet,
        pPredictorPaletteEntries
    ) - 132usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoEncodeH265WeightTableFlags"]
        [::core::mem::size_of::<StdVideoEncodeH265WeightTableFlags>() - 8usize];
    ["Alignment of StdVideoEncodeH265WeightTableFlags"]
        [::core::mem::align_of::<StdVideoEncodeH265WeightTableFlags>() - 2usize];
    ["Offset of field: StdVideoEncodeH265WeightTableFlags::luma_weight_l0_flag"]
        [::core::mem::offset_of!(StdVideoEncodeH265WeightTableFlags, luma_weight_l0_flag) - 0usize];
    ["Offset of field: StdVideoEncodeH265WeightTableFlags::chroma_weight_l0_flag"][::core::mem::offset_of!(
        StdVideoEncodeH265WeightTableFlags,
        chroma_weight_l0_flag
    ) - 2usize];
    ["Offset of field: StdVideoEncodeH265WeightTableFlags::luma_weight_l1_flag"]
        [::core::mem::offset_of!(StdVideoEncodeH265WeightTableFlags, luma_weight_l1_flag) - 4usize];
    ["Offset of field: StdVideoEncodeH265WeightTableFlags::chroma_weight_l1_flag"][::core::mem::offset_of!(
        StdVideoEncodeH265WeightTableFlags,
        chroma_weight_l1_flag
    ) - 6usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoEncodeH265WeightTable"]
        [::core::mem::size_of::<StdVideoEncodeH265WeightTable>() - 190usize];
    ["Alignment of StdVideoEncodeH265WeightTable"]
        [::core::mem::align_of::<StdVideoEncodeH265WeightTable>() - 2usize];
    ["Offset of field: StdVideoEncodeH265WeightTable::flags"]
        [::core::mem::offset_of!(StdVideoEncodeH265WeightTable, flags) - 0usize];
    ["Offset of field: StdVideoEncodeH265WeightTable::luma_log2_weight_denom"]
        [::core::mem::offset_of!(StdVideoEncodeH265WeightTable, luma_log2_weight_denom) - 8usize];
    ["Offset of field: StdVideoEncodeH265WeightTable::delta_chroma_log2_weight_denom"][::core::mem::offset_of!(
        StdVideoEncodeH265WeightTable,
        delta_chroma_log2_weight_denom
    ) - 9usize];
    ["Offset of field: StdVideoEncodeH265WeightTable::delta_luma_weight_l0"]
        [::core::mem::offset_of!(StdVideoEncodeH265WeightTable, delta_luma_weight_l0) - 10usize];
    ["Offset of field: StdVideoEncodeH265WeightTable::luma_offset_l0"]
        [::core::mem::offset_of!(StdVideoEncodeH265WeightTable, luma_offset_l0) - 25usize];
    ["Offset of field: StdVideoEncodeH265WeightTable::delta_chroma_weight_l0"]
        [::core::mem::offset_of!(StdVideoEncodeH265WeightTable, delta_chroma_weight_l0) - 40usize];
    ["Offset of field: StdVideoEncodeH265WeightTable::delta_chroma_offset_l0"]
        [::core::mem::offset_of!(StdVideoEncodeH265WeightTable, delta_chroma_offset_l0) - 70usize];
    ["Offset of field: StdVideoEncodeH265WeightTable::delta_luma_weight_l1"]
        [::core::mem::offset_of!(StdVideoEncodeH265WeightTable, delta_luma_weight_l1) - 100usize];
    ["Offset of field: StdVideoEncodeH265WeightTable::luma_offset_l1"]
        [::core::mem::offset_of!(StdVideoEncodeH265WeightTable, luma_offset_l1) - 115usize];
    ["Offset of field: StdVideoEncodeH265WeightTable::delta_chroma_weight_l1"]
        [::core::mem::offset_of!(StdVideoEncodeH265WeightTable, delta_chroma_weight_l1) - 130usize];
    ["Offset of field: StdVideoEncodeH265WeightTable::delta_chroma_offset_l1"]
        [::core::mem::offset_of!(StdVideoEncodeH265WeightTable, delta_chroma_offset_l1) - 160usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoEncodeH265SliceSegmentHeaderFlags"]
        [::core::mem::size_of::<StdVideoEncodeH265SliceSegmentHeaderFlags>() - 4usize];
    ["Alignment of StdVideoEncodeH265SliceSegmentHeaderFlags"]
        [::core::mem::align_of::<StdVideoEncodeH265SliceSegmentHeaderFlags>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoEncodeH265SliceSegmentHeader"]
        [::core::mem::size_of::<StdVideoEncodeH265SliceSegmentHeader>() - 28usize];
    ["Alignment of StdVideoEncodeH265SliceSegmentHeader"]
        [::core::mem::align_of::<StdVideoEncodeH265SliceSegmentHeader>() - 4usize];
    ["Offset of field: StdVideoEncodeH265SliceSegmentHeader::flags"]
        [::core::mem::offset_of!(StdVideoEncodeH265SliceSegmentHeader, flags) - 0usize];
    ["Offset of field: StdVideoEncodeH265SliceSegmentHeader::slice_type"]
        [::core::mem::offset_of!(StdVideoEncodeH265SliceSegmentHeader, slice_type) - 4usize];
    ["Offset of field: StdVideoEncodeH265SliceSegmentHeader::slice_segment_address"][::core::mem::offset_of!(
        StdVideoEncodeH265SliceSegmentHeader,
        slice_segment_address
    ) - 8usize];
    ["Offset of field: StdVideoEncodeH265SliceSegmentHeader::collocated_ref_idx"][::core::mem::offset_of!(
        StdVideoEncodeH265SliceSegmentHeader,
        collocated_ref_idx
    ) - 12usize];
    ["Offset of field: StdVideoEncodeH265SliceSegmentHeader::MaxNumMergeCand"]
        [::core::mem::offset_of!(StdVideoEncodeH265SliceSegmentHeader, MaxNumMergeCand) - 13usize];
    ["Offset of field: StdVideoEncodeH265SliceSegmentHeader::slice_cb_qp_offset"][::core::mem::offset_of!(
        StdVideoEncodeH265SliceSegmentHeader,
        slice_cb_qp_offset
    ) - 14usize];
    ["Offset of field: StdVideoEncodeH265SliceSegmentHeader::slice_cr_qp_offset"][::core::mem::offset_of!(
        StdVideoEncodeH265SliceSegmentHeader,
        slice_cr_qp_offset
    ) - 15usize];
    ["Offset of field: StdVideoEncodeH265SliceSegmentHeader::slice_beta_offset_div2"][::core::mem::offset_of!(
        StdVideoEncodeH265SliceSegmentHeader,
        slice_beta_offset_div2
    ) - 16usize];
    ["Offset of field: StdVideoEncodeH265SliceSegmentHeader::slice_tc_offset_div2"][::core::mem::offset_of!(
        StdVideoEncodeH265SliceSegmentHeader,
        slice_tc_offset_div2
    ) - 17usize];
    ["Offset of field: StdVideoEncodeH265SliceSegmentHeader::slice_act_y_qp_offset"][::core::mem::offset_of!(
        StdVideoEncodeH265SliceSegmentHeader,
        slice_act_y_qp_offset
    ) - 18usize];
    ["Offset of field: StdVideoEncodeH265SliceSegmentHeader::slice_act_cb_qp_offset"][::core::mem::offset_of!(
        StdVideoEncodeH265SliceSegmentHeader,
        slice_act_cb_qp_offset
    ) - 19usize];
    ["Offset of field: StdVideoEncodeH265SliceSegmentHeader::slice_act_cr_qp_offset"][::core::mem::offset_of!(
        StdVideoEncodeH265SliceSegmentHeader,
        slice_act_cr_qp_offset
    ) - 20usize];
    ["Offset of field: StdVideoEncodeH265SliceSegmentHeader::slice_qp_delta"]
        [::core::mem::offset_of!(StdVideoEncodeH265SliceSegmentHeader, slice_qp_delta) - 21usize];
    ["Offset of field: StdVideoEncodeH265SliceSegmentHeader::reserved1"]
        [::core::mem::offset_of!(StdVideoEncodeH265SliceSegmentHeader, reserved1) - 22usize];
    ["Offset of field: StdVideoEncodeH265SliceSegmentHeader::pWeightTable"]
        [::core::mem::offset_of!(StdVideoEncodeH265SliceSegmentHeader, pWeightTable) - 24usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoEncodeH265ReferenceListsInfoFlags"]
        [::core::mem::size_of::<StdVideoEncodeH265ReferenceListsInfoFlags>() - 4usize];
    ["Alignment of StdVideoEncodeH265ReferenceListsInfoFlags"]
        [::core::mem::align_of::<StdVideoEncodeH265ReferenceListsInfoFlags>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoEncodeH265ReferenceListsInfo"]
        [::core::mem::size_of::<StdVideoEncodeH265ReferenceListsInfo>() - 68usize];
    ["Alignment of StdVideoEncodeH265ReferenceListsInfo"]
        [::core::mem::align_of::<StdVideoEncodeH265ReferenceListsInfo>() - 4usize];
    ["Offset of field: StdVideoEncodeH265ReferenceListsInfo::flags"]
        [::core::mem::offset_of!(StdVideoEncodeH265ReferenceListsInfo, flags) - 0usize];
    ["Offset of field: StdVideoEncodeH265ReferenceListsInfo::num_ref_idx_l0_active_minus1"][::core::mem::offset_of!(
        StdVideoEncodeH265ReferenceListsInfo,
        num_ref_idx_l0_active_minus1
    )
        - 4usize];
    ["Offset of field: StdVideoEncodeH265ReferenceListsInfo::num_ref_idx_l1_active_minus1"][::core::mem::offset_of!(
        StdVideoEncodeH265ReferenceListsInfo,
        num_ref_idx_l1_active_minus1
    )
        - 5usize];
    ["Offset of field: StdVideoEncodeH265ReferenceListsInfo::RefPicList0"]
        [::core::mem::offset_of!(StdVideoEncodeH265ReferenceListsInfo, RefPicList0) - 6usize];
    ["Offset of field: StdVideoEncodeH265ReferenceListsInfo::RefPicList1"]
        [::core::mem::offset_of!(StdVideoEncodeH265ReferenceListsInfo, RefPicList1) - 21usize];
    ["Offset of field: StdVideoEncodeH265ReferenceListsInfo::list_entry_l0"]
        [::core::mem::offset_of!(StdVideoEncodeH265ReferenceListsInfo, list_entry_l0) - 36usize];
    ["Offset of field: StdVideoEncodeH265ReferenceListsInfo::list_entry_l1"]
        [::core::mem::offset_of!(StdVideoEncodeH265ReferenceListsInfo, list_entry_l1) - 51usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoEncodeH265PictureInfoFlags"]
        [::core::mem::size_of::<StdVideoEncodeH265PictureInfoFlags>() - 4usize];
    ["Alignment of StdVideoEncodeH265PictureInfoFlags"]
        [::core::mem::align_of::<StdVideoEncodeH265PictureInfoFlags>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoEncodeH265LongTermRefPics"]
        [::core::mem::size_of::<StdVideoEncodeH265LongTermRefPics>() - 148usize];
    ["Alignment of StdVideoEncodeH265LongTermRefPics"]
        [::core::mem::align_of::<StdVideoEncodeH265LongTermRefPics>() - 2usize];
    ["Offset of field: StdVideoEncodeH265LongTermRefPics::num_long_term_sps"]
        [::core::mem::offset_of!(StdVideoEncodeH265LongTermRefPics, num_long_term_sps) - 0usize];
    ["Offset of field: StdVideoEncodeH265LongTermRefPics::num_long_term_pics"]
        [::core::mem::offset_of!(StdVideoEncodeH265LongTermRefPics, num_long_term_pics) - 1usize];
    ["Offset of field: StdVideoEncodeH265LongTermRefPics::lt_idx_sps"]
        [::core::mem::offset_of!(StdVideoEncodeH265LongTermRefPics, lt_idx_sps) - 2usize];
    ["Offset of field: StdVideoEncodeH265LongTermRefPics::poc_lsb_lt"]
        [::core::mem::offset_of!(StdVideoEncodeH265LongTermRefPics, poc_lsb_lt) - 34usize];
    ["Offset of field: StdVideoEncodeH265LongTermRefPics::used_by_curr_pic_lt_flag"][::core::mem::offset_of!(
        StdVideoEncodeH265LongTermRefPics,
        used_by_curr_pic_lt_flag
    ) - 50usize];
    ["Offset of field: StdVideoEncodeH265LongTermRefPics::delta_poc_msb_present_flag"][::core::mem::offset_of!(
        StdVideoEncodeH265LongTermRefPics,
        delta_poc_msb_present_flag
    ) - 52usize];
    ["Offset of field: StdVideoEncodeH265LongTermRefPics::delta_poc_msb_cycle_lt"][::core::mem::offset_of!(
        StdVideoEncodeH265LongTermRefPics,
        delta_poc_msb_cycle_lt
    ) - 100usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoEncodeH265PictureInfo"]
        [::core::mem::size_of::<StdVideoEncodeH265PictureInfo>() - 36usize];
    ["Alignment of StdVideoEncodeH265PictureInfo"]
        [::core::mem::align_of::<StdVideoEncodeH265PictureInfo>() - 4usize];
    ["Offset of field: StdVideoEncodeH265PictureInfo::flags"]
        [::core::mem::offset_of!(StdVideoEncodeH265PictureInfo, flags) - 0usize];
    ["Offset of field: StdVideoEncodeH265PictureInfo::pic_type"]
        [::core::mem::offset_of!(StdVideoEncodeH265PictureInfo, pic_type) - 4usize];
    ["Offset of field: StdVideoEncodeH265PictureInfo::sps_video_parameter_set_id"][::core::mem::offset_of!(
        StdVideoEncodeH265PictureInfo,
        sps_video_parameter_set_id
    ) - 8usize];
    ["Offset of field: StdVideoEncodeH265PictureInfo::pps_seq_parameter_set_id"]
        [::core::mem::offset_of!(StdVideoEncodeH265PictureInfo, pps_seq_parameter_set_id) - 9usize];
    ["Offset of field: StdVideoEncodeH265PictureInfo::pps_pic_parameter_set_id"][::core::mem::offset_of!(
        StdVideoEncodeH265PictureInfo,
        pps_pic_parameter_set_id
    ) - 10usize];
    ["Offset of field: StdVideoEncodeH265PictureInfo::short_term_ref_pic_set_idx"][::core::mem::offset_of!(
        StdVideoEncodeH265PictureInfo,
        short_term_ref_pic_set_idx
    ) - 11usize];
    ["Offset of field: StdVideoEncodeH265PictureInfo::PicOrderCntVal"]
        [::core::mem::offset_of!(StdVideoEncodeH265PictureInfo, PicOrderCntVal) - 12usize];
    ["Offset of field: StdVideoEncodeH265PictureInfo::TemporalId"]
        [::core::mem::offset_of!(StdVideoEncodeH265PictureInfo, TemporalId) - 16usize];
    ["Offset of field: StdVideoEncodeH265PictureInfo::reserved1"]
        [::core::mem::offset_of!(StdVideoEncodeH265PictureInfo, reserved1) - 17usize];
    ["Offset of field: StdVideoEncodeH265PictureInfo::pRefLists"]
        [::core::mem::offset_of!(StdVideoEncodeH265PictureInfo, pRefLists) - 24usize];
    ["Offset of field: StdVideoEncodeH265PictureInfo::pShortTermRefPicSet"]
        [::core::mem::offset_of!(StdVideoEncodeH265PictureInfo, pShortTermRefPicSet) - 28usize];
    ["Offset of field: StdVideoEncodeH265PictureInfo::pLongTermRefPics"]
        [::core::mem::offset_of!(StdVideoEncodeH265PictureInfo, pLongTermRefPics) - 32usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoEncodeH265ReferenceInfoFlags"]
        [::core::mem::size_of::<StdVideoEncodeH265ReferenceInfoFlags>() - 4usize];
    ["Alignment of StdVideoEncodeH265ReferenceInfoFlags"]
        [::core::mem::align_of::<StdVideoEncodeH265ReferenceInfoFlags>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoEncodeH265ReferenceInfo"]
        [::core::mem::size_of::<StdVideoEncodeH265ReferenceInfo>() - 16usize];
    ["Alignment of StdVideoEncodeH265ReferenceInfo"]
        [::core::mem::align_of::<StdVideoEncodeH265ReferenceInfo>() - 4usize];
    ["Offset of field: StdVideoEncodeH265ReferenceInfo::flags"]
        [::core::mem::offset_of!(StdVideoEncodeH265ReferenceInfo, flags) - 0usize];
    ["Offset of field: StdVideoEncodeH265ReferenceInfo::pic_type"]
        [::core::mem::offset_of!(StdVideoEncodeH265ReferenceInfo, pic_type) - 4usize];
    ["Offset of field: StdVideoEncodeH265ReferenceInfo::PicOrderCntVal"]
        [::core::mem::offset_of!(StdVideoEncodeH265ReferenceInfo, PicOrderCntVal) - 8usize];
    ["Offset of field: StdVideoEncodeH265ReferenceInfo::TemporalId"]
        [::core::mem::offset_of!(StdVideoEncodeH265ReferenceInfo, TemporalId) - 12usize];
};
pub const VkVideoEncodeH265CapabilityFlagBitsKHR_VK_VIDEO_ENCODE_H265_CAPABILITY_HRD_COMPLIANCE_BIT_KHR : VkVideoEncodeH265CapabilityFlagBitsKHR = 1 ;
pub const VkVideoEncodeH265CapabilityFlagBitsKHR_VK_VIDEO_ENCODE_H265_CAPABILITY_PREDICTION_WEIGHT_TABLE_GENERATED_BIT_KHR : VkVideoEncodeH265CapabilityFlagBitsKHR = 2 ;
pub const VkVideoEncodeH265CapabilityFlagBitsKHR_VK_VIDEO_ENCODE_H265_CAPABILITY_ROW_UNALIGNED_SLICE_SEGMENT_BIT_KHR : VkVideoEncodeH265CapabilityFlagBitsKHR = 4 ;
pub const VkVideoEncodeH265CapabilityFlagBitsKHR_VK_VIDEO_ENCODE_H265_CAPABILITY_DIFFERENT_SLICE_SEGMENT_TYPE_BIT_KHR : VkVideoEncodeH265CapabilityFlagBitsKHR = 8 ;
pub const VkVideoEncodeH265CapabilityFlagBitsKHR_VK_VIDEO_ENCODE_H265_CAPABILITY_B_FRAME_IN_L0_LIST_BIT_KHR : VkVideoEncodeH265CapabilityFlagBitsKHR = 16 ;
pub const VkVideoEncodeH265CapabilityFlagBitsKHR_VK_VIDEO_ENCODE_H265_CAPABILITY_B_FRAME_IN_L1_LIST_BIT_KHR : VkVideoEncodeH265CapabilityFlagBitsKHR = 32 ;
pub const VkVideoEncodeH265CapabilityFlagBitsKHR_VK_VIDEO_ENCODE_H265_CAPABILITY_PER_PICTURE_TYPE_MIN_MAX_QP_BIT_KHR : VkVideoEncodeH265CapabilityFlagBitsKHR = 64 ;
pub const VkVideoEncodeH265CapabilityFlagBitsKHR_VK_VIDEO_ENCODE_H265_CAPABILITY_PER_SLICE_SEGMENT_CONSTANT_QP_BIT_KHR : VkVideoEncodeH265CapabilityFlagBitsKHR = 128 ;
pub const VkVideoEncodeH265CapabilityFlagBitsKHR_VK_VIDEO_ENCODE_H265_CAPABILITY_MULTIPLE_TILES_PER_SLICE_SEGMENT_BIT_KHR : VkVideoEncodeH265CapabilityFlagBitsKHR = 256 ;
pub const VkVideoEncodeH265CapabilityFlagBitsKHR_VK_VIDEO_ENCODE_H265_CAPABILITY_MULTIPLE_SLICE_SEGMENTS_PER_TILE_BIT_KHR : VkVideoEncodeH265CapabilityFlagBitsKHR = 512 ;
pub const VkVideoEncodeH265CapabilityFlagBitsKHR_VK_VIDEO_ENCODE_H265_CAPABILITY_CU_QP_DIFF_WRAPAROUND_BIT_KHR : VkVideoEncodeH265CapabilityFlagBitsKHR = 1024 ;
pub const VkVideoEncodeH265CapabilityFlagBitsKHR_VK_VIDEO_ENCODE_H265_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR : VkVideoEncodeH265CapabilityFlagBitsKHR = 2147483647 ;
pub const VkVideoEncodeH265StdFlagBitsKHR_VK_VIDEO_ENCODE_H265_STD_SEPARATE_COLOR_PLANE_FLAG_SET_BIT_KHR : VkVideoEncodeH265StdFlagBitsKHR = 1 ;
pub const VkVideoEncodeH265StdFlagBitsKHR_VK_VIDEO_ENCODE_H265_STD_SAMPLE_ADAPTIVE_OFFSET_ENABLED_FLAG_SET_BIT_KHR : VkVideoEncodeH265StdFlagBitsKHR = 2 ;
pub const VkVideoEncodeH265StdFlagBitsKHR_VK_VIDEO_ENCODE_H265_STD_SCALING_LIST_DATA_PRESENT_FLAG_SET_BIT_KHR : VkVideoEncodeH265StdFlagBitsKHR = 4 ;
pub const VkVideoEncodeH265StdFlagBitsKHR_VK_VIDEO_ENCODE_H265_STD_PCM_ENABLED_FLAG_SET_BIT_KHR:
    VkVideoEncodeH265StdFlagBitsKHR = 8;
pub const VkVideoEncodeH265StdFlagBitsKHR_VK_VIDEO_ENCODE_H265_STD_SPS_TEMPORAL_MVP_ENABLED_FLAG_SET_BIT_KHR : VkVideoEncodeH265StdFlagBitsKHR = 16 ;
pub const VkVideoEncodeH265StdFlagBitsKHR_VK_VIDEO_ENCODE_H265_STD_INIT_QP_MINUS26_BIT_KHR:
    VkVideoEncodeH265StdFlagBitsKHR = 32;
pub const VkVideoEncodeH265StdFlagBitsKHR_VK_VIDEO_ENCODE_H265_STD_WEIGHTED_PRED_FLAG_SET_BIT_KHR : VkVideoEncodeH265StdFlagBitsKHR = 64 ;
pub const VkVideoEncodeH265StdFlagBitsKHR_VK_VIDEO_ENCODE_H265_STD_WEIGHTED_BIPRED_FLAG_SET_BIT_KHR : VkVideoEncodeH265StdFlagBitsKHR = 128 ;
pub const VkVideoEncodeH265StdFlagBitsKHR_VK_VIDEO_ENCODE_H265_STD_LOG2_PARALLEL_MERGE_LEVEL_MINUS2_BIT_KHR : VkVideoEncodeH265StdFlagBitsKHR = 256 ;
pub const VkVideoEncodeH265StdFlagBitsKHR_VK_VIDEO_ENCODE_H265_STD_SIGN_DATA_HIDING_ENABLED_FLAG_SET_BIT_KHR : VkVideoEncodeH265StdFlagBitsKHR = 512 ;
pub const VkVideoEncodeH265StdFlagBitsKHR_VK_VIDEO_ENCODE_H265_STD_TRANSFORM_SKIP_ENABLED_FLAG_SET_BIT_KHR : VkVideoEncodeH265StdFlagBitsKHR = 1024 ;
pub const VkVideoEncodeH265StdFlagBitsKHR_VK_VIDEO_ENCODE_H265_STD_TRANSFORM_SKIP_ENABLED_FLAG_UNSET_BIT_KHR : VkVideoEncodeH265StdFlagBitsKHR = 2048 ;
pub const VkVideoEncodeH265StdFlagBitsKHR_VK_VIDEO_ENCODE_H265_STD_PPS_SLICE_CHROMA_QP_OFFSETS_PRESENT_FLAG_SET_BIT_KHR : VkVideoEncodeH265StdFlagBitsKHR = 4096 ;
pub const VkVideoEncodeH265StdFlagBitsKHR_VK_VIDEO_ENCODE_H265_STD_TRANSQUANT_BYPASS_ENABLED_FLAG_SET_BIT_KHR : VkVideoEncodeH265StdFlagBitsKHR = 8192 ;
pub const VkVideoEncodeH265StdFlagBitsKHR_VK_VIDEO_ENCODE_H265_STD_CONSTRAINED_INTRA_PRED_FLAG_SET_BIT_KHR : VkVideoEncodeH265StdFlagBitsKHR = 16384 ;
pub const VkVideoEncodeH265StdFlagBitsKHR_VK_VIDEO_ENCODE_H265_STD_ENTROPY_CODING_SYNC_ENABLED_FLAG_SET_BIT_KHR : VkVideoEncodeH265StdFlagBitsKHR = 32768 ;
pub const VkVideoEncodeH265StdFlagBitsKHR_VK_VIDEO_ENCODE_H265_STD_DEBLOCKING_FILTER_OVERRIDE_ENABLED_FLAG_SET_BIT_KHR : VkVideoEncodeH265StdFlagBitsKHR = 65536 ;
pub const VkVideoEncodeH265StdFlagBitsKHR_VK_VIDEO_ENCODE_H265_STD_DEPENDENT_SLICE_SEGMENTS_ENABLED_FLAG_SET_BIT_KHR : VkVideoEncodeH265StdFlagBitsKHR = 131072 ;
pub const VkVideoEncodeH265StdFlagBitsKHR_VK_VIDEO_ENCODE_H265_STD_DEPENDENT_SLICE_SEGMENT_FLAG_SET_BIT_KHR : VkVideoEncodeH265StdFlagBitsKHR = 262144 ;
pub const VkVideoEncodeH265StdFlagBitsKHR_VK_VIDEO_ENCODE_H265_STD_SLICE_QP_DELTA_BIT_KHR:
    VkVideoEncodeH265StdFlagBitsKHR = 524288;
pub const VkVideoEncodeH265StdFlagBitsKHR_VK_VIDEO_ENCODE_H265_STD_DIFFERENT_SLICE_QP_DELTA_BIT_KHR : VkVideoEncodeH265StdFlagBitsKHR = 1048576 ;
pub const VkVideoEncodeH265StdFlagBitsKHR_VK_VIDEO_ENCODE_H265_STD_FLAG_BITS_MAX_ENUM_KHR:
    VkVideoEncodeH265StdFlagBitsKHR = 2147483647;
pub const VkVideoEncodeH265CtbSizeFlagBitsKHR_VK_VIDEO_ENCODE_H265_CTB_SIZE_16_BIT_KHR:
    VkVideoEncodeH265CtbSizeFlagBitsKHR = 1;
pub const VkVideoEncodeH265CtbSizeFlagBitsKHR_VK_VIDEO_ENCODE_H265_CTB_SIZE_32_BIT_KHR:
    VkVideoEncodeH265CtbSizeFlagBitsKHR = 2;
pub const VkVideoEncodeH265CtbSizeFlagBitsKHR_VK_VIDEO_ENCODE_H265_CTB_SIZE_64_BIT_KHR:
    VkVideoEncodeH265CtbSizeFlagBitsKHR = 4;
pub const VkVideoEncodeH265CtbSizeFlagBitsKHR_VK_VIDEO_ENCODE_H265_CTB_SIZE_FLAG_BITS_MAX_ENUM_KHR : VkVideoEncodeH265CtbSizeFlagBitsKHR = 2147483647 ;
pub const VkVideoEncodeH265TransformBlockSizeFlagBitsKHR_VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_4_BIT_KHR : VkVideoEncodeH265TransformBlockSizeFlagBitsKHR = 1 ;
pub const VkVideoEncodeH265TransformBlockSizeFlagBitsKHR_VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_8_BIT_KHR : VkVideoEncodeH265TransformBlockSizeFlagBitsKHR = 2 ;
pub const VkVideoEncodeH265TransformBlockSizeFlagBitsKHR_VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_16_BIT_KHR : VkVideoEncodeH265TransformBlockSizeFlagBitsKHR = 4 ;
pub const VkVideoEncodeH265TransformBlockSizeFlagBitsKHR_VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_32_BIT_KHR : VkVideoEncodeH265TransformBlockSizeFlagBitsKHR = 8 ;
pub const VkVideoEncodeH265TransformBlockSizeFlagBitsKHR_VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_FLAG_BITS_MAX_ENUM_KHR : VkVideoEncodeH265TransformBlockSizeFlagBitsKHR = 2147483647 ;
pub const VkVideoEncodeH265RateControlFlagBitsKHR_VK_VIDEO_ENCODE_H265_RATE_CONTROL_ATTEMPT_HRD_COMPLIANCE_BIT_KHR : VkVideoEncodeH265RateControlFlagBitsKHR = 1 ;
pub const VkVideoEncodeH265RateControlFlagBitsKHR_VK_VIDEO_ENCODE_H265_RATE_CONTROL_REGULAR_GOP_BIT_KHR : VkVideoEncodeH265RateControlFlagBitsKHR = 2 ;
pub const VkVideoEncodeH265RateControlFlagBitsKHR_VK_VIDEO_ENCODE_H265_RATE_CONTROL_REFERENCE_PATTERN_FLAT_BIT_KHR : VkVideoEncodeH265RateControlFlagBitsKHR = 4 ;
pub const VkVideoEncodeH265RateControlFlagBitsKHR_VK_VIDEO_ENCODE_H265_RATE_CONTROL_REFERENCE_PATTERN_DYADIC_BIT_KHR : VkVideoEncodeH265RateControlFlagBitsKHR = 8 ;
pub const VkVideoEncodeH265RateControlFlagBitsKHR_VK_VIDEO_ENCODE_H265_RATE_CONTROL_TEMPORAL_SUB_LAYER_PATTERN_DYADIC_BIT_KHR : VkVideoEncodeH265RateControlFlagBitsKHR = 16 ;
pub const VkVideoEncodeH265RateControlFlagBitsKHR_VK_VIDEO_ENCODE_H265_RATE_CONTROL_FLAG_BITS_MAX_ENUM_KHR : VkVideoEncodeH265RateControlFlagBitsKHR = 2147483647 ;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeH265CapabilitiesKHR"]
        [::core::mem::size_of::<VkVideoEncodeH265CapabilitiesKHR>() - 76usize];
    ["Alignment of VkVideoEncodeH265CapabilitiesKHR"]
        [::core::mem::align_of::<VkVideoEncodeH265CapabilitiesKHR>() - 4usize];
    ["Offset of field: VkVideoEncodeH265CapabilitiesKHR::sType"]
        [::core::mem::offset_of!(VkVideoEncodeH265CapabilitiesKHR, sType) - 0usize];
    ["Offset of field: VkVideoEncodeH265CapabilitiesKHR::pNext"]
        [::core::mem::offset_of!(VkVideoEncodeH265CapabilitiesKHR, pNext) - 4usize];
    ["Offset of field: VkVideoEncodeH265CapabilitiesKHR::flags"]
        [::core::mem::offset_of!(VkVideoEncodeH265CapabilitiesKHR, flags) - 8usize];
    ["Offset of field: VkVideoEncodeH265CapabilitiesKHR::maxLevelIdc"]
        [::core::mem::offset_of!(VkVideoEncodeH265CapabilitiesKHR, maxLevelIdc) - 12usize];
    ["Offset of field: VkVideoEncodeH265CapabilitiesKHR::maxSliceSegmentCount"]
        [::core::mem::offset_of!(VkVideoEncodeH265CapabilitiesKHR, maxSliceSegmentCount) - 16usize];
    ["Offset of field: VkVideoEncodeH265CapabilitiesKHR::maxTiles"]
        [::core::mem::offset_of!(VkVideoEncodeH265CapabilitiesKHR, maxTiles) - 20usize];
    ["Offset of field: VkVideoEncodeH265CapabilitiesKHR::ctbSizes"]
        [::core::mem::offset_of!(VkVideoEncodeH265CapabilitiesKHR, ctbSizes) - 28usize];
    ["Offset of field: VkVideoEncodeH265CapabilitiesKHR::transformBlockSizes"]
        [::core::mem::offset_of!(VkVideoEncodeH265CapabilitiesKHR, transformBlockSizes) - 32usize];
    ["Offset of field: VkVideoEncodeH265CapabilitiesKHR::maxPPictureL0ReferenceCount"][::core::mem::offset_of!(
        VkVideoEncodeH265CapabilitiesKHR,
        maxPPictureL0ReferenceCount
    ) - 36usize];
    ["Offset of field: VkVideoEncodeH265CapabilitiesKHR::maxBPictureL0ReferenceCount"][::core::mem::offset_of!(
        VkVideoEncodeH265CapabilitiesKHR,
        maxBPictureL0ReferenceCount
    ) - 40usize];
    ["Offset of field: VkVideoEncodeH265CapabilitiesKHR::maxL1ReferenceCount"]
        [::core::mem::offset_of!(VkVideoEncodeH265CapabilitiesKHR, maxL1ReferenceCount) - 44usize];
    ["Offset of field: VkVideoEncodeH265CapabilitiesKHR::maxSubLayerCount"]
        [::core::mem::offset_of!(VkVideoEncodeH265CapabilitiesKHR, maxSubLayerCount) - 48usize];
    ["Offset of field: VkVideoEncodeH265CapabilitiesKHR::expectDyadicTemporalSubLayerPattern"][::core::mem::offset_of!(
        VkVideoEncodeH265CapabilitiesKHR,
        expectDyadicTemporalSubLayerPattern
    )
        - 52usize];
    ["Offset of field: VkVideoEncodeH265CapabilitiesKHR::minQp"]
        [::core::mem::offset_of!(VkVideoEncodeH265CapabilitiesKHR, minQp) - 56usize];
    ["Offset of field: VkVideoEncodeH265CapabilitiesKHR::maxQp"]
        [::core::mem::offset_of!(VkVideoEncodeH265CapabilitiesKHR, maxQp) - 60usize];
    ["Offset of field: VkVideoEncodeH265CapabilitiesKHR::prefersGopRemainingFrames"][::core::mem::offset_of!(
        VkVideoEncodeH265CapabilitiesKHR,
        prefersGopRemainingFrames
    ) - 64usize];
    ["Offset of field: VkVideoEncodeH265CapabilitiesKHR::requiresGopRemainingFrames"][::core::mem::offset_of!(
        VkVideoEncodeH265CapabilitiesKHR,
        requiresGopRemainingFrames
    ) - 68usize];
    ["Offset of field: VkVideoEncodeH265CapabilitiesKHR::stdSyntaxFlags"]
        [::core::mem::offset_of!(VkVideoEncodeH265CapabilitiesKHR, stdSyntaxFlags) - 72usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeH265SessionCreateInfoKHR"]
        [::core::mem::size_of::<VkVideoEncodeH265SessionCreateInfoKHR>() - 16usize];
    ["Alignment of VkVideoEncodeH265SessionCreateInfoKHR"]
        [::core::mem::align_of::<VkVideoEncodeH265SessionCreateInfoKHR>() - 4usize];
    ["Offset of field: VkVideoEncodeH265SessionCreateInfoKHR::sType"]
        [::core::mem::offset_of!(VkVideoEncodeH265SessionCreateInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoEncodeH265SessionCreateInfoKHR::pNext"]
        [::core::mem::offset_of!(VkVideoEncodeH265SessionCreateInfoKHR, pNext) - 4usize];
    ["Offset of field: VkVideoEncodeH265SessionCreateInfoKHR::useMaxLevelIdc"]
        [::core::mem::offset_of!(VkVideoEncodeH265SessionCreateInfoKHR, useMaxLevelIdc) - 8usize];
    ["Offset of field: VkVideoEncodeH265SessionCreateInfoKHR::maxLevelIdc"]
        [::core::mem::offset_of!(VkVideoEncodeH265SessionCreateInfoKHR, maxLevelIdc) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeH265QpKHR"][::core::mem::size_of::<VkVideoEncodeH265QpKHR>() - 12usize];
    ["Alignment of VkVideoEncodeH265QpKHR"]
        [::core::mem::align_of::<VkVideoEncodeH265QpKHR>() - 4usize];
    ["Offset of field: VkVideoEncodeH265QpKHR::qpI"]
        [::core::mem::offset_of!(VkVideoEncodeH265QpKHR, qpI) - 0usize];
    ["Offset of field: VkVideoEncodeH265QpKHR::qpP"]
        [::core::mem::offset_of!(VkVideoEncodeH265QpKHR, qpP) - 4usize];
    ["Offset of field: VkVideoEncodeH265QpKHR::qpB"]
        [::core::mem::offset_of!(VkVideoEncodeH265QpKHR, qpB) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeH265QualityLevelPropertiesKHR"]
        [::core::mem::size_of::<VkVideoEncodeH265QualityLevelPropertiesKHR>() - 48usize];
    ["Alignment of VkVideoEncodeH265QualityLevelPropertiesKHR"]
        [::core::mem::align_of::<VkVideoEncodeH265QualityLevelPropertiesKHR>() - 4usize];
    ["Offset of field: VkVideoEncodeH265QualityLevelPropertiesKHR::sType"]
        [::core::mem::offset_of!(VkVideoEncodeH265QualityLevelPropertiesKHR, sType) - 0usize];
    ["Offset of field: VkVideoEncodeH265QualityLevelPropertiesKHR::pNext"]
        [::core::mem::offset_of!(VkVideoEncodeH265QualityLevelPropertiesKHR, pNext) - 4usize];
    ["Offset of field: VkVideoEncodeH265QualityLevelPropertiesKHR::preferredRateControlFlags"][::core::mem::offset_of!(
        VkVideoEncodeH265QualityLevelPropertiesKHR,
        preferredRateControlFlags
    )
        - 8usize];
    ["Offset of field: VkVideoEncodeH265QualityLevelPropertiesKHR::preferredGopFrameCount"][::core::mem::offset_of!(
        VkVideoEncodeH265QualityLevelPropertiesKHR,
        preferredGopFrameCount
    )
        - 12usize];
    ["Offset of field: VkVideoEncodeH265QualityLevelPropertiesKHR::preferredIdrPeriod"][::core::mem::offset_of!(
        VkVideoEncodeH265QualityLevelPropertiesKHR,
        preferredIdrPeriod
    )
        - 16usize];
    ["Offset of field: VkVideoEncodeH265QualityLevelPropertiesKHR::preferredConsecutiveBFrameCount"] [:: core :: mem :: offset_of ! (VkVideoEncodeH265QualityLevelPropertiesKHR , preferredConsecutiveBFrameCount) - 20usize] ;
    ["Offset of field: VkVideoEncodeH265QualityLevelPropertiesKHR::preferredSubLayerCount"][::core::mem::offset_of!(
        VkVideoEncodeH265QualityLevelPropertiesKHR,
        preferredSubLayerCount
    )
        - 24usize];
    ["Offset of field: VkVideoEncodeH265QualityLevelPropertiesKHR::preferredConstantQp"][::core::mem::offset_of!(
        VkVideoEncodeH265QualityLevelPropertiesKHR,
        preferredConstantQp
    )
        - 28usize];
    ["Offset of field: VkVideoEncodeH265QualityLevelPropertiesKHR::preferredMaxL0ReferenceCount"][::core::mem::offset_of!(
        VkVideoEncodeH265QualityLevelPropertiesKHR,
        preferredMaxL0ReferenceCount
    )
        - 40usize];
    ["Offset of field: VkVideoEncodeH265QualityLevelPropertiesKHR::preferredMaxL1ReferenceCount"][::core::mem::offset_of!(
        VkVideoEncodeH265QualityLevelPropertiesKHR,
        preferredMaxL1ReferenceCount
    )
        - 44usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeH265SessionParametersAddInfoKHR"]
        [::core::mem::size_of::<VkVideoEncodeH265SessionParametersAddInfoKHR>() - 32usize];
    ["Alignment of VkVideoEncodeH265SessionParametersAddInfoKHR"]
        [::core::mem::align_of::<VkVideoEncodeH265SessionParametersAddInfoKHR>() - 4usize];
    ["Offset of field: VkVideoEncodeH265SessionParametersAddInfoKHR::sType"]
        [::core::mem::offset_of!(VkVideoEncodeH265SessionParametersAddInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoEncodeH265SessionParametersAddInfoKHR::pNext"]
        [::core::mem::offset_of!(VkVideoEncodeH265SessionParametersAddInfoKHR, pNext) - 4usize];
    ["Offset of field: VkVideoEncodeH265SessionParametersAddInfoKHR::stdVPSCount"][::core::mem::offset_of!(
        VkVideoEncodeH265SessionParametersAddInfoKHR,
        stdVPSCount
    ) - 8usize];
    ["Offset of field: VkVideoEncodeH265SessionParametersAddInfoKHR::pStdVPSs"]
        [::core::mem::offset_of!(VkVideoEncodeH265SessionParametersAddInfoKHR, pStdVPSs) - 12usize];
    ["Offset of field: VkVideoEncodeH265SessionParametersAddInfoKHR::stdSPSCount"][::core::mem::offset_of!(
        VkVideoEncodeH265SessionParametersAddInfoKHR,
        stdSPSCount
    ) - 16usize];
    ["Offset of field: VkVideoEncodeH265SessionParametersAddInfoKHR::pStdSPSs"]
        [::core::mem::offset_of!(VkVideoEncodeH265SessionParametersAddInfoKHR, pStdSPSs) - 20usize];
    ["Offset of field: VkVideoEncodeH265SessionParametersAddInfoKHR::stdPPSCount"][::core::mem::offset_of!(
        VkVideoEncodeH265SessionParametersAddInfoKHR,
        stdPPSCount
    ) - 24usize];
    ["Offset of field: VkVideoEncodeH265SessionParametersAddInfoKHR::pStdPPSs"]
        [::core::mem::offset_of!(VkVideoEncodeH265SessionParametersAddInfoKHR, pStdPPSs) - 28usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeH265SessionParametersCreateInfoKHR"]
        [::core::mem::size_of::<VkVideoEncodeH265SessionParametersCreateInfoKHR>() - 24usize];
    ["Alignment of VkVideoEncodeH265SessionParametersCreateInfoKHR"]
        [::core::mem::align_of::<VkVideoEncodeH265SessionParametersCreateInfoKHR>() - 4usize];
    ["Offset of field: VkVideoEncodeH265SessionParametersCreateInfoKHR::sType"]
        [::core::mem::offset_of!(VkVideoEncodeH265SessionParametersCreateInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoEncodeH265SessionParametersCreateInfoKHR::pNext"]
        [::core::mem::offset_of!(VkVideoEncodeH265SessionParametersCreateInfoKHR, pNext) - 4usize];
    ["Offset of field: VkVideoEncodeH265SessionParametersCreateInfoKHR::maxStdVPSCount"][::core::mem::offset_of!(
        VkVideoEncodeH265SessionParametersCreateInfoKHR,
        maxStdVPSCount
    )
        - 8usize];
    ["Offset of field: VkVideoEncodeH265SessionParametersCreateInfoKHR::maxStdSPSCount"][::core::mem::offset_of!(
        VkVideoEncodeH265SessionParametersCreateInfoKHR,
        maxStdSPSCount
    )
        - 12usize];
    ["Offset of field: VkVideoEncodeH265SessionParametersCreateInfoKHR::maxStdPPSCount"][::core::mem::offset_of!(
        VkVideoEncodeH265SessionParametersCreateInfoKHR,
        maxStdPPSCount
    )
        - 16usize];
    ["Offset of field: VkVideoEncodeH265SessionParametersCreateInfoKHR::pParametersAddInfo"][::core::mem::offset_of!(
        VkVideoEncodeH265SessionParametersCreateInfoKHR,
        pParametersAddInfo
    )
        - 20usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeH265SessionParametersGetInfoKHR"]
        [::core::mem::size_of::<VkVideoEncodeH265SessionParametersGetInfoKHR>() - 32usize];
    ["Alignment of VkVideoEncodeH265SessionParametersGetInfoKHR"]
        [::core::mem::align_of::<VkVideoEncodeH265SessionParametersGetInfoKHR>() - 4usize];
    ["Offset of field: VkVideoEncodeH265SessionParametersGetInfoKHR::sType"]
        [::core::mem::offset_of!(VkVideoEncodeH265SessionParametersGetInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoEncodeH265SessionParametersGetInfoKHR::pNext"]
        [::core::mem::offset_of!(VkVideoEncodeH265SessionParametersGetInfoKHR, pNext) - 4usize];
    ["Offset of field: VkVideoEncodeH265SessionParametersGetInfoKHR::writeStdVPS"][::core::mem::offset_of!(
        VkVideoEncodeH265SessionParametersGetInfoKHR,
        writeStdVPS
    ) - 8usize];
    ["Offset of field: VkVideoEncodeH265SessionParametersGetInfoKHR::writeStdSPS"][::core::mem::offset_of!(
        VkVideoEncodeH265SessionParametersGetInfoKHR,
        writeStdSPS
    ) - 12usize];
    ["Offset of field: VkVideoEncodeH265SessionParametersGetInfoKHR::writeStdPPS"][::core::mem::offset_of!(
        VkVideoEncodeH265SessionParametersGetInfoKHR,
        writeStdPPS
    ) - 16usize];
    ["Offset of field: VkVideoEncodeH265SessionParametersGetInfoKHR::stdVPSId"]
        [::core::mem::offset_of!(VkVideoEncodeH265SessionParametersGetInfoKHR, stdVPSId) - 20usize];
    ["Offset of field: VkVideoEncodeH265SessionParametersGetInfoKHR::stdSPSId"]
        [::core::mem::offset_of!(VkVideoEncodeH265SessionParametersGetInfoKHR, stdSPSId) - 24usize];
    ["Offset of field: VkVideoEncodeH265SessionParametersGetInfoKHR::stdPPSId"]
        [::core::mem::offset_of!(VkVideoEncodeH265SessionParametersGetInfoKHR, stdPPSId) - 28usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeH265SessionParametersFeedbackInfoKHR"]
        [::core::mem::size_of::<VkVideoEncodeH265SessionParametersFeedbackInfoKHR>() - 20usize];
    ["Alignment of VkVideoEncodeH265SessionParametersFeedbackInfoKHR"]
        [::core::mem::align_of::<VkVideoEncodeH265SessionParametersFeedbackInfoKHR>() - 4usize];
    ["Offset of field: VkVideoEncodeH265SessionParametersFeedbackInfoKHR::sType"][::core::mem::offset_of!(
        VkVideoEncodeH265SessionParametersFeedbackInfoKHR,
        sType
    ) - 0usize];
    ["Offset of field: VkVideoEncodeH265SessionParametersFeedbackInfoKHR::pNext"][::core::mem::offset_of!(
        VkVideoEncodeH265SessionParametersFeedbackInfoKHR,
        pNext
    ) - 4usize];
    ["Offset of field: VkVideoEncodeH265SessionParametersFeedbackInfoKHR::hasStdVPSOverrides"][::core::mem::offset_of!(
        VkVideoEncodeH265SessionParametersFeedbackInfoKHR,
        hasStdVPSOverrides
    )
        - 8usize];
    ["Offset of field: VkVideoEncodeH265SessionParametersFeedbackInfoKHR::hasStdSPSOverrides"][::core::mem::offset_of!(
        VkVideoEncodeH265SessionParametersFeedbackInfoKHR,
        hasStdSPSOverrides
    )
        - 12usize];
    ["Offset of field: VkVideoEncodeH265SessionParametersFeedbackInfoKHR::hasStdPPSOverrides"][::core::mem::offset_of!(
        VkVideoEncodeH265SessionParametersFeedbackInfoKHR,
        hasStdPPSOverrides
    )
        - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeH265NaluSliceSegmentInfoKHR"]
        [::core::mem::size_of::<VkVideoEncodeH265NaluSliceSegmentInfoKHR>() - 16usize];
    ["Alignment of VkVideoEncodeH265NaluSliceSegmentInfoKHR"]
        [::core::mem::align_of::<VkVideoEncodeH265NaluSliceSegmentInfoKHR>() - 4usize];
    ["Offset of field: VkVideoEncodeH265NaluSliceSegmentInfoKHR::sType"]
        [::core::mem::offset_of!(VkVideoEncodeH265NaluSliceSegmentInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoEncodeH265NaluSliceSegmentInfoKHR::pNext"]
        [::core::mem::offset_of!(VkVideoEncodeH265NaluSliceSegmentInfoKHR, pNext) - 4usize];
    ["Offset of field: VkVideoEncodeH265NaluSliceSegmentInfoKHR::constantQp"]
        [::core::mem::offset_of!(VkVideoEncodeH265NaluSliceSegmentInfoKHR, constantQp) - 8usize];
    ["Offset of field: VkVideoEncodeH265NaluSliceSegmentInfoKHR::pStdSliceSegmentHeader"][::core::mem::offset_of!(
        VkVideoEncodeH265NaluSliceSegmentInfoKHR,
        pStdSliceSegmentHeader
    )
        - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeH265PictureInfoKHR"]
        [::core::mem::size_of::<VkVideoEncodeH265PictureInfoKHR>() - 20usize];
    ["Alignment of VkVideoEncodeH265PictureInfoKHR"]
        [::core::mem::align_of::<VkVideoEncodeH265PictureInfoKHR>() - 4usize];
    ["Offset of field: VkVideoEncodeH265PictureInfoKHR::sType"]
        [::core::mem::offset_of!(VkVideoEncodeH265PictureInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoEncodeH265PictureInfoKHR::pNext"]
        [::core::mem::offset_of!(VkVideoEncodeH265PictureInfoKHR, pNext) - 4usize];
    ["Offset of field: VkVideoEncodeH265PictureInfoKHR::naluSliceSegmentEntryCount"][::core::mem::offset_of!(
        VkVideoEncodeH265PictureInfoKHR,
        naluSliceSegmentEntryCount
    ) - 8usize];
    ["Offset of field: VkVideoEncodeH265PictureInfoKHR::pNaluSliceSegmentEntries"][::core::mem::offset_of!(
        VkVideoEncodeH265PictureInfoKHR,
        pNaluSliceSegmentEntries
    ) - 12usize];
    ["Offset of field: VkVideoEncodeH265PictureInfoKHR::pStdPictureInfo"]
        [::core::mem::offset_of!(VkVideoEncodeH265PictureInfoKHR, pStdPictureInfo) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeH265DpbSlotInfoKHR"]
        [::core::mem::size_of::<VkVideoEncodeH265DpbSlotInfoKHR>() - 12usize];
    ["Alignment of VkVideoEncodeH265DpbSlotInfoKHR"]
        [::core::mem::align_of::<VkVideoEncodeH265DpbSlotInfoKHR>() - 4usize];
    ["Offset of field: VkVideoEncodeH265DpbSlotInfoKHR::sType"]
        [::core::mem::offset_of!(VkVideoEncodeH265DpbSlotInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoEncodeH265DpbSlotInfoKHR::pNext"]
        [::core::mem::offset_of!(VkVideoEncodeH265DpbSlotInfoKHR, pNext) - 4usize];
    ["Offset of field: VkVideoEncodeH265DpbSlotInfoKHR::pStdReferenceInfo"]
        [::core::mem::offset_of!(VkVideoEncodeH265DpbSlotInfoKHR, pStdReferenceInfo) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeH265ProfileInfoKHR"]
        [::core::mem::size_of::<VkVideoEncodeH265ProfileInfoKHR>() - 12usize];
    ["Alignment of VkVideoEncodeH265ProfileInfoKHR"]
        [::core::mem::align_of::<VkVideoEncodeH265ProfileInfoKHR>() - 4usize];
    ["Offset of field: VkVideoEncodeH265ProfileInfoKHR::sType"]
        [::core::mem::offset_of!(VkVideoEncodeH265ProfileInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoEncodeH265ProfileInfoKHR::pNext"]
        [::core::mem::offset_of!(VkVideoEncodeH265ProfileInfoKHR, pNext) - 4usize];
    ["Offset of field: VkVideoEncodeH265ProfileInfoKHR::stdProfileIdc"]
        [::core::mem::offset_of!(VkVideoEncodeH265ProfileInfoKHR, stdProfileIdc) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeH265RateControlInfoKHR"]
        [::core::mem::size_of::<VkVideoEncodeH265RateControlInfoKHR>() - 28usize];
    ["Alignment of VkVideoEncodeH265RateControlInfoKHR"]
        [::core::mem::align_of::<VkVideoEncodeH265RateControlInfoKHR>() - 4usize];
    ["Offset of field: VkVideoEncodeH265RateControlInfoKHR::sType"]
        [::core::mem::offset_of!(VkVideoEncodeH265RateControlInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoEncodeH265RateControlInfoKHR::pNext"]
        [::core::mem::offset_of!(VkVideoEncodeH265RateControlInfoKHR, pNext) - 4usize];
    ["Offset of field: VkVideoEncodeH265RateControlInfoKHR::flags"]
        [::core::mem::offset_of!(VkVideoEncodeH265RateControlInfoKHR, flags) - 8usize];
    ["Offset of field: VkVideoEncodeH265RateControlInfoKHR::gopFrameCount"]
        [::core::mem::offset_of!(VkVideoEncodeH265RateControlInfoKHR, gopFrameCount) - 12usize];
    ["Offset of field: VkVideoEncodeH265RateControlInfoKHR::idrPeriod"]
        [::core::mem::offset_of!(VkVideoEncodeH265RateControlInfoKHR, idrPeriod) - 16usize];
    ["Offset of field: VkVideoEncodeH265RateControlInfoKHR::consecutiveBFrameCount"][::core::mem::offset_of!(
        VkVideoEncodeH265RateControlInfoKHR,
        consecutiveBFrameCount
    ) - 20usize];
    ["Offset of field: VkVideoEncodeH265RateControlInfoKHR::subLayerCount"]
        [::core::mem::offset_of!(VkVideoEncodeH265RateControlInfoKHR, subLayerCount) - 24usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeH265FrameSizeKHR"]
        [::core::mem::size_of::<VkVideoEncodeH265FrameSizeKHR>() - 12usize];
    ["Alignment of VkVideoEncodeH265FrameSizeKHR"]
        [::core::mem::align_of::<VkVideoEncodeH265FrameSizeKHR>() - 4usize];
    ["Offset of field: VkVideoEncodeH265FrameSizeKHR::frameISize"]
        [::core::mem::offset_of!(VkVideoEncodeH265FrameSizeKHR, frameISize) - 0usize];
    ["Offset of field: VkVideoEncodeH265FrameSizeKHR::framePSize"]
        [::core::mem::offset_of!(VkVideoEncodeH265FrameSizeKHR, framePSize) - 4usize];
    ["Offset of field: VkVideoEncodeH265FrameSizeKHR::frameBSize"]
        [::core::mem::offset_of!(VkVideoEncodeH265FrameSizeKHR, frameBSize) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeH265RateControlLayerInfoKHR"]
        [::core::mem::size_of::<VkVideoEncodeH265RateControlLayerInfoKHR>() - 56usize];
    ["Alignment of VkVideoEncodeH265RateControlLayerInfoKHR"]
        [::core::mem::align_of::<VkVideoEncodeH265RateControlLayerInfoKHR>() - 4usize];
    ["Offset of field: VkVideoEncodeH265RateControlLayerInfoKHR::sType"]
        [::core::mem::offset_of!(VkVideoEncodeH265RateControlLayerInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoEncodeH265RateControlLayerInfoKHR::pNext"]
        [::core::mem::offset_of!(VkVideoEncodeH265RateControlLayerInfoKHR, pNext) - 4usize];
    ["Offset of field: VkVideoEncodeH265RateControlLayerInfoKHR::useMinQp"]
        [::core::mem::offset_of!(VkVideoEncodeH265RateControlLayerInfoKHR, useMinQp) - 8usize];
    ["Offset of field: VkVideoEncodeH265RateControlLayerInfoKHR::minQp"]
        [::core::mem::offset_of!(VkVideoEncodeH265RateControlLayerInfoKHR, minQp) - 12usize];
    ["Offset of field: VkVideoEncodeH265RateControlLayerInfoKHR::useMaxQp"]
        [::core::mem::offset_of!(VkVideoEncodeH265RateControlLayerInfoKHR, useMaxQp) - 24usize];
    ["Offset of field: VkVideoEncodeH265RateControlLayerInfoKHR::maxQp"]
        [::core::mem::offset_of!(VkVideoEncodeH265RateControlLayerInfoKHR, maxQp) - 28usize];
    ["Offset of field: VkVideoEncodeH265RateControlLayerInfoKHR::useMaxFrameSize"][::core::mem::offset_of!(
        VkVideoEncodeH265RateControlLayerInfoKHR,
        useMaxFrameSize
    ) - 40usize];
    ["Offset of field: VkVideoEncodeH265RateControlLayerInfoKHR::maxFrameSize"]
        [::core::mem::offset_of!(VkVideoEncodeH265RateControlLayerInfoKHR, maxFrameSize) - 44usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeH265GopRemainingFrameInfoKHR"]
        [::core::mem::size_of::<VkVideoEncodeH265GopRemainingFrameInfoKHR>() - 24usize];
    ["Alignment of VkVideoEncodeH265GopRemainingFrameInfoKHR"]
        [::core::mem::align_of::<VkVideoEncodeH265GopRemainingFrameInfoKHR>() - 4usize];
    ["Offset of field: VkVideoEncodeH265GopRemainingFrameInfoKHR::sType"]
        [::core::mem::offset_of!(VkVideoEncodeH265GopRemainingFrameInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoEncodeH265GopRemainingFrameInfoKHR::pNext"]
        [::core::mem::offset_of!(VkVideoEncodeH265GopRemainingFrameInfoKHR, pNext) - 4usize];
    ["Offset of field: VkVideoEncodeH265GopRemainingFrameInfoKHR::useGopRemainingFrames"][::core::mem::offset_of!(
        VkVideoEncodeH265GopRemainingFrameInfoKHR,
        useGopRemainingFrames
    )
        - 8usize];
    ["Offset of field: VkVideoEncodeH265GopRemainingFrameInfoKHR::gopRemainingI"][::core::mem::offset_of!(
        VkVideoEncodeH265GopRemainingFrameInfoKHR,
        gopRemainingI
    ) - 12usize];
    ["Offset of field: VkVideoEncodeH265GopRemainingFrameInfoKHR::gopRemainingP"][::core::mem::offset_of!(
        VkVideoEncodeH265GopRemainingFrameInfoKHR,
        gopRemainingP
    ) - 16usize];
    ["Offset of field: VkVideoEncodeH265GopRemainingFrameInfoKHR::gopRemainingB"][::core::mem::offset_of!(
        VkVideoEncodeH265GopRemainingFrameInfoKHR,
        gopRemainingB
    ) - 20usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoDecodeH264PictureInfoFlags"]
        [::core::mem::size_of::<StdVideoDecodeH264PictureInfoFlags>() - 4usize];
    ["Alignment of StdVideoDecodeH264PictureInfoFlags"]
        [::core::mem::align_of::<StdVideoDecodeH264PictureInfoFlags>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoDecodeH264PictureInfo"]
        [::core::mem::size_of::<StdVideoDecodeH264PictureInfo>() - 20usize];
    ["Alignment of StdVideoDecodeH264PictureInfo"]
        [::core::mem::align_of::<StdVideoDecodeH264PictureInfo>() - 4usize];
    ["Offset of field: StdVideoDecodeH264PictureInfo::flags"]
        [::core::mem::offset_of!(StdVideoDecodeH264PictureInfo, flags) - 0usize];
    ["Offset of field: StdVideoDecodeH264PictureInfo::seq_parameter_set_id"]
        [::core::mem::offset_of!(StdVideoDecodeH264PictureInfo, seq_parameter_set_id) - 4usize];
    ["Offset of field: StdVideoDecodeH264PictureInfo::pic_parameter_set_id"]
        [::core::mem::offset_of!(StdVideoDecodeH264PictureInfo, pic_parameter_set_id) - 5usize];
    ["Offset of field: StdVideoDecodeH264PictureInfo::reserved1"]
        [::core::mem::offset_of!(StdVideoDecodeH264PictureInfo, reserved1) - 6usize];
    ["Offset of field: StdVideoDecodeH264PictureInfo::reserved2"]
        [::core::mem::offset_of!(StdVideoDecodeH264PictureInfo, reserved2) - 7usize];
    ["Offset of field: StdVideoDecodeH264PictureInfo::frame_num"]
        [::core::mem::offset_of!(StdVideoDecodeH264PictureInfo, frame_num) - 8usize];
    ["Offset of field: StdVideoDecodeH264PictureInfo::idr_pic_id"]
        [::core::mem::offset_of!(StdVideoDecodeH264PictureInfo, idr_pic_id) - 10usize];
    ["Offset of field: StdVideoDecodeH264PictureInfo::PicOrderCnt"]
        [::core::mem::offset_of!(StdVideoDecodeH264PictureInfo, PicOrderCnt) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoDecodeH264ReferenceInfoFlags"]
        [::core::mem::size_of::<StdVideoDecodeH264ReferenceInfoFlags>() - 4usize];
    ["Alignment of StdVideoDecodeH264ReferenceInfoFlags"]
        [::core::mem::align_of::<StdVideoDecodeH264ReferenceInfoFlags>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoDecodeH264ReferenceInfo"]
        [::core::mem::size_of::<StdVideoDecodeH264ReferenceInfo>() - 16usize];
    ["Alignment of StdVideoDecodeH264ReferenceInfo"]
        [::core::mem::align_of::<StdVideoDecodeH264ReferenceInfo>() - 4usize];
    ["Offset of field: StdVideoDecodeH264ReferenceInfo::flags"]
        [::core::mem::offset_of!(StdVideoDecodeH264ReferenceInfo, flags) - 0usize];
    ["Offset of field: StdVideoDecodeH264ReferenceInfo::FrameNum"]
        [::core::mem::offset_of!(StdVideoDecodeH264ReferenceInfo, FrameNum) - 4usize];
    ["Offset of field: StdVideoDecodeH264ReferenceInfo::reserved"]
        [::core::mem::offset_of!(StdVideoDecodeH264ReferenceInfo, reserved) - 6usize];
    ["Offset of field: StdVideoDecodeH264ReferenceInfo::PicOrderCnt"]
        [::core::mem::offset_of!(StdVideoDecodeH264ReferenceInfo, PicOrderCnt) - 8usize];
};
pub const VkVideoDecodeH264PictureLayoutFlagBitsKHR_VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_PROGRESSIVE_KHR : VkVideoDecodeH264PictureLayoutFlagBitsKHR = 0 ;
pub const VkVideoDecodeH264PictureLayoutFlagBitsKHR_VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_INTERLACED_INTERLEAVED_LINES_BIT_KHR : VkVideoDecodeH264PictureLayoutFlagBitsKHR = 1 ;
pub const VkVideoDecodeH264PictureLayoutFlagBitsKHR_VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_INTERLACED_SEPARATE_PLANES_BIT_KHR : VkVideoDecodeH264PictureLayoutFlagBitsKHR = 2 ;
pub const VkVideoDecodeH264PictureLayoutFlagBitsKHR_VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_FLAG_BITS_MAX_ENUM_KHR : VkVideoDecodeH264PictureLayoutFlagBitsKHR = 2147483647 ;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoDecodeH264ProfileInfoKHR"]
        [::core::mem::size_of::<VkVideoDecodeH264ProfileInfoKHR>() - 16usize];
    ["Alignment of VkVideoDecodeH264ProfileInfoKHR"]
        [::core::mem::align_of::<VkVideoDecodeH264ProfileInfoKHR>() - 4usize];
    ["Offset of field: VkVideoDecodeH264ProfileInfoKHR::sType"]
        [::core::mem::offset_of!(VkVideoDecodeH264ProfileInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoDecodeH264ProfileInfoKHR::pNext"]
        [::core::mem::offset_of!(VkVideoDecodeH264ProfileInfoKHR, pNext) - 4usize];
    ["Offset of field: VkVideoDecodeH264ProfileInfoKHR::stdProfileIdc"]
        [::core::mem::offset_of!(VkVideoDecodeH264ProfileInfoKHR, stdProfileIdc) - 8usize];
    ["Offset of field: VkVideoDecodeH264ProfileInfoKHR::pictureLayout"]
        [::core::mem::offset_of!(VkVideoDecodeH264ProfileInfoKHR, pictureLayout) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoDecodeH264CapabilitiesKHR"]
        [::core::mem::size_of::<VkVideoDecodeH264CapabilitiesKHR>() - 20usize];
    ["Alignment of VkVideoDecodeH264CapabilitiesKHR"]
        [::core::mem::align_of::<VkVideoDecodeH264CapabilitiesKHR>() - 4usize];
    ["Offset of field: VkVideoDecodeH264CapabilitiesKHR::sType"]
        [::core::mem::offset_of!(VkVideoDecodeH264CapabilitiesKHR, sType) - 0usize];
    ["Offset of field: VkVideoDecodeH264CapabilitiesKHR::pNext"]
        [::core::mem::offset_of!(VkVideoDecodeH264CapabilitiesKHR, pNext) - 4usize];
    ["Offset of field: VkVideoDecodeH264CapabilitiesKHR::maxLevelIdc"]
        [::core::mem::offset_of!(VkVideoDecodeH264CapabilitiesKHR, maxLevelIdc) - 8usize];
    ["Offset of field: VkVideoDecodeH264CapabilitiesKHR::fieldOffsetGranularity"][::core::mem::offset_of!(
        VkVideoDecodeH264CapabilitiesKHR,
        fieldOffsetGranularity
    ) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoDecodeH264SessionParametersAddInfoKHR"]
        [::core::mem::size_of::<VkVideoDecodeH264SessionParametersAddInfoKHR>() - 24usize];
    ["Alignment of VkVideoDecodeH264SessionParametersAddInfoKHR"]
        [::core::mem::align_of::<VkVideoDecodeH264SessionParametersAddInfoKHR>() - 4usize];
    ["Offset of field: VkVideoDecodeH264SessionParametersAddInfoKHR::sType"]
        [::core::mem::offset_of!(VkVideoDecodeH264SessionParametersAddInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoDecodeH264SessionParametersAddInfoKHR::pNext"]
        [::core::mem::offset_of!(VkVideoDecodeH264SessionParametersAddInfoKHR, pNext) - 4usize];
    ["Offset of field: VkVideoDecodeH264SessionParametersAddInfoKHR::stdSPSCount"][::core::mem::offset_of!(
        VkVideoDecodeH264SessionParametersAddInfoKHR,
        stdSPSCount
    ) - 8usize];
    ["Offset of field: VkVideoDecodeH264SessionParametersAddInfoKHR::pStdSPSs"]
        [::core::mem::offset_of!(VkVideoDecodeH264SessionParametersAddInfoKHR, pStdSPSs) - 12usize];
    ["Offset of field: VkVideoDecodeH264SessionParametersAddInfoKHR::stdPPSCount"][::core::mem::offset_of!(
        VkVideoDecodeH264SessionParametersAddInfoKHR,
        stdPPSCount
    ) - 16usize];
    ["Offset of field: VkVideoDecodeH264SessionParametersAddInfoKHR::pStdPPSs"]
        [::core::mem::offset_of!(VkVideoDecodeH264SessionParametersAddInfoKHR, pStdPPSs) - 20usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoDecodeH264SessionParametersCreateInfoKHR"]
        [::core::mem::size_of::<VkVideoDecodeH264SessionParametersCreateInfoKHR>() - 20usize];
    ["Alignment of VkVideoDecodeH264SessionParametersCreateInfoKHR"]
        [::core::mem::align_of::<VkVideoDecodeH264SessionParametersCreateInfoKHR>() - 4usize];
    ["Offset of field: VkVideoDecodeH264SessionParametersCreateInfoKHR::sType"]
        [::core::mem::offset_of!(VkVideoDecodeH264SessionParametersCreateInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoDecodeH264SessionParametersCreateInfoKHR::pNext"]
        [::core::mem::offset_of!(VkVideoDecodeH264SessionParametersCreateInfoKHR, pNext) - 4usize];
    ["Offset of field: VkVideoDecodeH264SessionParametersCreateInfoKHR::maxStdSPSCount"][::core::mem::offset_of!(
        VkVideoDecodeH264SessionParametersCreateInfoKHR,
        maxStdSPSCount
    )
        - 8usize];
    ["Offset of field: VkVideoDecodeH264SessionParametersCreateInfoKHR::maxStdPPSCount"][::core::mem::offset_of!(
        VkVideoDecodeH264SessionParametersCreateInfoKHR,
        maxStdPPSCount
    )
        - 12usize];
    ["Offset of field: VkVideoDecodeH264SessionParametersCreateInfoKHR::pParametersAddInfo"][::core::mem::offset_of!(
        VkVideoDecodeH264SessionParametersCreateInfoKHR,
        pParametersAddInfo
    )
        - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoDecodeH264PictureInfoKHR"]
        [::core::mem::size_of::<VkVideoDecodeH264PictureInfoKHR>() - 20usize];
    ["Alignment of VkVideoDecodeH264PictureInfoKHR"]
        [::core::mem::align_of::<VkVideoDecodeH264PictureInfoKHR>() - 4usize];
    ["Offset of field: VkVideoDecodeH264PictureInfoKHR::sType"]
        [::core::mem::offset_of!(VkVideoDecodeH264PictureInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoDecodeH264PictureInfoKHR::pNext"]
        [::core::mem::offset_of!(VkVideoDecodeH264PictureInfoKHR, pNext) - 4usize];
    ["Offset of field: VkVideoDecodeH264PictureInfoKHR::pStdPictureInfo"]
        [::core::mem::offset_of!(VkVideoDecodeH264PictureInfoKHR, pStdPictureInfo) - 8usize];
    ["Offset of field: VkVideoDecodeH264PictureInfoKHR::sliceCount"]
        [::core::mem::offset_of!(VkVideoDecodeH264PictureInfoKHR, sliceCount) - 12usize];
    ["Offset of field: VkVideoDecodeH264PictureInfoKHR::pSliceOffsets"]
        [::core::mem::offset_of!(VkVideoDecodeH264PictureInfoKHR, pSliceOffsets) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoDecodeH264DpbSlotInfoKHR"]
        [::core::mem::size_of::<VkVideoDecodeH264DpbSlotInfoKHR>() - 12usize];
    ["Alignment of VkVideoDecodeH264DpbSlotInfoKHR"]
        [::core::mem::align_of::<VkVideoDecodeH264DpbSlotInfoKHR>() - 4usize];
    ["Offset of field: VkVideoDecodeH264DpbSlotInfoKHR::sType"]
        [::core::mem::offset_of!(VkVideoDecodeH264DpbSlotInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoDecodeH264DpbSlotInfoKHR::pNext"]
        [::core::mem::offset_of!(VkVideoDecodeH264DpbSlotInfoKHR, pNext) - 4usize];
    ["Offset of field: VkVideoDecodeH264DpbSlotInfoKHR::pStdReferenceInfo"]
        [::core::mem::offset_of!(VkVideoDecodeH264DpbSlotInfoKHR, pStdReferenceInfo) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkImportMemoryFdInfoKHR"]
        [::core::mem::size_of::<VkImportMemoryFdInfoKHR>() - 16usize];
    ["Alignment of VkImportMemoryFdInfoKHR"]
        [::core::mem::align_of::<VkImportMemoryFdInfoKHR>() - 4usize];
    ["Offset of field: VkImportMemoryFdInfoKHR::sType"]
        [::core::mem::offset_of!(VkImportMemoryFdInfoKHR, sType) - 0usize];
    ["Offset of field: VkImportMemoryFdInfoKHR::pNext"]
        [::core::mem::offset_of!(VkImportMemoryFdInfoKHR, pNext) - 4usize];
    ["Offset of field: VkImportMemoryFdInfoKHR::handleType"]
        [::core::mem::offset_of!(VkImportMemoryFdInfoKHR, handleType) - 8usize];
    ["Offset of field: VkImportMemoryFdInfoKHR::fd"]
        [::core::mem::offset_of!(VkImportMemoryFdInfoKHR, fd) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkMemoryFdPropertiesKHR"]
        [::core::mem::size_of::<VkMemoryFdPropertiesKHR>() - 12usize];
    ["Alignment of VkMemoryFdPropertiesKHR"]
        [::core::mem::align_of::<VkMemoryFdPropertiesKHR>() - 4usize];
    ["Offset of field: VkMemoryFdPropertiesKHR::sType"]
        [::core::mem::offset_of!(VkMemoryFdPropertiesKHR, sType) - 0usize];
    ["Offset of field: VkMemoryFdPropertiesKHR::pNext"]
        [::core::mem::offset_of!(VkMemoryFdPropertiesKHR, pNext) - 4usize];
    ["Offset of field: VkMemoryFdPropertiesKHR::memoryTypeBits"]
        [::core::mem::offset_of!(VkMemoryFdPropertiesKHR, memoryTypeBits) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkMemoryGetFdInfoKHR"][::core::mem::size_of::<VkMemoryGetFdInfoKHR>() - 24usize];
    ["Alignment of VkMemoryGetFdInfoKHR"][::core::mem::align_of::<VkMemoryGetFdInfoKHR>() - 8usize];
    ["Offset of field: VkMemoryGetFdInfoKHR::sType"]
        [::core::mem::offset_of!(VkMemoryGetFdInfoKHR, sType) - 0usize];
    ["Offset of field: VkMemoryGetFdInfoKHR::pNext"]
        [::core::mem::offset_of!(VkMemoryGetFdInfoKHR, pNext) - 4usize];
    ["Offset of field: VkMemoryGetFdInfoKHR::memory"]
        [::core::mem::offset_of!(VkMemoryGetFdInfoKHR, memory) - 8usize];
    ["Offset of field: VkMemoryGetFdInfoKHR::handleType"]
        [::core::mem::offset_of!(VkMemoryGetFdInfoKHR, handleType) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkImportSemaphoreFdInfoKHR"]
        [::core::mem::size_of::<VkImportSemaphoreFdInfoKHR>() - 32usize];
    ["Alignment of VkImportSemaphoreFdInfoKHR"]
        [::core::mem::align_of::<VkImportSemaphoreFdInfoKHR>() - 8usize];
    ["Offset of field: VkImportSemaphoreFdInfoKHR::sType"]
        [::core::mem::offset_of!(VkImportSemaphoreFdInfoKHR, sType) - 0usize];
    ["Offset of field: VkImportSemaphoreFdInfoKHR::pNext"]
        [::core::mem::offset_of!(VkImportSemaphoreFdInfoKHR, pNext) - 4usize];
    ["Offset of field: VkImportSemaphoreFdInfoKHR::semaphore"]
        [::core::mem::offset_of!(VkImportSemaphoreFdInfoKHR, semaphore) - 8usize];
    ["Offset of field: VkImportSemaphoreFdInfoKHR::flags"]
        [::core::mem::offset_of!(VkImportSemaphoreFdInfoKHR, flags) - 16usize];
    ["Offset of field: VkImportSemaphoreFdInfoKHR::handleType"]
        [::core::mem::offset_of!(VkImportSemaphoreFdInfoKHR, handleType) - 20usize];
    ["Offset of field: VkImportSemaphoreFdInfoKHR::fd"]
        [::core::mem::offset_of!(VkImportSemaphoreFdInfoKHR, fd) - 24usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSemaphoreGetFdInfoKHR"]
        [::core::mem::size_of::<VkSemaphoreGetFdInfoKHR>() - 24usize];
    ["Alignment of VkSemaphoreGetFdInfoKHR"]
        [::core::mem::align_of::<VkSemaphoreGetFdInfoKHR>() - 8usize];
    ["Offset of field: VkSemaphoreGetFdInfoKHR::sType"]
        [::core::mem::offset_of!(VkSemaphoreGetFdInfoKHR, sType) - 0usize];
    ["Offset of field: VkSemaphoreGetFdInfoKHR::pNext"]
        [::core::mem::offset_of!(VkSemaphoreGetFdInfoKHR, pNext) - 4usize];
    ["Offset of field: VkSemaphoreGetFdInfoKHR::semaphore"]
        [::core::mem::offset_of!(VkSemaphoreGetFdInfoKHR, semaphore) - 8usize];
    ["Offset of field: VkSemaphoreGetFdInfoKHR::handleType"]
        [::core::mem::offset_of!(VkSemaphoreGetFdInfoKHR, handleType) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkRectLayerKHR"][::core::mem::size_of::<VkRectLayerKHR>() - 20usize];
    ["Alignment of VkRectLayerKHR"][::core::mem::align_of::<VkRectLayerKHR>() - 4usize];
    ["Offset of field: VkRectLayerKHR::offset"]
        [::core::mem::offset_of!(VkRectLayerKHR, offset) - 0usize];
    ["Offset of field: VkRectLayerKHR::extent"]
        [::core::mem::offset_of!(VkRectLayerKHR, extent) - 8usize];
    ["Offset of field: VkRectLayerKHR::layer"]
        [::core::mem::offset_of!(VkRectLayerKHR, layer) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPresentRegionKHR"][::core::mem::size_of::<VkPresentRegionKHR>() - 8usize];
    ["Alignment of VkPresentRegionKHR"][::core::mem::align_of::<VkPresentRegionKHR>() - 4usize];
    ["Offset of field: VkPresentRegionKHR::rectangleCount"]
        [::core::mem::offset_of!(VkPresentRegionKHR, rectangleCount) - 0usize];
    ["Offset of field: VkPresentRegionKHR::pRectangles"]
        [::core::mem::offset_of!(VkPresentRegionKHR, pRectangles) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPresentRegionsKHR"][::core::mem::size_of::<VkPresentRegionsKHR>() - 16usize];
    ["Alignment of VkPresentRegionsKHR"][::core::mem::align_of::<VkPresentRegionsKHR>() - 4usize];
    ["Offset of field: VkPresentRegionsKHR::sType"]
        [::core::mem::offset_of!(VkPresentRegionsKHR, sType) - 0usize];
    ["Offset of field: VkPresentRegionsKHR::pNext"]
        [::core::mem::offset_of!(VkPresentRegionsKHR, pNext) - 4usize];
    ["Offset of field: VkPresentRegionsKHR::swapchainCount"]
        [::core::mem::offset_of!(VkPresentRegionsKHR, swapchainCount) - 8usize];
    ["Offset of field: VkPresentRegionsKHR::pRegions"]
        [::core::mem::offset_of!(VkPresentRegionsKHR, pRegions) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSharedPresentSurfaceCapabilitiesKHR"]
        [::core::mem::size_of::<VkSharedPresentSurfaceCapabilitiesKHR>() - 12usize];
    ["Alignment of VkSharedPresentSurfaceCapabilitiesKHR"]
        [::core::mem::align_of::<VkSharedPresentSurfaceCapabilitiesKHR>() - 4usize];
    ["Offset of field: VkSharedPresentSurfaceCapabilitiesKHR::sType"]
        [::core::mem::offset_of!(VkSharedPresentSurfaceCapabilitiesKHR, sType) - 0usize];
    ["Offset of field: VkSharedPresentSurfaceCapabilitiesKHR::pNext"]
        [::core::mem::offset_of!(VkSharedPresentSurfaceCapabilitiesKHR, pNext) - 4usize];
    ["Offset of field: VkSharedPresentSurfaceCapabilitiesKHR::sharedPresentSupportedUsageFlags"][::core::mem::offset_of!(
        VkSharedPresentSurfaceCapabilitiesKHR,
        sharedPresentSupportedUsageFlags
    )
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkImportFenceFdInfoKHR"][::core::mem::size_of::<VkImportFenceFdInfoKHR>() - 32usize];
    ["Alignment of VkImportFenceFdInfoKHR"]
        [::core::mem::align_of::<VkImportFenceFdInfoKHR>() - 8usize];
    ["Offset of field: VkImportFenceFdInfoKHR::sType"]
        [::core::mem::offset_of!(VkImportFenceFdInfoKHR, sType) - 0usize];
    ["Offset of field: VkImportFenceFdInfoKHR::pNext"]
        [::core::mem::offset_of!(VkImportFenceFdInfoKHR, pNext) - 4usize];
    ["Offset of field: VkImportFenceFdInfoKHR::fence"]
        [::core::mem::offset_of!(VkImportFenceFdInfoKHR, fence) - 8usize];
    ["Offset of field: VkImportFenceFdInfoKHR::flags"]
        [::core::mem::offset_of!(VkImportFenceFdInfoKHR, flags) - 16usize];
    ["Offset of field: VkImportFenceFdInfoKHR::handleType"]
        [::core::mem::offset_of!(VkImportFenceFdInfoKHR, handleType) - 20usize];
    ["Offset of field: VkImportFenceFdInfoKHR::fd"]
        [::core::mem::offset_of!(VkImportFenceFdInfoKHR, fd) - 24usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkFenceGetFdInfoKHR"][::core::mem::size_of::<VkFenceGetFdInfoKHR>() - 24usize];
    ["Alignment of VkFenceGetFdInfoKHR"][::core::mem::align_of::<VkFenceGetFdInfoKHR>() - 8usize];
    ["Offset of field: VkFenceGetFdInfoKHR::sType"]
        [::core::mem::offset_of!(VkFenceGetFdInfoKHR, sType) - 0usize];
    ["Offset of field: VkFenceGetFdInfoKHR::pNext"]
        [::core::mem::offset_of!(VkFenceGetFdInfoKHR, pNext) - 4usize];
    ["Offset of field: VkFenceGetFdInfoKHR::fence"]
        [::core::mem::offset_of!(VkFenceGetFdInfoKHR, fence) - 8usize];
    ["Offset of field: VkFenceGetFdInfoKHR::handleType"]
        [::core::mem::offset_of!(VkFenceGetFdInfoKHR, handleType) - 16usize];
};
pub const VkPerformanceCounterUnitKHR_VK_PERFORMANCE_COUNTER_UNIT_GENERIC_KHR:
    VkPerformanceCounterUnitKHR = 0;
pub const VkPerformanceCounterUnitKHR_VK_PERFORMANCE_COUNTER_UNIT_PERCENTAGE_KHR:
    VkPerformanceCounterUnitKHR = 1;
pub const VkPerformanceCounterUnitKHR_VK_PERFORMANCE_COUNTER_UNIT_NANOSECONDS_KHR:
    VkPerformanceCounterUnitKHR = 2;
pub const VkPerformanceCounterUnitKHR_VK_PERFORMANCE_COUNTER_UNIT_BYTES_KHR:
    VkPerformanceCounterUnitKHR = 3;
pub const VkPerformanceCounterUnitKHR_VK_PERFORMANCE_COUNTER_UNIT_BYTES_PER_SECOND_KHR:
    VkPerformanceCounterUnitKHR = 4;
pub const VkPerformanceCounterUnitKHR_VK_PERFORMANCE_COUNTER_UNIT_KELVIN_KHR:
    VkPerformanceCounterUnitKHR = 5;
pub const VkPerformanceCounterUnitKHR_VK_PERFORMANCE_COUNTER_UNIT_WATTS_KHR:
    VkPerformanceCounterUnitKHR = 6;
pub const VkPerformanceCounterUnitKHR_VK_PERFORMANCE_COUNTER_UNIT_VOLTS_KHR:
    VkPerformanceCounterUnitKHR = 7;
pub const VkPerformanceCounterUnitKHR_VK_PERFORMANCE_COUNTER_UNIT_AMPS_KHR:
    VkPerformanceCounterUnitKHR = 8;
pub const VkPerformanceCounterUnitKHR_VK_PERFORMANCE_COUNTER_UNIT_HERTZ_KHR:
    VkPerformanceCounterUnitKHR = 9;
pub const VkPerformanceCounterUnitKHR_VK_PERFORMANCE_COUNTER_UNIT_CYCLES_KHR:
    VkPerformanceCounterUnitKHR = 10;
pub const VkPerformanceCounterUnitKHR_VK_PERFORMANCE_COUNTER_UNIT_MAX_ENUM_KHR:
    VkPerformanceCounterUnitKHR = 2147483647;
pub const VkPerformanceCounterScopeKHR_VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR:
    VkPerformanceCounterScopeKHR = 0;
pub const VkPerformanceCounterScopeKHR_VK_PERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHR:
    VkPerformanceCounterScopeKHR = 1;
pub const VkPerformanceCounterScopeKHR_VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_KHR:
    VkPerformanceCounterScopeKHR = 2;
#[doc = " VK_QUERY_SCOPE_COMMAND_BUFFER_KHR is a deprecated alias"]
pub const VkPerformanceCounterScopeKHR_VK_QUERY_SCOPE_COMMAND_BUFFER_KHR:
    VkPerformanceCounterScopeKHR = 0;
#[doc = " VK_QUERY_SCOPE_RENDER_PASS_KHR is a deprecated alias"]
pub const VkPerformanceCounterScopeKHR_VK_QUERY_SCOPE_RENDER_PASS_KHR:
    VkPerformanceCounterScopeKHR = 1;
#[doc = " VK_QUERY_SCOPE_COMMAND_KHR is a deprecated alias"]
pub const VkPerformanceCounterScopeKHR_VK_QUERY_SCOPE_COMMAND_KHR: VkPerformanceCounterScopeKHR = 2;
#[doc = " VK_QUERY_SCOPE_COMMAND_KHR is a deprecated alias"]
pub const VkPerformanceCounterScopeKHR_VK_PERFORMANCE_COUNTER_SCOPE_MAX_ENUM_KHR:
    VkPerformanceCounterScopeKHR = 2147483647;
pub const VkPerformanceCounterStorageKHR_VK_PERFORMANCE_COUNTER_STORAGE_INT32_KHR:
    VkPerformanceCounterStorageKHR = 0;
pub const VkPerformanceCounterStorageKHR_VK_PERFORMANCE_COUNTER_STORAGE_INT64_KHR:
    VkPerformanceCounterStorageKHR = 1;
pub const VkPerformanceCounterStorageKHR_VK_PERFORMANCE_COUNTER_STORAGE_UINT32_KHR:
    VkPerformanceCounterStorageKHR = 2;
pub const VkPerformanceCounterStorageKHR_VK_PERFORMANCE_COUNTER_STORAGE_UINT64_KHR:
    VkPerformanceCounterStorageKHR = 3;
pub const VkPerformanceCounterStorageKHR_VK_PERFORMANCE_COUNTER_STORAGE_FLOAT32_KHR:
    VkPerformanceCounterStorageKHR = 4;
pub const VkPerformanceCounterStorageKHR_VK_PERFORMANCE_COUNTER_STORAGE_FLOAT64_KHR:
    VkPerformanceCounterStorageKHR = 5;
pub const VkPerformanceCounterStorageKHR_VK_PERFORMANCE_COUNTER_STORAGE_MAX_ENUM_KHR:
    VkPerformanceCounterStorageKHR = 2147483647;
pub const VkPerformanceCounterDescriptionFlagBitsKHR_VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_BIT_KHR : VkPerformanceCounterDescriptionFlagBitsKHR = 1 ;
pub const VkPerformanceCounterDescriptionFlagBitsKHR_VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_BIT_KHR : VkPerformanceCounterDescriptionFlagBitsKHR = 2 ;
#[doc = " VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_KHR is a deprecated alias"]
pub const VkPerformanceCounterDescriptionFlagBitsKHR_VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_KHR : VkPerformanceCounterDescriptionFlagBitsKHR = 1 ;
#[doc = " VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_KHR is a deprecated alias"]
pub const VkPerformanceCounterDescriptionFlagBitsKHR_VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_KHR : VkPerformanceCounterDescriptionFlagBitsKHR = 2 ;
#[doc = " VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_KHR is a deprecated alias"]
pub const VkPerformanceCounterDescriptionFlagBitsKHR_VK_PERFORMANCE_COUNTER_DESCRIPTION_FLAG_BITS_MAX_ENUM_KHR : VkPerformanceCounterDescriptionFlagBitsKHR = 2147483647 ;
pub const VkAcquireProfilingLockFlagBitsKHR_VK_ACQUIRE_PROFILING_LOCK_FLAG_BITS_MAX_ENUM_KHR:
    VkAcquireProfilingLockFlagBitsKHR = 2147483647;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDevicePerformanceQueryFeaturesKHR"]
        [::core::mem::size_of::<VkPhysicalDevicePerformanceQueryFeaturesKHR>() - 16usize];
    ["Alignment of VkPhysicalDevicePerformanceQueryFeaturesKHR"]
        [::core::mem::align_of::<VkPhysicalDevicePerformanceQueryFeaturesKHR>() - 4usize];
    ["Offset of field: VkPhysicalDevicePerformanceQueryFeaturesKHR::sType"]
        [::core::mem::offset_of!(VkPhysicalDevicePerformanceQueryFeaturesKHR, sType) - 0usize];
    ["Offset of field: VkPhysicalDevicePerformanceQueryFeaturesKHR::pNext"]
        [::core::mem::offset_of!(VkPhysicalDevicePerformanceQueryFeaturesKHR, pNext) - 4usize];
    ["Offset of field: VkPhysicalDevicePerformanceQueryFeaturesKHR::performanceCounterQueryPools"] [:: core :: mem :: offset_of ! (VkPhysicalDevicePerformanceQueryFeaturesKHR , performanceCounterQueryPools) - 8usize] ;
    ["Offset of field: VkPhysicalDevicePerformanceQueryFeaturesKHR::performanceCounterMultipleQueryPools"] [:: core :: mem :: offset_of ! (VkPhysicalDevicePerformanceQueryFeaturesKHR , performanceCounterMultipleQueryPools) - 12usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDevicePerformanceQueryPropertiesKHR"]
        [::core::mem::size_of::<VkPhysicalDevicePerformanceQueryPropertiesKHR>() - 12usize];
    ["Alignment of VkPhysicalDevicePerformanceQueryPropertiesKHR"]
        [::core::mem::align_of::<VkPhysicalDevicePerformanceQueryPropertiesKHR>() - 4usize];
    ["Offset of field: VkPhysicalDevicePerformanceQueryPropertiesKHR::sType"]
        [::core::mem::offset_of!(VkPhysicalDevicePerformanceQueryPropertiesKHR, sType) - 0usize];
    ["Offset of field: VkPhysicalDevicePerformanceQueryPropertiesKHR::pNext"]
        [::core::mem::offset_of!(VkPhysicalDevicePerformanceQueryPropertiesKHR, pNext) - 4usize];
    ["Offset of field: VkPhysicalDevicePerformanceQueryPropertiesKHR::allowCommandBufferQueryCopies"] [:: core :: mem :: offset_of ! (VkPhysicalDevicePerformanceQueryPropertiesKHR , allowCommandBufferQueryCopies) - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPerformanceCounterKHR"]
        [::core::mem::size_of::<VkPerformanceCounterKHR>() - 36usize];
    ["Alignment of VkPerformanceCounterKHR"]
        [::core::mem::align_of::<VkPerformanceCounterKHR>() - 4usize];
    ["Offset of field: VkPerformanceCounterKHR::sType"]
        [::core::mem::offset_of!(VkPerformanceCounterKHR, sType) - 0usize];
    ["Offset of field: VkPerformanceCounterKHR::pNext"]
        [::core::mem::offset_of!(VkPerformanceCounterKHR, pNext) - 4usize];
    ["Offset of field: VkPerformanceCounterKHR::unit"]
        [::core::mem::offset_of!(VkPerformanceCounterKHR, unit) - 8usize];
    ["Offset of field: VkPerformanceCounterKHR::scope"]
        [::core::mem::offset_of!(VkPerformanceCounterKHR, scope) - 12usize];
    ["Offset of field: VkPerformanceCounterKHR::storage"]
        [::core::mem::offset_of!(VkPerformanceCounterKHR, storage) - 16usize];
    ["Offset of field: VkPerformanceCounterKHR::uuid"]
        [::core::mem::offset_of!(VkPerformanceCounterKHR, uuid) - 20usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPerformanceCounterDescriptionKHR"]
        [::core::mem::size_of::<VkPerformanceCounterDescriptionKHR>() - 780usize];
    ["Alignment of VkPerformanceCounterDescriptionKHR"]
        [::core::mem::align_of::<VkPerformanceCounterDescriptionKHR>() - 4usize];
    ["Offset of field: VkPerformanceCounterDescriptionKHR::sType"]
        [::core::mem::offset_of!(VkPerformanceCounterDescriptionKHR, sType) - 0usize];
    ["Offset of field: VkPerformanceCounterDescriptionKHR::pNext"]
        [::core::mem::offset_of!(VkPerformanceCounterDescriptionKHR, pNext) - 4usize];
    ["Offset of field: VkPerformanceCounterDescriptionKHR::flags"]
        [::core::mem::offset_of!(VkPerformanceCounterDescriptionKHR, flags) - 8usize];
    ["Offset of field: VkPerformanceCounterDescriptionKHR::name"]
        [::core::mem::offset_of!(VkPerformanceCounterDescriptionKHR, name) - 12usize];
    ["Offset of field: VkPerformanceCounterDescriptionKHR::category"]
        [::core::mem::offset_of!(VkPerformanceCounterDescriptionKHR, category) - 268usize];
    ["Offset of field: VkPerformanceCounterDescriptionKHR::description"]
        [::core::mem::offset_of!(VkPerformanceCounterDescriptionKHR, description) - 524usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkQueryPoolPerformanceCreateInfoKHR"]
        [::core::mem::size_of::<VkQueryPoolPerformanceCreateInfoKHR>() - 20usize];
    ["Alignment of VkQueryPoolPerformanceCreateInfoKHR"]
        [::core::mem::align_of::<VkQueryPoolPerformanceCreateInfoKHR>() - 4usize];
    ["Offset of field: VkQueryPoolPerformanceCreateInfoKHR::sType"]
        [::core::mem::offset_of!(VkQueryPoolPerformanceCreateInfoKHR, sType) - 0usize];
    ["Offset of field: VkQueryPoolPerformanceCreateInfoKHR::pNext"]
        [::core::mem::offset_of!(VkQueryPoolPerformanceCreateInfoKHR, pNext) - 4usize];
    ["Offset of field: VkQueryPoolPerformanceCreateInfoKHR::queueFamilyIndex"]
        [::core::mem::offset_of!(VkQueryPoolPerformanceCreateInfoKHR, queueFamilyIndex) - 8usize];
    ["Offset of field: VkQueryPoolPerformanceCreateInfoKHR::counterIndexCount"]
        [::core::mem::offset_of!(VkQueryPoolPerformanceCreateInfoKHR, counterIndexCount) - 12usize];
    ["Offset of field: VkQueryPoolPerformanceCreateInfoKHR::pCounterIndices"]
        [::core::mem::offset_of!(VkQueryPoolPerformanceCreateInfoKHR, pCounterIndices) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPerformanceCounterResultKHR"]
        [::core::mem::size_of::<VkPerformanceCounterResultKHR>() - 8usize];
    ["Alignment of VkPerformanceCounterResultKHR"]
        [::core::mem::align_of::<VkPerformanceCounterResultKHR>() - 8usize];
    ["Offset of field: VkPerformanceCounterResultKHR::int32"]
        [::core::mem::offset_of!(VkPerformanceCounterResultKHR, int32) - 0usize];
    ["Offset of field: VkPerformanceCounterResultKHR::int64"]
        [::core::mem::offset_of!(VkPerformanceCounterResultKHR, int64) - 0usize];
    ["Offset of field: VkPerformanceCounterResultKHR::uint32"]
        [::core::mem::offset_of!(VkPerformanceCounterResultKHR, uint32) - 0usize];
    ["Offset of field: VkPerformanceCounterResultKHR::uint64"]
        [::core::mem::offset_of!(VkPerformanceCounterResultKHR, uint64) - 0usize];
    ["Offset of field: VkPerformanceCounterResultKHR::float32"]
        [::core::mem::offset_of!(VkPerformanceCounterResultKHR, float32) - 0usize];
    ["Offset of field: VkPerformanceCounterResultKHR::float64"]
        [::core::mem::offset_of!(VkPerformanceCounterResultKHR, float64) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkAcquireProfilingLockInfoKHR"]
        [::core::mem::size_of::<VkAcquireProfilingLockInfoKHR>() - 24usize];
    ["Alignment of VkAcquireProfilingLockInfoKHR"]
        [::core::mem::align_of::<VkAcquireProfilingLockInfoKHR>() - 8usize];
    ["Offset of field: VkAcquireProfilingLockInfoKHR::sType"]
        [::core::mem::offset_of!(VkAcquireProfilingLockInfoKHR, sType) - 0usize];
    ["Offset of field: VkAcquireProfilingLockInfoKHR::pNext"]
        [::core::mem::offset_of!(VkAcquireProfilingLockInfoKHR, pNext) - 4usize];
    ["Offset of field: VkAcquireProfilingLockInfoKHR::flags"]
        [::core::mem::offset_of!(VkAcquireProfilingLockInfoKHR, flags) - 8usize];
    ["Offset of field: VkAcquireProfilingLockInfoKHR::timeout"]
        [::core::mem::offset_of!(VkAcquireProfilingLockInfoKHR, timeout) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPerformanceQuerySubmitInfoKHR"]
        [::core::mem::size_of::<VkPerformanceQuerySubmitInfoKHR>() - 12usize];
    ["Alignment of VkPerformanceQuerySubmitInfoKHR"]
        [::core::mem::align_of::<VkPerformanceQuerySubmitInfoKHR>() - 4usize];
    ["Offset of field: VkPerformanceQuerySubmitInfoKHR::sType"]
        [::core::mem::offset_of!(VkPerformanceQuerySubmitInfoKHR, sType) - 0usize];
    ["Offset of field: VkPerformanceQuerySubmitInfoKHR::pNext"]
        [::core::mem::offset_of!(VkPerformanceQuerySubmitInfoKHR, pNext) - 4usize];
    ["Offset of field: VkPerformanceQuerySubmitInfoKHR::counterPassIndex"]
        [::core::mem::offset_of!(VkPerformanceQuerySubmitInfoKHR, counterPassIndex) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceSurfaceInfo2KHR"]
        [::core::mem::size_of::<VkPhysicalDeviceSurfaceInfo2KHR>() - 16usize];
    ["Alignment of VkPhysicalDeviceSurfaceInfo2KHR"]
        [::core::mem::align_of::<VkPhysicalDeviceSurfaceInfo2KHR>() - 8usize];
    ["Offset of field: VkPhysicalDeviceSurfaceInfo2KHR::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceSurfaceInfo2KHR, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceSurfaceInfo2KHR::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceSurfaceInfo2KHR, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceSurfaceInfo2KHR::surface"]
        [::core::mem::offset_of!(VkPhysicalDeviceSurfaceInfo2KHR, surface) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSurfaceCapabilities2KHR"]
        [::core::mem::size_of::<VkSurfaceCapabilities2KHR>() - 60usize];
    ["Alignment of VkSurfaceCapabilities2KHR"]
        [::core::mem::align_of::<VkSurfaceCapabilities2KHR>() - 4usize];
    ["Offset of field: VkSurfaceCapabilities2KHR::sType"]
        [::core::mem::offset_of!(VkSurfaceCapabilities2KHR, sType) - 0usize];
    ["Offset of field: VkSurfaceCapabilities2KHR::pNext"]
        [::core::mem::offset_of!(VkSurfaceCapabilities2KHR, pNext) - 4usize];
    ["Offset of field: VkSurfaceCapabilities2KHR::surfaceCapabilities"]
        [::core::mem::offset_of!(VkSurfaceCapabilities2KHR, surfaceCapabilities) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSurfaceFormat2KHR"][::core::mem::size_of::<VkSurfaceFormat2KHR>() - 16usize];
    ["Alignment of VkSurfaceFormat2KHR"][::core::mem::align_of::<VkSurfaceFormat2KHR>() - 4usize];
    ["Offset of field: VkSurfaceFormat2KHR::sType"]
        [::core::mem::offset_of!(VkSurfaceFormat2KHR, sType) - 0usize];
    ["Offset of field: VkSurfaceFormat2KHR::pNext"]
        [::core::mem::offset_of!(VkSurfaceFormat2KHR, pNext) - 4usize];
    ["Offset of field: VkSurfaceFormat2KHR::surfaceFormat"]
        [::core::mem::offset_of!(VkSurfaceFormat2KHR, surfaceFormat) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDisplayProperties2KHR"]
        [::core::mem::size_of::<VkDisplayProperties2KHR>() - 48usize];
    ["Alignment of VkDisplayProperties2KHR"]
        [::core::mem::align_of::<VkDisplayProperties2KHR>() - 8usize];
    ["Offset of field: VkDisplayProperties2KHR::sType"]
        [::core::mem::offset_of!(VkDisplayProperties2KHR, sType) - 0usize];
    ["Offset of field: VkDisplayProperties2KHR::pNext"]
        [::core::mem::offset_of!(VkDisplayProperties2KHR, pNext) - 4usize];
    ["Offset of field: VkDisplayProperties2KHR::displayProperties"]
        [::core::mem::offset_of!(VkDisplayProperties2KHR, displayProperties) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDisplayPlaneProperties2KHR"]
        [::core::mem::size_of::<VkDisplayPlaneProperties2KHR>() - 24usize];
    ["Alignment of VkDisplayPlaneProperties2KHR"]
        [::core::mem::align_of::<VkDisplayPlaneProperties2KHR>() - 8usize];
    ["Offset of field: VkDisplayPlaneProperties2KHR::sType"]
        [::core::mem::offset_of!(VkDisplayPlaneProperties2KHR, sType) - 0usize];
    ["Offset of field: VkDisplayPlaneProperties2KHR::pNext"]
        [::core::mem::offset_of!(VkDisplayPlaneProperties2KHR, pNext) - 4usize];
    ["Offset of field: VkDisplayPlaneProperties2KHR::displayPlaneProperties"]
        [::core::mem::offset_of!(VkDisplayPlaneProperties2KHR, displayPlaneProperties) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDisplayModeProperties2KHR"]
        [::core::mem::size_of::<VkDisplayModeProperties2KHR>() - 32usize];
    ["Alignment of VkDisplayModeProperties2KHR"]
        [::core::mem::align_of::<VkDisplayModeProperties2KHR>() - 8usize];
    ["Offset of field: VkDisplayModeProperties2KHR::sType"]
        [::core::mem::offset_of!(VkDisplayModeProperties2KHR, sType) - 0usize];
    ["Offset of field: VkDisplayModeProperties2KHR::pNext"]
        [::core::mem::offset_of!(VkDisplayModeProperties2KHR, pNext) - 4usize];
    ["Offset of field: VkDisplayModeProperties2KHR::displayModeProperties"]
        [::core::mem::offset_of!(VkDisplayModeProperties2KHR, displayModeProperties) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDisplayPlaneInfo2KHR"][::core::mem::size_of::<VkDisplayPlaneInfo2KHR>() - 24usize];
    ["Alignment of VkDisplayPlaneInfo2KHR"]
        [::core::mem::align_of::<VkDisplayPlaneInfo2KHR>() - 8usize];
    ["Offset of field: VkDisplayPlaneInfo2KHR::sType"]
        [::core::mem::offset_of!(VkDisplayPlaneInfo2KHR, sType) - 0usize];
    ["Offset of field: VkDisplayPlaneInfo2KHR::pNext"]
        [::core::mem::offset_of!(VkDisplayPlaneInfo2KHR, pNext) - 4usize];
    ["Offset of field: VkDisplayPlaneInfo2KHR::mode"]
        [::core::mem::offset_of!(VkDisplayPlaneInfo2KHR, mode) - 8usize];
    ["Offset of field: VkDisplayPlaneInfo2KHR::planeIndex"]
        [::core::mem::offset_of!(VkDisplayPlaneInfo2KHR, planeIndex) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDisplayPlaneCapabilities2KHR"]
        [::core::mem::size_of::<VkDisplayPlaneCapabilities2KHR>() - 76usize];
    ["Alignment of VkDisplayPlaneCapabilities2KHR"]
        [::core::mem::align_of::<VkDisplayPlaneCapabilities2KHR>() - 4usize];
    ["Offset of field: VkDisplayPlaneCapabilities2KHR::sType"]
        [::core::mem::offset_of!(VkDisplayPlaneCapabilities2KHR, sType) - 0usize];
    ["Offset of field: VkDisplayPlaneCapabilities2KHR::pNext"]
        [::core::mem::offset_of!(VkDisplayPlaneCapabilities2KHR, pNext) - 4usize];
    ["Offset of field: VkDisplayPlaneCapabilities2KHR::capabilities"]
        [::core::mem::offset_of!(VkDisplayPlaneCapabilities2KHR, capabilities) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceShaderBfloat16FeaturesKHR"]
        [::core::mem::size_of::<VkPhysicalDeviceShaderBfloat16FeaturesKHR>() - 20usize];
    ["Alignment of VkPhysicalDeviceShaderBfloat16FeaturesKHR"]
        [::core::mem::align_of::<VkPhysicalDeviceShaderBfloat16FeaturesKHR>() - 4usize];
    ["Offset of field: VkPhysicalDeviceShaderBfloat16FeaturesKHR::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceShaderBfloat16FeaturesKHR, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceShaderBfloat16FeaturesKHR::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceShaderBfloat16FeaturesKHR, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceShaderBfloat16FeaturesKHR::shaderBFloat16Type"][::core::mem::offset_of!(
        VkPhysicalDeviceShaderBfloat16FeaturesKHR,
        shaderBFloat16Type
    ) - 8usize];
    ["Offset of field: VkPhysicalDeviceShaderBfloat16FeaturesKHR::shaderBFloat16DotProduct"][::core::mem::offset_of!(
        VkPhysicalDeviceShaderBfloat16FeaturesKHR,
        shaderBFloat16DotProduct
    )
        - 12usize];
    ["Offset of field: VkPhysicalDeviceShaderBfloat16FeaturesKHR::shaderBFloat16CooperativeMatrix"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceShaderBfloat16FeaturesKHR , shaderBFloat16CooperativeMatrix) - 16usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceShaderClockFeaturesKHR"]
        [::core::mem::size_of::<VkPhysicalDeviceShaderClockFeaturesKHR>() - 16usize];
    ["Alignment of VkPhysicalDeviceShaderClockFeaturesKHR"]
        [::core::mem::align_of::<VkPhysicalDeviceShaderClockFeaturesKHR>() - 4usize];
    ["Offset of field: VkPhysicalDeviceShaderClockFeaturesKHR::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceShaderClockFeaturesKHR, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceShaderClockFeaturesKHR::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceShaderClockFeaturesKHR, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceShaderClockFeaturesKHR::shaderSubgroupClock"][::core::mem::offset_of!(
        VkPhysicalDeviceShaderClockFeaturesKHR,
        shaderSubgroupClock
    ) - 8usize];
    ["Offset of field: VkPhysicalDeviceShaderClockFeaturesKHR::shaderDeviceClock"][::core::mem::offset_of!(
        VkPhysicalDeviceShaderClockFeaturesKHR,
        shaderDeviceClock
    ) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoDecodeH265PictureInfoFlags"]
        [::core::mem::size_of::<StdVideoDecodeH265PictureInfoFlags>() - 4usize];
    ["Alignment of StdVideoDecodeH265PictureInfoFlags"]
        [::core::mem::align_of::<StdVideoDecodeH265PictureInfoFlags>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoDecodeH265PictureInfo"]
        [::core::mem::size_of::<StdVideoDecodeH265PictureInfo>() - 40usize];
    ["Alignment of StdVideoDecodeH265PictureInfo"]
        [::core::mem::align_of::<StdVideoDecodeH265PictureInfo>() - 4usize];
    ["Offset of field: StdVideoDecodeH265PictureInfo::flags"]
        [::core::mem::offset_of!(StdVideoDecodeH265PictureInfo, flags) - 0usize];
    ["Offset of field: StdVideoDecodeH265PictureInfo::sps_video_parameter_set_id"][::core::mem::offset_of!(
        StdVideoDecodeH265PictureInfo,
        sps_video_parameter_set_id
    ) - 4usize];
    ["Offset of field: StdVideoDecodeH265PictureInfo::pps_seq_parameter_set_id"]
        [::core::mem::offset_of!(StdVideoDecodeH265PictureInfo, pps_seq_parameter_set_id) - 5usize];
    ["Offset of field: StdVideoDecodeH265PictureInfo::pps_pic_parameter_set_id"]
        [::core::mem::offset_of!(StdVideoDecodeH265PictureInfo, pps_pic_parameter_set_id) - 6usize];
    ["Offset of field: StdVideoDecodeH265PictureInfo::NumDeltaPocsOfRefRpsIdx"]
        [::core::mem::offset_of!(StdVideoDecodeH265PictureInfo, NumDeltaPocsOfRefRpsIdx) - 7usize];
    ["Offset of field: StdVideoDecodeH265PictureInfo::PicOrderCntVal"]
        [::core::mem::offset_of!(StdVideoDecodeH265PictureInfo, PicOrderCntVal) - 8usize];
    ["Offset of field: StdVideoDecodeH265PictureInfo::NumBitsForSTRefPicSetInSlice"][::core::mem::offset_of!(
        StdVideoDecodeH265PictureInfo,
        NumBitsForSTRefPicSetInSlice
    ) - 12usize];
    ["Offset of field: StdVideoDecodeH265PictureInfo::reserved"]
        [::core::mem::offset_of!(StdVideoDecodeH265PictureInfo, reserved) - 14usize];
    ["Offset of field: StdVideoDecodeH265PictureInfo::RefPicSetStCurrBefore"]
        [::core::mem::offset_of!(StdVideoDecodeH265PictureInfo, RefPicSetStCurrBefore) - 16usize];
    ["Offset of field: StdVideoDecodeH265PictureInfo::RefPicSetStCurrAfter"]
        [::core::mem::offset_of!(StdVideoDecodeH265PictureInfo, RefPicSetStCurrAfter) - 24usize];
    ["Offset of field: StdVideoDecodeH265PictureInfo::RefPicSetLtCurr"]
        [::core::mem::offset_of!(StdVideoDecodeH265PictureInfo, RefPicSetLtCurr) - 32usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoDecodeH265ReferenceInfoFlags"]
        [::core::mem::size_of::<StdVideoDecodeH265ReferenceInfoFlags>() - 4usize];
    ["Alignment of StdVideoDecodeH265ReferenceInfoFlags"]
        [::core::mem::align_of::<StdVideoDecodeH265ReferenceInfoFlags>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoDecodeH265ReferenceInfo"]
        [::core::mem::size_of::<StdVideoDecodeH265ReferenceInfo>() - 8usize];
    ["Alignment of StdVideoDecodeH265ReferenceInfo"]
        [::core::mem::align_of::<StdVideoDecodeH265ReferenceInfo>() - 4usize];
    ["Offset of field: StdVideoDecodeH265ReferenceInfo::flags"]
        [::core::mem::offset_of!(StdVideoDecodeH265ReferenceInfo, flags) - 0usize];
    ["Offset of field: StdVideoDecodeH265ReferenceInfo::PicOrderCntVal"]
        [::core::mem::offset_of!(StdVideoDecodeH265ReferenceInfo, PicOrderCntVal) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoDecodeH265ProfileInfoKHR"]
        [::core::mem::size_of::<VkVideoDecodeH265ProfileInfoKHR>() - 12usize];
    ["Alignment of VkVideoDecodeH265ProfileInfoKHR"]
        [::core::mem::align_of::<VkVideoDecodeH265ProfileInfoKHR>() - 4usize];
    ["Offset of field: VkVideoDecodeH265ProfileInfoKHR::sType"]
        [::core::mem::offset_of!(VkVideoDecodeH265ProfileInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoDecodeH265ProfileInfoKHR::pNext"]
        [::core::mem::offset_of!(VkVideoDecodeH265ProfileInfoKHR, pNext) - 4usize];
    ["Offset of field: VkVideoDecodeH265ProfileInfoKHR::stdProfileIdc"]
        [::core::mem::offset_of!(VkVideoDecodeH265ProfileInfoKHR, stdProfileIdc) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoDecodeH265CapabilitiesKHR"]
        [::core::mem::size_of::<VkVideoDecodeH265CapabilitiesKHR>() - 12usize];
    ["Alignment of VkVideoDecodeH265CapabilitiesKHR"]
        [::core::mem::align_of::<VkVideoDecodeH265CapabilitiesKHR>() - 4usize];
    ["Offset of field: VkVideoDecodeH265CapabilitiesKHR::sType"]
        [::core::mem::offset_of!(VkVideoDecodeH265CapabilitiesKHR, sType) - 0usize];
    ["Offset of field: VkVideoDecodeH265CapabilitiesKHR::pNext"]
        [::core::mem::offset_of!(VkVideoDecodeH265CapabilitiesKHR, pNext) - 4usize];
    ["Offset of field: VkVideoDecodeH265CapabilitiesKHR::maxLevelIdc"]
        [::core::mem::offset_of!(VkVideoDecodeH265CapabilitiesKHR, maxLevelIdc) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoDecodeH265SessionParametersAddInfoKHR"]
        [::core::mem::size_of::<VkVideoDecodeH265SessionParametersAddInfoKHR>() - 32usize];
    ["Alignment of VkVideoDecodeH265SessionParametersAddInfoKHR"]
        [::core::mem::align_of::<VkVideoDecodeH265SessionParametersAddInfoKHR>() - 4usize];
    ["Offset of field: VkVideoDecodeH265SessionParametersAddInfoKHR::sType"]
        [::core::mem::offset_of!(VkVideoDecodeH265SessionParametersAddInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoDecodeH265SessionParametersAddInfoKHR::pNext"]
        [::core::mem::offset_of!(VkVideoDecodeH265SessionParametersAddInfoKHR, pNext) - 4usize];
    ["Offset of field: VkVideoDecodeH265SessionParametersAddInfoKHR::stdVPSCount"][::core::mem::offset_of!(
        VkVideoDecodeH265SessionParametersAddInfoKHR,
        stdVPSCount
    ) - 8usize];
    ["Offset of field: VkVideoDecodeH265SessionParametersAddInfoKHR::pStdVPSs"]
        [::core::mem::offset_of!(VkVideoDecodeH265SessionParametersAddInfoKHR, pStdVPSs) - 12usize];
    ["Offset of field: VkVideoDecodeH265SessionParametersAddInfoKHR::stdSPSCount"][::core::mem::offset_of!(
        VkVideoDecodeH265SessionParametersAddInfoKHR,
        stdSPSCount
    ) - 16usize];
    ["Offset of field: VkVideoDecodeH265SessionParametersAddInfoKHR::pStdSPSs"]
        [::core::mem::offset_of!(VkVideoDecodeH265SessionParametersAddInfoKHR, pStdSPSs) - 20usize];
    ["Offset of field: VkVideoDecodeH265SessionParametersAddInfoKHR::stdPPSCount"][::core::mem::offset_of!(
        VkVideoDecodeH265SessionParametersAddInfoKHR,
        stdPPSCount
    ) - 24usize];
    ["Offset of field: VkVideoDecodeH265SessionParametersAddInfoKHR::pStdPPSs"]
        [::core::mem::offset_of!(VkVideoDecodeH265SessionParametersAddInfoKHR, pStdPPSs) - 28usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoDecodeH265SessionParametersCreateInfoKHR"]
        [::core::mem::size_of::<VkVideoDecodeH265SessionParametersCreateInfoKHR>() - 24usize];
    ["Alignment of VkVideoDecodeH265SessionParametersCreateInfoKHR"]
        [::core::mem::align_of::<VkVideoDecodeH265SessionParametersCreateInfoKHR>() - 4usize];
    ["Offset of field: VkVideoDecodeH265SessionParametersCreateInfoKHR::sType"]
        [::core::mem::offset_of!(VkVideoDecodeH265SessionParametersCreateInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoDecodeH265SessionParametersCreateInfoKHR::pNext"]
        [::core::mem::offset_of!(VkVideoDecodeH265SessionParametersCreateInfoKHR, pNext) - 4usize];
    ["Offset of field: VkVideoDecodeH265SessionParametersCreateInfoKHR::maxStdVPSCount"][::core::mem::offset_of!(
        VkVideoDecodeH265SessionParametersCreateInfoKHR,
        maxStdVPSCount
    )
        - 8usize];
    ["Offset of field: VkVideoDecodeH265SessionParametersCreateInfoKHR::maxStdSPSCount"][::core::mem::offset_of!(
        VkVideoDecodeH265SessionParametersCreateInfoKHR,
        maxStdSPSCount
    )
        - 12usize];
    ["Offset of field: VkVideoDecodeH265SessionParametersCreateInfoKHR::maxStdPPSCount"][::core::mem::offset_of!(
        VkVideoDecodeH265SessionParametersCreateInfoKHR,
        maxStdPPSCount
    )
        - 16usize];
    ["Offset of field: VkVideoDecodeH265SessionParametersCreateInfoKHR::pParametersAddInfo"][::core::mem::offset_of!(
        VkVideoDecodeH265SessionParametersCreateInfoKHR,
        pParametersAddInfo
    )
        - 20usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoDecodeH265PictureInfoKHR"]
        [::core::mem::size_of::<VkVideoDecodeH265PictureInfoKHR>() - 20usize];
    ["Alignment of VkVideoDecodeH265PictureInfoKHR"]
        [::core::mem::align_of::<VkVideoDecodeH265PictureInfoKHR>() - 4usize];
    ["Offset of field: VkVideoDecodeH265PictureInfoKHR::sType"]
        [::core::mem::offset_of!(VkVideoDecodeH265PictureInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoDecodeH265PictureInfoKHR::pNext"]
        [::core::mem::offset_of!(VkVideoDecodeH265PictureInfoKHR, pNext) - 4usize];
    ["Offset of field: VkVideoDecodeH265PictureInfoKHR::pStdPictureInfo"]
        [::core::mem::offset_of!(VkVideoDecodeH265PictureInfoKHR, pStdPictureInfo) - 8usize];
    ["Offset of field: VkVideoDecodeH265PictureInfoKHR::sliceSegmentCount"]
        [::core::mem::offset_of!(VkVideoDecodeH265PictureInfoKHR, sliceSegmentCount) - 12usize];
    ["Offset of field: VkVideoDecodeH265PictureInfoKHR::pSliceSegmentOffsets"]
        [::core::mem::offset_of!(VkVideoDecodeH265PictureInfoKHR, pSliceSegmentOffsets) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoDecodeH265DpbSlotInfoKHR"]
        [::core::mem::size_of::<VkVideoDecodeH265DpbSlotInfoKHR>() - 12usize];
    ["Alignment of VkVideoDecodeH265DpbSlotInfoKHR"]
        [::core::mem::align_of::<VkVideoDecodeH265DpbSlotInfoKHR>() - 4usize];
    ["Offset of field: VkVideoDecodeH265DpbSlotInfoKHR::sType"]
        [::core::mem::offset_of!(VkVideoDecodeH265DpbSlotInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoDecodeH265DpbSlotInfoKHR::pNext"]
        [::core::mem::offset_of!(VkVideoDecodeH265DpbSlotInfoKHR, pNext) - 4usize];
    ["Offset of field: VkVideoDecodeH265DpbSlotInfoKHR::pStdReferenceInfo"]
        [::core::mem::offset_of!(VkVideoDecodeH265DpbSlotInfoKHR, pStdReferenceInfo) - 8usize];
};
pub const VkFragmentShadingRateCombinerOpKHR_VK_FRAGMENT_SHADING_RATE_COMBINER_OP_KEEP_KHR:
    VkFragmentShadingRateCombinerOpKHR = 0;
pub const VkFragmentShadingRateCombinerOpKHR_VK_FRAGMENT_SHADING_RATE_COMBINER_OP_REPLACE_KHR:
    VkFragmentShadingRateCombinerOpKHR = 1;
pub const VkFragmentShadingRateCombinerOpKHR_VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MIN_KHR:
    VkFragmentShadingRateCombinerOpKHR = 2;
pub const VkFragmentShadingRateCombinerOpKHR_VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_KHR:
    VkFragmentShadingRateCombinerOpKHR = 3;
pub const VkFragmentShadingRateCombinerOpKHR_VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MUL_KHR:
    VkFragmentShadingRateCombinerOpKHR = 4;
pub const VkFragmentShadingRateCombinerOpKHR_VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_ENUM_KHR:
    VkFragmentShadingRateCombinerOpKHR = 2147483647;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkFragmentShadingRateAttachmentInfoKHR"]
        [::core::mem::size_of::<VkFragmentShadingRateAttachmentInfoKHR>() - 20usize];
    ["Alignment of VkFragmentShadingRateAttachmentInfoKHR"]
        [::core::mem::align_of::<VkFragmentShadingRateAttachmentInfoKHR>() - 4usize];
    ["Offset of field: VkFragmentShadingRateAttachmentInfoKHR::sType"]
        [::core::mem::offset_of!(VkFragmentShadingRateAttachmentInfoKHR, sType) - 0usize];
    ["Offset of field: VkFragmentShadingRateAttachmentInfoKHR::pNext"]
        [::core::mem::offset_of!(VkFragmentShadingRateAttachmentInfoKHR, pNext) - 4usize];
    ["Offset of field: VkFragmentShadingRateAttachmentInfoKHR::pFragmentShadingRateAttachment"][::core::mem::offset_of!(
        VkFragmentShadingRateAttachmentInfoKHR,
        pFragmentShadingRateAttachment
    )
        - 8usize];
    ["Offset of field: VkFragmentShadingRateAttachmentInfoKHR::shadingRateAttachmentTexelSize"][::core::mem::offset_of!(
        VkFragmentShadingRateAttachmentInfoKHR,
        shadingRateAttachmentTexelSize
    )
        - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineFragmentShadingRateStateCreateInfoKHR"]
        [::core::mem::size_of::<VkPipelineFragmentShadingRateStateCreateInfoKHR>() - 24usize];
    ["Alignment of VkPipelineFragmentShadingRateStateCreateInfoKHR"]
        [::core::mem::align_of::<VkPipelineFragmentShadingRateStateCreateInfoKHR>() - 4usize];
    ["Offset of field: VkPipelineFragmentShadingRateStateCreateInfoKHR::sType"]
        [::core::mem::offset_of!(VkPipelineFragmentShadingRateStateCreateInfoKHR, sType) - 0usize];
    ["Offset of field: VkPipelineFragmentShadingRateStateCreateInfoKHR::pNext"]
        [::core::mem::offset_of!(VkPipelineFragmentShadingRateStateCreateInfoKHR, pNext) - 4usize];
    ["Offset of field: VkPipelineFragmentShadingRateStateCreateInfoKHR::fragmentSize"][::core::mem::offset_of!(
        VkPipelineFragmentShadingRateStateCreateInfoKHR,
        fragmentSize
    ) - 8usize];
    ["Offset of field: VkPipelineFragmentShadingRateStateCreateInfoKHR::combinerOps"][::core::mem::offset_of!(
        VkPipelineFragmentShadingRateStateCreateInfoKHR,
        combinerOps
    ) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceFragmentShadingRateFeaturesKHR"]
        [::core::mem::size_of::<VkPhysicalDeviceFragmentShadingRateFeaturesKHR>() - 20usize];
    ["Alignment of VkPhysicalDeviceFragmentShadingRateFeaturesKHR"]
        [::core::mem::align_of::<VkPhysicalDeviceFragmentShadingRateFeaturesKHR>() - 4usize];
    ["Offset of field: VkPhysicalDeviceFragmentShadingRateFeaturesKHR::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceFragmentShadingRateFeaturesKHR, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceFragmentShadingRateFeaturesKHR::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceFragmentShadingRateFeaturesKHR, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceFragmentShadingRateFeaturesKHR::pipelineFragmentShadingRate"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceFragmentShadingRateFeaturesKHR , pipelineFragmentShadingRate) - 8usize] ;
    ["Offset of field: VkPhysicalDeviceFragmentShadingRateFeaturesKHR::primitiveFragmentShadingRate"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceFragmentShadingRateFeaturesKHR , primitiveFragmentShadingRate) - 12usize] ;
    ["Offset of field: VkPhysicalDeviceFragmentShadingRateFeaturesKHR::attachmentFragmentShadingRate"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceFragmentShadingRateFeaturesKHR , attachmentFragmentShadingRate) - 16usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceFragmentShadingRatePropertiesKHR"]
        [::core::mem::size_of::<VkPhysicalDeviceFragmentShadingRatePropertiesKHR>() - 88usize];
    ["Alignment of VkPhysicalDeviceFragmentShadingRatePropertiesKHR"]
        [::core::mem::align_of::<VkPhysicalDeviceFragmentShadingRatePropertiesKHR>() - 4usize];
    ["Offset of field: VkPhysicalDeviceFragmentShadingRatePropertiesKHR::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceFragmentShadingRatePropertiesKHR, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceFragmentShadingRatePropertiesKHR::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceFragmentShadingRatePropertiesKHR, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceFragmentShadingRatePropertiesKHR::minFragmentShadingRateAttachmentTexelSize"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceFragmentShadingRatePropertiesKHR , minFragmentShadingRateAttachmentTexelSize) - 8usize] ;
    ["Offset of field: VkPhysicalDeviceFragmentShadingRatePropertiesKHR::maxFragmentShadingRateAttachmentTexelSize"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceFragmentShadingRatePropertiesKHR , maxFragmentShadingRateAttachmentTexelSize) - 16usize] ;
    ["Offset of field: VkPhysicalDeviceFragmentShadingRatePropertiesKHR::maxFragmentShadingRateAttachmentTexelSizeAspectRatio"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceFragmentShadingRatePropertiesKHR , maxFragmentShadingRateAttachmentTexelSizeAspectRatio) - 24usize] ;
    ["Offset of field: VkPhysicalDeviceFragmentShadingRatePropertiesKHR::primitiveFragmentShadingRateWithMultipleViewports"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceFragmentShadingRatePropertiesKHR , primitiveFragmentShadingRateWithMultipleViewports) - 28usize] ;
    ["Offset of field: VkPhysicalDeviceFragmentShadingRatePropertiesKHR::layeredShadingRateAttachments"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceFragmentShadingRatePropertiesKHR , layeredShadingRateAttachments) - 32usize] ;
    ["Offset of field: VkPhysicalDeviceFragmentShadingRatePropertiesKHR::fragmentShadingRateNonTrivialCombinerOps"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceFragmentShadingRatePropertiesKHR , fragmentShadingRateNonTrivialCombinerOps) - 36usize] ;
    ["Offset of field: VkPhysicalDeviceFragmentShadingRatePropertiesKHR::maxFragmentSize"][::core::mem::offset_of!(
        VkPhysicalDeviceFragmentShadingRatePropertiesKHR,
        maxFragmentSize
    )
        - 40usize];
    ["Offset of field: VkPhysicalDeviceFragmentShadingRatePropertiesKHR::maxFragmentSizeAspectRatio"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceFragmentShadingRatePropertiesKHR , maxFragmentSizeAspectRatio) - 48usize] ;
    ["Offset of field: VkPhysicalDeviceFragmentShadingRatePropertiesKHR::maxFragmentShadingRateCoverageSamples"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceFragmentShadingRatePropertiesKHR , maxFragmentShadingRateCoverageSamples) - 52usize] ;
    ["Offset of field: VkPhysicalDeviceFragmentShadingRatePropertiesKHR::maxFragmentShadingRateRasterizationSamples"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceFragmentShadingRatePropertiesKHR , maxFragmentShadingRateRasterizationSamples) - 56usize] ;
    ["Offset of field: VkPhysicalDeviceFragmentShadingRatePropertiesKHR::fragmentShadingRateWithShaderDepthStencilWrites"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceFragmentShadingRatePropertiesKHR , fragmentShadingRateWithShaderDepthStencilWrites) - 60usize] ;
    ["Offset of field: VkPhysicalDeviceFragmentShadingRatePropertiesKHR::fragmentShadingRateWithSampleMask"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceFragmentShadingRatePropertiesKHR , fragmentShadingRateWithSampleMask) - 64usize] ;
    ["Offset of field: VkPhysicalDeviceFragmentShadingRatePropertiesKHR::fragmentShadingRateWithShaderSampleMask"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceFragmentShadingRatePropertiesKHR , fragmentShadingRateWithShaderSampleMask) - 68usize] ;
    ["Offset of field: VkPhysicalDeviceFragmentShadingRatePropertiesKHR::fragmentShadingRateWithConservativeRasterization"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceFragmentShadingRatePropertiesKHR , fragmentShadingRateWithConservativeRasterization) - 72usize] ;
    ["Offset of field: VkPhysicalDeviceFragmentShadingRatePropertiesKHR::fragmentShadingRateWithFragmentShaderInterlock"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceFragmentShadingRatePropertiesKHR , fragmentShadingRateWithFragmentShaderInterlock) - 76usize] ;
    ["Offset of field: VkPhysicalDeviceFragmentShadingRatePropertiesKHR::fragmentShadingRateWithCustomSampleLocations"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceFragmentShadingRatePropertiesKHR , fragmentShadingRateWithCustomSampleLocations) - 80usize] ;
    ["Offset of field: VkPhysicalDeviceFragmentShadingRatePropertiesKHR::fragmentShadingRateStrictMultiplyCombiner"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceFragmentShadingRatePropertiesKHR , fragmentShadingRateStrictMultiplyCombiner) - 84usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceFragmentShadingRateKHR"]
        [::core::mem::size_of::<VkPhysicalDeviceFragmentShadingRateKHR>() - 20usize];
    ["Alignment of VkPhysicalDeviceFragmentShadingRateKHR"]
        [::core::mem::align_of::<VkPhysicalDeviceFragmentShadingRateKHR>() - 4usize];
    ["Offset of field: VkPhysicalDeviceFragmentShadingRateKHR::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceFragmentShadingRateKHR, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceFragmentShadingRateKHR::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceFragmentShadingRateKHR, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceFragmentShadingRateKHR::sampleCounts"]
        [::core::mem::offset_of!(VkPhysicalDeviceFragmentShadingRateKHR, sampleCounts) - 8usize];
    ["Offset of field: VkPhysicalDeviceFragmentShadingRateKHR::fragmentSize"]
        [::core::mem::offset_of!(VkPhysicalDeviceFragmentShadingRateKHR, fragmentSize) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkRenderingFragmentShadingRateAttachmentInfoKHR"]
        [::core::mem::size_of::<VkRenderingFragmentShadingRateAttachmentInfoKHR>() - 32usize];
    ["Alignment of VkRenderingFragmentShadingRateAttachmentInfoKHR"]
        [::core::mem::align_of::<VkRenderingFragmentShadingRateAttachmentInfoKHR>() - 8usize];
    ["Offset of field: VkRenderingFragmentShadingRateAttachmentInfoKHR::sType"]
        [::core::mem::offset_of!(VkRenderingFragmentShadingRateAttachmentInfoKHR, sType) - 0usize];
    ["Offset of field: VkRenderingFragmentShadingRateAttachmentInfoKHR::pNext"]
        [::core::mem::offset_of!(VkRenderingFragmentShadingRateAttachmentInfoKHR, pNext) - 4usize];
    ["Offset of field: VkRenderingFragmentShadingRateAttachmentInfoKHR::imageView"][::core::mem::offset_of!(
        VkRenderingFragmentShadingRateAttachmentInfoKHR,
        imageView
    ) - 8usize];
    ["Offset of field: VkRenderingFragmentShadingRateAttachmentInfoKHR::imageLayout"][::core::mem::offset_of!(
        VkRenderingFragmentShadingRateAttachmentInfoKHR,
        imageLayout
    ) - 16usize];
    ["Offset of field: VkRenderingFragmentShadingRateAttachmentInfoKHR::shadingRateAttachmentTexelSize"] [:: core :: mem :: offset_of ! (VkRenderingFragmentShadingRateAttachmentInfoKHR , shadingRateAttachmentTexelSize) - 20usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceShaderQuadControlFeaturesKHR"]
        [::core::mem::size_of::<VkPhysicalDeviceShaderQuadControlFeaturesKHR>() - 12usize];
    ["Alignment of VkPhysicalDeviceShaderQuadControlFeaturesKHR"]
        [::core::mem::align_of::<VkPhysicalDeviceShaderQuadControlFeaturesKHR>() - 4usize];
    ["Offset of field: VkPhysicalDeviceShaderQuadControlFeaturesKHR::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceShaderQuadControlFeaturesKHR, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceShaderQuadControlFeaturesKHR::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceShaderQuadControlFeaturesKHR, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceShaderQuadControlFeaturesKHR::shaderQuadControl"][::core::mem::offset_of!(
        VkPhysicalDeviceShaderQuadControlFeaturesKHR,
        shaderQuadControl
    )
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSurfaceProtectedCapabilitiesKHR"]
        [::core::mem::size_of::<VkSurfaceProtectedCapabilitiesKHR>() - 12usize];
    ["Alignment of VkSurfaceProtectedCapabilitiesKHR"]
        [::core::mem::align_of::<VkSurfaceProtectedCapabilitiesKHR>() - 4usize];
    ["Offset of field: VkSurfaceProtectedCapabilitiesKHR::sType"]
        [::core::mem::offset_of!(VkSurfaceProtectedCapabilitiesKHR, sType) - 0usize];
    ["Offset of field: VkSurfaceProtectedCapabilitiesKHR::pNext"]
        [::core::mem::offset_of!(VkSurfaceProtectedCapabilitiesKHR, pNext) - 4usize];
    ["Offset of field: VkSurfaceProtectedCapabilitiesKHR::supportsProtected"]
        [::core::mem::offset_of!(VkSurfaceProtectedCapabilitiesKHR, supportsProtected) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDevicePresentWaitFeaturesKHR"]
        [::core::mem::size_of::<VkPhysicalDevicePresentWaitFeaturesKHR>() - 12usize];
    ["Alignment of VkPhysicalDevicePresentWaitFeaturesKHR"]
        [::core::mem::align_of::<VkPhysicalDevicePresentWaitFeaturesKHR>() - 4usize];
    ["Offset of field: VkPhysicalDevicePresentWaitFeaturesKHR::sType"]
        [::core::mem::offset_of!(VkPhysicalDevicePresentWaitFeaturesKHR, sType) - 0usize];
    ["Offset of field: VkPhysicalDevicePresentWaitFeaturesKHR::pNext"]
        [::core::mem::offset_of!(VkPhysicalDevicePresentWaitFeaturesKHR, pNext) - 4usize];
    ["Offset of field: VkPhysicalDevicePresentWaitFeaturesKHR::presentWait"]
        [::core::mem::offset_of!(VkPhysicalDevicePresentWaitFeaturesKHR, presentWait) - 8usize];
};
pub const VkPipelineExecutableStatisticFormatKHR_VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_BOOL32_KHR : VkPipelineExecutableStatisticFormatKHR = 0 ;
pub const VkPipelineExecutableStatisticFormatKHR_VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_INT64_KHR : VkPipelineExecutableStatisticFormatKHR = 1 ;
pub const VkPipelineExecutableStatisticFormatKHR_VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_UINT64_KHR : VkPipelineExecutableStatisticFormatKHR = 2 ;
pub const VkPipelineExecutableStatisticFormatKHR_VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_FLOAT64_KHR : VkPipelineExecutableStatisticFormatKHR = 3 ;
pub const VkPipelineExecutableStatisticFormatKHR_VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_MAX_ENUM_KHR : VkPipelineExecutableStatisticFormatKHR = 2147483647 ;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR"][::core::mem::size_of::<
        VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR,
    >() - 12usize];
    ["Alignment of VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR"][::core::mem::align_of::<
        VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR,
    >() - 4usize];
    ["Offset of field: VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR::sType"][::core::mem::offset_of!(
        VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR::pNext"][::core::mem::offset_of!(
        VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR,
        pNext
    ) - 4usize];
    ["Offset of field: VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR::pipelineExecutableInfo"] [:: core :: mem :: offset_of ! (VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR , pipelineExecutableInfo) - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineInfoKHR"][::core::mem::size_of::<VkPipelineInfoKHR>() - 16usize];
    ["Alignment of VkPipelineInfoKHR"][::core::mem::align_of::<VkPipelineInfoKHR>() - 8usize];
    ["Offset of field: VkPipelineInfoKHR::sType"]
        [::core::mem::offset_of!(VkPipelineInfoKHR, sType) - 0usize];
    ["Offset of field: VkPipelineInfoKHR::pNext"]
        [::core::mem::offset_of!(VkPipelineInfoKHR, pNext) - 4usize];
    ["Offset of field: VkPipelineInfoKHR::pipeline"]
        [::core::mem::offset_of!(VkPipelineInfoKHR, pipeline) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineExecutablePropertiesKHR"]
        [::core::mem::size_of::<VkPipelineExecutablePropertiesKHR>() - 528usize];
    ["Alignment of VkPipelineExecutablePropertiesKHR"]
        [::core::mem::align_of::<VkPipelineExecutablePropertiesKHR>() - 4usize];
    ["Offset of field: VkPipelineExecutablePropertiesKHR::sType"]
        [::core::mem::offset_of!(VkPipelineExecutablePropertiesKHR, sType) - 0usize];
    ["Offset of field: VkPipelineExecutablePropertiesKHR::pNext"]
        [::core::mem::offset_of!(VkPipelineExecutablePropertiesKHR, pNext) - 4usize];
    ["Offset of field: VkPipelineExecutablePropertiesKHR::stages"]
        [::core::mem::offset_of!(VkPipelineExecutablePropertiesKHR, stages) - 8usize];
    ["Offset of field: VkPipelineExecutablePropertiesKHR::name"]
        [::core::mem::offset_of!(VkPipelineExecutablePropertiesKHR, name) - 12usize];
    ["Offset of field: VkPipelineExecutablePropertiesKHR::description"]
        [::core::mem::offset_of!(VkPipelineExecutablePropertiesKHR, description) - 268usize];
    ["Offset of field: VkPipelineExecutablePropertiesKHR::subgroupSize"]
        [::core::mem::offset_of!(VkPipelineExecutablePropertiesKHR, subgroupSize) - 524usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineExecutableInfoKHR"]
        [::core::mem::size_of::<VkPipelineExecutableInfoKHR>() - 24usize];
    ["Alignment of VkPipelineExecutableInfoKHR"]
        [::core::mem::align_of::<VkPipelineExecutableInfoKHR>() - 8usize];
    ["Offset of field: VkPipelineExecutableInfoKHR::sType"]
        [::core::mem::offset_of!(VkPipelineExecutableInfoKHR, sType) - 0usize];
    ["Offset of field: VkPipelineExecutableInfoKHR::pNext"]
        [::core::mem::offset_of!(VkPipelineExecutableInfoKHR, pNext) - 4usize];
    ["Offset of field: VkPipelineExecutableInfoKHR::pipeline"]
        [::core::mem::offset_of!(VkPipelineExecutableInfoKHR, pipeline) - 8usize];
    ["Offset of field: VkPipelineExecutableInfoKHR::executableIndex"]
        [::core::mem::offset_of!(VkPipelineExecutableInfoKHR, executableIndex) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineExecutableStatisticValueKHR"]
        [::core::mem::size_of::<VkPipelineExecutableStatisticValueKHR>() - 8usize];
    ["Alignment of VkPipelineExecutableStatisticValueKHR"]
        [::core::mem::align_of::<VkPipelineExecutableStatisticValueKHR>() - 8usize];
    ["Offset of field: VkPipelineExecutableStatisticValueKHR::b32"]
        [::core::mem::offset_of!(VkPipelineExecutableStatisticValueKHR, b32) - 0usize];
    ["Offset of field: VkPipelineExecutableStatisticValueKHR::i64_"]
        [::core::mem::offset_of!(VkPipelineExecutableStatisticValueKHR, i64_) - 0usize];
    ["Offset of field: VkPipelineExecutableStatisticValueKHR::u64_"]
        [::core::mem::offset_of!(VkPipelineExecutableStatisticValueKHR, u64_) - 0usize];
    ["Offset of field: VkPipelineExecutableStatisticValueKHR::f64_"]
        [::core::mem::offset_of!(VkPipelineExecutableStatisticValueKHR, f64_) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineExecutableStatisticKHR"]
        [::core::mem::size_of::<VkPipelineExecutableStatisticKHR>() - 536usize];
    ["Alignment of VkPipelineExecutableStatisticKHR"]
        [::core::mem::align_of::<VkPipelineExecutableStatisticKHR>() - 8usize];
    ["Offset of field: VkPipelineExecutableStatisticKHR::sType"]
        [::core::mem::offset_of!(VkPipelineExecutableStatisticKHR, sType) - 0usize];
    ["Offset of field: VkPipelineExecutableStatisticKHR::pNext"]
        [::core::mem::offset_of!(VkPipelineExecutableStatisticKHR, pNext) - 4usize];
    ["Offset of field: VkPipelineExecutableStatisticKHR::name"]
        [::core::mem::offset_of!(VkPipelineExecutableStatisticKHR, name) - 8usize];
    ["Offset of field: VkPipelineExecutableStatisticKHR::description"]
        [::core::mem::offset_of!(VkPipelineExecutableStatisticKHR, description) - 264usize];
    ["Offset of field: VkPipelineExecutableStatisticKHR::format"]
        [::core::mem::offset_of!(VkPipelineExecutableStatisticKHR, format) - 520usize];
    ["Offset of field: VkPipelineExecutableStatisticKHR::value"]
        [::core::mem::offset_of!(VkPipelineExecutableStatisticKHR, value) - 528usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineExecutableInternalRepresentationKHR"]
        [::core::mem::size_of::<VkPipelineExecutableInternalRepresentationKHR>() - 532usize];
    ["Alignment of VkPipelineExecutableInternalRepresentationKHR"]
        [::core::mem::align_of::<VkPipelineExecutableInternalRepresentationKHR>() - 4usize];
    ["Offset of field: VkPipelineExecutableInternalRepresentationKHR::sType"]
        [::core::mem::offset_of!(VkPipelineExecutableInternalRepresentationKHR, sType) - 0usize];
    ["Offset of field: VkPipelineExecutableInternalRepresentationKHR::pNext"]
        [::core::mem::offset_of!(VkPipelineExecutableInternalRepresentationKHR, pNext) - 4usize];
    ["Offset of field: VkPipelineExecutableInternalRepresentationKHR::name"]
        [::core::mem::offset_of!(VkPipelineExecutableInternalRepresentationKHR, name) - 8usize];
    ["Offset of field: VkPipelineExecutableInternalRepresentationKHR::description"][::core::mem::offset_of!(
        VkPipelineExecutableInternalRepresentationKHR,
        description
    ) - 264usize];
    ["Offset of field: VkPipelineExecutableInternalRepresentationKHR::isText"]
        [::core::mem::offset_of!(VkPipelineExecutableInternalRepresentationKHR, isText) - 520usize];
    ["Offset of field: VkPipelineExecutableInternalRepresentationKHR::dataSize"][::core::mem::offset_of!(
        VkPipelineExecutableInternalRepresentationKHR,
        dataSize
    ) - 524usize];
    ["Offset of field: VkPipelineExecutableInternalRepresentationKHR::pData"]
        [::core::mem::offset_of!(VkPipelineExecutableInternalRepresentationKHR, pData) - 528usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineLibraryCreateInfoKHR"]
        [::core::mem::size_of::<VkPipelineLibraryCreateInfoKHR>() - 16usize];
    ["Alignment of VkPipelineLibraryCreateInfoKHR"]
        [::core::mem::align_of::<VkPipelineLibraryCreateInfoKHR>() - 4usize];
    ["Offset of field: VkPipelineLibraryCreateInfoKHR::sType"]
        [::core::mem::offset_of!(VkPipelineLibraryCreateInfoKHR, sType) - 0usize];
    ["Offset of field: VkPipelineLibraryCreateInfoKHR::pNext"]
        [::core::mem::offset_of!(VkPipelineLibraryCreateInfoKHR, pNext) - 4usize];
    ["Offset of field: VkPipelineLibraryCreateInfoKHR::libraryCount"]
        [::core::mem::offset_of!(VkPipelineLibraryCreateInfoKHR, libraryCount) - 8usize];
    ["Offset of field: VkPipelineLibraryCreateInfoKHR::pLibraries"]
        [::core::mem::offset_of!(VkPipelineLibraryCreateInfoKHR, pLibraries) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPresentIdKHR"][::core::mem::size_of::<VkPresentIdKHR>() - 16usize];
    ["Alignment of VkPresentIdKHR"][::core::mem::align_of::<VkPresentIdKHR>() - 4usize];
    ["Offset of field: VkPresentIdKHR::sType"]
        [::core::mem::offset_of!(VkPresentIdKHR, sType) - 0usize];
    ["Offset of field: VkPresentIdKHR::pNext"]
        [::core::mem::offset_of!(VkPresentIdKHR, pNext) - 4usize];
    ["Offset of field: VkPresentIdKHR::swapchainCount"]
        [::core::mem::offset_of!(VkPresentIdKHR, swapchainCount) - 8usize];
    ["Offset of field: VkPresentIdKHR::pPresentIds"]
        [::core::mem::offset_of!(VkPresentIdKHR, pPresentIds) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDevicePresentIdFeaturesKHR"]
        [::core::mem::size_of::<VkPhysicalDevicePresentIdFeaturesKHR>() - 12usize];
    ["Alignment of VkPhysicalDevicePresentIdFeaturesKHR"]
        [::core::mem::align_of::<VkPhysicalDevicePresentIdFeaturesKHR>() - 4usize];
    ["Offset of field: VkPhysicalDevicePresentIdFeaturesKHR::sType"]
        [::core::mem::offset_of!(VkPhysicalDevicePresentIdFeaturesKHR, sType) - 0usize];
    ["Offset of field: VkPhysicalDevicePresentIdFeaturesKHR::pNext"]
        [::core::mem::offset_of!(VkPhysicalDevicePresentIdFeaturesKHR, pNext) - 4usize];
    ["Offset of field: VkPhysicalDevicePresentIdFeaturesKHR::presentId"]
        [::core::mem::offset_of!(VkPhysicalDevicePresentIdFeaturesKHR, presentId) - 8usize];
};
pub const VkVideoEncodeTuningModeKHR_VK_VIDEO_ENCODE_TUNING_MODE_DEFAULT_KHR:
    VkVideoEncodeTuningModeKHR = 0;
pub const VkVideoEncodeTuningModeKHR_VK_VIDEO_ENCODE_TUNING_MODE_HIGH_QUALITY_KHR:
    VkVideoEncodeTuningModeKHR = 1;
pub const VkVideoEncodeTuningModeKHR_VK_VIDEO_ENCODE_TUNING_MODE_LOW_LATENCY_KHR:
    VkVideoEncodeTuningModeKHR = 2;
pub const VkVideoEncodeTuningModeKHR_VK_VIDEO_ENCODE_TUNING_MODE_ULTRA_LOW_LATENCY_KHR:
    VkVideoEncodeTuningModeKHR = 3;
pub const VkVideoEncodeTuningModeKHR_VK_VIDEO_ENCODE_TUNING_MODE_LOSSLESS_KHR:
    VkVideoEncodeTuningModeKHR = 4;
pub const VkVideoEncodeTuningModeKHR_VK_VIDEO_ENCODE_TUNING_MODE_MAX_ENUM_KHR:
    VkVideoEncodeTuningModeKHR = 2147483647;
pub const VkVideoEncodeFlagBitsKHR_VK_VIDEO_ENCODE_WITH_QUANTIZATION_DELTA_MAP_BIT_KHR:
    VkVideoEncodeFlagBitsKHR = 1;
pub const VkVideoEncodeFlagBitsKHR_VK_VIDEO_ENCODE_WITH_EMPHASIS_MAP_BIT_KHR:
    VkVideoEncodeFlagBitsKHR = 2;
pub const VkVideoEncodeFlagBitsKHR_VK_VIDEO_ENCODE_FLAG_BITS_MAX_ENUM_KHR:
    VkVideoEncodeFlagBitsKHR = 2147483647;
pub const VkVideoEncodeCapabilityFlagBitsKHR_VK_VIDEO_ENCODE_CAPABILITY_PRECEDING_EXTERNALLY_ENCODED_BYTES_BIT_KHR : VkVideoEncodeCapabilityFlagBitsKHR = 1 ;
pub const VkVideoEncodeCapabilityFlagBitsKHR_VK_VIDEO_ENCODE_CAPABILITY_INSUFFICIENT_BITSTREAM_BUFFER_RANGE_DETECTION_BIT_KHR : VkVideoEncodeCapabilityFlagBitsKHR = 2 ;
pub const VkVideoEncodeCapabilityFlagBitsKHR_VK_VIDEO_ENCODE_CAPABILITY_QUANTIZATION_DELTA_MAP_BIT_KHR : VkVideoEncodeCapabilityFlagBitsKHR = 4 ;
pub const VkVideoEncodeCapabilityFlagBitsKHR_VK_VIDEO_ENCODE_CAPABILITY_EMPHASIS_MAP_BIT_KHR:
    VkVideoEncodeCapabilityFlagBitsKHR = 8;
pub const VkVideoEncodeCapabilityFlagBitsKHR_VK_VIDEO_ENCODE_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR:
    VkVideoEncodeCapabilityFlagBitsKHR = 2147483647;
pub const VkVideoEncodeRateControlModeFlagBitsKHR_VK_VIDEO_ENCODE_RATE_CONTROL_MODE_DEFAULT_KHR:
    VkVideoEncodeRateControlModeFlagBitsKHR = 0;
pub const VkVideoEncodeRateControlModeFlagBitsKHR_VK_VIDEO_ENCODE_RATE_CONTROL_MODE_DISABLED_BIT_KHR : VkVideoEncodeRateControlModeFlagBitsKHR = 1 ;
pub const VkVideoEncodeRateControlModeFlagBitsKHR_VK_VIDEO_ENCODE_RATE_CONTROL_MODE_CBR_BIT_KHR:
    VkVideoEncodeRateControlModeFlagBitsKHR = 2;
pub const VkVideoEncodeRateControlModeFlagBitsKHR_VK_VIDEO_ENCODE_RATE_CONTROL_MODE_VBR_BIT_KHR:
    VkVideoEncodeRateControlModeFlagBitsKHR = 4;
pub const VkVideoEncodeRateControlModeFlagBitsKHR_VK_VIDEO_ENCODE_RATE_CONTROL_MODE_FLAG_BITS_MAX_ENUM_KHR : VkVideoEncodeRateControlModeFlagBitsKHR = 2147483647 ;
pub const VkVideoEncodeFeedbackFlagBitsKHR_VK_VIDEO_ENCODE_FEEDBACK_BITSTREAM_BUFFER_OFFSET_BIT_KHR : VkVideoEncodeFeedbackFlagBitsKHR = 1 ;
pub const VkVideoEncodeFeedbackFlagBitsKHR_VK_VIDEO_ENCODE_FEEDBACK_BITSTREAM_BYTES_WRITTEN_BIT_KHR : VkVideoEncodeFeedbackFlagBitsKHR = 2 ;
pub const VkVideoEncodeFeedbackFlagBitsKHR_VK_VIDEO_ENCODE_FEEDBACK_BITSTREAM_HAS_OVERRIDES_BIT_KHR : VkVideoEncodeFeedbackFlagBitsKHR = 4 ;
pub const VkVideoEncodeFeedbackFlagBitsKHR_VK_VIDEO_ENCODE_FEEDBACK_FLAG_BITS_MAX_ENUM_KHR:
    VkVideoEncodeFeedbackFlagBitsKHR = 2147483647;
pub const VkVideoEncodeUsageFlagBitsKHR_VK_VIDEO_ENCODE_USAGE_DEFAULT_KHR:
    VkVideoEncodeUsageFlagBitsKHR = 0;
pub const VkVideoEncodeUsageFlagBitsKHR_VK_VIDEO_ENCODE_USAGE_TRANSCODING_BIT_KHR:
    VkVideoEncodeUsageFlagBitsKHR = 1;
pub const VkVideoEncodeUsageFlagBitsKHR_VK_VIDEO_ENCODE_USAGE_STREAMING_BIT_KHR:
    VkVideoEncodeUsageFlagBitsKHR = 2;
pub const VkVideoEncodeUsageFlagBitsKHR_VK_VIDEO_ENCODE_USAGE_RECORDING_BIT_KHR:
    VkVideoEncodeUsageFlagBitsKHR = 4;
pub const VkVideoEncodeUsageFlagBitsKHR_VK_VIDEO_ENCODE_USAGE_CONFERENCING_BIT_KHR:
    VkVideoEncodeUsageFlagBitsKHR = 8;
pub const VkVideoEncodeUsageFlagBitsKHR_VK_VIDEO_ENCODE_USAGE_FLAG_BITS_MAX_ENUM_KHR:
    VkVideoEncodeUsageFlagBitsKHR = 2147483647;
pub const VkVideoEncodeContentFlagBitsKHR_VK_VIDEO_ENCODE_CONTENT_DEFAULT_KHR:
    VkVideoEncodeContentFlagBitsKHR = 0;
pub const VkVideoEncodeContentFlagBitsKHR_VK_VIDEO_ENCODE_CONTENT_CAMERA_BIT_KHR:
    VkVideoEncodeContentFlagBitsKHR = 1;
pub const VkVideoEncodeContentFlagBitsKHR_VK_VIDEO_ENCODE_CONTENT_DESKTOP_BIT_KHR:
    VkVideoEncodeContentFlagBitsKHR = 2;
pub const VkVideoEncodeContentFlagBitsKHR_VK_VIDEO_ENCODE_CONTENT_RENDERED_BIT_KHR:
    VkVideoEncodeContentFlagBitsKHR = 4;
pub const VkVideoEncodeContentFlagBitsKHR_VK_VIDEO_ENCODE_CONTENT_FLAG_BITS_MAX_ENUM_KHR:
    VkVideoEncodeContentFlagBitsKHR = 2147483647;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeInfoKHR"][::core::mem::size_of::<VkVideoEncodeInfoKHR>() - 96usize];
    ["Alignment of VkVideoEncodeInfoKHR"][::core::mem::align_of::<VkVideoEncodeInfoKHR>() - 8usize];
    ["Offset of field: VkVideoEncodeInfoKHR::sType"]
        [::core::mem::offset_of!(VkVideoEncodeInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoEncodeInfoKHR::pNext"]
        [::core::mem::offset_of!(VkVideoEncodeInfoKHR, pNext) - 4usize];
    ["Offset of field: VkVideoEncodeInfoKHR::flags"]
        [::core::mem::offset_of!(VkVideoEncodeInfoKHR, flags) - 8usize];
    ["Offset of field: VkVideoEncodeInfoKHR::dstBuffer"]
        [::core::mem::offset_of!(VkVideoEncodeInfoKHR, dstBuffer) - 16usize];
    ["Offset of field: VkVideoEncodeInfoKHR::dstBufferOffset"]
        [::core::mem::offset_of!(VkVideoEncodeInfoKHR, dstBufferOffset) - 24usize];
    ["Offset of field: VkVideoEncodeInfoKHR::dstBufferRange"]
        [::core::mem::offset_of!(VkVideoEncodeInfoKHR, dstBufferRange) - 32usize];
    ["Offset of field: VkVideoEncodeInfoKHR::srcPictureResource"]
        [::core::mem::offset_of!(VkVideoEncodeInfoKHR, srcPictureResource) - 40usize];
    ["Offset of field: VkVideoEncodeInfoKHR::pSetupReferenceSlot"]
        [::core::mem::offset_of!(VkVideoEncodeInfoKHR, pSetupReferenceSlot) - 80usize];
    ["Offset of field: VkVideoEncodeInfoKHR::referenceSlotCount"]
        [::core::mem::offset_of!(VkVideoEncodeInfoKHR, referenceSlotCount) - 84usize];
    ["Offset of field: VkVideoEncodeInfoKHR::pReferenceSlots"]
        [::core::mem::offset_of!(VkVideoEncodeInfoKHR, pReferenceSlots) - 88usize];
    ["Offset of field: VkVideoEncodeInfoKHR::precedingExternallyEncodedBytes"]
        [::core::mem::offset_of!(VkVideoEncodeInfoKHR, precedingExternallyEncodedBytes) - 92usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeCapabilitiesKHR"]
        [::core::mem::size_of::<VkVideoEncodeCapabilitiesKHR>() - 48usize];
    ["Alignment of VkVideoEncodeCapabilitiesKHR"]
        [::core::mem::align_of::<VkVideoEncodeCapabilitiesKHR>() - 8usize];
    ["Offset of field: VkVideoEncodeCapabilitiesKHR::sType"]
        [::core::mem::offset_of!(VkVideoEncodeCapabilitiesKHR, sType) - 0usize];
    ["Offset of field: VkVideoEncodeCapabilitiesKHR::pNext"]
        [::core::mem::offset_of!(VkVideoEncodeCapabilitiesKHR, pNext) - 4usize];
    ["Offset of field: VkVideoEncodeCapabilitiesKHR::flags"]
        [::core::mem::offset_of!(VkVideoEncodeCapabilitiesKHR, flags) - 8usize];
    ["Offset of field: VkVideoEncodeCapabilitiesKHR::rateControlModes"]
        [::core::mem::offset_of!(VkVideoEncodeCapabilitiesKHR, rateControlModes) - 12usize];
    ["Offset of field: VkVideoEncodeCapabilitiesKHR::maxRateControlLayers"]
        [::core::mem::offset_of!(VkVideoEncodeCapabilitiesKHR, maxRateControlLayers) - 16usize];
    ["Offset of field: VkVideoEncodeCapabilitiesKHR::maxBitrate"]
        [::core::mem::offset_of!(VkVideoEncodeCapabilitiesKHR, maxBitrate) - 24usize];
    ["Offset of field: VkVideoEncodeCapabilitiesKHR::maxQualityLevels"]
        [::core::mem::offset_of!(VkVideoEncodeCapabilitiesKHR, maxQualityLevels) - 32usize];
    ["Offset of field: VkVideoEncodeCapabilitiesKHR::encodeInputPictureGranularity"][::core::mem::offset_of!(
        VkVideoEncodeCapabilitiesKHR,
        encodeInputPictureGranularity
    ) - 36usize];
    ["Offset of field: VkVideoEncodeCapabilitiesKHR::supportedEncodeFeedbackFlags"][::core::mem::offset_of!(
        VkVideoEncodeCapabilitiesKHR,
        supportedEncodeFeedbackFlags
    ) - 44usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkQueryPoolVideoEncodeFeedbackCreateInfoKHR"]
        [::core::mem::size_of::<VkQueryPoolVideoEncodeFeedbackCreateInfoKHR>() - 12usize];
    ["Alignment of VkQueryPoolVideoEncodeFeedbackCreateInfoKHR"]
        [::core::mem::align_of::<VkQueryPoolVideoEncodeFeedbackCreateInfoKHR>() - 4usize];
    ["Offset of field: VkQueryPoolVideoEncodeFeedbackCreateInfoKHR::sType"]
        [::core::mem::offset_of!(VkQueryPoolVideoEncodeFeedbackCreateInfoKHR, sType) - 0usize];
    ["Offset of field: VkQueryPoolVideoEncodeFeedbackCreateInfoKHR::pNext"]
        [::core::mem::offset_of!(VkQueryPoolVideoEncodeFeedbackCreateInfoKHR, pNext) - 4usize];
    ["Offset of field: VkQueryPoolVideoEncodeFeedbackCreateInfoKHR::encodeFeedbackFlags"][::core::mem::offset_of!(
        VkQueryPoolVideoEncodeFeedbackCreateInfoKHR,
        encodeFeedbackFlags
    )
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeUsageInfoKHR"]
        [::core::mem::size_of::<VkVideoEncodeUsageInfoKHR>() - 20usize];
    ["Alignment of VkVideoEncodeUsageInfoKHR"]
        [::core::mem::align_of::<VkVideoEncodeUsageInfoKHR>() - 4usize];
    ["Offset of field: VkVideoEncodeUsageInfoKHR::sType"]
        [::core::mem::offset_of!(VkVideoEncodeUsageInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoEncodeUsageInfoKHR::pNext"]
        [::core::mem::offset_of!(VkVideoEncodeUsageInfoKHR, pNext) - 4usize];
    ["Offset of field: VkVideoEncodeUsageInfoKHR::videoUsageHints"]
        [::core::mem::offset_of!(VkVideoEncodeUsageInfoKHR, videoUsageHints) - 8usize];
    ["Offset of field: VkVideoEncodeUsageInfoKHR::videoContentHints"]
        [::core::mem::offset_of!(VkVideoEncodeUsageInfoKHR, videoContentHints) - 12usize];
    ["Offset of field: VkVideoEncodeUsageInfoKHR::tuningMode"]
        [::core::mem::offset_of!(VkVideoEncodeUsageInfoKHR, tuningMode) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeRateControlLayerInfoKHR"]
        [::core::mem::size_of::<VkVideoEncodeRateControlLayerInfoKHR>() - 32usize];
    ["Alignment of VkVideoEncodeRateControlLayerInfoKHR"]
        [::core::mem::align_of::<VkVideoEncodeRateControlLayerInfoKHR>() - 8usize];
    ["Offset of field: VkVideoEncodeRateControlLayerInfoKHR::sType"]
        [::core::mem::offset_of!(VkVideoEncodeRateControlLayerInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoEncodeRateControlLayerInfoKHR::pNext"]
        [::core::mem::offset_of!(VkVideoEncodeRateControlLayerInfoKHR, pNext) - 4usize];
    ["Offset of field: VkVideoEncodeRateControlLayerInfoKHR::averageBitrate"]
        [::core::mem::offset_of!(VkVideoEncodeRateControlLayerInfoKHR, averageBitrate) - 8usize];
    ["Offset of field: VkVideoEncodeRateControlLayerInfoKHR::maxBitrate"]
        [::core::mem::offset_of!(VkVideoEncodeRateControlLayerInfoKHR, maxBitrate) - 16usize];
    ["Offset of field: VkVideoEncodeRateControlLayerInfoKHR::frameRateNumerator"][::core::mem::offset_of!(
        VkVideoEncodeRateControlLayerInfoKHR,
        frameRateNumerator
    ) - 24usize];
    ["Offset of field: VkVideoEncodeRateControlLayerInfoKHR::frameRateDenominator"][::core::mem::offset_of!(
        VkVideoEncodeRateControlLayerInfoKHR,
        frameRateDenominator
    ) - 28usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeRateControlInfoKHR"]
        [::core::mem::size_of::<VkVideoEncodeRateControlInfoKHR>() - 32usize];
    ["Alignment of VkVideoEncodeRateControlInfoKHR"]
        [::core::mem::align_of::<VkVideoEncodeRateControlInfoKHR>() - 4usize];
    ["Offset of field: VkVideoEncodeRateControlInfoKHR::sType"]
        [::core::mem::offset_of!(VkVideoEncodeRateControlInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoEncodeRateControlInfoKHR::pNext"]
        [::core::mem::offset_of!(VkVideoEncodeRateControlInfoKHR, pNext) - 4usize];
    ["Offset of field: VkVideoEncodeRateControlInfoKHR::flags"]
        [::core::mem::offset_of!(VkVideoEncodeRateControlInfoKHR, flags) - 8usize];
    ["Offset of field: VkVideoEncodeRateControlInfoKHR::rateControlMode"]
        [::core::mem::offset_of!(VkVideoEncodeRateControlInfoKHR, rateControlMode) - 12usize];
    ["Offset of field: VkVideoEncodeRateControlInfoKHR::layerCount"]
        [::core::mem::offset_of!(VkVideoEncodeRateControlInfoKHR, layerCount) - 16usize];
    ["Offset of field: VkVideoEncodeRateControlInfoKHR::pLayers"]
        [::core::mem::offset_of!(VkVideoEncodeRateControlInfoKHR, pLayers) - 20usize];
    ["Offset of field: VkVideoEncodeRateControlInfoKHR::virtualBufferSizeInMs"]
        [::core::mem::offset_of!(VkVideoEncodeRateControlInfoKHR, virtualBufferSizeInMs) - 24usize];
    ["Offset of field: VkVideoEncodeRateControlInfoKHR::initialVirtualBufferSizeInMs"][::core::mem::offset_of!(
        VkVideoEncodeRateControlInfoKHR,
        initialVirtualBufferSizeInMs
    ) - 28usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR"]
        [::core::mem::size_of::<VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR>() - 16usize];
    ["Alignment of VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR"]
        [::core::mem::align_of::<VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR>() - 4usize];
    ["Offset of field: VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR::pVideoProfile"][::core::mem::offset_of!(
        VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR,
        pVideoProfile
    ) - 8usize];
    ["Offset of field: VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR::qualityLevel"][::core::mem::offset_of!(
        VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR,
        qualityLevel
    ) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeQualityLevelPropertiesKHR"]
        [::core::mem::size_of::<VkVideoEncodeQualityLevelPropertiesKHR>() - 16usize];
    ["Alignment of VkVideoEncodeQualityLevelPropertiesKHR"]
        [::core::mem::align_of::<VkVideoEncodeQualityLevelPropertiesKHR>() - 4usize];
    ["Offset of field: VkVideoEncodeQualityLevelPropertiesKHR::sType"]
        [::core::mem::offset_of!(VkVideoEncodeQualityLevelPropertiesKHR, sType) - 0usize];
    ["Offset of field: VkVideoEncodeQualityLevelPropertiesKHR::pNext"]
        [::core::mem::offset_of!(VkVideoEncodeQualityLevelPropertiesKHR, pNext) - 4usize];
    ["Offset of field: VkVideoEncodeQualityLevelPropertiesKHR::preferredRateControlMode"][::core::mem::offset_of!(
        VkVideoEncodeQualityLevelPropertiesKHR,
        preferredRateControlMode
    )
        - 8usize];
    ["Offset of field: VkVideoEncodeQualityLevelPropertiesKHR::preferredRateControlLayerCount"][::core::mem::offset_of!(
        VkVideoEncodeQualityLevelPropertiesKHR,
        preferredRateControlLayerCount
    )
        - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeQualityLevelInfoKHR"]
        [::core::mem::size_of::<VkVideoEncodeQualityLevelInfoKHR>() - 12usize];
    ["Alignment of VkVideoEncodeQualityLevelInfoKHR"]
        [::core::mem::align_of::<VkVideoEncodeQualityLevelInfoKHR>() - 4usize];
    ["Offset of field: VkVideoEncodeQualityLevelInfoKHR::sType"]
        [::core::mem::offset_of!(VkVideoEncodeQualityLevelInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoEncodeQualityLevelInfoKHR::pNext"]
        [::core::mem::offset_of!(VkVideoEncodeQualityLevelInfoKHR, pNext) - 4usize];
    ["Offset of field: VkVideoEncodeQualityLevelInfoKHR::qualityLevel"]
        [::core::mem::offset_of!(VkVideoEncodeQualityLevelInfoKHR, qualityLevel) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeSessionParametersGetInfoKHR"]
        [::core::mem::size_of::<VkVideoEncodeSessionParametersGetInfoKHR>() - 16usize];
    ["Alignment of VkVideoEncodeSessionParametersGetInfoKHR"]
        [::core::mem::align_of::<VkVideoEncodeSessionParametersGetInfoKHR>() - 8usize];
    ["Offset of field: VkVideoEncodeSessionParametersGetInfoKHR::sType"]
        [::core::mem::offset_of!(VkVideoEncodeSessionParametersGetInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoEncodeSessionParametersGetInfoKHR::pNext"]
        [::core::mem::offset_of!(VkVideoEncodeSessionParametersGetInfoKHR, pNext) - 4usize];
    ["Offset of field: VkVideoEncodeSessionParametersGetInfoKHR::videoSessionParameters"][::core::mem::offset_of!(
        VkVideoEncodeSessionParametersGetInfoKHR,
        videoSessionParameters
    )
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeSessionParametersFeedbackInfoKHR"]
        [::core::mem::size_of::<VkVideoEncodeSessionParametersFeedbackInfoKHR>() - 12usize];
    ["Alignment of VkVideoEncodeSessionParametersFeedbackInfoKHR"]
        [::core::mem::align_of::<VkVideoEncodeSessionParametersFeedbackInfoKHR>() - 4usize];
    ["Offset of field: VkVideoEncodeSessionParametersFeedbackInfoKHR::sType"]
        [::core::mem::offset_of!(VkVideoEncodeSessionParametersFeedbackInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoEncodeSessionParametersFeedbackInfoKHR::pNext"]
        [::core::mem::offset_of!(VkVideoEncodeSessionParametersFeedbackInfoKHR, pNext) - 4usize];
    ["Offset of field: VkVideoEncodeSessionParametersFeedbackInfoKHR::hasOverrides"][::core::mem::offset_of!(
        VkVideoEncodeSessionParametersFeedbackInfoKHR,
        hasOverrides
    ) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR"]
        [::core::mem::size_of::<VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR>() - 12usize];
    ["Alignment of VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR"]
        [::core::mem::align_of::<VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR>() - 4usize];
    ["Offset of field: VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR::sType"][::core::mem::offset_of!(
        VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR::pNext"][::core::mem::offset_of!(
        VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR,
        pNext
    ) - 4usize];
    ["Offset of field: VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR::fragmentShaderBarycentric"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR , fragmentShaderBarycentric) - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR"][::core::mem::size_of::<
        VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR,
    >() - 12usize];
    ["Alignment of VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR"][::core::mem::align_of::<
        VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR,
    >() - 4usize];
    ["Offset of field: VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR::sType"][::core::mem::offset_of!(
        VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR::pNext"][::core::mem::offset_of!(
        VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR,
        pNext
    ) - 4usize];
    ["Offset of field: VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR::triStripVertexOrderIndependentOfProvokingVertex"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR , triStripVertexOrderIndependentOfProvokingVertex) - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR"][::core::mem::size_of::<
        VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR,
    >() - 12usize];
    ["Alignment of VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR"]
        [::core::mem::align_of::<VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR>()
            - 4usize];
    ["Offset of field: VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR::sType"][::core::mem::offset_of!(
        VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR,
        sType
    )
        - 0usize];
    ["Offset of field: VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR::pNext"][::core::mem::offset_of!(
        VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR,
        pNext
    )
        - 4usize];
    ["Offset of field: VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR::shaderSubgroupUniformControlFlow"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR , shaderSubgroupUniformControlFlow) - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR"][::core::mem::size_of::<
        VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR,
    >() - 24usize];
    ["Alignment of VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR"][::core::mem::align_of::<
        VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR,
    >() - 4usize];
    ["Offset of field: VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR::sType"][::core::mem::offset_of!(
        VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR,
        sType
    )
        - 0usize];
    ["Offset of field: VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR::pNext"][::core::mem::offset_of!(
        VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR,
        pNext
    )
        - 4usize];
    ["Offset of field: VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR::workgroupMemoryExplicitLayout"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR , workgroupMemoryExplicitLayout) - 8usize] ;
    ["Offset of field: VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR::workgroupMemoryExplicitLayoutScalarBlockLayout"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR , workgroupMemoryExplicitLayoutScalarBlockLayout) - 12usize] ;
    ["Offset of field: VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR::workgroupMemoryExplicitLayout8BitAccess"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR , workgroupMemoryExplicitLayout8BitAccess) - 16usize] ;
    ["Offset of field: VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR::workgroupMemoryExplicitLayout16BitAccess"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR , workgroupMemoryExplicitLayout16BitAccess) - 20usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR"]
        [::core::mem::size_of::<VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR>() - 16usize];
    ["Alignment of VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR"]
        [::core::mem::align_of::<VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR>() - 4usize];
    ["Offset of field: VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR::sType"][::core::mem::offset_of!(
        VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR::pNext"][::core::mem::offset_of!(
        VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR,
        pNext
    ) - 4usize];
    ["Offset of field: VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR::rayTracingMaintenance1"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR , rayTracingMaintenance1) - 8usize] ;
    ["Offset of field: VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR::rayTracingPipelineTraceRaysIndirect2"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR , rayTracingPipelineTraceRaysIndirect2) - 12usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkTraceRaysIndirectCommand2KHR"]
        [::core::mem::size_of::<VkTraceRaysIndirectCommand2KHR>() - 104usize];
    ["Alignment of VkTraceRaysIndirectCommand2KHR"]
        [::core::mem::align_of::<VkTraceRaysIndirectCommand2KHR>() - 8usize];
    ["Offset of field: VkTraceRaysIndirectCommand2KHR::raygenShaderRecordAddress"][::core::mem::offset_of!(
        VkTraceRaysIndirectCommand2KHR,
        raygenShaderRecordAddress
    ) - 0usize];
    ["Offset of field: VkTraceRaysIndirectCommand2KHR::raygenShaderRecordSize"]
        [::core::mem::offset_of!(VkTraceRaysIndirectCommand2KHR, raygenShaderRecordSize) - 8usize];
    ["Offset of field: VkTraceRaysIndirectCommand2KHR::missShaderBindingTableAddress"][::core::mem::offset_of!(
        VkTraceRaysIndirectCommand2KHR,
        missShaderBindingTableAddress
    ) - 16usize];
    ["Offset of field: VkTraceRaysIndirectCommand2KHR::missShaderBindingTableSize"][::core::mem::offset_of!(
        VkTraceRaysIndirectCommand2KHR,
        missShaderBindingTableSize
    ) - 24usize];
    ["Offset of field: VkTraceRaysIndirectCommand2KHR::missShaderBindingTableStride"][::core::mem::offset_of!(
        VkTraceRaysIndirectCommand2KHR,
        missShaderBindingTableStride
    ) - 32usize];
    ["Offset of field: VkTraceRaysIndirectCommand2KHR::hitShaderBindingTableAddress"][::core::mem::offset_of!(
        VkTraceRaysIndirectCommand2KHR,
        hitShaderBindingTableAddress
    ) - 40usize];
    ["Offset of field: VkTraceRaysIndirectCommand2KHR::hitShaderBindingTableSize"][::core::mem::offset_of!(
        VkTraceRaysIndirectCommand2KHR,
        hitShaderBindingTableSize
    ) - 48usize];
    ["Offset of field: VkTraceRaysIndirectCommand2KHR::hitShaderBindingTableStride"][::core::mem::offset_of!(
        VkTraceRaysIndirectCommand2KHR,
        hitShaderBindingTableStride
    ) - 56usize];
    ["Offset of field: VkTraceRaysIndirectCommand2KHR::callableShaderBindingTableAddress"][::core::mem::offset_of!(
        VkTraceRaysIndirectCommand2KHR,
        callableShaderBindingTableAddress
    )
        - 64usize];
    ["Offset of field: VkTraceRaysIndirectCommand2KHR::callableShaderBindingTableSize"][::core::mem::offset_of!(
        VkTraceRaysIndirectCommand2KHR,
        callableShaderBindingTableSize
    )
        - 72usize];
    ["Offset of field: VkTraceRaysIndirectCommand2KHR::callableShaderBindingTableStride"][::core::mem::offset_of!(
        VkTraceRaysIndirectCommand2KHR,
        callableShaderBindingTableStride
    )
        - 80usize];
    ["Offset of field: VkTraceRaysIndirectCommand2KHR::width"]
        [::core::mem::offset_of!(VkTraceRaysIndirectCommand2KHR, width) - 88usize];
    ["Offset of field: VkTraceRaysIndirectCommand2KHR::height"]
        [::core::mem::offset_of!(VkTraceRaysIndirectCommand2KHR, height) - 92usize];
    ["Offset of field: VkTraceRaysIndirectCommand2KHR::depth"]
        [::core::mem::offset_of!(VkTraceRaysIndirectCommand2KHR, depth) - 96usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHR"]
        [::core::mem::size_of::<VkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHR>() - 12usize];
    ["Alignment of VkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHR"]
        [::core::mem::align_of::<VkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHR>() - 4usize];
    ["Offset of field: VkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHR::sType"][::core::mem::offset_of!(
        VkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHR,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHR::pNext"][::core::mem::offset_of!(
        VkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHR,
        pNext
    ) - 4usize];
    ["Offset of field: VkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHR::shaderMaximalReconvergence"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHR , shaderMaximalReconvergence) - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR"]
        [::core::mem::size_of::<VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR>() - 12usize];
    ["Alignment of VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR"]
        [::core::mem::align_of::<VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR>() - 4usize];
    ["Offset of field: VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR::sType"][::core::mem::offset_of!(
        VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR::pNext"][::core::mem::offset_of!(
        VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR,
        pNext
    ) - 4usize];
    ["Offset of field: VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR::rayTracingPositionFetch"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR , rayTracingPositionFetch) - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDevicePipelineBinaryFeaturesKHR"]
        [::core::mem::size_of::<VkPhysicalDevicePipelineBinaryFeaturesKHR>() - 12usize];
    ["Alignment of VkPhysicalDevicePipelineBinaryFeaturesKHR"]
        [::core::mem::align_of::<VkPhysicalDevicePipelineBinaryFeaturesKHR>() - 4usize];
    ["Offset of field: VkPhysicalDevicePipelineBinaryFeaturesKHR::sType"]
        [::core::mem::offset_of!(VkPhysicalDevicePipelineBinaryFeaturesKHR, sType) - 0usize];
    ["Offset of field: VkPhysicalDevicePipelineBinaryFeaturesKHR::pNext"]
        [::core::mem::offset_of!(VkPhysicalDevicePipelineBinaryFeaturesKHR, pNext) - 4usize];
    ["Offset of field: VkPhysicalDevicePipelineBinaryFeaturesKHR::pipelineBinaries"][::core::mem::offset_of!(
        VkPhysicalDevicePipelineBinaryFeaturesKHR,
        pipelineBinaries
    ) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDevicePipelineBinaryPropertiesKHR"]
        [::core::mem::size_of::<VkPhysicalDevicePipelineBinaryPropertiesKHR>() - 28usize];
    ["Alignment of VkPhysicalDevicePipelineBinaryPropertiesKHR"]
        [::core::mem::align_of::<VkPhysicalDevicePipelineBinaryPropertiesKHR>() - 4usize];
    ["Offset of field: VkPhysicalDevicePipelineBinaryPropertiesKHR::sType"]
        [::core::mem::offset_of!(VkPhysicalDevicePipelineBinaryPropertiesKHR, sType) - 0usize];
    ["Offset of field: VkPhysicalDevicePipelineBinaryPropertiesKHR::pNext"]
        [::core::mem::offset_of!(VkPhysicalDevicePipelineBinaryPropertiesKHR, pNext) - 4usize];
    ["Offset of field: VkPhysicalDevicePipelineBinaryPropertiesKHR::pipelineBinaryInternalCache"][::core::mem::offset_of!(
        VkPhysicalDevicePipelineBinaryPropertiesKHR,
        pipelineBinaryInternalCache
    )
        - 8usize];
    ["Offset of field: VkPhysicalDevicePipelineBinaryPropertiesKHR::pipelineBinaryInternalCacheControl"] [:: core :: mem :: offset_of ! (VkPhysicalDevicePipelineBinaryPropertiesKHR , pipelineBinaryInternalCacheControl) - 12usize] ;
    ["Offset of field: VkPhysicalDevicePipelineBinaryPropertiesKHR::pipelineBinaryPrefersInternalCache"] [:: core :: mem :: offset_of ! (VkPhysicalDevicePipelineBinaryPropertiesKHR , pipelineBinaryPrefersInternalCache) - 16usize] ;
    ["Offset of field: VkPhysicalDevicePipelineBinaryPropertiesKHR::pipelineBinaryPrecompiledInternalCache"] [:: core :: mem :: offset_of ! (VkPhysicalDevicePipelineBinaryPropertiesKHR , pipelineBinaryPrecompiledInternalCache) - 20usize] ;
    ["Offset of field: VkPhysicalDevicePipelineBinaryPropertiesKHR::pipelineBinaryCompressedData"] [:: core :: mem :: offset_of ! (VkPhysicalDevicePipelineBinaryPropertiesKHR , pipelineBinaryCompressedData) - 24usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDevicePipelineBinaryInternalCacheControlKHR"]
        [::core::mem::size_of::<VkDevicePipelineBinaryInternalCacheControlKHR>() - 12usize];
    ["Alignment of VkDevicePipelineBinaryInternalCacheControlKHR"]
        [::core::mem::align_of::<VkDevicePipelineBinaryInternalCacheControlKHR>() - 4usize];
    ["Offset of field: VkDevicePipelineBinaryInternalCacheControlKHR::sType"]
        [::core::mem::offset_of!(VkDevicePipelineBinaryInternalCacheControlKHR, sType) - 0usize];
    ["Offset of field: VkDevicePipelineBinaryInternalCacheControlKHR::pNext"]
        [::core::mem::offset_of!(VkDevicePipelineBinaryInternalCacheControlKHR, pNext) - 4usize];
    ["Offset of field: VkDevicePipelineBinaryInternalCacheControlKHR::disableInternalCache"][::core::mem::offset_of!(
        VkDevicePipelineBinaryInternalCacheControlKHR,
        disableInternalCache
    )
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineBinaryKeyKHR"][::core::mem::size_of::<VkPipelineBinaryKeyKHR>() - 44usize];
    ["Alignment of VkPipelineBinaryKeyKHR"]
        [::core::mem::align_of::<VkPipelineBinaryKeyKHR>() - 4usize];
    ["Offset of field: VkPipelineBinaryKeyKHR::sType"]
        [::core::mem::offset_of!(VkPipelineBinaryKeyKHR, sType) - 0usize];
    ["Offset of field: VkPipelineBinaryKeyKHR::pNext"]
        [::core::mem::offset_of!(VkPipelineBinaryKeyKHR, pNext) - 4usize];
    ["Offset of field: VkPipelineBinaryKeyKHR::keySize"]
        [::core::mem::offset_of!(VkPipelineBinaryKeyKHR, keySize) - 8usize];
    ["Offset of field: VkPipelineBinaryKeyKHR::key"]
        [::core::mem::offset_of!(VkPipelineBinaryKeyKHR, key) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineBinaryDataKHR"][::core::mem::size_of::<VkPipelineBinaryDataKHR>() - 8usize];
    ["Alignment of VkPipelineBinaryDataKHR"]
        [::core::mem::align_of::<VkPipelineBinaryDataKHR>() - 4usize];
    ["Offset of field: VkPipelineBinaryDataKHR::dataSize"]
        [::core::mem::offset_of!(VkPipelineBinaryDataKHR, dataSize) - 0usize];
    ["Offset of field: VkPipelineBinaryDataKHR::pData"]
        [::core::mem::offset_of!(VkPipelineBinaryDataKHR, pData) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineBinaryKeysAndDataKHR"]
        [::core::mem::size_of::<VkPipelineBinaryKeysAndDataKHR>() - 12usize];
    ["Alignment of VkPipelineBinaryKeysAndDataKHR"]
        [::core::mem::align_of::<VkPipelineBinaryKeysAndDataKHR>() - 4usize];
    ["Offset of field: VkPipelineBinaryKeysAndDataKHR::binaryCount"]
        [::core::mem::offset_of!(VkPipelineBinaryKeysAndDataKHR, binaryCount) - 0usize];
    ["Offset of field: VkPipelineBinaryKeysAndDataKHR::pPipelineBinaryKeys"]
        [::core::mem::offset_of!(VkPipelineBinaryKeysAndDataKHR, pPipelineBinaryKeys) - 4usize];
    ["Offset of field: VkPipelineBinaryKeysAndDataKHR::pPipelineBinaryData"]
        [::core::mem::offset_of!(VkPipelineBinaryKeysAndDataKHR, pPipelineBinaryData) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineCreateInfoKHR"][::core::mem::size_of::<VkPipelineCreateInfoKHR>() - 8usize];
    ["Alignment of VkPipelineCreateInfoKHR"]
        [::core::mem::align_of::<VkPipelineCreateInfoKHR>() - 4usize];
    ["Offset of field: VkPipelineCreateInfoKHR::sType"]
        [::core::mem::offset_of!(VkPipelineCreateInfoKHR, sType) - 0usize];
    ["Offset of field: VkPipelineCreateInfoKHR::pNext"]
        [::core::mem::offset_of!(VkPipelineCreateInfoKHR, pNext) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineBinaryCreateInfoKHR"]
        [::core::mem::size_of::<VkPipelineBinaryCreateInfoKHR>() - 32usize];
    ["Alignment of VkPipelineBinaryCreateInfoKHR"]
        [::core::mem::align_of::<VkPipelineBinaryCreateInfoKHR>() - 8usize];
    ["Offset of field: VkPipelineBinaryCreateInfoKHR::sType"]
        [::core::mem::offset_of!(VkPipelineBinaryCreateInfoKHR, sType) - 0usize];
    ["Offset of field: VkPipelineBinaryCreateInfoKHR::pNext"]
        [::core::mem::offset_of!(VkPipelineBinaryCreateInfoKHR, pNext) - 4usize];
    ["Offset of field: VkPipelineBinaryCreateInfoKHR::pKeysAndDataInfo"]
        [::core::mem::offset_of!(VkPipelineBinaryCreateInfoKHR, pKeysAndDataInfo) - 8usize];
    ["Offset of field: VkPipelineBinaryCreateInfoKHR::pipeline"]
        [::core::mem::offset_of!(VkPipelineBinaryCreateInfoKHR, pipeline) - 16usize];
    ["Offset of field: VkPipelineBinaryCreateInfoKHR::pPipelineCreateInfo"]
        [::core::mem::offset_of!(VkPipelineBinaryCreateInfoKHR, pPipelineCreateInfo) - 24usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineBinaryInfoKHR"]
        [::core::mem::size_of::<VkPipelineBinaryInfoKHR>() - 16usize];
    ["Alignment of VkPipelineBinaryInfoKHR"]
        [::core::mem::align_of::<VkPipelineBinaryInfoKHR>() - 4usize];
    ["Offset of field: VkPipelineBinaryInfoKHR::sType"]
        [::core::mem::offset_of!(VkPipelineBinaryInfoKHR, sType) - 0usize];
    ["Offset of field: VkPipelineBinaryInfoKHR::pNext"]
        [::core::mem::offset_of!(VkPipelineBinaryInfoKHR, pNext) - 4usize];
    ["Offset of field: VkPipelineBinaryInfoKHR::binaryCount"]
        [::core::mem::offset_of!(VkPipelineBinaryInfoKHR, binaryCount) - 8usize];
    ["Offset of field: VkPipelineBinaryInfoKHR::pPipelineBinaries"]
        [::core::mem::offset_of!(VkPipelineBinaryInfoKHR, pPipelineBinaries) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkReleaseCapturedPipelineDataInfoKHR"]
        [::core::mem::size_of::<VkReleaseCapturedPipelineDataInfoKHR>() - 16usize];
    ["Alignment of VkReleaseCapturedPipelineDataInfoKHR"]
        [::core::mem::align_of::<VkReleaseCapturedPipelineDataInfoKHR>() - 8usize];
    ["Offset of field: VkReleaseCapturedPipelineDataInfoKHR::sType"]
        [::core::mem::offset_of!(VkReleaseCapturedPipelineDataInfoKHR, sType) - 0usize];
    ["Offset of field: VkReleaseCapturedPipelineDataInfoKHR::pNext"]
        [::core::mem::offset_of!(VkReleaseCapturedPipelineDataInfoKHR, pNext) - 4usize];
    ["Offset of field: VkReleaseCapturedPipelineDataInfoKHR::pipeline"]
        [::core::mem::offset_of!(VkReleaseCapturedPipelineDataInfoKHR, pipeline) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineBinaryDataInfoKHR"]
        [::core::mem::size_of::<VkPipelineBinaryDataInfoKHR>() - 16usize];
    ["Alignment of VkPipelineBinaryDataInfoKHR"]
        [::core::mem::align_of::<VkPipelineBinaryDataInfoKHR>() - 8usize];
    ["Offset of field: VkPipelineBinaryDataInfoKHR::sType"]
        [::core::mem::offset_of!(VkPipelineBinaryDataInfoKHR, sType) - 0usize];
    ["Offset of field: VkPipelineBinaryDataInfoKHR::pNext"]
        [::core::mem::offset_of!(VkPipelineBinaryDataInfoKHR, pNext) - 4usize];
    ["Offset of field: VkPipelineBinaryDataInfoKHR::pipelineBinary"]
        [::core::mem::offset_of!(VkPipelineBinaryDataInfoKHR, pipelineBinary) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineBinaryHandlesInfoKHR"]
        [::core::mem::size_of::<VkPipelineBinaryHandlesInfoKHR>() - 16usize];
    ["Alignment of VkPipelineBinaryHandlesInfoKHR"]
        [::core::mem::align_of::<VkPipelineBinaryHandlesInfoKHR>() - 4usize];
    ["Offset of field: VkPipelineBinaryHandlesInfoKHR::sType"]
        [::core::mem::offset_of!(VkPipelineBinaryHandlesInfoKHR, sType) - 0usize];
    ["Offset of field: VkPipelineBinaryHandlesInfoKHR::pNext"]
        [::core::mem::offset_of!(VkPipelineBinaryHandlesInfoKHR, pNext) - 4usize];
    ["Offset of field: VkPipelineBinaryHandlesInfoKHR::pipelineBinaryCount"]
        [::core::mem::offset_of!(VkPipelineBinaryHandlesInfoKHR, pipelineBinaryCount) - 8usize];
    ["Offset of field: VkPipelineBinaryHandlesInfoKHR::pPipelineBinaries"]
        [::core::mem::offset_of!(VkPipelineBinaryHandlesInfoKHR, pPipelineBinaries) - 12usize];
};
pub const VkComponentTypeKHR_VK_COMPONENT_TYPE_FLOAT16_KHR: VkComponentTypeKHR = 0;
pub const VkComponentTypeKHR_VK_COMPONENT_TYPE_FLOAT32_KHR: VkComponentTypeKHR = 1;
pub const VkComponentTypeKHR_VK_COMPONENT_TYPE_FLOAT64_KHR: VkComponentTypeKHR = 2;
pub const VkComponentTypeKHR_VK_COMPONENT_TYPE_SINT8_KHR: VkComponentTypeKHR = 3;
pub const VkComponentTypeKHR_VK_COMPONENT_TYPE_SINT16_KHR: VkComponentTypeKHR = 4;
pub const VkComponentTypeKHR_VK_COMPONENT_TYPE_SINT32_KHR: VkComponentTypeKHR = 5;
pub const VkComponentTypeKHR_VK_COMPONENT_TYPE_SINT64_KHR: VkComponentTypeKHR = 6;
pub const VkComponentTypeKHR_VK_COMPONENT_TYPE_UINT8_KHR: VkComponentTypeKHR = 7;
pub const VkComponentTypeKHR_VK_COMPONENT_TYPE_UINT16_KHR: VkComponentTypeKHR = 8;
pub const VkComponentTypeKHR_VK_COMPONENT_TYPE_UINT32_KHR: VkComponentTypeKHR = 9;
pub const VkComponentTypeKHR_VK_COMPONENT_TYPE_UINT64_KHR: VkComponentTypeKHR = 10;
pub const VkComponentTypeKHR_VK_COMPONENT_TYPE_BFLOAT16_KHR: VkComponentTypeKHR = 1000141000;
pub const VkComponentTypeKHR_VK_COMPONENT_TYPE_SINT8_PACKED_NV: VkComponentTypeKHR = 1000491000;
pub const VkComponentTypeKHR_VK_COMPONENT_TYPE_UINT8_PACKED_NV: VkComponentTypeKHR = 1000491001;
pub const VkComponentTypeKHR_VK_COMPONENT_TYPE_FLOAT_E4M3_NV: VkComponentTypeKHR = 1000491002;
pub const VkComponentTypeKHR_VK_COMPONENT_TYPE_FLOAT_E5M2_NV: VkComponentTypeKHR = 1000491003;
pub const VkComponentTypeKHR_VK_COMPONENT_TYPE_FLOAT16_NV: VkComponentTypeKHR = 0;
pub const VkComponentTypeKHR_VK_COMPONENT_TYPE_FLOAT32_NV: VkComponentTypeKHR = 1;
pub const VkComponentTypeKHR_VK_COMPONENT_TYPE_FLOAT64_NV: VkComponentTypeKHR = 2;
pub const VkComponentTypeKHR_VK_COMPONENT_TYPE_SINT8_NV: VkComponentTypeKHR = 3;
pub const VkComponentTypeKHR_VK_COMPONENT_TYPE_SINT16_NV: VkComponentTypeKHR = 4;
pub const VkComponentTypeKHR_VK_COMPONENT_TYPE_SINT32_NV: VkComponentTypeKHR = 5;
pub const VkComponentTypeKHR_VK_COMPONENT_TYPE_SINT64_NV: VkComponentTypeKHR = 6;
pub const VkComponentTypeKHR_VK_COMPONENT_TYPE_UINT8_NV: VkComponentTypeKHR = 7;
pub const VkComponentTypeKHR_VK_COMPONENT_TYPE_UINT16_NV: VkComponentTypeKHR = 8;
pub const VkComponentTypeKHR_VK_COMPONENT_TYPE_UINT32_NV: VkComponentTypeKHR = 9;
pub const VkComponentTypeKHR_VK_COMPONENT_TYPE_UINT64_NV: VkComponentTypeKHR = 10;
pub const VkComponentTypeKHR_VK_COMPONENT_TYPE_MAX_ENUM_KHR: VkComponentTypeKHR = 2147483647;
pub const VkScopeKHR_VK_SCOPE_DEVICE_KHR: VkScopeKHR = 1;
pub const VkScopeKHR_VK_SCOPE_WORKGROUP_KHR: VkScopeKHR = 2;
pub const VkScopeKHR_VK_SCOPE_SUBGROUP_KHR: VkScopeKHR = 3;
pub const VkScopeKHR_VK_SCOPE_QUEUE_FAMILY_KHR: VkScopeKHR = 5;
pub const VkScopeKHR_VK_SCOPE_DEVICE_NV: VkScopeKHR = 1;
pub const VkScopeKHR_VK_SCOPE_WORKGROUP_NV: VkScopeKHR = 2;
pub const VkScopeKHR_VK_SCOPE_SUBGROUP_NV: VkScopeKHR = 3;
pub const VkScopeKHR_VK_SCOPE_QUEUE_FAMILY_NV: VkScopeKHR = 5;
pub const VkScopeKHR_VK_SCOPE_MAX_ENUM_KHR: VkScopeKHR = 2147483647;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkCooperativeMatrixPropertiesKHR"]
        [::core::mem::size_of::<VkCooperativeMatrixPropertiesKHR>() - 44usize];
    ["Alignment of VkCooperativeMatrixPropertiesKHR"]
        [::core::mem::align_of::<VkCooperativeMatrixPropertiesKHR>() - 4usize];
    ["Offset of field: VkCooperativeMatrixPropertiesKHR::sType"]
        [::core::mem::offset_of!(VkCooperativeMatrixPropertiesKHR, sType) - 0usize];
    ["Offset of field: VkCooperativeMatrixPropertiesKHR::pNext"]
        [::core::mem::offset_of!(VkCooperativeMatrixPropertiesKHR, pNext) - 4usize];
    ["Offset of field: VkCooperativeMatrixPropertiesKHR::MSize"]
        [::core::mem::offset_of!(VkCooperativeMatrixPropertiesKHR, MSize) - 8usize];
    ["Offset of field: VkCooperativeMatrixPropertiesKHR::NSize"]
        [::core::mem::offset_of!(VkCooperativeMatrixPropertiesKHR, NSize) - 12usize];
    ["Offset of field: VkCooperativeMatrixPropertiesKHR::KSize"]
        [::core::mem::offset_of!(VkCooperativeMatrixPropertiesKHR, KSize) - 16usize];
    ["Offset of field: VkCooperativeMatrixPropertiesKHR::AType"]
        [::core::mem::offset_of!(VkCooperativeMatrixPropertiesKHR, AType) - 20usize];
    ["Offset of field: VkCooperativeMatrixPropertiesKHR::BType"]
        [::core::mem::offset_of!(VkCooperativeMatrixPropertiesKHR, BType) - 24usize];
    ["Offset of field: VkCooperativeMatrixPropertiesKHR::CType"]
        [::core::mem::offset_of!(VkCooperativeMatrixPropertiesKHR, CType) - 28usize];
    ["Offset of field: VkCooperativeMatrixPropertiesKHR::ResultType"]
        [::core::mem::offset_of!(VkCooperativeMatrixPropertiesKHR, ResultType) - 32usize];
    ["Offset of field: VkCooperativeMatrixPropertiesKHR::saturatingAccumulation"][::core::mem::offset_of!(
        VkCooperativeMatrixPropertiesKHR,
        saturatingAccumulation
    ) - 36usize];
    ["Offset of field: VkCooperativeMatrixPropertiesKHR::scope"]
        [::core::mem::offset_of!(VkCooperativeMatrixPropertiesKHR, scope) - 40usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceCooperativeMatrixFeaturesKHR"]
        [::core::mem::size_of::<VkPhysicalDeviceCooperativeMatrixFeaturesKHR>() - 16usize];
    ["Alignment of VkPhysicalDeviceCooperativeMatrixFeaturesKHR"]
        [::core::mem::align_of::<VkPhysicalDeviceCooperativeMatrixFeaturesKHR>() - 4usize];
    ["Offset of field: VkPhysicalDeviceCooperativeMatrixFeaturesKHR::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceCooperativeMatrixFeaturesKHR, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceCooperativeMatrixFeaturesKHR::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceCooperativeMatrixFeaturesKHR, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceCooperativeMatrixFeaturesKHR::cooperativeMatrix"][::core::mem::offset_of!(
        VkPhysicalDeviceCooperativeMatrixFeaturesKHR,
        cooperativeMatrix
    )
        - 8usize];
    ["Offset of field: VkPhysicalDeviceCooperativeMatrixFeaturesKHR::cooperativeMatrixRobustBufferAccess"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceCooperativeMatrixFeaturesKHR , cooperativeMatrixRobustBufferAccess) - 12usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceCooperativeMatrixPropertiesKHR"]
        [::core::mem::size_of::<VkPhysicalDeviceCooperativeMatrixPropertiesKHR>() - 12usize];
    ["Alignment of VkPhysicalDeviceCooperativeMatrixPropertiesKHR"]
        [::core::mem::align_of::<VkPhysicalDeviceCooperativeMatrixPropertiesKHR>() - 4usize];
    ["Offset of field: VkPhysicalDeviceCooperativeMatrixPropertiesKHR::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceCooperativeMatrixPropertiesKHR, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceCooperativeMatrixPropertiesKHR::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceCooperativeMatrixPropertiesKHR, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceCooperativeMatrixPropertiesKHR::cooperativeMatrixSupportedStages"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceCooperativeMatrixPropertiesKHR , cooperativeMatrixSupportedStages) - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceComputeShaderDerivativesFeaturesKHR"]
        [::core::mem::size_of::<VkPhysicalDeviceComputeShaderDerivativesFeaturesKHR>() - 16usize];
    ["Alignment of VkPhysicalDeviceComputeShaderDerivativesFeaturesKHR"]
        [::core::mem::align_of::<VkPhysicalDeviceComputeShaderDerivativesFeaturesKHR>() - 4usize];
    ["Offset of field: VkPhysicalDeviceComputeShaderDerivativesFeaturesKHR::sType"][::core::mem::offset_of!(
        VkPhysicalDeviceComputeShaderDerivativesFeaturesKHR,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceComputeShaderDerivativesFeaturesKHR::pNext"][::core::mem::offset_of!(
        VkPhysicalDeviceComputeShaderDerivativesFeaturesKHR,
        pNext
    ) - 4usize];
    ["Offset of field: VkPhysicalDeviceComputeShaderDerivativesFeaturesKHR::computeDerivativeGroupQuads"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceComputeShaderDerivativesFeaturesKHR , computeDerivativeGroupQuads) - 8usize] ;
    ["Offset of field: VkPhysicalDeviceComputeShaderDerivativesFeaturesKHR::computeDerivativeGroupLinear"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceComputeShaderDerivativesFeaturesKHR , computeDerivativeGroupLinear) - 12usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceComputeShaderDerivativesPropertiesKHR"]
        [::core::mem::size_of::<VkPhysicalDeviceComputeShaderDerivativesPropertiesKHR>() - 12usize];
    ["Alignment of VkPhysicalDeviceComputeShaderDerivativesPropertiesKHR"]
        [::core::mem::align_of::<VkPhysicalDeviceComputeShaderDerivativesPropertiesKHR>() - 4usize];
    ["Offset of field: VkPhysicalDeviceComputeShaderDerivativesPropertiesKHR::sType"][::core::mem::offset_of!(
        VkPhysicalDeviceComputeShaderDerivativesPropertiesKHR,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceComputeShaderDerivativesPropertiesKHR::pNext"][::core::mem::offset_of!(
        VkPhysicalDeviceComputeShaderDerivativesPropertiesKHR,
        pNext
    ) - 4usize];
    ["Offset of field: VkPhysicalDeviceComputeShaderDerivativesPropertiesKHR::meshAndTaskShaderDerivatives"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceComputeShaderDerivativesPropertiesKHR , meshAndTaskShaderDerivatives) - 8usize] ;
};
pub const StdVideoAV1Profile_STD_VIDEO_AV1_PROFILE_MAIN: StdVideoAV1Profile = 0;
pub const StdVideoAV1Profile_STD_VIDEO_AV1_PROFILE_HIGH: StdVideoAV1Profile = 1;
pub const StdVideoAV1Profile_STD_VIDEO_AV1_PROFILE_PROFESSIONAL: StdVideoAV1Profile = 2;
pub const StdVideoAV1Profile_STD_VIDEO_AV1_PROFILE_INVALID: StdVideoAV1Profile = 2147483647;
pub const StdVideoAV1Profile_STD_VIDEO_AV1_PROFILE_MAX_ENUM: StdVideoAV1Profile = 2147483647;
pub const StdVideoAV1Level_STD_VIDEO_AV1_LEVEL_2_0: StdVideoAV1Level = 0;
pub const StdVideoAV1Level_STD_VIDEO_AV1_LEVEL_2_1: StdVideoAV1Level = 1;
pub const StdVideoAV1Level_STD_VIDEO_AV1_LEVEL_2_2: StdVideoAV1Level = 2;
pub const StdVideoAV1Level_STD_VIDEO_AV1_LEVEL_2_3: StdVideoAV1Level = 3;
pub const StdVideoAV1Level_STD_VIDEO_AV1_LEVEL_3_0: StdVideoAV1Level = 4;
pub const StdVideoAV1Level_STD_VIDEO_AV1_LEVEL_3_1: StdVideoAV1Level = 5;
pub const StdVideoAV1Level_STD_VIDEO_AV1_LEVEL_3_2: StdVideoAV1Level = 6;
pub const StdVideoAV1Level_STD_VIDEO_AV1_LEVEL_3_3: StdVideoAV1Level = 7;
pub const StdVideoAV1Level_STD_VIDEO_AV1_LEVEL_4_0: StdVideoAV1Level = 8;
pub const StdVideoAV1Level_STD_VIDEO_AV1_LEVEL_4_1: StdVideoAV1Level = 9;
pub const StdVideoAV1Level_STD_VIDEO_AV1_LEVEL_4_2: StdVideoAV1Level = 10;
pub const StdVideoAV1Level_STD_VIDEO_AV1_LEVEL_4_3: StdVideoAV1Level = 11;
pub const StdVideoAV1Level_STD_VIDEO_AV1_LEVEL_5_0: StdVideoAV1Level = 12;
pub const StdVideoAV1Level_STD_VIDEO_AV1_LEVEL_5_1: StdVideoAV1Level = 13;
pub const StdVideoAV1Level_STD_VIDEO_AV1_LEVEL_5_2: StdVideoAV1Level = 14;
pub const StdVideoAV1Level_STD_VIDEO_AV1_LEVEL_5_3: StdVideoAV1Level = 15;
pub const StdVideoAV1Level_STD_VIDEO_AV1_LEVEL_6_0: StdVideoAV1Level = 16;
pub const StdVideoAV1Level_STD_VIDEO_AV1_LEVEL_6_1: StdVideoAV1Level = 17;
pub const StdVideoAV1Level_STD_VIDEO_AV1_LEVEL_6_2: StdVideoAV1Level = 18;
pub const StdVideoAV1Level_STD_VIDEO_AV1_LEVEL_6_3: StdVideoAV1Level = 19;
pub const StdVideoAV1Level_STD_VIDEO_AV1_LEVEL_7_0: StdVideoAV1Level = 20;
pub const StdVideoAV1Level_STD_VIDEO_AV1_LEVEL_7_1: StdVideoAV1Level = 21;
pub const StdVideoAV1Level_STD_VIDEO_AV1_LEVEL_7_2: StdVideoAV1Level = 22;
pub const StdVideoAV1Level_STD_VIDEO_AV1_LEVEL_7_3: StdVideoAV1Level = 23;
pub const StdVideoAV1Level_STD_VIDEO_AV1_LEVEL_INVALID: StdVideoAV1Level = 2147483647;
pub const StdVideoAV1Level_STD_VIDEO_AV1_LEVEL_MAX_ENUM: StdVideoAV1Level = 2147483647;
pub const StdVideoAV1FrameType_STD_VIDEO_AV1_FRAME_TYPE_KEY: StdVideoAV1FrameType = 0;
pub const StdVideoAV1FrameType_STD_VIDEO_AV1_FRAME_TYPE_INTER: StdVideoAV1FrameType = 1;
pub const StdVideoAV1FrameType_STD_VIDEO_AV1_FRAME_TYPE_INTRA_ONLY: StdVideoAV1FrameType = 2;
pub const StdVideoAV1FrameType_STD_VIDEO_AV1_FRAME_TYPE_SWITCH: StdVideoAV1FrameType = 3;
pub const StdVideoAV1FrameType_STD_VIDEO_AV1_FRAME_TYPE_INVALID: StdVideoAV1FrameType = 2147483647;
pub const StdVideoAV1FrameType_STD_VIDEO_AV1_FRAME_TYPE_MAX_ENUM: StdVideoAV1FrameType = 2147483647;
pub const StdVideoAV1InterpolationFilter_STD_VIDEO_AV1_INTERPOLATION_FILTER_EIGHTTAP:
    StdVideoAV1InterpolationFilter = 0;
pub const StdVideoAV1InterpolationFilter_STD_VIDEO_AV1_INTERPOLATION_FILTER_EIGHTTAP_SMOOTH:
    StdVideoAV1InterpolationFilter = 1;
pub const StdVideoAV1InterpolationFilter_STD_VIDEO_AV1_INTERPOLATION_FILTER_EIGHTTAP_SHARP:
    StdVideoAV1InterpolationFilter = 2;
pub const StdVideoAV1InterpolationFilter_STD_VIDEO_AV1_INTERPOLATION_FILTER_BILINEAR:
    StdVideoAV1InterpolationFilter = 3;
pub const StdVideoAV1InterpolationFilter_STD_VIDEO_AV1_INTERPOLATION_FILTER_SWITCHABLE:
    StdVideoAV1InterpolationFilter = 4;
pub const StdVideoAV1InterpolationFilter_STD_VIDEO_AV1_INTERPOLATION_FILTER_INVALID:
    StdVideoAV1InterpolationFilter = 2147483647;
pub const StdVideoAV1InterpolationFilter_STD_VIDEO_AV1_INTERPOLATION_FILTER_MAX_ENUM:
    StdVideoAV1InterpolationFilter = 2147483647;
pub const StdVideoAV1TxMode_STD_VIDEO_AV1_TX_MODE_ONLY_4X4: StdVideoAV1TxMode = 0;
pub const StdVideoAV1TxMode_STD_VIDEO_AV1_TX_MODE_LARGEST: StdVideoAV1TxMode = 1;
pub const StdVideoAV1TxMode_STD_VIDEO_AV1_TX_MODE_SELECT: StdVideoAV1TxMode = 2;
pub const StdVideoAV1TxMode_STD_VIDEO_AV1_TX_MODE_INVALID: StdVideoAV1TxMode = 2147483647;
pub const StdVideoAV1TxMode_STD_VIDEO_AV1_TX_MODE_MAX_ENUM: StdVideoAV1TxMode = 2147483647;
pub const StdVideoAV1FrameRestorationType_STD_VIDEO_AV1_FRAME_RESTORATION_TYPE_NONE:
    StdVideoAV1FrameRestorationType = 0;
pub const StdVideoAV1FrameRestorationType_STD_VIDEO_AV1_FRAME_RESTORATION_TYPE_WIENER:
    StdVideoAV1FrameRestorationType = 1;
pub const StdVideoAV1FrameRestorationType_STD_VIDEO_AV1_FRAME_RESTORATION_TYPE_SGRPROJ:
    StdVideoAV1FrameRestorationType = 2;
pub const StdVideoAV1FrameRestorationType_STD_VIDEO_AV1_FRAME_RESTORATION_TYPE_SWITCHABLE:
    StdVideoAV1FrameRestorationType = 3;
pub const StdVideoAV1FrameRestorationType_STD_VIDEO_AV1_FRAME_RESTORATION_TYPE_INVALID:
    StdVideoAV1FrameRestorationType = 2147483647;
pub const StdVideoAV1FrameRestorationType_STD_VIDEO_AV1_FRAME_RESTORATION_TYPE_MAX_ENUM:
    StdVideoAV1FrameRestorationType = 2147483647;
pub const StdVideoAV1ColorPrimaries_STD_VIDEO_AV1_COLOR_PRIMARIES_BT_709:
    StdVideoAV1ColorPrimaries = 1;
pub const StdVideoAV1ColorPrimaries_STD_VIDEO_AV1_COLOR_PRIMARIES_UNSPECIFIED:
    StdVideoAV1ColorPrimaries = 2;
pub const StdVideoAV1ColorPrimaries_STD_VIDEO_AV1_COLOR_PRIMARIES_BT_470_M:
    StdVideoAV1ColorPrimaries = 4;
pub const StdVideoAV1ColorPrimaries_STD_VIDEO_AV1_COLOR_PRIMARIES_BT_470_B_G:
    StdVideoAV1ColorPrimaries = 5;
pub const StdVideoAV1ColorPrimaries_STD_VIDEO_AV1_COLOR_PRIMARIES_BT_601:
    StdVideoAV1ColorPrimaries = 6;
pub const StdVideoAV1ColorPrimaries_STD_VIDEO_AV1_COLOR_PRIMARIES_SMPTE_240:
    StdVideoAV1ColorPrimaries = 7;
pub const StdVideoAV1ColorPrimaries_STD_VIDEO_AV1_COLOR_PRIMARIES_GENERIC_FILM:
    StdVideoAV1ColorPrimaries = 8;
pub const StdVideoAV1ColorPrimaries_STD_VIDEO_AV1_COLOR_PRIMARIES_BT_2020:
    StdVideoAV1ColorPrimaries = 9;
pub const StdVideoAV1ColorPrimaries_STD_VIDEO_AV1_COLOR_PRIMARIES_XYZ: StdVideoAV1ColorPrimaries =
    10;
pub const StdVideoAV1ColorPrimaries_STD_VIDEO_AV1_COLOR_PRIMARIES_SMPTE_431:
    StdVideoAV1ColorPrimaries = 11;
pub const StdVideoAV1ColorPrimaries_STD_VIDEO_AV1_COLOR_PRIMARIES_SMPTE_432:
    StdVideoAV1ColorPrimaries = 12;
pub const StdVideoAV1ColorPrimaries_STD_VIDEO_AV1_COLOR_PRIMARIES_EBU_3213:
    StdVideoAV1ColorPrimaries = 22;
pub const StdVideoAV1ColorPrimaries_STD_VIDEO_AV1_COLOR_PRIMARIES_INVALID:
    StdVideoAV1ColorPrimaries = 2147483647;
#[doc = " STD_VIDEO_AV1_COLOR_PRIMARIES_BT_UNSPECIFIED is a deprecated alias"]
pub const StdVideoAV1ColorPrimaries_STD_VIDEO_AV1_COLOR_PRIMARIES_BT_UNSPECIFIED:
    StdVideoAV1ColorPrimaries = 2;
#[doc = " STD_VIDEO_AV1_COLOR_PRIMARIES_BT_UNSPECIFIED is a deprecated alias"]
pub const StdVideoAV1ColorPrimaries_STD_VIDEO_AV1_COLOR_PRIMARIES_MAX_ENUM:
    StdVideoAV1ColorPrimaries = 2147483647;
pub const StdVideoAV1TransferCharacteristics_STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_RESERVED_0:
    StdVideoAV1TransferCharacteristics = 0;
pub const StdVideoAV1TransferCharacteristics_STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_BT_709:
    StdVideoAV1TransferCharacteristics = 1;
pub const StdVideoAV1TransferCharacteristics_STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_UNSPECIFIED:
    StdVideoAV1TransferCharacteristics = 2;
pub const StdVideoAV1TransferCharacteristics_STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_RESERVED_3:
    StdVideoAV1TransferCharacteristics = 3;
pub const StdVideoAV1TransferCharacteristics_STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_BT_470_M:
    StdVideoAV1TransferCharacteristics = 4;
pub const StdVideoAV1TransferCharacteristics_STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_BT_470_B_G:
    StdVideoAV1TransferCharacteristics = 5;
pub const StdVideoAV1TransferCharacteristics_STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_BT_601:
    StdVideoAV1TransferCharacteristics = 6;
pub const StdVideoAV1TransferCharacteristics_STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_SMPTE_240:
    StdVideoAV1TransferCharacteristics = 7;
pub const StdVideoAV1TransferCharacteristics_STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_LINEAR:
    StdVideoAV1TransferCharacteristics = 8;
pub const StdVideoAV1TransferCharacteristics_STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_LOG_100:
    StdVideoAV1TransferCharacteristics = 9;
pub const StdVideoAV1TransferCharacteristics_STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_LOG_100_SQRT10 : StdVideoAV1TransferCharacteristics = 10 ;
pub const StdVideoAV1TransferCharacteristics_STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_IEC_61966:
    StdVideoAV1TransferCharacteristics = 11;
pub const StdVideoAV1TransferCharacteristics_STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_BT_1361:
    StdVideoAV1TransferCharacteristics = 12;
pub const StdVideoAV1TransferCharacteristics_STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_SRGB:
    StdVideoAV1TransferCharacteristics = 13;
pub const StdVideoAV1TransferCharacteristics_STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_BT_2020_10_BIT : StdVideoAV1TransferCharacteristics = 14 ;
pub const StdVideoAV1TransferCharacteristics_STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_BT_2020_12_BIT : StdVideoAV1TransferCharacteristics = 15 ;
pub const StdVideoAV1TransferCharacteristics_STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_SMPTE_2084:
    StdVideoAV1TransferCharacteristics = 16;
pub const StdVideoAV1TransferCharacteristics_STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_SMPTE_428:
    StdVideoAV1TransferCharacteristics = 17;
pub const StdVideoAV1TransferCharacteristics_STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_HLG:
    StdVideoAV1TransferCharacteristics = 18;
pub const StdVideoAV1TransferCharacteristics_STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_INVALID:
    StdVideoAV1TransferCharacteristics = 2147483647;
pub const StdVideoAV1TransferCharacteristics_STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_MAX_ENUM:
    StdVideoAV1TransferCharacteristics = 2147483647;
pub const StdVideoAV1MatrixCoefficients_STD_VIDEO_AV1_MATRIX_COEFFICIENTS_IDENTITY:
    StdVideoAV1MatrixCoefficients = 0;
pub const StdVideoAV1MatrixCoefficients_STD_VIDEO_AV1_MATRIX_COEFFICIENTS_BT_709:
    StdVideoAV1MatrixCoefficients = 1;
pub const StdVideoAV1MatrixCoefficients_STD_VIDEO_AV1_MATRIX_COEFFICIENTS_UNSPECIFIED:
    StdVideoAV1MatrixCoefficients = 2;
pub const StdVideoAV1MatrixCoefficients_STD_VIDEO_AV1_MATRIX_COEFFICIENTS_RESERVED_3:
    StdVideoAV1MatrixCoefficients = 3;
pub const StdVideoAV1MatrixCoefficients_STD_VIDEO_AV1_MATRIX_COEFFICIENTS_FCC:
    StdVideoAV1MatrixCoefficients = 4;
pub const StdVideoAV1MatrixCoefficients_STD_VIDEO_AV1_MATRIX_COEFFICIENTS_BT_470_B_G:
    StdVideoAV1MatrixCoefficients = 5;
pub const StdVideoAV1MatrixCoefficients_STD_VIDEO_AV1_MATRIX_COEFFICIENTS_BT_601:
    StdVideoAV1MatrixCoefficients = 6;
pub const StdVideoAV1MatrixCoefficients_STD_VIDEO_AV1_MATRIX_COEFFICIENTS_SMPTE_240:
    StdVideoAV1MatrixCoefficients = 7;
pub const StdVideoAV1MatrixCoefficients_STD_VIDEO_AV1_MATRIX_COEFFICIENTS_SMPTE_YCGCO:
    StdVideoAV1MatrixCoefficients = 8;
pub const StdVideoAV1MatrixCoefficients_STD_VIDEO_AV1_MATRIX_COEFFICIENTS_BT_2020_NCL:
    StdVideoAV1MatrixCoefficients = 9;
pub const StdVideoAV1MatrixCoefficients_STD_VIDEO_AV1_MATRIX_COEFFICIENTS_BT_2020_CL:
    StdVideoAV1MatrixCoefficients = 10;
pub const StdVideoAV1MatrixCoefficients_STD_VIDEO_AV1_MATRIX_COEFFICIENTS_SMPTE_2085:
    StdVideoAV1MatrixCoefficients = 11;
pub const StdVideoAV1MatrixCoefficients_STD_VIDEO_AV1_MATRIX_COEFFICIENTS_CHROMAT_NCL:
    StdVideoAV1MatrixCoefficients = 12;
pub const StdVideoAV1MatrixCoefficients_STD_VIDEO_AV1_MATRIX_COEFFICIENTS_CHROMAT_CL:
    StdVideoAV1MatrixCoefficients = 13;
pub const StdVideoAV1MatrixCoefficients_STD_VIDEO_AV1_MATRIX_COEFFICIENTS_ICTCP:
    StdVideoAV1MatrixCoefficients = 14;
pub const StdVideoAV1MatrixCoefficients_STD_VIDEO_AV1_MATRIX_COEFFICIENTS_INVALID:
    StdVideoAV1MatrixCoefficients = 2147483647;
pub const StdVideoAV1MatrixCoefficients_STD_VIDEO_AV1_MATRIX_COEFFICIENTS_MAX_ENUM:
    StdVideoAV1MatrixCoefficients = 2147483647;
pub const StdVideoAV1ChromaSamplePosition_STD_VIDEO_AV1_CHROMA_SAMPLE_POSITION_UNKNOWN:
    StdVideoAV1ChromaSamplePosition = 0;
pub const StdVideoAV1ChromaSamplePosition_STD_VIDEO_AV1_CHROMA_SAMPLE_POSITION_VERTICAL:
    StdVideoAV1ChromaSamplePosition = 1;
pub const StdVideoAV1ChromaSamplePosition_STD_VIDEO_AV1_CHROMA_SAMPLE_POSITION_COLOCATED:
    StdVideoAV1ChromaSamplePosition = 2;
pub const StdVideoAV1ChromaSamplePosition_STD_VIDEO_AV1_CHROMA_SAMPLE_POSITION_RESERVED:
    StdVideoAV1ChromaSamplePosition = 3;
pub const StdVideoAV1ChromaSamplePosition_STD_VIDEO_AV1_CHROMA_SAMPLE_POSITION_INVALID:
    StdVideoAV1ChromaSamplePosition = 2147483647;
pub const StdVideoAV1ChromaSamplePosition_STD_VIDEO_AV1_CHROMA_SAMPLE_POSITION_MAX_ENUM:
    StdVideoAV1ChromaSamplePosition = 2147483647;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoAV1ColorConfigFlags"]
        [::core::mem::size_of::<StdVideoAV1ColorConfigFlags>() - 4usize];
    ["Alignment of StdVideoAV1ColorConfigFlags"]
        [::core::mem::align_of::<StdVideoAV1ColorConfigFlags>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoAV1ColorConfig"][::core::mem::size_of::<StdVideoAV1ColorConfig>() - 24usize];
    ["Alignment of StdVideoAV1ColorConfig"]
        [::core::mem::align_of::<StdVideoAV1ColorConfig>() - 4usize];
    ["Offset of field: StdVideoAV1ColorConfig::flags"]
        [::core::mem::offset_of!(StdVideoAV1ColorConfig, flags) - 0usize];
    ["Offset of field: StdVideoAV1ColorConfig::BitDepth"]
        [::core::mem::offset_of!(StdVideoAV1ColorConfig, BitDepth) - 4usize];
    ["Offset of field: StdVideoAV1ColorConfig::subsampling_x"]
        [::core::mem::offset_of!(StdVideoAV1ColorConfig, subsampling_x) - 5usize];
    ["Offset of field: StdVideoAV1ColorConfig::subsampling_y"]
        [::core::mem::offset_of!(StdVideoAV1ColorConfig, subsampling_y) - 6usize];
    ["Offset of field: StdVideoAV1ColorConfig::reserved1"]
        [::core::mem::offset_of!(StdVideoAV1ColorConfig, reserved1) - 7usize];
    ["Offset of field: StdVideoAV1ColorConfig::color_primaries"]
        [::core::mem::offset_of!(StdVideoAV1ColorConfig, color_primaries) - 8usize];
    ["Offset of field: StdVideoAV1ColorConfig::transfer_characteristics"]
        [::core::mem::offset_of!(StdVideoAV1ColorConfig, transfer_characteristics) - 12usize];
    ["Offset of field: StdVideoAV1ColorConfig::matrix_coefficients"]
        [::core::mem::offset_of!(StdVideoAV1ColorConfig, matrix_coefficients) - 16usize];
    ["Offset of field: StdVideoAV1ColorConfig::chroma_sample_position"]
        [::core::mem::offset_of!(StdVideoAV1ColorConfig, chroma_sample_position) - 20usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoAV1TimingInfoFlags"]
        [::core::mem::size_of::<StdVideoAV1TimingInfoFlags>() - 4usize];
    ["Alignment of StdVideoAV1TimingInfoFlags"]
        [::core::mem::align_of::<StdVideoAV1TimingInfoFlags>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoAV1TimingInfo"][::core::mem::size_of::<StdVideoAV1TimingInfo>() - 16usize];
    ["Alignment of StdVideoAV1TimingInfo"]
        [::core::mem::align_of::<StdVideoAV1TimingInfo>() - 4usize];
    ["Offset of field: StdVideoAV1TimingInfo::flags"]
        [::core::mem::offset_of!(StdVideoAV1TimingInfo, flags) - 0usize];
    ["Offset of field: StdVideoAV1TimingInfo::num_units_in_display_tick"]
        [::core::mem::offset_of!(StdVideoAV1TimingInfo, num_units_in_display_tick) - 4usize];
    ["Offset of field: StdVideoAV1TimingInfo::time_scale"]
        [::core::mem::offset_of!(StdVideoAV1TimingInfo, time_scale) - 8usize];
    ["Offset of field: StdVideoAV1TimingInfo::num_ticks_per_picture_minus_1"]
        [::core::mem::offset_of!(StdVideoAV1TimingInfo, num_ticks_per_picture_minus_1) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoAV1LoopFilterFlags"]
        [::core::mem::size_of::<StdVideoAV1LoopFilterFlags>() - 4usize];
    ["Alignment of StdVideoAV1LoopFilterFlags"]
        [::core::mem::align_of::<StdVideoAV1LoopFilterFlags>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoAV1LoopFilter"][::core::mem::size_of::<StdVideoAV1LoopFilter>() - 24usize];
    ["Alignment of StdVideoAV1LoopFilter"]
        [::core::mem::align_of::<StdVideoAV1LoopFilter>() - 4usize];
    ["Offset of field: StdVideoAV1LoopFilter::flags"]
        [::core::mem::offset_of!(StdVideoAV1LoopFilter, flags) - 0usize];
    ["Offset of field: StdVideoAV1LoopFilter::loop_filter_level"]
        [::core::mem::offset_of!(StdVideoAV1LoopFilter, loop_filter_level) - 4usize];
    ["Offset of field: StdVideoAV1LoopFilter::loop_filter_sharpness"]
        [::core::mem::offset_of!(StdVideoAV1LoopFilter, loop_filter_sharpness) - 8usize];
    ["Offset of field: StdVideoAV1LoopFilter::update_ref_delta"]
        [::core::mem::offset_of!(StdVideoAV1LoopFilter, update_ref_delta) - 9usize];
    ["Offset of field: StdVideoAV1LoopFilter::loop_filter_ref_deltas"]
        [::core::mem::offset_of!(StdVideoAV1LoopFilter, loop_filter_ref_deltas) - 10usize];
    ["Offset of field: StdVideoAV1LoopFilter::update_mode_delta"]
        [::core::mem::offset_of!(StdVideoAV1LoopFilter, update_mode_delta) - 18usize];
    ["Offset of field: StdVideoAV1LoopFilter::loop_filter_mode_deltas"]
        [::core::mem::offset_of!(StdVideoAV1LoopFilter, loop_filter_mode_deltas) - 19usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoAV1QuantizationFlags"]
        [::core::mem::size_of::<StdVideoAV1QuantizationFlags>() - 4usize];
    ["Alignment of StdVideoAV1QuantizationFlags"]
        [::core::mem::align_of::<StdVideoAV1QuantizationFlags>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoAV1Quantization"]
        [::core::mem::size_of::<StdVideoAV1Quantization>() - 16usize];
    ["Alignment of StdVideoAV1Quantization"]
        [::core::mem::align_of::<StdVideoAV1Quantization>() - 4usize];
    ["Offset of field: StdVideoAV1Quantization::flags"]
        [::core::mem::offset_of!(StdVideoAV1Quantization, flags) - 0usize];
    ["Offset of field: StdVideoAV1Quantization::base_q_idx"]
        [::core::mem::offset_of!(StdVideoAV1Quantization, base_q_idx) - 4usize];
    ["Offset of field: StdVideoAV1Quantization::DeltaQYDc"]
        [::core::mem::offset_of!(StdVideoAV1Quantization, DeltaQYDc) - 5usize];
    ["Offset of field: StdVideoAV1Quantization::DeltaQUDc"]
        [::core::mem::offset_of!(StdVideoAV1Quantization, DeltaQUDc) - 6usize];
    ["Offset of field: StdVideoAV1Quantization::DeltaQUAc"]
        [::core::mem::offset_of!(StdVideoAV1Quantization, DeltaQUAc) - 7usize];
    ["Offset of field: StdVideoAV1Quantization::DeltaQVDc"]
        [::core::mem::offset_of!(StdVideoAV1Quantization, DeltaQVDc) - 8usize];
    ["Offset of field: StdVideoAV1Quantization::DeltaQVAc"]
        [::core::mem::offset_of!(StdVideoAV1Quantization, DeltaQVAc) - 9usize];
    ["Offset of field: StdVideoAV1Quantization::qm_y"]
        [::core::mem::offset_of!(StdVideoAV1Quantization, qm_y) - 10usize];
    ["Offset of field: StdVideoAV1Quantization::qm_u"]
        [::core::mem::offset_of!(StdVideoAV1Quantization, qm_u) - 11usize];
    ["Offset of field: StdVideoAV1Quantization::qm_v"]
        [::core::mem::offset_of!(StdVideoAV1Quantization, qm_v) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoAV1Segmentation"]
        [::core::mem::size_of::<StdVideoAV1Segmentation>() - 136usize];
    ["Alignment of StdVideoAV1Segmentation"]
        [::core::mem::align_of::<StdVideoAV1Segmentation>() - 2usize];
    ["Offset of field: StdVideoAV1Segmentation::FeatureEnabled"]
        [::core::mem::offset_of!(StdVideoAV1Segmentation, FeatureEnabled) - 0usize];
    ["Offset of field: StdVideoAV1Segmentation::FeatureData"]
        [::core::mem::offset_of!(StdVideoAV1Segmentation, FeatureData) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoAV1TileInfoFlags"]
        [::core::mem::size_of::<StdVideoAV1TileInfoFlags>() - 4usize];
    ["Alignment of StdVideoAV1TileInfoFlags"]
        [::core::mem::align_of::<StdVideoAV1TileInfoFlags>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoAV1TileInfo"][::core::mem::size_of::<StdVideoAV1TileInfo>() - 32usize];
    ["Alignment of StdVideoAV1TileInfo"][::core::mem::align_of::<StdVideoAV1TileInfo>() - 4usize];
    ["Offset of field: StdVideoAV1TileInfo::flags"]
        [::core::mem::offset_of!(StdVideoAV1TileInfo, flags) - 0usize];
    ["Offset of field: StdVideoAV1TileInfo::TileCols"]
        [::core::mem::offset_of!(StdVideoAV1TileInfo, TileCols) - 4usize];
    ["Offset of field: StdVideoAV1TileInfo::TileRows"]
        [::core::mem::offset_of!(StdVideoAV1TileInfo, TileRows) - 5usize];
    ["Offset of field: StdVideoAV1TileInfo::context_update_tile_id"]
        [::core::mem::offset_of!(StdVideoAV1TileInfo, context_update_tile_id) - 6usize];
    ["Offset of field: StdVideoAV1TileInfo::tile_size_bytes_minus_1"]
        [::core::mem::offset_of!(StdVideoAV1TileInfo, tile_size_bytes_minus_1) - 8usize];
    ["Offset of field: StdVideoAV1TileInfo::reserved1"]
        [::core::mem::offset_of!(StdVideoAV1TileInfo, reserved1) - 9usize];
    ["Offset of field: StdVideoAV1TileInfo::pMiColStarts"]
        [::core::mem::offset_of!(StdVideoAV1TileInfo, pMiColStarts) - 16usize];
    ["Offset of field: StdVideoAV1TileInfo::pMiRowStarts"]
        [::core::mem::offset_of!(StdVideoAV1TileInfo, pMiRowStarts) - 20usize];
    ["Offset of field: StdVideoAV1TileInfo::pWidthInSbsMinus1"]
        [::core::mem::offset_of!(StdVideoAV1TileInfo, pWidthInSbsMinus1) - 24usize];
    ["Offset of field: StdVideoAV1TileInfo::pHeightInSbsMinus1"]
        [::core::mem::offset_of!(StdVideoAV1TileInfo, pHeightInSbsMinus1) - 28usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoAV1CDEF"][::core::mem::size_of::<StdVideoAV1CDEF>() - 34usize];
    ["Alignment of StdVideoAV1CDEF"][::core::mem::align_of::<StdVideoAV1CDEF>() - 1usize];
    ["Offset of field: StdVideoAV1CDEF::cdef_damping_minus_3"]
        [::core::mem::offset_of!(StdVideoAV1CDEF, cdef_damping_minus_3) - 0usize];
    ["Offset of field: StdVideoAV1CDEF::cdef_bits"]
        [::core::mem::offset_of!(StdVideoAV1CDEF, cdef_bits) - 1usize];
    ["Offset of field: StdVideoAV1CDEF::cdef_y_pri_strength"]
        [::core::mem::offset_of!(StdVideoAV1CDEF, cdef_y_pri_strength) - 2usize];
    ["Offset of field: StdVideoAV1CDEF::cdef_y_sec_strength"]
        [::core::mem::offset_of!(StdVideoAV1CDEF, cdef_y_sec_strength) - 10usize];
    ["Offset of field: StdVideoAV1CDEF::cdef_uv_pri_strength"]
        [::core::mem::offset_of!(StdVideoAV1CDEF, cdef_uv_pri_strength) - 18usize];
    ["Offset of field: StdVideoAV1CDEF::cdef_uv_sec_strength"]
        [::core::mem::offset_of!(StdVideoAV1CDEF, cdef_uv_sec_strength) - 26usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoAV1LoopRestoration"]
        [::core::mem::size_of::<StdVideoAV1LoopRestoration>() - 20usize];
    ["Alignment of StdVideoAV1LoopRestoration"]
        [::core::mem::align_of::<StdVideoAV1LoopRestoration>() - 4usize];
    ["Offset of field: StdVideoAV1LoopRestoration::FrameRestorationType"]
        [::core::mem::offset_of!(StdVideoAV1LoopRestoration, FrameRestorationType) - 0usize];
    ["Offset of field: StdVideoAV1LoopRestoration::LoopRestorationSize"]
        [::core::mem::offset_of!(StdVideoAV1LoopRestoration, LoopRestorationSize) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoAV1GlobalMotion"]
        [::core::mem::size_of::<StdVideoAV1GlobalMotion>() - 200usize];
    ["Alignment of StdVideoAV1GlobalMotion"]
        [::core::mem::align_of::<StdVideoAV1GlobalMotion>() - 4usize];
    ["Offset of field: StdVideoAV1GlobalMotion::GmType"]
        [::core::mem::offset_of!(StdVideoAV1GlobalMotion, GmType) - 0usize];
    ["Offset of field: StdVideoAV1GlobalMotion::gm_params"]
        [::core::mem::offset_of!(StdVideoAV1GlobalMotion, gm_params) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoAV1FilmGrainFlags"]
        [::core::mem::size_of::<StdVideoAV1FilmGrainFlags>() - 4usize];
    ["Alignment of StdVideoAV1FilmGrainFlags"]
        [::core::mem::align_of::<StdVideoAV1FilmGrainFlags>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoAV1FilmGrain"][::core::mem::size_of::<StdVideoAV1FilmGrain>() - 164usize];
    ["Alignment of StdVideoAV1FilmGrain"][::core::mem::align_of::<StdVideoAV1FilmGrain>() - 4usize];
    ["Offset of field: StdVideoAV1FilmGrain::flags"]
        [::core::mem::offset_of!(StdVideoAV1FilmGrain, flags) - 0usize];
    ["Offset of field: StdVideoAV1FilmGrain::grain_scaling_minus_8"]
        [::core::mem::offset_of!(StdVideoAV1FilmGrain, grain_scaling_minus_8) - 4usize];
    ["Offset of field: StdVideoAV1FilmGrain::ar_coeff_lag"]
        [::core::mem::offset_of!(StdVideoAV1FilmGrain, ar_coeff_lag) - 5usize];
    ["Offset of field: StdVideoAV1FilmGrain::ar_coeff_shift_minus_6"]
        [::core::mem::offset_of!(StdVideoAV1FilmGrain, ar_coeff_shift_minus_6) - 6usize];
    ["Offset of field: StdVideoAV1FilmGrain::grain_scale_shift"]
        [::core::mem::offset_of!(StdVideoAV1FilmGrain, grain_scale_shift) - 7usize];
    ["Offset of field: StdVideoAV1FilmGrain::grain_seed"]
        [::core::mem::offset_of!(StdVideoAV1FilmGrain, grain_seed) - 8usize];
    ["Offset of field: StdVideoAV1FilmGrain::film_grain_params_ref_idx"]
        [::core::mem::offset_of!(StdVideoAV1FilmGrain, film_grain_params_ref_idx) - 10usize];
    ["Offset of field: StdVideoAV1FilmGrain::num_y_points"]
        [::core::mem::offset_of!(StdVideoAV1FilmGrain, num_y_points) - 11usize];
    ["Offset of field: StdVideoAV1FilmGrain::point_y_value"]
        [::core::mem::offset_of!(StdVideoAV1FilmGrain, point_y_value) - 12usize];
    ["Offset of field: StdVideoAV1FilmGrain::point_y_scaling"]
        [::core::mem::offset_of!(StdVideoAV1FilmGrain, point_y_scaling) - 26usize];
    ["Offset of field: StdVideoAV1FilmGrain::num_cb_points"]
        [::core::mem::offset_of!(StdVideoAV1FilmGrain, num_cb_points) - 40usize];
    ["Offset of field: StdVideoAV1FilmGrain::point_cb_value"]
        [::core::mem::offset_of!(StdVideoAV1FilmGrain, point_cb_value) - 41usize];
    ["Offset of field: StdVideoAV1FilmGrain::point_cb_scaling"]
        [::core::mem::offset_of!(StdVideoAV1FilmGrain, point_cb_scaling) - 51usize];
    ["Offset of field: StdVideoAV1FilmGrain::num_cr_points"]
        [::core::mem::offset_of!(StdVideoAV1FilmGrain, num_cr_points) - 61usize];
    ["Offset of field: StdVideoAV1FilmGrain::point_cr_value"]
        [::core::mem::offset_of!(StdVideoAV1FilmGrain, point_cr_value) - 62usize];
    ["Offset of field: StdVideoAV1FilmGrain::point_cr_scaling"]
        [::core::mem::offset_of!(StdVideoAV1FilmGrain, point_cr_scaling) - 72usize];
    ["Offset of field: StdVideoAV1FilmGrain::ar_coeffs_y_plus_128"]
        [::core::mem::offset_of!(StdVideoAV1FilmGrain, ar_coeffs_y_plus_128) - 82usize];
    ["Offset of field: StdVideoAV1FilmGrain::ar_coeffs_cb_plus_128"]
        [::core::mem::offset_of!(StdVideoAV1FilmGrain, ar_coeffs_cb_plus_128) - 106usize];
    ["Offset of field: StdVideoAV1FilmGrain::ar_coeffs_cr_plus_128"]
        [::core::mem::offset_of!(StdVideoAV1FilmGrain, ar_coeffs_cr_plus_128) - 131usize];
    ["Offset of field: StdVideoAV1FilmGrain::cb_mult"]
        [::core::mem::offset_of!(StdVideoAV1FilmGrain, cb_mult) - 156usize];
    ["Offset of field: StdVideoAV1FilmGrain::cb_luma_mult"]
        [::core::mem::offset_of!(StdVideoAV1FilmGrain, cb_luma_mult) - 157usize];
    ["Offset of field: StdVideoAV1FilmGrain::cb_offset"]
        [::core::mem::offset_of!(StdVideoAV1FilmGrain, cb_offset) - 158usize];
    ["Offset of field: StdVideoAV1FilmGrain::cr_mult"]
        [::core::mem::offset_of!(StdVideoAV1FilmGrain, cr_mult) - 160usize];
    ["Offset of field: StdVideoAV1FilmGrain::cr_luma_mult"]
        [::core::mem::offset_of!(StdVideoAV1FilmGrain, cr_luma_mult) - 161usize];
    ["Offset of field: StdVideoAV1FilmGrain::cr_offset"]
        [::core::mem::offset_of!(StdVideoAV1FilmGrain, cr_offset) - 162usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoAV1SequenceHeaderFlags"]
        [::core::mem::size_of::<StdVideoAV1SequenceHeaderFlags>() - 4usize];
    ["Alignment of StdVideoAV1SequenceHeaderFlags"]
        [::core::mem::align_of::<StdVideoAV1SequenceHeaderFlags>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoAV1SequenceHeader"]
        [::core::mem::size_of::<StdVideoAV1SequenceHeader>() - 32usize];
    ["Alignment of StdVideoAV1SequenceHeader"]
        [::core::mem::align_of::<StdVideoAV1SequenceHeader>() - 4usize];
    ["Offset of field: StdVideoAV1SequenceHeader::flags"]
        [::core::mem::offset_of!(StdVideoAV1SequenceHeader, flags) - 0usize];
    ["Offset of field: StdVideoAV1SequenceHeader::seq_profile"]
        [::core::mem::offset_of!(StdVideoAV1SequenceHeader, seq_profile) - 4usize];
    ["Offset of field: StdVideoAV1SequenceHeader::frame_width_bits_minus_1"]
        [::core::mem::offset_of!(StdVideoAV1SequenceHeader, frame_width_bits_minus_1) - 8usize];
    ["Offset of field: StdVideoAV1SequenceHeader::frame_height_bits_minus_1"]
        [::core::mem::offset_of!(StdVideoAV1SequenceHeader, frame_height_bits_minus_1) - 9usize];
    ["Offset of field: StdVideoAV1SequenceHeader::max_frame_width_minus_1"]
        [::core::mem::offset_of!(StdVideoAV1SequenceHeader, max_frame_width_minus_1) - 10usize];
    ["Offset of field: StdVideoAV1SequenceHeader::max_frame_height_minus_1"]
        [::core::mem::offset_of!(StdVideoAV1SequenceHeader, max_frame_height_minus_1) - 12usize];
    ["Offset of field: StdVideoAV1SequenceHeader::delta_frame_id_length_minus_2"][::core::mem::offset_of!(
        StdVideoAV1SequenceHeader,
        delta_frame_id_length_minus_2
    ) - 14usize];
    ["Offset of field: StdVideoAV1SequenceHeader::additional_frame_id_length_minus_1"][::core::mem::offset_of!(
        StdVideoAV1SequenceHeader,
        additional_frame_id_length_minus_1
    ) - 15usize];
    ["Offset of field: StdVideoAV1SequenceHeader::order_hint_bits_minus_1"]
        [::core::mem::offset_of!(StdVideoAV1SequenceHeader, order_hint_bits_minus_1) - 16usize];
    ["Offset of field: StdVideoAV1SequenceHeader::seq_force_integer_mv"]
        [::core::mem::offset_of!(StdVideoAV1SequenceHeader, seq_force_integer_mv) - 17usize];
    ["Offset of field: StdVideoAV1SequenceHeader::seq_force_screen_content_tools"][::core::mem::offset_of!(
        StdVideoAV1SequenceHeader,
        seq_force_screen_content_tools
    ) - 18usize];
    ["Offset of field: StdVideoAV1SequenceHeader::reserved1"]
        [::core::mem::offset_of!(StdVideoAV1SequenceHeader, reserved1) - 19usize];
    ["Offset of field: StdVideoAV1SequenceHeader::pColorConfig"]
        [::core::mem::offset_of!(StdVideoAV1SequenceHeader, pColorConfig) - 24usize];
    ["Offset of field: StdVideoAV1SequenceHeader::pTimingInfo"]
        [::core::mem::offset_of!(StdVideoAV1SequenceHeader, pTimingInfo) - 28usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoDecodeAV1PictureInfoFlags"]
        [::core::mem::size_of::<StdVideoDecodeAV1PictureInfoFlags>() - 4usize];
    ["Alignment of StdVideoDecodeAV1PictureInfoFlags"]
        [::core::mem::align_of::<StdVideoDecodeAV1PictureInfoFlags>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoDecodeAV1PictureInfo"]
        [::core::mem::size_of::<StdVideoDecodeAV1PictureInfo>() - 104usize];
    ["Alignment of StdVideoDecodeAV1PictureInfo"]
        [::core::mem::align_of::<StdVideoDecodeAV1PictureInfo>() - 4usize];
    ["Offset of field: StdVideoDecodeAV1PictureInfo::flags"]
        [::core::mem::offset_of!(StdVideoDecodeAV1PictureInfo, flags) - 0usize];
    ["Offset of field: StdVideoDecodeAV1PictureInfo::frame_type"]
        [::core::mem::offset_of!(StdVideoDecodeAV1PictureInfo, frame_type) - 4usize];
    ["Offset of field: StdVideoDecodeAV1PictureInfo::current_frame_id"]
        [::core::mem::offset_of!(StdVideoDecodeAV1PictureInfo, current_frame_id) - 8usize];
    ["Offset of field: StdVideoDecodeAV1PictureInfo::OrderHint"]
        [::core::mem::offset_of!(StdVideoDecodeAV1PictureInfo, OrderHint) - 12usize];
    ["Offset of field: StdVideoDecodeAV1PictureInfo::primary_ref_frame"]
        [::core::mem::offset_of!(StdVideoDecodeAV1PictureInfo, primary_ref_frame) - 13usize];
    ["Offset of field: StdVideoDecodeAV1PictureInfo::refresh_frame_flags"]
        [::core::mem::offset_of!(StdVideoDecodeAV1PictureInfo, refresh_frame_flags) - 14usize];
    ["Offset of field: StdVideoDecodeAV1PictureInfo::reserved1"]
        [::core::mem::offset_of!(StdVideoDecodeAV1PictureInfo, reserved1) - 15usize];
    ["Offset of field: StdVideoDecodeAV1PictureInfo::interpolation_filter"]
        [::core::mem::offset_of!(StdVideoDecodeAV1PictureInfo, interpolation_filter) - 16usize];
    ["Offset of field: StdVideoDecodeAV1PictureInfo::TxMode"]
        [::core::mem::offset_of!(StdVideoDecodeAV1PictureInfo, TxMode) - 20usize];
    ["Offset of field: StdVideoDecodeAV1PictureInfo::delta_q_res"]
        [::core::mem::offset_of!(StdVideoDecodeAV1PictureInfo, delta_q_res) - 24usize];
    ["Offset of field: StdVideoDecodeAV1PictureInfo::delta_lf_res"]
        [::core::mem::offset_of!(StdVideoDecodeAV1PictureInfo, delta_lf_res) - 25usize];
    ["Offset of field: StdVideoDecodeAV1PictureInfo::SkipModeFrame"]
        [::core::mem::offset_of!(StdVideoDecodeAV1PictureInfo, SkipModeFrame) - 26usize];
    ["Offset of field: StdVideoDecodeAV1PictureInfo::coded_denom"]
        [::core::mem::offset_of!(StdVideoDecodeAV1PictureInfo, coded_denom) - 28usize];
    ["Offset of field: StdVideoDecodeAV1PictureInfo::reserved2"]
        [::core::mem::offset_of!(StdVideoDecodeAV1PictureInfo, reserved2) - 29usize];
    ["Offset of field: StdVideoDecodeAV1PictureInfo::OrderHints"]
        [::core::mem::offset_of!(StdVideoDecodeAV1PictureInfo, OrderHints) - 32usize];
    ["Offset of field: StdVideoDecodeAV1PictureInfo::expectedFrameId"]
        [::core::mem::offset_of!(StdVideoDecodeAV1PictureInfo, expectedFrameId) - 40usize];
    ["Offset of field: StdVideoDecodeAV1PictureInfo::pTileInfo"]
        [::core::mem::offset_of!(StdVideoDecodeAV1PictureInfo, pTileInfo) - 72usize];
    ["Offset of field: StdVideoDecodeAV1PictureInfo::pQuantization"]
        [::core::mem::offset_of!(StdVideoDecodeAV1PictureInfo, pQuantization) - 76usize];
    ["Offset of field: StdVideoDecodeAV1PictureInfo::pSegmentation"]
        [::core::mem::offset_of!(StdVideoDecodeAV1PictureInfo, pSegmentation) - 80usize];
    ["Offset of field: StdVideoDecodeAV1PictureInfo::pLoopFilter"]
        [::core::mem::offset_of!(StdVideoDecodeAV1PictureInfo, pLoopFilter) - 84usize];
    ["Offset of field: StdVideoDecodeAV1PictureInfo::pCDEF"]
        [::core::mem::offset_of!(StdVideoDecodeAV1PictureInfo, pCDEF) - 88usize];
    ["Offset of field: StdVideoDecodeAV1PictureInfo::pLoopRestoration"]
        [::core::mem::offset_of!(StdVideoDecodeAV1PictureInfo, pLoopRestoration) - 92usize];
    ["Offset of field: StdVideoDecodeAV1PictureInfo::pGlobalMotion"]
        [::core::mem::offset_of!(StdVideoDecodeAV1PictureInfo, pGlobalMotion) - 96usize];
    ["Offset of field: StdVideoDecodeAV1PictureInfo::pFilmGrain"]
        [::core::mem::offset_of!(StdVideoDecodeAV1PictureInfo, pFilmGrain) - 100usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoDecodeAV1ReferenceInfoFlags"]
        [::core::mem::size_of::<StdVideoDecodeAV1ReferenceInfoFlags>() - 4usize];
    ["Alignment of StdVideoDecodeAV1ReferenceInfoFlags"]
        [::core::mem::align_of::<StdVideoDecodeAV1ReferenceInfoFlags>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoDecodeAV1ReferenceInfo"]
        [::core::mem::size_of::<StdVideoDecodeAV1ReferenceInfo>() - 16usize];
    ["Alignment of StdVideoDecodeAV1ReferenceInfo"]
        [::core::mem::align_of::<StdVideoDecodeAV1ReferenceInfo>() - 4usize];
    ["Offset of field: StdVideoDecodeAV1ReferenceInfo::flags"]
        [::core::mem::offset_of!(StdVideoDecodeAV1ReferenceInfo, flags) - 0usize];
    ["Offset of field: StdVideoDecodeAV1ReferenceInfo::frame_type"]
        [::core::mem::offset_of!(StdVideoDecodeAV1ReferenceInfo, frame_type) - 4usize];
    ["Offset of field: StdVideoDecodeAV1ReferenceInfo::RefFrameSignBias"]
        [::core::mem::offset_of!(StdVideoDecodeAV1ReferenceInfo, RefFrameSignBias) - 5usize];
    ["Offset of field: StdVideoDecodeAV1ReferenceInfo::OrderHint"]
        [::core::mem::offset_of!(StdVideoDecodeAV1ReferenceInfo, OrderHint) - 6usize];
    ["Offset of field: StdVideoDecodeAV1ReferenceInfo::SavedOrderHints"]
        [::core::mem::offset_of!(StdVideoDecodeAV1ReferenceInfo, SavedOrderHints) - 7usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoDecodeAV1ProfileInfoKHR"]
        [::core::mem::size_of::<VkVideoDecodeAV1ProfileInfoKHR>() - 16usize];
    ["Alignment of VkVideoDecodeAV1ProfileInfoKHR"]
        [::core::mem::align_of::<VkVideoDecodeAV1ProfileInfoKHR>() - 4usize];
    ["Offset of field: VkVideoDecodeAV1ProfileInfoKHR::sType"]
        [::core::mem::offset_of!(VkVideoDecodeAV1ProfileInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoDecodeAV1ProfileInfoKHR::pNext"]
        [::core::mem::offset_of!(VkVideoDecodeAV1ProfileInfoKHR, pNext) - 4usize];
    ["Offset of field: VkVideoDecodeAV1ProfileInfoKHR::stdProfile"]
        [::core::mem::offset_of!(VkVideoDecodeAV1ProfileInfoKHR, stdProfile) - 8usize];
    ["Offset of field: VkVideoDecodeAV1ProfileInfoKHR::filmGrainSupport"]
        [::core::mem::offset_of!(VkVideoDecodeAV1ProfileInfoKHR, filmGrainSupport) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoDecodeAV1CapabilitiesKHR"]
        [::core::mem::size_of::<VkVideoDecodeAV1CapabilitiesKHR>() - 12usize];
    ["Alignment of VkVideoDecodeAV1CapabilitiesKHR"]
        [::core::mem::align_of::<VkVideoDecodeAV1CapabilitiesKHR>() - 4usize];
    ["Offset of field: VkVideoDecodeAV1CapabilitiesKHR::sType"]
        [::core::mem::offset_of!(VkVideoDecodeAV1CapabilitiesKHR, sType) - 0usize];
    ["Offset of field: VkVideoDecodeAV1CapabilitiesKHR::pNext"]
        [::core::mem::offset_of!(VkVideoDecodeAV1CapabilitiesKHR, pNext) - 4usize];
    ["Offset of field: VkVideoDecodeAV1CapabilitiesKHR::maxLevel"]
        [::core::mem::offset_of!(VkVideoDecodeAV1CapabilitiesKHR, maxLevel) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoDecodeAV1SessionParametersCreateInfoKHR"]
        [::core::mem::size_of::<VkVideoDecodeAV1SessionParametersCreateInfoKHR>() - 12usize];
    ["Alignment of VkVideoDecodeAV1SessionParametersCreateInfoKHR"]
        [::core::mem::align_of::<VkVideoDecodeAV1SessionParametersCreateInfoKHR>() - 4usize];
    ["Offset of field: VkVideoDecodeAV1SessionParametersCreateInfoKHR::sType"]
        [::core::mem::offset_of!(VkVideoDecodeAV1SessionParametersCreateInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoDecodeAV1SessionParametersCreateInfoKHR::pNext"]
        [::core::mem::offset_of!(VkVideoDecodeAV1SessionParametersCreateInfoKHR, pNext) - 4usize];
    ["Offset of field: VkVideoDecodeAV1SessionParametersCreateInfoKHR::pStdSequenceHeader"][::core::mem::offset_of!(
        VkVideoDecodeAV1SessionParametersCreateInfoKHR,
        pStdSequenceHeader
    )
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoDecodeAV1PictureInfoKHR"]
        [::core::mem::size_of::<VkVideoDecodeAV1PictureInfoKHR>() - 56usize];
    ["Alignment of VkVideoDecodeAV1PictureInfoKHR"]
        [::core::mem::align_of::<VkVideoDecodeAV1PictureInfoKHR>() - 4usize];
    ["Offset of field: VkVideoDecodeAV1PictureInfoKHR::sType"]
        [::core::mem::offset_of!(VkVideoDecodeAV1PictureInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoDecodeAV1PictureInfoKHR::pNext"]
        [::core::mem::offset_of!(VkVideoDecodeAV1PictureInfoKHR, pNext) - 4usize];
    ["Offset of field: VkVideoDecodeAV1PictureInfoKHR::pStdPictureInfo"]
        [::core::mem::offset_of!(VkVideoDecodeAV1PictureInfoKHR, pStdPictureInfo) - 8usize];
    ["Offset of field: VkVideoDecodeAV1PictureInfoKHR::referenceNameSlotIndices"][::core::mem::offset_of!(
        VkVideoDecodeAV1PictureInfoKHR,
        referenceNameSlotIndices
    ) - 12usize];
    ["Offset of field: VkVideoDecodeAV1PictureInfoKHR::frameHeaderOffset"]
        [::core::mem::offset_of!(VkVideoDecodeAV1PictureInfoKHR, frameHeaderOffset) - 40usize];
    ["Offset of field: VkVideoDecodeAV1PictureInfoKHR::tileCount"]
        [::core::mem::offset_of!(VkVideoDecodeAV1PictureInfoKHR, tileCount) - 44usize];
    ["Offset of field: VkVideoDecodeAV1PictureInfoKHR::pTileOffsets"]
        [::core::mem::offset_of!(VkVideoDecodeAV1PictureInfoKHR, pTileOffsets) - 48usize];
    ["Offset of field: VkVideoDecodeAV1PictureInfoKHR::pTileSizes"]
        [::core::mem::offset_of!(VkVideoDecodeAV1PictureInfoKHR, pTileSizes) - 52usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoDecodeAV1DpbSlotInfoKHR"]
        [::core::mem::size_of::<VkVideoDecodeAV1DpbSlotInfoKHR>() - 12usize];
    ["Alignment of VkVideoDecodeAV1DpbSlotInfoKHR"]
        [::core::mem::align_of::<VkVideoDecodeAV1DpbSlotInfoKHR>() - 4usize];
    ["Offset of field: VkVideoDecodeAV1DpbSlotInfoKHR::sType"]
        [::core::mem::offset_of!(VkVideoDecodeAV1DpbSlotInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoDecodeAV1DpbSlotInfoKHR::pNext"]
        [::core::mem::offset_of!(VkVideoDecodeAV1DpbSlotInfoKHR, pNext) - 4usize];
    ["Offset of field: VkVideoDecodeAV1DpbSlotInfoKHR::pStdReferenceInfo"]
        [::core::mem::offset_of!(VkVideoDecodeAV1DpbSlotInfoKHR, pStdReferenceInfo) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoEncodeAV1DecoderModelInfo"]
        [::core::mem::size_of::<StdVideoEncodeAV1DecoderModelInfo>() - 8usize];
    ["Alignment of StdVideoEncodeAV1DecoderModelInfo"]
        [::core::mem::align_of::<StdVideoEncodeAV1DecoderModelInfo>() - 4usize];
    ["Offset of field: StdVideoEncodeAV1DecoderModelInfo::buffer_delay_length_minus_1"][::core::mem::offset_of!(
        StdVideoEncodeAV1DecoderModelInfo,
        buffer_delay_length_minus_1
    ) - 0usize];
    ["Offset of field: StdVideoEncodeAV1DecoderModelInfo::buffer_removal_time_length_minus_1"][::core::mem::offset_of!(
        StdVideoEncodeAV1DecoderModelInfo,
        buffer_removal_time_length_minus_1
    )
        - 1usize];
    ["Offset of field: StdVideoEncodeAV1DecoderModelInfo::frame_presentation_time_length_minus_1"] [:: core :: mem :: offset_of ! (StdVideoEncodeAV1DecoderModelInfo , frame_presentation_time_length_minus_1) - 2usize] ;
    ["Offset of field: StdVideoEncodeAV1DecoderModelInfo::reserved1"]
        [::core::mem::offset_of!(StdVideoEncodeAV1DecoderModelInfo, reserved1) - 3usize];
    ["Offset of field: StdVideoEncodeAV1DecoderModelInfo::num_units_in_decoding_tick"][::core::mem::offset_of!(
        StdVideoEncodeAV1DecoderModelInfo,
        num_units_in_decoding_tick
    ) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoEncodeAV1ExtensionHeader"]
        [::core::mem::size_of::<StdVideoEncodeAV1ExtensionHeader>() - 2usize];
    ["Alignment of StdVideoEncodeAV1ExtensionHeader"]
        [::core::mem::align_of::<StdVideoEncodeAV1ExtensionHeader>() - 1usize];
    ["Offset of field: StdVideoEncodeAV1ExtensionHeader::temporal_id"]
        [::core::mem::offset_of!(StdVideoEncodeAV1ExtensionHeader, temporal_id) - 0usize];
    ["Offset of field: StdVideoEncodeAV1ExtensionHeader::spatial_id"]
        [::core::mem::offset_of!(StdVideoEncodeAV1ExtensionHeader, spatial_id) - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoEncodeAV1OperatingPointInfoFlags"]
        [::core::mem::size_of::<StdVideoEncodeAV1OperatingPointInfoFlags>() - 4usize];
    ["Alignment of StdVideoEncodeAV1OperatingPointInfoFlags"]
        [::core::mem::align_of::<StdVideoEncodeAV1OperatingPointInfoFlags>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoEncodeAV1OperatingPointInfo"]
        [::core::mem::size_of::<StdVideoEncodeAV1OperatingPointInfo>() - 20usize];
    ["Alignment of StdVideoEncodeAV1OperatingPointInfo"]
        [::core::mem::align_of::<StdVideoEncodeAV1OperatingPointInfo>() - 4usize];
    ["Offset of field: StdVideoEncodeAV1OperatingPointInfo::flags"]
        [::core::mem::offset_of!(StdVideoEncodeAV1OperatingPointInfo, flags) - 0usize];
    ["Offset of field: StdVideoEncodeAV1OperatingPointInfo::operating_point_idc"][::core::mem::offset_of!(
        StdVideoEncodeAV1OperatingPointInfo,
        operating_point_idc
    ) - 4usize];
    ["Offset of field: StdVideoEncodeAV1OperatingPointInfo::seq_level_idx"]
        [::core::mem::offset_of!(StdVideoEncodeAV1OperatingPointInfo, seq_level_idx) - 6usize];
    ["Offset of field: StdVideoEncodeAV1OperatingPointInfo::seq_tier"]
        [::core::mem::offset_of!(StdVideoEncodeAV1OperatingPointInfo, seq_tier) - 7usize];
    ["Offset of field: StdVideoEncodeAV1OperatingPointInfo::decoder_buffer_delay"][::core::mem::offset_of!(
        StdVideoEncodeAV1OperatingPointInfo,
        decoder_buffer_delay
    ) - 8usize];
    ["Offset of field: StdVideoEncodeAV1OperatingPointInfo::encoder_buffer_delay"][::core::mem::offset_of!(
        StdVideoEncodeAV1OperatingPointInfo,
        encoder_buffer_delay
    ) - 12usize];
    ["Offset of field: StdVideoEncodeAV1OperatingPointInfo::initial_display_delay_minus_1"][::core::mem::offset_of!(
        StdVideoEncodeAV1OperatingPointInfo,
        initial_display_delay_minus_1
    )
        - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoEncodeAV1PictureInfoFlags"]
        [::core::mem::size_of::<StdVideoEncodeAV1PictureInfoFlags>() - 4usize];
    ["Alignment of StdVideoEncodeAV1PictureInfoFlags"]
        [::core::mem::align_of::<StdVideoEncodeAV1PictureInfoFlags>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoEncodeAV1PictureInfo"]
        [::core::mem::size_of::<StdVideoEncodeAV1PictureInfo>() - 116usize];
    ["Alignment of StdVideoEncodeAV1PictureInfo"]
        [::core::mem::align_of::<StdVideoEncodeAV1PictureInfo>() - 4usize];
    ["Offset of field: StdVideoEncodeAV1PictureInfo::flags"]
        [::core::mem::offset_of!(StdVideoEncodeAV1PictureInfo, flags) - 0usize];
    ["Offset of field: StdVideoEncodeAV1PictureInfo::frame_type"]
        [::core::mem::offset_of!(StdVideoEncodeAV1PictureInfo, frame_type) - 4usize];
    ["Offset of field: StdVideoEncodeAV1PictureInfo::frame_presentation_time"]
        [::core::mem::offset_of!(StdVideoEncodeAV1PictureInfo, frame_presentation_time) - 8usize];
    ["Offset of field: StdVideoEncodeAV1PictureInfo::current_frame_id"]
        [::core::mem::offset_of!(StdVideoEncodeAV1PictureInfo, current_frame_id) - 12usize];
    ["Offset of field: StdVideoEncodeAV1PictureInfo::order_hint"]
        [::core::mem::offset_of!(StdVideoEncodeAV1PictureInfo, order_hint) - 16usize];
    ["Offset of field: StdVideoEncodeAV1PictureInfo::primary_ref_frame"]
        [::core::mem::offset_of!(StdVideoEncodeAV1PictureInfo, primary_ref_frame) - 17usize];
    ["Offset of field: StdVideoEncodeAV1PictureInfo::refresh_frame_flags"]
        [::core::mem::offset_of!(StdVideoEncodeAV1PictureInfo, refresh_frame_flags) - 18usize];
    ["Offset of field: StdVideoEncodeAV1PictureInfo::coded_denom"]
        [::core::mem::offset_of!(StdVideoEncodeAV1PictureInfo, coded_denom) - 19usize];
    ["Offset of field: StdVideoEncodeAV1PictureInfo::render_width_minus_1"]
        [::core::mem::offset_of!(StdVideoEncodeAV1PictureInfo, render_width_minus_1) - 20usize];
    ["Offset of field: StdVideoEncodeAV1PictureInfo::render_height_minus_1"]
        [::core::mem::offset_of!(StdVideoEncodeAV1PictureInfo, render_height_minus_1) - 22usize];
    ["Offset of field: StdVideoEncodeAV1PictureInfo::interpolation_filter"]
        [::core::mem::offset_of!(StdVideoEncodeAV1PictureInfo, interpolation_filter) - 24usize];
    ["Offset of field: StdVideoEncodeAV1PictureInfo::TxMode"]
        [::core::mem::offset_of!(StdVideoEncodeAV1PictureInfo, TxMode) - 28usize];
    ["Offset of field: StdVideoEncodeAV1PictureInfo::delta_q_res"]
        [::core::mem::offset_of!(StdVideoEncodeAV1PictureInfo, delta_q_res) - 32usize];
    ["Offset of field: StdVideoEncodeAV1PictureInfo::delta_lf_res"]
        [::core::mem::offset_of!(StdVideoEncodeAV1PictureInfo, delta_lf_res) - 33usize];
    ["Offset of field: StdVideoEncodeAV1PictureInfo::ref_order_hint"]
        [::core::mem::offset_of!(StdVideoEncodeAV1PictureInfo, ref_order_hint) - 34usize];
    ["Offset of field: StdVideoEncodeAV1PictureInfo::ref_frame_idx"]
        [::core::mem::offset_of!(StdVideoEncodeAV1PictureInfo, ref_frame_idx) - 42usize];
    ["Offset of field: StdVideoEncodeAV1PictureInfo::reserved1"]
        [::core::mem::offset_of!(StdVideoEncodeAV1PictureInfo, reserved1) - 49usize];
    ["Offset of field: StdVideoEncodeAV1PictureInfo::delta_frame_id_minus_1"]
        [::core::mem::offset_of!(StdVideoEncodeAV1PictureInfo, delta_frame_id_minus_1) - 52usize];
    ["Offset of field: StdVideoEncodeAV1PictureInfo::pTileInfo"]
        [::core::mem::offset_of!(StdVideoEncodeAV1PictureInfo, pTileInfo) - 80usize];
    ["Offset of field: StdVideoEncodeAV1PictureInfo::pQuantization"]
        [::core::mem::offset_of!(StdVideoEncodeAV1PictureInfo, pQuantization) - 84usize];
    ["Offset of field: StdVideoEncodeAV1PictureInfo::pSegmentation"]
        [::core::mem::offset_of!(StdVideoEncodeAV1PictureInfo, pSegmentation) - 88usize];
    ["Offset of field: StdVideoEncodeAV1PictureInfo::pLoopFilter"]
        [::core::mem::offset_of!(StdVideoEncodeAV1PictureInfo, pLoopFilter) - 92usize];
    ["Offset of field: StdVideoEncodeAV1PictureInfo::pCDEF"]
        [::core::mem::offset_of!(StdVideoEncodeAV1PictureInfo, pCDEF) - 96usize];
    ["Offset of field: StdVideoEncodeAV1PictureInfo::pLoopRestoration"]
        [::core::mem::offset_of!(StdVideoEncodeAV1PictureInfo, pLoopRestoration) - 100usize];
    ["Offset of field: StdVideoEncodeAV1PictureInfo::pGlobalMotion"]
        [::core::mem::offset_of!(StdVideoEncodeAV1PictureInfo, pGlobalMotion) - 104usize];
    ["Offset of field: StdVideoEncodeAV1PictureInfo::pExtensionHeader"]
        [::core::mem::offset_of!(StdVideoEncodeAV1PictureInfo, pExtensionHeader) - 108usize];
    ["Offset of field: StdVideoEncodeAV1PictureInfo::pBufferRemovalTimes"]
        [::core::mem::offset_of!(StdVideoEncodeAV1PictureInfo, pBufferRemovalTimes) - 112usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoEncodeAV1ReferenceInfoFlags"]
        [::core::mem::size_of::<StdVideoEncodeAV1ReferenceInfoFlags>() - 4usize];
    ["Alignment of StdVideoEncodeAV1ReferenceInfoFlags"]
        [::core::mem::align_of::<StdVideoEncodeAV1ReferenceInfoFlags>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoEncodeAV1ReferenceInfo"]
        [::core::mem::size_of::<StdVideoEncodeAV1ReferenceInfo>() - 20usize];
    ["Alignment of StdVideoEncodeAV1ReferenceInfo"]
        [::core::mem::align_of::<StdVideoEncodeAV1ReferenceInfo>() - 4usize];
    ["Offset of field: StdVideoEncodeAV1ReferenceInfo::flags"]
        [::core::mem::offset_of!(StdVideoEncodeAV1ReferenceInfo, flags) - 0usize];
    ["Offset of field: StdVideoEncodeAV1ReferenceInfo::RefFrameId"]
        [::core::mem::offset_of!(StdVideoEncodeAV1ReferenceInfo, RefFrameId) - 4usize];
    ["Offset of field: StdVideoEncodeAV1ReferenceInfo::frame_type"]
        [::core::mem::offset_of!(StdVideoEncodeAV1ReferenceInfo, frame_type) - 8usize];
    ["Offset of field: StdVideoEncodeAV1ReferenceInfo::OrderHint"]
        [::core::mem::offset_of!(StdVideoEncodeAV1ReferenceInfo, OrderHint) - 12usize];
    ["Offset of field: StdVideoEncodeAV1ReferenceInfo::reserved1"]
        [::core::mem::offset_of!(StdVideoEncodeAV1ReferenceInfo, reserved1) - 13usize];
    ["Offset of field: StdVideoEncodeAV1ReferenceInfo::pExtensionHeader"]
        [::core::mem::offset_of!(StdVideoEncodeAV1ReferenceInfo, pExtensionHeader) - 16usize];
};
pub const VkVideoEncodeAV1PredictionModeKHR_VK_VIDEO_ENCODE_AV1_PREDICTION_MODE_INTRA_ONLY_KHR:
    VkVideoEncodeAV1PredictionModeKHR = 0;
pub const VkVideoEncodeAV1PredictionModeKHR_VK_VIDEO_ENCODE_AV1_PREDICTION_MODE_SINGLE_REFERENCE_KHR : VkVideoEncodeAV1PredictionModeKHR = 1 ;
pub const VkVideoEncodeAV1PredictionModeKHR_VK_VIDEO_ENCODE_AV1_PREDICTION_MODE_UNIDIRECTIONAL_COMPOUND_KHR : VkVideoEncodeAV1PredictionModeKHR = 2 ;
pub const VkVideoEncodeAV1PredictionModeKHR_VK_VIDEO_ENCODE_AV1_PREDICTION_MODE_BIDIRECTIONAL_COMPOUND_KHR : VkVideoEncodeAV1PredictionModeKHR = 3 ;
pub const VkVideoEncodeAV1PredictionModeKHR_VK_VIDEO_ENCODE_AV1_PREDICTION_MODE_MAX_ENUM_KHR:
    VkVideoEncodeAV1PredictionModeKHR = 2147483647;
pub const VkVideoEncodeAV1RateControlGroupKHR_VK_VIDEO_ENCODE_AV1_RATE_CONTROL_GROUP_INTRA_KHR:
    VkVideoEncodeAV1RateControlGroupKHR = 0;
pub const VkVideoEncodeAV1RateControlGroupKHR_VK_VIDEO_ENCODE_AV1_RATE_CONTROL_GROUP_PREDICTIVE_KHR : VkVideoEncodeAV1RateControlGroupKHR = 1 ;
pub const VkVideoEncodeAV1RateControlGroupKHR_VK_VIDEO_ENCODE_AV1_RATE_CONTROL_GROUP_BIPREDICTIVE_KHR : VkVideoEncodeAV1RateControlGroupKHR = 2 ;
pub const VkVideoEncodeAV1RateControlGroupKHR_VK_VIDEO_ENCODE_AV1_RATE_CONTROL_GROUP_MAX_ENUM_KHR : VkVideoEncodeAV1RateControlGroupKHR = 2147483647 ;
pub const VkVideoEncodeAV1CapabilityFlagBitsKHR_VK_VIDEO_ENCODE_AV1_CAPABILITY_PER_RATE_CONTROL_GROUP_MIN_MAX_Q_INDEX_BIT_KHR : VkVideoEncodeAV1CapabilityFlagBitsKHR = 1 ;
pub const VkVideoEncodeAV1CapabilityFlagBitsKHR_VK_VIDEO_ENCODE_AV1_CAPABILITY_GENERATE_OBU_EXTENSION_HEADER_BIT_KHR : VkVideoEncodeAV1CapabilityFlagBitsKHR = 2 ;
pub const VkVideoEncodeAV1CapabilityFlagBitsKHR_VK_VIDEO_ENCODE_AV1_CAPABILITY_PRIMARY_REFERENCE_CDF_ONLY_BIT_KHR : VkVideoEncodeAV1CapabilityFlagBitsKHR = 4 ;
pub const VkVideoEncodeAV1CapabilityFlagBitsKHR_VK_VIDEO_ENCODE_AV1_CAPABILITY_FRAME_SIZE_OVERRIDE_BIT_KHR : VkVideoEncodeAV1CapabilityFlagBitsKHR = 8 ;
pub const VkVideoEncodeAV1CapabilityFlagBitsKHR_VK_VIDEO_ENCODE_AV1_CAPABILITY_MOTION_VECTOR_SCALING_BIT_KHR : VkVideoEncodeAV1CapabilityFlagBitsKHR = 16 ;
pub const VkVideoEncodeAV1CapabilityFlagBitsKHR_VK_VIDEO_ENCODE_AV1_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR : VkVideoEncodeAV1CapabilityFlagBitsKHR = 2147483647 ;
pub const VkVideoEncodeAV1StdFlagBitsKHR_VK_VIDEO_ENCODE_AV1_STD_UNIFORM_TILE_SPACING_FLAG_SET_BIT_KHR : VkVideoEncodeAV1StdFlagBitsKHR = 1 ;
pub const VkVideoEncodeAV1StdFlagBitsKHR_VK_VIDEO_ENCODE_AV1_STD_SKIP_MODE_PRESENT_UNSET_BIT_KHR:
    VkVideoEncodeAV1StdFlagBitsKHR = 2;
pub const VkVideoEncodeAV1StdFlagBitsKHR_VK_VIDEO_ENCODE_AV1_STD_PRIMARY_REF_FRAME_BIT_KHR:
    VkVideoEncodeAV1StdFlagBitsKHR = 4;
pub const VkVideoEncodeAV1StdFlagBitsKHR_VK_VIDEO_ENCODE_AV1_STD_DELTA_Q_BIT_KHR:
    VkVideoEncodeAV1StdFlagBitsKHR = 8;
pub const VkVideoEncodeAV1StdFlagBitsKHR_VK_VIDEO_ENCODE_AV1_STD_FLAG_BITS_MAX_ENUM_KHR:
    VkVideoEncodeAV1StdFlagBitsKHR = 2147483647;
pub const VkVideoEncodeAV1SuperblockSizeFlagBitsKHR_VK_VIDEO_ENCODE_AV1_SUPERBLOCK_SIZE_64_BIT_KHR : VkVideoEncodeAV1SuperblockSizeFlagBitsKHR = 1 ;
pub const VkVideoEncodeAV1SuperblockSizeFlagBitsKHR_VK_VIDEO_ENCODE_AV1_SUPERBLOCK_SIZE_128_BIT_KHR : VkVideoEncodeAV1SuperblockSizeFlagBitsKHR = 2 ;
pub const VkVideoEncodeAV1SuperblockSizeFlagBitsKHR_VK_VIDEO_ENCODE_AV1_SUPERBLOCK_SIZE_FLAG_BITS_MAX_ENUM_KHR : VkVideoEncodeAV1SuperblockSizeFlagBitsKHR = 2147483647 ;
pub const VkVideoEncodeAV1RateControlFlagBitsKHR_VK_VIDEO_ENCODE_AV1_RATE_CONTROL_REGULAR_GOP_BIT_KHR : VkVideoEncodeAV1RateControlFlagBitsKHR = 1 ;
pub const VkVideoEncodeAV1RateControlFlagBitsKHR_VK_VIDEO_ENCODE_AV1_RATE_CONTROL_TEMPORAL_LAYER_PATTERN_DYADIC_BIT_KHR : VkVideoEncodeAV1RateControlFlagBitsKHR = 2 ;
pub const VkVideoEncodeAV1RateControlFlagBitsKHR_VK_VIDEO_ENCODE_AV1_RATE_CONTROL_REFERENCE_PATTERN_FLAT_BIT_KHR : VkVideoEncodeAV1RateControlFlagBitsKHR = 4 ;
pub const VkVideoEncodeAV1RateControlFlagBitsKHR_VK_VIDEO_ENCODE_AV1_RATE_CONTROL_REFERENCE_PATTERN_DYADIC_BIT_KHR : VkVideoEncodeAV1RateControlFlagBitsKHR = 8 ;
pub const VkVideoEncodeAV1RateControlFlagBitsKHR_VK_VIDEO_ENCODE_AV1_RATE_CONTROL_FLAG_BITS_MAX_ENUM_KHR : VkVideoEncodeAV1RateControlFlagBitsKHR = 2147483647 ;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceVideoEncodeAV1FeaturesKHR"]
        [::core::mem::size_of::<VkPhysicalDeviceVideoEncodeAV1FeaturesKHR>() - 12usize];
    ["Alignment of VkPhysicalDeviceVideoEncodeAV1FeaturesKHR"]
        [::core::mem::align_of::<VkPhysicalDeviceVideoEncodeAV1FeaturesKHR>() - 4usize];
    ["Offset of field: VkPhysicalDeviceVideoEncodeAV1FeaturesKHR::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceVideoEncodeAV1FeaturesKHR, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceVideoEncodeAV1FeaturesKHR::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceVideoEncodeAV1FeaturesKHR, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceVideoEncodeAV1FeaturesKHR::videoEncodeAV1"][::core::mem::offset_of!(
        VkPhysicalDeviceVideoEncodeAV1FeaturesKHR,
        videoEncodeAV1
    ) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeAV1CapabilitiesKHR"]
        [::core::mem::size_of::<VkVideoEncodeAV1CapabilitiesKHR>() - 120usize];
    ["Alignment of VkVideoEncodeAV1CapabilitiesKHR"]
        [::core::mem::align_of::<VkVideoEncodeAV1CapabilitiesKHR>() - 4usize];
    ["Offset of field: VkVideoEncodeAV1CapabilitiesKHR::sType"]
        [::core::mem::offset_of!(VkVideoEncodeAV1CapabilitiesKHR, sType) - 0usize];
    ["Offset of field: VkVideoEncodeAV1CapabilitiesKHR::pNext"]
        [::core::mem::offset_of!(VkVideoEncodeAV1CapabilitiesKHR, pNext) - 4usize];
    ["Offset of field: VkVideoEncodeAV1CapabilitiesKHR::flags"]
        [::core::mem::offset_of!(VkVideoEncodeAV1CapabilitiesKHR, flags) - 8usize];
    ["Offset of field: VkVideoEncodeAV1CapabilitiesKHR::maxLevel"]
        [::core::mem::offset_of!(VkVideoEncodeAV1CapabilitiesKHR, maxLevel) - 12usize];
    ["Offset of field: VkVideoEncodeAV1CapabilitiesKHR::codedPictureAlignment"]
        [::core::mem::offset_of!(VkVideoEncodeAV1CapabilitiesKHR, codedPictureAlignment) - 16usize];
    ["Offset of field: VkVideoEncodeAV1CapabilitiesKHR::maxTiles"]
        [::core::mem::offset_of!(VkVideoEncodeAV1CapabilitiesKHR, maxTiles) - 24usize];
    ["Offset of field: VkVideoEncodeAV1CapabilitiesKHR::minTileSize"]
        [::core::mem::offset_of!(VkVideoEncodeAV1CapabilitiesKHR, minTileSize) - 32usize];
    ["Offset of field: VkVideoEncodeAV1CapabilitiesKHR::maxTileSize"]
        [::core::mem::offset_of!(VkVideoEncodeAV1CapabilitiesKHR, maxTileSize) - 40usize];
    ["Offset of field: VkVideoEncodeAV1CapabilitiesKHR::superblockSizes"]
        [::core::mem::offset_of!(VkVideoEncodeAV1CapabilitiesKHR, superblockSizes) - 48usize];
    ["Offset of field: VkVideoEncodeAV1CapabilitiesKHR::maxSingleReferenceCount"][::core::mem::offset_of!(
        VkVideoEncodeAV1CapabilitiesKHR,
        maxSingleReferenceCount
    ) - 52usize];
    ["Offset of field: VkVideoEncodeAV1CapabilitiesKHR::singleReferenceNameMask"][::core::mem::offset_of!(
        VkVideoEncodeAV1CapabilitiesKHR,
        singleReferenceNameMask
    ) - 56usize];
    ["Offset of field: VkVideoEncodeAV1CapabilitiesKHR::maxUnidirectionalCompoundReferenceCount"][::core::mem::offset_of!(
        VkVideoEncodeAV1CapabilitiesKHR,
        maxUnidirectionalCompoundReferenceCount
    )
        - 60usize];
    ["Offset of field: VkVideoEncodeAV1CapabilitiesKHR::maxUnidirectionalCompoundGroup1ReferenceCount"] [:: core :: mem :: offset_of ! (VkVideoEncodeAV1CapabilitiesKHR , maxUnidirectionalCompoundGroup1ReferenceCount) - 64usize] ;
    ["Offset of field: VkVideoEncodeAV1CapabilitiesKHR::unidirectionalCompoundReferenceNameMask"][::core::mem::offset_of!(
        VkVideoEncodeAV1CapabilitiesKHR,
        unidirectionalCompoundReferenceNameMask
    )
        - 68usize];
    ["Offset of field: VkVideoEncodeAV1CapabilitiesKHR::maxBidirectionalCompoundReferenceCount"][::core::mem::offset_of!(
        VkVideoEncodeAV1CapabilitiesKHR,
        maxBidirectionalCompoundReferenceCount
    )
        - 72usize];
    ["Offset of field: VkVideoEncodeAV1CapabilitiesKHR::maxBidirectionalCompoundGroup1ReferenceCount"] [:: core :: mem :: offset_of ! (VkVideoEncodeAV1CapabilitiesKHR , maxBidirectionalCompoundGroup1ReferenceCount) - 76usize] ;
    ["Offset of field: VkVideoEncodeAV1CapabilitiesKHR::maxBidirectionalCompoundGroup2ReferenceCount"] [:: core :: mem :: offset_of ! (VkVideoEncodeAV1CapabilitiesKHR , maxBidirectionalCompoundGroup2ReferenceCount) - 80usize] ;
    ["Offset of field: VkVideoEncodeAV1CapabilitiesKHR::bidirectionalCompoundReferenceNameMask"][::core::mem::offset_of!(
        VkVideoEncodeAV1CapabilitiesKHR,
        bidirectionalCompoundReferenceNameMask
    )
        - 84usize];
    ["Offset of field: VkVideoEncodeAV1CapabilitiesKHR::maxTemporalLayerCount"]
        [::core::mem::offset_of!(VkVideoEncodeAV1CapabilitiesKHR, maxTemporalLayerCount) - 88usize];
    ["Offset of field: VkVideoEncodeAV1CapabilitiesKHR::maxSpatialLayerCount"]
        [::core::mem::offset_of!(VkVideoEncodeAV1CapabilitiesKHR, maxSpatialLayerCount) - 92usize];
    ["Offset of field: VkVideoEncodeAV1CapabilitiesKHR::maxOperatingPoints"]
        [::core::mem::offset_of!(VkVideoEncodeAV1CapabilitiesKHR, maxOperatingPoints) - 96usize];
    ["Offset of field: VkVideoEncodeAV1CapabilitiesKHR::minQIndex"]
        [::core::mem::offset_of!(VkVideoEncodeAV1CapabilitiesKHR, minQIndex) - 100usize];
    ["Offset of field: VkVideoEncodeAV1CapabilitiesKHR::maxQIndex"]
        [::core::mem::offset_of!(VkVideoEncodeAV1CapabilitiesKHR, maxQIndex) - 104usize];
    ["Offset of field: VkVideoEncodeAV1CapabilitiesKHR::prefersGopRemainingFrames"][::core::mem::offset_of!(
        VkVideoEncodeAV1CapabilitiesKHR,
        prefersGopRemainingFrames
    ) - 108usize];
    ["Offset of field: VkVideoEncodeAV1CapabilitiesKHR::requiresGopRemainingFrames"][::core::mem::offset_of!(
        VkVideoEncodeAV1CapabilitiesKHR,
        requiresGopRemainingFrames
    ) - 112usize];
    ["Offset of field: VkVideoEncodeAV1CapabilitiesKHR::stdSyntaxFlags"]
        [::core::mem::offset_of!(VkVideoEncodeAV1CapabilitiesKHR, stdSyntaxFlags) - 116usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeAV1QIndexKHR"]
        [::core::mem::size_of::<VkVideoEncodeAV1QIndexKHR>() - 12usize];
    ["Alignment of VkVideoEncodeAV1QIndexKHR"]
        [::core::mem::align_of::<VkVideoEncodeAV1QIndexKHR>() - 4usize];
    ["Offset of field: VkVideoEncodeAV1QIndexKHR::intraQIndex"]
        [::core::mem::offset_of!(VkVideoEncodeAV1QIndexKHR, intraQIndex) - 0usize];
    ["Offset of field: VkVideoEncodeAV1QIndexKHR::predictiveQIndex"]
        [::core::mem::offset_of!(VkVideoEncodeAV1QIndexKHR, predictiveQIndex) - 4usize];
    ["Offset of field: VkVideoEncodeAV1QIndexKHR::bipredictiveQIndex"]
        [::core::mem::offset_of!(VkVideoEncodeAV1QIndexKHR, bipredictiveQIndex) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeAV1QualityLevelPropertiesKHR"]
        [::core::mem::size_of::<VkVideoEncodeAV1QualityLevelPropertiesKHR>() - 76usize];
    ["Alignment of VkVideoEncodeAV1QualityLevelPropertiesKHR"]
        [::core::mem::align_of::<VkVideoEncodeAV1QualityLevelPropertiesKHR>() - 4usize];
    ["Offset of field: VkVideoEncodeAV1QualityLevelPropertiesKHR::sType"]
        [::core::mem::offset_of!(VkVideoEncodeAV1QualityLevelPropertiesKHR, sType) - 0usize];
    ["Offset of field: VkVideoEncodeAV1QualityLevelPropertiesKHR::pNext"]
        [::core::mem::offset_of!(VkVideoEncodeAV1QualityLevelPropertiesKHR, pNext) - 4usize];
    ["Offset of field: VkVideoEncodeAV1QualityLevelPropertiesKHR::preferredRateControlFlags"][::core::mem::offset_of!(
        VkVideoEncodeAV1QualityLevelPropertiesKHR,
        preferredRateControlFlags
    )
        - 8usize];
    ["Offset of field: VkVideoEncodeAV1QualityLevelPropertiesKHR::preferredGopFrameCount"][::core::mem::offset_of!(
        VkVideoEncodeAV1QualityLevelPropertiesKHR,
        preferredGopFrameCount
    )
        - 12usize];
    ["Offset of field: VkVideoEncodeAV1QualityLevelPropertiesKHR::preferredKeyFramePeriod"][::core::mem::offset_of!(
        VkVideoEncodeAV1QualityLevelPropertiesKHR,
        preferredKeyFramePeriod
    )
        - 16usize];
    ["Offset of field: VkVideoEncodeAV1QualityLevelPropertiesKHR::preferredConsecutiveBipredictiveFrameCount"] [:: core :: mem :: offset_of ! (VkVideoEncodeAV1QualityLevelPropertiesKHR , preferredConsecutiveBipredictiveFrameCount) - 20usize] ;
    ["Offset of field: VkVideoEncodeAV1QualityLevelPropertiesKHR::preferredTemporalLayerCount"][::core::mem::offset_of!(
        VkVideoEncodeAV1QualityLevelPropertiesKHR,
        preferredTemporalLayerCount
    )
        - 24usize];
    ["Offset of field: VkVideoEncodeAV1QualityLevelPropertiesKHR::preferredConstantQIndex"][::core::mem::offset_of!(
        VkVideoEncodeAV1QualityLevelPropertiesKHR,
        preferredConstantQIndex
    )
        - 28usize];
    ["Offset of field: VkVideoEncodeAV1QualityLevelPropertiesKHR::preferredMaxSingleReferenceCount"] [:: core :: mem :: offset_of ! (VkVideoEncodeAV1QualityLevelPropertiesKHR , preferredMaxSingleReferenceCount) - 40usize] ;
    ["Offset of field: VkVideoEncodeAV1QualityLevelPropertiesKHR::preferredSingleReferenceNameMask"] [:: core :: mem :: offset_of ! (VkVideoEncodeAV1QualityLevelPropertiesKHR , preferredSingleReferenceNameMask) - 44usize] ;
    ["Offset of field: VkVideoEncodeAV1QualityLevelPropertiesKHR::preferredMaxUnidirectionalCompoundReferenceCount"] [:: core :: mem :: offset_of ! (VkVideoEncodeAV1QualityLevelPropertiesKHR , preferredMaxUnidirectionalCompoundReferenceCount) - 48usize] ;
    ["Offset of field: VkVideoEncodeAV1QualityLevelPropertiesKHR::preferredMaxUnidirectionalCompoundGroup1ReferenceCount"] [:: core :: mem :: offset_of ! (VkVideoEncodeAV1QualityLevelPropertiesKHR , preferredMaxUnidirectionalCompoundGroup1ReferenceCount) - 52usize] ;
    ["Offset of field: VkVideoEncodeAV1QualityLevelPropertiesKHR::preferredUnidirectionalCompoundReferenceNameMask"] [:: core :: mem :: offset_of ! (VkVideoEncodeAV1QualityLevelPropertiesKHR , preferredUnidirectionalCompoundReferenceNameMask) - 56usize] ;
    ["Offset of field: VkVideoEncodeAV1QualityLevelPropertiesKHR::preferredMaxBidirectionalCompoundReferenceCount"] [:: core :: mem :: offset_of ! (VkVideoEncodeAV1QualityLevelPropertiesKHR , preferredMaxBidirectionalCompoundReferenceCount) - 60usize] ;
    ["Offset of field: VkVideoEncodeAV1QualityLevelPropertiesKHR::preferredMaxBidirectionalCompoundGroup1ReferenceCount"] [:: core :: mem :: offset_of ! (VkVideoEncodeAV1QualityLevelPropertiesKHR , preferredMaxBidirectionalCompoundGroup1ReferenceCount) - 64usize] ;
    ["Offset of field: VkVideoEncodeAV1QualityLevelPropertiesKHR::preferredMaxBidirectionalCompoundGroup2ReferenceCount"] [:: core :: mem :: offset_of ! (VkVideoEncodeAV1QualityLevelPropertiesKHR , preferredMaxBidirectionalCompoundGroup2ReferenceCount) - 68usize] ;
    ["Offset of field: VkVideoEncodeAV1QualityLevelPropertiesKHR::preferredBidirectionalCompoundReferenceNameMask"] [:: core :: mem :: offset_of ! (VkVideoEncodeAV1QualityLevelPropertiesKHR , preferredBidirectionalCompoundReferenceNameMask) - 72usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeAV1SessionCreateInfoKHR"]
        [::core::mem::size_of::<VkVideoEncodeAV1SessionCreateInfoKHR>() - 16usize];
    ["Alignment of VkVideoEncodeAV1SessionCreateInfoKHR"]
        [::core::mem::align_of::<VkVideoEncodeAV1SessionCreateInfoKHR>() - 4usize];
    ["Offset of field: VkVideoEncodeAV1SessionCreateInfoKHR::sType"]
        [::core::mem::offset_of!(VkVideoEncodeAV1SessionCreateInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoEncodeAV1SessionCreateInfoKHR::pNext"]
        [::core::mem::offset_of!(VkVideoEncodeAV1SessionCreateInfoKHR, pNext) - 4usize];
    ["Offset of field: VkVideoEncodeAV1SessionCreateInfoKHR::useMaxLevel"]
        [::core::mem::offset_of!(VkVideoEncodeAV1SessionCreateInfoKHR, useMaxLevel) - 8usize];
    ["Offset of field: VkVideoEncodeAV1SessionCreateInfoKHR::maxLevel"]
        [::core::mem::offset_of!(VkVideoEncodeAV1SessionCreateInfoKHR, maxLevel) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeAV1SessionParametersCreateInfoKHR"]
        [::core::mem::size_of::<VkVideoEncodeAV1SessionParametersCreateInfoKHR>() - 24usize];
    ["Alignment of VkVideoEncodeAV1SessionParametersCreateInfoKHR"]
        [::core::mem::align_of::<VkVideoEncodeAV1SessionParametersCreateInfoKHR>() - 4usize];
    ["Offset of field: VkVideoEncodeAV1SessionParametersCreateInfoKHR::sType"]
        [::core::mem::offset_of!(VkVideoEncodeAV1SessionParametersCreateInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoEncodeAV1SessionParametersCreateInfoKHR::pNext"]
        [::core::mem::offset_of!(VkVideoEncodeAV1SessionParametersCreateInfoKHR, pNext) - 4usize];
    ["Offset of field: VkVideoEncodeAV1SessionParametersCreateInfoKHR::pStdSequenceHeader"][::core::mem::offset_of!(
        VkVideoEncodeAV1SessionParametersCreateInfoKHR,
        pStdSequenceHeader
    )
        - 8usize];
    ["Offset of field: VkVideoEncodeAV1SessionParametersCreateInfoKHR::pStdDecoderModelInfo"][::core::mem::offset_of!(
        VkVideoEncodeAV1SessionParametersCreateInfoKHR,
        pStdDecoderModelInfo
    )
        - 12usize];
    ["Offset of field: VkVideoEncodeAV1SessionParametersCreateInfoKHR::stdOperatingPointCount"][::core::mem::offset_of!(
        VkVideoEncodeAV1SessionParametersCreateInfoKHR,
        stdOperatingPointCount
    )
        - 16usize];
    ["Offset of field: VkVideoEncodeAV1SessionParametersCreateInfoKHR::pStdOperatingPoints"][::core::mem::offset_of!(
        VkVideoEncodeAV1SessionParametersCreateInfoKHR,
        pStdOperatingPoints
    )
        - 20usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeAV1PictureInfoKHR"]
        [::core::mem::size_of::<VkVideoEncodeAV1PictureInfoKHR>() - 60usize];
    ["Alignment of VkVideoEncodeAV1PictureInfoKHR"]
        [::core::mem::align_of::<VkVideoEncodeAV1PictureInfoKHR>() - 4usize];
    ["Offset of field: VkVideoEncodeAV1PictureInfoKHR::sType"]
        [::core::mem::offset_of!(VkVideoEncodeAV1PictureInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoEncodeAV1PictureInfoKHR::pNext"]
        [::core::mem::offset_of!(VkVideoEncodeAV1PictureInfoKHR, pNext) - 4usize];
    ["Offset of field: VkVideoEncodeAV1PictureInfoKHR::predictionMode"]
        [::core::mem::offset_of!(VkVideoEncodeAV1PictureInfoKHR, predictionMode) - 8usize];
    ["Offset of field: VkVideoEncodeAV1PictureInfoKHR::rateControlGroup"]
        [::core::mem::offset_of!(VkVideoEncodeAV1PictureInfoKHR, rateControlGroup) - 12usize];
    ["Offset of field: VkVideoEncodeAV1PictureInfoKHR::constantQIndex"]
        [::core::mem::offset_of!(VkVideoEncodeAV1PictureInfoKHR, constantQIndex) - 16usize];
    ["Offset of field: VkVideoEncodeAV1PictureInfoKHR::pStdPictureInfo"]
        [::core::mem::offset_of!(VkVideoEncodeAV1PictureInfoKHR, pStdPictureInfo) - 20usize];
    ["Offset of field: VkVideoEncodeAV1PictureInfoKHR::referenceNameSlotIndices"][::core::mem::offset_of!(
        VkVideoEncodeAV1PictureInfoKHR,
        referenceNameSlotIndices
    ) - 24usize];
    ["Offset of field: VkVideoEncodeAV1PictureInfoKHR::primaryReferenceCdfOnly"][::core::mem::offset_of!(
        VkVideoEncodeAV1PictureInfoKHR,
        primaryReferenceCdfOnly
    ) - 52usize];
    ["Offset of field: VkVideoEncodeAV1PictureInfoKHR::generateObuExtensionHeader"][::core::mem::offset_of!(
        VkVideoEncodeAV1PictureInfoKHR,
        generateObuExtensionHeader
    ) - 56usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeAV1DpbSlotInfoKHR"]
        [::core::mem::size_of::<VkVideoEncodeAV1DpbSlotInfoKHR>() - 12usize];
    ["Alignment of VkVideoEncodeAV1DpbSlotInfoKHR"]
        [::core::mem::align_of::<VkVideoEncodeAV1DpbSlotInfoKHR>() - 4usize];
    ["Offset of field: VkVideoEncodeAV1DpbSlotInfoKHR::sType"]
        [::core::mem::offset_of!(VkVideoEncodeAV1DpbSlotInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoEncodeAV1DpbSlotInfoKHR::pNext"]
        [::core::mem::offset_of!(VkVideoEncodeAV1DpbSlotInfoKHR, pNext) - 4usize];
    ["Offset of field: VkVideoEncodeAV1DpbSlotInfoKHR::pStdReferenceInfo"]
        [::core::mem::offset_of!(VkVideoEncodeAV1DpbSlotInfoKHR, pStdReferenceInfo) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeAV1ProfileInfoKHR"]
        [::core::mem::size_of::<VkVideoEncodeAV1ProfileInfoKHR>() - 12usize];
    ["Alignment of VkVideoEncodeAV1ProfileInfoKHR"]
        [::core::mem::align_of::<VkVideoEncodeAV1ProfileInfoKHR>() - 4usize];
    ["Offset of field: VkVideoEncodeAV1ProfileInfoKHR::sType"]
        [::core::mem::offset_of!(VkVideoEncodeAV1ProfileInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoEncodeAV1ProfileInfoKHR::pNext"]
        [::core::mem::offset_of!(VkVideoEncodeAV1ProfileInfoKHR, pNext) - 4usize];
    ["Offset of field: VkVideoEncodeAV1ProfileInfoKHR::stdProfile"]
        [::core::mem::offset_of!(VkVideoEncodeAV1ProfileInfoKHR, stdProfile) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeAV1FrameSizeKHR"]
        [::core::mem::size_of::<VkVideoEncodeAV1FrameSizeKHR>() - 12usize];
    ["Alignment of VkVideoEncodeAV1FrameSizeKHR"]
        [::core::mem::align_of::<VkVideoEncodeAV1FrameSizeKHR>() - 4usize];
    ["Offset of field: VkVideoEncodeAV1FrameSizeKHR::intraFrameSize"]
        [::core::mem::offset_of!(VkVideoEncodeAV1FrameSizeKHR, intraFrameSize) - 0usize];
    ["Offset of field: VkVideoEncodeAV1FrameSizeKHR::predictiveFrameSize"]
        [::core::mem::offset_of!(VkVideoEncodeAV1FrameSizeKHR, predictiveFrameSize) - 4usize];
    ["Offset of field: VkVideoEncodeAV1FrameSizeKHR::bipredictiveFrameSize"]
        [::core::mem::offset_of!(VkVideoEncodeAV1FrameSizeKHR, bipredictiveFrameSize) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeAV1GopRemainingFrameInfoKHR"]
        [::core::mem::size_of::<VkVideoEncodeAV1GopRemainingFrameInfoKHR>() - 24usize];
    ["Alignment of VkVideoEncodeAV1GopRemainingFrameInfoKHR"]
        [::core::mem::align_of::<VkVideoEncodeAV1GopRemainingFrameInfoKHR>() - 4usize];
    ["Offset of field: VkVideoEncodeAV1GopRemainingFrameInfoKHR::sType"]
        [::core::mem::offset_of!(VkVideoEncodeAV1GopRemainingFrameInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoEncodeAV1GopRemainingFrameInfoKHR::pNext"]
        [::core::mem::offset_of!(VkVideoEncodeAV1GopRemainingFrameInfoKHR, pNext) - 4usize];
    ["Offset of field: VkVideoEncodeAV1GopRemainingFrameInfoKHR::useGopRemainingFrames"][::core::mem::offset_of!(
        VkVideoEncodeAV1GopRemainingFrameInfoKHR,
        useGopRemainingFrames
    )
        - 8usize];
    ["Offset of field: VkVideoEncodeAV1GopRemainingFrameInfoKHR::gopRemainingIntra"][::core::mem::offset_of!(
        VkVideoEncodeAV1GopRemainingFrameInfoKHR,
        gopRemainingIntra
    ) - 12usize];
    ["Offset of field: VkVideoEncodeAV1GopRemainingFrameInfoKHR::gopRemainingPredictive"][::core::mem::offset_of!(
        VkVideoEncodeAV1GopRemainingFrameInfoKHR,
        gopRemainingPredictive
    )
        - 16usize];
    ["Offset of field: VkVideoEncodeAV1GopRemainingFrameInfoKHR::gopRemainingBipredictive"][::core::mem::offset_of!(
        VkVideoEncodeAV1GopRemainingFrameInfoKHR,
        gopRemainingBipredictive
    )
        - 20usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeAV1RateControlInfoKHR"]
        [::core::mem::size_of::<VkVideoEncodeAV1RateControlInfoKHR>() - 28usize];
    ["Alignment of VkVideoEncodeAV1RateControlInfoKHR"]
        [::core::mem::align_of::<VkVideoEncodeAV1RateControlInfoKHR>() - 4usize];
    ["Offset of field: VkVideoEncodeAV1RateControlInfoKHR::sType"]
        [::core::mem::offset_of!(VkVideoEncodeAV1RateControlInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoEncodeAV1RateControlInfoKHR::pNext"]
        [::core::mem::offset_of!(VkVideoEncodeAV1RateControlInfoKHR, pNext) - 4usize];
    ["Offset of field: VkVideoEncodeAV1RateControlInfoKHR::flags"]
        [::core::mem::offset_of!(VkVideoEncodeAV1RateControlInfoKHR, flags) - 8usize];
    ["Offset of field: VkVideoEncodeAV1RateControlInfoKHR::gopFrameCount"]
        [::core::mem::offset_of!(VkVideoEncodeAV1RateControlInfoKHR, gopFrameCount) - 12usize];
    ["Offset of field: VkVideoEncodeAV1RateControlInfoKHR::keyFramePeriod"]
        [::core::mem::offset_of!(VkVideoEncodeAV1RateControlInfoKHR, keyFramePeriod) - 16usize];
    ["Offset of field: VkVideoEncodeAV1RateControlInfoKHR::consecutiveBipredictiveFrameCount"][::core::mem::offset_of!(
        VkVideoEncodeAV1RateControlInfoKHR,
        consecutiveBipredictiveFrameCount
    )
        - 20usize];
    ["Offset of field: VkVideoEncodeAV1RateControlInfoKHR::temporalLayerCount"]
        [::core::mem::offset_of!(VkVideoEncodeAV1RateControlInfoKHR, temporalLayerCount) - 24usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeAV1RateControlLayerInfoKHR"]
        [::core::mem::size_of::<VkVideoEncodeAV1RateControlLayerInfoKHR>() - 56usize];
    ["Alignment of VkVideoEncodeAV1RateControlLayerInfoKHR"]
        [::core::mem::align_of::<VkVideoEncodeAV1RateControlLayerInfoKHR>() - 4usize];
    ["Offset of field: VkVideoEncodeAV1RateControlLayerInfoKHR::sType"]
        [::core::mem::offset_of!(VkVideoEncodeAV1RateControlLayerInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoEncodeAV1RateControlLayerInfoKHR::pNext"]
        [::core::mem::offset_of!(VkVideoEncodeAV1RateControlLayerInfoKHR, pNext) - 4usize];
    ["Offset of field: VkVideoEncodeAV1RateControlLayerInfoKHR::useMinQIndex"]
        [::core::mem::offset_of!(VkVideoEncodeAV1RateControlLayerInfoKHR, useMinQIndex) - 8usize];
    ["Offset of field: VkVideoEncodeAV1RateControlLayerInfoKHR::minQIndex"]
        [::core::mem::offset_of!(VkVideoEncodeAV1RateControlLayerInfoKHR, minQIndex) - 12usize];
    ["Offset of field: VkVideoEncodeAV1RateControlLayerInfoKHR::useMaxQIndex"]
        [::core::mem::offset_of!(VkVideoEncodeAV1RateControlLayerInfoKHR, useMaxQIndex) - 24usize];
    ["Offset of field: VkVideoEncodeAV1RateControlLayerInfoKHR::maxQIndex"]
        [::core::mem::offset_of!(VkVideoEncodeAV1RateControlLayerInfoKHR, maxQIndex) - 28usize];
    ["Offset of field: VkVideoEncodeAV1RateControlLayerInfoKHR::useMaxFrameSize"][::core::mem::offset_of!(
        VkVideoEncodeAV1RateControlLayerInfoKHR,
        useMaxFrameSize
    ) - 40usize];
    ["Offset of field: VkVideoEncodeAV1RateControlLayerInfoKHR::maxFrameSize"]
        [::core::mem::offset_of!(VkVideoEncodeAV1RateControlLayerInfoKHR, maxFrameSize) - 44usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceVideoMaintenance1FeaturesKHR"]
        [::core::mem::size_of::<VkPhysicalDeviceVideoMaintenance1FeaturesKHR>() - 12usize];
    ["Alignment of VkPhysicalDeviceVideoMaintenance1FeaturesKHR"]
        [::core::mem::align_of::<VkPhysicalDeviceVideoMaintenance1FeaturesKHR>() - 4usize];
    ["Offset of field: VkPhysicalDeviceVideoMaintenance1FeaturesKHR::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceVideoMaintenance1FeaturesKHR, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceVideoMaintenance1FeaturesKHR::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceVideoMaintenance1FeaturesKHR, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceVideoMaintenance1FeaturesKHR::videoMaintenance1"][::core::mem::offset_of!(
        VkPhysicalDeviceVideoMaintenance1FeaturesKHR,
        videoMaintenance1
    )
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoInlineQueryInfoKHR"]
        [::core::mem::size_of::<VkVideoInlineQueryInfoKHR>() - 24usize];
    ["Alignment of VkVideoInlineQueryInfoKHR"]
        [::core::mem::align_of::<VkVideoInlineQueryInfoKHR>() - 8usize];
    ["Offset of field: VkVideoInlineQueryInfoKHR::sType"]
        [::core::mem::offset_of!(VkVideoInlineQueryInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoInlineQueryInfoKHR::pNext"]
        [::core::mem::offset_of!(VkVideoInlineQueryInfoKHR, pNext) - 4usize];
    ["Offset of field: VkVideoInlineQueryInfoKHR::queryPool"]
        [::core::mem::offset_of!(VkVideoInlineQueryInfoKHR, queryPool) - 8usize];
    ["Offset of field: VkVideoInlineQueryInfoKHR::firstQuery"]
        [::core::mem::offset_of!(VkVideoInlineQueryInfoKHR, firstQuery) - 16usize];
    ["Offset of field: VkVideoInlineQueryInfoKHR::queryCount"]
        [::core::mem::offset_of!(VkVideoInlineQueryInfoKHR, queryCount) - 20usize];
};
pub const VkTimeDomainKHR_VK_TIME_DOMAIN_DEVICE_KHR: VkTimeDomainKHR = 0;
pub const VkTimeDomainKHR_VK_TIME_DOMAIN_CLOCK_MONOTONIC_KHR: VkTimeDomainKHR = 1;
pub const VkTimeDomainKHR_VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_KHR: VkTimeDomainKHR = 2;
pub const VkTimeDomainKHR_VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_KHR: VkTimeDomainKHR = 3;
pub const VkTimeDomainKHR_VK_TIME_DOMAIN_DEVICE_EXT: VkTimeDomainKHR = 0;
pub const VkTimeDomainKHR_VK_TIME_DOMAIN_CLOCK_MONOTONIC_EXT: VkTimeDomainKHR = 1;
pub const VkTimeDomainKHR_VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_EXT: VkTimeDomainKHR = 2;
pub const VkTimeDomainKHR_VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_EXT: VkTimeDomainKHR = 3;
pub const VkTimeDomainKHR_VK_TIME_DOMAIN_MAX_ENUM_KHR: VkTimeDomainKHR = 2147483647;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkCalibratedTimestampInfoKHR"]
        [::core::mem::size_of::<VkCalibratedTimestampInfoKHR>() - 12usize];
    ["Alignment of VkCalibratedTimestampInfoKHR"]
        [::core::mem::align_of::<VkCalibratedTimestampInfoKHR>() - 4usize];
    ["Offset of field: VkCalibratedTimestampInfoKHR::sType"]
        [::core::mem::offset_of!(VkCalibratedTimestampInfoKHR, sType) - 0usize];
    ["Offset of field: VkCalibratedTimestampInfoKHR::pNext"]
        [::core::mem::offset_of!(VkCalibratedTimestampInfoKHR, pNext) - 4usize];
    ["Offset of field: VkCalibratedTimestampInfoKHR::timeDomain"]
        [::core::mem::offset_of!(VkCalibratedTimestampInfoKHR, timeDomain) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSetDescriptorBufferOffsetsInfoEXT"]
        [::core::mem::size_of::<VkSetDescriptorBufferOffsetsInfoEXT>() - 40usize];
    ["Alignment of VkSetDescriptorBufferOffsetsInfoEXT"]
        [::core::mem::align_of::<VkSetDescriptorBufferOffsetsInfoEXT>() - 8usize];
    ["Offset of field: VkSetDescriptorBufferOffsetsInfoEXT::sType"]
        [::core::mem::offset_of!(VkSetDescriptorBufferOffsetsInfoEXT, sType) - 0usize];
    ["Offset of field: VkSetDescriptorBufferOffsetsInfoEXT::pNext"]
        [::core::mem::offset_of!(VkSetDescriptorBufferOffsetsInfoEXT, pNext) - 4usize];
    ["Offset of field: VkSetDescriptorBufferOffsetsInfoEXT::stageFlags"]
        [::core::mem::offset_of!(VkSetDescriptorBufferOffsetsInfoEXT, stageFlags) - 8usize];
    ["Offset of field: VkSetDescriptorBufferOffsetsInfoEXT::layout"]
        [::core::mem::offset_of!(VkSetDescriptorBufferOffsetsInfoEXT, layout) - 16usize];
    ["Offset of field: VkSetDescriptorBufferOffsetsInfoEXT::firstSet"]
        [::core::mem::offset_of!(VkSetDescriptorBufferOffsetsInfoEXT, firstSet) - 24usize];
    ["Offset of field: VkSetDescriptorBufferOffsetsInfoEXT::setCount"]
        [::core::mem::offset_of!(VkSetDescriptorBufferOffsetsInfoEXT, setCount) - 28usize];
    ["Offset of field: VkSetDescriptorBufferOffsetsInfoEXT::pBufferIndices"]
        [::core::mem::offset_of!(VkSetDescriptorBufferOffsetsInfoEXT, pBufferIndices) - 32usize];
    ["Offset of field: VkSetDescriptorBufferOffsetsInfoEXT::pOffsets"]
        [::core::mem::offset_of!(VkSetDescriptorBufferOffsetsInfoEXT, pOffsets) - 36usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkBindDescriptorBufferEmbeddedSamplersInfoEXT"]
        [::core::mem::size_of::<VkBindDescriptorBufferEmbeddedSamplersInfoEXT>() - 32usize];
    ["Alignment of VkBindDescriptorBufferEmbeddedSamplersInfoEXT"]
        [::core::mem::align_of::<VkBindDescriptorBufferEmbeddedSamplersInfoEXT>() - 8usize];
    ["Offset of field: VkBindDescriptorBufferEmbeddedSamplersInfoEXT::sType"]
        [::core::mem::offset_of!(VkBindDescriptorBufferEmbeddedSamplersInfoEXT, sType) - 0usize];
    ["Offset of field: VkBindDescriptorBufferEmbeddedSamplersInfoEXT::pNext"]
        [::core::mem::offset_of!(VkBindDescriptorBufferEmbeddedSamplersInfoEXT, pNext) - 4usize];
    ["Offset of field: VkBindDescriptorBufferEmbeddedSamplersInfoEXT::stageFlags"][::core::mem::offset_of!(
        VkBindDescriptorBufferEmbeddedSamplersInfoEXT,
        stageFlags
    ) - 8usize];
    ["Offset of field: VkBindDescriptorBufferEmbeddedSamplersInfoEXT::layout"]
        [::core::mem::offset_of!(VkBindDescriptorBufferEmbeddedSamplersInfoEXT, layout) - 16usize];
    ["Offset of field: VkBindDescriptorBufferEmbeddedSamplersInfoEXT::set"]
        [::core::mem::offset_of!(VkBindDescriptorBufferEmbeddedSamplersInfoEXT, set) - 24usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeQuantizationMapCapabilitiesKHR"]
        [::core::mem::size_of::<VkVideoEncodeQuantizationMapCapabilitiesKHR>() - 16usize];
    ["Alignment of VkVideoEncodeQuantizationMapCapabilitiesKHR"]
        [::core::mem::align_of::<VkVideoEncodeQuantizationMapCapabilitiesKHR>() - 4usize];
    ["Offset of field: VkVideoEncodeQuantizationMapCapabilitiesKHR::sType"]
        [::core::mem::offset_of!(VkVideoEncodeQuantizationMapCapabilitiesKHR, sType) - 0usize];
    ["Offset of field: VkVideoEncodeQuantizationMapCapabilitiesKHR::pNext"]
        [::core::mem::offset_of!(VkVideoEncodeQuantizationMapCapabilitiesKHR, pNext) - 4usize];
    ["Offset of field: VkVideoEncodeQuantizationMapCapabilitiesKHR::maxQuantizationMapExtent"][::core::mem::offset_of!(
        VkVideoEncodeQuantizationMapCapabilitiesKHR,
        maxQuantizationMapExtent
    )
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoFormatQuantizationMapPropertiesKHR"]
        [::core::mem::size_of::<VkVideoFormatQuantizationMapPropertiesKHR>() - 16usize];
    ["Alignment of VkVideoFormatQuantizationMapPropertiesKHR"]
        [::core::mem::align_of::<VkVideoFormatQuantizationMapPropertiesKHR>() - 4usize];
    ["Offset of field: VkVideoFormatQuantizationMapPropertiesKHR::sType"]
        [::core::mem::offset_of!(VkVideoFormatQuantizationMapPropertiesKHR, sType) - 0usize];
    ["Offset of field: VkVideoFormatQuantizationMapPropertiesKHR::pNext"]
        [::core::mem::offset_of!(VkVideoFormatQuantizationMapPropertiesKHR, pNext) - 4usize];
    ["Offset of field: VkVideoFormatQuantizationMapPropertiesKHR::quantizationMapTexelSize"][::core::mem::offset_of!(
        VkVideoFormatQuantizationMapPropertiesKHR,
        quantizationMapTexelSize
    )
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeQuantizationMapInfoKHR"]
        [::core::mem::size_of::<VkVideoEncodeQuantizationMapInfoKHR>() - 24usize];
    ["Alignment of VkVideoEncodeQuantizationMapInfoKHR"]
        [::core::mem::align_of::<VkVideoEncodeQuantizationMapInfoKHR>() - 8usize];
    ["Offset of field: VkVideoEncodeQuantizationMapInfoKHR::sType"]
        [::core::mem::offset_of!(VkVideoEncodeQuantizationMapInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoEncodeQuantizationMapInfoKHR::pNext"]
        [::core::mem::offset_of!(VkVideoEncodeQuantizationMapInfoKHR, pNext) - 4usize];
    ["Offset of field: VkVideoEncodeQuantizationMapInfoKHR::quantizationMap"]
        [::core::mem::offset_of!(VkVideoEncodeQuantizationMapInfoKHR, quantizationMap) - 8usize];
    ["Offset of field: VkVideoEncodeQuantizationMapInfoKHR::quantizationMapExtent"][::core::mem::offset_of!(
        VkVideoEncodeQuantizationMapInfoKHR,
        quantizationMapExtent
    ) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeQuantizationMapSessionParametersCreateInfoKHR"][::core::mem::size_of::<
        VkVideoEncodeQuantizationMapSessionParametersCreateInfoKHR,
    >() - 16usize];
    ["Alignment of VkVideoEncodeQuantizationMapSessionParametersCreateInfoKHR"]
        [::core::mem::align_of::<VkVideoEncodeQuantizationMapSessionParametersCreateInfoKHR>()
            - 4usize];
    ["Offset of field: VkVideoEncodeQuantizationMapSessionParametersCreateInfoKHR::sType"][::core::mem::offset_of!(
        VkVideoEncodeQuantizationMapSessionParametersCreateInfoKHR,
        sType
    )
        - 0usize];
    ["Offset of field: VkVideoEncodeQuantizationMapSessionParametersCreateInfoKHR::pNext"][::core::mem::offset_of!(
        VkVideoEncodeQuantizationMapSessionParametersCreateInfoKHR,
        pNext
    )
        - 4usize];
    ["Offset of field: VkVideoEncodeQuantizationMapSessionParametersCreateInfoKHR::quantizationMapTexelSize"] [:: core :: mem :: offset_of ! (VkVideoEncodeQuantizationMapSessionParametersCreateInfoKHR , quantizationMapTexelSize) - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceVideoEncodeQuantizationMapFeaturesKHR"]
        [::core::mem::size_of::<VkPhysicalDeviceVideoEncodeQuantizationMapFeaturesKHR>() - 12usize];
    ["Alignment of VkPhysicalDeviceVideoEncodeQuantizationMapFeaturesKHR"]
        [::core::mem::align_of::<VkPhysicalDeviceVideoEncodeQuantizationMapFeaturesKHR>() - 4usize];
    ["Offset of field: VkPhysicalDeviceVideoEncodeQuantizationMapFeaturesKHR::sType"][::core::mem::offset_of!(
        VkPhysicalDeviceVideoEncodeQuantizationMapFeaturesKHR,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceVideoEncodeQuantizationMapFeaturesKHR::pNext"][::core::mem::offset_of!(
        VkPhysicalDeviceVideoEncodeQuantizationMapFeaturesKHR,
        pNext
    ) - 4usize];
    ["Offset of field: VkPhysicalDeviceVideoEncodeQuantizationMapFeaturesKHR::videoEncodeQuantizationMap"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceVideoEncodeQuantizationMapFeaturesKHR , videoEncodeQuantizationMap) - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeH264QuantizationMapCapabilitiesKHR"]
        [::core::mem::size_of::<VkVideoEncodeH264QuantizationMapCapabilitiesKHR>() - 16usize];
    ["Alignment of VkVideoEncodeH264QuantizationMapCapabilitiesKHR"]
        [::core::mem::align_of::<VkVideoEncodeH264QuantizationMapCapabilitiesKHR>() - 4usize];
    ["Offset of field: VkVideoEncodeH264QuantizationMapCapabilitiesKHR::sType"]
        [::core::mem::offset_of!(VkVideoEncodeH264QuantizationMapCapabilitiesKHR, sType) - 0usize];
    ["Offset of field: VkVideoEncodeH264QuantizationMapCapabilitiesKHR::pNext"]
        [::core::mem::offset_of!(VkVideoEncodeH264QuantizationMapCapabilitiesKHR, pNext) - 4usize];
    ["Offset of field: VkVideoEncodeH264QuantizationMapCapabilitiesKHR::minQpDelta"][::core::mem::offset_of!(
        VkVideoEncodeH264QuantizationMapCapabilitiesKHR,
        minQpDelta
    ) - 8usize];
    ["Offset of field: VkVideoEncodeH264QuantizationMapCapabilitiesKHR::maxQpDelta"][::core::mem::offset_of!(
        VkVideoEncodeH264QuantizationMapCapabilitiesKHR,
        maxQpDelta
    ) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeH265QuantizationMapCapabilitiesKHR"]
        [::core::mem::size_of::<VkVideoEncodeH265QuantizationMapCapabilitiesKHR>() - 16usize];
    ["Alignment of VkVideoEncodeH265QuantizationMapCapabilitiesKHR"]
        [::core::mem::align_of::<VkVideoEncodeH265QuantizationMapCapabilitiesKHR>() - 4usize];
    ["Offset of field: VkVideoEncodeH265QuantizationMapCapabilitiesKHR::sType"]
        [::core::mem::offset_of!(VkVideoEncodeH265QuantizationMapCapabilitiesKHR, sType) - 0usize];
    ["Offset of field: VkVideoEncodeH265QuantizationMapCapabilitiesKHR::pNext"]
        [::core::mem::offset_of!(VkVideoEncodeH265QuantizationMapCapabilitiesKHR, pNext) - 4usize];
    ["Offset of field: VkVideoEncodeH265QuantizationMapCapabilitiesKHR::minQpDelta"][::core::mem::offset_of!(
        VkVideoEncodeH265QuantizationMapCapabilitiesKHR,
        minQpDelta
    ) - 8usize];
    ["Offset of field: VkVideoEncodeH265QuantizationMapCapabilitiesKHR::maxQpDelta"][::core::mem::offset_of!(
        VkVideoEncodeH265QuantizationMapCapabilitiesKHR,
        maxQpDelta
    ) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoFormatH265QuantizationMapPropertiesKHR"]
        [::core::mem::size_of::<VkVideoFormatH265QuantizationMapPropertiesKHR>() - 12usize];
    ["Alignment of VkVideoFormatH265QuantizationMapPropertiesKHR"]
        [::core::mem::align_of::<VkVideoFormatH265QuantizationMapPropertiesKHR>() - 4usize];
    ["Offset of field: VkVideoFormatH265QuantizationMapPropertiesKHR::sType"]
        [::core::mem::offset_of!(VkVideoFormatH265QuantizationMapPropertiesKHR, sType) - 0usize];
    ["Offset of field: VkVideoFormatH265QuantizationMapPropertiesKHR::pNext"]
        [::core::mem::offset_of!(VkVideoFormatH265QuantizationMapPropertiesKHR, pNext) - 4usize];
    ["Offset of field: VkVideoFormatH265QuantizationMapPropertiesKHR::compatibleCtbSizes"][::core::mem::offset_of!(
        VkVideoFormatH265QuantizationMapPropertiesKHR,
        compatibleCtbSizes
    )
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeAV1QuantizationMapCapabilitiesKHR"]
        [::core::mem::size_of::<VkVideoEncodeAV1QuantizationMapCapabilitiesKHR>() - 16usize];
    ["Alignment of VkVideoEncodeAV1QuantizationMapCapabilitiesKHR"]
        [::core::mem::align_of::<VkVideoEncodeAV1QuantizationMapCapabilitiesKHR>() - 4usize];
    ["Offset of field: VkVideoEncodeAV1QuantizationMapCapabilitiesKHR::sType"]
        [::core::mem::offset_of!(VkVideoEncodeAV1QuantizationMapCapabilitiesKHR, sType) - 0usize];
    ["Offset of field: VkVideoEncodeAV1QuantizationMapCapabilitiesKHR::pNext"]
        [::core::mem::offset_of!(VkVideoEncodeAV1QuantizationMapCapabilitiesKHR, pNext) - 4usize];
    ["Offset of field: VkVideoEncodeAV1QuantizationMapCapabilitiesKHR::minQIndexDelta"][::core::mem::offset_of!(
        VkVideoEncodeAV1QuantizationMapCapabilitiesKHR,
        minQIndexDelta
    ) - 8usize];
    ["Offset of field: VkVideoEncodeAV1QuantizationMapCapabilitiesKHR::maxQIndexDelta"][::core::mem::offset_of!(
        VkVideoEncodeAV1QuantizationMapCapabilitiesKHR,
        maxQIndexDelta
    )
        - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoFormatAV1QuantizationMapPropertiesKHR"]
        [::core::mem::size_of::<VkVideoFormatAV1QuantizationMapPropertiesKHR>() - 12usize];
    ["Alignment of VkVideoFormatAV1QuantizationMapPropertiesKHR"]
        [::core::mem::align_of::<VkVideoFormatAV1QuantizationMapPropertiesKHR>() - 4usize];
    ["Offset of field: VkVideoFormatAV1QuantizationMapPropertiesKHR::sType"]
        [::core::mem::offset_of!(VkVideoFormatAV1QuantizationMapPropertiesKHR, sType) - 0usize];
    ["Offset of field: VkVideoFormatAV1QuantizationMapPropertiesKHR::pNext"]
        [::core::mem::offset_of!(VkVideoFormatAV1QuantizationMapPropertiesKHR, pNext) - 4usize];
    ["Offset of field: VkVideoFormatAV1QuantizationMapPropertiesKHR::compatibleSuperblockSizes"][::core::mem::offset_of!(
        VkVideoFormatAV1QuantizationMapPropertiesKHR,
        compatibleSuperblockSizes
    )
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR"][::core::mem::size_of::<
        VkPhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR,
    >() - 12usize];
    ["Alignment of VkPhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR"]
        [::core::mem::align_of::<VkPhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR>()
            - 4usize];
    ["Offset of field: VkPhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR::sType"][::core::mem::offset_of!(
        VkPhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR,
        sType
    )
        - 0usize];
    ["Offset of field: VkPhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR::pNext"][::core::mem::offset_of!(
        VkPhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR,
        pNext
    )
        - 4usize];
    ["Offset of field: VkPhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR::shaderRelaxedExtendedInstruction"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR , shaderRelaxedExtendedInstruction) - 8usize] ;
};
pub const VkPhysicalDeviceLayeredApiKHR_VK_PHYSICAL_DEVICE_LAYERED_API_VULKAN_KHR:
    VkPhysicalDeviceLayeredApiKHR = 0;
pub const VkPhysicalDeviceLayeredApiKHR_VK_PHYSICAL_DEVICE_LAYERED_API_D3D12_KHR:
    VkPhysicalDeviceLayeredApiKHR = 1;
pub const VkPhysicalDeviceLayeredApiKHR_VK_PHYSICAL_DEVICE_LAYERED_API_METAL_KHR:
    VkPhysicalDeviceLayeredApiKHR = 2;
pub const VkPhysicalDeviceLayeredApiKHR_VK_PHYSICAL_DEVICE_LAYERED_API_OPENGL_KHR:
    VkPhysicalDeviceLayeredApiKHR = 3;
pub const VkPhysicalDeviceLayeredApiKHR_VK_PHYSICAL_DEVICE_LAYERED_API_OPENGLES_KHR:
    VkPhysicalDeviceLayeredApiKHR = 4;
pub const VkPhysicalDeviceLayeredApiKHR_VK_PHYSICAL_DEVICE_LAYERED_API_MAX_ENUM_KHR:
    VkPhysicalDeviceLayeredApiKHR = 2147483647;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceMaintenance7FeaturesKHR"]
        [::core::mem::size_of::<VkPhysicalDeviceMaintenance7FeaturesKHR>() - 12usize];
    ["Alignment of VkPhysicalDeviceMaintenance7FeaturesKHR"]
        [::core::mem::align_of::<VkPhysicalDeviceMaintenance7FeaturesKHR>() - 4usize];
    ["Offset of field: VkPhysicalDeviceMaintenance7FeaturesKHR::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceMaintenance7FeaturesKHR, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceMaintenance7FeaturesKHR::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceMaintenance7FeaturesKHR, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceMaintenance7FeaturesKHR::maintenance7"]
        [::core::mem::offset_of!(VkPhysicalDeviceMaintenance7FeaturesKHR, maintenance7) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceMaintenance7PropertiesKHR"]
        [::core::mem::size_of::<VkPhysicalDeviceMaintenance7PropertiesKHR>() - 40usize];
    ["Alignment of VkPhysicalDeviceMaintenance7PropertiesKHR"]
        [::core::mem::align_of::<VkPhysicalDeviceMaintenance7PropertiesKHR>() - 4usize];
    ["Offset of field: VkPhysicalDeviceMaintenance7PropertiesKHR::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceMaintenance7PropertiesKHR, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceMaintenance7PropertiesKHR::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceMaintenance7PropertiesKHR, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceMaintenance7PropertiesKHR::robustFragmentShadingRateAttachmentAccess"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceMaintenance7PropertiesKHR , robustFragmentShadingRateAttachmentAccess) - 8usize] ;
    ["Offset of field: VkPhysicalDeviceMaintenance7PropertiesKHR::separateDepthStencilAttachmentAccess"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceMaintenance7PropertiesKHR , separateDepthStencilAttachmentAccess) - 12usize] ;
    ["Offset of field: VkPhysicalDeviceMaintenance7PropertiesKHR::maxDescriptorSetTotalUniformBuffersDynamic"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceMaintenance7PropertiesKHR , maxDescriptorSetTotalUniformBuffersDynamic) - 16usize] ;
    ["Offset of field: VkPhysicalDeviceMaintenance7PropertiesKHR::maxDescriptorSetTotalStorageBuffersDynamic"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceMaintenance7PropertiesKHR , maxDescriptorSetTotalStorageBuffersDynamic) - 20usize] ;
    ["Offset of field: VkPhysicalDeviceMaintenance7PropertiesKHR::maxDescriptorSetTotalBuffersDynamic"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceMaintenance7PropertiesKHR , maxDescriptorSetTotalBuffersDynamic) - 24usize] ;
    ["Offset of field: VkPhysicalDeviceMaintenance7PropertiesKHR::maxDescriptorSetUpdateAfterBindTotalUniformBuffersDynamic"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceMaintenance7PropertiesKHR , maxDescriptorSetUpdateAfterBindTotalUniformBuffersDynamic) - 28usize] ;
    ["Offset of field: VkPhysicalDeviceMaintenance7PropertiesKHR::maxDescriptorSetUpdateAfterBindTotalStorageBuffersDynamic"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceMaintenance7PropertiesKHR , maxDescriptorSetUpdateAfterBindTotalStorageBuffersDynamic) - 32usize] ;
    ["Offset of field: VkPhysicalDeviceMaintenance7PropertiesKHR::maxDescriptorSetUpdateAfterBindTotalBuffersDynamic"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceMaintenance7PropertiesKHR , maxDescriptorSetUpdateAfterBindTotalBuffersDynamic) - 36usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceLayeredApiPropertiesKHR"]
        [::core::mem::size_of::<VkPhysicalDeviceLayeredApiPropertiesKHR>() - 276usize];
    ["Alignment of VkPhysicalDeviceLayeredApiPropertiesKHR"]
        [::core::mem::align_of::<VkPhysicalDeviceLayeredApiPropertiesKHR>() - 4usize];
    ["Offset of field: VkPhysicalDeviceLayeredApiPropertiesKHR::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceLayeredApiPropertiesKHR, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceLayeredApiPropertiesKHR::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceLayeredApiPropertiesKHR, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceLayeredApiPropertiesKHR::vendorID"]
        [::core::mem::offset_of!(VkPhysicalDeviceLayeredApiPropertiesKHR, vendorID) - 8usize];
    ["Offset of field: VkPhysicalDeviceLayeredApiPropertiesKHR::deviceID"]
        [::core::mem::offset_of!(VkPhysicalDeviceLayeredApiPropertiesKHR, deviceID) - 12usize];
    ["Offset of field: VkPhysicalDeviceLayeredApiPropertiesKHR::layeredAPI"]
        [::core::mem::offset_of!(VkPhysicalDeviceLayeredApiPropertiesKHR, layeredAPI) - 16usize];
    ["Offset of field: VkPhysicalDeviceLayeredApiPropertiesKHR::deviceName"]
        [::core::mem::offset_of!(VkPhysicalDeviceLayeredApiPropertiesKHR, deviceName) - 20usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceLayeredApiPropertiesListKHR"]
        [::core::mem::size_of::<VkPhysicalDeviceLayeredApiPropertiesListKHR>() - 16usize];
    ["Alignment of VkPhysicalDeviceLayeredApiPropertiesListKHR"]
        [::core::mem::align_of::<VkPhysicalDeviceLayeredApiPropertiesListKHR>() - 4usize];
    ["Offset of field: VkPhysicalDeviceLayeredApiPropertiesListKHR::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceLayeredApiPropertiesListKHR, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceLayeredApiPropertiesListKHR::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceLayeredApiPropertiesListKHR, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceLayeredApiPropertiesListKHR::layeredApiCount"][::core::mem::offset_of!(
        VkPhysicalDeviceLayeredApiPropertiesListKHR,
        layeredApiCount
    ) - 8usize];
    ["Offset of field: VkPhysicalDeviceLayeredApiPropertiesListKHR::pLayeredApis"][::core::mem::offset_of!(
        VkPhysicalDeviceLayeredApiPropertiesListKHR,
        pLayeredApis
    ) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceLayeredApiVulkanPropertiesKHR"]
        [::core::mem::size_of::<VkPhysicalDeviceLayeredApiVulkanPropertiesKHR>() - 832usize];
    ["Alignment of VkPhysicalDeviceLayeredApiVulkanPropertiesKHR"]
        [::core::mem::align_of::<VkPhysicalDeviceLayeredApiVulkanPropertiesKHR>() - 8usize];
    ["Offset of field: VkPhysicalDeviceLayeredApiVulkanPropertiesKHR::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceLayeredApiVulkanPropertiesKHR, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceLayeredApiVulkanPropertiesKHR::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceLayeredApiVulkanPropertiesKHR, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceLayeredApiVulkanPropertiesKHR::properties"][::core::mem::offset_of!(
        VkPhysicalDeviceLayeredApiVulkanPropertiesKHR,
        properties
    ) - 8usize];
};
pub const VK_ACCESS_3_NONE_KHR: VkAccessFlagBits3KHR = 0;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceMaintenance8FeaturesKHR"]
        [::core::mem::size_of::<VkPhysicalDeviceMaintenance8FeaturesKHR>() - 12usize];
    ["Alignment of VkPhysicalDeviceMaintenance8FeaturesKHR"]
        [::core::mem::align_of::<VkPhysicalDeviceMaintenance8FeaturesKHR>() - 4usize];
    ["Offset of field: VkPhysicalDeviceMaintenance8FeaturesKHR::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceMaintenance8FeaturesKHR, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceMaintenance8FeaturesKHR::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceMaintenance8FeaturesKHR, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceMaintenance8FeaturesKHR::maintenance8"]
        [::core::mem::offset_of!(VkPhysicalDeviceMaintenance8FeaturesKHR, maintenance8) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkMemoryBarrierAccessFlags3KHR"]
        [::core::mem::size_of::<VkMemoryBarrierAccessFlags3KHR>() - 24usize];
    ["Alignment of VkMemoryBarrierAccessFlags3KHR"]
        [::core::mem::align_of::<VkMemoryBarrierAccessFlags3KHR>() - 8usize];
    ["Offset of field: VkMemoryBarrierAccessFlags3KHR::sType"]
        [::core::mem::offset_of!(VkMemoryBarrierAccessFlags3KHR, sType) - 0usize];
    ["Offset of field: VkMemoryBarrierAccessFlags3KHR::pNext"]
        [::core::mem::offset_of!(VkMemoryBarrierAccessFlags3KHR, pNext) - 4usize];
    ["Offset of field: VkMemoryBarrierAccessFlags3KHR::srcAccessMask3"]
        [::core::mem::offset_of!(VkMemoryBarrierAccessFlags3KHR, srcAccessMask3) - 8usize];
    ["Offset of field: VkMemoryBarrierAccessFlags3KHR::dstAccessMask3"]
        [::core::mem::offset_of!(VkMemoryBarrierAccessFlags3KHR, dstAccessMask3) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceVideoMaintenance2FeaturesKHR"]
        [::core::mem::size_of::<VkPhysicalDeviceVideoMaintenance2FeaturesKHR>() - 12usize];
    ["Alignment of VkPhysicalDeviceVideoMaintenance2FeaturesKHR"]
        [::core::mem::align_of::<VkPhysicalDeviceVideoMaintenance2FeaturesKHR>() - 4usize];
    ["Offset of field: VkPhysicalDeviceVideoMaintenance2FeaturesKHR::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceVideoMaintenance2FeaturesKHR, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceVideoMaintenance2FeaturesKHR::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceVideoMaintenance2FeaturesKHR, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceVideoMaintenance2FeaturesKHR::videoMaintenance2"][::core::mem::offset_of!(
        VkPhysicalDeviceVideoMaintenance2FeaturesKHR,
        videoMaintenance2
    )
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoDecodeH264InlineSessionParametersInfoKHR"]
        [::core::mem::size_of::<VkVideoDecodeH264InlineSessionParametersInfoKHR>() - 16usize];
    ["Alignment of VkVideoDecodeH264InlineSessionParametersInfoKHR"]
        [::core::mem::align_of::<VkVideoDecodeH264InlineSessionParametersInfoKHR>() - 4usize];
    ["Offset of field: VkVideoDecodeH264InlineSessionParametersInfoKHR::sType"]
        [::core::mem::offset_of!(VkVideoDecodeH264InlineSessionParametersInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoDecodeH264InlineSessionParametersInfoKHR::pNext"]
        [::core::mem::offset_of!(VkVideoDecodeH264InlineSessionParametersInfoKHR, pNext) - 4usize];
    ["Offset of field: VkVideoDecodeH264InlineSessionParametersInfoKHR::pStdSPS"][::core::mem::offset_of!(
        VkVideoDecodeH264InlineSessionParametersInfoKHR,
        pStdSPS
    ) - 8usize];
    ["Offset of field: VkVideoDecodeH264InlineSessionParametersInfoKHR::pStdPPS"][::core::mem::offset_of!(
        VkVideoDecodeH264InlineSessionParametersInfoKHR,
        pStdPPS
    ) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoDecodeH265InlineSessionParametersInfoKHR"]
        [::core::mem::size_of::<VkVideoDecodeH265InlineSessionParametersInfoKHR>() - 20usize];
    ["Alignment of VkVideoDecodeH265InlineSessionParametersInfoKHR"]
        [::core::mem::align_of::<VkVideoDecodeH265InlineSessionParametersInfoKHR>() - 4usize];
    ["Offset of field: VkVideoDecodeH265InlineSessionParametersInfoKHR::sType"]
        [::core::mem::offset_of!(VkVideoDecodeH265InlineSessionParametersInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoDecodeH265InlineSessionParametersInfoKHR::pNext"]
        [::core::mem::offset_of!(VkVideoDecodeH265InlineSessionParametersInfoKHR, pNext) - 4usize];
    ["Offset of field: VkVideoDecodeH265InlineSessionParametersInfoKHR::pStdVPS"][::core::mem::offset_of!(
        VkVideoDecodeH265InlineSessionParametersInfoKHR,
        pStdVPS
    ) - 8usize];
    ["Offset of field: VkVideoDecodeH265InlineSessionParametersInfoKHR::pStdSPS"][::core::mem::offset_of!(
        VkVideoDecodeH265InlineSessionParametersInfoKHR,
        pStdSPS
    ) - 12usize];
    ["Offset of field: VkVideoDecodeH265InlineSessionParametersInfoKHR::pStdPPS"][::core::mem::offset_of!(
        VkVideoDecodeH265InlineSessionParametersInfoKHR,
        pStdPPS
    ) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoDecodeAV1InlineSessionParametersInfoKHR"]
        [::core::mem::size_of::<VkVideoDecodeAV1InlineSessionParametersInfoKHR>() - 12usize];
    ["Alignment of VkVideoDecodeAV1InlineSessionParametersInfoKHR"]
        [::core::mem::align_of::<VkVideoDecodeAV1InlineSessionParametersInfoKHR>() - 4usize];
    ["Offset of field: VkVideoDecodeAV1InlineSessionParametersInfoKHR::sType"]
        [::core::mem::offset_of!(VkVideoDecodeAV1InlineSessionParametersInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoDecodeAV1InlineSessionParametersInfoKHR::pNext"]
        [::core::mem::offset_of!(VkVideoDecodeAV1InlineSessionParametersInfoKHR, pNext) - 4usize];
    ["Offset of field: VkVideoDecodeAV1InlineSessionParametersInfoKHR::pStdSequenceHeader"][::core::mem::offset_of!(
        VkVideoDecodeAV1InlineSessionParametersInfoKHR,
        pStdSequenceHeader
    )
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceDepthClampZeroOneFeaturesKHR"]
        [::core::mem::size_of::<VkPhysicalDeviceDepthClampZeroOneFeaturesKHR>() - 12usize];
    ["Alignment of VkPhysicalDeviceDepthClampZeroOneFeaturesKHR"]
        [::core::mem::align_of::<VkPhysicalDeviceDepthClampZeroOneFeaturesKHR>() - 4usize];
    ["Offset of field: VkPhysicalDeviceDepthClampZeroOneFeaturesKHR::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceDepthClampZeroOneFeaturesKHR, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceDepthClampZeroOneFeaturesKHR::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceDepthClampZeroOneFeaturesKHR, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceDepthClampZeroOneFeaturesKHR::depthClampZeroOne"][::core::mem::offset_of!(
        VkPhysicalDeviceDepthClampZeroOneFeaturesKHR,
        depthClampZeroOne
    )
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceRobustness2FeaturesKHR"]
        [::core::mem::size_of::<VkPhysicalDeviceRobustness2FeaturesKHR>() - 20usize];
    ["Alignment of VkPhysicalDeviceRobustness2FeaturesKHR"]
        [::core::mem::align_of::<VkPhysicalDeviceRobustness2FeaturesKHR>() - 4usize];
    ["Offset of field: VkPhysicalDeviceRobustness2FeaturesKHR::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceRobustness2FeaturesKHR, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceRobustness2FeaturesKHR::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceRobustness2FeaturesKHR, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceRobustness2FeaturesKHR::robustBufferAccess2"][::core::mem::offset_of!(
        VkPhysicalDeviceRobustness2FeaturesKHR,
        robustBufferAccess2
    ) - 8usize];
    ["Offset of field: VkPhysicalDeviceRobustness2FeaturesKHR::robustImageAccess2"][::core::mem::offset_of!(
        VkPhysicalDeviceRobustness2FeaturesKHR,
        robustImageAccess2
    ) - 12usize];
    ["Offset of field: VkPhysicalDeviceRobustness2FeaturesKHR::nullDescriptor"]
        [::core::mem::offset_of!(VkPhysicalDeviceRobustness2FeaturesKHR, nullDescriptor) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceRobustness2PropertiesKHR"]
        [::core::mem::size_of::<VkPhysicalDeviceRobustness2PropertiesKHR>() - 24usize];
    ["Alignment of VkPhysicalDeviceRobustness2PropertiesKHR"]
        [::core::mem::align_of::<VkPhysicalDeviceRobustness2PropertiesKHR>() - 8usize];
    ["Offset of field: VkPhysicalDeviceRobustness2PropertiesKHR::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceRobustness2PropertiesKHR, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceRobustness2PropertiesKHR::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceRobustness2PropertiesKHR, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceRobustness2PropertiesKHR::robustStorageBufferAccessSizeAlignment"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceRobustness2PropertiesKHR , robustStorageBufferAccessSizeAlignment) - 8usize] ;
    ["Offset of field: VkPhysicalDeviceRobustness2PropertiesKHR::robustUniformBufferAccessSizeAlignment"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceRobustness2PropertiesKHR , robustUniformBufferAccessSizeAlignment) - 16usize] ;
};
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT:
    VkDebugReportObjectTypeEXT = 0;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT:
    VkDebugReportObjectTypeEXT = 1;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT:
    VkDebugReportObjectTypeEXT = 2;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT:
    VkDebugReportObjectTypeEXT = 3;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT:
    VkDebugReportObjectTypeEXT = 4;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT:
    VkDebugReportObjectTypeEXT = 5;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT:
    VkDebugReportObjectTypeEXT = 6;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT:
    VkDebugReportObjectTypeEXT = 7;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT:
    VkDebugReportObjectTypeEXT = 8;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT:
    VkDebugReportObjectTypeEXT = 9;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT:
    VkDebugReportObjectTypeEXT = 10;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT:
    VkDebugReportObjectTypeEXT = 11;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT:
    VkDebugReportObjectTypeEXT = 12;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT:
    VkDebugReportObjectTypeEXT = 13;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT:
    VkDebugReportObjectTypeEXT = 14;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT:
    VkDebugReportObjectTypeEXT = 15;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT:
    VkDebugReportObjectTypeEXT = 16;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT:
    VkDebugReportObjectTypeEXT = 17;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT:
    VkDebugReportObjectTypeEXT = 18;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT:
    VkDebugReportObjectTypeEXT = 19;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT:
    VkDebugReportObjectTypeEXT = 20;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT:
    VkDebugReportObjectTypeEXT = 21;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT:
    VkDebugReportObjectTypeEXT = 22;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT:
    VkDebugReportObjectTypeEXT = 23;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT:
    VkDebugReportObjectTypeEXT = 24;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT:
    VkDebugReportObjectTypeEXT = 25;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT:
    VkDebugReportObjectTypeEXT = 26;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT:
    VkDebugReportObjectTypeEXT = 27;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT:
    VkDebugReportObjectTypeEXT = 28;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT:
    VkDebugReportObjectTypeEXT = 29;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT:
    VkDebugReportObjectTypeEXT = 30;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT:
    VkDebugReportObjectTypeEXT = 33;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT:
    VkDebugReportObjectTypeEXT = 1000156000;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT:
    VkDebugReportObjectTypeEXT = 1000085000;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_CU_MODULE_NVX_EXT:
    VkDebugReportObjectTypeEXT = 1000029000;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_CU_FUNCTION_NVX_EXT:
    VkDebugReportObjectTypeEXT = 1000029001;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR_EXT:
    VkDebugReportObjectTypeEXT = 1000150000;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV_EXT:
    VkDebugReportObjectTypeEXT = 1000165000;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_CUDA_MODULE_NV_EXT:
    VkDebugReportObjectTypeEXT = 1000307000;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_CUDA_FUNCTION_NV_EXT:
    VkDebugReportObjectTypeEXT = 1000307001;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_COLLECTION_FUCHSIA_EXT:
    VkDebugReportObjectTypeEXT = 1000366000;
#[doc = " VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT is a deprecated alias"]
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT:
    VkDebugReportObjectTypeEXT = 28;
#[doc = " VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT is a deprecated alias"]
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT:
    VkDebugReportObjectTypeEXT = 33;
#[doc = " VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT is a deprecated alias"]
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR_EXT : VkDebugReportObjectTypeEXT = 1000085000 ;
#[doc = " VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT is a deprecated alias"]
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR_EXT : VkDebugReportObjectTypeEXT = 1000156000 ;
#[doc = " VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT is a deprecated alias"]
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_MAX_ENUM_EXT:
    VkDebugReportObjectTypeEXT = 2147483647;
pub const VkDebugReportFlagBitsEXT_VK_DEBUG_REPORT_INFORMATION_BIT_EXT: VkDebugReportFlagBitsEXT =
    1;
pub const VkDebugReportFlagBitsEXT_VK_DEBUG_REPORT_WARNING_BIT_EXT: VkDebugReportFlagBitsEXT = 2;
pub const VkDebugReportFlagBitsEXT_VK_DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT:
    VkDebugReportFlagBitsEXT = 4;
pub const VkDebugReportFlagBitsEXT_VK_DEBUG_REPORT_ERROR_BIT_EXT: VkDebugReportFlagBitsEXT = 8;
pub const VkDebugReportFlagBitsEXT_VK_DEBUG_REPORT_DEBUG_BIT_EXT: VkDebugReportFlagBitsEXT = 16;
pub const VkDebugReportFlagBitsEXT_VK_DEBUG_REPORT_FLAG_BITS_MAX_ENUM_EXT:
    VkDebugReportFlagBitsEXT = 2147483647;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDebugReportCallbackCreateInfoEXT"]
        [::core::mem::size_of::<VkDebugReportCallbackCreateInfoEXT>() - 20usize];
    ["Alignment of VkDebugReportCallbackCreateInfoEXT"]
        [::core::mem::align_of::<VkDebugReportCallbackCreateInfoEXT>() - 4usize];
    ["Offset of field: VkDebugReportCallbackCreateInfoEXT::sType"]
        [::core::mem::offset_of!(VkDebugReportCallbackCreateInfoEXT, sType) - 0usize];
    ["Offset of field: VkDebugReportCallbackCreateInfoEXT::pNext"]
        [::core::mem::offset_of!(VkDebugReportCallbackCreateInfoEXT, pNext) - 4usize];
    ["Offset of field: VkDebugReportCallbackCreateInfoEXT::flags"]
        [::core::mem::offset_of!(VkDebugReportCallbackCreateInfoEXT, flags) - 8usize];
    ["Offset of field: VkDebugReportCallbackCreateInfoEXT::pfnCallback"]
        [::core::mem::offset_of!(VkDebugReportCallbackCreateInfoEXT, pfnCallback) - 12usize];
    ["Offset of field: VkDebugReportCallbackCreateInfoEXT::pUserData"]
        [::core::mem::offset_of!(VkDebugReportCallbackCreateInfoEXT, pUserData) - 16usize];
};
pub const VkRasterizationOrderAMD_VK_RASTERIZATION_ORDER_STRICT_AMD: VkRasterizationOrderAMD = 0;
pub const VkRasterizationOrderAMD_VK_RASTERIZATION_ORDER_RELAXED_AMD: VkRasterizationOrderAMD = 1;
pub const VkRasterizationOrderAMD_VK_RASTERIZATION_ORDER_MAX_ENUM_AMD: VkRasterizationOrderAMD =
    2147483647;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineRasterizationStateRasterizationOrderAMD"]
        [::core::mem::size_of::<VkPipelineRasterizationStateRasterizationOrderAMD>() - 12usize];
    ["Alignment of VkPipelineRasterizationStateRasterizationOrderAMD"]
        [::core::mem::align_of::<VkPipelineRasterizationStateRasterizationOrderAMD>() - 4usize];
    ["Offset of field: VkPipelineRasterizationStateRasterizationOrderAMD::sType"][::core::mem::offset_of!(
        VkPipelineRasterizationStateRasterizationOrderAMD,
        sType
    ) - 0usize];
    ["Offset of field: VkPipelineRasterizationStateRasterizationOrderAMD::pNext"][::core::mem::offset_of!(
        VkPipelineRasterizationStateRasterizationOrderAMD,
        pNext
    ) - 4usize];
    ["Offset of field: VkPipelineRasterizationStateRasterizationOrderAMD::rasterizationOrder"][::core::mem::offset_of!(
        VkPipelineRasterizationStateRasterizationOrderAMD,
        rasterizationOrder
    )
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDebugMarkerObjectNameInfoEXT"]
        [::core::mem::size_of::<VkDebugMarkerObjectNameInfoEXT>() - 32usize];
    ["Alignment of VkDebugMarkerObjectNameInfoEXT"]
        [::core::mem::align_of::<VkDebugMarkerObjectNameInfoEXT>() - 8usize];
    ["Offset of field: VkDebugMarkerObjectNameInfoEXT::sType"]
        [::core::mem::offset_of!(VkDebugMarkerObjectNameInfoEXT, sType) - 0usize];
    ["Offset of field: VkDebugMarkerObjectNameInfoEXT::pNext"]
        [::core::mem::offset_of!(VkDebugMarkerObjectNameInfoEXT, pNext) - 4usize];
    ["Offset of field: VkDebugMarkerObjectNameInfoEXT::objectType"]
        [::core::mem::offset_of!(VkDebugMarkerObjectNameInfoEXT, objectType) - 8usize];
    ["Offset of field: VkDebugMarkerObjectNameInfoEXT::object"]
        [::core::mem::offset_of!(VkDebugMarkerObjectNameInfoEXT, object) - 16usize];
    ["Offset of field: VkDebugMarkerObjectNameInfoEXT::pObjectName"]
        [::core::mem::offset_of!(VkDebugMarkerObjectNameInfoEXT, pObjectName) - 24usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDebugMarkerObjectTagInfoEXT"]
        [::core::mem::size_of::<VkDebugMarkerObjectTagInfoEXT>() - 40usize];
    ["Alignment of VkDebugMarkerObjectTagInfoEXT"]
        [::core::mem::align_of::<VkDebugMarkerObjectTagInfoEXT>() - 8usize];
    ["Offset of field: VkDebugMarkerObjectTagInfoEXT::sType"]
        [::core::mem::offset_of!(VkDebugMarkerObjectTagInfoEXT, sType) - 0usize];
    ["Offset of field: VkDebugMarkerObjectTagInfoEXT::pNext"]
        [::core::mem::offset_of!(VkDebugMarkerObjectTagInfoEXT, pNext) - 4usize];
    ["Offset of field: VkDebugMarkerObjectTagInfoEXT::objectType"]
        [::core::mem::offset_of!(VkDebugMarkerObjectTagInfoEXT, objectType) - 8usize];
    ["Offset of field: VkDebugMarkerObjectTagInfoEXT::object"]
        [::core::mem::offset_of!(VkDebugMarkerObjectTagInfoEXT, object) - 16usize];
    ["Offset of field: VkDebugMarkerObjectTagInfoEXT::tagName"]
        [::core::mem::offset_of!(VkDebugMarkerObjectTagInfoEXT, tagName) - 24usize];
    ["Offset of field: VkDebugMarkerObjectTagInfoEXT::tagSize"]
        [::core::mem::offset_of!(VkDebugMarkerObjectTagInfoEXT, tagSize) - 32usize];
    ["Offset of field: VkDebugMarkerObjectTagInfoEXT::pTag"]
        [::core::mem::offset_of!(VkDebugMarkerObjectTagInfoEXT, pTag) - 36usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDebugMarkerMarkerInfoEXT"]
        [::core::mem::size_of::<VkDebugMarkerMarkerInfoEXT>() - 28usize];
    ["Alignment of VkDebugMarkerMarkerInfoEXT"]
        [::core::mem::align_of::<VkDebugMarkerMarkerInfoEXT>() - 4usize];
    ["Offset of field: VkDebugMarkerMarkerInfoEXT::sType"]
        [::core::mem::offset_of!(VkDebugMarkerMarkerInfoEXT, sType) - 0usize];
    ["Offset of field: VkDebugMarkerMarkerInfoEXT::pNext"]
        [::core::mem::offset_of!(VkDebugMarkerMarkerInfoEXT, pNext) - 4usize];
    ["Offset of field: VkDebugMarkerMarkerInfoEXT::pMarkerName"]
        [::core::mem::offset_of!(VkDebugMarkerMarkerInfoEXT, pMarkerName) - 8usize];
    ["Offset of field: VkDebugMarkerMarkerInfoEXT::color"]
        [::core::mem::offset_of!(VkDebugMarkerMarkerInfoEXT, color) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDedicatedAllocationImageCreateInfoNV"]
        [::core::mem::size_of::<VkDedicatedAllocationImageCreateInfoNV>() - 12usize];
    ["Alignment of VkDedicatedAllocationImageCreateInfoNV"]
        [::core::mem::align_of::<VkDedicatedAllocationImageCreateInfoNV>() - 4usize];
    ["Offset of field: VkDedicatedAllocationImageCreateInfoNV::sType"]
        [::core::mem::offset_of!(VkDedicatedAllocationImageCreateInfoNV, sType) - 0usize];
    ["Offset of field: VkDedicatedAllocationImageCreateInfoNV::pNext"]
        [::core::mem::offset_of!(VkDedicatedAllocationImageCreateInfoNV, pNext) - 4usize];
    ["Offset of field: VkDedicatedAllocationImageCreateInfoNV::dedicatedAllocation"][::core::mem::offset_of!(
        VkDedicatedAllocationImageCreateInfoNV,
        dedicatedAllocation
    ) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDedicatedAllocationBufferCreateInfoNV"]
        [::core::mem::size_of::<VkDedicatedAllocationBufferCreateInfoNV>() - 12usize];
    ["Alignment of VkDedicatedAllocationBufferCreateInfoNV"]
        [::core::mem::align_of::<VkDedicatedAllocationBufferCreateInfoNV>() - 4usize];
    ["Offset of field: VkDedicatedAllocationBufferCreateInfoNV::sType"]
        [::core::mem::offset_of!(VkDedicatedAllocationBufferCreateInfoNV, sType) - 0usize];
    ["Offset of field: VkDedicatedAllocationBufferCreateInfoNV::pNext"]
        [::core::mem::offset_of!(VkDedicatedAllocationBufferCreateInfoNV, pNext) - 4usize];
    ["Offset of field: VkDedicatedAllocationBufferCreateInfoNV::dedicatedAllocation"][::core::mem::offset_of!(
        VkDedicatedAllocationBufferCreateInfoNV,
        dedicatedAllocation
    ) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDedicatedAllocationMemoryAllocateInfoNV"]
        [::core::mem::size_of::<VkDedicatedAllocationMemoryAllocateInfoNV>() - 24usize];
    ["Alignment of VkDedicatedAllocationMemoryAllocateInfoNV"]
        [::core::mem::align_of::<VkDedicatedAllocationMemoryAllocateInfoNV>() - 8usize];
    ["Offset of field: VkDedicatedAllocationMemoryAllocateInfoNV::sType"]
        [::core::mem::offset_of!(VkDedicatedAllocationMemoryAllocateInfoNV, sType) - 0usize];
    ["Offset of field: VkDedicatedAllocationMemoryAllocateInfoNV::pNext"]
        [::core::mem::offset_of!(VkDedicatedAllocationMemoryAllocateInfoNV, pNext) - 4usize];
    ["Offset of field: VkDedicatedAllocationMemoryAllocateInfoNV::image"]
        [::core::mem::offset_of!(VkDedicatedAllocationMemoryAllocateInfoNV, image) - 8usize];
    ["Offset of field: VkDedicatedAllocationMemoryAllocateInfoNV::buffer"]
        [::core::mem::offset_of!(VkDedicatedAllocationMemoryAllocateInfoNV, buffer) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceTransformFeedbackFeaturesEXT"]
        [::core::mem::size_of::<VkPhysicalDeviceTransformFeedbackFeaturesEXT>() - 16usize];
    ["Alignment of VkPhysicalDeviceTransformFeedbackFeaturesEXT"]
        [::core::mem::align_of::<VkPhysicalDeviceTransformFeedbackFeaturesEXT>() - 4usize];
    ["Offset of field: VkPhysicalDeviceTransformFeedbackFeaturesEXT::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceTransformFeedbackFeaturesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceTransformFeedbackFeaturesEXT::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceTransformFeedbackFeaturesEXT, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceTransformFeedbackFeaturesEXT::transformFeedback"][::core::mem::offset_of!(
        VkPhysicalDeviceTransformFeedbackFeaturesEXT,
        transformFeedback
    )
        - 8usize];
    ["Offset of field: VkPhysicalDeviceTransformFeedbackFeaturesEXT::geometryStreams"][::core::mem::offset_of!(
        VkPhysicalDeviceTransformFeedbackFeaturesEXT,
        geometryStreams
    ) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceTransformFeedbackPropertiesEXT"]
        [::core::mem::size_of::<VkPhysicalDeviceTransformFeedbackPropertiesEXT>() - 56usize];
    ["Alignment of VkPhysicalDeviceTransformFeedbackPropertiesEXT"]
        [::core::mem::align_of::<VkPhysicalDeviceTransformFeedbackPropertiesEXT>() - 8usize];
    ["Offset of field: VkPhysicalDeviceTransformFeedbackPropertiesEXT::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceTransformFeedbackPropertiesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceTransformFeedbackPropertiesEXT::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceTransformFeedbackPropertiesEXT, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceTransformFeedbackPropertiesEXT::maxTransformFeedbackStreams"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceTransformFeedbackPropertiesEXT , maxTransformFeedbackStreams) - 8usize] ;
    ["Offset of field: VkPhysicalDeviceTransformFeedbackPropertiesEXT::maxTransformFeedbackBuffers"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceTransformFeedbackPropertiesEXT , maxTransformFeedbackBuffers) - 12usize] ;
    ["Offset of field: VkPhysicalDeviceTransformFeedbackPropertiesEXT::maxTransformFeedbackBufferSize"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceTransformFeedbackPropertiesEXT , maxTransformFeedbackBufferSize) - 16usize] ;
    ["Offset of field: VkPhysicalDeviceTransformFeedbackPropertiesEXT::maxTransformFeedbackStreamDataSize"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceTransformFeedbackPropertiesEXT , maxTransformFeedbackStreamDataSize) - 24usize] ;
    ["Offset of field: VkPhysicalDeviceTransformFeedbackPropertiesEXT::maxTransformFeedbackBufferDataSize"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceTransformFeedbackPropertiesEXT , maxTransformFeedbackBufferDataSize) - 28usize] ;
    ["Offset of field: VkPhysicalDeviceTransformFeedbackPropertiesEXT::maxTransformFeedbackBufferDataStride"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceTransformFeedbackPropertiesEXT , maxTransformFeedbackBufferDataStride) - 32usize] ;
    ["Offset of field: VkPhysicalDeviceTransformFeedbackPropertiesEXT::transformFeedbackQueries"][::core::mem::offset_of!(
        VkPhysicalDeviceTransformFeedbackPropertiesEXT,
        transformFeedbackQueries
    )
        - 36usize];
    ["Offset of field: VkPhysicalDeviceTransformFeedbackPropertiesEXT::transformFeedbackStreamsLinesTriangles"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceTransformFeedbackPropertiesEXT , transformFeedbackStreamsLinesTriangles) - 40usize] ;
    ["Offset of field: VkPhysicalDeviceTransformFeedbackPropertiesEXT::transformFeedbackRasterizationStreamSelect"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceTransformFeedbackPropertiesEXT , transformFeedbackRasterizationStreamSelect) - 44usize] ;
    ["Offset of field: VkPhysicalDeviceTransformFeedbackPropertiesEXT::transformFeedbackDraw"][::core::mem::offset_of!(
        VkPhysicalDeviceTransformFeedbackPropertiesEXT,
        transformFeedbackDraw
    )
        - 48usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineRasterizationStateStreamCreateInfoEXT"]
        [::core::mem::size_of::<VkPipelineRasterizationStateStreamCreateInfoEXT>() - 16usize];
    ["Alignment of VkPipelineRasterizationStateStreamCreateInfoEXT"]
        [::core::mem::align_of::<VkPipelineRasterizationStateStreamCreateInfoEXT>() - 4usize];
    ["Offset of field: VkPipelineRasterizationStateStreamCreateInfoEXT::sType"]
        [::core::mem::offset_of!(VkPipelineRasterizationStateStreamCreateInfoEXT, sType) - 0usize];
    ["Offset of field: VkPipelineRasterizationStateStreamCreateInfoEXT::pNext"]
        [::core::mem::offset_of!(VkPipelineRasterizationStateStreamCreateInfoEXT, pNext) - 4usize];
    ["Offset of field: VkPipelineRasterizationStateStreamCreateInfoEXT::flags"]
        [::core::mem::offset_of!(VkPipelineRasterizationStateStreamCreateInfoEXT, flags) - 8usize];
    ["Offset of field: VkPipelineRasterizationStateStreamCreateInfoEXT::rasterizationStream"][::core::mem::offset_of!(
        VkPipelineRasterizationStateStreamCreateInfoEXT,
        rasterizationStream
    )
        - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkCuModuleCreateInfoNVX"]
        [::core::mem::size_of::<VkCuModuleCreateInfoNVX>() - 16usize];
    ["Alignment of VkCuModuleCreateInfoNVX"]
        [::core::mem::align_of::<VkCuModuleCreateInfoNVX>() - 4usize];
    ["Offset of field: VkCuModuleCreateInfoNVX::sType"]
        [::core::mem::offset_of!(VkCuModuleCreateInfoNVX, sType) - 0usize];
    ["Offset of field: VkCuModuleCreateInfoNVX::pNext"]
        [::core::mem::offset_of!(VkCuModuleCreateInfoNVX, pNext) - 4usize];
    ["Offset of field: VkCuModuleCreateInfoNVX::dataSize"]
        [::core::mem::offset_of!(VkCuModuleCreateInfoNVX, dataSize) - 8usize];
    ["Offset of field: VkCuModuleCreateInfoNVX::pData"]
        [::core::mem::offset_of!(VkCuModuleCreateInfoNVX, pData) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkCuModuleTexturingModeCreateInfoNVX"]
        [::core::mem::size_of::<VkCuModuleTexturingModeCreateInfoNVX>() - 12usize];
    ["Alignment of VkCuModuleTexturingModeCreateInfoNVX"]
        [::core::mem::align_of::<VkCuModuleTexturingModeCreateInfoNVX>() - 4usize];
    ["Offset of field: VkCuModuleTexturingModeCreateInfoNVX::sType"]
        [::core::mem::offset_of!(VkCuModuleTexturingModeCreateInfoNVX, sType) - 0usize];
    ["Offset of field: VkCuModuleTexturingModeCreateInfoNVX::pNext"]
        [::core::mem::offset_of!(VkCuModuleTexturingModeCreateInfoNVX, pNext) - 4usize];
    ["Offset of field: VkCuModuleTexturingModeCreateInfoNVX::use64bitTexturing"]
        [::core::mem::offset_of!(VkCuModuleTexturingModeCreateInfoNVX, use64bitTexturing) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkCuFunctionCreateInfoNVX"]
        [::core::mem::size_of::<VkCuFunctionCreateInfoNVX>() - 24usize];
    ["Alignment of VkCuFunctionCreateInfoNVX"]
        [::core::mem::align_of::<VkCuFunctionCreateInfoNVX>() - 8usize];
    ["Offset of field: VkCuFunctionCreateInfoNVX::sType"]
        [::core::mem::offset_of!(VkCuFunctionCreateInfoNVX, sType) - 0usize];
    ["Offset of field: VkCuFunctionCreateInfoNVX::pNext"]
        [::core::mem::offset_of!(VkCuFunctionCreateInfoNVX, pNext) - 4usize];
    ["Offset of field: VkCuFunctionCreateInfoNVX::module"]
        [::core::mem::offset_of!(VkCuFunctionCreateInfoNVX, module) - 8usize];
    ["Offset of field: VkCuFunctionCreateInfoNVX::pName"]
        [::core::mem::offset_of!(VkCuFunctionCreateInfoNVX, pName) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkCuLaunchInfoNVX"][::core::mem::size_of::<VkCuLaunchInfoNVX>() - 64usize];
    ["Alignment of VkCuLaunchInfoNVX"][::core::mem::align_of::<VkCuLaunchInfoNVX>() - 8usize];
    ["Offset of field: VkCuLaunchInfoNVX::sType"]
        [::core::mem::offset_of!(VkCuLaunchInfoNVX, sType) - 0usize];
    ["Offset of field: VkCuLaunchInfoNVX::pNext"]
        [::core::mem::offset_of!(VkCuLaunchInfoNVX, pNext) - 4usize];
    ["Offset of field: VkCuLaunchInfoNVX::function"]
        [::core::mem::offset_of!(VkCuLaunchInfoNVX, function) - 8usize];
    ["Offset of field: VkCuLaunchInfoNVX::gridDimX"]
        [::core::mem::offset_of!(VkCuLaunchInfoNVX, gridDimX) - 16usize];
    ["Offset of field: VkCuLaunchInfoNVX::gridDimY"]
        [::core::mem::offset_of!(VkCuLaunchInfoNVX, gridDimY) - 20usize];
    ["Offset of field: VkCuLaunchInfoNVX::gridDimZ"]
        [::core::mem::offset_of!(VkCuLaunchInfoNVX, gridDimZ) - 24usize];
    ["Offset of field: VkCuLaunchInfoNVX::blockDimX"]
        [::core::mem::offset_of!(VkCuLaunchInfoNVX, blockDimX) - 28usize];
    ["Offset of field: VkCuLaunchInfoNVX::blockDimY"]
        [::core::mem::offset_of!(VkCuLaunchInfoNVX, blockDimY) - 32usize];
    ["Offset of field: VkCuLaunchInfoNVX::blockDimZ"]
        [::core::mem::offset_of!(VkCuLaunchInfoNVX, blockDimZ) - 36usize];
    ["Offset of field: VkCuLaunchInfoNVX::sharedMemBytes"]
        [::core::mem::offset_of!(VkCuLaunchInfoNVX, sharedMemBytes) - 40usize];
    ["Offset of field: VkCuLaunchInfoNVX::paramCount"]
        [::core::mem::offset_of!(VkCuLaunchInfoNVX, paramCount) - 44usize];
    ["Offset of field: VkCuLaunchInfoNVX::pParams"]
        [::core::mem::offset_of!(VkCuLaunchInfoNVX, pParams) - 48usize];
    ["Offset of field: VkCuLaunchInfoNVX::extraCount"]
        [::core::mem::offset_of!(VkCuLaunchInfoNVX, extraCount) - 52usize];
    ["Offset of field: VkCuLaunchInfoNVX::pExtras"]
        [::core::mem::offset_of!(VkCuLaunchInfoNVX, pExtras) - 56usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkImageViewHandleInfoNVX"]
        [::core::mem::size_of::<VkImageViewHandleInfoNVX>() - 32usize];
    ["Alignment of VkImageViewHandleInfoNVX"]
        [::core::mem::align_of::<VkImageViewHandleInfoNVX>() - 8usize];
    ["Offset of field: VkImageViewHandleInfoNVX::sType"]
        [::core::mem::offset_of!(VkImageViewHandleInfoNVX, sType) - 0usize];
    ["Offset of field: VkImageViewHandleInfoNVX::pNext"]
        [::core::mem::offset_of!(VkImageViewHandleInfoNVX, pNext) - 4usize];
    ["Offset of field: VkImageViewHandleInfoNVX::imageView"]
        [::core::mem::offset_of!(VkImageViewHandleInfoNVX, imageView) - 8usize];
    ["Offset of field: VkImageViewHandleInfoNVX::descriptorType"]
        [::core::mem::offset_of!(VkImageViewHandleInfoNVX, descriptorType) - 16usize];
    ["Offset of field: VkImageViewHandleInfoNVX::sampler"]
        [::core::mem::offset_of!(VkImageViewHandleInfoNVX, sampler) - 24usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkImageViewAddressPropertiesNVX"]
        [::core::mem::size_of::<VkImageViewAddressPropertiesNVX>() - 24usize];
    ["Alignment of VkImageViewAddressPropertiesNVX"]
        [::core::mem::align_of::<VkImageViewAddressPropertiesNVX>() - 8usize];
    ["Offset of field: VkImageViewAddressPropertiesNVX::sType"]
        [::core::mem::offset_of!(VkImageViewAddressPropertiesNVX, sType) - 0usize];
    ["Offset of field: VkImageViewAddressPropertiesNVX::pNext"]
        [::core::mem::offset_of!(VkImageViewAddressPropertiesNVX, pNext) - 4usize];
    ["Offset of field: VkImageViewAddressPropertiesNVX::deviceAddress"]
        [::core::mem::offset_of!(VkImageViewAddressPropertiesNVX, deviceAddress) - 8usize];
    ["Offset of field: VkImageViewAddressPropertiesNVX::size"]
        [::core::mem::offset_of!(VkImageViewAddressPropertiesNVX, size) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkTextureLODGatherFormatPropertiesAMD"]
        [::core::mem::size_of::<VkTextureLODGatherFormatPropertiesAMD>() - 12usize];
    ["Alignment of VkTextureLODGatherFormatPropertiesAMD"]
        [::core::mem::align_of::<VkTextureLODGatherFormatPropertiesAMD>() - 4usize];
    ["Offset of field: VkTextureLODGatherFormatPropertiesAMD::sType"]
        [::core::mem::offset_of!(VkTextureLODGatherFormatPropertiesAMD, sType) - 0usize];
    ["Offset of field: VkTextureLODGatherFormatPropertiesAMD::pNext"]
        [::core::mem::offset_of!(VkTextureLODGatherFormatPropertiesAMD, pNext) - 4usize];
    ["Offset of field: VkTextureLODGatherFormatPropertiesAMD::supportsTextureGatherLODBiasAMD"][::core::mem::offset_of!(
        VkTextureLODGatherFormatPropertiesAMD,
        supportsTextureGatherLODBiasAMD
    )
        - 8usize];
};
pub const VkShaderInfoTypeAMD_VK_SHADER_INFO_TYPE_STATISTICS_AMD: VkShaderInfoTypeAMD = 0;
pub const VkShaderInfoTypeAMD_VK_SHADER_INFO_TYPE_BINARY_AMD: VkShaderInfoTypeAMD = 1;
pub const VkShaderInfoTypeAMD_VK_SHADER_INFO_TYPE_DISASSEMBLY_AMD: VkShaderInfoTypeAMD = 2;
pub const VkShaderInfoTypeAMD_VK_SHADER_INFO_TYPE_MAX_ENUM_AMD: VkShaderInfoTypeAMD = 2147483647;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkShaderResourceUsageAMD"]
        [::core::mem::size_of::<VkShaderResourceUsageAMD>() - 20usize];
    ["Alignment of VkShaderResourceUsageAMD"]
        [::core::mem::align_of::<VkShaderResourceUsageAMD>() - 4usize];
    ["Offset of field: VkShaderResourceUsageAMD::numUsedVgprs"]
        [::core::mem::offset_of!(VkShaderResourceUsageAMD, numUsedVgprs) - 0usize];
    ["Offset of field: VkShaderResourceUsageAMD::numUsedSgprs"]
        [::core::mem::offset_of!(VkShaderResourceUsageAMD, numUsedSgprs) - 4usize];
    ["Offset of field: VkShaderResourceUsageAMD::ldsSizePerLocalWorkGroup"]
        [::core::mem::offset_of!(VkShaderResourceUsageAMD, ldsSizePerLocalWorkGroup) - 8usize];
    ["Offset of field: VkShaderResourceUsageAMD::ldsUsageSizeInBytes"]
        [::core::mem::offset_of!(VkShaderResourceUsageAMD, ldsUsageSizeInBytes) - 12usize];
    ["Offset of field: VkShaderResourceUsageAMD::scratchMemUsageInBytes"]
        [::core::mem::offset_of!(VkShaderResourceUsageAMD, scratchMemUsageInBytes) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkShaderStatisticsInfoAMD"]
        [::core::mem::size_of::<VkShaderStatisticsInfoAMD>() - 52usize];
    ["Alignment of VkShaderStatisticsInfoAMD"]
        [::core::mem::align_of::<VkShaderStatisticsInfoAMD>() - 4usize];
    ["Offset of field: VkShaderStatisticsInfoAMD::shaderStageMask"]
        [::core::mem::offset_of!(VkShaderStatisticsInfoAMD, shaderStageMask) - 0usize];
    ["Offset of field: VkShaderStatisticsInfoAMD::resourceUsage"]
        [::core::mem::offset_of!(VkShaderStatisticsInfoAMD, resourceUsage) - 4usize];
    ["Offset of field: VkShaderStatisticsInfoAMD::numPhysicalVgprs"]
        [::core::mem::offset_of!(VkShaderStatisticsInfoAMD, numPhysicalVgprs) - 24usize];
    ["Offset of field: VkShaderStatisticsInfoAMD::numPhysicalSgprs"]
        [::core::mem::offset_of!(VkShaderStatisticsInfoAMD, numPhysicalSgprs) - 28usize];
    ["Offset of field: VkShaderStatisticsInfoAMD::numAvailableVgprs"]
        [::core::mem::offset_of!(VkShaderStatisticsInfoAMD, numAvailableVgprs) - 32usize];
    ["Offset of field: VkShaderStatisticsInfoAMD::numAvailableSgprs"]
        [::core::mem::offset_of!(VkShaderStatisticsInfoAMD, numAvailableSgprs) - 36usize];
    ["Offset of field: VkShaderStatisticsInfoAMD::computeWorkGroupSize"]
        [::core::mem::offset_of!(VkShaderStatisticsInfoAMD, computeWorkGroupSize) - 40usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceCornerSampledImageFeaturesNV"]
        [::core::mem::size_of::<VkPhysicalDeviceCornerSampledImageFeaturesNV>() - 12usize];
    ["Alignment of VkPhysicalDeviceCornerSampledImageFeaturesNV"]
        [::core::mem::align_of::<VkPhysicalDeviceCornerSampledImageFeaturesNV>() - 4usize];
    ["Offset of field: VkPhysicalDeviceCornerSampledImageFeaturesNV::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceCornerSampledImageFeaturesNV, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceCornerSampledImageFeaturesNV::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceCornerSampledImageFeaturesNV, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceCornerSampledImageFeaturesNV::cornerSampledImage"][::core::mem::offset_of!(
        VkPhysicalDeviceCornerSampledImageFeaturesNV,
        cornerSampledImage
    )
        - 8usize];
};
pub const VkExternalMemoryHandleTypeFlagBitsNV_VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV : VkExternalMemoryHandleTypeFlagBitsNV = 1 ;
pub const VkExternalMemoryHandleTypeFlagBitsNV_VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_NV : VkExternalMemoryHandleTypeFlagBitsNV = 2 ;
pub const VkExternalMemoryHandleTypeFlagBitsNV_VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_BIT_NV:
    VkExternalMemoryHandleTypeFlagBitsNV = 4;
pub const VkExternalMemoryHandleTypeFlagBitsNV_VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_KMT_BIT_NV : VkExternalMemoryHandleTypeFlagBitsNV = 8 ;
pub const VkExternalMemoryHandleTypeFlagBitsNV_VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM_NV : VkExternalMemoryHandleTypeFlagBitsNV = 2147483647 ;
pub const VkExternalMemoryFeatureFlagBitsNV_VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_NV:
    VkExternalMemoryFeatureFlagBitsNV = 1;
pub const VkExternalMemoryFeatureFlagBitsNV_VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_NV:
    VkExternalMemoryFeatureFlagBitsNV = 2;
pub const VkExternalMemoryFeatureFlagBitsNV_VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_NV:
    VkExternalMemoryFeatureFlagBitsNV = 4;
pub const VkExternalMemoryFeatureFlagBitsNV_VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM_NV:
    VkExternalMemoryFeatureFlagBitsNV = 2147483647;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkExternalImageFormatPropertiesNV"]
        [::core::mem::size_of::<VkExternalImageFormatPropertiesNV>() - 48usize];
    ["Alignment of VkExternalImageFormatPropertiesNV"]
        [::core::mem::align_of::<VkExternalImageFormatPropertiesNV>() - 8usize];
    ["Offset of field: VkExternalImageFormatPropertiesNV::imageFormatProperties"][::core::mem::offset_of!(
        VkExternalImageFormatPropertiesNV,
        imageFormatProperties
    ) - 0usize];
    ["Offset of field: VkExternalImageFormatPropertiesNV::externalMemoryFeatures"][::core::mem::offset_of!(
        VkExternalImageFormatPropertiesNV,
        externalMemoryFeatures
    ) - 32usize];
    ["Offset of field: VkExternalImageFormatPropertiesNV::exportFromImportedHandleTypes"][::core::mem::offset_of!(
        VkExternalImageFormatPropertiesNV,
        exportFromImportedHandleTypes
    )
        - 36usize];
    ["Offset of field: VkExternalImageFormatPropertiesNV::compatibleHandleTypes"][::core::mem::offset_of!(
        VkExternalImageFormatPropertiesNV,
        compatibleHandleTypes
    ) - 40usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkExternalMemoryImageCreateInfoNV"]
        [::core::mem::size_of::<VkExternalMemoryImageCreateInfoNV>() - 12usize];
    ["Alignment of VkExternalMemoryImageCreateInfoNV"]
        [::core::mem::align_of::<VkExternalMemoryImageCreateInfoNV>() - 4usize];
    ["Offset of field: VkExternalMemoryImageCreateInfoNV::sType"]
        [::core::mem::offset_of!(VkExternalMemoryImageCreateInfoNV, sType) - 0usize];
    ["Offset of field: VkExternalMemoryImageCreateInfoNV::pNext"]
        [::core::mem::offset_of!(VkExternalMemoryImageCreateInfoNV, pNext) - 4usize];
    ["Offset of field: VkExternalMemoryImageCreateInfoNV::handleTypes"]
        [::core::mem::offset_of!(VkExternalMemoryImageCreateInfoNV, handleTypes) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkExportMemoryAllocateInfoNV"]
        [::core::mem::size_of::<VkExportMemoryAllocateInfoNV>() - 12usize];
    ["Alignment of VkExportMemoryAllocateInfoNV"]
        [::core::mem::align_of::<VkExportMemoryAllocateInfoNV>() - 4usize];
    ["Offset of field: VkExportMemoryAllocateInfoNV::sType"]
        [::core::mem::offset_of!(VkExportMemoryAllocateInfoNV, sType) - 0usize];
    ["Offset of field: VkExportMemoryAllocateInfoNV::pNext"]
        [::core::mem::offset_of!(VkExportMemoryAllocateInfoNV, pNext) - 4usize];
    ["Offset of field: VkExportMemoryAllocateInfoNV::handleTypes"]
        [::core::mem::offset_of!(VkExportMemoryAllocateInfoNV, handleTypes) - 8usize];
};
pub const VkValidationCheckEXT_VK_VALIDATION_CHECK_ALL_EXT: VkValidationCheckEXT = 0;
pub const VkValidationCheckEXT_VK_VALIDATION_CHECK_SHADERS_EXT: VkValidationCheckEXT = 1;
pub const VkValidationCheckEXT_VK_VALIDATION_CHECK_MAX_ENUM_EXT: VkValidationCheckEXT = 2147483647;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkValidationFlagsEXT"][::core::mem::size_of::<VkValidationFlagsEXT>() - 16usize];
    ["Alignment of VkValidationFlagsEXT"][::core::mem::align_of::<VkValidationFlagsEXT>() - 4usize];
    ["Offset of field: VkValidationFlagsEXT::sType"]
        [::core::mem::offset_of!(VkValidationFlagsEXT, sType) - 0usize];
    ["Offset of field: VkValidationFlagsEXT::pNext"]
        [::core::mem::offset_of!(VkValidationFlagsEXT, pNext) - 4usize];
    ["Offset of field: VkValidationFlagsEXT::disabledValidationCheckCount"]
        [::core::mem::offset_of!(VkValidationFlagsEXT, disabledValidationCheckCount) - 8usize];
    ["Offset of field: VkValidationFlagsEXT::pDisabledValidationChecks"]
        [::core::mem::offset_of!(VkValidationFlagsEXT, pDisabledValidationChecks) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkImageViewASTCDecodeModeEXT"]
        [::core::mem::size_of::<VkImageViewASTCDecodeModeEXT>() - 12usize];
    ["Alignment of VkImageViewASTCDecodeModeEXT"]
        [::core::mem::align_of::<VkImageViewASTCDecodeModeEXT>() - 4usize];
    ["Offset of field: VkImageViewASTCDecodeModeEXT::sType"]
        [::core::mem::offset_of!(VkImageViewASTCDecodeModeEXT, sType) - 0usize];
    ["Offset of field: VkImageViewASTCDecodeModeEXT::pNext"]
        [::core::mem::offset_of!(VkImageViewASTCDecodeModeEXT, pNext) - 4usize];
    ["Offset of field: VkImageViewASTCDecodeModeEXT::decodeMode"]
        [::core::mem::offset_of!(VkImageViewASTCDecodeModeEXT, decodeMode) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceASTCDecodeFeaturesEXT"]
        [::core::mem::size_of::<VkPhysicalDeviceASTCDecodeFeaturesEXT>() - 12usize];
    ["Alignment of VkPhysicalDeviceASTCDecodeFeaturesEXT"]
        [::core::mem::align_of::<VkPhysicalDeviceASTCDecodeFeaturesEXT>() - 4usize];
    ["Offset of field: VkPhysicalDeviceASTCDecodeFeaturesEXT::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceASTCDecodeFeaturesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceASTCDecodeFeaturesEXT::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceASTCDecodeFeaturesEXT, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceASTCDecodeFeaturesEXT::decodeModeSharedExponent"][::core::mem::offset_of!(
        VkPhysicalDeviceASTCDecodeFeaturesEXT,
        decodeModeSharedExponent
    )
        - 8usize];
};
pub const VkConditionalRenderingFlagBitsEXT_VK_CONDITIONAL_RENDERING_INVERTED_BIT_EXT:
    VkConditionalRenderingFlagBitsEXT = 1;
pub const VkConditionalRenderingFlagBitsEXT_VK_CONDITIONAL_RENDERING_FLAG_BITS_MAX_ENUM_EXT:
    VkConditionalRenderingFlagBitsEXT = 2147483647;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkConditionalRenderingBeginInfoEXT"]
        [::core::mem::size_of::<VkConditionalRenderingBeginInfoEXT>() - 32usize];
    ["Alignment of VkConditionalRenderingBeginInfoEXT"]
        [::core::mem::align_of::<VkConditionalRenderingBeginInfoEXT>() - 8usize];
    ["Offset of field: VkConditionalRenderingBeginInfoEXT::sType"]
        [::core::mem::offset_of!(VkConditionalRenderingBeginInfoEXT, sType) - 0usize];
    ["Offset of field: VkConditionalRenderingBeginInfoEXT::pNext"]
        [::core::mem::offset_of!(VkConditionalRenderingBeginInfoEXT, pNext) - 4usize];
    ["Offset of field: VkConditionalRenderingBeginInfoEXT::buffer"]
        [::core::mem::offset_of!(VkConditionalRenderingBeginInfoEXT, buffer) - 8usize];
    ["Offset of field: VkConditionalRenderingBeginInfoEXT::offset"]
        [::core::mem::offset_of!(VkConditionalRenderingBeginInfoEXT, offset) - 16usize];
    ["Offset of field: VkConditionalRenderingBeginInfoEXT::flags"]
        [::core::mem::offset_of!(VkConditionalRenderingBeginInfoEXT, flags) - 24usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceConditionalRenderingFeaturesEXT"]
        [::core::mem::size_of::<VkPhysicalDeviceConditionalRenderingFeaturesEXT>() - 16usize];
    ["Alignment of VkPhysicalDeviceConditionalRenderingFeaturesEXT"]
        [::core::mem::align_of::<VkPhysicalDeviceConditionalRenderingFeaturesEXT>() - 4usize];
    ["Offset of field: VkPhysicalDeviceConditionalRenderingFeaturesEXT::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceConditionalRenderingFeaturesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceConditionalRenderingFeaturesEXT::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceConditionalRenderingFeaturesEXT, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceConditionalRenderingFeaturesEXT::conditionalRendering"][::core::mem::offset_of!(
        VkPhysicalDeviceConditionalRenderingFeaturesEXT,
        conditionalRendering
    )
        - 8usize];
    ["Offset of field: VkPhysicalDeviceConditionalRenderingFeaturesEXT::inheritedConditionalRendering"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceConditionalRenderingFeaturesEXT , inheritedConditionalRendering) - 12usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkCommandBufferInheritanceConditionalRenderingInfoEXT"]
        [::core::mem::size_of::<VkCommandBufferInheritanceConditionalRenderingInfoEXT>() - 12usize];
    ["Alignment of VkCommandBufferInheritanceConditionalRenderingInfoEXT"]
        [::core::mem::align_of::<VkCommandBufferInheritanceConditionalRenderingInfoEXT>() - 4usize];
    ["Offset of field: VkCommandBufferInheritanceConditionalRenderingInfoEXT::sType"][::core::mem::offset_of!(
        VkCommandBufferInheritanceConditionalRenderingInfoEXT,
        sType
    ) - 0usize];
    ["Offset of field: VkCommandBufferInheritanceConditionalRenderingInfoEXT::pNext"][::core::mem::offset_of!(
        VkCommandBufferInheritanceConditionalRenderingInfoEXT,
        pNext
    ) - 4usize];
    ["Offset of field: VkCommandBufferInheritanceConditionalRenderingInfoEXT::conditionalRenderingEnable"] [:: core :: mem :: offset_of ! (VkCommandBufferInheritanceConditionalRenderingInfoEXT , conditionalRenderingEnable) - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkViewportWScalingNV"][::core::mem::size_of::<VkViewportWScalingNV>() - 8usize];
    ["Alignment of VkViewportWScalingNV"][::core::mem::align_of::<VkViewportWScalingNV>() - 4usize];
    ["Offset of field: VkViewportWScalingNV::xcoeff"]
        [::core::mem::offset_of!(VkViewportWScalingNV, xcoeff) - 0usize];
    ["Offset of field: VkViewportWScalingNV::ycoeff"]
        [::core::mem::offset_of!(VkViewportWScalingNV, ycoeff) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineViewportWScalingStateCreateInfoNV"]
        [::core::mem::size_of::<VkPipelineViewportWScalingStateCreateInfoNV>() - 20usize];
    ["Alignment of VkPipelineViewportWScalingStateCreateInfoNV"]
        [::core::mem::align_of::<VkPipelineViewportWScalingStateCreateInfoNV>() - 4usize];
    ["Offset of field: VkPipelineViewportWScalingStateCreateInfoNV::sType"]
        [::core::mem::offset_of!(VkPipelineViewportWScalingStateCreateInfoNV, sType) - 0usize];
    ["Offset of field: VkPipelineViewportWScalingStateCreateInfoNV::pNext"]
        [::core::mem::offset_of!(VkPipelineViewportWScalingStateCreateInfoNV, pNext) - 4usize];
    ["Offset of field: VkPipelineViewportWScalingStateCreateInfoNV::viewportWScalingEnable"][::core::mem::offset_of!(
        VkPipelineViewportWScalingStateCreateInfoNV,
        viewportWScalingEnable
    )
        - 8usize];
    ["Offset of field: VkPipelineViewportWScalingStateCreateInfoNV::viewportCount"][::core::mem::offset_of!(
        VkPipelineViewportWScalingStateCreateInfoNV,
        viewportCount
    ) - 12usize];
    ["Offset of field: VkPipelineViewportWScalingStateCreateInfoNV::pViewportWScalings"][::core::mem::offset_of!(
        VkPipelineViewportWScalingStateCreateInfoNV,
        pViewportWScalings
    )
        - 16usize];
};
pub const VkSurfaceCounterFlagBitsEXT_VK_SURFACE_COUNTER_VBLANK_BIT_EXT:
    VkSurfaceCounterFlagBitsEXT = 1;
#[doc = " VK_SURFACE_COUNTER_VBLANK_EXT is a deprecated alias"]
pub const VkSurfaceCounterFlagBitsEXT_VK_SURFACE_COUNTER_VBLANK_EXT: VkSurfaceCounterFlagBitsEXT =
    1;
#[doc = " VK_SURFACE_COUNTER_VBLANK_EXT is a deprecated alias"]
pub const VkSurfaceCounterFlagBitsEXT_VK_SURFACE_COUNTER_FLAG_BITS_MAX_ENUM_EXT:
    VkSurfaceCounterFlagBitsEXT = 2147483647;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSurfaceCapabilities2EXT"]
        [::core::mem::size_of::<VkSurfaceCapabilities2EXT>() - 64usize];
    ["Alignment of VkSurfaceCapabilities2EXT"]
        [::core::mem::align_of::<VkSurfaceCapabilities2EXT>() - 4usize];
    ["Offset of field: VkSurfaceCapabilities2EXT::sType"]
        [::core::mem::offset_of!(VkSurfaceCapabilities2EXT, sType) - 0usize];
    ["Offset of field: VkSurfaceCapabilities2EXT::pNext"]
        [::core::mem::offset_of!(VkSurfaceCapabilities2EXT, pNext) - 4usize];
    ["Offset of field: VkSurfaceCapabilities2EXT::minImageCount"]
        [::core::mem::offset_of!(VkSurfaceCapabilities2EXT, minImageCount) - 8usize];
    ["Offset of field: VkSurfaceCapabilities2EXT::maxImageCount"]
        [::core::mem::offset_of!(VkSurfaceCapabilities2EXT, maxImageCount) - 12usize];
    ["Offset of field: VkSurfaceCapabilities2EXT::currentExtent"]
        [::core::mem::offset_of!(VkSurfaceCapabilities2EXT, currentExtent) - 16usize];
    ["Offset of field: VkSurfaceCapabilities2EXT::minImageExtent"]
        [::core::mem::offset_of!(VkSurfaceCapabilities2EXT, minImageExtent) - 24usize];
    ["Offset of field: VkSurfaceCapabilities2EXT::maxImageExtent"]
        [::core::mem::offset_of!(VkSurfaceCapabilities2EXT, maxImageExtent) - 32usize];
    ["Offset of field: VkSurfaceCapabilities2EXT::maxImageArrayLayers"]
        [::core::mem::offset_of!(VkSurfaceCapabilities2EXT, maxImageArrayLayers) - 40usize];
    ["Offset of field: VkSurfaceCapabilities2EXT::supportedTransforms"]
        [::core::mem::offset_of!(VkSurfaceCapabilities2EXT, supportedTransforms) - 44usize];
    ["Offset of field: VkSurfaceCapabilities2EXT::currentTransform"]
        [::core::mem::offset_of!(VkSurfaceCapabilities2EXT, currentTransform) - 48usize];
    ["Offset of field: VkSurfaceCapabilities2EXT::supportedCompositeAlpha"]
        [::core::mem::offset_of!(VkSurfaceCapabilities2EXT, supportedCompositeAlpha) - 52usize];
    ["Offset of field: VkSurfaceCapabilities2EXT::supportedUsageFlags"]
        [::core::mem::offset_of!(VkSurfaceCapabilities2EXT, supportedUsageFlags) - 56usize];
    ["Offset of field: VkSurfaceCapabilities2EXT::supportedSurfaceCounters"]
        [::core::mem::offset_of!(VkSurfaceCapabilities2EXT, supportedSurfaceCounters) - 60usize];
};
pub const VkDisplayPowerStateEXT_VK_DISPLAY_POWER_STATE_OFF_EXT: VkDisplayPowerStateEXT = 0;
pub const VkDisplayPowerStateEXT_VK_DISPLAY_POWER_STATE_SUSPEND_EXT: VkDisplayPowerStateEXT = 1;
pub const VkDisplayPowerStateEXT_VK_DISPLAY_POWER_STATE_ON_EXT: VkDisplayPowerStateEXT = 2;
pub const VkDisplayPowerStateEXT_VK_DISPLAY_POWER_STATE_MAX_ENUM_EXT: VkDisplayPowerStateEXT =
    2147483647;
pub const VkDeviceEventTypeEXT_VK_DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT: VkDeviceEventTypeEXT = 0;
pub const VkDeviceEventTypeEXT_VK_DEVICE_EVENT_TYPE_MAX_ENUM_EXT: VkDeviceEventTypeEXT = 2147483647;
pub const VkDisplayEventTypeEXT_VK_DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT: VkDisplayEventTypeEXT =
    0;
pub const VkDisplayEventTypeEXT_VK_DISPLAY_EVENT_TYPE_MAX_ENUM_EXT: VkDisplayEventTypeEXT =
    2147483647;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDisplayPowerInfoEXT"][::core::mem::size_of::<VkDisplayPowerInfoEXT>() - 12usize];
    ["Alignment of VkDisplayPowerInfoEXT"]
        [::core::mem::align_of::<VkDisplayPowerInfoEXT>() - 4usize];
    ["Offset of field: VkDisplayPowerInfoEXT::sType"]
        [::core::mem::offset_of!(VkDisplayPowerInfoEXT, sType) - 0usize];
    ["Offset of field: VkDisplayPowerInfoEXT::pNext"]
        [::core::mem::offset_of!(VkDisplayPowerInfoEXT, pNext) - 4usize];
    ["Offset of field: VkDisplayPowerInfoEXT::powerState"]
        [::core::mem::offset_of!(VkDisplayPowerInfoEXT, powerState) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDeviceEventInfoEXT"][::core::mem::size_of::<VkDeviceEventInfoEXT>() - 12usize];
    ["Alignment of VkDeviceEventInfoEXT"][::core::mem::align_of::<VkDeviceEventInfoEXT>() - 4usize];
    ["Offset of field: VkDeviceEventInfoEXT::sType"]
        [::core::mem::offset_of!(VkDeviceEventInfoEXT, sType) - 0usize];
    ["Offset of field: VkDeviceEventInfoEXT::pNext"]
        [::core::mem::offset_of!(VkDeviceEventInfoEXT, pNext) - 4usize];
    ["Offset of field: VkDeviceEventInfoEXT::deviceEvent"]
        [::core::mem::offset_of!(VkDeviceEventInfoEXT, deviceEvent) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDisplayEventInfoEXT"][::core::mem::size_of::<VkDisplayEventInfoEXT>() - 12usize];
    ["Alignment of VkDisplayEventInfoEXT"]
        [::core::mem::align_of::<VkDisplayEventInfoEXT>() - 4usize];
    ["Offset of field: VkDisplayEventInfoEXT::sType"]
        [::core::mem::offset_of!(VkDisplayEventInfoEXT, sType) - 0usize];
    ["Offset of field: VkDisplayEventInfoEXT::pNext"]
        [::core::mem::offset_of!(VkDisplayEventInfoEXT, pNext) - 4usize];
    ["Offset of field: VkDisplayEventInfoEXT::displayEvent"]
        [::core::mem::offset_of!(VkDisplayEventInfoEXT, displayEvent) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSwapchainCounterCreateInfoEXT"]
        [::core::mem::size_of::<VkSwapchainCounterCreateInfoEXT>() - 12usize];
    ["Alignment of VkSwapchainCounterCreateInfoEXT"]
        [::core::mem::align_of::<VkSwapchainCounterCreateInfoEXT>() - 4usize];
    ["Offset of field: VkSwapchainCounterCreateInfoEXT::sType"]
        [::core::mem::offset_of!(VkSwapchainCounterCreateInfoEXT, sType) - 0usize];
    ["Offset of field: VkSwapchainCounterCreateInfoEXT::pNext"]
        [::core::mem::offset_of!(VkSwapchainCounterCreateInfoEXT, pNext) - 4usize];
    ["Offset of field: VkSwapchainCounterCreateInfoEXT::surfaceCounters"]
        [::core::mem::offset_of!(VkSwapchainCounterCreateInfoEXT, surfaceCounters) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkRefreshCycleDurationGOOGLE"]
        [::core::mem::size_of::<VkRefreshCycleDurationGOOGLE>() - 8usize];
    ["Alignment of VkRefreshCycleDurationGOOGLE"]
        [::core::mem::align_of::<VkRefreshCycleDurationGOOGLE>() - 8usize];
    ["Offset of field: VkRefreshCycleDurationGOOGLE::refreshDuration"]
        [::core::mem::offset_of!(VkRefreshCycleDurationGOOGLE, refreshDuration) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPastPresentationTimingGOOGLE"]
        [::core::mem::size_of::<VkPastPresentationTimingGOOGLE>() - 40usize];
    ["Alignment of VkPastPresentationTimingGOOGLE"]
        [::core::mem::align_of::<VkPastPresentationTimingGOOGLE>() - 8usize];
    ["Offset of field: VkPastPresentationTimingGOOGLE::presentID"]
        [::core::mem::offset_of!(VkPastPresentationTimingGOOGLE, presentID) - 0usize];
    ["Offset of field: VkPastPresentationTimingGOOGLE::desiredPresentTime"]
        [::core::mem::offset_of!(VkPastPresentationTimingGOOGLE, desiredPresentTime) - 8usize];
    ["Offset of field: VkPastPresentationTimingGOOGLE::actualPresentTime"]
        [::core::mem::offset_of!(VkPastPresentationTimingGOOGLE, actualPresentTime) - 16usize];
    ["Offset of field: VkPastPresentationTimingGOOGLE::earliestPresentTime"]
        [::core::mem::offset_of!(VkPastPresentationTimingGOOGLE, earliestPresentTime) - 24usize];
    ["Offset of field: VkPastPresentationTimingGOOGLE::presentMargin"]
        [::core::mem::offset_of!(VkPastPresentationTimingGOOGLE, presentMargin) - 32usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPresentTimeGOOGLE"][::core::mem::size_of::<VkPresentTimeGOOGLE>() - 16usize];
    ["Alignment of VkPresentTimeGOOGLE"][::core::mem::align_of::<VkPresentTimeGOOGLE>() - 8usize];
    ["Offset of field: VkPresentTimeGOOGLE::presentID"]
        [::core::mem::offset_of!(VkPresentTimeGOOGLE, presentID) - 0usize];
    ["Offset of field: VkPresentTimeGOOGLE::desiredPresentTime"]
        [::core::mem::offset_of!(VkPresentTimeGOOGLE, desiredPresentTime) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPresentTimesInfoGOOGLE"]
        [::core::mem::size_of::<VkPresentTimesInfoGOOGLE>() - 16usize];
    ["Alignment of VkPresentTimesInfoGOOGLE"]
        [::core::mem::align_of::<VkPresentTimesInfoGOOGLE>() - 4usize];
    ["Offset of field: VkPresentTimesInfoGOOGLE::sType"]
        [::core::mem::offset_of!(VkPresentTimesInfoGOOGLE, sType) - 0usize];
    ["Offset of field: VkPresentTimesInfoGOOGLE::pNext"]
        [::core::mem::offset_of!(VkPresentTimesInfoGOOGLE, pNext) - 4usize];
    ["Offset of field: VkPresentTimesInfoGOOGLE::swapchainCount"]
        [::core::mem::offset_of!(VkPresentTimesInfoGOOGLE, swapchainCount) - 8usize];
    ["Offset of field: VkPresentTimesInfoGOOGLE::pTimes"]
        [::core::mem::offset_of!(VkPresentTimesInfoGOOGLE, pTimes) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX"][::core::mem::size_of::<
        VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX,
    >() - 12usize];
    ["Alignment of VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX"][::core::mem::align_of::<
        VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX,
    >() - 4usize];
    ["Offset of field: VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX::sType"][::core::mem::offset_of!(
        VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX::pNext"][::core::mem::offset_of!(
        VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX,
        pNext
    ) - 4usize];
    ["Offset of field: VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX::perViewPositionAllComponents"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX , perViewPositionAllComponents) - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkMultiviewPerViewAttributesInfoNVX"]
        [::core::mem::size_of::<VkMultiviewPerViewAttributesInfoNVX>() - 16usize];
    ["Alignment of VkMultiviewPerViewAttributesInfoNVX"]
        [::core::mem::align_of::<VkMultiviewPerViewAttributesInfoNVX>() - 4usize];
    ["Offset of field: VkMultiviewPerViewAttributesInfoNVX::sType"]
        [::core::mem::offset_of!(VkMultiviewPerViewAttributesInfoNVX, sType) - 0usize];
    ["Offset of field: VkMultiviewPerViewAttributesInfoNVX::pNext"]
        [::core::mem::offset_of!(VkMultiviewPerViewAttributesInfoNVX, pNext) - 4usize];
    ["Offset of field: VkMultiviewPerViewAttributesInfoNVX::perViewAttributes"]
        [::core::mem::offset_of!(VkMultiviewPerViewAttributesInfoNVX, perViewAttributes) - 8usize];
    ["Offset of field: VkMultiviewPerViewAttributesInfoNVX::perViewAttributesPositionXOnly"][::core::mem::offset_of!(
        VkMultiviewPerViewAttributesInfoNVX,
        perViewAttributesPositionXOnly
    )
        - 12usize];
};
pub const VkViewportCoordinateSwizzleNV_VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV:
    VkViewportCoordinateSwizzleNV = 0;
pub const VkViewportCoordinateSwizzleNV_VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_X_NV:
    VkViewportCoordinateSwizzleNV = 1;
pub const VkViewportCoordinateSwizzleNV_VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Y_NV:
    VkViewportCoordinateSwizzleNV = 2;
pub const VkViewportCoordinateSwizzleNV_VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Y_NV:
    VkViewportCoordinateSwizzleNV = 3;
pub const VkViewportCoordinateSwizzleNV_VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Z_NV:
    VkViewportCoordinateSwizzleNV = 4;
pub const VkViewportCoordinateSwizzleNV_VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Z_NV:
    VkViewportCoordinateSwizzleNV = 5;
pub const VkViewportCoordinateSwizzleNV_VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_W_NV:
    VkViewportCoordinateSwizzleNV = 6;
pub const VkViewportCoordinateSwizzleNV_VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV:
    VkViewportCoordinateSwizzleNV = 7;
pub const VkViewportCoordinateSwizzleNV_VK_VIEWPORT_COORDINATE_SWIZZLE_MAX_ENUM_NV:
    VkViewportCoordinateSwizzleNV = 2147483647;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkViewportSwizzleNV"][::core::mem::size_of::<VkViewportSwizzleNV>() - 16usize];
    ["Alignment of VkViewportSwizzleNV"][::core::mem::align_of::<VkViewportSwizzleNV>() - 4usize];
    ["Offset of field: VkViewportSwizzleNV::x"]
        [::core::mem::offset_of!(VkViewportSwizzleNV, x) - 0usize];
    ["Offset of field: VkViewportSwizzleNV::y"]
        [::core::mem::offset_of!(VkViewportSwizzleNV, y) - 4usize];
    ["Offset of field: VkViewportSwizzleNV::z"]
        [::core::mem::offset_of!(VkViewportSwizzleNV, z) - 8usize];
    ["Offset of field: VkViewportSwizzleNV::w"]
        [::core::mem::offset_of!(VkViewportSwizzleNV, w) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineViewportSwizzleStateCreateInfoNV"]
        [::core::mem::size_of::<VkPipelineViewportSwizzleStateCreateInfoNV>() - 20usize];
    ["Alignment of VkPipelineViewportSwizzleStateCreateInfoNV"]
        [::core::mem::align_of::<VkPipelineViewportSwizzleStateCreateInfoNV>() - 4usize];
    ["Offset of field: VkPipelineViewportSwizzleStateCreateInfoNV::sType"]
        [::core::mem::offset_of!(VkPipelineViewportSwizzleStateCreateInfoNV, sType) - 0usize];
    ["Offset of field: VkPipelineViewportSwizzleStateCreateInfoNV::pNext"]
        [::core::mem::offset_of!(VkPipelineViewportSwizzleStateCreateInfoNV, pNext) - 4usize];
    ["Offset of field: VkPipelineViewportSwizzleStateCreateInfoNV::flags"]
        [::core::mem::offset_of!(VkPipelineViewportSwizzleStateCreateInfoNV, flags) - 8usize];
    ["Offset of field: VkPipelineViewportSwizzleStateCreateInfoNV::viewportCount"][::core::mem::offset_of!(
        VkPipelineViewportSwizzleStateCreateInfoNV,
        viewportCount
    ) - 12usize];
    ["Offset of field: VkPipelineViewportSwizzleStateCreateInfoNV::pViewportSwizzles"][::core::mem::offset_of!(
        VkPipelineViewportSwizzleStateCreateInfoNV,
        pViewportSwizzles
    ) - 16usize];
};
pub const VkDiscardRectangleModeEXT_VK_DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT:
    VkDiscardRectangleModeEXT = 0;
pub const VkDiscardRectangleModeEXT_VK_DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT:
    VkDiscardRectangleModeEXT = 1;
pub const VkDiscardRectangleModeEXT_VK_DISCARD_RECTANGLE_MODE_MAX_ENUM_EXT:
    VkDiscardRectangleModeEXT = 2147483647;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceDiscardRectanglePropertiesEXT"]
        [::core::mem::size_of::<VkPhysicalDeviceDiscardRectanglePropertiesEXT>() - 12usize];
    ["Alignment of VkPhysicalDeviceDiscardRectanglePropertiesEXT"]
        [::core::mem::align_of::<VkPhysicalDeviceDiscardRectanglePropertiesEXT>() - 4usize];
    ["Offset of field: VkPhysicalDeviceDiscardRectanglePropertiesEXT::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceDiscardRectanglePropertiesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceDiscardRectanglePropertiesEXT::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceDiscardRectanglePropertiesEXT, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceDiscardRectanglePropertiesEXT::maxDiscardRectangles"][::core::mem::offset_of!(
        VkPhysicalDeviceDiscardRectanglePropertiesEXT,
        maxDiscardRectangles
    )
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineDiscardRectangleStateCreateInfoEXT"]
        [::core::mem::size_of::<VkPipelineDiscardRectangleStateCreateInfoEXT>() - 24usize];
    ["Alignment of VkPipelineDiscardRectangleStateCreateInfoEXT"]
        [::core::mem::align_of::<VkPipelineDiscardRectangleStateCreateInfoEXT>() - 4usize];
    ["Offset of field: VkPipelineDiscardRectangleStateCreateInfoEXT::sType"]
        [::core::mem::offset_of!(VkPipelineDiscardRectangleStateCreateInfoEXT, sType) - 0usize];
    ["Offset of field: VkPipelineDiscardRectangleStateCreateInfoEXT::pNext"]
        [::core::mem::offset_of!(VkPipelineDiscardRectangleStateCreateInfoEXT, pNext) - 4usize];
    ["Offset of field: VkPipelineDiscardRectangleStateCreateInfoEXT::flags"]
        [::core::mem::offset_of!(VkPipelineDiscardRectangleStateCreateInfoEXT, flags) - 8usize];
    ["Offset of field: VkPipelineDiscardRectangleStateCreateInfoEXT::discardRectangleMode"][::core::mem::offset_of!(
        VkPipelineDiscardRectangleStateCreateInfoEXT,
        discardRectangleMode
    )
        - 12usize];
    ["Offset of field: VkPipelineDiscardRectangleStateCreateInfoEXT::discardRectangleCount"][::core::mem::offset_of!(
        VkPipelineDiscardRectangleStateCreateInfoEXT,
        discardRectangleCount
    )
        - 16usize];
    ["Offset of field: VkPipelineDiscardRectangleStateCreateInfoEXT::pDiscardRectangles"][::core::mem::offset_of!(
        VkPipelineDiscardRectangleStateCreateInfoEXT,
        pDiscardRectangles
    )
        - 20usize];
};
pub const VkConservativeRasterizationModeEXT_VK_CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT:
    VkConservativeRasterizationModeEXT = 0;
pub const VkConservativeRasterizationModeEXT_VK_CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT:
    VkConservativeRasterizationModeEXT = 1;
pub const VkConservativeRasterizationModeEXT_VK_CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT : VkConservativeRasterizationModeEXT = 2 ;
pub const VkConservativeRasterizationModeEXT_VK_CONSERVATIVE_RASTERIZATION_MODE_MAX_ENUM_EXT:
    VkConservativeRasterizationModeEXT = 2147483647;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceConservativeRasterizationPropertiesEXT"][::core::mem::size_of::<
        VkPhysicalDeviceConservativeRasterizationPropertiesEXT,
    >() - 44usize];
    ["Alignment of VkPhysicalDeviceConservativeRasterizationPropertiesEXT"][::core::mem::align_of::<
        VkPhysicalDeviceConservativeRasterizationPropertiesEXT,
    >() - 4usize];
    ["Offset of field: VkPhysicalDeviceConservativeRasterizationPropertiesEXT::sType"][::core::mem::offset_of!(
        VkPhysicalDeviceConservativeRasterizationPropertiesEXT,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceConservativeRasterizationPropertiesEXT::pNext"][::core::mem::offset_of!(
        VkPhysicalDeviceConservativeRasterizationPropertiesEXT,
        pNext
    ) - 4usize];
    ["Offset of field: VkPhysicalDeviceConservativeRasterizationPropertiesEXT::primitiveOverestimationSize"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceConservativeRasterizationPropertiesEXT , primitiveOverestimationSize) - 8usize] ;
    ["Offset of field: VkPhysicalDeviceConservativeRasterizationPropertiesEXT::maxExtraPrimitiveOverestimationSize"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceConservativeRasterizationPropertiesEXT , maxExtraPrimitiveOverestimationSize) - 12usize] ;
    ["Offset of field: VkPhysicalDeviceConservativeRasterizationPropertiesEXT::extraPrimitiveOverestimationSizeGranularity"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceConservativeRasterizationPropertiesEXT , extraPrimitiveOverestimationSizeGranularity) - 16usize] ;
    ["Offset of field: VkPhysicalDeviceConservativeRasterizationPropertiesEXT::primitiveUnderestimation"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceConservativeRasterizationPropertiesEXT , primitiveUnderestimation) - 20usize] ;
    ["Offset of field: VkPhysicalDeviceConservativeRasterizationPropertiesEXT::conservativePointAndLineRasterization"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceConservativeRasterizationPropertiesEXT , conservativePointAndLineRasterization) - 24usize] ;
    ["Offset of field: VkPhysicalDeviceConservativeRasterizationPropertiesEXT::degenerateTrianglesRasterized"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceConservativeRasterizationPropertiesEXT , degenerateTrianglesRasterized) - 28usize] ;
    ["Offset of field: VkPhysicalDeviceConservativeRasterizationPropertiesEXT::degenerateLinesRasterized"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceConservativeRasterizationPropertiesEXT , degenerateLinesRasterized) - 32usize] ;
    ["Offset of field: VkPhysicalDeviceConservativeRasterizationPropertiesEXT::fullyCoveredFragmentShaderInputVariable"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceConservativeRasterizationPropertiesEXT , fullyCoveredFragmentShaderInputVariable) - 36usize] ;
    ["Offset of field: VkPhysicalDeviceConservativeRasterizationPropertiesEXT::conservativeRasterizationPostDepthCoverage"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceConservativeRasterizationPropertiesEXT , conservativeRasterizationPostDepthCoverage) - 40usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineRasterizationConservativeStateCreateInfoEXT"]
        [::core::mem::size_of::<VkPipelineRasterizationConservativeStateCreateInfoEXT>() - 20usize];
    ["Alignment of VkPipelineRasterizationConservativeStateCreateInfoEXT"]
        [::core::mem::align_of::<VkPipelineRasterizationConservativeStateCreateInfoEXT>() - 4usize];
    ["Offset of field: VkPipelineRasterizationConservativeStateCreateInfoEXT::sType"][::core::mem::offset_of!(
        VkPipelineRasterizationConservativeStateCreateInfoEXT,
        sType
    ) - 0usize];
    ["Offset of field: VkPipelineRasterizationConservativeStateCreateInfoEXT::pNext"][::core::mem::offset_of!(
        VkPipelineRasterizationConservativeStateCreateInfoEXT,
        pNext
    ) - 4usize];
    ["Offset of field: VkPipelineRasterizationConservativeStateCreateInfoEXT::flags"][::core::mem::offset_of!(
        VkPipelineRasterizationConservativeStateCreateInfoEXT,
        flags
    ) - 8usize];
    ["Offset of field: VkPipelineRasterizationConservativeStateCreateInfoEXT::conservativeRasterizationMode"] [:: core :: mem :: offset_of ! (VkPipelineRasterizationConservativeStateCreateInfoEXT , conservativeRasterizationMode) - 12usize] ;
    ["Offset of field: VkPipelineRasterizationConservativeStateCreateInfoEXT::extraPrimitiveOverestimationSize"] [:: core :: mem :: offset_of ! (VkPipelineRasterizationConservativeStateCreateInfoEXT , extraPrimitiveOverestimationSize) - 16usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceDepthClipEnableFeaturesEXT"]
        [::core::mem::size_of::<VkPhysicalDeviceDepthClipEnableFeaturesEXT>() - 12usize];
    ["Alignment of VkPhysicalDeviceDepthClipEnableFeaturesEXT"]
        [::core::mem::align_of::<VkPhysicalDeviceDepthClipEnableFeaturesEXT>() - 4usize];
    ["Offset of field: VkPhysicalDeviceDepthClipEnableFeaturesEXT::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceDepthClipEnableFeaturesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceDepthClipEnableFeaturesEXT::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceDepthClipEnableFeaturesEXT, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceDepthClipEnableFeaturesEXT::depthClipEnable"][::core::mem::offset_of!(
        VkPhysicalDeviceDepthClipEnableFeaturesEXT,
        depthClipEnable
    ) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineRasterizationDepthClipStateCreateInfoEXT"]
        [::core::mem::size_of::<VkPipelineRasterizationDepthClipStateCreateInfoEXT>() - 16usize];
    ["Alignment of VkPipelineRasterizationDepthClipStateCreateInfoEXT"]
        [::core::mem::align_of::<VkPipelineRasterizationDepthClipStateCreateInfoEXT>() - 4usize];
    ["Offset of field: VkPipelineRasterizationDepthClipStateCreateInfoEXT::sType"][::core::mem::offset_of!(
        VkPipelineRasterizationDepthClipStateCreateInfoEXT,
        sType
    ) - 0usize];
    ["Offset of field: VkPipelineRasterizationDepthClipStateCreateInfoEXT::pNext"][::core::mem::offset_of!(
        VkPipelineRasterizationDepthClipStateCreateInfoEXT,
        pNext
    ) - 4usize];
    ["Offset of field: VkPipelineRasterizationDepthClipStateCreateInfoEXT::flags"][::core::mem::offset_of!(
        VkPipelineRasterizationDepthClipStateCreateInfoEXT,
        flags
    ) - 8usize];
    ["Offset of field: VkPipelineRasterizationDepthClipStateCreateInfoEXT::depthClipEnable"][::core::mem::offset_of!(
        VkPipelineRasterizationDepthClipStateCreateInfoEXT,
        depthClipEnable
    )
        - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkXYColorEXT"][::core::mem::size_of::<VkXYColorEXT>() - 8usize];
    ["Alignment of VkXYColorEXT"][::core::mem::align_of::<VkXYColorEXT>() - 4usize];
    ["Offset of field: VkXYColorEXT::x"][::core::mem::offset_of!(VkXYColorEXT, x) - 0usize];
    ["Offset of field: VkXYColorEXT::y"][::core::mem::offset_of!(VkXYColorEXT, y) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkHdrMetadataEXT"][::core::mem::size_of::<VkHdrMetadataEXT>() - 56usize];
    ["Alignment of VkHdrMetadataEXT"][::core::mem::align_of::<VkHdrMetadataEXT>() - 4usize];
    ["Offset of field: VkHdrMetadataEXT::sType"]
        [::core::mem::offset_of!(VkHdrMetadataEXT, sType) - 0usize];
    ["Offset of field: VkHdrMetadataEXT::pNext"]
        [::core::mem::offset_of!(VkHdrMetadataEXT, pNext) - 4usize];
    ["Offset of field: VkHdrMetadataEXT::displayPrimaryRed"]
        [::core::mem::offset_of!(VkHdrMetadataEXT, displayPrimaryRed) - 8usize];
    ["Offset of field: VkHdrMetadataEXT::displayPrimaryGreen"]
        [::core::mem::offset_of!(VkHdrMetadataEXT, displayPrimaryGreen) - 16usize];
    ["Offset of field: VkHdrMetadataEXT::displayPrimaryBlue"]
        [::core::mem::offset_of!(VkHdrMetadataEXT, displayPrimaryBlue) - 24usize];
    ["Offset of field: VkHdrMetadataEXT::whitePoint"]
        [::core::mem::offset_of!(VkHdrMetadataEXT, whitePoint) - 32usize];
    ["Offset of field: VkHdrMetadataEXT::maxLuminance"]
        [::core::mem::offset_of!(VkHdrMetadataEXT, maxLuminance) - 40usize];
    ["Offset of field: VkHdrMetadataEXT::minLuminance"]
        [::core::mem::offset_of!(VkHdrMetadataEXT, minLuminance) - 44usize];
    ["Offset of field: VkHdrMetadataEXT::maxContentLightLevel"]
        [::core::mem::offset_of!(VkHdrMetadataEXT, maxContentLightLevel) - 48usize];
    ["Offset of field: VkHdrMetadataEXT::maxFrameAverageLightLevel"]
        [::core::mem::offset_of!(VkHdrMetadataEXT, maxFrameAverageLightLevel) - 52usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG"]
        [::core::mem::size_of::<VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG>() - 12usize];
    ["Alignment of VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG"]
        [::core::mem::align_of::<VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG>() - 4usize];
    ["Offset of field: VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG::sType"][::core::mem::offset_of!(
        VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG::pNext"][::core::mem::offset_of!(
        VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG,
        pNext
    ) - 4usize];
    ["Offset of field: VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG::relaxedLineRasterization"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG , relaxedLineRasterization) - 8usize] ;
};
pub const VkDebugUtilsMessageSeverityFlagBitsEXT_VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT:
    VkDebugUtilsMessageSeverityFlagBitsEXT = 1;
pub const VkDebugUtilsMessageSeverityFlagBitsEXT_VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT:
    VkDebugUtilsMessageSeverityFlagBitsEXT = 16;
pub const VkDebugUtilsMessageSeverityFlagBitsEXT_VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT:
    VkDebugUtilsMessageSeverityFlagBitsEXT = 256;
pub const VkDebugUtilsMessageSeverityFlagBitsEXT_VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT:
    VkDebugUtilsMessageSeverityFlagBitsEXT = 4096;
pub const VkDebugUtilsMessageSeverityFlagBitsEXT_VK_DEBUG_UTILS_MESSAGE_SEVERITY_FLAG_BITS_MAX_ENUM_EXT : VkDebugUtilsMessageSeverityFlagBitsEXT = 2147483647 ;
pub const VkDebugUtilsMessageTypeFlagBitsEXT_VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT:
    VkDebugUtilsMessageTypeFlagBitsEXT = 1;
pub const VkDebugUtilsMessageTypeFlagBitsEXT_VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT:
    VkDebugUtilsMessageTypeFlagBitsEXT = 2;
pub const VkDebugUtilsMessageTypeFlagBitsEXT_VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT:
    VkDebugUtilsMessageTypeFlagBitsEXT = 4;
pub const VkDebugUtilsMessageTypeFlagBitsEXT_VK_DEBUG_UTILS_MESSAGE_TYPE_DEVICE_ADDRESS_BINDING_BIT_EXT : VkDebugUtilsMessageTypeFlagBitsEXT = 8 ;
pub const VkDebugUtilsMessageTypeFlagBitsEXT_VK_DEBUG_UTILS_MESSAGE_TYPE_FLAG_BITS_MAX_ENUM_EXT:
    VkDebugUtilsMessageTypeFlagBitsEXT = 2147483647;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDebugUtilsLabelEXT"][::core::mem::size_of::<VkDebugUtilsLabelEXT>() - 28usize];
    ["Alignment of VkDebugUtilsLabelEXT"][::core::mem::align_of::<VkDebugUtilsLabelEXT>() - 4usize];
    ["Offset of field: VkDebugUtilsLabelEXT::sType"]
        [::core::mem::offset_of!(VkDebugUtilsLabelEXT, sType) - 0usize];
    ["Offset of field: VkDebugUtilsLabelEXT::pNext"]
        [::core::mem::offset_of!(VkDebugUtilsLabelEXT, pNext) - 4usize];
    ["Offset of field: VkDebugUtilsLabelEXT::pLabelName"]
        [::core::mem::offset_of!(VkDebugUtilsLabelEXT, pLabelName) - 8usize];
    ["Offset of field: VkDebugUtilsLabelEXT::color"]
        [::core::mem::offset_of!(VkDebugUtilsLabelEXT, color) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDebugUtilsObjectNameInfoEXT"]
        [::core::mem::size_of::<VkDebugUtilsObjectNameInfoEXT>() - 32usize];
    ["Alignment of VkDebugUtilsObjectNameInfoEXT"]
        [::core::mem::align_of::<VkDebugUtilsObjectNameInfoEXT>() - 8usize];
    ["Offset of field: VkDebugUtilsObjectNameInfoEXT::sType"]
        [::core::mem::offset_of!(VkDebugUtilsObjectNameInfoEXT, sType) - 0usize];
    ["Offset of field: VkDebugUtilsObjectNameInfoEXT::pNext"]
        [::core::mem::offset_of!(VkDebugUtilsObjectNameInfoEXT, pNext) - 4usize];
    ["Offset of field: VkDebugUtilsObjectNameInfoEXT::objectType"]
        [::core::mem::offset_of!(VkDebugUtilsObjectNameInfoEXT, objectType) - 8usize];
    ["Offset of field: VkDebugUtilsObjectNameInfoEXT::objectHandle"]
        [::core::mem::offset_of!(VkDebugUtilsObjectNameInfoEXT, objectHandle) - 16usize];
    ["Offset of field: VkDebugUtilsObjectNameInfoEXT::pObjectName"]
        [::core::mem::offset_of!(VkDebugUtilsObjectNameInfoEXT, pObjectName) - 24usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDebugUtilsMessengerCallbackDataEXT"]
        [::core::mem::size_of::<VkDebugUtilsMessengerCallbackDataEXT>() - 48usize];
    ["Alignment of VkDebugUtilsMessengerCallbackDataEXT"]
        [::core::mem::align_of::<VkDebugUtilsMessengerCallbackDataEXT>() - 4usize];
    ["Offset of field: VkDebugUtilsMessengerCallbackDataEXT::sType"]
        [::core::mem::offset_of!(VkDebugUtilsMessengerCallbackDataEXT, sType) - 0usize];
    ["Offset of field: VkDebugUtilsMessengerCallbackDataEXT::pNext"]
        [::core::mem::offset_of!(VkDebugUtilsMessengerCallbackDataEXT, pNext) - 4usize];
    ["Offset of field: VkDebugUtilsMessengerCallbackDataEXT::flags"]
        [::core::mem::offset_of!(VkDebugUtilsMessengerCallbackDataEXT, flags) - 8usize];
    ["Offset of field: VkDebugUtilsMessengerCallbackDataEXT::pMessageIdName"]
        [::core::mem::offset_of!(VkDebugUtilsMessengerCallbackDataEXT, pMessageIdName) - 12usize];
    ["Offset of field: VkDebugUtilsMessengerCallbackDataEXT::messageIdNumber"]
        [::core::mem::offset_of!(VkDebugUtilsMessengerCallbackDataEXT, messageIdNumber) - 16usize];
    ["Offset of field: VkDebugUtilsMessengerCallbackDataEXT::pMessage"]
        [::core::mem::offset_of!(VkDebugUtilsMessengerCallbackDataEXT, pMessage) - 20usize];
    ["Offset of field: VkDebugUtilsMessengerCallbackDataEXT::queueLabelCount"]
        [::core::mem::offset_of!(VkDebugUtilsMessengerCallbackDataEXT, queueLabelCount) - 24usize];
    ["Offset of field: VkDebugUtilsMessengerCallbackDataEXT::pQueueLabels"]
        [::core::mem::offset_of!(VkDebugUtilsMessengerCallbackDataEXT, pQueueLabels) - 28usize];
    ["Offset of field: VkDebugUtilsMessengerCallbackDataEXT::cmdBufLabelCount"]
        [::core::mem::offset_of!(VkDebugUtilsMessengerCallbackDataEXT, cmdBufLabelCount) - 32usize];
    ["Offset of field: VkDebugUtilsMessengerCallbackDataEXT::pCmdBufLabels"]
        [::core::mem::offset_of!(VkDebugUtilsMessengerCallbackDataEXT, pCmdBufLabels) - 36usize];
    ["Offset of field: VkDebugUtilsMessengerCallbackDataEXT::objectCount"]
        [::core::mem::offset_of!(VkDebugUtilsMessengerCallbackDataEXT, objectCount) - 40usize];
    ["Offset of field: VkDebugUtilsMessengerCallbackDataEXT::pObjects"]
        [::core::mem::offset_of!(VkDebugUtilsMessengerCallbackDataEXT, pObjects) - 44usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDebugUtilsMessengerCreateInfoEXT"]
        [::core::mem::size_of::<VkDebugUtilsMessengerCreateInfoEXT>() - 28usize];
    ["Alignment of VkDebugUtilsMessengerCreateInfoEXT"]
        [::core::mem::align_of::<VkDebugUtilsMessengerCreateInfoEXT>() - 4usize];
    ["Offset of field: VkDebugUtilsMessengerCreateInfoEXT::sType"]
        [::core::mem::offset_of!(VkDebugUtilsMessengerCreateInfoEXT, sType) - 0usize];
    ["Offset of field: VkDebugUtilsMessengerCreateInfoEXT::pNext"]
        [::core::mem::offset_of!(VkDebugUtilsMessengerCreateInfoEXT, pNext) - 4usize];
    ["Offset of field: VkDebugUtilsMessengerCreateInfoEXT::flags"]
        [::core::mem::offset_of!(VkDebugUtilsMessengerCreateInfoEXT, flags) - 8usize];
    ["Offset of field: VkDebugUtilsMessengerCreateInfoEXT::messageSeverity"]
        [::core::mem::offset_of!(VkDebugUtilsMessengerCreateInfoEXT, messageSeverity) - 12usize];
    ["Offset of field: VkDebugUtilsMessengerCreateInfoEXT::messageType"]
        [::core::mem::offset_of!(VkDebugUtilsMessengerCreateInfoEXT, messageType) - 16usize];
    ["Offset of field: VkDebugUtilsMessengerCreateInfoEXT::pfnUserCallback"]
        [::core::mem::offset_of!(VkDebugUtilsMessengerCreateInfoEXT, pfnUserCallback) - 20usize];
    ["Offset of field: VkDebugUtilsMessengerCreateInfoEXT::pUserData"]
        [::core::mem::offset_of!(VkDebugUtilsMessengerCreateInfoEXT, pUserData) - 24usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDebugUtilsObjectTagInfoEXT"]
        [::core::mem::size_of::<VkDebugUtilsObjectTagInfoEXT>() - 40usize];
    ["Alignment of VkDebugUtilsObjectTagInfoEXT"]
        [::core::mem::align_of::<VkDebugUtilsObjectTagInfoEXT>() - 8usize];
    ["Offset of field: VkDebugUtilsObjectTagInfoEXT::sType"]
        [::core::mem::offset_of!(VkDebugUtilsObjectTagInfoEXT, sType) - 0usize];
    ["Offset of field: VkDebugUtilsObjectTagInfoEXT::pNext"]
        [::core::mem::offset_of!(VkDebugUtilsObjectTagInfoEXT, pNext) - 4usize];
    ["Offset of field: VkDebugUtilsObjectTagInfoEXT::objectType"]
        [::core::mem::offset_of!(VkDebugUtilsObjectTagInfoEXT, objectType) - 8usize];
    ["Offset of field: VkDebugUtilsObjectTagInfoEXT::objectHandle"]
        [::core::mem::offset_of!(VkDebugUtilsObjectTagInfoEXT, objectHandle) - 16usize];
    ["Offset of field: VkDebugUtilsObjectTagInfoEXT::tagName"]
        [::core::mem::offset_of!(VkDebugUtilsObjectTagInfoEXT, tagName) - 24usize];
    ["Offset of field: VkDebugUtilsObjectTagInfoEXT::tagSize"]
        [::core::mem::offset_of!(VkDebugUtilsObjectTagInfoEXT, tagSize) - 32usize];
    ["Offset of field: VkDebugUtilsObjectTagInfoEXT::pTag"]
        [::core::mem::offset_of!(VkDebugUtilsObjectTagInfoEXT, pTag) - 36usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkAttachmentSampleCountInfoAMD"]
        [::core::mem::size_of::<VkAttachmentSampleCountInfoAMD>() - 20usize];
    ["Alignment of VkAttachmentSampleCountInfoAMD"]
        [::core::mem::align_of::<VkAttachmentSampleCountInfoAMD>() - 4usize];
    ["Offset of field: VkAttachmentSampleCountInfoAMD::sType"]
        [::core::mem::offset_of!(VkAttachmentSampleCountInfoAMD, sType) - 0usize];
    ["Offset of field: VkAttachmentSampleCountInfoAMD::pNext"]
        [::core::mem::offset_of!(VkAttachmentSampleCountInfoAMD, pNext) - 4usize];
    ["Offset of field: VkAttachmentSampleCountInfoAMD::colorAttachmentCount"]
        [::core::mem::offset_of!(VkAttachmentSampleCountInfoAMD, colorAttachmentCount) - 8usize];
    ["Offset of field: VkAttachmentSampleCountInfoAMD::pColorAttachmentSamples"][::core::mem::offset_of!(
        VkAttachmentSampleCountInfoAMD,
        pColorAttachmentSamples
    ) - 12usize];
    ["Offset of field: VkAttachmentSampleCountInfoAMD::depthStencilAttachmentSamples"][::core::mem::offset_of!(
        VkAttachmentSampleCountInfoAMD,
        depthStencilAttachmentSamples
    ) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSampleLocationEXT"][::core::mem::size_of::<VkSampleLocationEXT>() - 8usize];
    ["Alignment of VkSampleLocationEXT"][::core::mem::align_of::<VkSampleLocationEXT>() - 4usize];
    ["Offset of field: VkSampleLocationEXT::x"]
        [::core::mem::offset_of!(VkSampleLocationEXT, x) - 0usize];
    ["Offset of field: VkSampleLocationEXT::y"]
        [::core::mem::offset_of!(VkSampleLocationEXT, y) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSampleLocationsInfoEXT"]
        [::core::mem::size_of::<VkSampleLocationsInfoEXT>() - 28usize];
    ["Alignment of VkSampleLocationsInfoEXT"]
        [::core::mem::align_of::<VkSampleLocationsInfoEXT>() - 4usize];
    ["Offset of field: VkSampleLocationsInfoEXT::sType"]
        [::core::mem::offset_of!(VkSampleLocationsInfoEXT, sType) - 0usize];
    ["Offset of field: VkSampleLocationsInfoEXT::pNext"]
        [::core::mem::offset_of!(VkSampleLocationsInfoEXT, pNext) - 4usize];
    ["Offset of field: VkSampleLocationsInfoEXT::sampleLocationsPerPixel"]
        [::core::mem::offset_of!(VkSampleLocationsInfoEXT, sampleLocationsPerPixel) - 8usize];
    ["Offset of field: VkSampleLocationsInfoEXT::sampleLocationGridSize"]
        [::core::mem::offset_of!(VkSampleLocationsInfoEXT, sampleLocationGridSize) - 12usize];
    ["Offset of field: VkSampleLocationsInfoEXT::sampleLocationsCount"]
        [::core::mem::offset_of!(VkSampleLocationsInfoEXT, sampleLocationsCount) - 20usize];
    ["Offset of field: VkSampleLocationsInfoEXT::pSampleLocations"]
        [::core::mem::offset_of!(VkSampleLocationsInfoEXT, pSampleLocations) - 24usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkAttachmentSampleLocationsEXT"]
        [::core::mem::size_of::<VkAttachmentSampleLocationsEXT>() - 32usize];
    ["Alignment of VkAttachmentSampleLocationsEXT"]
        [::core::mem::align_of::<VkAttachmentSampleLocationsEXT>() - 4usize];
    ["Offset of field: VkAttachmentSampleLocationsEXT::attachmentIndex"]
        [::core::mem::offset_of!(VkAttachmentSampleLocationsEXT, attachmentIndex) - 0usize];
    ["Offset of field: VkAttachmentSampleLocationsEXT::sampleLocationsInfo"]
        [::core::mem::offset_of!(VkAttachmentSampleLocationsEXT, sampleLocationsInfo) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSubpassSampleLocationsEXT"]
        [::core::mem::size_of::<VkSubpassSampleLocationsEXT>() - 32usize];
    ["Alignment of VkSubpassSampleLocationsEXT"]
        [::core::mem::align_of::<VkSubpassSampleLocationsEXT>() - 4usize];
    ["Offset of field: VkSubpassSampleLocationsEXT::subpassIndex"]
        [::core::mem::offset_of!(VkSubpassSampleLocationsEXT, subpassIndex) - 0usize];
    ["Offset of field: VkSubpassSampleLocationsEXT::sampleLocationsInfo"]
        [::core::mem::offset_of!(VkSubpassSampleLocationsEXT, sampleLocationsInfo) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkRenderPassSampleLocationsBeginInfoEXT"]
        [::core::mem::size_of::<VkRenderPassSampleLocationsBeginInfoEXT>() - 24usize];
    ["Alignment of VkRenderPassSampleLocationsBeginInfoEXT"]
        [::core::mem::align_of::<VkRenderPassSampleLocationsBeginInfoEXT>() - 4usize];
    ["Offset of field: VkRenderPassSampleLocationsBeginInfoEXT::sType"]
        [::core::mem::offset_of!(VkRenderPassSampleLocationsBeginInfoEXT, sType) - 0usize];
    ["Offset of field: VkRenderPassSampleLocationsBeginInfoEXT::pNext"]
        [::core::mem::offset_of!(VkRenderPassSampleLocationsBeginInfoEXT, pNext) - 4usize];
    ["Offset of field: VkRenderPassSampleLocationsBeginInfoEXT::attachmentInitialSampleLocationsCount"] [:: core :: mem :: offset_of ! (VkRenderPassSampleLocationsBeginInfoEXT , attachmentInitialSampleLocationsCount) - 8usize] ;
    ["Offset of field: VkRenderPassSampleLocationsBeginInfoEXT::pAttachmentInitialSampleLocations"] [:: core :: mem :: offset_of ! (VkRenderPassSampleLocationsBeginInfoEXT , pAttachmentInitialSampleLocations) - 12usize] ;
    ["Offset of field: VkRenderPassSampleLocationsBeginInfoEXT::postSubpassSampleLocationsCount"][::core::mem::offset_of!(
        VkRenderPassSampleLocationsBeginInfoEXT,
        postSubpassSampleLocationsCount
    )
        - 16usize];
    ["Offset of field: VkRenderPassSampleLocationsBeginInfoEXT::pPostSubpassSampleLocations"][::core::mem::offset_of!(
        VkRenderPassSampleLocationsBeginInfoEXT,
        pPostSubpassSampleLocations
    )
        - 20usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineSampleLocationsStateCreateInfoEXT"]
        [::core::mem::size_of::<VkPipelineSampleLocationsStateCreateInfoEXT>() - 40usize];
    ["Alignment of VkPipelineSampleLocationsStateCreateInfoEXT"]
        [::core::mem::align_of::<VkPipelineSampleLocationsStateCreateInfoEXT>() - 4usize];
    ["Offset of field: VkPipelineSampleLocationsStateCreateInfoEXT::sType"]
        [::core::mem::offset_of!(VkPipelineSampleLocationsStateCreateInfoEXT, sType) - 0usize];
    ["Offset of field: VkPipelineSampleLocationsStateCreateInfoEXT::pNext"]
        [::core::mem::offset_of!(VkPipelineSampleLocationsStateCreateInfoEXT, pNext) - 4usize];
    ["Offset of field: VkPipelineSampleLocationsStateCreateInfoEXT::sampleLocationsEnable"][::core::mem::offset_of!(
        VkPipelineSampleLocationsStateCreateInfoEXT,
        sampleLocationsEnable
    )
        - 8usize];
    ["Offset of field: VkPipelineSampleLocationsStateCreateInfoEXT::sampleLocationsInfo"][::core::mem::offset_of!(
        VkPipelineSampleLocationsStateCreateInfoEXT,
        sampleLocationsInfo
    )
        - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceSampleLocationsPropertiesEXT"]
        [::core::mem::size_of::<VkPhysicalDeviceSampleLocationsPropertiesEXT>() - 36usize];
    ["Alignment of VkPhysicalDeviceSampleLocationsPropertiesEXT"]
        [::core::mem::align_of::<VkPhysicalDeviceSampleLocationsPropertiesEXT>() - 4usize];
    ["Offset of field: VkPhysicalDeviceSampleLocationsPropertiesEXT::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceSampleLocationsPropertiesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceSampleLocationsPropertiesEXT::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceSampleLocationsPropertiesEXT, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceSampleLocationsPropertiesEXT::sampleLocationSampleCounts"][::core::mem::offset_of!(
        VkPhysicalDeviceSampleLocationsPropertiesEXT,
        sampleLocationSampleCounts
    )
        - 8usize];
    ["Offset of field: VkPhysicalDeviceSampleLocationsPropertiesEXT::maxSampleLocationGridSize"][::core::mem::offset_of!(
        VkPhysicalDeviceSampleLocationsPropertiesEXT,
        maxSampleLocationGridSize
    )
        - 12usize];
    ["Offset of field: VkPhysicalDeviceSampleLocationsPropertiesEXT::sampleLocationCoordinateRange"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceSampleLocationsPropertiesEXT , sampleLocationCoordinateRange) - 20usize] ;
    ["Offset of field: VkPhysicalDeviceSampleLocationsPropertiesEXT::sampleLocationSubPixelBits"][::core::mem::offset_of!(
        VkPhysicalDeviceSampleLocationsPropertiesEXT,
        sampleLocationSubPixelBits
    )
        - 28usize];
    ["Offset of field: VkPhysicalDeviceSampleLocationsPropertiesEXT::variableSampleLocations"][::core::mem::offset_of!(
        VkPhysicalDeviceSampleLocationsPropertiesEXT,
        variableSampleLocations
    )
        - 32usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkMultisamplePropertiesEXT"]
        [::core::mem::size_of::<VkMultisamplePropertiesEXT>() - 16usize];
    ["Alignment of VkMultisamplePropertiesEXT"]
        [::core::mem::align_of::<VkMultisamplePropertiesEXT>() - 4usize];
    ["Offset of field: VkMultisamplePropertiesEXT::sType"]
        [::core::mem::offset_of!(VkMultisamplePropertiesEXT, sType) - 0usize];
    ["Offset of field: VkMultisamplePropertiesEXT::pNext"]
        [::core::mem::offset_of!(VkMultisamplePropertiesEXT, pNext) - 4usize];
    ["Offset of field: VkMultisamplePropertiesEXT::maxSampleLocationGridSize"]
        [::core::mem::offset_of!(VkMultisamplePropertiesEXT, maxSampleLocationGridSize) - 8usize];
};
pub const VkBlendOverlapEXT_VK_BLEND_OVERLAP_UNCORRELATED_EXT: VkBlendOverlapEXT = 0;
pub const VkBlendOverlapEXT_VK_BLEND_OVERLAP_DISJOINT_EXT: VkBlendOverlapEXT = 1;
pub const VkBlendOverlapEXT_VK_BLEND_OVERLAP_CONJOINT_EXT: VkBlendOverlapEXT = 2;
pub const VkBlendOverlapEXT_VK_BLEND_OVERLAP_MAX_ENUM_EXT: VkBlendOverlapEXT = 2147483647;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT"]
        [::core::mem::size_of::<VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT>() - 12usize];
    ["Alignment of VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT"]
        [::core::mem::align_of::<VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT>() - 4usize];
    ["Offset of field: VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT::sType"][::core::mem::offset_of!(
        VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT::pNext"][::core::mem::offset_of!(
        VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT,
        pNext
    ) - 4usize];
    ["Offset of field: VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT::advancedBlendCoherentOperations"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT , advancedBlendCoherentOperations) - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT"]
        [::core::mem::size_of::<VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT>() - 32usize];
    ["Alignment of VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT"]
        [::core::mem::align_of::<VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT>() - 4usize];
    ["Offset of field: VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT::sType"][::core::mem::offset_of!(
        VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT::pNext"][::core::mem::offset_of!(
        VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT,
        pNext
    ) - 4usize];
    ["Offset of field: VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT::advancedBlendMaxColorAttachments"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT , advancedBlendMaxColorAttachments) - 8usize] ;
    ["Offset of field: VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT::advancedBlendIndependentBlend"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT , advancedBlendIndependentBlend) - 12usize] ;
    ["Offset of field: VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT::advancedBlendNonPremultipliedSrcColor"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT , advancedBlendNonPremultipliedSrcColor) - 16usize] ;
    ["Offset of field: VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT::advancedBlendNonPremultipliedDstColor"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT , advancedBlendNonPremultipliedDstColor) - 20usize] ;
    ["Offset of field: VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT::advancedBlendCorrelatedOverlap"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT , advancedBlendCorrelatedOverlap) - 24usize] ;
    ["Offset of field: VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT::advancedBlendAllOperations"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT , advancedBlendAllOperations) - 28usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineColorBlendAdvancedStateCreateInfoEXT"]
        [::core::mem::size_of::<VkPipelineColorBlendAdvancedStateCreateInfoEXT>() - 20usize];
    ["Alignment of VkPipelineColorBlendAdvancedStateCreateInfoEXT"]
        [::core::mem::align_of::<VkPipelineColorBlendAdvancedStateCreateInfoEXT>() - 4usize];
    ["Offset of field: VkPipelineColorBlendAdvancedStateCreateInfoEXT::sType"]
        [::core::mem::offset_of!(VkPipelineColorBlendAdvancedStateCreateInfoEXT, sType) - 0usize];
    ["Offset of field: VkPipelineColorBlendAdvancedStateCreateInfoEXT::pNext"]
        [::core::mem::offset_of!(VkPipelineColorBlendAdvancedStateCreateInfoEXT, pNext) - 4usize];
    ["Offset of field: VkPipelineColorBlendAdvancedStateCreateInfoEXT::srcPremultiplied"][::core::mem::offset_of!(
        VkPipelineColorBlendAdvancedStateCreateInfoEXT,
        srcPremultiplied
    )
        - 8usize];
    ["Offset of field: VkPipelineColorBlendAdvancedStateCreateInfoEXT::dstPremultiplied"][::core::mem::offset_of!(
        VkPipelineColorBlendAdvancedStateCreateInfoEXT,
        dstPremultiplied
    )
        - 12usize];
    ["Offset of field: VkPipelineColorBlendAdvancedStateCreateInfoEXT::blendOverlap"][::core::mem::offset_of!(
        VkPipelineColorBlendAdvancedStateCreateInfoEXT,
        blendOverlap
    ) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineCoverageToColorStateCreateInfoNV"]
        [::core::mem::size_of::<VkPipelineCoverageToColorStateCreateInfoNV>() - 20usize];
    ["Alignment of VkPipelineCoverageToColorStateCreateInfoNV"]
        [::core::mem::align_of::<VkPipelineCoverageToColorStateCreateInfoNV>() - 4usize];
    ["Offset of field: VkPipelineCoverageToColorStateCreateInfoNV::sType"]
        [::core::mem::offset_of!(VkPipelineCoverageToColorStateCreateInfoNV, sType) - 0usize];
    ["Offset of field: VkPipelineCoverageToColorStateCreateInfoNV::pNext"]
        [::core::mem::offset_of!(VkPipelineCoverageToColorStateCreateInfoNV, pNext) - 4usize];
    ["Offset of field: VkPipelineCoverageToColorStateCreateInfoNV::flags"]
        [::core::mem::offset_of!(VkPipelineCoverageToColorStateCreateInfoNV, flags) - 8usize];
    ["Offset of field: VkPipelineCoverageToColorStateCreateInfoNV::coverageToColorEnable"][::core::mem::offset_of!(
        VkPipelineCoverageToColorStateCreateInfoNV,
        coverageToColorEnable
    )
        - 12usize];
    ["Offset of field: VkPipelineCoverageToColorStateCreateInfoNV::coverageToColorLocation"][::core::mem::offset_of!(
        VkPipelineCoverageToColorStateCreateInfoNV,
        coverageToColorLocation
    )
        - 16usize];
};
pub const VkCoverageModulationModeNV_VK_COVERAGE_MODULATION_MODE_NONE_NV:
    VkCoverageModulationModeNV = 0;
pub const VkCoverageModulationModeNV_VK_COVERAGE_MODULATION_MODE_RGB_NV:
    VkCoverageModulationModeNV = 1;
pub const VkCoverageModulationModeNV_VK_COVERAGE_MODULATION_MODE_ALPHA_NV:
    VkCoverageModulationModeNV = 2;
pub const VkCoverageModulationModeNV_VK_COVERAGE_MODULATION_MODE_RGBA_NV:
    VkCoverageModulationModeNV = 3;
pub const VkCoverageModulationModeNV_VK_COVERAGE_MODULATION_MODE_MAX_ENUM_NV:
    VkCoverageModulationModeNV = 2147483647;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineCoverageModulationStateCreateInfoNV"]
        [::core::mem::size_of::<VkPipelineCoverageModulationStateCreateInfoNV>() - 28usize];
    ["Alignment of VkPipelineCoverageModulationStateCreateInfoNV"]
        [::core::mem::align_of::<VkPipelineCoverageModulationStateCreateInfoNV>() - 4usize];
    ["Offset of field: VkPipelineCoverageModulationStateCreateInfoNV::sType"]
        [::core::mem::offset_of!(VkPipelineCoverageModulationStateCreateInfoNV, sType) - 0usize];
    ["Offset of field: VkPipelineCoverageModulationStateCreateInfoNV::pNext"]
        [::core::mem::offset_of!(VkPipelineCoverageModulationStateCreateInfoNV, pNext) - 4usize];
    ["Offset of field: VkPipelineCoverageModulationStateCreateInfoNV::flags"]
        [::core::mem::offset_of!(VkPipelineCoverageModulationStateCreateInfoNV, flags) - 8usize];
    ["Offset of field: VkPipelineCoverageModulationStateCreateInfoNV::coverageModulationMode"][::core::mem::offset_of!(
        VkPipelineCoverageModulationStateCreateInfoNV,
        coverageModulationMode
    )
        - 12usize];
    ["Offset of field: VkPipelineCoverageModulationStateCreateInfoNV::coverageModulationTableEnable"] [:: core :: mem :: offset_of ! (VkPipelineCoverageModulationStateCreateInfoNV , coverageModulationTableEnable) - 16usize] ;
    ["Offset of field: VkPipelineCoverageModulationStateCreateInfoNV::coverageModulationTableCount"] [:: core :: mem :: offset_of ! (VkPipelineCoverageModulationStateCreateInfoNV , coverageModulationTableCount) - 20usize] ;
    ["Offset of field: VkPipelineCoverageModulationStateCreateInfoNV::pCoverageModulationTable"][::core::mem::offset_of!(
        VkPipelineCoverageModulationStateCreateInfoNV,
        pCoverageModulationTable
    )
        - 24usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceShaderSMBuiltinsPropertiesNV"]
        [::core::mem::size_of::<VkPhysicalDeviceShaderSMBuiltinsPropertiesNV>() - 16usize];
    ["Alignment of VkPhysicalDeviceShaderSMBuiltinsPropertiesNV"]
        [::core::mem::align_of::<VkPhysicalDeviceShaderSMBuiltinsPropertiesNV>() - 4usize];
    ["Offset of field: VkPhysicalDeviceShaderSMBuiltinsPropertiesNV::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceShaderSMBuiltinsPropertiesNV, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceShaderSMBuiltinsPropertiesNV::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceShaderSMBuiltinsPropertiesNV, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceShaderSMBuiltinsPropertiesNV::shaderSMCount"][::core::mem::offset_of!(
        VkPhysicalDeviceShaderSMBuiltinsPropertiesNV,
        shaderSMCount
    ) - 8usize];
    ["Offset of field: VkPhysicalDeviceShaderSMBuiltinsPropertiesNV::shaderWarpsPerSM"][::core::mem::offset_of!(
        VkPhysicalDeviceShaderSMBuiltinsPropertiesNV,
        shaderWarpsPerSM
    )
        - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceShaderSMBuiltinsFeaturesNV"]
        [::core::mem::size_of::<VkPhysicalDeviceShaderSMBuiltinsFeaturesNV>() - 12usize];
    ["Alignment of VkPhysicalDeviceShaderSMBuiltinsFeaturesNV"]
        [::core::mem::align_of::<VkPhysicalDeviceShaderSMBuiltinsFeaturesNV>() - 4usize];
    ["Offset of field: VkPhysicalDeviceShaderSMBuiltinsFeaturesNV::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceShaderSMBuiltinsFeaturesNV, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceShaderSMBuiltinsFeaturesNV::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceShaderSMBuiltinsFeaturesNV, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceShaderSMBuiltinsFeaturesNV::shaderSMBuiltins"][::core::mem::offset_of!(
        VkPhysicalDeviceShaderSMBuiltinsFeaturesNV,
        shaderSMBuiltins
    ) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDrmFormatModifierPropertiesEXT"]
        [::core::mem::size_of::<VkDrmFormatModifierPropertiesEXT>() - 16usize];
    ["Alignment of VkDrmFormatModifierPropertiesEXT"]
        [::core::mem::align_of::<VkDrmFormatModifierPropertiesEXT>() - 8usize];
    ["Offset of field: VkDrmFormatModifierPropertiesEXT::drmFormatModifier"]
        [::core::mem::offset_of!(VkDrmFormatModifierPropertiesEXT, drmFormatModifier) - 0usize];
    ["Offset of field: VkDrmFormatModifierPropertiesEXT::drmFormatModifierPlaneCount"][::core::mem::offset_of!(
        VkDrmFormatModifierPropertiesEXT,
        drmFormatModifierPlaneCount
    ) - 8usize];
    ["Offset of field: VkDrmFormatModifierPropertiesEXT::drmFormatModifierTilingFeatures"][::core::mem::offset_of!(
        VkDrmFormatModifierPropertiesEXT,
        drmFormatModifierTilingFeatures
    )
        - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDrmFormatModifierPropertiesListEXT"]
        [::core::mem::size_of::<VkDrmFormatModifierPropertiesListEXT>() - 16usize];
    ["Alignment of VkDrmFormatModifierPropertiesListEXT"]
        [::core::mem::align_of::<VkDrmFormatModifierPropertiesListEXT>() - 4usize];
    ["Offset of field: VkDrmFormatModifierPropertiesListEXT::sType"]
        [::core::mem::offset_of!(VkDrmFormatModifierPropertiesListEXT, sType) - 0usize];
    ["Offset of field: VkDrmFormatModifierPropertiesListEXT::pNext"]
        [::core::mem::offset_of!(VkDrmFormatModifierPropertiesListEXT, pNext) - 4usize];
    ["Offset of field: VkDrmFormatModifierPropertiesListEXT::drmFormatModifierCount"][::core::mem::offset_of!(
        VkDrmFormatModifierPropertiesListEXT,
        drmFormatModifierCount
    ) - 8usize];
    ["Offset of field: VkDrmFormatModifierPropertiesListEXT::pDrmFormatModifierProperties"][::core::mem::offset_of!(
        VkDrmFormatModifierPropertiesListEXT,
        pDrmFormatModifierProperties
    )
        - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceImageDrmFormatModifierInfoEXT"]
        [::core::mem::size_of::<VkPhysicalDeviceImageDrmFormatModifierInfoEXT>() - 32usize];
    ["Alignment of VkPhysicalDeviceImageDrmFormatModifierInfoEXT"]
        [::core::mem::align_of::<VkPhysicalDeviceImageDrmFormatModifierInfoEXT>() - 8usize];
    ["Offset of field: VkPhysicalDeviceImageDrmFormatModifierInfoEXT::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceImageDrmFormatModifierInfoEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceImageDrmFormatModifierInfoEXT::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceImageDrmFormatModifierInfoEXT, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceImageDrmFormatModifierInfoEXT::drmFormatModifier"][::core::mem::offset_of!(
        VkPhysicalDeviceImageDrmFormatModifierInfoEXT,
        drmFormatModifier
    )
        - 8usize];
    ["Offset of field: VkPhysicalDeviceImageDrmFormatModifierInfoEXT::sharingMode"][::core::mem::offset_of!(
        VkPhysicalDeviceImageDrmFormatModifierInfoEXT,
        sharingMode
    ) - 16usize];
    ["Offset of field: VkPhysicalDeviceImageDrmFormatModifierInfoEXT::queueFamilyIndexCount"][::core::mem::offset_of!(
        VkPhysicalDeviceImageDrmFormatModifierInfoEXT,
        queueFamilyIndexCount
    )
        - 20usize];
    ["Offset of field: VkPhysicalDeviceImageDrmFormatModifierInfoEXT::pQueueFamilyIndices"][::core::mem::offset_of!(
        VkPhysicalDeviceImageDrmFormatModifierInfoEXT,
        pQueueFamilyIndices
    )
        - 24usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkImageDrmFormatModifierListCreateInfoEXT"]
        [::core::mem::size_of::<VkImageDrmFormatModifierListCreateInfoEXT>() - 16usize];
    ["Alignment of VkImageDrmFormatModifierListCreateInfoEXT"]
        [::core::mem::align_of::<VkImageDrmFormatModifierListCreateInfoEXT>() - 4usize];
    ["Offset of field: VkImageDrmFormatModifierListCreateInfoEXT::sType"]
        [::core::mem::offset_of!(VkImageDrmFormatModifierListCreateInfoEXT, sType) - 0usize];
    ["Offset of field: VkImageDrmFormatModifierListCreateInfoEXT::pNext"]
        [::core::mem::offset_of!(VkImageDrmFormatModifierListCreateInfoEXT, pNext) - 4usize];
    ["Offset of field: VkImageDrmFormatModifierListCreateInfoEXT::drmFormatModifierCount"][::core::mem::offset_of!(
        VkImageDrmFormatModifierListCreateInfoEXT,
        drmFormatModifierCount
    )
        - 8usize];
    ["Offset of field: VkImageDrmFormatModifierListCreateInfoEXT::pDrmFormatModifiers"][::core::mem::offset_of!(
        VkImageDrmFormatModifierListCreateInfoEXT,
        pDrmFormatModifiers
    )
        - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkImageDrmFormatModifierExplicitCreateInfoEXT"]
        [::core::mem::size_of::<VkImageDrmFormatModifierExplicitCreateInfoEXT>() - 24usize];
    ["Alignment of VkImageDrmFormatModifierExplicitCreateInfoEXT"]
        [::core::mem::align_of::<VkImageDrmFormatModifierExplicitCreateInfoEXT>() - 8usize];
    ["Offset of field: VkImageDrmFormatModifierExplicitCreateInfoEXT::sType"]
        [::core::mem::offset_of!(VkImageDrmFormatModifierExplicitCreateInfoEXT, sType) - 0usize];
    ["Offset of field: VkImageDrmFormatModifierExplicitCreateInfoEXT::pNext"]
        [::core::mem::offset_of!(VkImageDrmFormatModifierExplicitCreateInfoEXT, pNext) - 4usize];
    ["Offset of field: VkImageDrmFormatModifierExplicitCreateInfoEXT::drmFormatModifier"][::core::mem::offset_of!(
        VkImageDrmFormatModifierExplicitCreateInfoEXT,
        drmFormatModifier
    )
        - 8usize];
    ["Offset of field: VkImageDrmFormatModifierExplicitCreateInfoEXT::drmFormatModifierPlaneCount"] [:: core :: mem :: offset_of ! (VkImageDrmFormatModifierExplicitCreateInfoEXT , drmFormatModifierPlaneCount) - 16usize] ;
    ["Offset of field: VkImageDrmFormatModifierExplicitCreateInfoEXT::pPlaneLayouts"][::core::mem::offset_of!(
        VkImageDrmFormatModifierExplicitCreateInfoEXT,
        pPlaneLayouts
    ) - 20usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkImageDrmFormatModifierPropertiesEXT"]
        [::core::mem::size_of::<VkImageDrmFormatModifierPropertiesEXT>() - 16usize];
    ["Alignment of VkImageDrmFormatModifierPropertiesEXT"]
        [::core::mem::align_of::<VkImageDrmFormatModifierPropertiesEXT>() - 8usize];
    ["Offset of field: VkImageDrmFormatModifierPropertiesEXT::sType"]
        [::core::mem::offset_of!(VkImageDrmFormatModifierPropertiesEXT, sType) - 0usize];
    ["Offset of field: VkImageDrmFormatModifierPropertiesEXT::pNext"]
        [::core::mem::offset_of!(VkImageDrmFormatModifierPropertiesEXT, pNext) - 4usize];
    ["Offset of field: VkImageDrmFormatModifierPropertiesEXT::drmFormatModifier"][::core::mem::offset_of!(
        VkImageDrmFormatModifierPropertiesEXT,
        drmFormatModifier
    ) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDrmFormatModifierProperties2EXT"]
        [::core::mem::size_of::<VkDrmFormatModifierProperties2EXT>() - 24usize];
    ["Alignment of VkDrmFormatModifierProperties2EXT"]
        [::core::mem::align_of::<VkDrmFormatModifierProperties2EXT>() - 8usize];
    ["Offset of field: VkDrmFormatModifierProperties2EXT::drmFormatModifier"]
        [::core::mem::offset_of!(VkDrmFormatModifierProperties2EXT, drmFormatModifier) - 0usize];
    ["Offset of field: VkDrmFormatModifierProperties2EXT::drmFormatModifierPlaneCount"][::core::mem::offset_of!(
        VkDrmFormatModifierProperties2EXT,
        drmFormatModifierPlaneCount
    ) - 8usize];
    ["Offset of field: VkDrmFormatModifierProperties2EXT::drmFormatModifierTilingFeatures"][::core::mem::offset_of!(
        VkDrmFormatModifierProperties2EXT,
        drmFormatModifierTilingFeatures
    )
        - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDrmFormatModifierPropertiesList2EXT"]
        [::core::mem::size_of::<VkDrmFormatModifierPropertiesList2EXT>() - 16usize];
    ["Alignment of VkDrmFormatModifierPropertiesList2EXT"]
        [::core::mem::align_of::<VkDrmFormatModifierPropertiesList2EXT>() - 4usize];
    ["Offset of field: VkDrmFormatModifierPropertiesList2EXT::sType"]
        [::core::mem::offset_of!(VkDrmFormatModifierPropertiesList2EXT, sType) - 0usize];
    ["Offset of field: VkDrmFormatModifierPropertiesList2EXT::pNext"]
        [::core::mem::offset_of!(VkDrmFormatModifierPropertiesList2EXT, pNext) - 4usize];
    ["Offset of field: VkDrmFormatModifierPropertiesList2EXT::drmFormatModifierCount"][::core::mem::offset_of!(
        VkDrmFormatModifierPropertiesList2EXT,
        drmFormatModifierCount
    ) - 8usize];
    ["Offset of field: VkDrmFormatModifierPropertiesList2EXT::pDrmFormatModifierProperties"][::core::mem::offset_of!(
        VkDrmFormatModifierPropertiesList2EXT,
        pDrmFormatModifierProperties
    )
        - 12usize];
};
pub const VkValidationCacheHeaderVersionEXT_VK_VALIDATION_CACHE_HEADER_VERSION_ONE_EXT:
    VkValidationCacheHeaderVersionEXT = 1;
pub const VkValidationCacheHeaderVersionEXT_VK_VALIDATION_CACHE_HEADER_VERSION_MAX_ENUM_EXT:
    VkValidationCacheHeaderVersionEXT = 2147483647;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkValidationCacheCreateInfoEXT"]
        [::core::mem::size_of::<VkValidationCacheCreateInfoEXT>() - 20usize];
    ["Alignment of VkValidationCacheCreateInfoEXT"]
        [::core::mem::align_of::<VkValidationCacheCreateInfoEXT>() - 4usize];
    ["Offset of field: VkValidationCacheCreateInfoEXT::sType"]
        [::core::mem::offset_of!(VkValidationCacheCreateInfoEXT, sType) - 0usize];
    ["Offset of field: VkValidationCacheCreateInfoEXT::pNext"]
        [::core::mem::offset_of!(VkValidationCacheCreateInfoEXT, pNext) - 4usize];
    ["Offset of field: VkValidationCacheCreateInfoEXT::flags"]
        [::core::mem::offset_of!(VkValidationCacheCreateInfoEXT, flags) - 8usize];
    ["Offset of field: VkValidationCacheCreateInfoEXT::initialDataSize"]
        [::core::mem::offset_of!(VkValidationCacheCreateInfoEXT, initialDataSize) - 12usize];
    ["Offset of field: VkValidationCacheCreateInfoEXT::pInitialData"]
        [::core::mem::offset_of!(VkValidationCacheCreateInfoEXT, pInitialData) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkShaderModuleValidationCacheCreateInfoEXT"]
        [::core::mem::size_of::<VkShaderModuleValidationCacheCreateInfoEXT>() - 16usize];
    ["Alignment of VkShaderModuleValidationCacheCreateInfoEXT"]
        [::core::mem::align_of::<VkShaderModuleValidationCacheCreateInfoEXT>() - 8usize];
    ["Offset of field: VkShaderModuleValidationCacheCreateInfoEXT::sType"]
        [::core::mem::offset_of!(VkShaderModuleValidationCacheCreateInfoEXT, sType) - 0usize];
    ["Offset of field: VkShaderModuleValidationCacheCreateInfoEXT::pNext"]
        [::core::mem::offset_of!(VkShaderModuleValidationCacheCreateInfoEXT, pNext) - 4usize];
    ["Offset of field: VkShaderModuleValidationCacheCreateInfoEXT::validationCache"][::core::mem::offset_of!(
        VkShaderModuleValidationCacheCreateInfoEXT,
        validationCache
    ) - 8usize];
};
pub const VkShadingRatePaletteEntryNV_VK_SHADING_RATE_PALETTE_ENTRY_NO_INVOCATIONS_NV:
    VkShadingRatePaletteEntryNV = 0;
pub const VkShadingRatePaletteEntryNV_VK_SHADING_RATE_PALETTE_ENTRY_16_INVOCATIONS_PER_PIXEL_NV:
    VkShadingRatePaletteEntryNV = 1;
pub const VkShadingRatePaletteEntryNV_VK_SHADING_RATE_PALETTE_ENTRY_8_INVOCATIONS_PER_PIXEL_NV:
    VkShadingRatePaletteEntryNV = 2;
pub const VkShadingRatePaletteEntryNV_VK_SHADING_RATE_PALETTE_ENTRY_4_INVOCATIONS_PER_PIXEL_NV:
    VkShadingRatePaletteEntryNV = 3;
pub const VkShadingRatePaletteEntryNV_VK_SHADING_RATE_PALETTE_ENTRY_2_INVOCATIONS_PER_PIXEL_NV:
    VkShadingRatePaletteEntryNV = 4;
pub const VkShadingRatePaletteEntryNV_VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_PIXEL_NV:
    VkShadingRatePaletteEntryNV = 5;
pub const VkShadingRatePaletteEntryNV_VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X1_PIXELS_NV : VkShadingRatePaletteEntryNV = 6 ;
pub const VkShadingRatePaletteEntryNV_VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_1X2_PIXELS_NV : VkShadingRatePaletteEntryNV = 7 ;
pub const VkShadingRatePaletteEntryNV_VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X2_PIXELS_NV : VkShadingRatePaletteEntryNV = 8 ;
pub const VkShadingRatePaletteEntryNV_VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X2_PIXELS_NV : VkShadingRatePaletteEntryNV = 9 ;
pub const VkShadingRatePaletteEntryNV_VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X4_PIXELS_NV : VkShadingRatePaletteEntryNV = 10 ;
pub const VkShadingRatePaletteEntryNV_VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X4_PIXELS_NV : VkShadingRatePaletteEntryNV = 11 ;
pub const VkShadingRatePaletteEntryNV_VK_SHADING_RATE_PALETTE_ENTRY_MAX_ENUM_NV:
    VkShadingRatePaletteEntryNV = 2147483647;
pub const VkCoarseSampleOrderTypeNV_VK_COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV:
    VkCoarseSampleOrderTypeNV = 0;
pub const VkCoarseSampleOrderTypeNV_VK_COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV:
    VkCoarseSampleOrderTypeNV = 1;
pub const VkCoarseSampleOrderTypeNV_VK_COARSE_SAMPLE_ORDER_TYPE_PIXEL_MAJOR_NV:
    VkCoarseSampleOrderTypeNV = 2;
pub const VkCoarseSampleOrderTypeNV_VK_COARSE_SAMPLE_ORDER_TYPE_SAMPLE_MAJOR_NV:
    VkCoarseSampleOrderTypeNV = 3;
pub const VkCoarseSampleOrderTypeNV_VK_COARSE_SAMPLE_ORDER_TYPE_MAX_ENUM_NV:
    VkCoarseSampleOrderTypeNV = 2147483647;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkShadingRatePaletteNV"][::core::mem::size_of::<VkShadingRatePaletteNV>() - 8usize];
    ["Alignment of VkShadingRatePaletteNV"]
        [::core::mem::align_of::<VkShadingRatePaletteNV>() - 4usize];
    ["Offset of field: VkShadingRatePaletteNV::shadingRatePaletteEntryCount"]
        [::core::mem::offset_of!(VkShadingRatePaletteNV, shadingRatePaletteEntryCount) - 0usize];
    ["Offset of field: VkShadingRatePaletteNV::pShadingRatePaletteEntries"]
        [::core::mem::offset_of!(VkShadingRatePaletteNV, pShadingRatePaletteEntries) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineViewportShadingRateImageStateCreateInfoNV"]
        [::core::mem::size_of::<VkPipelineViewportShadingRateImageStateCreateInfoNV>() - 20usize];
    ["Alignment of VkPipelineViewportShadingRateImageStateCreateInfoNV"]
        [::core::mem::align_of::<VkPipelineViewportShadingRateImageStateCreateInfoNV>() - 4usize];
    ["Offset of field: VkPipelineViewportShadingRateImageStateCreateInfoNV::sType"][::core::mem::offset_of!(
        VkPipelineViewportShadingRateImageStateCreateInfoNV,
        sType
    ) - 0usize];
    ["Offset of field: VkPipelineViewportShadingRateImageStateCreateInfoNV::pNext"][::core::mem::offset_of!(
        VkPipelineViewportShadingRateImageStateCreateInfoNV,
        pNext
    ) - 4usize];
    ["Offset of field: VkPipelineViewportShadingRateImageStateCreateInfoNV::shadingRateImageEnable"] [:: core :: mem :: offset_of ! (VkPipelineViewportShadingRateImageStateCreateInfoNV , shadingRateImageEnable) - 8usize] ;
    ["Offset of field: VkPipelineViewportShadingRateImageStateCreateInfoNV::viewportCount"][::core::mem::offset_of!(
        VkPipelineViewportShadingRateImageStateCreateInfoNV,
        viewportCount
    )
        - 12usize];
    ["Offset of field: VkPipelineViewportShadingRateImageStateCreateInfoNV::pShadingRatePalettes"] [:: core :: mem :: offset_of ! (VkPipelineViewportShadingRateImageStateCreateInfoNV , pShadingRatePalettes) - 16usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceShadingRateImageFeaturesNV"]
        [::core::mem::size_of::<VkPhysicalDeviceShadingRateImageFeaturesNV>() - 16usize];
    ["Alignment of VkPhysicalDeviceShadingRateImageFeaturesNV"]
        [::core::mem::align_of::<VkPhysicalDeviceShadingRateImageFeaturesNV>() - 4usize];
    ["Offset of field: VkPhysicalDeviceShadingRateImageFeaturesNV::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceShadingRateImageFeaturesNV, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceShadingRateImageFeaturesNV::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceShadingRateImageFeaturesNV, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceShadingRateImageFeaturesNV::shadingRateImage"][::core::mem::offset_of!(
        VkPhysicalDeviceShadingRateImageFeaturesNV,
        shadingRateImage
    ) - 8usize];
    ["Offset of field: VkPhysicalDeviceShadingRateImageFeaturesNV::shadingRateCoarseSampleOrder"][::core::mem::offset_of!(
        VkPhysicalDeviceShadingRateImageFeaturesNV,
        shadingRateCoarseSampleOrder
    )
        - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceShadingRateImagePropertiesNV"]
        [::core::mem::size_of::<VkPhysicalDeviceShadingRateImagePropertiesNV>() - 24usize];
    ["Alignment of VkPhysicalDeviceShadingRateImagePropertiesNV"]
        [::core::mem::align_of::<VkPhysicalDeviceShadingRateImagePropertiesNV>() - 4usize];
    ["Offset of field: VkPhysicalDeviceShadingRateImagePropertiesNV::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceShadingRateImagePropertiesNV, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceShadingRateImagePropertiesNV::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceShadingRateImagePropertiesNV, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceShadingRateImagePropertiesNV::shadingRateTexelSize"][::core::mem::offset_of!(
        VkPhysicalDeviceShadingRateImagePropertiesNV,
        shadingRateTexelSize
    )
        - 8usize];
    ["Offset of field: VkPhysicalDeviceShadingRateImagePropertiesNV::shadingRatePaletteSize"][::core::mem::offset_of!(
        VkPhysicalDeviceShadingRateImagePropertiesNV,
        shadingRatePaletteSize
    )
        - 16usize];
    ["Offset of field: VkPhysicalDeviceShadingRateImagePropertiesNV::shadingRateMaxCoarseSamples"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceShadingRateImagePropertiesNV , shadingRateMaxCoarseSamples) - 20usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkCoarseSampleLocationNV"]
        [::core::mem::size_of::<VkCoarseSampleLocationNV>() - 12usize];
    ["Alignment of VkCoarseSampleLocationNV"]
        [::core::mem::align_of::<VkCoarseSampleLocationNV>() - 4usize];
    ["Offset of field: VkCoarseSampleLocationNV::pixelX"]
        [::core::mem::offset_of!(VkCoarseSampleLocationNV, pixelX) - 0usize];
    ["Offset of field: VkCoarseSampleLocationNV::pixelY"]
        [::core::mem::offset_of!(VkCoarseSampleLocationNV, pixelY) - 4usize];
    ["Offset of field: VkCoarseSampleLocationNV::sample"]
        [::core::mem::offset_of!(VkCoarseSampleLocationNV, sample) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkCoarseSampleOrderCustomNV"]
        [::core::mem::size_of::<VkCoarseSampleOrderCustomNV>() - 16usize];
    ["Alignment of VkCoarseSampleOrderCustomNV"]
        [::core::mem::align_of::<VkCoarseSampleOrderCustomNV>() - 4usize];
    ["Offset of field: VkCoarseSampleOrderCustomNV::shadingRate"]
        [::core::mem::offset_of!(VkCoarseSampleOrderCustomNV, shadingRate) - 0usize];
    ["Offset of field: VkCoarseSampleOrderCustomNV::sampleCount"]
        [::core::mem::offset_of!(VkCoarseSampleOrderCustomNV, sampleCount) - 4usize];
    ["Offset of field: VkCoarseSampleOrderCustomNV::sampleLocationCount"]
        [::core::mem::offset_of!(VkCoarseSampleOrderCustomNV, sampleLocationCount) - 8usize];
    ["Offset of field: VkCoarseSampleOrderCustomNV::pSampleLocations"]
        [::core::mem::offset_of!(VkCoarseSampleOrderCustomNV, pSampleLocations) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineViewportCoarseSampleOrderStateCreateInfoNV"]
        [::core::mem::size_of::<VkPipelineViewportCoarseSampleOrderStateCreateInfoNV>() - 20usize];
    ["Alignment of VkPipelineViewportCoarseSampleOrderStateCreateInfoNV"]
        [::core::mem::align_of::<VkPipelineViewportCoarseSampleOrderStateCreateInfoNV>() - 4usize];
    ["Offset of field: VkPipelineViewportCoarseSampleOrderStateCreateInfoNV::sType"][::core::mem::offset_of!(
        VkPipelineViewportCoarseSampleOrderStateCreateInfoNV,
        sType
    ) - 0usize];
    ["Offset of field: VkPipelineViewportCoarseSampleOrderStateCreateInfoNV::pNext"][::core::mem::offset_of!(
        VkPipelineViewportCoarseSampleOrderStateCreateInfoNV,
        pNext
    ) - 4usize];
    ["Offset of field: VkPipelineViewportCoarseSampleOrderStateCreateInfoNV::sampleOrderType"][::core::mem::offset_of!(
        VkPipelineViewportCoarseSampleOrderStateCreateInfoNV,
        sampleOrderType
    )
        - 8usize];
    ["Offset of field: VkPipelineViewportCoarseSampleOrderStateCreateInfoNV::customSampleOrderCount"] [:: core :: mem :: offset_of ! (VkPipelineViewportCoarseSampleOrderStateCreateInfoNV , customSampleOrderCount) - 12usize] ;
    ["Offset of field: VkPipelineViewportCoarseSampleOrderStateCreateInfoNV::pCustomSampleOrders"] [:: core :: mem :: offset_of ! (VkPipelineViewportCoarseSampleOrderStateCreateInfoNV , pCustomSampleOrders) - 16usize] ;
};
pub const VkRayTracingShaderGroupTypeKHR_VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR:
    VkRayTracingShaderGroupTypeKHR = 0;
pub const VkRayTracingShaderGroupTypeKHR_VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR : VkRayTracingShaderGroupTypeKHR = 1 ;
pub const VkRayTracingShaderGroupTypeKHR_VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR : VkRayTracingShaderGroupTypeKHR = 2 ;
pub const VkRayTracingShaderGroupTypeKHR_VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_NV:
    VkRayTracingShaderGroupTypeKHR = 0;
pub const VkRayTracingShaderGroupTypeKHR_VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_NV:
    VkRayTracingShaderGroupTypeKHR = 1;
pub const VkRayTracingShaderGroupTypeKHR_VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_NV : VkRayTracingShaderGroupTypeKHR = 2 ;
pub const VkRayTracingShaderGroupTypeKHR_VK_RAY_TRACING_SHADER_GROUP_TYPE_MAX_ENUM_KHR:
    VkRayTracingShaderGroupTypeKHR = 2147483647;
pub const VkGeometryTypeKHR_VK_GEOMETRY_TYPE_TRIANGLES_KHR: VkGeometryTypeKHR = 0;
pub const VkGeometryTypeKHR_VK_GEOMETRY_TYPE_AABBS_KHR: VkGeometryTypeKHR = 1;
pub const VkGeometryTypeKHR_VK_GEOMETRY_TYPE_INSTANCES_KHR: VkGeometryTypeKHR = 2;
pub const VkGeometryTypeKHR_VK_GEOMETRY_TYPE_SPHERES_NV: VkGeometryTypeKHR = 1000429004;
pub const VkGeometryTypeKHR_VK_GEOMETRY_TYPE_LINEAR_SWEPT_SPHERES_NV: VkGeometryTypeKHR =
    1000429005;
pub const VkGeometryTypeKHR_VK_GEOMETRY_TYPE_TRIANGLES_NV: VkGeometryTypeKHR = 0;
pub const VkGeometryTypeKHR_VK_GEOMETRY_TYPE_AABBS_NV: VkGeometryTypeKHR = 1;
pub const VkGeometryTypeKHR_VK_GEOMETRY_TYPE_MAX_ENUM_KHR: VkGeometryTypeKHR = 2147483647;
pub const VkAccelerationStructureTypeKHR_VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR:
    VkAccelerationStructureTypeKHR = 0;
pub const VkAccelerationStructureTypeKHR_VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR:
    VkAccelerationStructureTypeKHR = 1;
pub const VkAccelerationStructureTypeKHR_VK_ACCELERATION_STRUCTURE_TYPE_GENERIC_KHR:
    VkAccelerationStructureTypeKHR = 2;
pub const VkAccelerationStructureTypeKHR_VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_NV:
    VkAccelerationStructureTypeKHR = 0;
pub const VkAccelerationStructureTypeKHR_VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_NV:
    VkAccelerationStructureTypeKHR = 1;
pub const VkAccelerationStructureTypeKHR_VK_ACCELERATION_STRUCTURE_TYPE_MAX_ENUM_KHR:
    VkAccelerationStructureTypeKHR = 2147483647;
pub const VkCopyAccelerationStructureModeKHR_VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_KHR:
    VkCopyAccelerationStructureModeKHR = 0;
pub const VkCopyAccelerationStructureModeKHR_VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR:
    VkCopyAccelerationStructureModeKHR = 1;
pub const VkCopyAccelerationStructureModeKHR_VK_COPY_ACCELERATION_STRUCTURE_MODE_SERIALIZE_KHR:
    VkCopyAccelerationStructureModeKHR = 2;
pub const VkCopyAccelerationStructureModeKHR_VK_COPY_ACCELERATION_STRUCTURE_MODE_DESERIALIZE_KHR:
    VkCopyAccelerationStructureModeKHR = 3;
pub const VkCopyAccelerationStructureModeKHR_VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_NV:
    VkCopyAccelerationStructureModeKHR = 0;
pub const VkCopyAccelerationStructureModeKHR_VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_NV:
    VkCopyAccelerationStructureModeKHR = 1;
pub const VkCopyAccelerationStructureModeKHR_VK_COPY_ACCELERATION_STRUCTURE_MODE_MAX_ENUM_KHR:
    VkCopyAccelerationStructureModeKHR = 2147483647;
pub const VkAccelerationStructureMemoryRequirementsTypeNV_VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV : VkAccelerationStructureMemoryRequirementsTypeNV = 0 ;
pub const VkAccelerationStructureMemoryRequirementsTypeNV_VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_NV : VkAccelerationStructureMemoryRequirementsTypeNV = 1 ;
pub const VkAccelerationStructureMemoryRequirementsTypeNV_VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV : VkAccelerationStructureMemoryRequirementsTypeNV = 2 ;
pub const VkAccelerationStructureMemoryRequirementsTypeNV_VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_MAX_ENUM_NV : VkAccelerationStructureMemoryRequirementsTypeNV = 2147483647 ;
pub const VkGeometryFlagBitsKHR_VK_GEOMETRY_OPAQUE_BIT_KHR: VkGeometryFlagBitsKHR = 1;
pub const VkGeometryFlagBitsKHR_VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR:
    VkGeometryFlagBitsKHR = 2;
pub const VkGeometryFlagBitsKHR_VK_GEOMETRY_OPAQUE_BIT_NV: VkGeometryFlagBitsKHR = 1;
pub const VkGeometryFlagBitsKHR_VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_NV:
    VkGeometryFlagBitsKHR = 2;
pub const VkGeometryFlagBitsKHR_VK_GEOMETRY_FLAG_BITS_MAX_ENUM_KHR: VkGeometryFlagBitsKHR =
    2147483647;
pub const VkGeometryInstanceFlagBitsKHR_VK_GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR : VkGeometryInstanceFlagBitsKHR = 1 ;
pub const VkGeometryInstanceFlagBitsKHR_VK_GEOMETRY_INSTANCE_TRIANGLE_FLIP_FACING_BIT_KHR:
    VkGeometryInstanceFlagBitsKHR = 2;
pub const VkGeometryInstanceFlagBitsKHR_VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR:
    VkGeometryInstanceFlagBitsKHR = 4;
pub const VkGeometryInstanceFlagBitsKHR_VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR:
    VkGeometryInstanceFlagBitsKHR = 8;
pub const VkGeometryInstanceFlagBitsKHR_VK_GEOMETRY_INSTANCE_FORCE_OPACITY_MICROMAP_2_STATE_EXT:
    VkGeometryInstanceFlagBitsKHR = 16;
pub const VkGeometryInstanceFlagBitsKHR_VK_GEOMETRY_INSTANCE_DISABLE_OPACITY_MICROMAPS_EXT:
    VkGeometryInstanceFlagBitsKHR = 32;
pub const VkGeometryInstanceFlagBitsKHR_VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_KHR : VkGeometryInstanceFlagBitsKHR = 2 ;
pub const VkGeometryInstanceFlagBitsKHR_VK_GEOMETRY_INSTANCE_TRIANGLE_CULL_DISABLE_BIT_NV:
    VkGeometryInstanceFlagBitsKHR = 1;
pub const VkGeometryInstanceFlagBitsKHR_VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_NV : VkGeometryInstanceFlagBitsKHR = 2 ;
pub const VkGeometryInstanceFlagBitsKHR_VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_NV:
    VkGeometryInstanceFlagBitsKHR = 4;
pub const VkGeometryInstanceFlagBitsKHR_VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_NV:
    VkGeometryInstanceFlagBitsKHR = 8;
pub const VkGeometryInstanceFlagBitsKHR_VK_GEOMETRY_INSTANCE_FLAG_BITS_MAX_ENUM_KHR:
    VkGeometryInstanceFlagBitsKHR = 2147483647;
pub const VkBuildAccelerationStructureFlagBitsKHR_VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR : VkBuildAccelerationStructureFlagBitsKHR = 1 ;
pub const VkBuildAccelerationStructureFlagBitsKHR_VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR : VkBuildAccelerationStructureFlagBitsKHR = 2 ;
pub const VkBuildAccelerationStructureFlagBitsKHR_VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR : VkBuildAccelerationStructureFlagBitsKHR = 4 ;
pub const VkBuildAccelerationStructureFlagBitsKHR_VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR : VkBuildAccelerationStructureFlagBitsKHR = 8 ;
pub const VkBuildAccelerationStructureFlagBitsKHR_VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR : VkBuildAccelerationStructureFlagBitsKHR = 16 ;
pub const VkBuildAccelerationStructureFlagBitsKHR_VK_BUILD_ACCELERATION_STRUCTURE_MOTION_BIT_NV:
    VkBuildAccelerationStructureFlagBitsKHR = 32;
pub const VkBuildAccelerationStructureFlagBitsKHR_VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_OPACITY_MICROMAP_UPDATE_EXT : VkBuildAccelerationStructureFlagBitsKHR = 64 ;
pub const VkBuildAccelerationStructureFlagBitsKHR_VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_DISABLE_OPACITY_MICROMAPS_EXT : VkBuildAccelerationStructureFlagBitsKHR = 128 ;
pub const VkBuildAccelerationStructureFlagBitsKHR_VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_OPACITY_MICROMAP_DATA_UPDATE_EXT : VkBuildAccelerationStructureFlagBitsKHR = 256 ;
pub const VkBuildAccelerationStructureFlagBitsKHR_VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_DATA_ACCESS_KHR : VkBuildAccelerationStructureFlagBitsKHR = 2048 ;
pub const VkBuildAccelerationStructureFlagBitsKHR_VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_NV : VkBuildAccelerationStructureFlagBitsKHR = 1 ;
pub const VkBuildAccelerationStructureFlagBitsKHR_VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_NV : VkBuildAccelerationStructureFlagBitsKHR = 2 ;
pub const VkBuildAccelerationStructureFlagBitsKHR_VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_NV : VkBuildAccelerationStructureFlagBitsKHR = 4 ;
pub const VkBuildAccelerationStructureFlagBitsKHR_VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_NV : VkBuildAccelerationStructureFlagBitsKHR = 8 ;
pub const VkBuildAccelerationStructureFlagBitsKHR_VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_NV : VkBuildAccelerationStructureFlagBitsKHR = 16 ;
pub const VkBuildAccelerationStructureFlagBitsKHR_VK_BUILD_ACCELERATION_STRUCTURE_FLAG_BITS_MAX_ENUM_KHR : VkBuildAccelerationStructureFlagBitsKHR = 2147483647 ;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkRayTracingShaderGroupCreateInfoNV"]
        [::core::mem::size_of::<VkRayTracingShaderGroupCreateInfoNV>() - 28usize];
    ["Alignment of VkRayTracingShaderGroupCreateInfoNV"]
        [::core::mem::align_of::<VkRayTracingShaderGroupCreateInfoNV>() - 4usize];
    ["Offset of field: VkRayTracingShaderGroupCreateInfoNV::sType"]
        [::core::mem::offset_of!(VkRayTracingShaderGroupCreateInfoNV, sType) - 0usize];
    ["Offset of field: VkRayTracingShaderGroupCreateInfoNV::pNext"]
        [::core::mem::offset_of!(VkRayTracingShaderGroupCreateInfoNV, pNext) - 4usize];
    ["Offset of field: VkRayTracingShaderGroupCreateInfoNV::type_"]
        [::core::mem::offset_of!(VkRayTracingShaderGroupCreateInfoNV, type_) - 8usize];
    ["Offset of field: VkRayTracingShaderGroupCreateInfoNV::generalShader"]
        [::core::mem::offset_of!(VkRayTracingShaderGroupCreateInfoNV, generalShader) - 12usize];
    ["Offset of field: VkRayTracingShaderGroupCreateInfoNV::closestHitShader"]
        [::core::mem::offset_of!(VkRayTracingShaderGroupCreateInfoNV, closestHitShader) - 16usize];
    ["Offset of field: VkRayTracingShaderGroupCreateInfoNV::anyHitShader"]
        [::core::mem::offset_of!(VkRayTracingShaderGroupCreateInfoNV, anyHitShader) - 20usize];
    ["Offset of field: VkRayTracingShaderGroupCreateInfoNV::intersectionShader"][::core::mem::offset_of!(
        VkRayTracingShaderGroupCreateInfoNV,
        intersectionShader
    ) - 24usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkRayTracingPipelineCreateInfoNV"]
        [::core::mem::size_of::<VkRayTracingPipelineCreateInfoNV>() - 56usize];
    ["Alignment of VkRayTracingPipelineCreateInfoNV"]
        [::core::mem::align_of::<VkRayTracingPipelineCreateInfoNV>() - 8usize];
    ["Offset of field: VkRayTracingPipelineCreateInfoNV::sType"]
        [::core::mem::offset_of!(VkRayTracingPipelineCreateInfoNV, sType) - 0usize];
    ["Offset of field: VkRayTracingPipelineCreateInfoNV::pNext"]
        [::core::mem::offset_of!(VkRayTracingPipelineCreateInfoNV, pNext) - 4usize];
    ["Offset of field: VkRayTracingPipelineCreateInfoNV::flags"]
        [::core::mem::offset_of!(VkRayTracingPipelineCreateInfoNV, flags) - 8usize];
    ["Offset of field: VkRayTracingPipelineCreateInfoNV::stageCount"]
        [::core::mem::offset_of!(VkRayTracingPipelineCreateInfoNV, stageCount) - 12usize];
    ["Offset of field: VkRayTracingPipelineCreateInfoNV::pStages"]
        [::core::mem::offset_of!(VkRayTracingPipelineCreateInfoNV, pStages) - 16usize];
    ["Offset of field: VkRayTracingPipelineCreateInfoNV::groupCount"]
        [::core::mem::offset_of!(VkRayTracingPipelineCreateInfoNV, groupCount) - 20usize];
    ["Offset of field: VkRayTracingPipelineCreateInfoNV::pGroups"]
        [::core::mem::offset_of!(VkRayTracingPipelineCreateInfoNV, pGroups) - 24usize];
    ["Offset of field: VkRayTracingPipelineCreateInfoNV::maxRecursionDepth"]
        [::core::mem::offset_of!(VkRayTracingPipelineCreateInfoNV, maxRecursionDepth) - 28usize];
    ["Offset of field: VkRayTracingPipelineCreateInfoNV::layout"]
        [::core::mem::offset_of!(VkRayTracingPipelineCreateInfoNV, layout) - 32usize];
    ["Offset of field: VkRayTracingPipelineCreateInfoNV::basePipelineHandle"]
        [::core::mem::offset_of!(VkRayTracingPipelineCreateInfoNV, basePipelineHandle) - 40usize];
    ["Offset of field: VkRayTracingPipelineCreateInfoNV::basePipelineIndex"]
        [::core::mem::offset_of!(VkRayTracingPipelineCreateInfoNV, basePipelineIndex) - 48usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkGeometryTrianglesNV"][::core::mem::size_of::<VkGeometryTrianglesNV>() - 88usize];
    ["Alignment of VkGeometryTrianglesNV"]
        [::core::mem::align_of::<VkGeometryTrianglesNV>() - 8usize];
    ["Offset of field: VkGeometryTrianglesNV::sType"]
        [::core::mem::offset_of!(VkGeometryTrianglesNV, sType) - 0usize];
    ["Offset of field: VkGeometryTrianglesNV::pNext"]
        [::core::mem::offset_of!(VkGeometryTrianglesNV, pNext) - 4usize];
    ["Offset of field: VkGeometryTrianglesNV::vertexData"]
        [::core::mem::offset_of!(VkGeometryTrianglesNV, vertexData) - 8usize];
    ["Offset of field: VkGeometryTrianglesNV::vertexOffset"]
        [::core::mem::offset_of!(VkGeometryTrianglesNV, vertexOffset) - 16usize];
    ["Offset of field: VkGeometryTrianglesNV::vertexCount"]
        [::core::mem::offset_of!(VkGeometryTrianglesNV, vertexCount) - 24usize];
    ["Offset of field: VkGeometryTrianglesNV::vertexStride"]
        [::core::mem::offset_of!(VkGeometryTrianglesNV, vertexStride) - 32usize];
    ["Offset of field: VkGeometryTrianglesNV::vertexFormat"]
        [::core::mem::offset_of!(VkGeometryTrianglesNV, vertexFormat) - 40usize];
    ["Offset of field: VkGeometryTrianglesNV::indexData"]
        [::core::mem::offset_of!(VkGeometryTrianglesNV, indexData) - 48usize];
    ["Offset of field: VkGeometryTrianglesNV::indexOffset"]
        [::core::mem::offset_of!(VkGeometryTrianglesNV, indexOffset) - 56usize];
    ["Offset of field: VkGeometryTrianglesNV::indexCount"]
        [::core::mem::offset_of!(VkGeometryTrianglesNV, indexCount) - 64usize];
    ["Offset of field: VkGeometryTrianglesNV::indexType"]
        [::core::mem::offset_of!(VkGeometryTrianglesNV, indexType) - 68usize];
    ["Offset of field: VkGeometryTrianglesNV::transformData"]
        [::core::mem::offset_of!(VkGeometryTrianglesNV, transformData) - 72usize];
    ["Offset of field: VkGeometryTrianglesNV::transformOffset"]
        [::core::mem::offset_of!(VkGeometryTrianglesNV, transformOffset) - 80usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkGeometryAABBNV"][::core::mem::size_of::<VkGeometryAABBNV>() - 32usize];
    ["Alignment of VkGeometryAABBNV"][::core::mem::align_of::<VkGeometryAABBNV>() - 8usize];
    ["Offset of field: VkGeometryAABBNV::sType"]
        [::core::mem::offset_of!(VkGeometryAABBNV, sType) - 0usize];
    ["Offset of field: VkGeometryAABBNV::pNext"]
        [::core::mem::offset_of!(VkGeometryAABBNV, pNext) - 4usize];
    ["Offset of field: VkGeometryAABBNV::aabbData"]
        [::core::mem::offset_of!(VkGeometryAABBNV, aabbData) - 8usize];
    ["Offset of field: VkGeometryAABBNV::numAABBs"]
        [::core::mem::offset_of!(VkGeometryAABBNV, numAABBs) - 16usize];
    ["Offset of field: VkGeometryAABBNV::stride"]
        [::core::mem::offset_of!(VkGeometryAABBNV, stride) - 20usize];
    ["Offset of field: VkGeometryAABBNV::offset"]
        [::core::mem::offset_of!(VkGeometryAABBNV, offset) - 24usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkGeometryDataNV"][::core::mem::size_of::<VkGeometryDataNV>() - 120usize];
    ["Alignment of VkGeometryDataNV"][::core::mem::align_of::<VkGeometryDataNV>() - 8usize];
    ["Offset of field: VkGeometryDataNV::triangles"]
        [::core::mem::offset_of!(VkGeometryDataNV, triangles) - 0usize];
    ["Offset of field: VkGeometryDataNV::aabbs"]
        [::core::mem::offset_of!(VkGeometryDataNV, aabbs) - 88usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkGeometryNV"][::core::mem::size_of::<VkGeometryNV>() - 144usize];
    ["Alignment of VkGeometryNV"][::core::mem::align_of::<VkGeometryNV>() - 8usize];
    ["Offset of field: VkGeometryNV::sType"][::core::mem::offset_of!(VkGeometryNV, sType) - 0usize];
    ["Offset of field: VkGeometryNV::pNext"][::core::mem::offset_of!(VkGeometryNV, pNext) - 4usize];
    ["Offset of field: VkGeometryNV::geometryType"]
        [::core::mem::offset_of!(VkGeometryNV, geometryType) - 8usize];
    ["Offset of field: VkGeometryNV::geometry"]
        [::core::mem::offset_of!(VkGeometryNV, geometry) - 16usize];
    ["Offset of field: VkGeometryNV::flags"]
        [::core::mem::offset_of!(VkGeometryNV, flags) - 136usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkAccelerationStructureInfoNV"]
        [::core::mem::size_of::<VkAccelerationStructureInfoNV>() - 28usize];
    ["Alignment of VkAccelerationStructureInfoNV"]
        [::core::mem::align_of::<VkAccelerationStructureInfoNV>() - 4usize];
    ["Offset of field: VkAccelerationStructureInfoNV::sType"]
        [::core::mem::offset_of!(VkAccelerationStructureInfoNV, sType) - 0usize];
    ["Offset of field: VkAccelerationStructureInfoNV::pNext"]
        [::core::mem::offset_of!(VkAccelerationStructureInfoNV, pNext) - 4usize];
    ["Offset of field: VkAccelerationStructureInfoNV::type_"]
        [::core::mem::offset_of!(VkAccelerationStructureInfoNV, type_) - 8usize];
    ["Offset of field: VkAccelerationStructureInfoNV::flags"]
        [::core::mem::offset_of!(VkAccelerationStructureInfoNV, flags) - 12usize];
    ["Offset of field: VkAccelerationStructureInfoNV::instanceCount"]
        [::core::mem::offset_of!(VkAccelerationStructureInfoNV, instanceCount) - 16usize];
    ["Offset of field: VkAccelerationStructureInfoNV::geometryCount"]
        [::core::mem::offset_of!(VkAccelerationStructureInfoNV, geometryCount) - 20usize];
    ["Offset of field: VkAccelerationStructureInfoNV::pGeometries"]
        [::core::mem::offset_of!(VkAccelerationStructureInfoNV, pGeometries) - 24usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkAccelerationStructureCreateInfoNV"]
        [::core::mem::size_of::<VkAccelerationStructureCreateInfoNV>() - 48usize];
    ["Alignment of VkAccelerationStructureCreateInfoNV"]
        [::core::mem::align_of::<VkAccelerationStructureCreateInfoNV>() - 8usize];
    ["Offset of field: VkAccelerationStructureCreateInfoNV::sType"]
        [::core::mem::offset_of!(VkAccelerationStructureCreateInfoNV, sType) - 0usize];
    ["Offset of field: VkAccelerationStructureCreateInfoNV::pNext"]
        [::core::mem::offset_of!(VkAccelerationStructureCreateInfoNV, pNext) - 4usize];
    ["Offset of field: VkAccelerationStructureCreateInfoNV::compactedSize"]
        [::core::mem::offset_of!(VkAccelerationStructureCreateInfoNV, compactedSize) - 8usize];
    ["Offset of field: VkAccelerationStructureCreateInfoNV::info"]
        [::core::mem::offset_of!(VkAccelerationStructureCreateInfoNV, info) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkBindAccelerationStructureMemoryInfoNV"]
        [::core::mem::size_of::<VkBindAccelerationStructureMemoryInfoNV>() - 40usize];
    ["Alignment of VkBindAccelerationStructureMemoryInfoNV"]
        [::core::mem::align_of::<VkBindAccelerationStructureMemoryInfoNV>() - 8usize];
    ["Offset of field: VkBindAccelerationStructureMemoryInfoNV::sType"]
        [::core::mem::offset_of!(VkBindAccelerationStructureMemoryInfoNV, sType) - 0usize];
    ["Offset of field: VkBindAccelerationStructureMemoryInfoNV::pNext"]
        [::core::mem::offset_of!(VkBindAccelerationStructureMemoryInfoNV, pNext) - 4usize];
    ["Offset of field: VkBindAccelerationStructureMemoryInfoNV::accelerationStructure"][::core::mem::offset_of!(
        VkBindAccelerationStructureMemoryInfoNV,
        accelerationStructure
    ) - 8usize];
    ["Offset of field: VkBindAccelerationStructureMemoryInfoNV::memory"]
        [::core::mem::offset_of!(VkBindAccelerationStructureMemoryInfoNV, memory) - 16usize];
    ["Offset of field: VkBindAccelerationStructureMemoryInfoNV::memoryOffset"]
        [::core::mem::offset_of!(VkBindAccelerationStructureMemoryInfoNV, memoryOffset) - 24usize];
    ["Offset of field: VkBindAccelerationStructureMemoryInfoNV::deviceIndexCount"][::core::mem::offset_of!(
        VkBindAccelerationStructureMemoryInfoNV,
        deviceIndexCount
    ) - 32usize];
    ["Offset of field: VkBindAccelerationStructureMemoryInfoNV::pDeviceIndices"][::core::mem::offset_of!(
        VkBindAccelerationStructureMemoryInfoNV,
        pDeviceIndices
    ) - 36usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkWriteDescriptorSetAccelerationStructureNV"]
        [::core::mem::size_of::<VkWriteDescriptorSetAccelerationStructureNV>() - 16usize];
    ["Alignment of VkWriteDescriptorSetAccelerationStructureNV"]
        [::core::mem::align_of::<VkWriteDescriptorSetAccelerationStructureNV>() - 4usize];
    ["Offset of field: VkWriteDescriptorSetAccelerationStructureNV::sType"]
        [::core::mem::offset_of!(VkWriteDescriptorSetAccelerationStructureNV, sType) - 0usize];
    ["Offset of field: VkWriteDescriptorSetAccelerationStructureNV::pNext"]
        [::core::mem::offset_of!(VkWriteDescriptorSetAccelerationStructureNV, pNext) - 4usize];
    ["Offset of field: VkWriteDescriptorSetAccelerationStructureNV::accelerationStructureCount"][::core::mem::offset_of!(
        VkWriteDescriptorSetAccelerationStructureNV,
        accelerationStructureCount
    )
        - 8usize];
    ["Offset of field: VkWriteDescriptorSetAccelerationStructureNV::pAccelerationStructures"][::core::mem::offset_of!(
        VkWriteDescriptorSetAccelerationStructureNV,
        pAccelerationStructures
    )
        - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkAccelerationStructureMemoryRequirementsInfoNV"]
        [::core::mem::size_of::<VkAccelerationStructureMemoryRequirementsInfoNV>() - 24usize];
    ["Alignment of VkAccelerationStructureMemoryRequirementsInfoNV"]
        [::core::mem::align_of::<VkAccelerationStructureMemoryRequirementsInfoNV>() - 8usize];
    ["Offset of field: VkAccelerationStructureMemoryRequirementsInfoNV::sType"]
        [::core::mem::offset_of!(VkAccelerationStructureMemoryRequirementsInfoNV, sType) - 0usize];
    ["Offset of field: VkAccelerationStructureMemoryRequirementsInfoNV::pNext"]
        [::core::mem::offset_of!(VkAccelerationStructureMemoryRequirementsInfoNV, pNext) - 4usize];
    ["Offset of field: VkAccelerationStructureMemoryRequirementsInfoNV::type_"]
        [::core::mem::offset_of!(VkAccelerationStructureMemoryRequirementsInfoNV, type_) - 8usize];
    ["Offset of field: VkAccelerationStructureMemoryRequirementsInfoNV::accelerationStructure"][::core::mem::offset_of!(
        VkAccelerationStructureMemoryRequirementsInfoNV,
        accelerationStructure
    )
        - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceRayTracingPropertiesNV"]
        [::core::mem::size_of::<VkPhysicalDeviceRayTracingPropertiesNV>() - 56usize];
    ["Alignment of VkPhysicalDeviceRayTracingPropertiesNV"]
        [::core::mem::align_of::<VkPhysicalDeviceRayTracingPropertiesNV>() - 8usize];
    ["Offset of field: VkPhysicalDeviceRayTracingPropertiesNV::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceRayTracingPropertiesNV, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceRayTracingPropertiesNV::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceRayTracingPropertiesNV, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceRayTracingPropertiesNV::shaderGroupHandleSize"][::core::mem::offset_of!(
        VkPhysicalDeviceRayTracingPropertiesNV,
        shaderGroupHandleSize
    ) - 8usize];
    ["Offset of field: VkPhysicalDeviceRayTracingPropertiesNV::maxRecursionDepth"][::core::mem::offset_of!(
        VkPhysicalDeviceRayTracingPropertiesNV,
        maxRecursionDepth
    ) - 12usize];
    ["Offset of field: VkPhysicalDeviceRayTracingPropertiesNV::maxShaderGroupStride"][::core::mem::offset_of!(
        VkPhysicalDeviceRayTracingPropertiesNV,
        maxShaderGroupStride
    ) - 16usize];
    ["Offset of field: VkPhysicalDeviceRayTracingPropertiesNV::shaderGroupBaseAlignment"][::core::mem::offset_of!(
        VkPhysicalDeviceRayTracingPropertiesNV,
        shaderGroupBaseAlignment
    )
        - 20usize];
    ["Offset of field: VkPhysicalDeviceRayTracingPropertiesNV::maxGeometryCount"][::core::mem::offset_of!(
        VkPhysicalDeviceRayTracingPropertiesNV,
        maxGeometryCount
    ) - 24usize];
    ["Offset of field: VkPhysicalDeviceRayTracingPropertiesNV::maxInstanceCount"][::core::mem::offset_of!(
        VkPhysicalDeviceRayTracingPropertiesNV,
        maxInstanceCount
    ) - 32usize];
    ["Offset of field: VkPhysicalDeviceRayTracingPropertiesNV::maxTriangleCount"][::core::mem::offset_of!(
        VkPhysicalDeviceRayTracingPropertiesNV,
        maxTriangleCount
    ) - 40usize];
    ["Offset of field: VkPhysicalDeviceRayTracingPropertiesNV::maxDescriptorSetAccelerationStructures"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceRayTracingPropertiesNV , maxDescriptorSetAccelerationStructures) - 48usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkTransformMatrixKHR"][::core::mem::size_of::<VkTransformMatrixKHR>() - 48usize];
    ["Alignment of VkTransformMatrixKHR"][::core::mem::align_of::<VkTransformMatrixKHR>() - 4usize];
    ["Offset of field: VkTransformMatrixKHR::matrix"]
        [::core::mem::offset_of!(VkTransformMatrixKHR, matrix) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkAabbPositionsKHR"][::core::mem::size_of::<VkAabbPositionsKHR>() - 24usize];
    ["Alignment of VkAabbPositionsKHR"][::core::mem::align_of::<VkAabbPositionsKHR>() - 4usize];
    ["Offset of field: VkAabbPositionsKHR::minX"]
        [::core::mem::offset_of!(VkAabbPositionsKHR, minX) - 0usize];
    ["Offset of field: VkAabbPositionsKHR::minY"]
        [::core::mem::offset_of!(VkAabbPositionsKHR, minY) - 4usize];
    ["Offset of field: VkAabbPositionsKHR::minZ"]
        [::core::mem::offset_of!(VkAabbPositionsKHR, minZ) - 8usize];
    ["Offset of field: VkAabbPositionsKHR::maxX"]
        [::core::mem::offset_of!(VkAabbPositionsKHR, maxX) - 12usize];
    ["Offset of field: VkAabbPositionsKHR::maxY"]
        [::core::mem::offset_of!(VkAabbPositionsKHR, maxY) - 16usize];
    ["Offset of field: VkAabbPositionsKHR::maxZ"]
        [::core::mem::offset_of!(VkAabbPositionsKHR, maxZ) - 20usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkAccelerationStructureInstanceKHR"]
        [::core::mem::size_of::<VkAccelerationStructureInstanceKHR>() - 64usize];
    ["Alignment of VkAccelerationStructureInstanceKHR"]
        [::core::mem::align_of::<VkAccelerationStructureInstanceKHR>() - 8usize];
    ["Offset of field: VkAccelerationStructureInstanceKHR::transform"]
        [::core::mem::offset_of!(VkAccelerationStructureInstanceKHR, transform) - 0usize];
    ["Offset of field: VkAccelerationStructureInstanceKHR::accelerationStructureReference"][::core::mem::offset_of!(
        VkAccelerationStructureInstanceKHR,
        accelerationStructureReference
    )
        - 56usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV"]
        [::core::mem::size_of::<VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV>() - 12usize];
    ["Alignment of VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV"]
        [::core::mem::align_of::<VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV>() - 4usize];
    ["Offset of field: VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV::sType"][::core::mem::offset_of!(
        VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV::pNext"][::core::mem::offset_of!(
        VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV,
        pNext
    ) - 4usize];
    ["Offset of field: VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV::representativeFragmentTest"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV , representativeFragmentTest) - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineRepresentativeFragmentTestStateCreateInfoNV"]
        [::core::mem::size_of::<VkPipelineRepresentativeFragmentTestStateCreateInfoNV>() - 12usize];
    ["Alignment of VkPipelineRepresentativeFragmentTestStateCreateInfoNV"]
        [::core::mem::align_of::<VkPipelineRepresentativeFragmentTestStateCreateInfoNV>() - 4usize];
    ["Offset of field: VkPipelineRepresentativeFragmentTestStateCreateInfoNV::sType"][::core::mem::offset_of!(
        VkPipelineRepresentativeFragmentTestStateCreateInfoNV,
        sType
    ) - 0usize];
    ["Offset of field: VkPipelineRepresentativeFragmentTestStateCreateInfoNV::pNext"][::core::mem::offset_of!(
        VkPipelineRepresentativeFragmentTestStateCreateInfoNV,
        pNext
    ) - 4usize];
    ["Offset of field: VkPipelineRepresentativeFragmentTestStateCreateInfoNV::representativeFragmentTestEnable"] [:: core :: mem :: offset_of ! (VkPipelineRepresentativeFragmentTestStateCreateInfoNV , representativeFragmentTestEnable) - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceImageViewImageFormatInfoEXT"]
        [::core::mem::size_of::<VkPhysicalDeviceImageViewImageFormatInfoEXT>() - 12usize];
    ["Alignment of VkPhysicalDeviceImageViewImageFormatInfoEXT"]
        [::core::mem::align_of::<VkPhysicalDeviceImageViewImageFormatInfoEXT>() - 4usize];
    ["Offset of field: VkPhysicalDeviceImageViewImageFormatInfoEXT::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceImageViewImageFormatInfoEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceImageViewImageFormatInfoEXT::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceImageViewImageFormatInfoEXT, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceImageViewImageFormatInfoEXT::imageViewType"][::core::mem::offset_of!(
        VkPhysicalDeviceImageViewImageFormatInfoEXT,
        imageViewType
    ) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkFilterCubicImageViewImageFormatPropertiesEXT"]
        [::core::mem::size_of::<VkFilterCubicImageViewImageFormatPropertiesEXT>() - 16usize];
    ["Alignment of VkFilterCubicImageViewImageFormatPropertiesEXT"]
        [::core::mem::align_of::<VkFilterCubicImageViewImageFormatPropertiesEXT>() - 4usize];
    ["Offset of field: VkFilterCubicImageViewImageFormatPropertiesEXT::sType"]
        [::core::mem::offset_of!(VkFilterCubicImageViewImageFormatPropertiesEXT, sType) - 0usize];
    ["Offset of field: VkFilterCubicImageViewImageFormatPropertiesEXT::pNext"]
        [::core::mem::offset_of!(VkFilterCubicImageViewImageFormatPropertiesEXT, pNext) - 4usize];
    ["Offset of field: VkFilterCubicImageViewImageFormatPropertiesEXT::filterCubic"][::core::mem::offset_of!(
        VkFilterCubicImageViewImageFormatPropertiesEXT,
        filterCubic
    ) - 8usize];
    ["Offset of field: VkFilterCubicImageViewImageFormatPropertiesEXT::filterCubicMinmax"][::core::mem::offset_of!(
        VkFilterCubicImageViewImageFormatPropertiesEXT,
        filterCubicMinmax
    )
        - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkImportMemoryHostPointerInfoEXT"]
        [::core::mem::size_of::<VkImportMemoryHostPointerInfoEXT>() - 16usize];
    ["Alignment of VkImportMemoryHostPointerInfoEXT"]
        [::core::mem::align_of::<VkImportMemoryHostPointerInfoEXT>() - 4usize];
    ["Offset of field: VkImportMemoryHostPointerInfoEXT::sType"]
        [::core::mem::offset_of!(VkImportMemoryHostPointerInfoEXT, sType) - 0usize];
    ["Offset of field: VkImportMemoryHostPointerInfoEXT::pNext"]
        [::core::mem::offset_of!(VkImportMemoryHostPointerInfoEXT, pNext) - 4usize];
    ["Offset of field: VkImportMemoryHostPointerInfoEXT::handleType"]
        [::core::mem::offset_of!(VkImportMemoryHostPointerInfoEXT, handleType) - 8usize];
    ["Offset of field: VkImportMemoryHostPointerInfoEXT::pHostPointer"]
        [::core::mem::offset_of!(VkImportMemoryHostPointerInfoEXT, pHostPointer) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkMemoryHostPointerPropertiesEXT"]
        [::core::mem::size_of::<VkMemoryHostPointerPropertiesEXT>() - 12usize];
    ["Alignment of VkMemoryHostPointerPropertiesEXT"]
        [::core::mem::align_of::<VkMemoryHostPointerPropertiesEXT>() - 4usize];
    ["Offset of field: VkMemoryHostPointerPropertiesEXT::sType"]
        [::core::mem::offset_of!(VkMemoryHostPointerPropertiesEXT, sType) - 0usize];
    ["Offset of field: VkMemoryHostPointerPropertiesEXT::pNext"]
        [::core::mem::offset_of!(VkMemoryHostPointerPropertiesEXT, pNext) - 4usize];
    ["Offset of field: VkMemoryHostPointerPropertiesEXT::memoryTypeBits"]
        [::core::mem::offset_of!(VkMemoryHostPointerPropertiesEXT, memoryTypeBits) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceExternalMemoryHostPropertiesEXT"]
        [::core::mem::size_of::<VkPhysicalDeviceExternalMemoryHostPropertiesEXT>() - 16usize];
    ["Alignment of VkPhysicalDeviceExternalMemoryHostPropertiesEXT"]
        [::core::mem::align_of::<VkPhysicalDeviceExternalMemoryHostPropertiesEXT>() - 8usize];
    ["Offset of field: VkPhysicalDeviceExternalMemoryHostPropertiesEXT::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceExternalMemoryHostPropertiesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceExternalMemoryHostPropertiesEXT::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceExternalMemoryHostPropertiesEXT, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceExternalMemoryHostPropertiesEXT::minImportedHostPointerAlignment"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceExternalMemoryHostPropertiesEXT , minImportedHostPointerAlignment) - 8usize] ;
};
pub const VkPipelineCompilerControlFlagBitsAMD_VK_PIPELINE_COMPILER_CONTROL_FLAG_BITS_MAX_ENUM_AMD : VkPipelineCompilerControlFlagBitsAMD = 2147483647 ;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineCompilerControlCreateInfoAMD"]
        [::core::mem::size_of::<VkPipelineCompilerControlCreateInfoAMD>() - 12usize];
    ["Alignment of VkPipelineCompilerControlCreateInfoAMD"]
        [::core::mem::align_of::<VkPipelineCompilerControlCreateInfoAMD>() - 4usize];
    ["Offset of field: VkPipelineCompilerControlCreateInfoAMD::sType"]
        [::core::mem::offset_of!(VkPipelineCompilerControlCreateInfoAMD, sType) - 0usize];
    ["Offset of field: VkPipelineCompilerControlCreateInfoAMD::pNext"]
        [::core::mem::offset_of!(VkPipelineCompilerControlCreateInfoAMD, pNext) - 4usize];
    ["Offset of field: VkPipelineCompilerControlCreateInfoAMD::compilerControlFlags"][::core::mem::offset_of!(
        VkPipelineCompilerControlCreateInfoAMD,
        compilerControlFlags
    ) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceShaderCorePropertiesAMD"]
        [::core::mem::size_of::<VkPhysicalDeviceShaderCorePropertiesAMD>() - 64usize];
    ["Alignment of VkPhysicalDeviceShaderCorePropertiesAMD"]
        [::core::mem::align_of::<VkPhysicalDeviceShaderCorePropertiesAMD>() - 4usize];
    ["Offset of field: VkPhysicalDeviceShaderCorePropertiesAMD::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceShaderCorePropertiesAMD, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceShaderCorePropertiesAMD::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceShaderCorePropertiesAMD, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceShaderCorePropertiesAMD::shaderEngineCount"][::core::mem::offset_of!(
        VkPhysicalDeviceShaderCorePropertiesAMD,
        shaderEngineCount
    ) - 8usize];
    ["Offset of field: VkPhysicalDeviceShaderCorePropertiesAMD::shaderArraysPerEngineCount"][::core::mem::offset_of!(
        VkPhysicalDeviceShaderCorePropertiesAMD,
        shaderArraysPerEngineCount
    )
        - 12usize];
    ["Offset of field: VkPhysicalDeviceShaderCorePropertiesAMD::computeUnitsPerShaderArray"][::core::mem::offset_of!(
        VkPhysicalDeviceShaderCorePropertiesAMD,
        computeUnitsPerShaderArray
    )
        - 16usize];
    ["Offset of field: VkPhysicalDeviceShaderCorePropertiesAMD::simdPerComputeUnit"][::core::mem::offset_of!(
        VkPhysicalDeviceShaderCorePropertiesAMD,
        simdPerComputeUnit
    ) - 20usize];
    ["Offset of field: VkPhysicalDeviceShaderCorePropertiesAMD::wavefrontsPerSimd"][::core::mem::offset_of!(
        VkPhysicalDeviceShaderCorePropertiesAMD,
        wavefrontsPerSimd
    ) - 24usize];
    ["Offset of field: VkPhysicalDeviceShaderCorePropertiesAMD::wavefrontSize"]
        [::core::mem::offset_of!(VkPhysicalDeviceShaderCorePropertiesAMD, wavefrontSize) - 28usize];
    ["Offset of field: VkPhysicalDeviceShaderCorePropertiesAMD::sgprsPerSimd"]
        [::core::mem::offset_of!(VkPhysicalDeviceShaderCorePropertiesAMD, sgprsPerSimd) - 32usize];
    ["Offset of field: VkPhysicalDeviceShaderCorePropertiesAMD::minSgprAllocation"][::core::mem::offset_of!(
        VkPhysicalDeviceShaderCorePropertiesAMD,
        minSgprAllocation
    ) - 36usize];
    ["Offset of field: VkPhysicalDeviceShaderCorePropertiesAMD::maxSgprAllocation"][::core::mem::offset_of!(
        VkPhysicalDeviceShaderCorePropertiesAMD,
        maxSgprAllocation
    ) - 40usize];
    ["Offset of field: VkPhysicalDeviceShaderCorePropertiesAMD::sgprAllocationGranularity"][::core::mem::offset_of!(
        VkPhysicalDeviceShaderCorePropertiesAMD,
        sgprAllocationGranularity
    )
        - 44usize];
    ["Offset of field: VkPhysicalDeviceShaderCorePropertiesAMD::vgprsPerSimd"]
        [::core::mem::offset_of!(VkPhysicalDeviceShaderCorePropertiesAMD, vgprsPerSimd) - 48usize];
    ["Offset of field: VkPhysicalDeviceShaderCorePropertiesAMD::minVgprAllocation"][::core::mem::offset_of!(
        VkPhysicalDeviceShaderCorePropertiesAMD,
        minVgprAllocation
    ) - 52usize];
    ["Offset of field: VkPhysicalDeviceShaderCorePropertiesAMD::maxVgprAllocation"][::core::mem::offset_of!(
        VkPhysicalDeviceShaderCorePropertiesAMD,
        maxVgprAllocation
    ) - 56usize];
    ["Offset of field: VkPhysicalDeviceShaderCorePropertiesAMD::vgprAllocationGranularity"][::core::mem::offset_of!(
        VkPhysicalDeviceShaderCorePropertiesAMD,
        vgprAllocationGranularity
    )
        - 60usize];
};
pub const VkMemoryOverallocationBehaviorAMD_VK_MEMORY_OVERALLOCATION_BEHAVIOR_DEFAULT_AMD:
    VkMemoryOverallocationBehaviorAMD = 0;
pub const VkMemoryOverallocationBehaviorAMD_VK_MEMORY_OVERALLOCATION_BEHAVIOR_ALLOWED_AMD:
    VkMemoryOverallocationBehaviorAMD = 1;
pub const VkMemoryOverallocationBehaviorAMD_VK_MEMORY_OVERALLOCATION_BEHAVIOR_DISALLOWED_AMD:
    VkMemoryOverallocationBehaviorAMD = 2;
pub const VkMemoryOverallocationBehaviorAMD_VK_MEMORY_OVERALLOCATION_BEHAVIOR_MAX_ENUM_AMD:
    VkMemoryOverallocationBehaviorAMD = 2147483647;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDeviceMemoryOverallocationCreateInfoAMD"]
        [::core::mem::size_of::<VkDeviceMemoryOverallocationCreateInfoAMD>() - 12usize];
    ["Alignment of VkDeviceMemoryOverallocationCreateInfoAMD"]
        [::core::mem::align_of::<VkDeviceMemoryOverallocationCreateInfoAMD>() - 4usize];
    ["Offset of field: VkDeviceMemoryOverallocationCreateInfoAMD::sType"]
        [::core::mem::offset_of!(VkDeviceMemoryOverallocationCreateInfoAMD, sType) - 0usize];
    ["Offset of field: VkDeviceMemoryOverallocationCreateInfoAMD::pNext"]
        [::core::mem::offset_of!(VkDeviceMemoryOverallocationCreateInfoAMD, pNext) - 4usize];
    ["Offset of field: VkDeviceMemoryOverallocationCreateInfoAMD::overallocationBehavior"][::core::mem::offset_of!(
        VkDeviceMemoryOverallocationCreateInfoAMD,
        overallocationBehavior
    )
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT"]
        [::core::mem::size_of::<VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT>() - 12usize];
    ["Alignment of VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT"]
        [::core::mem::align_of::<VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT>() - 4usize];
    ["Offset of field: VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT::sType"][::core::mem::offset_of!(
        VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT::pNext"][::core::mem::offset_of!(
        VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT,
        pNext
    ) - 4usize];
    ["Offset of field: VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT::maxVertexAttribDivisor"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT , maxVertexAttribDivisor) - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceMeshShaderFeaturesNV"]
        [::core::mem::size_of::<VkPhysicalDeviceMeshShaderFeaturesNV>() - 16usize];
    ["Alignment of VkPhysicalDeviceMeshShaderFeaturesNV"]
        [::core::mem::align_of::<VkPhysicalDeviceMeshShaderFeaturesNV>() - 4usize];
    ["Offset of field: VkPhysicalDeviceMeshShaderFeaturesNV::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceMeshShaderFeaturesNV, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceMeshShaderFeaturesNV::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceMeshShaderFeaturesNV, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceMeshShaderFeaturesNV::taskShader"]
        [::core::mem::offset_of!(VkPhysicalDeviceMeshShaderFeaturesNV, taskShader) - 8usize];
    ["Offset of field: VkPhysicalDeviceMeshShaderFeaturesNV::meshShader"]
        [::core::mem::offset_of!(VkPhysicalDeviceMeshShaderFeaturesNV, meshShader) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceMeshShaderPropertiesNV"]
        [::core::mem::size_of::<VkPhysicalDeviceMeshShaderPropertiesNV>() - 76usize];
    ["Alignment of VkPhysicalDeviceMeshShaderPropertiesNV"]
        [::core::mem::align_of::<VkPhysicalDeviceMeshShaderPropertiesNV>() - 4usize];
    ["Offset of field: VkPhysicalDeviceMeshShaderPropertiesNV::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceMeshShaderPropertiesNV, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceMeshShaderPropertiesNV::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceMeshShaderPropertiesNV, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceMeshShaderPropertiesNV::maxDrawMeshTasksCount"][::core::mem::offset_of!(
        VkPhysicalDeviceMeshShaderPropertiesNV,
        maxDrawMeshTasksCount
    ) - 8usize];
    ["Offset of field: VkPhysicalDeviceMeshShaderPropertiesNV::maxTaskWorkGroupInvocations"][::core::mem::offset_of!(
        VkPhysicalDeviceMeshShaderPropertiesNV,
        maxTaskWorkGroupInvocations
    )
        - 12usize];
    ["Offset of field: VkPhysicalDeviceMeshShaderPropertiesNV::maxTaskWorkGroupSize"][::core::mem::offset_of!(
        VkPhysicalDeviceMeshShaderPropertiesNV,
        maxTaskWorkGroupSize
    ) - 16usize];
    ["Offset of field: VkPhysicalDeviceMeshShaderPropertiesNV::maxTaskTotalMemorySize"][::core::mem::offset_of!(
        VkPhysicalDeviceMeshShaderPropertiesNV,
        maxTaskTotalMemorySize
    )
        - 28usize];
    ["Offset of field: VkPhysicalDeviceMeshShaderPropertiesNV::maxTaskOutputCount"][::core::mem::offset_of!(
        VkPhysicalDeviceMeshShaderPropertiesNV,
        maxTaskOutputCount
    ) - 32usize];
    ["Offset of field: VkPhysicalDeviceMeshShaderPropertiesNV::maxMeshWorkGroupInvocations"][::core::mem::offset_of!(
        VkPhysicalDeviceMeshShaderPropertiesNV,
        maxMeshWorkGroupInvocations
    )
        - 36usize];
    ["Offset of field: VkPhysicalDeviceMeshShaderPropertiesNV::maxMeshWorkGroupSize"][::core::mem::offset_of!(
        VkPhysicalDeviceMeshShaderPropertiesNV,
        maxMeshWorkGroupSize
    ) - 40usize];
    ["Offset of field: VkPhysicalDeviceMeshShaderPropertiesNV::maxMeshTotalMemorySize"][::core::mem::offset_of!(
        VkPhysicalDeviceMeshShaderPropertiesNV,
        maxMeshTotalMemorySize
    )
        - 52usize];
    ["Offset of field: VkPhysicalDeviceMeshShaderPropertiesNV::maxMeshOutputVertices"][::core::mem::offset_of!(
        VkPhysicalDeviceMeshShaderPropertiesNV,
        maxMeshOutputVertices
    ) - 56usize];
    ["Offset of field: VkPhysicalDeviceMeshShaderPropertiesNV::maxMeshOutputPrimitives"][::core::mem::offset_of!(
        VkPhysicalDeviceMeshShaderPropertiesNV,
        maxMeshOutputPrimitives
    )
        - 60usize];
    ["Offset of field: VkPhysicalDeviceMeshShaderPropertiesNV::maxMeshMultiviewViewCount"][::core::mem::offset_of!(
        VkPhysicalDeviceMeshShaderPropertiesNV,
        maxMeshMultiviewViewCount
    )
        - 64usize];
    ["Offset of field: VkPhysicalDeviceMeshShaderPropertiesNV::meshOutputPerVertexGranularity"][::core::mem::offset_of!(
        VkPhysicalDeviceMeshShaderPropertiesNV,
        meshOutputPerVertexGranularity
    )
        - 68usize];
    ["Offset of field: VkPhysicalDeviceMeshShaderPropertiesNV::meshOutputPerPrimitiveGranularity"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceMeshShaderPropertiesNV , meshOutputPerPrimitiveGranularity) - 72usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDrawMeshTasksIndirectCommandNV"]
        [::core::mem::size_of::<VkDrawMeshTasksIndirectCommandNV>() - 8usize];
    ["Alignment of VkDrawMeshTasksIndirectCommandNV"]
        [::core::mem::align_of::<VkDrawMeshTasksIndirectCommandNV>() - 4usize];
    ["Offset of field: VkDrawMeshTasksIndirectCommandNV::taskCount"]
        [::core::mem::offset_of!(VkDrawMeshTasksIndirectCommandNV, taskCount) - 0usize];
    ["Offset of field: VkDrawMeshTasksIndirectCommandNV::firstTask"]
        [::core::mem::offset_of!(VkDrawMeshTasksIndirectCommandNV, firstTask) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceShaderImageFootprintFeaturesNV"]
        [::core::mem::size_of::<VkPhysicalDeviceShaderImageFootprintFeaturesNV>() - 12usize];
    ["Alignment of VkPhysicalDeviceShaderImageFootprintFeaturesNV"]
        [::core::mem::align_of::<VkPhysicalDeviceShaderImageFootprintFeaturesNV>() - 4usize];
    ["Offset of field: VkPhysicalDeviceShaderImageFootprintFeaturesNV::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceShaderImageFootprintFeaturesNV, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceShaderImageFootprintFeaturesNV::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceShaderImageFootprintFeaturesNV, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceShaderImageFootprintFeaturesNV::imageFootprint"][::core::mem::offset_of!(
        VkPhysicalDeviceShaderImageFootprintFeaturesNV,
        imageFootprint
    ) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineViewportExclusiveScissorStateCreateInfoNV"]
        [::core::mem::size_of::<VkPipelineViewportExclusiveScissorStateCreateInfoNV>() - 16usize];
    ["Alignment of VkPipelineViewportExclusiveScissorStateCreateInfoNV"]
        [::core::mem::align_of::<VkPipelineViewportExclusiveScissorStateCreateInfoNV>() - 4usize];
    ["Offset of field: VkPipelineViewportExclusiveScissorStateCreateInfoNV::sType"][::core::mem::offset_of!(
        VkPipelineViewportExclusiveScissorStateCreateInfoNV,
        sType
    ) - 0usize];
    ["Offset of field: VkPipelineViewportExclusiveScissorStateCreateInfoNV::pNext"][::core::mem::offset_of!(
        VkPipelineViewportExclusiveScissorStateCreateInfoNV,
        pNext
    ) - 4usize];
    ["Offset of field: VkPipelineViewportExclusiveScissorStateCreateInfoNV::exclusiveScissorCount"] [:: core :: mem :: offset_of ! (VkPipelineViewportExclusiveScissorStateCreateInfoNV , exclusiveScissorCount) - 8usize] ;
    ["Offset of field: VkPipelineViewportExclusiveScissorStateCreateInfoNV::pExclusiveScissors"][::core::mem::offset_of!(
        VkPipelineViewportExclusiveScissorStateCreateInfoNV,
        pExclusiveScissors
    )
        - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceExclusiveScissorFeaturesNV"]
        [::core::mem::size_of::<VkPhysicalDeviceExclusiveScissorFeaturesNV>() - 12usize];
    ["Alignment of VkPhysicalDeviceExclusiveScissorFeaturesNV"]
        [::core::mem::align_of::<VkPhysicalDeviceExclusiveScissorFeaturesNV>() - 4usize];
    ["Offset of field: VkPhysicalDeviceExclusiveScissorFeaturesNV::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceExclusiveScissorFeaturesNV, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceExclusiveScissorFeaturesNV::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceExclusiveScissorFeaturesNV, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceExclusiveScissorFeaturesNV::exclusiveScissor"][::core::mem::offset_of!(
        VkPhysicalDeviceExclusiveScissorFeaturesNV,
        exclusiveScissor
    ) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkQueueFamilyCheckpointPropertiesNV"]
        [::core::mem::size_of::<VkQueueFamilyCheckpointPropertiesNV>() - 12usize];
    ["Alignment of VkQueueFamilyCheckpointPropertiesNV"]
        [::core::mem::align_of::<VkQueueFamilyCheckpointPropertiesNV>() - 4usize];
    ["Offset of field: VkQueueFamilyCheckpointPropertiesNV::sType"]
        [::core::mem::offset_of!(VkQueueFamilyCheckpointPropertiesNV, sType) - 0usize];
    ["Offset of field: VkQueueFamilyCheckpointPropertiesNV::pNext"]
        [::core::mem::offset_of!(VkQueueFamilyCheckpointPropertiesNV, pNext) - 4usize];
    ["Offset of field: VkQueueFamilyCheckpointPropertiesNV::checkpointExecutionStageMask"][::core::mem::offset_of!(
        VkQueueFamilyCheckpointPropertiesNV,
        checkpointExecutionStageMask
    )
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkCheckpointDataNV"][::core::mem::size_of::<VkCheckpointDataNV>() - 16usize];
    ["Alignment of VkCheckpointDataNV"][::core::mem::align_of::<VkCheckpointDataNV>() - 4usize];
    ["Offset of field: VkCheckpointDataNV::sType"]
        [::core::mem::offset_of!(VkCheckpointDataNV, sType) - 0usize];
    ["Offset of field: VkCheckpointDataNV::pNext"]
        [::core::mem::offset_of!(VkCheckpointDataNV, pNext) - 4usize];
    ["Offset of field: VkCheckpointDataNV::stage"]
        [::core::mem::offset_of!(VkCheckpointDataNV, stage) - 8usize];
    ["Offset of field: VkCheckpointDataNV::pCheckpointMarker"]
        [::core::mem::offset_of!(VkCheckpointDataNV, pCheckpointMarker) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkQueueFamilyCheckpointProperties2NV"]
        [::core::mem::size_of::<VkQueueFamilyCheckpointProperties2NV>() - 16usize];
    ["Alignment of VkQueueFamilyCheckpointProperties2NV"]
        [::core::mem::align_of::<VkQueueFamilyCheckpointProperties2NV>() - 8usize];
    ["Offset of field: VkQueueFamilyCheckpointProperties2NV::sType"]
        [::core::mem::offset_of!(VkQueueFamilyCheckpointProperties2NV, sType) - 0usize];
    ["Offset of field: VkQueueFamilyCheckpointProperties2NV::pNext"]
        [::core::mem::offset_of!(VkQueueFamilyCheckpointProperties2NV, pNext) - 4usize];
    ["Offset of field: VkQueueFamilyCheckpointProperties2NV::checkpointExecutionStageMask"][::core::mem::offset_of!(
        VkQueueFamilyCheckpointProperties2NV,
        checkpointExecutionStageMask
    )
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkCheckpointData2NV"][::core::mem::size_of::<VkCheckpointData2NV>() - 24usize];
    ["Alignment of VkCheckpointData2NV"][::core::mem::align_of::<VkCheckpointData2NV>() - 8usize];
    ["Offset of field: VkCheckpointData2NV::sType"]
        [::core::mem::offset_of!(VkCheckpointData2NV, sType) - 0usize];
    ["Offset of field: VkCheckpointData2NV::pNext"]
        [::core::mem::offset_of!(VkCheckpointData2NV, pNext) - 4usize];
    ["Offset of field: VkCheckpointData2NV::stage"]
        [::core::mem::offset_of!(VkCheckpointData2NV, stage) - 8usize];
    ["Offset of field: VkCheckpointData2NV::pCheckpointMarker"]
        [::core::mem::offset_of!(VkCheckpointData2NV, pCheckpointMarker) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL"]
        [::core::mem::size_of::<VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL>() - 12usize];
    ["Alignment of VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL"]
        [::core::mem::align_of::<VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL>() - 4usize];
    ["Offset of field: VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL::sType"][::core::mem::offset_of!(
        VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL::pNext"][::core::mem::offset_of!(
        VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL,
        pNext
    ) - 4usize];
    ["Offset of field: VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL::shaderIntegerFunctions2"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL , shaderIntegerFunctions2) - 8usize] ;
};
pub const VkPerformanceConfigurationTypeINTEL_VK_PERFORMANCE_CONFIGURATION_TYPE_COMMAND_QUEUE_METRICS_DISCOVERY_ACTIVATED_INTEL : VkPerformanceConfigurationTypeINTEL = 0 ;
pub const VkPerformanceConfigurationTypeINTEL_VK_PERFORMANCE_CONFIGURATION_TYPE_MAX_ENUM_INTEL:
    VkPerformanceConfigurationTypeINTEL = 2147483647;
pub const VkQueryPoolSamplingModeINTEL_VK_QUERY_POOL_SAMPLING_MODE_MANUAL_INTEL:
    VkQueryPoolSamplingModeINTEL = 0;
pub const VkQueryPoolSamplingModeINTEL_VK_QUERY_POOL_SAMPLING_MODE_MAX_ENUM_INTEL:
    VkQueryPoolSamplingModeINTEL = 2147483647;
pub const VkPerformanceOverrideTypeINTEL_VK_PERFORMANCE_OVERRIDE_TYPE_NULL_HARDWARE_INTEL:
    VkPerformanceOverrideTypeINTEL = 0;
pub const VkPerformanceOverrideTypeINTEL_VK_PERFORMANCE_OVERRIDE_TYPE_FLUSH_GPU_CACHES_INTEL:
    VkPerformanceOverrideTypeINTEL = 1;
pub const VkPerformanceOverrideTypeINTEL_VK_PERFORMANCE_OVERRIDE_TYPE_MAX_ENUM_INTEL:
    VkPerformanceOverrideTypeINTEL = 2147483647;
pub const VkPerformanceParameterTypeINTEL_VK_PERFORMANCE_PARAMETER_TYPE_HW_COUNTERS_SUPPORTED_INTEL : VkPerformanceParameterTypeINTEL = 0 ;
pub const VkPerformanceParameterTypeINTEL_VK_PERFORMANCE_PARAMETER_TYPE_STREAM_MARKER_VALID_BITS_INTEL : VkPerformanceParameterTypeINTEL = 1 ;
pub const VkPerformanceParameterTypeINTEL_VK_PERFORMANCE_PARAMETER_TYPE_MAX_ENUM_INTEL:
    VkPerformanceParameterTypeINTEL = 2147483647;
pub const VkPerformanceValueTypeINTEL_VK_PERFORMANCE_VALUE_TYPE_UINT32_INTEL:
    VkPerformanceValueTypeINTEL = 0;
pub const VkPerformanceValueTypeINTEL_VK_PERFORMANCE_VALUE_TYPE_UINT64_INTEL:
    VkPerformanceValueTypeINTEL = 1;
pub const VkPerformanceValueTypeINTEL_VK_PERFORMANCE_VALUE_TYPE_FLOAT_INTEL:
    VkPerformanceValueTypeINTEL = 2;
pub const VkPerformanceValueTypeINTEL_VK_PERFORMANCE_VALUE_TYPE_BOOL_INTEL:
    VkPerformanceValueTypeINTEL = 3;
pub const VkPerformanceValueTypeINTEL_VK_PERFORMANCE_VALUE_TYPE_STRING_INTEL:
    VkPerformanceValueTypeINTEL = 4;
pub const VkPerformanceValueTypeINTEL_VK_PERFORMANCE_VALUE_TYPE_MAX_ENUM_INTEL:
    VkPerformanceValueTypeINTEL = 2147483647;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPerformanceValueDataINTEL"]
        [::core::mem::size_of::<VkPerformanceValueDataINTEL>() - 8usize];
    ["Alignment of VkPerformanceValueDataINTEL"]
        [::core::mem::align_of::<VkPerformanceValueDataINTEL>() - 8usize];
    ["Offset of field: VkPerformanceValueDataINTEL::value32"]
        [::core::mem::offset_of!(VkPerformanceValueDataINTEL, value32) - 0usize];
    ["Offset of field: VkPerformanceValueDataINTEL::value64"]
        [::core::mem::offset_of!(VkPerformanceValueDataINTEL, value64) - 0usize];
    ["Offset of field: VkPerformanceValueDataINTEL::valueFloat"]
        [::core::mem::offset_of!(VkPerformanceValueDataINTEL, valueFloat) - 0usize];
    ["Offset of field: VkPerformanceValueDataINTEL::valueBool"]
        [::core::mem::offset_of!(VkPerformanceValueDataINTEL, valueBool) - 0usize];
    ["Offset of field: VkPerformanceValueDataINTEL::valueString"]
        [::core::mem::offset_of!(VkPerformanceValueDataINTEL, valueString) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPerformanceValueINTEL"]
        [::core::mem::size_of::<VkPerformanceValueINTEL>() - 16usize];
    ["Alignment of VkPerformanceValueINTEL"]
        [::core::mem::align_of::<VkPerformanceValueINTEL>() - 8usize];
    ["Offset of field: VkPerformanceValueINTEL::type_"]
        [::core::mem::offset_of!(VkPerformanceValueINTEL, type_) - 0usize];
    ["Offset of field: VkPerformanceValueINTEL::data"]
        [::core::mem::offset_of!(VkPerformanceValueINTEL, data) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkInitializePerformanceApiInfoINTEL"]
        [::core::mem::size_of::<VkInitializePerformanceApiInfoINTEL>() - 12usize];
    ["Alignment of VkInitializePerformanceApiInfoINTEL"]
        [::core::mem::align_of::<VkInitializePerformanceApiInfoINTEL>() - 4usize];
    ["Offset of field: VkInitializePerformanceApiInfoINTEL::sType"]
        [::core::mem::offset_of!(VkInitializePerformanceApiInfoINTEL, sType) - 0usize];
    ["Offset of field: VkInitializePerformanceApiInfoINTEL::pNext"]
        [::core::mem::offset_of!(VkInitializePerformanceApiInfoINTEL, pNext) - 4usize];
    ["Offset of field: VkInitializePerformanceApiInfoINTEL::pUserData"]
        [::core::mem::offset_of!(VkInitializePerformanceApiInfoINTEL, pUserData) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkQueryPoolPerformanceQueryCreateInfoINTEL"]
        [::core::mem::size_of::<VkQueryPoolPerformanceQueryCreateInfoINTEL>() - 12usize];
    ["Alignment of VkQueryPoolPerformanceQueryCreateInfoINTEL"]
        [::core::mem::align_of::<VkQueryPoolPerformanceQueryCreateInfoINTEL>() - 4usize];
    ["Offset of field: VkQueryPoolPerformanceQueryCreateInfoINTEL::sType"]
        [::core::mem::offset_of!(VkQueryPoolPerformanceQueryCreateInfoINTEL, sType) - 0usize];
    ["Offset of field: VkQueryPoolPerformanceQueryCreateInfoINTEL::pNext"]
        [::core::mem::offset_of!(VkQueryPoolPerformanceQueryCreateInfoINTEL, pNext) - 4usize];
    ["Offset of field: VkQueryPoolPerformanceQueryCreateInfoINTEL::performanceCountersSampling"][::core::mem::offset_of!(
        VkQueryPoolPerformanceQueryCreateInfoINTEL,
        performanceCountersSampling
    )
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPerformanceMarkerInfoINTEL"]
        [::core::mem::size_of::<VkPerformanceMarkerInfoINTEL>() - 16usize];
    ["Alignment of VkPerformanceMarkerInfoINTEL"]
        [::core::mem::align_of::<VkPerformanceMarkerInfoINTEL>() - 8usize];
    ["Offset of field: VkPerformanceMarkerInfoINTEL::sType"]
        [::core::mem::offset_of!(VkPerformanceMarkerInfoINTEL, sType) - 0usize];
    ["Offset of field: VkPerformanceMarkerInfoINTEL::pNext"]
        [::core::mem::offset_of!(VkPerformanceMarkerInfoINTEL, pNext) - 4usize];
    ["Offset of field: VkPerformanceMarkerInfoINTEL::marker"]
        [::core::mem::offset_of!(VkPerformanceMarkerInfoINTEL, marker) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPerformanceStreamMarkerInfoINTEL"]
        [::core::mem::size_of::<VkPerformanceStreamMarkerInfoINTEL>() - 12usize];
    ["Alignment of VkPerformanceStreamMarkerInfoINTEL"]
        [::core::mem::align_of::<VkPerformanceStreamMarkerInfoINTEL>() - 4usize];
    ["Offset of field: VkPerformanceStreamMarkerInfoINTEL::sType"]
        [::core::mem::offset_of!(VkPerformanceStreamMarkerInfoINTEL, sType) - 0usize];
    ["Offset of field: VkPerformanceStreamMarkerInfoINTEL::pNext"]
        [::core::mem::offset_of!(VkPerformanceStreamMarkerInfoINTEL, pNext) - 4usize];
    ["Offset of field: VkPerformanceStreamMarkerInfoINTEL::marker"]
        [::core::mem::offset_of!(VkPerformanceStreamMarkerInfoINTEL, marker) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPerformanceOverrideInfoINTEL"]
        [::core::mem::size_of::<VkPerformanceOverrideInfoINTEL>() - 24usize];
    ["Alignment of VkPerformanceOverrideInfoINTEL"]
        [::core::mem::align_of::<VkPerformanceOverrideInfoINTEL>() - 8usize];
    ["Offset of field: VkPerformanceOverrideInfoINTEL::sType"]
        [::core::mem::offset_of!(VkPerformanceOverrideInfoINTEL, sType) - 0usize];
    ["Offset of field: VkPerformanceOverrideInfoINTEL::pNext"]
        [::core::mem::offset_of!(VkPerformanceOverrideInfoINTEL, pNext) - 4usize];
    ["Offset of field: VkPerformanceOverrideInfoINTEL::type_"]
        [::core::mem::offset_of!(VkPerformanceOverrideInfoINTEL, type_) - 8usize];
    ["Offset of field: VkPerformanceOverrideInfoINTEL::enable"]
        [::core::mem::offset_of!(VkPerformanceOverrideInfoINTEL, enable) - 12usize];
    ["Offset of field: VkPerformanceOverrideInfoINTEL::parameter"]
        [::core::mem::offset_of!(VkPerformanceOverrideInfoINTEL, parameter) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPerformanceConfigurationAcquireInfoINTEL"]
        [::core::mem::size_of::<VkPerformanceConfigurationAcquireInfoINTEL>() - 12usize];
    ["Alignment of VkPerformanceConfigurationAcquireInfoINTEL"]
        [::core::mem::align_of::<VkPerformanceConfigurationAcquireInfoINTEL>() - 4usize];
    ["Offset of field: VkPerformanceConfigurationAcquireInfoINTEL::sType"]
        [::core::mem::offset_of!(VkPerformanceConfigurationAcquireInfoINTEL, sType) - 0usize];
    ["Offset of field: VkPerformanceConfigurationAcquireInfoINTEL::pNext"]
        [::core::mem::offset_of!(VkPerformanceConfigurationAcquireInfoINTEL, pNext) - 4usize];
    ["Offset of field: VkPerformanceConfigurationAcquireInfoINTEL::type_"]
        [::core::mem::offset_of!(VkPerformanceConfigurationAcquireInfoINTEL, type_) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDevicePCIBusInfoPropertiesEXT"]
        [::core::mem::size_of::<VkPhysicalDevicePCIBusInfoPropertiesEXT>() - 24usize];
    ["Alignment of VkPhysicalDevicePCIBusInfoPropertiesEXT"]
        [::core::mem::align_of::<VkPhysicalDevicePCIBusInfoPropertiesEXT>() - 4usize];
    ["Offset of field: VkPhysicalDevicePCIBusInfoPropertiesEXT::sType"]
        [::core::mem::offset_of!(VkPhysicalDevicePCIBusInfoPropertiesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDevicePCIBusInfoPropertiesEXT::pNext"]
        [::core::mem::offset_of!(VkPhysicalDevicePCIBusInfoPropertiesEXT, pNext) - 4usize];
    ["Offset of field: VkPhysicalDevicePCIBusInfoPropertiesEXT::pciDomain"]
        [::core::mem::offset_of!(VkPhysicalDevicePCIBusInfoPropertiesEXT, pciDomain) - 8usize];
    ["Offset of field: VkPhysicalDevicePCIBusInfoPropertiesEXT::pciBus"]
        [::core::mem::offset_of!(VkPhysicalDevicePCIBusInfoPropertiesEXT, pciBus) - 12usize];
    ["Offset of field: VkPhysicalDevicePCIBusInfoPropertiesEXT::pciDevice"]
        [::core::mem::offset_of!(VkPhysicalDevicePCIBusInfoPropertiesEXT, pciDevice) - 16usize];
    ["Offset of field: VkPhysicalDevicePCIBusInfoPropertiesEXT::pciFunction"]
        [::core::mem::offset_of!(VkPhysicalDevicePCIBusInfoPropertiesEXT, pciFunction) - 20usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDisplayNativeHdrSurfaceCapabilitiesAMD"]
        [::core::mem::size_of::<VkDisplayNativeHdrSurfaceCapabilitiesAMD>() - 12usize];
    ["Alignment of VkDisplayNativeHdrSurfaceCapabilitiesAMD"]
        [::core::mem::align_of::<VkDisplayNativeHdrSurfaceCapabilitiesAMD>() - 4usize];
    ["Offset of field: VkDisplayNativeHdrSurfaceCapabilitiesAMD::sType"]
        [::core::mem::offset_of!(VkDisplayNativeHdrSurfaceCapabilitiesAMD, sType) - 0usize];
    ["Offset of field: VkDisplayNativeHdrSurfaceCapabilitiesAMD::pNext"]
        [::core::mem::offset_of!(VkDisplayNativeHdrSurfaceCapabilitiesAMD, pNext) - 4usize];
    ["Offset of field: VkDisplayNativeHdrSurfaceCapabilitiesAMD::localDimmingSupport"][::core::mem::offset_of!(
        VkDisplayNativeHdrSurfaceCapabilitiesAMD,
        localDimmingSupport
    ) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSwapchainDisplayNativeHdrCreateInfoAMD"]
        [::core::mem::size_of::<VkSwapchainDisplayNativeHdrCreateInfoAMD>() - 12usize];
    ["Alignment of VkSwapchainDisplayNativeHdrCreateInfoAMD"]
        [::core::mem::align_of::<VkSwapchainDisplayNativeHdrCreateInfoAMD>() - 4usize];
    ["Offset of field: VkSwapchainDisplayNativeHdrCreateInfoAMD::sType"]
        [::core::mem::offset_of!(VkSwapchainDisplayNativeHdrCreateInfoAMD, sType) - 0usize];
    ["Offset of field: VkSwapchainDisplayNativeHdrCreateInfoAMD::pNext"]
        [::core::mem::offset_of!(VkSwapchainDisplayNativeHdrCreateInfoAMD, pNext) - 4usize];
    ["Offset of field: VkSwapchainDisplayNativeHdrCreateInfoAMD::localDimmingEnable"][::core::mem::offset_of!(
        VkSwapchainDisplayNativeHdrCreateInfoAMD,
        localDimmingEnable
    ) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceFragmentDensityMapFeaturesEXT"]
        [::core::mem::size_of::<VkPhysicalDeviceFragmentDensityMapFeaturesEXT>() - 20usize];
    ["Alignment of VkPhysicalDeviceFragmentDensityMapFeaturesEXT"]
        [::core::mem::align_of::<VkPhysicalDeviceFragmentDensityMapFeaturesEXT>() - 4usize];
    ["Offset of field: VkPhysicalDeviceFragmentDensityMapFeaturesEXT::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceFragmentDensityMapFeaturesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceFragmentDensityMapFeaturesEXT::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceFragmentDensityMapFeaturesEXT, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceFragmentDensityMapFeaturesEXT::fragmentDensityMap"][::core::mem::offset_of!(
        VkPhysicalDeviceFragmentDensityMapFeaturesEXT,
        fragmentDensityMap
    )
        - 8usize];
    ["Offset of field: VkPhysicalDeviceFragmentDensityMapFeaturesEXT::fragmentDensityMapDynamic"][::core::mem::offset_of!(
        VkPhysicalDeviceFragmentDensityMapFeaturesEXT,
        fragmentDensityMapDynamic
    )
        - 12usize];
    ["Offset of field: VkPhysicalDeviceFragmentDensityMapFeaturesEXT::fragmentDensityMapNonSubsampledImages"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceFragmentDensityMapFeaturesEXT , fragmentDensityMapNonSubsampledImages) - 16usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceFragmentDensityMapPropertiesEXT"]
        [::core::mem::size_of::<VkPhysicalDeviceFragmentDensityMapPropertiesEXT>() - 28usize];
    ["Alignment of VkPhysicalDeviceFragmentDensityMapPropertiesEXT"]
        [::core::mem::align_of::<VkPhysicalDeviceFragmentDensityMapPropertiesEXT>() - 4usize];
    ["Offset of field: VkPhysicalDeviceFragmentDensityMapPropertiesEXT::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceFragmentDensityMapPropertiesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceFragmentDensityMapPropertiesEXT::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceFragmentDensityMapPropertiesEXT, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceFragmentDensityMapPropertiesEXT::minFragmentDensityTexelSize"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceFragmentDensityMapPropertiesEXT , minFragmentDensityTexelSize) - 8usize] ;
    ["Offset of field: VkPhysicalDeviceFragmentDensityMapPropertiesEXT::maxFragmentDensityTexelSize"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceFragmentDensityMapPropertiesEXT , maxFragmentDensityTexelSize) - 16usize] ;
    ["Offset of field: VkPhysicalDeviceFragmentDensityMapPropertiesEXT::fragmentDensityInvocations"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceFragmentDensityMapPropertiesEXT , fragmentDensityInvocations) - 24usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkRenderPassFragmentDensityMapCreateInfoEXT"]
        [::core::mem::size_of::<VkRenderPassFragmentDensityMapCreateInfoEXT>() - 16usize];
    ["Alignment of VkRenderPassFragmentDensityMapCreateInfoEXT"]
        [::core::mem::align_of::<VkRenderPassFragmentDensityMapCreateInfoEXT>() - 4usize];
    ["Offset of field: VkRenderPassFragmentDensityMapCreateInfoEXT::sType"]
        [::core::mem::offset_of!(VkRenderPassFragmentDensityMapCreateInfoEXT, sType) - 0usize];
    ["Offset of field: VkRenderPassFragmentDensityMapCreateInfoEXT::pNext"]
        [::core::mem::offset_of!(VkRenderPassFragmentDensityMapCreateInfoEXT, pNext) - 4usize];
    ["Offset of field: VkRenderPassFragmentDensityMapCreateInfoEXT::fragmentDensityMapAttachment"] [:: core :: mem :: offset_of ! (VkRenderPassFragmentDensityMapCreateInfoEXT , fragmentDensityMapAttachment) - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkRenderingFragmentDensityMapAttachmentInfoEXT"]
        [::core::mem::size_of::<VkRenderingFragmentDensityMapAttachmentInfoEXT>() - 24usize];
    ["Alignment of VkRenderingFragmentDensityMapAttachmentInfoEXT"]
        [::core::mem::align_of::<VkRenderingFragmentDensityMapAttachmentInfoEXT>() - 8usize];
    ["Offset of field: VkRenderingFragmentDensityMapAttachmentInfoEXT::sType"]
        [::core::mem::offset_of!(VkRenderingFragmentDensityMapAttachmentInfoEXT, sType) - 0usize];
    ["Offset of field: VkRenderingFragmentDensityMapAttachmentInfoEXT::pNext"]
        [::core::mem::offset_of!(VkRenderingFragmentDensityMapAttachmentInfoEXT, pNext) - 4usize];
    ["Offset of field: VkRenderingFragmentDensityMapAttachmentInfoEXT::imageView"][::core::mem::offset_of!(
        VkRenderingFragmentDensityMapAttachmentInfoEXT,
        imageView
    ) - 8usize];
    ["Offset of field: VkRenderingFragmentDensityMapAttachmentInfoEXT::imageLayout"][::core::mem::offset_of!(
        VkRenderingFragmentDensityMapAttachmentInfoEXT,
        imageLayout
    ) - 16usize];
};
pub const VkShaderCorePropertiesFlagBitsAMD_VK_SHADER_CORE_PROPERTIES_FLAG_BITS_MAX_ENUM_AMD:
    VkShaderCorePropertiesFlagBitsAMD = 2147483647;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceShaderCoreProperties2AMD"]
        [::core::mem::size_of::<VkPhysicalDeviceShaderCoreProperties2AMD>() - 16usize];
    ["Alignment of VkPhysicalDeviceShaderCoreProperties2AMD"]
        [::core::mem::align_of::<VkPhysicalDeviceShaderCoreProperties2AMD>() - 4usize];
    ["Offset of field: VkPhysicalDeviceShaderCoreProperties2AMD::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceShaderCoreProperties2AMD, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceShaderCoreProperties2AMD::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceShaderCoreProperties2AMD, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceShaderCoreProperties2AMD::shaderCoreFeatures"][::core::mem::offset_of!(
        VkPhysicalDeviceShaderCoreProperties2AMD,
        shaderCoreFeatures
    ) - 8usize];
    ["Offset of field: VkPhysicalDeviceShaderCoreProperties2AMD::activeComputeUnitCount"][::core::mem::offset_of!(
        VkPhysicalDeviceShaderCoreProperties2AMD,
        activeComputeUnitCount
    )
        - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceCoherentMemoryFeaturesAMD"]
        [::core::mem::size_of::<VkPhysicalDeviceCoherentMemoryFeaturesAMD>() - 12usize];
    ["Alignment of VkPhysicalDeviceCoherentMemoryFeaturesAMD"]
        [::core::mem::align_of::<VkPhysicalDeviceCoherentMemoryFeaturesAMD>() - 4usize];
    ["Offset of field: VkPhysicalDeviceCoherentMemoryFeaturesAMD::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceCoherentMemoryFeaturesAMD, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceCoherentMemoryFeaturesAMD::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceCoherentMemoryFeaturesAMD, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceCoherentMemoryFeaturesAMD::deviceCoherentMemory"][::core::mem::offset_of!(
        VkPhysicalDeviceCoherentMemoryFeaturesAMD,
        deviceCoherentMemory
    )
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT"]
        [::core::mem::size_of::<VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT>() - 16usize];
    ["Alignment of VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT"]
        [::core::mem::align_of::<VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT>() - 4usize];
    ["Offset of field: VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT::sType"][::core::mem::offset_of!(
        VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT::pNext"][::core::mem::offset_of!(
        VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT,
        pNext
    ) - 4usize];
    ["Offset of field: VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT::shaderImageInt64Atomics"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT , shaderImageInt64Atomics) - 8usize] ;
    ["Offset of field: VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT::sparseImageInt64Atomics"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT , sparseImageInt64Atomics) - 12usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceMemoryBudgetPropertiesEXT"]
        [::core::mem::size_of::<VkPhysicalDeviceMemoryBudgetPropertiesEXT>() - 264usize];
    ["Alignment of VkPhysicalDeviceMemoryBudgetPropertiesEXT"]
        [::core::mem::align_of::<VkPhysicalDeviceMemoryBudgetPropertiesEXT>() - 8usize];
    ["Offset of field: VkPhysicalDeviceMemoryBudgetPropertiesEXT::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceMemoryBudgetPropertiesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceMemoryBudgetPropertiesEXT::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceMemoryBudgetPropertiesEXT, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceMemoryBudgetPropertiesEXT::heapBudget"]
        [::core::mem::offset_of!(VkPhysicalDeviceMemoryBudgetPropertiesEXT, heapBudget) - 8usize];
    ["Offset of field: VkPhysicalDeviceMemoryBudgetPropertiesEXT::heapUsage"]
        [::core::mem::offset_of!(VkPhysicalDeviceMemoryBudgetPropertiesEXT, heapUsage) - 136usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceMemoryPriorityFeaturesEXT"]
        [::core::mem::size_of::<VkPhysicalDeviceMemoryPriorityFeaturesEXT>() - 12usize];
    ["Alignment of VkPhysicalDeviceMemoryPriorityFeaturesEXT"]
        [::core::mem::align_of::<VkPhysicalDeviceMemoryPriorityFeaturesEXT>() - 4usize];
    ["Offset of field: VkPhysicalDeviceMemoryPriorityFeaturesEXT::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceMemoryPriorityFeaturesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceMemoryPriorityFeaturesEXT::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceMemoryPriorityFeaturesEXT, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceMemoryPriorityFeaturesEXT::memoryPriority"][::core::mem::offset_of!(
        VkPhysicalDeviceMemoryPriorityFeaturesEXT,
        memoryPriority
    ) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkMemoryPriorityAllocateInfoEXT"]
        [::core::mem::size_of::<VkMemoryPriorityAllocateInfoEXT>() - 12usize];
    ["Alignment of VkMemoryPriorityAllocateInfoEXT"]
        [::core::mem::align_of::<VkMemoryPriorityAllocateInfoEXT>() - 4usize];
    ["Offset of field: VkMemoryPriorityAllocateInfoEXT::sType"]
        [::core::mem::offset_of!(VkMemoryPriorityAllocateInfoEXT, sType) - 0usize];
    ["Offset of field: VkMemoryPriorityAllocateInfoEXT::pNext"]
        [::core::mem::offset_of!(VkMemoryPriorityAllocateInfoEXT, pNext) - 4usize];
    ["Offset of field: VkMemoryPriorityAllocateInfoEXT::priority"]
        [::core::mem::offset_of!(VkMemoryPriorityAllocateInfoEXT, priority) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV"][::core::mem::size_of::<
        VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV,
    >() - 12usize];
    ["Alignment of VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV"]
        [::core::mem::align_of::<VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV>()
            - 4usize];
    ["Offset of field: VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV::sType"][::core::mem::offset_of!(
        VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV,
        sType
    )
        - 0usize];
    ["Offset of field: VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV::pNext"][::core::mem::offset_of!(
        VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV,
        pNext
    )
        - 4usize];
    ["Offset of field: VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV::dedicatedAllocationImageAliasing"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV , dedicatedAllocationImageAliasing) - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceBufferDeviceAddressFeaturesEXT"]
        [::core::mem::size_of::<VkPhysicalDeviceBufferDeviceAddressFeaturesEXT>() - 20usize];
    ["Alignment of VkPhysicalDeviceBufferDeviceAddressFeaturesEXT"]
        [::core::mem::align_of::<VkPhysicalDeviceBufferDeviceAddressFeaturesEXT>() - 4usize];
    ["Offset of field: VkPhysicalDeviceBufferDeviceAddressFeaturesEXT::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceBufferDeviceAddressFeaturesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceBufferDeviceAddressFeaturesEXT::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceBufferDeviceAddressFeaturesEXT, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceBufferDeviceAddressFeaturesEXT::bufferDeviceAddress"][::core::mem::offset_of!(
        VkPhysicalDeviceBufferDeviceAddressFeaturesEXT,
        bufferDeviceAddress
    )
        - 8usize];
    ["Offset of field: VkPhysicalDeviceBufferDeviceAddressFeaturesEXT::bufferDeviceAddressCaptureReplay"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceBufferDeviceAddressFeaturesEXT , bufferDeviceAddressCaptureReplay) - 12usize] ;
    ["Offset of field: VkPhysicalDeviceBufferDeviceAddressFeaturesEXT::bufferDeviceAddressMultiDevice"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceBufferDeviceAddressFeaturesEXT , bufferDeviceAddressMultiDevice) - 16usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkBufferDeviceAddressCreateInfoEXT"]
        [::core::mem::size_of::<VkBufferDeviceAddressCreateInfoEXT>() - 16usize];
    ["Alignment of VkBufferDeviceAddressCreateInfoEXT"]
        [::core::mem::align_of::<VkBufferDeviceAddressCreateInfoEXT>() - 8usize];
    ["Offset of field: VkBufferDeviceAddressCreateInfoEXT::sType"]
        [::core::mem::offset_of!(VkBufferDeviceAddressCreateInfoEXT, sType) - 0usize];
    ["Offset of field: VkBufferDeviceAddressCreateInfoEXT::pNext"]
        [::core::mem::offset_of!(VkBufferDeviceAddressCreateInfoEXT, pNext) - 4usize];
    ["Offset of field: VkBufferDeviceAddressCreateInfoEXT::deviceAddress"]
        [::core::mem::offset_of!(VkBufferDeviceAddressCreateInfoEXT, deviceAddress) - 8usize];
};
pub const VkValidationFeatureEnableEXT_VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_EXT:
    VkValidationFeatureEnableEXT = 0;
pub const VkValidationFeatureEnableEXT_VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT : VkValidationFeatureEnableEXT = 1 ;
pub const VkValidationFeatureEnableEXT_VK_VALIDATION_FEATURE_ENABLE_BEST_PRACTICES_EXT:
    VkValidationFeatureEnableEXT = 2;
pub const VkValidationFeatureEnableEXT_VK_VALIDATION_FEATURE_ENABLE_DEBUG_PRINTF_EXT:
    VkValidationFeatureEnableEXT = 3;
pub const VkValidationFeatureEnableEXT_VK_VALIDATION_FEATURE_ENABLE_SYNCHRONIZATION_VALIDATION_EXT : VkValidationFeatureEnableEXT = 4 ;
pub const VkValidationFeatureEnableEXT_VK_VALIDATION_FEATURE_ENABLE_MAX_ENUM_EXT:
    VkValidationFeatureEnableEXT = 2147483647;
pub const VkValidationFeatureDisableEXT_VK_VALIDATION_FEATURE_DISABLE_ALL_EXT:
    VkValidationFeatureDisableEXT = 0;
pub const VkValidationFeatureDisableEXT_VK_VALIDATION_FEATURE_DISABLE_SHADERS_EXT:
    VkValidationFeatureDisableEXT = 1;
pub const VkValidationFeatureDisableEXT_VK_VALIDATION_FEATURE_DISABLE_THREAD_SAFETY_EXT:
    VkValidationFeatureDisableEXT = 2;
pub const VkValidationFeatureDisableEXT_VK_VALIDATION_FEATURE_DISABLE_API_PARAMETERS_EXT:
    VkValidationFeatureDisableEXT = 3;
pub const VkValidationFeatureDisableEXT_VK_VALIDATION_FEATURE_DISABLE_OBJECT_LIFETIMES_EXT:
    VkValidationFeatureDisableEXT = 4;
pub const VkValidationFeatureDisableEXT_VK_VALIDATION_FEATURE_DISABLE_CORE_CHECKS_EXT:
    VkValidationFeatureDisableEXT = 5;
pub const VkValidationFeatureDisableEXT_VK_VALIDATION_FEATURE_DISABLE_UNIQUE_HANDLES_EXT:
    VkValidationFeatureDisableEXT = 6;
pub const VkValidationFeatureDisableEXT_VK_VALIDATION_FEATURE_DISABLE_SHADER_VALIDATION_CACHE_EXT : VkValidationFeatureDisableEXT = 7 ;
pub const VkValidationFeatureDisableEXT_VK_VALIDATION_FEATURE_DISABLE_MAX_ENUM_EXT:
    VkValidationFeatureDisableEXT = 2147483647;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkValidationFeaturesEXT"]
        [::core::mem::size_of::<VkValidationFeaturesEXT>() - 24usize];
    ["Alignment of VkValidationFeaturesEXT"]
        [::core::mem::align_of::<VkValidationFeaturesEXT>() - 4usize];
    ["Offset of field: VkValidationFeaturesEXT::sType"]
        [::core::mem::offset_of!(VkValidationFeaturesEXT, sType) - 0usize];
    ["Offset of field: VkValidationFeaturesEXT::pNext"]
        [::core::mem::offset_of!(VkValidationFeaturesEXT, pNext) - 4usize];
    ["Offset of field: VkValidationFeaturesEXT::enabledValidationFeatureCount"]
        [::core::mem::offset_of!(VkValidationFeaturesEXT, enabledValidationFeatureCount) - 8usize];
    ["Offset of field: VkValidationFeaturesEXT::pEnabledValidationFeatures"]
        [::core::mem::offset_of!(VkValidationFeaturesEXT, pEnabledValidationFeatures) - 12usize];
    ["Offset of field: VkValidationFeaturesEXT::disabledValidationFeatureCount"][::core::mem::offset_of!(
        VkValidationFeaturesEXT,
        disabledValidationFeatureCount
    ) - 16usize];
    ["Offset of field: VkValidationFeaturesEXT::pDisabledValidationFeatures"]
        [::core::mem::offset_of!(VkValidationFeaturesEXT, pDisabledValidationFeatures) - 20usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkCooperativeMatrixPropertiesNV"]
        [::core::mem::size_of::<VkCooperativeMatrixPropertiesNV>() - 40usize];
    ["Alignment of VkCooperativeMatrixPropertiesNV"]
        [::core::mem::align_of::<VkCooperativeMatrixPropertiesNV>() - 4usize];
    ["Offset of field: VkCooperativeMatrixPropertiesNV::sType"]
        [::core::mem::offset_of!(VkCooperativeMatrixPropertiesNV, sType) - 0usize];
    ["Offset of field: VkCooperativeMatrixPropertiesNV::pNext"]
        [::core::mem::offset_of!(VkCooperativeMatrixPropertiesNV, pNext) - 4usize];
    ["Offset of field: VkCooperativeMatrixPropertiesNV::MSize"]
        [::core::mem::offset_of!(VkCooperativeMatrixPropertiesNV, MSize) - 8usize];
    ["Offset of field: VkCooperativeMatrixPropertiesNV::NSize"]
        [::core::mem::offset_of!(VkCooperativeMatrixPropertiesNV, NSize) - 12usize];
    ["Offset of field: VkCooperativeMatrixPropertiesNV::KSize"]
        [::core::mem::offset_of!(VkCooperativeMatrixPropertiesNV, KSize) - 16usize];
    ["Offset of field: VkCooperativeMatrixPropertiesNV::AType"]
        [::core::mem::offset_of!(VkCooperativeMatrixPropertiesNV, AType) - 20usize];
    ["Offset of field: VkCooperativeMatrixPropertiesNV::BType"]
        [::core::mem::offset_of!(VkCooperativeMatrixPropertiesNV, BType) - 24usize];
    ["Offset of field: VkCooperativeMatrixPropertiesNV::CType"]
        [::core::mem::offset_of!(VkCooperativeMatrixPropertiesNV, CType) - 28usize];
    ["Offset of field: VkCooperativeMatrixPropertiesNV::DType"]
        [::core::mem::offset_of!(VkCooperativeMatrixPropertiesNV, DType) - 32usize];
    ["Offset of field: VkCooperativeMatrixPropertiesNV::scope"]
        [::core::mem::offset_of!(VkCooperativeMatrixPropertiesNV, scope) - 36usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceCooperativeMatrixFeaturesNV"]
        [::core::mem::size_of::<VkPhysicalDeviceCooperativeMatrixFeaturesNV>() - 16usize];
    ["Alignment of VkPhysicalDeviceCooperativeMatrixFeaturesNV"]
        [::core::mem::align_of::<VkPhysicalDeviceCooperativeMatrixFeaturesNV>() - 4usize];
    ["Offset of field: VkPhysicalDeviceCooperativeMatrixFeaturesNV::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceCooperativeMatrixFeaturesNV, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceCooperativeMatrixFeaturesNV::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceCooperativeMatrixFeaturesNV, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceCooperativeMatrixFeaturesNV::cooperativeMatrix"][::core::mem::offset_of!(
        VkPhysicalDeviceCooperativeMatrixFeaturesNV,
        cooperativeMatrix
    ) - 8usize];
    ["Offset of field: VkPhysicalDeviceCooperativeMatrixFeaturesNV::cooperativeMatrixRobustBufferAccess"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceCooperativeMatrixFeaturesNV , cooperativeMatrixRobustBufferAccess) - 12usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceCooperativeMatrixPropertiesNV"]
        [::core::mem::size_of::<VkPhysicalDeviceCooperativeMatrixPropertiesNV>() - 12usize];
    ["Alignment of VkPhysicalDeviceCooperativeMatrixPropertiesNV"]
        [::core::mem::align_of::<VkPhysicalDeviceCooperativeMatrixPropertiesNV>() - 4usize];
    ["Offset of field: VkPhysicalDeviceCooperativeMatrixPropertiesNV::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceCooperativeMatrixPropertiesNV, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceCooperativeMatrixPropertiesNV::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceCooperativeMatrixPropertiesNV, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceCooperativeMatrixPropertiesNV::cooperativeMatrixSupportedStages"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceCooperativeMatrixPropertiesNV , cooperativeMatrixSupportedStages) - 8usize] ;
};
pub const VkCoverageReductionModeNV_VK_COVERAGE_REDUCTION_MODE_MERGE_NV: VkCoverageReductionModeNV =
    0;
pub const VkCoverageReductionModeNV_VK_COVERAGE_REDUCTION_MODE_TRUNCATE_NV:
    VkCoverageReductionModeNV = 1;
pub const VkCoverageReductionModeNV_VK_COVERAGE_REDUCTION_MODE_MAX_ENUM_NV:
    VkCoverageReductionModeNV = 2147483647;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceCoverageReductionModeFeaturesNV"]
        [::core::mem::size_of::<VkPhysicalDeviceCoverageReductionModeFeaturesNV>() - 12usize];
    ["Alignment of VkPhysicalDeviceCoverageReductionModeFeaturesNV"]
        [::core::mem::align_of::<VkPhysicalDeviceCoverageReductionModeFeaturesNV>() - 4usize];
    ["Offset of field: VkPhysicalDeviceCoverageReductionModeFeaturesNV::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceCoverageReductionModeFeaturesNV, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceCoverageReductionModeFeaturesNV::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceCoverageReductionModeFeaturesNV, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceCoverageReductionModeFeaturesNV::coverageReductionMode"][::core::mem::offset_of!(
        VkPhysicalDeviceCoverageReductionModeFeaturesNV,
        coverageReductionMode
    )
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineCoverageReductionStateCreateInfoNV"]
        [::core::mem::size_of::<VkPipelineCoverageReductionStateCreateInfoNV>() - 16usize];
    ["Alignment of VkPipelineCoverageReductionStateCreateInfoNV"]
        [::core::mem::align_of::<VkPipelineCoverageReductionStateCreateInfoNV>() - 4usize];
    ["Offset of field: VkPipelineCoverageReductionStateCreateInfoNV::sType"]
        [::core::mem::offset_of!(VkPipelineCoverageReductionStateCreateInfoNV, sType) - 0usize];
    ["Offset of field: VkPipelineCoverageReductionStateCreateInfoNV::pNext"]
        [::core::mem::offset_of!(VkPipelineCoverageReductionStateCreateInfoNV, pNext) - 4usize];
    ["Offset of field: VkPipelineCoverageReductionStateCreateInfoNV::flags"]
        [::core::mem::offset_of!(VkPipelineCoverageReductionStateCreateInfoNV, flags) - 8usize];
    ["Offset of field: VkPipelineCoverageReductionStateCreateInfoNV::coverageReductionMode"][::core::mem::offset_of!(
        VkPipelineCoverageReductionStateCreateInfoNV,
        coverageReductionMode
    )
        - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkFramebufferMixedSamplesCombinationNV"]
        [::core::mem::size_of::<VkFramebufferMixedSamplesCombinationNV>() - 24usize];
    ["Alignment of VkFramebufferMixedSamplesCombinationNV"]
        [::core::mem::align_of::<VkFramebufferMixedSamplesCombinationNV>() - 4usize];
    ["Offset of field: VkFramebufferMixedSamplesCombinationNV::sType"]
        [::core::mem::offset_of!(VkFramebufferMixedSamplesCombinationNV, sType) - 0usize];
    ["Offset of field: VkFramebufferMixedSamplesCombinationNV::pNext"]
        [::core::mem::offset_of!(VkFramebufferMixedSamplesCombinationNV, pNext) - 4usize];
    ["Offset of field: VkFramebufferMixedSamplesCombinationNV::coverageReductionMode"][::core::mem::offset_of!(
        VkFramebufferMixedSamplesCombinationNV,
        coverageReductionMode
    ) - 8usize];
    ["Offset of field: VkFramebufferMixedSamplesCombinationNV::rasterizationSamples"][::core::mem::offset_of!(
        VkFramebufferMixedSamplesCombinationNV,
        rasterizationSamples
    ) - 12usize];
    ["Offset of field: VkFramebufferMixedSamplesCombinationNV::depthStencilSamples"][::core::mem::offset_of!(
        VkFramebufferMixedSamplesCombinationNV,
        depthStencilSamples
    ) - 16usize];
    ["Offset of field: VkFramebufferMixedSamplesCombinationNV::colorSamples"]
        [::core::mem::offset_of!(VkFramebufferMixedSamplesCombinationNV, colorSamples) - 20usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT"]
        [::core::mem::size_of::<VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT>() - 20usize];
    ["Alignment of VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT"]
        [::core::mem::align_of::<VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT>() - 4usize];
    ["Offset of field: VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT::sType"][::core::mem::offset_of!(
        VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT::pNext"][::core::mem::offset_of!(
        VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT,
        pNext
    ) - 4usize];
    ["Offset of field: VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT::fragmentShaderSampleInterlock"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT , fragmentShaderSampleInterlock) - 8usize] ;
    ["Offset of field: VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT::fragmentShaderPixelInterlock"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT , fragmentShaderPixelInterlock) - 12usize] ;
    ["Offset of field: VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT::fragmentShaderShadingRateInterlock"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT , fragmentShaderShadingRateInterlock) - 16usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceYcbcrImageArraysFeaturesEXT"]
        [::core::mem::size_of::<VkPhysicalDeviceYcbcrImageArraysFeaturesEXT>() - 12usize];
    ["Alignment of VkPhysicalDeviceYcbcrImageArraysFeaturesEXT"]
        [::core::mem::align_of::<VkPhysicalDeviceYcbcrImageArraysFeaturesEXT>() - 4usize];
    ["Offset of field: VkPhysicalDeviceYcbcrImageArraysFeaturesEXT::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceYcbcrImageArraysFeaturesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceYcbcrImageArraysFeaturesEXT::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceYcbcrImageArraysFeaturesEXT, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceYcbcrImageArraysFeaturesEXT::ycbcrImageArrays"][::core::mem::offset_of!(
        VkPhysicalDeviceYcbcrImageArraysFeaturesEXT,
        ycbcrImageArrays
    ) - 8usize];
};
pub const VkProvokingVertexModeEXT_VK_PROVOKING_VERTEX_MODE_FIRST_VERTEX_EXT:
    VkProvokingVertexModeEXT = 0;
pub const VkProvokingVertexModeEXT_VK_PROVOKING_VERTEX_MODE_LAST_VERTEX_EXT:
    VkProvokingVertexModeEXT = 1;
pub const VkProvokingVertexModeEXT_VK_PROVOKING_VERTEX_MODE_MAX_ENUM_EXT: VkProvokingVertexModeEXT =
    2147483647;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceProvokingVertexFeaturesEXT"]
        [::core::mem::size_of::<VkPhysicalDeviceProvokingVertexFeaturesEXT>() - 16usize];
    ["Alignment of VkPhysicalDeviceProvokingVertexFeaturesEXT"]
        [::core::mem::align_of::<VkPhysicalDeviceProvokingVertexFeaturesEXT>() - 4usize];
    ["Offset of field: VkPhysicalDeviceProvokingVertexFeaturesEXT::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceProvokingVertexFeaturesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceProvokingVertexFeaturesEXT::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceProvokingVertexFeaturesEXT, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceProvokingVertexFeaturesEXT::provokingVertexLast"][::core::mem::offset_of!(
        VkPhysicalDeviceProvokingVertexFeaturesEXT,
        provokingVertexLast
    )
        - 8usize];
    ["Offset of field: VkPhysicalDeviceProvokingVertexFeaturesEXT::transformFeedbackPreservesProvokingVertex"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceProvokingVertexFeaturesEXT , transformFeedbackPreservesProvokingVertex) - 12usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceProvokingVertexPropertiesEXT"]
        [::core::mem::size_of::<VkPhysicalDeviceProvokingVertexPropertiesEXT>() - 16usize];
    ["Alignment of VkPhysicalDeviceProvokingVertexPropertiesEXT"]
        [::core::mem::align_of::<VkPhysicalDeviceProvokingVertexPropertiesEXT>() - 4usize];
    ["Offset of field: VkPhysicalDeviceProvokingVertexPropertiesEXT::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceProvokingVertexPropertiesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceProvokingVertexPropertiesEXT::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceProvokingVertexPropertiesEXT, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceProvokingVertexPropertiesEXT::provokingVertexModePerPipeline"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceProvokingVertexPropertiesEXT , provokingVertexModePerPipeline) - 8usize] ;
    ["Offset of field: VkPhysicalDeviceProvokingVertexPropertiesEXT::transformFeedbackPreservesTriangleFanProvokingVertex"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceProvokingVertexPropertiesEXT , transformFeedbackPreservesTriangleFanProvokingVertex) - 12usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineRasterizationProvokingVertexStateCreateInfoEXT"][::core::mem::size_of::<
        VkPipelineRasterizationProvokingVertexStateCreateInfoEXT,
    >() - 12usize];
    ["Alignment of VkPipelineRasterizationProvokingVertexStateCreateInfoEXT"][::core::mem::align_of::<
        VkPipelineRasterizationProvokingVertexStateCreateInfoEXT,
    >() - 4usize];
    ["Offset of field: VkPipelineRasterizationProvokingVertexStateCreateInfoEXT::sType"][::core::mem::offset_of!(
        VkPipelineRasterizationProvokingVertexStateCreateInfoEXT,
        sType
    )
        - 0usize];
    ["Offset of field: VkPipelineRasterizationProvokingVertexStateCreateInfoEXT::pNext"][::core::mem::offset_of!(
        VkPipelineRasterizationProvokingVertexStateCreateInfoEXT,
        pNext
    )
        - 4usize];
    ["Offset of field: VkPipelineRasterizationProvokingVertexStateCreateInfoEXT::provokingVertexMode"] [:: core :: mem :: offset_of ! (VkPipelineRasterizationProvokingVertexStateCreateInfoEXT , provokingVertexMode) - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkHeadlessSurfaceCreateInfoEXT"]
        [::core::mem::size_of::<VkHeadlessSurfaceCreateInfoEXT>() - 12usize];
    ["Alignment of VkHeadlessSurfaceCreateInfoEXT"]
        [::core::mem::align_of::<VkHeadlessSurfaceCreateInfoEXT>() - 4usize];
    ["Offset of field: VkHeadlessSurfaceCreateInfoEXT::sType"]
        [::core::mem::offset_of!(VkHeadlessSurfaceCreateInfoEXT, sType) - 0usize];
    ["Offset of field: VkHeadlessSurfaceCreateInfoEXT::pNext"]
        [::core::mem::offset_of!(VkHeadlessSurfaceCreateInfoEXT, pNext) - 4usize];
    ["Offset of field: VkHeadlessSurfaceCreateInfoEXT::flags"]
        [::core::mem::offset_of!(VkHeadlessSurfaceCreateInfoEXT, flags) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceShaderAtomicFloatFeaturesEXT"]
        [::core::mem::size_of::<VkPhysicalDeviceShaderAtomicFloatFeaturesEXT>() - 56usize];
    ["Alignment of VkPhysicalDeviceShaderAtomicFloatFeaturesEXT"]
        [::core::mem::align_of::<VkPhysicalDeviceShaderAtomicFloatFeaturesEXT>() - 4usize];
    ["Offset of field: VkPhysicalDeviceShaderAtomicFloatFeaturesEXT::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceShaderAtomicFloatFeaturesEXT::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceShaderAtomicFloatFeaturesEXT::shaderBufferFloat32Atomics"][::core::mem::offset_of!(
        VkPhysicalDeviceShaderAtomicFloatFeaturesEXT,
        shaderBufferFloat32Atomics
    )
        - 8usize];
    ["Offset of field: VkPhysicalDeviceShaderAtomicFloatFeaturesEXT::shaderBufferFloat32AtomicAdd"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceShaderAtomicFloatFeaturesEXT , shaderBufferFloat32AtomicAdd) - 12usize] ;
    ["Offset of field: VkPhysicalDeviceShaderAtomicFloatFeaturesEXT::shaderBufferFloat64Atomics"][::core::mem::offset_of!(
        VkPhysicalDeviceShaderAtomicFloatFeaturesEXT,
        shaderBufferFloat64Atomics
    )
        - 16usize];
    ["Offset of field: VkPhysicalDeviceShaderAtomicFloatFeaturesEXT::shaderBufferFloat64AtomicAdd"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceShaderAtomicFloatFeaturesEXT , shaderBufferFloat64AtomicAdd) - 20usize] ;
    ["Offset of field: VkPhysicalDeviceShaderAtomicFloatFeaturesEXT::shaderSharedFloat32Atomics"][::core::mem::offset_of!(
        VkPhysicalDeviceShaderAtomicFloatFeaturesEXT,
        shaderSharedFloat32Atomics
    )
        - 24usize];
    ["Offset of field: VkPhysicalDeviceShaderAtomicFloatFeaturesEXT::shaderSharedFloat32AtomicAdd"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceShaderAtomicFloatFeaturesEXT , shaderSharedFloat32AtomicAdd) - 28usize] ;
    ["Offset of field: VkPhysicalDeviceShaderAtomicFloatFeaturesEXT::shaderSharedFloat64Atomics"][::core::mem::offset_of!(
        VkPhysicalDeviceShaderAtomicFloatFeaturesEXT,
        shaderSharedFloat64Atomics
    )
        - 32usize];
    ["Offset of field: VkPhysicalDeviceShaderAtomicFloatFeaturesEXT::shaderSharedFloat64AtomicAdd"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceShaderAtomicFloatFeaturesEXT , shaderSharedFloat64AtomicAdd) - 36usize] ;
    ["Offset of field: VkPhysicalDeviceShaderAtomicFloatFeaturesEXT::shaderImageFloat32Atomics"][::core::mem::offset_of!(
        VkPhysicalDeviceShaderAtomicFloatFeaturesEXT,
        shaderImageFloat32Atomics
    )
        - 40usize];
    ["Offset of field: VkPhysicalDeviceShaderAtomicFloatFeaturesEXT::shaderImageFloat32AtomicAdd"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceShaderAtomicFloatFeaturesEXT , shaderImageFloat32AtomicAdd) - 44usize] ;
    ["Offset of field: VkPhysicalDeviceShaderAtomicFloatFeaturesEXT::sparseImageFloat32Atomics"][::core::mem::offset_of!(
        VkPhysicalDeviceShaderAtomicFloatFeaturesEXT,
        sparseImageFloat32Atomics
    )
        - 48usize];
    ["Offset of field: VkPhysicalDeviceShaderAtomicFloatFeaturesEXT::sparseImageFloat32AtomicAdd"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceShaderAtomicFloatFeaturesEXT , sparseImageFloat32AtomicAdd) - 52usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceExtendedDynamicStateFeaturesEXT"]
        [::core::mem::size_of::<VkPhysicalDeviceExtendedDynamicStateFeaturesEXT>() - 12usize];
    ["Alignment of VkPhysicalDeviceExtendedDynamicStateFeaturesEXT"]
        [::core::mem::align_of::<VkPhysicalDeviceExtendedDynamicStateFeaturesEXT>() - 4usize];
    ["Offset of field: VkPhysicalDeviceExtendedDynamicStateFeaturesEXT::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceExtendedDynamicStateFeaturesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceExtendedDynamicStateFeaturesEXT::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceExtendedDynamicStateFeaturesEXT, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceExtendedDynamicStateFeaturesEXT::extendedDynamicState"][::core::mem::offset_of!(
        VkPhysicalDeviceExtendedDynamicStateFeaturesEXT,
        extendedDynamicState
    )
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceMapMemoryPlacedFeaturesEXT"]
        [::core::mem::size_of::<VkPhysicalDeviceMapMemoryPlacedFeaturesEXT>() - 20usize];
    ["Alignment of VkPhysicalDeviceMapMemoryPlacedFeaturesEXT"]
        [::core::mem::align_of::<VkPhysicalDeviceMapMemoryPlacedFeaturesEXT>() - 4usize];
    ["Offset of field: VkPhysicalDeviceMapMemoryPlacedFeaturesEXT::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceMapMemoryPlacedFeaturesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceMapMemoryPlacedFeaturesEXT::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceMapMemoryPlacedFeaturesEXT, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceMapMemoryPlacedFeaturesEXT::memoryMapPlaced"][::core::mem::offset_of!(
        VkPhysicalDeviceMapMemoryPlacedFeaturesEXT,
        memoryMapPlaced
    ) - 8usize];
    ["Offset of field: VkPhysicalDeviceMapMemoryPlacedFeaturesEXT::memoryMapRangePlaced"][::core::mem::offset_of!(
        VkPhysicalDeviceMapMemoryPlacedFeaturesEXT,
        memoryMapRangePlaced
    )
        - 12usize];
    ["Offset of field: VkPhysicalDeviceMapMemoryPlacedFeaturesEXT::memoryUnmapReserve"][::core::mem::offset_of!(
        VkPhysicalDeviceMapMemoryPlacedFeaturesEXT,
        memoryUnmapReserve
    )
        - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceMapMemoryPlacedPropertiesEXT"]
        [::core::mem::size_of::<VkPhysicalDeviceMapMemoryPlacedPropertiesEXT>() - 16usize];
    ["Alignment of VkPhysicalDeviceMapMemoryPlacedPropertiesEXT"]
        [::core::mem::align_of::<VkPhysicalDeviceMapMemoryPlacedPropertiesEXT>() - 8usize];
    ["Offset of field: VkPhysicalDeviceMapMemoryPlacedPropertiesEXT::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceMapMemoryPlacedPropertiesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceMapMemoryPlacedPropertiesEXT::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceMapMemoryPlacedPropertiesEXT, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceMapMemoryPlacedPropertiesEXT::minPlacedMemoryMapAlignment"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceMapMemoryPlacedPropertiesEXT , minPlacedMemoryMapAlignment) - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkMemoryMapPlacedInfoEXT"]
        [::core::mem::size_of::<VkMemoryMapPlacedInfoEXT>() - 12usize];
    ["Alignment of VkMemoryMapPlacedInfoEXT"]
        [::core::mem::align_of::<VkMemoryMapPlacedInfoEXT>() - 4usize];
    ["Offset of field: VkMemoryMapPlacedInfoEXT::sType"]
        [::core::mem::offset_of!(VkMemoryMapPlacedInfoEXT, sType) - 0usize];
    ["Offset of field: VkMemoryMapPlacedInfoEXT::pNext"]
        [::core::mem::offset_of!(VkMemoryMapPlacedInfoEXT, pNext) - 4usize];
    ["Offset of field: VkMemoryMapPlacedInfoEXT::pPlacedAddress"]
        [::core::mem::offset_of!(VkMemoryMapPlacedInfoEXT, pPlacedAddress) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT"]
        [::core::mem::size_of::<VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT>() - 56usize];
    ["Alignment of VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT"]
        [::core::mem::align_of::<VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT>() - 4usize];
    ["Offset of field: VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT::shaderBufferFloat16Atomics"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT , shaderBufferFloat16Atomics) - 8usize] ;
    ["Offset of field: VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT::shaderBufferFloat16AtomicAdd"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT , shaderBufferFloat16AtomicAdd) - 12usize] ;
    ["Offset of field: VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT::shaderBufferFloat16AtomicMinMax"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT , shaderBufferFloat16AtomicMinMax) - 16usize] ;
    ["Offset of field: VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT::shaderBufferFloat32AtomicMinMax"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT , shaderBufferFloat32AtomicMinMax) - 20usize] ;
    ["Offset of field: VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT::shaderBufferFloat64AtomicMinMax"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT , shaderBufferFloat64AtomicMinMax) - 24usize] ;
    ["Offset of field: VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT::shaderSharedFloat16Atomics"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT , shaderSharedFloat16Atomics) - 28usize] ;
    ["Offset of field: VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT::shaderSharedFloat16AtomicAdd"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT , shaderSharedFloat16AtomicAdd) - 32usize] ;
    ["Offset of field: VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT::shaderSharedFloat16AtomicMinMax"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT , shaderSharedFloat16AtomicMinMax) - 36usize] ;
    ["Offset of field: VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT::shaderSharedFloat32AtomicMinMax"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT , shaderSharedFloat32AtomicMinMax) - 40usize] ;
    ["Offset of field: VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT::shaderSharedFloat64AtomicMinMax"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT , shaderSharedFloat64AtomicMinMax) - 44usize] ;
    ["Offset of field: VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT::shaderImageFloat32AtomicMinMax"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT , shaderImageFloat32AtomicMinMax) - 48usize] ;
    ["Offset of field: VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT::sparseImageFloat32AtomicMinMax"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT , sparseImageFloat32AtomicMinMax) - 52usize] ;
};
pub const VkPresentScalingFlagBitsEXT_VK_PRESENT_SCALING_ONE_TO_ONE_BIT_EXT:
    VkPresentScalingFlagBitsEXT = 1;
pub const VkPresentScalingFlagBitsEXT_VK_PRESENT_SCALING_ASPECT_RATIO_STRETCH_BIT_EXT:
    VkPresentScalingFlagBitsEXT = 2;
pub const VkPresentScalingFlagBitsEXT_VK_PRESENT_SCALING_STRETCH_BIT_EXT:
    VkPresentScalingFlagBitsEXT = 4;
pub const VkPresentScalingFlagBitsEXT_VK_PRESENT_SCALING_FLAG_BITS_MAX_ENUM_EXT:
    VkPresentScalingFlagBitsEXT = 2147483647;
pub const VkPresentGravityFlagBitsEXT_VK_PRESENT_GRAVITY_MIN_BIT_EXT: VkPresentGravityFlagBitsEXT =
    1;
pub const VkPresentGravityFlagBitsEXT_VK_PRESENT_GRAVITY_MAX_BIT_EXT: VkPresentGravityFlagBitsEXT =
    2;
pub const VkPresentGravityFlagBitsEXT_VK_PRESENT_GRAVITY_CENTERED_BIT_EXT:
    VkPresentGravityFlagBitsEXT = 4;
pub const VkPresentGravityFlagBitsEXT_VK_PRESENT_GRAVITY_FLAG_BITS_MAX_ENUM_EXT:
    VkPresentGravityFlagBitsEXT = 2147483647;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSurfacePresentModeEXT"]
        [::core::mem::size_of::<VkSurfacePresentModeEXT>() - 12usize];
    ["Alignment of VkSurfacePresentModeEXT"]
        [::core::mem::align_of::<VkSurfacePresentModeEXT>() - 4usize];
    ["Offset of field: VkSurfacePresentModeEXT::sType"]
        [::core::mem::offset_of!(VkSurfacePresentModeEXT, sType) - 0usize];
    ["Offset of field: VkSurfacePresentModeEXT::pNext"]
        [::core::mem::offset_of!(VkSurfacePresentModeEXT, pNext) - 4usize];
    ["Offset of field: VkSurfacePresentModeEXT::presentMode"]
        [::core::mem::offset_of!(VkSurfacePresentModeEXT, presentMode) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSurfacePresentScalingCapabilitiesEXT"]
        [::core::mem::size_of::<VkSurfacePresentScalingCapabilitiesEXT>() - 36usize];
    ["Alignment of VkSurfacePresentScalingCapabilitiesEXT"]
        [::core::mem::align_of::<VkSurfacePresentScalingCapabilitiesEXT>() - 4usize];
    ["Offset of field: VkSurfacePresentScalingCapabilitiesEXT::sType"]
        [::core::mem::offset_of!(VkSurfacePresentScalingCapabilitiesEXT, sType) - 0usize];
    ["Offset of field: VkSurfacePresentScalingCapabilitiesEXT::pNext"]
        [::core::mem::offset_of!(VkSurfacePresentScalingCapabilitiesEXT, pNext) - 4usize];
    ["Offset of field: VkSurfacePresentScalingCapabilitiesEXT::supportedPresentScaling"][::core::mem::offset_of!(
        VkSurfacePresentScalingCapabilitiesEXT,
        supportedPresentScaling
    )
        - 8usize];
    ["Offset of field: VkSurfacePresentScalingCapabilitiesEXT::supportedPresentGravityX"][::core::mem::offset_of!(
        VkSurfacePresentScalingCapabilitiesEXT,
        supportedPresentGravityX
    )
        - 12usize];
    ["Offset of field: VkSurfacePresentScalingCapabilitiesEXT::supportedPresentGravityY"][::core::mem::offset_of!(
        VkSurfacePresentScalingCapabilitiesEXT,
        supportedPresentGravityY
    )
        - 16usize];
    ["Offset of field: VkSurfacePresentScalingCapabilitiesEXT::minScaledImageExtent"][::core::mem::offset_of!(
        VkSurfacePresentScalingCapabilitiesEXT,
        minScaledImageExtent
    ) - 20usize];
    ["Offset of field: VkSurfacePresentScalingCapabilitiesEXT::maxScaledImageExtent"][::core::mem::offset_of!(
        VkSurfacePresentScalingCapabilitiesEXT,
        maxScaledImageExtent
    ) - 28usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSurfacePresentModeCompatibilityEXT"]
        [::core::mem::size_of::<VkSurfacePresentModeCompatibilityEXT>() - 16usize];
    ["Alignment of VkSurfacePresentModeCompatibilityEXT"]
        [::core::mem::align_of::<VkSurfacePresentModeCompatibilityEXT>() - 4usize];
    ["Offset of field: VkSurfacePresentModeCompatibilityEXT::sType"]
        [::core::mem::offset_of!(VkSurfacePresentModeCompatibilityEXT, sType) - 0usize];
    ["Offset of field: VkSurfacePresentModeCompatibilityEXT::pNext"]
        [::core::mem::offset_of!(VkSurfacePresentModeCompatibilityEXT, pNext) - 4usize];
    ["Offset of field: VkSurfacePresentModeCompatibilityEXT::presentModeCount"]
        [::core::mem::offset_of!(VkSurfacePresentModeCompatibilityEXT, presentModeCount) - 8usize];
    ["Offset of field: VkSurfacePresentModeCompatibilityEXT::pPresentModes"]
        [::core::mem::offset_of!(VkSurfacePresentModeCompatibilityEXT, pPresentModes) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT"]
        [::core::mem::size_of::<VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT>() - 12usize];
    ["Alignment of VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT"]
        [::core::mem::align_of::<VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT>() - 4usize];
    ["Offset of field: VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT::swapchainMaintenance1"][::core::mem::offset_of!(
        VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT,
        swapchainMaintenance1
    )
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSwapchainPresentFenceInfoEXT"]
        [::core::mem::size_of::<VkSwapchainPresentFenceInfoEXT>() - 16usize];
    ["Alignment of VkSwapchainPresentFenceInfoEXT"]
        [::core::mem::align_of::<VkSwapchainPresentFenceInfoEXT>() - 4usize];
    ["Offset of field: VkSwapchainPresentFenceInfoEXT::sType"]
        [::core::mem::offset_of!(VkSwapchainPresentFenceInfoEXT, sType) - 0usize];
    ["Offset of field: VkSwapchainPresentFenceInfoEXT::pNext"]
        [::core::mem::offset_of!(VkSwapchainPresentFenceInfoEXT, pNext) - 4usize];
    ["Offset of field: VkSwapchainPresentFenceInfoEXT::swapchainCount"]
        [::core::mem::offset_of!(VkSwapchainPresentFenceInfoEXT, swapchainCount) - 8usize];
    ["Offset of field: VkSwapchainPresentFenceInfoEXT::pFences"]
        [::core::mem::offset_of!(VkSwapchainPresentFenceInfoEXT, pFences) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSwapchainPresentModesCreateInfoEXT"]
        [::core::mem::size_of::<VkSwapchainPresentModesCreateInfoEXT>() - 16usize];
    ["Alignment of VkSwapchainPresentModesCreateInfoEXT"]
        [::core::mem::align_of::<VkSwapchainPresentModesCreateInfoEXT>() - 4usize];
    ["Offset of field: VkSwapchainPresentModesCreateInfoEXT::sType"]
        [::core::mem::offset_of!(VkSwapchainPresentModesCreateInfoEXT, sType) - 0usize];
    ["Offset of field: VkSwapchainPresentModesCreateInfoEXT::pNext"]
        [::core::mem::offset_of!(VkSwapchainPresentModesCreateInfoEXT, pNext) - 4usize];
    ["Offset of field: VkSwapchainPresentModesCreateInfoEXT::presentModeCount"]
        [::core::mem::offset_of!(VkSwapchainPresentModesCreateInfoEXT, presentModeCount) - 8usize];
    ["Offset of field: VkSwapchainPresentModesCreateInfoEXT::pPresentModes"]
        [::core::mem::offset_of!(VkSwapchainPresentModesCreateInfoEXT, pPresentModes) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSwapchainPresentModeInfoEXT"]
        [::core::mem::size_of::<VkSwapchainPresentModeInfoEXT>() - 16usize];
    ["Alignment of VkSwapchainPresentModeInfoEXT"]
        [::core::mem::align_of::<VkSwapchainPresentModeInfoEXT>() - 4usize];
    ["Offset of field: VkSwapchainPresentModeInfoEXT::sType"]
        [::core::mem::offset_of!(VkSwapchainPresentModeInfoEXT, sType) - 0usize];
    ["Offset of field: VkSwapchainPresentModeInfoEXT::pNext"]
        [::core::mem::offset_of!(VkSwapchainPresentModeInfoEXT, pNext) - 4usize];
    ["Offset of field: VkSwapchainPresentModeInfoEXT::swapchainCount"]
        [::core::mem::offset_of!(VkSwapchainPresentModeInfoEXT, swapchainCount) - 8usize];
    ["Offset of field: VkSwapchainPresentModeInfoEXT::pPresentModes"]
        [::core::mem::offset_of!(VkSwapchainPresentModeInfoEXT, pPresentModes) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSwapchainPresentScalingCreateInfoEXT"]
        [::core::mem::size_of::<VkSwapchainPresentScalingCreateInfoEXT>() - 20usize];
    ["Alignment of VkSwapchainPresentScalingCreateInfoEXT"]
        [::core::mem::align_of::<VkSwapchainPresentScalingCreateInfoEXT>() - 4usize];
    ["Offset of field: VkSwapchainPresentScalingCreateInfoEXT::sType"]
        [::core::mem::offset_of!(VkSwapchainPresentScalingCreateInfoEXT, sType) - 0usize];
    ["Offset of field: VkSwapchainPresentScalingCreateInfoEXT::pNext"]
        [::core::mem::offset_of!(VkSwapchainPresentScalingCreateInfoEXT, pNext) - 4usize];
    ["Offset of field: VkSwapchainPresentScalingCreateInfoEXT::scalingBehavior"]
        [::core::mem::offset_of!(VkSwapchainPresentScalingCreateInfoEXT, scalingBehavior) - 8usize];
    ["Offset of field: VkSwapchainPresentScalingCreateInfoEXT::presentGravityX"][::core::mem::offset_of!(
        VkSwapchainPresentScalingCreateInfoEXT,
        presentGravityX
    ) - 12usize];
    ["Offset of field: VkSwapchainPresentScalingCreateInfoEXT::presentGravityY"][::core::mem::offset_of!(
        VkSwapchainPresentScalingCreateInfoEXT,
        presentGravityY
    ) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkReleaseSwapchainImagesInfoEXT"]
        [::core::mem::size_of::<VkReleaseSwapchainImagesInfoEXT>() - 24usize];
    ["Alignment of VkReleaseSwapchainImagesInfoEXT"]
        [::core::mem::align_of::<VkReleaseSwapchainImagesInfoEXT>() - 8usize];
    ["Offset of field: VkReleaseSwapchainImagesInfoEXT::sType"]
        [::core::mem::offset_of!(VkReleaseSwapchainImagesInfoEXT, sType) - 0usize];
    ["Offset of field: VkReleaseSwapchainImagesInfoEXT::pNext"]
        [::core::mem::offset_of!(VkReleaseSwapchainImagesInfoEXT, pNext) - 4usize];
    ["Offset of field: VkReleaseSwapchainImagesInfoEXT::swapchain"]
        [::core::mem::offset_of!(VkReleaseSwapchainImagesInfoEXT, swapchain) - 8usize];
    ["Offset of field: VkReleaseSwapchainImagesInfoEXT::imageIndexCount"]
        [::core::mem::offset_of!(VkReleaseSwapchainImagesInfoEXT, imageIndexCount) - 16usize];
    ["Offset of field: VkReleaseSwapchainImagesInfoEXT::pImageIndices"]
        [::core::mem::offset_of!(VkReleaseSwapchainImagesInfoEXT, pImageIndices) - 20usize];
};
pub const VkIndirectCommandsTokenTypeNV_VK_INDIRECT_COMMANDS_TOKEN_TYPE_SHADER_GROUP_NV:
    VkIndirectCommandsTokenTypeNV = 0;
pub const VkIndirectCommandsTokenTypeNV_VK_INDIRECT_COMMANDS_TOKEN_TYPE_STATE_FLAGS_NV:
    VkIndirectCommandsTokenTypeNV = 1;
pub const VkIndirectCommandsTokenTypeNV_VK_INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NV:
    VkIndirectCommandsTokenTypeNV = 2;
pub const VkIndirectCommandsTokenTypeNV_VK_INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NV:
    VkIndirectCommandsTokenTypeNV = 3;
pub const VkIndirectCommandsTokenTypeNV_VK_INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NV:
    VkIndirectCommandsTokenTypeNV = 4;
pub const VkIndirectCommandsTokenTypeNV_VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NV:
    VkIndirectCommandsTokenTypeNV = 5;
pub const VkIndirectCommandsTokenTypeNV_VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NV:
    VkIndirectCommandsTokenTypeNV = 6;
pub const VkIndirectCommandsTokenTypeNV_VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_TASKS_NV:
    VkIndirectCommandsTokenTypeNV = 7;
pub const VkIndirectCommandsTokenTypeNV_VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_MESH_TASKS_NV:
    VkIndirectCommandsTokenTypeNV = 1000328000;
pub const VkIndirectCommandsTokenTypeNV_VK_INDIRECT_COMMANDS_TOKEN_TYPE_PIPELINE_NV:
    VkIndirectCommandsTokenTypeNV = 1000428003;
pub const VkIndirectCommandsTokenTypeNV_VK_INDIRECT_COMMANDS_TOKEN_TYPE_DISPATCH_NV:
    VkIndirectCommandsTokenTypeNV = 1000428004;
pub const VkIndirectCommandsTokenTypeNV_VK_INDIRECT_COMMANDS_TOKEN_TYPE_MAX_ENUM_NV:
    VkIndirectCommandsTokenTypeNV = 2147483647;
pub const VkIndirectStateFlagBitsNV_VK_INDIRECT_STATE_FLAG_FRONTFACE_BIT_NV:
    VkIndirectStateFlagBitsNV = 1;
pub const VkIndirectStateFlagBitsNV_VK_INDIRECT_STATE_FLAG_BITS_MAX_ENUM_NV:
    VkIndirectStateFlagBitsNV = 2147483647;
pub const VkIndirectCommandsLayoutUsageFlagBitsNV_VK_INDIRECT_COMMANDS_LAYOUT_USAGE_EXPLICIT_PREPROCESS_BIT_NV : VkIndirectCommandsLayoutUsageFlagBitsNV = 1 ;
pub const VkIndirectCommandsLayoutUsageFlagBitsNV_VK_INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NV : VkIndirectCommandsLayoutUsageFlagBitsNV = 2 ;
pub const VkIndirectCommandsLayoutUsageFlagBitsNV_VK_INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NV : VkIndirectCommandsLayoutUsageFlagBitsNV = 4 ;
pub const VkIndirectCommandsLayoutUsageFlagBitsNV_VK_INDIRECT_COMMANDS_LAYOUT_USAGE_FLAG_BITS_MAX_ENUM_NV : VkIndirectCommandsLayoutUsageFlagBitsNV = 2147483647 ;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV"]
        [::core::mem::size_of::<VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV>() - 44usize];
    ["Alignment of VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV"]
        [::core::mem::align_of::<VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV>() - 4usize];
    ["Offset of field: VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV::sType"][::core::mem::offset_of!(
        VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV::pNext"][::core::mem::offset_of!(
        VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV,
        pNext
    ) - 4usize];
    ["Offset of field: VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV::maxGraphicsShaderGroupCount"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV , maxGraphicsShaderGroupCount) - 8usize] ;
    ["Offset of field: VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV::maxIndirectSequenceCount"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV , maxIndirectSequenceCount) - 12usize] ;
    ["Offset of field: VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV::maxIndirectCommandsTokenCount"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV , maxIndirectCommandsTokenCount) - 16usize] ;
    ["Offset of field: VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV::maxIndirectCommandsStreamCount"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV , maxIndirectCommandsStreamCount) - 20usize] ;
    ["Offset of field: VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV::maxIndirectCommandsTokenOffset"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV , maxIndirectCommandsTokenOffset) - 24usize] ;
    ["Offset of field: VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV::maxIndirectCommandsStreamStride"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV , maxIndirectCommandsStreamStride) - 28usize] ;
    ["Offset of field: VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV::minSequencesCountBufferOffsetAlignment"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV , minSequencesCountBufferOffsetAlignment) - 32usize] ;
    ["Offset of field: VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV::minSequencesIndexBufferOffsetAlignment"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV , minSequencesIndexBufferOffsetAlignment) - 36usize] ;
    ["Offset of field: VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV::minIndirectCommandsBufferOffsetAlignment"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV , minIndirectCommandsBufferOffsetAlignment) - 40usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV"]
        [::core::mem::size_of::<VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV>() - 12usize];
    ["Alignment of VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV"]
        [::core::mem::align_of::<VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV>() - 4usize];
    ["Offset of field: VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV::sType"][::core::mem::offset_of!(
        VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV::pNext"][::core::mem::offset_of!(
        VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV,
        pNext
    ) - 4usize];
    ["Offset of field: VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV::deviceGeneratedCommands"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV , deviceGeneratedCommands) - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkGraphicsShaderGroupCreateInfoNV"]
        [::core::mem::size_of::<VkGraphicsShaderGroupCreateInfoNV>() - 24usize];
    ["Alignment of VkGraphicsShaderGroupCreateInfoNV"]
        [::core::mem::align_of::<VkGraphicsShaderGroupCreateInfoNV>() - 4usize];
    ["Offset of field: VkGraphicsShaderGroupCreateInfoNV::sType"]
        [::core::mem::offset_of!(VkGraphicsShaderGroupCreateInfoNV, sType) - 0usize];
    ["Offset of field: VkGraphicsShaderGroupCreateInfoNV::pNext"]
        [::core::mem::offset_of!(VkGraphicsShaderGroupCreateInfoNV, pNext) - 4usize];
    ["Offset of field: VkGraphicsShaderGroupCreateInfoNV::stageCount"]
        [::core::mem::offset_of!(VkGraphicsShaderGroupCreateInfoNV, stageCount) - 8usize];
    ["Offset of field: VkGraphicsShaderGroupCreateInfoNV::pStages"]
        [::core::mem::offset_of!(VkGraphicsShaderGroupCreateInfoNV, pStages) - 12usize];
    ["Offset of field: VkGraphicsShaderGroupCreateInfoNV::pVertexInputState"]
        [::core::mem::offset_of!(VkGraphicsShaderGroupCreateInfoNV, pVertexInputState) - 16usize];
    ["Offset of field: VkGraphicsShaderGroupCreateInfoNV::pTessellationState"]
        [::core::mem::offset_of!(VkGraphicsShaderGroupCreateInfoNV, pTessellationState) - 20usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkGraphicsPipelineShaderGroupsCreateInfoNV"]
        [::core::mem::size_of::<VkGraphicsPipelineShaderGroupsCreateInfoNV>() - 24usize];
    ["Alignment of VkGraphicsPipelineShaderGroupsCreateInfoNV"]
        [::core::mem::align_of::<VkGraphicsPipelineShaderGroupsCreateInfoNV>() - 4usize];
    ["Offset of field: VkGraphicsPipelineShaderGroupsCreateInfoNV::sType"]
        [::core::mem::offset_of!(VkGraphicsPipelineShaderGroupsCreateInfoNV, sType) - 0usize];
    ["Offset of field: VkGraphicsPipelineShaderGroupsCreateInfoNV::pNext"]
        [::core::mem::offset_of!(VkGraphicsPipelineShaderGroupsCreateInfoNV, pNext) - 4usize];
    ["Offset of field: VkGraphicsPipelineShaderGroupsCreateInfoNV::groupCount"]
        [::core::mem::offset_of!(VkGraphicsPipelineShaderGroupsCreateInfoNV, groupCount) - 8usize];
    ["Offset of field: VkGraphicsPipelineShaderGroupsCreateInfoNV::pGroups"]
        [::core::mem::offset_of!(VkGraphicsPipelineShaderGroupsCreateInfoNV, pGroups) - 12usize];
    ["Offset of field: VkGraphicsPipelineShaderGroupsCreateInfoNV::pipelineCount"][::core::mem::offset_of!(
        VkGraphicsPipelineShaderGroupsCreateInfoNV,
        pipelineCount
    ) - 16usize];
    ["Offset of field: VkGraphicsPipelineShaderGroupsCreateInfoNV::pPipelines"]
        [::core::mem::offset_of!(VkGraphicsPipelineShaderGroupsCreateInfoNV, pPipelines) - 20usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkBindShaderGroupIndirectCommandNV"]
        [::core::mem::size_of::<VkBindShaderGroupIndirectCommandNV>() - 4usize];
    ["Alignment of VkBindShaderGroupIndirectCommandNV"]
        [::core::mem::align_of::<VkBindShaderGroupIndirectCommandNV>() - 4usize];
    ["Offset of field: VkBindShaderGroupIndirectCommandNV::groupIndex"]
        [::core::mem::offset_of!(VkBindShaderGroupIndirectCommandNV, groupIndex) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkBindIndexBufferIndirectCommandNV"]
        [::core::mem::size_of::<VkBindIndexBufferIndirectCommandNV>() - 16usize];
    ["Alignment of VkBindIndexBufferIndirectCommandNV"]
        [::core::mem::align_of::<VkBindIndexBufferIndirectCommandNV>() - 8usize];
    ["Offset of field: VkBindIndexBufferIndirectCommandNV::bufferAddress"]
        [::core::mem::offset_of!(VkBindIndexBufferIndirectCommandNV, bufferAddress) - 0usize];
    ["Offset of field: VkBindIndexBufferIndirectCommandNV::size"]
        [::core::mem::offset_of!(VkBindIndexBufferIndirectCommandNV, size) - 8usize];
    ["Offset of field: VkBindIndexBufferIndirectCommandNV::indexType"]
        [::core::mem::offset_of!(VkBindIndexBufferIndirectCommandNV, indexType) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkBindVertexBufferIndirectCommandNV"]
        [::core::mem::size_of::<VkBindVertexBufferIndirectCommandNV>() - 16usize];
    ["Alignment of VkBindVertexBufferIndirectCommandNV"]
        [::core::mem::align_of::<VkBindVertexBufferIndirectCommandNV>() - 8usize];
    ["Offset of field: VkBindVertexBufferIndirectCommandNV::bufferAddress"]
        [::core::mem::offset_of!(VkBindVertexBufferIndirectCommandNV, bufferAddress) - 0usize];
    ["Offset of field: VkBindVertexBufferIndirectCommandNV::size"]
        [::core::mem::offset_of!(VkBindVertexBufferIndirectCommandNV, size) - 8usize];
    ["Offset of field: VkBindVertexBufferIndirectCommandNV::stride"]
        [::core::mem::offset_of!(VkBindVertexBufferIndirectCommandNV, stride) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSetStateFlagsIndirectCommandNV"]
        [::core::mem::size_of::<VkSetStateFlagsIndirectCommandNV>() - 4usize];
    ["Alignment of VkSetStateFlagsIndirectCommandNV"]
        [::core::mem::align_of::<VkSetStateFlagsIndirectCommandNV>() - 4usize];
    ["Offset of field: VkSetStateFlagsIndirectCommandNV::data"]
        [::core::mem::offset_of!(VkSetStateFlagsIndirectCommandNV, data) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkIndirectCommandsStreamNV"]
        [::core::mem::size_of::<VkIndirectCommandsStreamNV>() - 16usize];
    ["Alignment of VkIndirectCommandsStreamNV"]
        [::core::mem::align_of::<VkIndirectCommandsStreamNV>() - 8usize];
    ["Offset of field: VkIndirectCommandsStreamNV::buffer"]
        [::core::mem::offset_of!(VkIndirectCommandsStreamNV, buffer) - 0usize];
    ["Offset of field: VkIndirectCommandsStreamNV::offset"]
        [::core::mem::offset_of!(VkIndirectCommandsStreamNV, offset) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkIndirectCommandsLayoutTokenNV"]
        [::core::mem::size_of::<VkIndirectCommandsLayoutTokenNV>() - 72usize];
    ["Alignment of VkIndirectCommandsLayoutTokenNV"]
        [::core::mem::align_of::<VkIndirectCommandsLayoutTokenNV>() - 8usize];
    ["Offset of field: VkIndirectCommandsLayoutTokenNV::sType"]
        [::core::mem::offset_of!(VkIndirectCommandsLayoutTokenNV, sType) - 0usize];
    ["Offset of field: VkIndirectCommandsLayoutTokenNV::pNext"]
        [::core::mem::offset_of!(VkIndirectCommandsLayoutTokenNV, pNext) - 4usize];
    ["Offset of field: VkIndirectCommandsLayoutTokenNV::tokenType"]
        [::core::mem::offset_of!(VkIndirectCommandsLayoutTokenNV, tokenType) - 8usize];
    ["Offset of field: VkIndirectCommandsLayoutTokenNV::stream"]
        [::core::mem::offset_of!(VkIndirectCommandsLayoutTokenNV, stream) - 12usize];
    ["Offset of field: VkIndirectCommandsLayoutTokenNV::offset"]
        [::core::mem::offset_of!(VkIndirectCommandsLayoutTokenNV, offset) - 16usize];
    ["Offset of field: VkIndirectCommandsLayoutTokenNV::vertexBindingUnit"]
        [::core::mem::offset_of!(VkIndirectCommandsLayoutTokenNV, vertexBindingUnit) - 20usize];
    ["Offset of field: VkIndirectCommandsLayoutTokenNV::vertexDynamicStride"]
        [::core::mem::offset_of!(VkIndirectCommandsLayoutTokenNV, vertexDynamicStride) - 24usize];
    ["Offset of field: VkIndirectCommandsLayoutTokenNV::pushconstantPipelineLayout"][::core::mem::offset_of!(
        VkIndirectCommandsLayoutTokenNV,
        pushconstantPipelineLayout
    ) - 32usize];
    ["Offset of field: VkIndirectCommandsLayoutTokenNV::pushconstantShaderStageFlags"][::core::mem::offset_of!(
        VkIndirectCommandsLayoutTokenNV,
        pushconstantShaderStageFlags
    ) - 40usize];
    ["Offset of field: VkIndirectCommandsLayoutTokenNV::pushconstantOffset"]
        [::core::mem::offset_of!(VkIndirectCommandsLayoutTokenNV, pushconstantOffset) - 44usize];
    ["Offset of field: VkIndirectCommandsLayoutTokenNV::pushconstantSize"]
        [::core::mem::offset_of!(VkIndirectCommandsLayoutTokenNV, pushconstantSize) - 48usize];
    ["Offset of field: VkIndirectCommandsLayoutTokenNV::indirectStateFlags"]
        [::core::mem::offset_of!(VkIndirectCommandsLayoutTokenNV, indirectStateFlags) - 52usize];
    ["Offset of field: VkIndirectCommandsLayoutTokenNV::indexTypeCount"]
        [::core::mem::offset_of!(VkIndirectCommandsLayoutTokenNV, indexTypeCount) - 56usize];
    ["Offset of field: VkIndirectCommandsLayoutTokenNV::pIndexTypes"]
        [::core::mem::offset_of!(VkIndirectCommandsLayoutTokenNV, pIndexTypes) - 60usize];
    ["Offset of field: VkIndirectCommandsLayoutTokenNV::pIndexTypeValues"]
        [::core::mem::offset_of!(VkIndirectCommandsLayoutTokenNV, pIndexTypeValues) - 64usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkIndirectCommandsLayoutCreateInfoNV"]
        [::core::mem::size_of::<VkIndirectCommandsLayoutCreateInfoNV>() - 32usize];
    ["Alignment of VkIndirectCommandsLayoutCreateInfoNV"]
        [::core::mem::align_of::<VkIndirectCommandsLayoutCreateInfoNV>() - 4usize];
    ["Offset of field: VkIndirectCommandsLayoutCreateInfoNV::sType"]
        [::core::mem::offset_of!(VkIndirectCommandsLayoutCreateInfoNV, sType) - 0usize];
    ["Offset of field: VkIndirectCommandsLayoutCreateInfoNV::pNext"]
        [::core::mem::offset_of!(VkIndirectCommandsLayoutCreateInfoNV, pNext) - 4usize];
    ["Offset of field: VkIndirectCommandsLayoutCreateInfoNV::flags"]
        [::core::mem::offset_of!(VkIndirectCommandsLayoutCreateInfoNV, flags) - 8usize];
    ["Offset of field: VkIndirectCommandsLayoutCreateInfoNV::pipelineBindPoint"][::core::mem::offset_of!(
        VkIndirectCommandsLayoutCreateInfoNV,
        pipelineBindPoint
    ) - 12usize];
    ["Offset of field: VkIndirectCommandsLayoutCreateInfoNV::tokenCount"]
        [::core::mem::offset_of!(VkIndirectCommandsLayoutCreateInfoNV, tokenCount) - 16usize];
    ["Offset of field: VkIndirectCommandsLayoutCreateInfoNV::pTokens"]
        [::core::mem::offset_of!(VkIndirectCommandsLayoutCreateInfoNV, pTokens) - 20usize];
    ["Offset of field: VkIndirectCommandsLayoutCreateInfoNV::streamCount"]
        [::core::mem::offset_of!(VkIndirectCommandsLayoutCreateInfoNV, streamCount) - 24usize];
    ["Offset of field: VkIndirectCommandsLayoutCreateInfoNV::pStreamStrides"]
        [::core::mem::offset_of!(VkIndirectCommandsLayoutCreateInfoNV, pStreamStrides) - 28usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkGeneratedCommandsInfoNV"]
        [::core::mem::size_of::<VkGeneratedCommandsInfoNV>() - 104usize];
    ["Alignment of VkGeneratedCommandsInfoNV"]
        [::core::mem::align_of::<VkGeneratedCommandsInfoNV>() - 8usize];
    ["Offset of field: VkGeneratedCommandsInfoNV::sType"]
        [::core::mem::offset_of!(VkGeneratedCommandsInfoNV, sType) - 0usize];
    ["Offset of field: VkGeneratedCommandsInfoNV::pNext"]
        [::core::mem::offset_of!(VkGeneratedCommandsInfoNV, pNext) - 4usize];
    ["Offset of field: VkGeneratedCommandsInfoNV::pipelineBindPoint"]
        [::core::mem::offset_of!(VkGeneratedCommandsInfoNV, pipelineBindPoint) - 8usize];
    ["Offset of field: VkGeneratedCommandsInfoNV::pipeline"]
        [::core::mem::offset_of!(VkGeneratedCommandsInfoNV, pipeline) - 16usize];
    ["Offset of field: VkGeneratedCommandsInfoNV::indirectCommandsLayout"]
        [::core::mem::offset_of!(VkGeneratedCommandsInfoNV, indirectCommandsLayout) - 24usize];
    ["Offset of field: VkGeneratedCommandsInfoNV::streamCount"]
        [::core::mem::offset_of!(VkGeneratedCommandsInfoNV, streamCount) - 32usize];
    ["Offset of field: VkGeneratedCommandsInfoNV::pStreams"]
        [::core::mem::offset_of!(VkGeneratedCommandsInfoNV, pStreams) - 36usize];
    ["Offset of field: VkGeneratedCommandsInfoNV::sequencesCount"]
        [::core::mem::offset_of!(VkGeneratedCommandsInfoNV, sequencesCount) - 40usize];
    ["Offset of field: VkGeneratedCommandsInfoNV::preprocessBuffer"]
        [::core::mem::offset_of!(VkGeneratedCommandsInfoNV, preprocessBuffer) - 48usize];
    ["Offset of field: VkGeneratedCommandsInfoNV::preprocessOffset"]
        [::core::mem::offset_of!(VkGeneratedCommandsInfoNV, preprocessOffset) - 56usize];
    ["Offset of field: VkGeneratedCommandsInfoNV::preprocessSize"]
        [::core::mem::offset_of!(VkGeneratedCommandsInfoNV, preprocessSize) - 64usize];
    ["Offset of field: VkGeneratedCommandsInfoNV::sequencesCountBuffer"]
        [::core::mem::offset_of!(VkGeneratedCommandsInfoNV, sequencesCountBuffer) - 72usize];
    ["Offset of field: VkGeneratedCommandsInfoNV::sequencesCountOffset"]
        [::core::mem::offset_of!(VkGeneratedCommandsInfoNV, sequencesCountOffset) - 80usize];
    ["Offset of field: VkGeneratedCommandsInfoNV::sequencesIndexBuffer"]
        [::core::mem::offset_of!(VkGeneratedCommandsInfoNV, sequencesIndexBuffer) - 88usize];
    ["Offset of field: VkGeneratedCommandsInfoNV::sequencesIndexOffset"]
        [::core::mem::offset_of!(VkGeneratedCommandsInfoNV, sequencesIndexOffset) - 96usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkGeneratedCommandsMemoryRequirementsInfoNV"]
        [::core::mem::size_of::<VkGeneratedCommandsMemoryRequirementsInfoNV>() - 40usize];
    ["Alignment of VkGeneratedCommandsMemoryRequirementsInfoNV"]
        [::core::mem::align_of::<VkGeneratedCommandsMemoryRequirementsInfoNV>() - 8usize];
    ["Offset of field: VkGeneratedCommandsMemoryRequirementsInfoNV::sType"]
        [::core::mem::offset_of!(VkGeneratedCommandsMemoryRequirementsInfoNV, sType) - 0usize];
    ["Offset of field: VkGeneratedCommandsMemoryRequirementsInfoNV::pNext"]
        [::core::mem::offset_of!(VkGeneratedCommandsMemoryRequirementsInfoNV, pNext) - 4usize];
    ["Offset of field: VkGeneratedCommandsMemoryRequirementsInfoNV::pipelineBindPoint"][::core::mem::offset_of!(
        VkGeneratedCommandsMemoryRequirementsInfoNV,
        pipelineBindPoint
    ) - 8usize];
    ["Offset of field: VkGeneratedCommandsMemoryRequirementsInfoNV::pipeline"]
        [::core::mem::offset_of!(VkGeneratedCommandsMemoryRequirementsInfoNV, pipeline) - 16usize];
    ["Offset of field: VkGeneratedCommandsMemoryRequirementsInfoNV::indirectCommandsLayout"][::core::mem::offset_of!(
        VkGeneratedCommandsMemoryRequirementsInfoNV,
        indirectCommandsLayout
    )
        - 24usize];
    ["Offset of field: VkGeneratedCommandsMemoryRequirementsInfoNV::maxSequencesCount"][::core::mem::offset_of!(
        VkGeneratedCommandsMemoryRequirementsInfoNV,
        maxSequencesCount
    )
        - 32usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceInheritedViewportScissorFeaturesNV"]
        [::core::mem::size_of::<VkPhysicalDeviceInheritedViewportScissorFeaturesNV>() - 12usize];
    ["Alignment of VkPhysicalDeviceInheritedViewportScissorFeaturesNV"]
        [::core::mem::align_of::<VkPhysicalDeviceInheritedViewportScissorFeaturesNV>() - 4usize];
    ["Offset of field: VkPhysicalDeviceInheritedViewportScissorFeaturesNV::sType"][::core::mem::offset_of!(
        VkPhysicalDeviceInheritedViewportScissorFeaturesNV,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceInheritedViewportScissorFeaturesNV::pNext"][::core::mem::offset_of!(
        VkPhysicalDeviceInheritedViewportScissorFeaturesNV,
        pNext
    ) - 4usize];
    ["Offset of field: VkPhysicalDeviceInheritedViewportScissorFeaturesNV::inheritedViewportScissor2D"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceInheritedViewportScissorFeaturesNV , inheritedViewportScissor2D) - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkCommandBufferInheritanceViewportScissorInfoNV"]
        [::core::mem::size_of::<VkCommandBufferInheritanceViewportScissorInfoNV>() - 20usize];
    ["Alignment of VkCommandBufferInheritanceViewportScissorInfoNV"]
        [::core::mem::align_of::<VkCommandBufferInheritanceViewportScissorInfoNV>() - 4usize];
    ["Offset of field: VkCommandBufferInheritanceViewportScissorInfoNV::sType"]
        [::core::mem::offset_of!(VkCommandBufferInheritanceViewportScissorInfoNV, sType) - 0usize];
    ["Offset of field: VkCommandBufferInheritanceViewportScissorInfoNV::pNext"]
        [::core::mem::offset_of!(VkCommandBufferInheritanceViewportScissorInfoNV, pNext) - 4usize];
    ["Offset of field: VkCommandBufferInheritanceViewportScissorInfoNV::viewportScissor2D"][::core::mem::offset_of!(
        VkCommandBufferInheritanceViewportScissorInfoNV,
        viewportScissor2D
    )
        - 8usize];
    ["Offset of field: VkCommandBufferInheritanceViewportScissorInfoNV::viewportDepthCount"][::core::mem::offset_of!(
        VkCommandBufferInheritanceViewportScissorInfoNV,
        viewportDepthCount
    )
        - 12usize];
    ["Offset of field: VkCommandBufferInheritanceViewportScissorInfoNV::pViewportDepths"][::core::mem::offset_of!(
        VkCommandBufferInheritanceViewportScissorInfoNV,
        pViewportDepths
    )
        - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT"]
        [::core::mem::size_of::<VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT>() - 12usize];
    ["Alignment of VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT"]
        [::core::mem::align_of::<VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT>() - 4usize];
    ["Offset of field: VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT::texelBufferAlignment"][::core::mem::offset_of!(
        VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT,
        texelBufferAlignment
    )
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkRenderPassTransformBeginInfoQCOM"]
        [::core::mem::size_of::<VkRenderPassTransformBeginInfoQCOM>() - 12usize];
    ["Alignment of VkRenderPassTransformBeginInfoQCOM"]
        [::core::mem::align_of::<VkRenderPassTransformBeginInfoQCOM>() - 4usize];
    ["Offset of field: VkRenderPassTransformBeginInfoQCOM::sType"]
        [::core::mem::offset_of!(VkRenderPassTransformBeginInfoQCOM, sType) - 0usize];
    ["Offset of field: VkRenderPassTransformBeginInfoQCOM::pNext"]
        [::core::mem::offset_of!(VkRenderPassTransformBeginInfoQCOM, pNext) - 4usize];
    ["Offset of field: VkRenderPassTransformBeginInfoQCOM::transform"]
        [::core::mem::offset_of!(VkRenderPassTransformBeginInfoQCOM, transform) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkCommandBufferInheritanceRenderPassTransformInfoQCOM"]
        [::core::mem::size_of::<VkCommandBufferInheritanceRenderPassTransformInfoQCOM>() - 28usize];
    ["Alignment of VkCommandBufferInheritanceRenderPassTransformInfoQCOM"]
        [::core::mem::align_of::<VkCommandBufferInheritanceRenderPassTransformInfoQCOM>() - 4usize];
    ["Offset of field: VkCommandBufferInheritanceRenderPassTransformInfoQCOM::sType"][::core::mem::offset_of!(
        VkCommandBufferInheritanceRenderPassTransformInfoQCOM,
        sType
    ) - 0usize];
    ["Offset of field: VkCommandBufferInheritanceRenderPassTransformInfoQCOM::pNext"][::core::mem::offset_of!(
        VkCommandBufferInheritanceRenderPassTransformInfoQCOM,
        pNext
    ) - 4usize];
    ["Offset of field: VkCommandBufferInheritanceRenderPassTransformInfoQCOM::transform"][::core::mem::offset_of!(
        VkCommandBufferInheritanceRenderPassTransformInfoQCOM,
        transform
    )
        - 8usize];
    ["Offset of field: VkCommandBufferInheritanceRenderPassTransformInfoQCOM::renderArea"][::core::mem::offset_of!(
        VkCommandBufferInheritanceRenderPassTransformInfoQCOM,
        renderArea
    )
        - 12usize];
};
pub const VkDepthBiasRepresentationEXT_VK_DEPTH_BIAS_REPRESENTATION_LEAST_REPRESENTABLE_VALUE_FORMAT_EXT : VkDepthBiasRepresentationEXT = 0 ;
pub const VkDepthBiasRepresentationEXT_VK_DEPTH_BIAS_REPRESENTATION_LEAST_REPRESENTABLE_VALUE_FORCE_UNORM_EXT : VkDepthBiasRepresentationEXT = 1 ;
pub const VkDepthBiasRepresentationEXT_VK_DEPTH_BIAS_REPRESENTATION_FLOAT_EXT:
    VkDepthBiasRepresentationEXT = 2;
pub const VkDepthBiasRepresentationEXT_VK_DEPTH_BIAS_REPRESENTATION_MAX_ENUM_EXT:
    VkDepthBiasRepresentationEXT = 2147483647;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceDepthBiasControlFeaturesEXT"]
        [::core::mem::size_of::<VkPhysicalDeviceDepthBiasControlFeaturesEXT>() - 24usize];
    ["Alignment of VkPhysicalDeviceDepthBiasControlFeaturesEXT"]
        [::core::mem::align_of::<VkPhysicalDeviceDepthBiasControlFeaturesEXT>() - 4usize];
    ["Offset of field: VkPhysicalDeviceDepthBiasControlFeaturesEXT::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceDepthBiasControlFeaturesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceDepthBiasControlFeaturesEXT::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceDepthBiasControlFeaturesEXT, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceDepthBiasControlFeaturesEXT::depthBiasControl"][::core::mem::offset_of!(
        VkPhysicalDeviceDepthBiasControlFeaturesEXT,
        depthBiasControl
    ) - 8usize];
    ["Offset of field: VkPhysicalDeviceDepthBiasControlFeaturesEXT::leastRepresentableValueForceUnormRepresentation"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDepthBiasControlFeaturesEXT , leastRepresentableValueForceUnormRepresentation) - 12usize] ;
    ["Offset of field: VkPhysicalDeviceDepthBiasControlFeaturesEXT::floatRepresentation"][::core::mem::offset_of!(
        VkPhysicalDeviceDepthBiasControlFeaturesEXT,
        floatRepresentation
    )
        - 16usize];
    ["Offset of field: VkPhysicalDeviceDepthBiasControlFeaturesEXT::depthBiasExact"][::core::mem::offset_of!(
        VkPhysicalDeviceDepthBiasControlFeaturesEXT,
        depthBiasExact
    ) - 20usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDepthBiasInfoEXT"][::core::mem::size_of::<VkDepthBiasInfoEXT>() - 20usize];
    ["Alignment of VkDepthBiasInfoEXT"][::core::mem::align_of::<VkDepthBiasInfoEXT>() - 4usize];
    ["Offset of field: VkDepthBiasInfoEXT::sType"]
        [::core::mem::offset_of!(VkDepthBiasInfoEXT, sType) - 0usize];
    ["Offset of field: VkDepthBiasInfoEXT::pNext"]
        [::core::mem::offset_of!(VkDepthBiasInfoEXT, pNext) - 4usize];
    ["Offset of field: VkDepthBiasInfoEXT::depthBiasConstantFactor"]
        [::core::mem::offset_of!(VkDepthBiasInfoEXT, depthBiasConstantFactor) - 8usize];
    ["Offset of field: VkDepthBiasInfoEXT::depthBiasClamp"]
        [::core::mem::offset_of!(VkDepthBiasInfoEXT, depthBiasClamp) - 12usize];
    ["Offset of field: VkDepthBiasInfoEXT::depthBiasSlopeFactor"]
        [::core::mem::offset_of!(VkDepthBiasInfoEXT, depthBiasSlopeFactor) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDepthBiasRepresentationInfoEXT"]
        [::core::mem::size_of::<VkDepthBiasRepresentationInfoEXT>() - 16usize];
    ["Alignment of VkDepthBiasRepresentationInfoEXT"]
        [::core::mem::align_of::<VkDepthBiasRepresentationInfoEXT>() - 4usize];
    ["Offset of field: VkDepthBiasRepresentationInfoEXT::sType"]
        [::core::mem::offset_of!(VkDepthBiasRepresentationInfoEXT, sType) - 0usize];
    ["Offset of field: VkDepthBiasRepresentationInfoEXT::pNext"]
        [::core::mem::offset_of!(VkDepthBiasRepresentationInfoEXT, pNext) - 4usize];
    ["Offset of field: VkDepthBiasRepresentationInfoEXT::depthBiasRepresentation"][::core::mem::offset_of!(
        VkDepthBiasRepresentationInfoEXT,
        depthBiasRepresentation
    ) - 8usize];
    ["Offset of field: VkDepthBiasRepresentationInfoEXT::depthBiasExact"]
        [::core::mem::offset_of!(VkDepthBiasRepresentationInfoEXT, depthBiasExact) - 12usize];
};
pub const VkDeviceMemoryReportEventTypeEXT_VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATE_EXT:
    VkDeviceMemoryReportEventTypeEXT = 0;
pub const VkDeviceMemoryReportEventTypeEXT_VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_FREE_EXT:
    VkDeviceMemoryReportEventTypeEXT = 1;
pub const VkDeviceMemoryReportEventTypeEXT_VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_IMPORT_EXT:
    VkDeviceMemoryReportEventTypeEXT = 2;
pub const VkDeviceMemoryReportEventTypeEXT_VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_UNIMPORT_EXT:
    VkDeviceMemoryReportEventTypeEXT = 3;
pub const VkDeviceMemoryReportEventTypeEXT_VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATION_FAILED_EXT : VkDeviceMemoryReportEventTypeEXT = 4 ;
pub const VkDeviceMemoryReportEventTypeEXT_VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_MAX_ENUM_EXT:
    VkDeviceMemoryReportEventTypeEXT = 2147483647;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceDeviceMemoryReportFeaturesEXT"]
        [::core::mem::size_of::<VkPhysicalDeviceDeviceMemoryReportFeaturesEXT>() - 12usize];
    ["Alignment of VkPhysicalDeviceDeviceMemoryReportFeaturesEXT"]
        [::core::mem::align_of::<VkPhysicalDeviceDeviceMemoryReportFeaturesEXT>() - 4usize];
    ["Offset of field: VkPhysicalDeviceDeviceMemoryReportFeaturesEXT::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceDeviceMemoryReportFeaturesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceDeviceMemoryReportFeaturesEXT::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceDeviceMemoryReportFeaturesEXT, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceDeviceMemoryReportFeaturesEXT::deviceMemoryReport"][::core::mem::offset_of!(
        VkPhysicalDeviceDeviceMemoryReportFeaturesEXT,
        deviceMemoryReport
    )
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDeviceMemoryReportCallbackDataEXT"]
        [::core::mem::size_of::<VkDeviceMemoryReportCallbackDataEXT>() - 56usize];
    ["Alignment of VkDeviceMemoryReportCallbackDataEXT"]
        [::core::mem::align_of::<VkDeviceMemoryReportCallbackDataEXT>() - 8usize];
    ["Offset of field: VkDeviceMemoryReportCallbackDataEXT::sType"]
        [::core::mem::offset_of!(VkDeviceMemoryReportCallbackDataEXT, sType) - 0usize];
    ["Offset of field: VkDeviceMemoryReportCallbackDataEXT::pNext"]
        [::core::mem::offset_of!(VkDeviceMemoryReportCallbackDataEXT, pNext) - 4usize];
    ["Offset of field: VkDeviceMemoryReportCallbackDataEXT::flags"]
        [::core::mem::offset_of!(VkDeviceMemoryReportCallbackDataEXT, flags) - 8usize];
    ["Offset of field: VkDeviceMemoryReportCallbackDataEXT::type_"]
        [::core::mem::offset_of!(VkDeviceMemoryReportCallbackDataEXT, type_) - 12usize];
    ["Offset of field: VkDeviceMemoryReportCallbackDataEXT::memoryObjectId"]
        [::core::mem::offset_of!(VkDeviceMemoryReportCallbackDataEXT, memoryObjectId) - 16usize];
    ["Offset of field: VkDeviceMemoryReportCallbackDataEXT::size"]
        [::core::mem::offset_of!(VkDeviceMemoryReportCallbackDataEXT, size) - 24usize];
    ["Offset of field: VkDeviceMemoryReportCallbackDataEXT::objectType"]
        [::core::mem::offset_of!(VkDeviceMemoryReportCallbackDataEXT, objectType) - 32usize];
    ["Offset of field: VkDeviceMemoryReportCallbackDataEXT::objectHandle"]
        [::core::mem::offset_of!(VkDeviceMemoryReportCallbackDataEXT, objectHandle) - 40usize];
    ["Offset of field: VkDeviceMemoryReportCallbackDataEXT::heapIndex"]
        [::core::mem::offset_of!(VkDeviceMemoryReportCallbackDataEXT, heapIndex) - 48usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDeviceDeviceMemoryReportCreateInfoEXT"]
        [::core::mem::size_of::<VkDeviceDeviceMemoryReportCreateInfoEXT>() - 20usize];
    ["Alignment of VkDeviceDeviceMemoryReportCreateInfoEXT"]
        [::core::mem::align_of::<VkDeviceDeviceMemoryReportCreateInfoEXT>() - 4usize];
    ["Offset of field: VkDeviceDeviceMemoryReportCreateInfoEXT::sType"]
        [::core::mem::offset_of!(VkDeviceDeviceMemoryReportCreateInfoEXT, sType) - 0usize];
    ["Offset of field: VkDeviceDeviceMemoryReportCreateInfoEXT::pNext"]
        [::core::mem::offset_of!(VkDeviceDeviceMemoryReportCreateInfoEXT, pNext) - 4usize];
    ["Offset of field: VkDeviceDeviceMemoryReportCreateInfoEXT::flags"]
        [::core::mem::offset_of!(VkDeviceDeviceMemoryReportCreateInfoEXT, flags) - 8usize];
    ["Offset of field: VkDeviceDeviceMemoryReportCreateInfoEXT::pfnUserCallback"][::core::mem::offset_of!(
        VkDeviceDeviceMemoryReportCreateInfoEXT,
        pfnUserCallback
    ) - 12usize];
    ["Offset of field: VkDeviceDeviceMemoryReportCreateInfoEXT::pUserData"]
        [::core::mem::offset_of!(VkDeviceDeviceMemoryReportCreateInfoEXT, pUserData) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSamplerCustomBorderColorCreateInfoEXT"]
        [::core::mem::size_of::<VkSamplerCustomBorderColorCreateInfoEXT>() - 28usize];
    ["Alignment of VkSamplerCustomBorderColorCreateInfoEXT"]
        [::core::mem::align_of::<VkSamplerCustomBorderColorCreateInfoEXT>() - 4usize];
    ["Offset of field: VkSamplerCustomBorderColorCreateInfoEXT::sType"]
        [::core::mem::offset_of!(VkSamplerCustomBorderColorCreateInfoEXT, sType) - 0usize];
    ["Offset of field: VkSamplerCustomBorderColorCreateInfoEXT::pNext"]
        [::core::mem::offset_of!(VkSamplerCustomBorderColorCreateInfoEXT, pNext) - 4usize];
    ["Offset of field: VkSamplerCustomBorderColorCreateInfoEXT::customBorderColor"][::core::mem::offset_of!(
        VkSamplerCustomBorderColorCreateInfoEXT,
        customBorderColor
    ) - 8usize];
    ["Offset of field: VkSamplerCustomBorderColorCreateInfoEXT::format"]
        [::core::mem::offset_of!(VkSamplerCustomBorderColorCreateInfoEXT, format) - 24usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceCustomBorderColorPropertiesEXT"]
        [::core::mem::size_of::<VkPhysicalDeviceCustomBorderColorPropertiesEXT>() - 12usize];
    ["Alignment of VkPhysicalDeviceCustomBorderColorPropertiesEXT"]
        [::core::mem::align_of::<VkPhysicalDeviceCustomBorderColorPropertiesEXT>() - 4usize];
    ["Offset of field: VkPhysicalDeviceCustomBorderColorPropertiesEXT::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceCustomBorderColorPropertiesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceCustomBorderColorPropertiesEXT::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceCustomBorderColorPropertiesEXT, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceCustomBorderColorPropertiesEXT::maxCustomBorderColorSamplers"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceCustomBorderColorPropertiesEXT , maxCustomBorderColorSamplers) - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceCustomBorderColorFeaturesEXT"]
        [::core::mem::size_of::<VkPhysicalDeviceCustomBorderColorFeaturesEXT>() - 16usize];
    ["Alignment of VkPhysicalDeviceCustomBorderColorFeaturesEXT"]
        [::core::mem::align_of::<VkPhysicalDeviceCustomBorderColorFeaturesEXT>() - 4usize];
    ["Offset of field: VkPhysicalDeviceCustomBorderColorFeaturesEXT::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceCustomBorderColorFeaturesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceCustomBorderColorFeaturesEXT::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceCustomBorderColorFeaturesEXT, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceCustomBorderColorFeaturesEXT::customBorderColors"][::core::mem::offset_of!(
        VkPhysicalDeviceCustomBorderColorFeaturesEXT,
        customBorderColors
    )
        - 8usize];
    ["Offset of field: VkPhysicalDeviceCustomBorderColorFeaturesEXT::customBorderColorWithoutFormat"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceCustomBorderColorFeaturesEXT , customBorderColorWithoutFormat) - 12usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDevicePresentBarrierFeaturesNV"]
        [::core::mem::size_of::<VkPhysicalDevicePresentBarrierFeaturesNV>() - 12usize];
    ["Alignment of VkPhysicalDevicePresentBarrierFeaturesNV"]
        [::core::mem::align_of::<VkPhysicalDevicePresentBarrierFeaturesNV>() - 4usize];
    ["Offset of field: VkPhysicalDevicePresentBarrierFeaturesNV::sType"]
        [::core::mem::offset_of!(VkPhysicalDevicePresentBarrierFeaturesNV, sType) - 0usize];
    ["Offset of field: VkPhysicalDevicePresentBarrierFeaturesNV::pNext"]
        [::core::mem::offset_of!(VkPhysicalDevicePresentBarrierFeaturesNV, pNext) - 4usize];
    ["Offset of field: VkPhysicalDevicePresentBarrierFeaturesNV::presentBarrier"][::core::mem::offset_of!(
        VkPhysicalDevicePresentBarrierFeaturesNV,
        presentBarrier
    ) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSurfaceCapabilitiesPresentBarrierNV"]
        [::core::mem::size_of::<VkSurfaceCapabilitiesPresentBarrierNV>() - 12usize];
    ["Alignment of VkSurfaceCapabilitiesPresentBarrierNV"]
        [::core::mem::align_of::<VkSurfaceCapabilitiesPresentBarrierNV>() - 4usize];
    ["Offset of field: VkSurfaceCapabilitiesPresentBarrierNV::sType"]
        [::core::mem::offset_of!(VkSurfaceCapabilitiesPresentBarrierNV, sType) - 0usize];
    ["Offset of field: VkSurfaceCapabilitiesPresentBarrierNV::pNext"]
        [::core::mem::offset_of!(VkSurfaceCapabilitiesPresentBarrierNV, pNext) - 4usize];
    ["Offset of field: VkSurfaceCapabilitiesPresentBarrierNV::presentBarrierSupported"][::core::mem::offset_of!(
        VkSurfaceCapabilitiesPresentBarrierNV,
        presentBarrierSupported
    ) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSwapchainPresentBarrierCreateInfoNV"]
        [::core::mem::size_of::<VkSwapchainPresentBarrierCreateInfoNV>() - 12usize];
    ["Alignment of VkSwapchainPresentBarrierCreateInfoNV"]
        [::core::mem::align_of::<VkSwapchainPresentBarrierCreateInfoNV>() - 4usize];
    ["Offset of field: VkSwapchainPresentBarrierCreateInfoNV::sType"]
        [::core::mem::offset_of!(VkSwapchainPresentBarrierCreateInfoNV, sType) - 0usize];
    ["Offset of field: VkSwapchainPresentBarrierCreateInfoNV::pNext"]
        [::core::mem::offset_of!(VkSwapchainPresentBarrierCreateInfoNV, pNext) - 4usize];
    ["Offset of field: VkSwapchainPresentBarrierCreateInfoNV::presentBarrierEnable"][::core::mem::offset_of!(
        VkSwapchainPresentBarrierCreateInfoNV,
        presentBarrierEnable
    ) - 8usize];
};
pub const VkDeviceDiagnosticsConfigFlagBitsNV_VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_DEBUG_INFO_BIT_NV : VkDeviceDiagnosticsConfigFlagBitsNV = 1 ;
pub const VkDeviceDiagnosticsConfigFlagBitsNV_VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_RESOURCE_TRACKING_BIT_NV : VkDeviceDiagnosticsConfigFlagBitsNV = 2 ;
pub const VkDeviceDiagnosticsConfigFlagBitsNV_VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_AUTOMATIC_CHECKPOINTS_BIT_NV : VkDeviceDiagnosticsConfigFlagBitsNV = 4 ;
pub const VkDeviceDiagnosticsConfigFlagBitsNV_VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_ERROR_REPORTING_BIT_NV : VkDeviceDiagnosticsConfigFlagBitsNV = 8 ;
pub const VkDeviceDiagnosticsConfigFlagBitsNV_VK_DEVICE_DIAGNOSTICS_CONFIG_FLAG_BITS_MAX_ENUM_NV:
    VkDeviceDiagnosticsConfigFlagBitsNV = 2147483647;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceDiagnosticsConfigFeaturesNV"]
        [::core::mem::size_of::<VkPhysicalDeviceDiagnosticsConfigFeaturesNV>() - 12usize];
    ["Alignment of VkPhysicalDeviceDiagnosticsConfigFeaturesNV"]
        [::core::mem::align_of::<VkPhysicalDeviceDiagnosticsConfigFeaturesNV>() - 4usize];
    ["Offset of field: VkPhysicalDeviceDiagnosticsConfigFeaturesNV::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceDiagnosticsConfigFeaturesNV, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceDiagnosticsConfigFeaturesNV::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceDiagnosticsConfigFeaturesNV, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceDiagnosticsConfigFeaturesNV::diagnosticsConfig"][::core::mem::offset_of!(
        VkPhysicalDeviceDiagnosticsConfigFeaturesNV,
        diagnosticsConfig
    ) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDeviceDiagnosticsConfigCreateInfoNV"]
        [::core::mem::size_of::<VkDeviceDiagnosticsConfigCreateInfoNV>() - 12usize];
    ["Alignment of VkDeviceDiagnosticsConfigCreateInfoNV"]
        [::core::mem::align_of::<VkDeviceDiagnosticsConfigCreateInfoNV>() - 4usize];
    ["Offset of field: VkDeviceDiagnosticsConfigCreateInfoNV::sType"]
        [::core::mem::offset_of!(VkDeviceDiagnosticsConfigCreateInfoNV, sType) - 0usize];
    ["Offset of field: VkDeviceDiagnosticsConfigCreateInfoNV::pNext"]
        [::core::mem::offset_of!(VkDeviceDiagnosticsConfigCreateInfoNV, pNext) - 4usize];
    ["Offset of field: VkDeviceDiagnosticsConfigCreateInfoNV::flags"]
        [::core::mem::offset_of!(VkDeviceDiagnosticsConfigCreateInfoNV, flags) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkCudaModuleCreateInfoNV"]
        [::core::mem::size_of::<VkCudaModuleCreateInfoNV>() - 16usize];
    ["Alignment of VkCudaModuleCreateInfoNV"]
        [::core::mem::align_of::<VkCudaModuleCreateInfoNV>() - 4usize];
    ["Offset of field: VkCudaModuleCreateInfoNV::sType"]
        [::core::mem::offset_of!(VkCudaModuleCreateInfoNV, sType) - 0usize];
    ["Offset of field: VkCudaModuleCreateInfoNV::pNext"]
        [::core::mem::offset_of!(VkCudaModuleCreateInfoNV, pNext) - 4usize];
    ["Offset of field: VkCudaModuleCreateInfoNV::dataSize"]
        [::core::mem::offset_of!(VkCudaModuleCreateInfoNV, dataSize) - 8usize];
    ["Offset of field: VkCudaModuleCreateInfoNV::pData"]
        [::core::mem::offset_of!(VkCudaModuleCreateInfoNV, pData) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkCudaFunctionCreateInfoNV"]
        [::core::mem::size_of::<VkCudaFunctionCreateInfoNV>() - 24usize];
    ["Alignment of VkCudaFunctionCreateInfoNV"]
        [::core::mem::align_of::<VkCudaFunctionCreateInfoNV>() - 8usize];
    ["Offset of field: VkCudaFunctionCreateInfoNV::sType"]
        [::core::mem::offset_of!(VkCudaFunctionCreateInfoNV, sType) - 0usize];
    ["Offset of field: VkCudaFunctionCreateInfoNV::pNext"]
        [::core::mem::offset_of!(VkCudaFunctionCreateInfoNV, pNext) - 4usize];
    ["Offset of field: VkCudaFunctionCreateInfoNV::module"]
        [::core::mem::offset_of!(VkCudaFunctionCreateInfoNV, module) - 8usize];
    ["Offset of field: VkCudaFunctionCreateInfoNV::pName"]
        [::core::mem::offset_of!(VkCudaFunctionCreateInfoNV, pName) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkCudaLaunchInfoNV"][::core::mem::size_of::<VkCudaLaunchInfoNV>() - 64usize];
    ["Alignment of VkCudaLaunchInfoNV"][::core::mem::align_of::<VkCudaLaunchInfoNV>() - 8usize];
    ["Offset of field: VkCudaLaunchInfoNV::sType"]
        [::core::mem::offset_of!(VkCudaLaunchInfoNV, sType) - 0usize];
    ["Offset of field: VkCudaLaunchInfoNV::pNext"]
        [::core::mem::offset_of!(VkCudaLaunchInfoNV, pNext) - 4usize];
    ["Offset of field: VkCudaLaunchInfoNV::function"]
        [::core::mem::offset_of!(VkCudaLaunchInfoNV, function) - 8usize];
    ["Offset of field: VkCudaLaunchInfoNV::gridDimX"]
        [::core::mem::offset_of!(VkCudaLaunchInfoNV, gridDimX) - 16usize];
    ["Offset of field: VkCudaLaunchInfoNV::gridDimY"]
        [::core::mem::offset_of!(VkCudaLaunchInfoNV, gridDimY) - 20usize];
    ["Offset of field: VkCudaLaunchInfoNV::gridDimZ"]
        [::core::mem::offset_of!(VkCudaLaunchInfoNV, gridDimZ) - 24usize];
    ["Offset of field: VkCudaLaunchInfoNV::blockDimX"]
        [::core::mem::offset_of!(VkCudaLaunchInfoNV, blockDimX) - 28usize];
    ["Offset of field: VkCudaLaunchInfoNV::blockDimY"]
        [::core::mem::offset_of!(VkCudaLaunchInfoNV, blockDimY) - 32usize];
    ["Offset of field: VkCudaLaunchInfoNV::blockDimZ"]
        [::core::mem::offset_of!(VkCudaLaunchInfoNV, blockDimZ) - 36usize];
    ["Offset of field: VkCudaLaunchInfoNV::sharedMemBytes"]
        [::core::mem::offset_of!(VkCudaLaunchInfoNV, sharedMemBytes) - 40usize];
    ["Offset of field: VkCudaLaunchInfoNV::paramCount"]
        [::core::mem::offset_of!(VkCudaLaunchInfoNV, paramCount) - 44usize];
    ["Offset of field: VkCudaLaunchInfoNV::pParams"]
        [::core::mem::offset_of!(VkCudaLaunchInfoNV, pParams) - 48usize];
    ["Offset of field: VkCudaLaunchInfoNV::extraCount"]
        [::core::mem::offset_of!(VkCudaLaunchInfoNV, extraCount) - 52usize];
    ["Offset of field: VkCudaLaunchInfoNV::pExtras"]
        [::core::mem::offset_of!(VkCudaLaunchInfoNV, pExtras) - 56usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceCudaKernelLaunchFeaturesNV"]
        [::core::mem::size_of::<VkPhysicalDeviceCudaKernelLaunchFeaturesNV>() - 12usize];
    ["Alignment of VkPhysicalDeviceCudaKernelLaunchFeaturesNV"]
        [::core::mem::align_of::<VkPhysicalDeviceCudaKernelLaunchFeaturesNV>() - 4usize];
    ["Offset of field: VkPhysicalDeviceCudaKernelLaunchFeaturesNV::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceCudaKernelLaunchFeaturesNV, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceCudaKernelLaunchFeaturesNV::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceCudaKernelLaunchFeaturesNV, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceCudaKernelLaunchFeaturesNV::cudaKernelLaunchFeatures"][::core::mem::offset_of!(
        VkPhysicalDeviceCudaKernelLaunchFeaturesNV,
        cudaKernelLaunchFeatures
    )
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceCudaKernelLaunchPropertiesNV"]
        [::core::mem::size_of::<VkPhysicalDeviceCudaKernelLaunchPropertiesNV>() - 16usize];
    ["Alignment of VkPhysicalDeviceCudaKernelLaunchPropertiesNV"]
        [::core::mem::align_of::<VkPhysicalDeviceCudaKernelLaunchPropertiesNV>() - 4usize];
    ["Offset of field: VkPhysicalDeviceCudaKernelLaunchPropertiesNV::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceCudaKernelLaunchPropertiesNV, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceCudaKernelLaunchPropertiesNV::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceCudaKernelLaunchPropertiesNV, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceCudaKernelLaunchPropertiesNV::computeCapabilityMinor"][::core::mem::offset_of!(
        VkPhysicalDeviceCudaKernelLaunchPropertiesNV,
        computeCapabilityMinor
    )
        - 8usize];
    ["Offset of field: VkPhysicalDeviceCudaKernelLaunchPropertiesNV::computeCapabilityMajor"][::core::mem::offset_of!(
        VkPhysicalDeviceCudaKernelLaunchPropertiesNV,
        computeCapabilityMajor
    )
        - 12usize];
};
pub const VkTileShadingRenderPassFlagBitsQCOM_VK_TILE_SHADING_RENDER_PASS_ENABLE_BIT_QCOM:
    VkTileShadingRenderPassFlagBitsQCOM = 1;
pub const VkTileShadingRenderPassFlagBitsQCOM_VK_TILE_SHADING_RENDER_PASS_PER_TILE_EXECUTION_BIT_QCOM : VkTileShadingRenderPassFlagBitsQCOM = 2 ;
pub const VkTileShadingRenderPassFlagBitsQCOM_VK_TILE_SHADING_RENDER_PASS_FLAG_BITS_MAX_ENUM_QCOM : VkTileShadingRenderPassFlagBitsQCOM = 2147483647 ;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceTileShadingFeaturesQCOM"]
        [::core::mem::size_of::<VkPhysicalDeviceTileShadingFeaturesQCOM>() - 64usize];
    ["Alignment of VkPhysicalDeviceTileShadingFeaturesQCOM"]
        [::core::mem::align_of::<VkPhysicalDeviceTileShadingFeaturesQCOM>() - 4usize];
    ["Offset of field: VkPhysicalDeviceTileShadingFeaturesQCOM::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceTileShadingFeaturesQCOM, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceTileShadingFeaturesQCOM::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceTileShadingFeaturesQCOM, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceTileShadingFeaturesQCOM::tileShading"]
        [::core::mem::offset_of!(VkPhysicalDeviceTileShadingFeaturesQCOM, tileShading) - 8usize];
    ["Offset of field: VkPhysicalDeviceTileShadingFeaturesQCOM::tileShadingFragmentStage"][::core::mem::offset_of!(
        VkPhysicalDeviceTileShadingFeaturesQCOM,
        tileShadingFragmentStage
    )
        - 12usize];
    ["Offset of field: VkPhysicalDeviceTileShadingFeaturesQCOM::tileShadingColorAttachments"][::core::mem::offset_of!(
        VkPhysicalDeviceTileShadingFeaturesQCOM,
        tileShadingColorAttachments
    )
        - 16usize];
    ["Offset of field: VkPhysicalDeviceTileShadingFeaturesQCOM::tileShadingDepthAttachments"][::core::mem::offset_of!(
        VkPhysicalDeviceTileShadingFeaturesQCOM,
        tileShadingDepthAttachments
    )
        - 20usize];
    ["Offset of field: VkPhysicalDeviceTileShadingFeaturesQCOM::tileShadingStencilAttachments"][::core::mem::offset_of!(
        VkPhysicalDeviceTileShadingFeaturesQCOM,
        tileShadingStencilAttachments
    )
        - 24usize];
    ["Offset of field: VkPhysicalDeviceTileShadingFeaturesQCOM::tileShadingInputAttachments"][::core::mem::offset_of!(
        VkPhysicalDeviceTileShadingFeaturesQCOM,
        tileShadingInputAttachments
    )
        - 28usize];
    ["Offset of field: VkPhysicalDeviceTileShadingFeaturesQCOM::tileShadingSampledAttachments"][::core::mem::offset_of!(
        VkPhysicalDeviceTileShadingFeaturesQCOM,
        tileShadingSampledAttachments
    )
        - 32usize];
    ["Offset of field: VkPhysicalDeviceTileShadingFeaturesQCOM::tileShadingPerTileDraw"][::core::mem::offset_of!(
        VkPhysicalDeviceTileShadingFeaturesQCOM,
        tileShadingPerTileDraw
    )
        - 36usize];
    ["Offset of field: VkPhysicalDeviceTileShadingFeaturesQCOM::tileShadingPerTileDispatch"][::core::mem::offset_of!(
        VkPhysicalDeviceTileShadingFeaturesQCOM,
        tileShadingPerTileDispatch
    )
        - 40usize];
    ["Offset of field: VkPhysicalDeviceTileShadingFeaturesQCOM::tileShadingDispatchTile"][::core::mem::offset_of!(
        VkPhysicalDeviceTileShadingFeaturesQCOM,
        tileShadingDispatchTile
    )
        - 44usize];
    ["Offset of field: VkPhysicalDeviceTileShadingFeaturesQCOM::tileShadingApron"][::core::mem::offset_of!(
        VkPhysicalDeviceTileShadingFeaturesQCOM,
        tileShadingApron
    ) - 48usize];
    ["Offset of field: VkPhysicalDeviceTileShadingFeaturesQCOM::tileShadingAnisotropicApron"][::core::mem::offset_of!(
        VkPhysicalDeviceTileShadingFeaturesQCOM,
        tileShadingAnisotropicApron
    )
        - 52usize];
    ["Offset of field: VkPhysicalDeviceTileShadingFeaturesQCOM::tileShadingAtomicOps"][::core::mem::offset_of!(
        VkPhysicalDeviceTileShadingFeaturesQCOM,
        tileShadingAtomicOps
    ) - 56usize];
    ["Offset of field: VkPhysicalDeviceTileShadingFeaturesQCOM::tileShadingImageProcessing"][::core::mem::offset_of!(
        VkPhysicalDeviceTileShadingFeaturesQCOM,
        tileShadingImageProcessing
    )
        - 60usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceTileShadingPropertiesQCOM"]
        [::core::mem::size_of::<VkPhysicalDeviceTileShadingPropertiesQCOM>() - 32usize];
    ["Alignment of VkPhysicalDeviceTileShadingPropertiesQCOM"]
        [::core::mem::align_of::<VkPhysicalDeviceTileShadingPropertiesQCOM>() - 4usize];
    ["Offset of field: VkPhysicalDeviceTileShadingPropertiesQCOM::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceTileShadingPropertiesQCOM, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceTileShadingPropertiesQCOM::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceTileShadingPropertiesQCOM, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceTileShadingPropertiesQCOM::maxApronSize"]
        [::core::mem::offset_of!(VkPhysicalDeviceTileShadingPropertiesQCOM, maxApronSize) - 8usize];
    ["Offset of field: VkPhysicalDeviceTileShadingPropertiesQCOM::preferNonCoherent"][::core::mem::offset_of!(
        VkPhysicalDeviceTileShadingPropertiesQCOM,
        preferNonCoherent
    ) - 12usize];
    ["Offset of field: VkPhysicalDeviceTileShadingPropertiesQCOM::tileGranularity"][::core::mem::offset_of!(
        VkPhysicalDeviceTileShadingPropertiesQCOM,
        tileGranularity
    ) - 16usize];
    ["Offset of field: VkPhysicalDeviceTileShadingPropertiesQCOM::maxTileShadingRate"][::core::mem::offset_of!(
        VkPhysicalDeviceTileShadingPropertiesQCOM,
        maxTileShadingRate
    ) - 24usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkRenderPassTileShadingCreateInfoQCOM"]
        [::core::mem::size_of::<VkRenderPassTileShadingCreateInfoQCOM>() - 20usize];
    ["Alignment of VkRenderPassTileShadingCreateInfoQCOM"]
        [::core::mem::align_of::<VkRenderPassTileShadingCreateInfoQCOM>() - 4usize];
    ["Offset of field: VkRenderPassTileShadingCreateInfoQCOM::sType"]
        [::core::mem::offset_of!(VkRenderPassTileShadingCreateInfoQCOM, sType) - 0usize];
    ["Offset of field: VkRenderPassTileShadingCreateInfoQCOM::pNext"]
        [::core::mem::offset_of!(VkRenderPassTileShadingCreateInfoQCOM, pNext) - 4usize];
    ["Offset of field: VkRenderPassTileShadingCreateInfoQCOM::flags"]
        [::core::mem::offset_of!(VkRenderPassTileShadingCreateInfoQCOM, flags) - 8usize];
    ["Offset of field: VkRenderPassTileShadingCreateInfoQCOM::tileApronSize"]
        [::core::mem::offset_of!(VkRenderPassTileShadingCreateInfoQCOM, tileApronSize) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPerTileBeginInfoQCOM"][::core::mem::size_of::<VkPerTileBeginInfoQCOM>() - 8usize];
    ["Alignment of VkPerTileBeginInfoQCOM"]
        [::core::mem::align_of::<VkPerTileBeginInfoQCOM>() - 4usize];
    ["Offset of field: VkPerTileBeginInfoQCOM::sType"]
        [::core::mem::offset_of!(VkPerTileBeginInfoQCOM, sType) - 0usize];
    ["Offset of field: VkPerTileBeginInfoQCOM::pNext"]
        [::core::mem::offset_of!(VkPerTileBeginInfoQCOM, pNext) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPerTileEndInfoQCOM"][::core::mem::size_of::<VkPerTileEndInfoQCOM>() - 8usize];
    ["Alignment of VkPerTileEndInfoQCOM"][::core::mem::align_of::<VkPerTileEndInfoQCOM>() - 4usize];
    ["Offset of field: VkPerTileEndInfoQCOM::sType"]
        [::core::mem::offset_of!(VkPerTileEndInfoQCOM, sType) - 0usize];
    ["Offset of field: VkPerTileEndInfoQCOM::pNext"]
        [::core::mem::offset_of!(VkPerTileEndInfoQCOM, pNext) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDispatchTileInfoQCOM"][::core::mem::size_of::<VkDispatchTileInfoQCOM>() - 8usize];
    ["Alignment of VkDispatchTileInfoQCOM"]
        [::core::mem::align_of::<VkDispatchTileInfoQCOM>() - 4usize];
    ["Offset of field: VkDispatchTileInfoQCOM::sType"]
        [::core::mem::offset_of!(VkDispatchTileInfoQCOM, sType) - 0usize];
    ["Offset of field: VkDispatchTileInfoQCOM::pNext"]
        [::core::mem::offset_of!(VkDispatchTileInfoQCOM, pNext) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkQueryLowLatencySupportNV"]
        [::core::mem::size_of::<VkQueryLowLatencySupportNV>() - 12usize];
    ["Alignment of VkQueryLowLatencySupportNV"]
        [::core::mem::align_of::<VkQueryLowLatencySupportNV>() - 4usize];
    ["Offset of field: VkQueryLowLatencySupportNV::sType"]
        [::core::mem::offset_of!(VkQueryLowLatencySupportNV, sType) - 0usize];
    ["Offset of field: VkQueryLowLatencySupportNV::pNext"]
        [::core::mem::offset_of!(VkQueryLowLatencySupportNV, pNext) - 4usize];
    ["Offset of field: VkQueryLowLatencySupportNV::pQueriedLowLatencyData"]
        [::core::mem::offset_of!(VkQueryLowLatencySupportNV, pQueriedLowLatencyData) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceDescriptorBufferPropertiesEXT"]
        [::core::mem::size_of::<VkPhysicalDeviceDescriptorBufferPropertiesEXT>() - 168usize];
    ["Alignment of VkPhysicalDeviceDescriptorBufferPropertiesEXT"]
        [::core::mem::align_of::<VkPhysicalDeviceDescriptorBufferPropertiesEXT>() - 8usize];
    ["Offset of field: VkPhysicalDeviceDescriptorBufferPropertiesEXT::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceDescriptorBufferPropertiesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceDescriptorBufferPropertiesEXT::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceDescriptorBufferPropertiesEXT, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceDescriptorBufferPropertiesEXT::combinedImageSamplerDescriptorSingleArray"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDescriptorBufferPropertiesEXT , combinedImageSamplerDescriptorSingleArray) - 8usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorBufferPropertiesEXT::bufferlessPushDescriptors"][::core::mem::offset_of!(
        VkPhysicalDeviceDescriptorBufferPropertiesEXT,
        bufferlessPushDescriptors
    )
        - 12usize];
    ["Offset of field: VkPhysicalDeviceDescriptorBufferPropertiesEXT::allowSamplerImageViewPostSubmitCreation"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDescriptorBufferPropertiesEXT , allowSamplerImageViewPostSubmitCreation) - 16usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorBufferPropertiesEXT::descriptorBufferOffsetAlignment"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDescriptorBufferPropertiesEXT , descriptorBufferOffsetAlignment) - 24usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorBufferPropertiesEXT::maxDescriptorBufferBindings"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDescriptorBufferPropertiesEXT , maxDescriptorBufferBindings) - 32usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorBufferPropertiesEXT::maxResourceDescriptorBufferBindings"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDescriptorBufferPropertiesEXT , maxResourceDescriptorBufferBindings) - 36usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorBufferPropertiesEXT::maxSamplerDescriptorBufferBindings"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDescriptorBufferPropertiesEXT , maxSamplerDescriptorBufferBindings) - 40usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorBufferPropertiesEXT::maxEmbeddedImmutableSamplerBindings"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDescriptorBufferPropertiesEXT , maxEmbeddedImmutableSamplerBindings) - 44usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorBufferPropertiesEXT::maxEmbeddedImmutableSamplers"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDescriptorBufferPropertiesEXT , maxEmbeddedImmutableSamplers) - 48usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorBufferPropertiesEXT::bufferCaptureReplayDescriptorDataSize"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDescriptorBufferPropertiesEXT , bufferCaptureReplayDescriptorDataSize) - 52usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorBufferPropertiesEXT::imageCaptureReplayDescriptorDataSize"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDescriptorBufferPropertiesEXT , imageCaptureReplayDescriptorDataSize) - 56usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorBufferPropertiesEXT::imageViewCaptureReplayDescriptorDataSize"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDescriptorBufferPropertiesEXT , imageViewCaptureReplayDescriptorDataSize) - 60usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorBufferPropertiesEXT::samplerCaptureReplayDescriptorDataSize"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDescriptorBufferPropertiesEXT , samplerCaptureReplayDescriptorDataSize) - 64usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorBufferPropertiesEXT::accelerationStructureCaptureReplayDescriptorDataSize"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDescriptorBufferPropertiesEXT , accelerationStructureCaptureReplayDescriptorDataSize) - 68usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorBufferPropertiesEXT::samplerDescriptorSize"][::core::mem::offset_of!(
        VkPhysicalDeviceDescriptorBufferPropertiesEXT,
        samplerDescriptorSize
    )
        - 72usize];
    ["Offset of field: VkPhysicalDeviceDescriptorBufferPropertiesEXT::combinedImageSamplerDescriptorSize"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDescriptorBufferPropertiesEXT , combinedImageSamplerDescriptorSize) - 76usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorBufferPropertiesEXT::sampledImageDescriptorSize"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDescriptorBufferPropertiesEXT , sampledImageDescriptorSize) - 80usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorBufferPropertiesEXT::storageImageDescriptorSize"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDescriptorBufferPropertiesEXT , storageImageDescriptorSize) - 84usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorBufferPropertiesEXT::uniformTexelBufferDescriptorSize"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDescriptorBufferPropertiesEXT , uniformTexelBufferDescriptorSize) - 88usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorBufferPropertiesEXT::robustUniformTexelBufferDescriptorSize"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDescriptorBufferPropertiesEXT , robustUniformTexelBufferDescriptorSize) - 92usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorBufferPropertiesEXT::storageTexelBufferDescriptorSize"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDescriptorBufferPropertiesEXT , storageTexelBufferDescriptorSize) - 96usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorBufferPropertiesEXT::robustStorageTexelBufferDescriptorSize"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDescriptorBufferPropertiesEXT , robustStorageTexelBufferDescriptorSize) - 100usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorBufferPropertiesEXT::uniformBufferDescriptorSize"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDescriptorBufferPropertiesEXT , uniformBufferDescriptorSize) - 104usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorBufferPropertiesEXT::robustUniformBufferDescriptorSize"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDescriptorBufferPropertiesEXT , robustUniformBufferDescriptorSize) - 108usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorBufferPropertiesEXT::storageBufferDescriptorSize"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDescriptorBufferPropertiesEXT , storageBufferDescriptorSize) - 112usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorBufferPropertiesEXT::robustStorageBufferDescriptorSize"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDescriptorBufferPropertiesEXT , robustStorageBufferDescriptorSize) - 116usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorBufferPropertiesEXT::inputAttachmentDescriptorSize"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDescriptorBufferPropertiesEXT , inputAttachmentDescriptorSize) - 120usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorBufferPropertiesEXT::accelerationStructureDescriptorSize"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDescriptorBufferPropertiesEXT , accelerationStructureDescriptorSize) - 124usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorBufferPropertiesEXT::maxSamplerDescriptorBufferRange"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDescriptorBufferPropertiesEXT , maxSamplerDescriptorBufferRange) - 128usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorBufferPropertiesEXT::maxResourceDescriptorBufferRange"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDescriptorBufferPropertiesEXT , maxResourceDescriptorBufferRange) - 136usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorBufferPropertiesEXT::samplerDescriptorBufferAddressSpaceSize"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDescriptorBufferPropertiesEXT , samplerDescriptorBufferAddressSpaceSize) - 144usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorBufferPropertiesEXT::resourceDescriptorBufferAddressSpaceSize"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDescriptorBufferPropertiesEXT , resourceDescriptorBufferAddressSpaceSize) - 152usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorBufferPropertiesEXT::descriptorBufferAddressSpaceSize"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDescriptorBufferPropertiesEXT , descriptorBufferAddressSpaceSize) - 160usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT"][::core::mem::size_of::<
        VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT,
    >() - 12usize];
    ["Alignment of VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT"][::core::mem::align_of::<
        VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT,
    >() - 4usize];
    ["Offset of field: VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT::sType"][::core::mem::offset_of!(
        VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT::pNext"][::core::mem::offset_of!(
        VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT,
        pNext
    ) - 4usize];
    ["Offset of field: VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT::combinedImageSamplerDensityMapDescriptorSize"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT , combinedImageSamplerDensityMapDescriptorSize) - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceDescriptorBufferFeaturesEXT"]
        [::core::mem::size_of::<VkPhysicalDeviceDescriptorBufferFeaturesEXT>() - 24usize];
    ["Alignment of VkPhysicalDeviceDescriptorBufferFeaturesEXT"]
        [::core::mem::align_of::<VkPhysicalDeviceDescriptorBufferFeaturesEXT>() - 4usize];
    ["Offset of field: VkPhysicalDeviceDescriptorBufferFeaturesEXT::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceDescriptorBufferFeaturesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceDescriptorBufferFeaturesEXT::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceDescriptorBufferFeaturesEXT, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceDescriptorBufferFeaturesEXT::descriptorBuffer"][::core::mem::offset_of!(
        VkPhysicalDeviceDescriptorBufferFeaturesEXT,
        descriptorBuffer
    ) - 8usize];
    ["Offset of field: VkPhysicalDeviceDescriptorBufferFeaturesEXT::descriptorBufferCaptureReplay"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDescriptorBufferFeaturesEXT , descriptorBufferCaptureReplay) - 12usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorBufferFeaturesEXT::descriptorBufferImageLayoutIgnored"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDescriptorBufferFeaturesEXT , descriptorBufferImageLayoutIgnored) - 16usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorBufferFeaturesEXT::descriptorBufferPushDescriptors"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDescriptorBufferFeaturesEXT , descriptorBufferPushDescriptors) - 20usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDescriptorAddressInfoEXT"]
        [::core::mem::size_of::<VkDescriptorAddressInfoEXT>() - 32usize];
    ["Alignment of VkDescriptorAddressInfoEXT"]
        [::core::mem::align_of::<VkDescriptorAddressInfoEXT>() - 8usize];
    ["Offset of field: VkDescriptorAddressInfoEXT::sType"]
        [::core::mem::offset_of!(VkDescriptorAddressInfoEXT, sType) - 0usize];
    ["Offset of field: VkDescriptorAddressInfoEXT::pNext"]
        [::core::mem::offset_of!(VkDescriptorAddressInfoEXT, pNext) - 4usize];
    ["Offset of field: VkDescriptorAddressInfoEXT::address"]
        [::core::mem::offset_of!(VkDescriptorAddressInfoEXT, address) - 8usize];
    ["Offset of field: VkDescriptorAddressInfoEXT::range"]
        [::core::mem::offset_of!(VkDescriptorAddressInfoEXT, range) - 16usize];
    ["Offset of field: VkDescriptorAddressInfoEXT::format"]
        [::core::mem::offset_of!(VkDescriptorAddressInfoEXT, format) - 24usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDescriptorBufferBindingInfoEXT"]
        [::core::mem::size_of::<VkDescriptorBufferBindingInfoEXT>() - 24usize];
    ["Alignment of VkDescriptorBufferBindingInfoEXT"]
        [::core::mem::align_of::<VkDescriptorBufferBindingInfoEXT>() - 8usize];
    ["Offset of field: VkDescriptorBufferBindingInfoEXT::sType"]
        [::core::mem::offset_of!(VkDescriptorBufferBindingInfoEXT, sType) - 0usize];
    ["Offset of field: VkDescriptorBufferBindingInfoEXT::pNext"]
        [::core::mem::offset_of!(VkDescriptorBufferBindingInfoEXT, pNext) - 4usize];
    ["Offset of field: VkDescriptorBufferBindingInfoEXT::address"]
        [::core::mem::offset_of!(VkDescriptorBufferBindingInfoEXT, address) - 8usize];
    ["Offset of field: VkDescriptorBufferBindingInfoEXT::usage"]
        [::core::mem::offset_of!(VkDescriptorBufferBindingInfoEXT, usage) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDescriptorBufferBindingPushDescriptorBufferHandleEXT"][::core::mem::size_of::<
        VkDescriptorBufferBindingPushDescriptorBufferHandleEXT,
    >() - 16usize];
    ["Alignment of VkDescriptorBufferBindingPushDescriptorBufferHandleEXT"][::core::mem::align_of::<
        VkDescriptorBufferBindingPushDescriptorBufferHandleEXT,
    >() - 8usize];
    ["Offset of field: VkDescriptorBufferBindingPushDescriptorBufferHandleEXT::sType"][::core::mem::offset_of!(
        VkDescriptorBufferBindingPushDescriptorBufferHandleEXT,
        sType
    ) - 0usize];
    ["Offset of field: VkDescriptorBufferBindingPushDescriptorBufferHandleEXT::pNext"][::core::mem::offset_of!(
        VkDescriptorBufferBindingPushDescriptorBufferHandleEXT,
        pNext
    ) - 4usize];
    ["Offset of field: VkDescriptorBufferBindingPushDescriptorBufferHandleEXT::buffer"][::core::mem::offset_of!(
        VkDescriptorBufferBindingPushDescriptorBufferHandleEXT,
        buffer
    ) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDescriptorDataEXT"][::core::mem::size_of::<VkDescriptorDataEXT>() - 8usize];
    ["Alignment of VkDescriptorDataEXT"][::core::mem::align_of::<VkDescriptorDataEXT>() - 8usize];
    ["Offset of field: VkDescriptorDataEXT::pSampler"]
        [::core::mem::offset_of!(VkDescriptorDataEXT, pSampler) - 0usize];
    ["Offset of field: VkDescriptorDataEXT::pCombinedImageSampler"]
        [::core::mem::offset_of!(VkDescriptorDataEXT, pCombinedImageSampler) - 0usize];
    ["Offset of field: VkDescriptorDataEXT::pInputAttachmentImage"]
        [::core::mem::offset_of!(VkDescriptorDataEXT, pInputAttachmentImage) - 0usize];
    ["Offset of field: VkDescriptorDataEXT::pSampledImage"]
        [::core::mem::offset_of!(VkDescriptorDataEXT, pSampledImage) - 0usize];
    ["Offset of field: VkDescriptorDataEXT::pStorageImage"]
        [::core::mem::offset_of!(VkDescriptorDataEXT, pStorageImage) - 0usize];
    ["Offset of field: VkDescriptorDataEXT::pUniformTexelBuffer"]
        [::core::mem::offset_of!(VkDescriptorDataEXT, pUniformTexelBuffer) - 0usize];
    ["Offset of field: VkDescriptorDataEXT::pStorageTexelBuffer"]
        [::core::mem::offset_of!(VkDescriptorDataEXT, pStorageTexelBuffer) - 0usize];
    ["Offset of field: VkDescriptorDataEXT::pUniformBuffer"]
        [::core::mem::offset_of!(VkDescriptorDataEXT, pUniformBuffer) - 0usize];
    ["Offset of field: VkDescriptorDataEXT::pStorageBuffer"]
        [::core::mem::offset_of!(VkDescriptorDataEXT, pStorageBuffer) - 0usize];
    ["Offset of field: VkDescriptorDataEXT::accelerationStructure"]
        [::core::mem::offset_of!(VkDescriptorDataEXT, accelerationStructure) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDescriptorGetInfoEXT"][::core::mem::size_of::<VkDescriptorGetInfoEXT>() - 24usize];
    ["Alignment of VkDescriptorGetInfoEXT"]
        [::core::mem::align_of::<VkDescriptorGetInfoEXT>() - 8usize];
    ["Offset of field: VkDescriptorGetInfoEXT::sType"]
        [::core::mem::offset_of!(VkDescriptorGetInfoEXT, sType) - 0usize];
    ["Offset of field: VkDescriptorGetInfoEXT::pNext"]
        [::core::mem::offset_of!(VkDescriptorGetInfoEXT, pNext) - 4usize];
    ["Offset of field: VkDescriptorGetInfoEXT::type_"]
        [::core::mem::offset_of!(VkDescriptorGetInfoEXT, type_) - 8usize];
    ["Offset of field: VkDescriptorGetInfoEXT::data"]
        [::core::mem::offset_of!(VkDescriptorGetInfoEXT, data) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkBufferCaptureDescriptorDataInfoEXT"]
        [::core::mem::size_of::<VkBufferCaptureDescriptorDataInfoEXT>() - 16usize];
    ["Alignment of VkBufferCaptureDescriptorDataInfoEXT"]
        [::core::mem::align_of::<VkBufferCaptureDescriptorDataInfoEXT>() - 8usize];
    ["Offset of field: VkBufferCaptureDescriptorDataInfoEXT::sType"]
        [::core::mem::offset_of!(VkBufferCaptureDescriptorDataInfoEXT, sType) - 0usize];
    ["Offset of field: VkBufferCaptureDescriptorDataInfoEXT::pNext"]
        [::core::mem::offset_of!(VkBufferCaptureDescriptorDataInfoEXT, pNext) - 4usize];
    ["Offset of field: VkBufferCaptureDescriptorDataInfoEXT::buffer"]
        [::core::mem::offset_of!(VkBufferCaptureDescriptorDataInfoEXT, buffer) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkImageCaptureDescriptorDataInfoEXT"]
        [::core::mem::size_of::<VkImageCaptureDescriptorDataInfoEXT>() - 16usize];
    ["Alignment of VkImageCaptureDescriptorDataInfoEXT"]
        [::core::mem::align_of::<VkImageCaptureDescriptorDataInfoEXT>() - 8usize];
    ["Offset of field: VkImageCaptureDescriptorDataInfoEXT::sType"]
        [::core::mem::offset_of!(VkImageCaptureDescriptorDataInfoEXT, sType) - 0usize];
    ["Offset of field: VkImageCaptureDescriptorDataInfoEXT::pNext"]
        [::core::mem::offset_of!(VkImageCaptureDescriptorDataInfoEXT, pNext) - 4usize];
    ["Offset of field: VkImageCaptureDescriptorDataInfoEXT::image"]
        [::core::mem::offset_of!(VkImageCaptureDescriptorDataInfoEXT, image) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkImageViewCaptureDescriptorDataInfoEXT"]
        [::core::mem::size_of::<VkImageViewCaptureDescriptorDataInfoEXT>() - 16usize];
    ["Alignment of VkImageViewCaptureDescriptorDataInfoEXT"]
        [::core::mem::align_of::<VkImageViewCaptureDescriptorDataInfoEXT>() - 8usize];
    ["Offset of field: VkImageViewCaptureDescriptorDataInfoEXT::sType"]
        [::core::mem::offset_of!(VkImageViewCaptureDescriptorDataInfoEXT, sType) - 0usize];
    ["Offset of field: VkImageViewCaptureDescriptorDataInfoEXT::pNext"]
        [::core::mem::offset_of!(VkImageViewCaptureDescriptorDataInfoEXT, pNext) - 4usize];
    ["Offset of field: VkImageViewCaptureDescriptorDataInfoEXT::imageView"]
        [::core::mem::offset_of!(VkImageViewCaptureDescriptorDataInfoEXT, imageView) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSamplerCaptureDescriptorDataInfoEXT"]
        [::core::mem::size_of::<VkSamplerCaptureDescriptorDataInfoEXT>() - 16usize];
    ["Alignment of VkSamplerCaptureDescriptorDataInfoEXT"]
        [::core::mem::align_of::<VkSamplerCaptureDescriptorDataInfoEXT>() - 8usize];
    ["Offset of field: VkSamplerCaptureDescriptorDataInfoEXT::sType"]
        [::core::mem::offset_of!(VkSamplerCaptureDescriptorDataInfoEXT, sType) - 0usize];
    ["Offset of field: VkSamplerCaptureDescriptorDataInfoEXT::pNext"]
        [::core::mem::offset_of!(VkSamplerCaptureDescriptorDataInfoEXT, pNext) - 4usize];
    ["Offset of field: VkSamplerCaptureDescriptorDataInfoEXT::sampler"]
        [::core::mem::offset_of!(VkSamplerCaptureDescriptorDataInfoEXT, sampler) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkOpaqueCaptureDescriptorDataCreateInfoEXT"]
        [::core::mem::size_of::<VkOpaqueCaptureDescriptorDataCreateInfoEXT>() - 12usize];
    ["Alignment of VkOpaqueCaptureDescriptorDataCreateInfoEXT"]
        [::core::mem::align_of::<VkOpaqueCaptureDescriptorDataCreateInfoEXT>() - 4usize];
    ["Offset of field: VkOpaqueCaptureDescriptorDataCreateInfoEXT::sType"]
        [::core::mem::offset_of!(VkOpaqueCaptureDescriptorDataCreateInfoEXT, sType) - 0usize];
    ["Offset of field: VkOpaqueCaptureDescriptorDataCreateInfoEXT::pNext"]
        [::core::mem::offset_of!(VkOpaqueCaptureDescriptorDataCreateInfoEXT, pNext) - 4usize];
    ["Offset of field: VkOpaqueCaptureDescriptorDataCreateInfoEXT::opaqueCaptureDescriptorData"][::core::mem::offset_of!(
        VkOpaqueCaptureDescriptorDataCreateInfoEXT,
        opaqueCaptureDescriptorData
    )
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkAccelerationStructureCaptureDescriptorDataInfoEXT"]
        [::core::mem::size_of::<VkAccelerationStructureCaptureDescriptorDataInfoEXT>() - 24usize];
    ["Alignment of VkAccelerationStructureCaptureDescriptorDataInfoEXT"]
        [::core::mem::align_of::<VkAccelerationStructureCaptureDescriptorDataInfoEXT>() - 8usize];
    ["Offset of field: VkAccelerationStructureCaptureDescriptorDataInfoEXT::sType"][::core::mem::offset_of!(
        VkAccelerationStructureCaptureDescriptorDataInfoEXT,
        sType
    ) - 0usize];
    ["Offset of field: VkAccelerationStructureCaptureDescriptorDataInfoEXT::pNext"][::core::mem::offset_of!(
        VkAccelerationStructureCaptureDescriptorDataInfoEXT,
        pNext
    ) - 4usize];
    ["Offset of field: VkAccelerationStructureCaptureDescriptorDataInfoEXT::accelerationStructure"] [:: core :: mem :: offset_of ! (VkAccelerationStructureCaptureDescriptorDataInfoEXT , accelerationStructure) - 8usize] ;
    ["Offset of field: VkAccelerationStructureCaptureDescriptorDataInfoEXT::accelerationStructureNV"] [:: core :: mem :: offset_of ! (VkAccelerationStructureCaptureDescriptorDataInfoEXT , accelerationStructureNV) - 16usize] ;
};
pub const VkGraphicsPipelineLibraryFlagBitsEXT_VK_GRAPHICS_PIPELINE_LIBRARY_VERTEX_INPUT_INTERFACE_BIT_EXT : VkGraphicsPipelineLibraryFlagBitsEXT = 1 ;
pub const VkGraphicsPipelineLibraryFlagBitsEXT_VK_GRAPHICS_PIPELINE_LIBRARY_PRE_RASTERIZATION_SHADERS_BIT_EXT : VkGraphicsPipelineLibraryFlagBitsEXT = 2 ;
pub const VkGraphicsPipelineLibraryFlagBitsEXT_VK_GRAPHICS_PIPELINE_LIBRARY_FRAGMENT_SHADER_BIT_EXT : VkGraphicsPipelineLibraryFlagBitsEXT = 4 ;
pub const VkGraphicsPipelineLibraryFlagBitsEXT_VK_GRAPHICS_PIPELINE_LIBRARY_FRAGMENT_OUTPUT_INTERFACE_BIT_EXT : VkGraphicsPipelineLibraryFlagBitsEXT = 8 ;
pub const VkGraphicsPipelineLibraryFlagBitsEXT_VK_GRAPHICS_PIPELINE_LIBRARY_FLAG_BITS_MAX_ENUM_EXT : VkGraphicsPipelineLibraryFlagBitsEXT = 2147483647 ;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT"]
        [::core::mem::size_of::<VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT>() - 12usize];
    ["Alignment of VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT"]
        [::core::mem::align_of::<VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT>() - 4usize];
    ["Offset of field: VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT::sType"][::core::mem::offset_of!(
        VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT::pNext"][::core::mem::offset_of!(
        VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT,
        pNext
    ) - 4usize];
    ["Offset of field: VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT::graphicsPipelineLibrary"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT , graphicsPipelineLibrary) - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT"]
        [::core::mem::size_of::<VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT>() - 16usize];
    ["Alignment of VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT"]
        [::core::mem::align_of::<VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT>() - 4usize];
    ["Offset of field: VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT::sType"][::core::mem::offset_of!(
        VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT::pNext"][::core::mem::offset_of!(
        VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT,
        pNext
    ) - 4usize];
    ["Offset of field: VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT::graphicsPipelineLibraryFastLinking"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT , graphicsPipelineLibraryFastLinking) - 8usize] ;
    ["Offset of field: VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT::graphicsPipelineLibraryIndependentInterpolationDecoration"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT , graphicsPipelineLibraryIndependentInterpolationDecoration) - 12usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkGraphicsPipelineLibraryCreateInfoEXT"]
        [::core::mem::size_of::<VkGraphicsPipelineLibraryCreateInfoEXT>() - 12usize];
    ["Alignment of VkGraphicsPipelineLibraryCreateInfoEXT"]
        [::core::mem::align_of::<VkGraphicsPipelineLibraryCreateInfoEXT>() - 4usize];
    ["Offset of field: VkGraphicsPipelineLibraryCreateInfoEXT::sType"]
        [::core::mem::offset_of!(VkGraphicsPipelineLibraryCreateInfoEXT, sType) - 0usize];
    ["Offset of field: VkGraphicsPipelineLibraryCreateInfoEXT::pNext"]
        [::core::mem::offset_of!(VkGraphicsPipelineLibraryCreateInfoEXT, pNext) - 4usize];
    ["Offset of field: VkGraphicsPipelineLibraryCreateInfoEXT::flags"]
        [::core::mem::offset_of!(VkGraphicsPipelineLibraryCreateInfoEXT, flags) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD"][::core::mem::size_of::<
        VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD,
    >() - 12usize];
    ["Alignment of VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD"]
        [::core::mem::align_of::<VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD>()
            - 4usize];
    ["Offset of field: VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD::sType"][::core::mem::offset_of!(
        VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD,
        sType
    )
        - 0usize];
    ["Offset of field: VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD::pNext"][::core::mem::offset_of!(
        VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD,
        pNext
    )
        - 4usize];
    ["Offset of field: VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD::shaderEarlyAndLateFragmentTests"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD , shaderEarlyAndLateFragmentTests) - 8usize] ;
};
pub const VkFragmentShadingRateTypeNV_VK_FRAGMENT_SHADING_RATE_TYPE_FRAGMENT_SIZE_NV:
    VkFragmentShadingRateTypeNV = 0;
pub const VkFragmentShadingRateTypeNV_VK_FRAGMENT_SHADING_RATE_TYPE_ENUMS_NV:
    VkFragmentShadingRateTypeNV = 1;
pub const VkFragmentShadingRateTypeNV_VK_FRAGMENT_SHADING_RATE_TYPE_MAX_ENUM_NV:
    VkFragmentShadingRateTypeNV = 2147483647;
pub const VkFragmentShadingRateNV_VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_PIXEL_NV:
    VkFragmentShadingRateNV = 0;
pub const VkFragmentShadingRateNV_VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV:
    VkFragmentShadingRateNV = 1;
pub const VkFragmentShadingRateNV_VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV:
    VkFragmentShadingRateNV = 4;
pub const VkFragmentShadingRateNV_VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV:
    VkFragmentShadingRateNV = 5;
pub const VkFragmentShadingRateNV_VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV:
    VkFragmentShadingRateNV = 6;
pub const VkFragmentShadingRateNV_VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV:
    VkFragmentShadingRateNV = 9;
pub const VkFragmentShadingRateNV_VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV:
    VkFragmentShadingRateNV = 10;
pub const VkFragmentShadingRateNV_VK_FRAGMENT_SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV:
    VkFragmentShadingRateNV = 11;
pub const VkFragmentShadingRateNV_VK_FRAGMENT_SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV:
    VkFragmentShadingRateNV = 12;
pub const VkFragmentShadingRateNV_VK_FRAGMENT_SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV:
    VkFragmentShadingRateNV = 13;
pub const VkFragmentShadingRateNV_VK_FRAGMENT_SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV:
    VkFragmentShadingRateNV = 14;
pub const VkFragmentShadingRateNV_VK_FRAGMENT_SHADING_RATE_NO_INVOCATIONS_NV:
    VkFragmentShadingRateNV = 15;
pub const VkFragmentShadingRateNV_VK_FRAGMENT_SHADING_RATE_MAX_ENUM_NV: VkFragmentShadingRateNV =
    2147483647;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV"]
        [::core::mem::size_of::<VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV>() - 20usize];
    ["Alignment of VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV"]
        [::core::mem::align_of::<VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV>() - 4usize];
    ["Offset of field: VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV::sType"][::core::mem::offset_of!(
        VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV::pNext"][::core::mem::offset_of!(
        VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV,
        pNext
    ) - 4usize];
    ["Offset of field: VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV::fragmentShadingRateEnums"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV , fragmentShadingRateEnums) - 8usize] ;
    ["Offset of field: VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV::supersampleFragmentShadingRates"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV , supersampleFragmentShadingRates) - 12usize] ;
    ["Offset of field: VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV::noInvocationFragmentShadingRates"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV , noInvocationFragmentShadingRates) - 16usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV"]
        [::core::mem::size_of::<VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV>() - 12usize];
    ["Alignment of VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV"]
        [::core::mem::align_of::<VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV>() - 4usize];
    ["Offset of field: VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV::sType"][::core::mem::offset_of!(
        VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV::pNext"][::core::mem::offset_of!(
        VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV,
        pNext
    ) - 4usize];
    ["Offset of field: VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV::maxFragmentShadingRateInvocationCount"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV , maxFragmentShadingRateInvocationCount) - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineFragmentShadingRateEnumStateCreateInfoNV"]
        [::core::mem::size_of::<VkPipelineFragmentShadingRateEnumStateCreateInfoNV>() - 24usize];
    ["Alignment of VkPipelineFragmentShadingRateEnumStateCreateInfoNV"]
        [::core::mem::align_of::<VkPipelineFragmentShadingRateEnumStateCreateInfoNV>() - 4usize];
    ["Offset of field: VkPipelineFragmentShadingRateEnumStateCreateInfoNV::sType"][::core::mem::offset_of!(
        VkPipelineFragmentShadingRateEnumStateCreateInfoNV,
        sType
    ) - 0usize];
    ["Offset of field: VkPipelineFragmentShadingRateEnumStateCreateInfoNV::pNext"][::core::mem::offset_of!(
        VkPipelineFragmentShadingRateEnumStateCreateInfoNV,
        pNext
    ) - 4usize];
    ["Offset of field: VkPipelineFragmentShadingRateEnumStateCreateInfoNV::shadingRateType"][::core::mem::offset_of!(
        VkPipelineFragmentShadingRateEnumStateCreateInfoNV,
        shadingRateType
    )
        - 8usize];
    ["Offset of field: VkPipelineFragmentShadingRateEnumStateCreateInfoNV::shadingRate"][::core::mem::offset_of!(
        VkPipelineFragmentShadingRateEnumStateCreateInfoNV,
        shadingRate
    )
        - 12usize];
    ["Offset of field: VkPipelineFragmentShadingRateEnumStateCreateInfoNV::combinerOps"][::core::mem::offset_of!(
        VkPipelineFragmentShadingRateEnumStateCreateInfoNV,
        combinerOps
    )
        - 16usize];
};
pub const VkAccelerationStructureMotionInstanceTypeNV_VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_STATIC_NV : VkAccelerationStructureMotionInstanceTypeNV = 0 ;
pub const VkAccelerationStructureMotionInstanceTypeNV_VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_MATRIX_MOTION_NV : VkAccelerationStructureMotionInstanceTypeNV = 1 ;
pub const VkAccelerationStructureMotionInstanceTypeNV_VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_SRT_MOTION_NV : VkAccelerationStructureMotionInstanceTypeNV = 2 ;
pub const VkAccelerationStructureMotionInstanceTypeNV_VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_MAX_ENUM_NV : VkAccelerationStructureMotionInstanceTypeNV = 2147483647 ;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDeviceOrHostAddressConstKHR"]
        [::core::mem::size_of::<VkDeviceOrHostAddressConstKHR>() - 8usize];
    ["Alignment of VkDeviceOrHostAddressConstKHR"]
        [::core::mem::align_of::<VkDeviceOrHostAddressConstKHR>() - 8usize];
    ["Offset of field: VkDeviceOrHostAddressConstKHR::deviceAddress"]
        [::core::mem::offset_of!(VkDeviceOrHostAddressConstKHR, deviceAddress) - 0usize];
    ["Offset of field: VkDeviceOrHostAddressConstKHR::hostAddress"]
        [::core::mem::offset_of!(VkDeviceOrHostAddressConstKHR, hostAddress) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkAccelerationStructureGeometryMotionTrianglesDataNV"]
        [::core::mem::size_of::<VkAccelerationStructureGeometryMotionTrianglesDataNV>() - 16usize];
    ["Alignment of VkAccelerationStructureGeometryMotionTrianglesDataNV"]
        [::core::mem::align_of::<VkAccelerationStructureGeometryMotionTrianglesDataNV>() - 8usize];
    ["Offset of field: VkAccelerationStructureGeometryMotionTrianglesDataNV::sType"][::core::mem::offset_of!(
        VkAccelerationStructureGeometryMotionTrianglesDataNV,
        sType
    ) - 0usize];
    ["Offset of field: VkAccelerationStructureGeometryMotionTrianglesDataNV::pNext"][::core::mem::offset_of!(
        VkAccelerationStructureGeometryMotionTrianglesDataNV,
        pNext
    ) - 4usize];
    ["Offset of field: VkAccelerationStructureGeometryMotionTrianglesDataNV::vertexData"][::core::mem::offset_of!(
        VkAccelerationStructureGeometryMotionTrianglesDataNV,
        vertexData
    )
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkAccelerationStructureMotionInfoNV"]
        [::core::mem::size_of::<VkAccelerationStructureMotionInfoNV>() - 16usize];
    ["Alignment of VkAccelerationStructureMotionInfoNV"]
        [::core::mem::align_of::<VkAccelerationStructureMotionInfoNV>() - 4usize];
    ["Offset of field: VkAccelerationStructureMotionInfoNV::sType"]
        [::core::mem::offset_of!(VkAccelerationStructureMotionInfoNV, sType) - 0usize];
    ["Offset of field: VkAccelerationStructureMotionInfoNV::pNext"]
        [::core::mem::offset_of!(VkAccelerationStructureMotionInfoNV, pNext) - 4usize];
    ["Offset of field: VkAccelerationStructureMotionInfoNV::maxInstances"]
        [::core::mem::offset_of!(VkAccelerationStructureMotionInfoNV, maxInstances) - 8usize];
    ["Offset of field: VkAccelerationStructureMotionInfoNV::flags"]
        [::core::mem::offset_of!(VkAccelerationStructureMotionInfoNV, flags) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkAccelerationStructureMatrixMotionInstanceNV"]
        [::core::mem::size_of::<VkAccelerationStructureMatrixMotionInstanceNV>() - 112usize];
    ["Alignment of VkAccelerationStructureMatrixMotionInstanceNV"]
        [::core::mem::align_of::<VkAccelerationStructureMatrixMotionInstanceNV>() - 8usize];
    ["Offset of field: VkAccelerationStructureMatrixMotionInstanceNV::transformT0"][::core::mem::offset_of!(
        VkAccelerationStructureMatrixMotionInstanceNV,
        transformT0
    ) - 0usize];
    ["Offset of field: VkAccelerationStructureMatrixMotionInstanceNV::transformT1"][::core::mem::offset_of!(
        VkAccelerationStructureMatrixMotionInstanceNV,
        transformT1
    ) - 48usize];
    ["Offset of field: VkAccelerationStructureMatrixMotionInstanceNV::accelerationStructureReference"] [:: core :: mem :: offset_of ! (VkAccelerationStructureMatrixMotionInstanceNV , accelerationStructureReference) - 104usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSRTDataNV"][::core::mem::size_of::<VkSRTDataNV>() - 64usize];
    ["Alignment of VkSRTDataNV"][::core::mem::align_of::<VkSRTDataNV>() - 4usize];
    ["Offset of field: VkSRTDataNV::sx"][::core::mem::offset_of!(VkSRTDataNV, sx) - 0usize];
    ["Offset of field: VkSRTDataNV::a"][::core::mem::offset_of!(VkSRTDataNV, a) - 4usize];
    ["Offset of field: VkSRTDataNV::b"][::core::mem::offset_of!(VkSRTDataNV, b) - 8usize];
    ["Offset of field: VkSRTDataNV::pvx"][::core::mem::offset_of!(VkSRTDataNV, pvx) - 12usize];
    ["Offset of field: VkSRTDataNV::sy"][::core::mem::offset_of!(VkSRTDataNV, sy) - 16usize];
    ["Offset of field: VkSRTDataNV::c"][::core::mem::offset_of!(VkSRTDataNV, c) - 20usize];
    ["Offset of field: VkSRTDataNV::pvy"][::core::mem::offset_of!(VkSRTDataNV, pvy) - 24usize];
    ["Offset of field: VkSRTDataNV::sz"][::core::mem::offset_of!(VkSRTDataNV, sz) - 28usize];
    ["Offset of field: VkSRTDataNV::pvz"][::core::mem::offset_of!(VkSRTDataNV, pvz) - 32usize];
    ["Offset of field: VkSRTDataNV::qx"][::core::mem::offset_of!(VkSRTDataNV, qx) - 36usize];
    ["Offset of field: VkSRTDataNV::qy"][::core::mem::offset_of!(VkSRTDataNV, qy) - 40usize];
    ["Offset of field: VkSRTDataNV::qz"][::core::mem::offset_of!(VkSRTDataNV, qz) - 44usize];
    ["Offset of field: VkSRTDataNV::qw"][::core::mem::offset_of!(VkSRTDataNV, qw) - 48usize];
    ["Offset of field: VkSRTDataNV::tx"][::core::mem::offset_of!(VkSRTDataNV, tx) - 52usize];
    ["Offset of field: VkSRTDataNV::ty"][::core::mem::offset_of!(VkSRTDataNV, ty) - 56usize];
    ["Offset of field: VkSRTDataNV::tz"][::core::mem::offset_of!(VkSRTDataNV, tz) - 60usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkAccelerationStructureSRTMotionInstanceNV"]
        [::core::mem::size_of::<VkAccelerationStructureSRTMotionInstanceNV>() - 144usize];
    ["Alignment of VkAccelerationStructureSRTMotionInstanceNV"]
        [::core::mem::align_of::<VkAccelerationStructureSRTMotionInstanceNV>() - 8usize];
    ["Offset of field: VkAccelerationStructureSRTMotionInstanceNV::transformT0"]
        [::core::mem::offset_of!(VkAccelerationStructureSRTMotionInstanceNV, transformT0) - 0usize];
    ["Offset of field: VkAccelerationStructureSRTMotionInstanceNV::transformT1"][::core::mem::offset_of!(
        VkAccelerationStructureSRTMotionInstanceNV,
        transformT1
    ) - 64usize];
    ["Offset of field: VkAccelerationStructureSRTMotionInstanceNV::accelerationStructureReference"] [:: core :: mem :: offset_of ! (VkAccelerationStructureSRTMotionInstanceNV , accelerationStructureReference) - 136usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkAccelerationStructureMotionInstanceDataNV"]
        [::core::mem::size_of::<VkAccelerationStructureMotionInstanceDataNV>() - 144usize];
    ["Alignment of VkAccelerationStructureMotionInstanceDataNV"]
        [::core::mem::align_of::<VkAccelerationStructureMotionInstanceDataNV>() - 8usize];
    ["Offset of field: VkAccelerationStructureMotionInstanceDataNV::staticInstance"][::core::mem::offset_of!(
        VkAccelerationStructureMotionInstanceDataNV,
        staticInstance
    ) - 0usize];
    ["Offset of field: VkAccelerationStructureMotionInstanceDataNV::matrixMotionInstance"][::core::mem::offset_of!(
        VkAccelerationStructureMotionInstanceDataNV,
        matrixMotionInstance
    )
        - 0usize];
    ["Offset of field: VkAccelerationStructureMotionInstanceDataNV::srtMotionInstance"][::core::mem::offset_of!(
        VkAccelerationStructureMotionInstanceDataNV,
        srtMotionInstance
    ) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkAccelerationStructureMotionInstanceNV"]
        [::core::mem::size_of::<VkAccelerationStructureMotionInstanceNV>() - 152usize];
    ["Alignment of VkAccelerationStructureMotionInstanceNV"]
        [::core::mem::align_of::<VkAccelerationStructureMotionInstanceNV>() - 8usize];
    ["Offset of field: VkAccelerationStructureMotionInstanceNV::type_"]
        [::core::mem::offset_of!(VkAccelerationStructureMotionInstanceNV, type_) - 0usize];
    ["Offset of field: VkAccelerationStructureMotionInstanceNV::flags"]
        [::core::mem::offset_of!(VkAccelerationStructureMotionInstanceNV, flags) - 4usize];
    ["Offset of field: VkAccelerationStructureMotionInstanceNV::data"]
        [::core::mem::offset_of!(VkAccelerationStructureMotionInstanceNV, data) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceRayTracingMotionBlurFeaturesNV"]
        [::core::mem::size_of::<VkPhysicalDeviceRayTracingMotionBlurFeaturesNV>() - 16usize];
    ["Alignment of VkPhysicalDeviceRayTracingMotionBlurFeaturesNV"]
        [::core::mem::align_of::<VkPhysicalDeviceRayTracingMotionBlurFeaturesNV>() - 4usize];
    ["Offset of field: VkPhysicalDeviceRayTracingMotionBlurFeaturesNV::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceRayTracingMotionBlurFeaturesNV, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceRayTracingMotionBlurFeaturesNV::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceRayTracingMotionBlurFeaturesNV, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceRayTracingMotionBlurFeaturesNV::rayTracingMotionBlur"][::core::mem::offset_of!(
        VkPhysicalDeviceRayTracingMotionBlurFeaturesNV,
        rayTracingMotionBlur
    )
        - 8usize];
    ["Offset of field: VkPhysicalDeviceRayTracingMotionBlurFeaturesNV::rayTracingMotionBlurPipelineTraceRaysIndirect"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceRayTracingMotionBlurFeaturesNV , rayTracingMotionBlurPipelineTraceRaysIndirect) - 12usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT"]
        [::core::mem::size_of::<VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT>() - 12usize];
    ["Alignment of VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT"]
        [::core::mem::align_of::<VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT>() - 4usize];
    ["Offset of field: VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT::ycbcr2plane444Formats"][::core::mem::offset_of!(
        VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT,
        ycbcr2plane444Formats
    )
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceFragmentDensityMap2FeaturesEXT"]
        [::core::mem::size_of::<VkPhysicalDeviceFragmentDensityMap2FeaturesEXT>() - 12usize];
    ["Alignment of VkPhysicalDeviceFragmentDensityMap2FeaturesEXT"]
        [::core::mem::align_of::<VkPhysicalDeviceFragmentDensityMap2FeaturesEXT>() - 4usize];
    ["Offset of field: VkPhysicalDeviceFragmentDensityMap2FeaturesEXT::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceFragmentDensityMap2FeaturesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceFragmentDensityMap2FeaturesEXT::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceFragmentDensityMap2FeaturesEXT, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceFragmentDensityMap2FeaturesEXT::fragmentDensityMapDeferred"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceFragmentDensityMap2FeaturesEXT , fragmentDensityMapDeferred) - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceFragmentDensityMap2PropertiesEXT"]
        [::core::mem::size_of::<VkPhysicalDeviceFragmentDensityMap2PropertiesEXT>() - 24usize];
    ["Alignment of VkPhysicalDeviceFragmentDensityMap2PropertiesEXT"]
        [::core::mem::align_of::<VkPhysicalDeviceFragmentDensityMap2PropertiesEXT>() - 4usize];
    ["Offset of field: VkPhysicalDeviceFragmentDensityMap2PropertiesEXT::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceFragmentDensityMap2PropertiesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceFragmentDensityMap2PropertiesEXT::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceFragmentDensityMap2PropertiesEXT, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceFragmentDensityMap2PropertiesEXT::subsampledLoads"][::core::mem::offset_of!(
        VkPhysicalDeviceFragmentDensityMap2PropertiesEXT,
        subsampledLoads
    )
        - 8usize];
    ["Offset of field: VkPhysicalDeviceFragmentDensityMap2PropertiesEXT::subsampledCoarseReconstructionEarlyAccess"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceFragmentDensityMap2PropertiesEXT , subsampledCoarseReconstructionEarlyAccess) - 12usize] ;
    ["Offset of field: VkPhysicalDeviceFragmentDensityMap2PropertiesEXT::maxSubsampledArrayLayers"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceFragmentDensityMap2PropertiesEXT , maxSubsampledArrayLayers) - 16usize] ;
    ["Offset of field: VkPhysicalDeviceFragmentDensityMap2PropertiesEXT::maxDescriptorSetSubsampledSamplers"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceFragmentDensityMap2PropertiesEXT , maxDescriptorSetSubsampledSamplers) - 20usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkCopyCommandTransformInfoQCOM"]
        [::core::mem::size_of::<VkCopyCommandTransformInfoQCOM>() - 12usize];
    ["Alignment of VkCopyCommandTransformInfoQCOM"]
        [::core::mem::align_of::<VkCopyCommandTransformInfoQCOM>() - 4usize];
    ["Offset of field: VkCopyCommandTransformInfoQCOM::sType"]
        [::core::mem::offset_of!(VkCopyCommandTransformInfoQCOM, sType) - 0usize];
    ["Offset of field: VkCopyCommandTransformInfoQCOM::pNext"]
        [::core::mem::offset_of!(VkCopyCommandTransformInfoQCOM, pNext) - 4usize];
    ["Offset of field: VkCopyCommandTransformInfoQCOM::transform"]
        [::core::mem::offset_of!(VkCopyCommandTransformInfoQCOM, transform) - 8usize];
};
pub const VkImageCompressionFlagBitsEXT_VK_IMAGE_COMPRESSION_DEFAULT_EXT:
    VkImageCompressionFlagBitsEXT = 0;
pub const VkImageCompressionFlagBitsEXT_VK_IMAGE_COMPRESSION_FIXED_RATE_DEFAULT_EXT:
    VkImageCompressionFlagBitsEXT = 1;
pub const VkImageCompressionFlagBitsEXT_VK_IMAGE_COMPRESSION_FIXED_RATE_EXPLICIT_EXT:
    VkImageCompressionFlagBitsEXT = 2;
pub const VkImageCompressionFlagBitsEXT_VK_IMAGE_COMPRESSION_DISABLED_EXT:
    VkImageCompressionFlagBitsEXT = 4;
pub const VkImageCompressionFlagBitsEXT_VK_IMAGE_COMPRESSION_FLAG_BITS_MAX_ENUM_EXT:
    VkImageCompressionFlagBitsEXT = 2147483647;
pub const VkImageCompressionFixedRateFlagBitsEXT_VK_IMAGE_COMPRESSION_FIXED_RATE_NONE_EXT:
    VkImageCompressionFixedRateFlagBitsEXT = 0;
pub const VkImageCompressionFixedRateFlagBitsEXT_VK_IMAGE_COMPRESSION_FIXED_RATE_1BPC_BIT_EXT:
    VkImageCompressionFixedRateFlagBitsEXT = 1;
pub const VkImageCompressionFixedRateFlagBitsEXT_VK_IMAGE_COMPRESSION_FIXED_RATE_2BPC_BIT_EXT:
    VkImageCompressionFixedRateFlagBitsEXT = 2;
pub const VkImageCompressionFixedRateFlagBitsEXT_VK_IMAGE_COMPRESSION_FIXED_RATE_3BPC_BIT_EXT:
    VkImageCompressionFixedRateFlagBitsEXT = 4;
pub const VkImageCompressionFixedRateFlagBitsEXT_VK_IMAGE_COMPRESSION_FIXED_RATE_4BPC_BIT_EXT:
    VkImageCompressionFixedRateFlagBitsEXT = 8;
pub const VkImageCompressionFixedRateFlagBitsEXT_VK_IMAGE_COMPRESSION_FIXED_RATE_5BPC_BIT_EXT:
    VkImageCompressionFixedRateFlagBitsEXT = 16;
pub const VkImageCompressionFixedRateFlagBitsEXT_VK_IMAGE_COMPRESSION_FIXED_RATE_6BPC_BIT_EXT:
    VkImageCompressionFixedRateFlagBitsEXT = 32;
pub const VkImageCompressionFixedRateFlagBitsEXT_VK_IMAGE_COMPRESSION_FIXED_RATE_7BPC_BIT_EXT:
    VkImageCompressionFixedRateFlagBitsEXT = 64;
pub const VkImageCompressionFixedRateFlagBitsEXT_VK_IMAGE_COMPRESSION_FIXED_RATE_8BPC_BIT_EXT:
    VkImageCompressionFixedRateFlagBitsEXT = 128;
pub const VkImageCompressionFixedRateFlagBitsEXT_VK_IMAGE_COMPRESSION_FIXED_RATE_9BPC_BIT_EXT:
    VkImageCompressionFixedRateFlagBitsEXT = 256;
pub const VkImageCompressionFixedRateFlagBitsEXT_VK_IMAGE_COMPRESSION_FIXED_RATE_10BPC_BIT_EXT:
    VkImageCompressionFixedRateFlagBitsEXT = 512;
pub const VkImageCompressionFixedRateFlagBitsEXT_VK_IMAGE_COMPRESSION_FIXED_RATE_11BPC_BIT_EXT:
    VkImageCompressionFixedRateFlagBitsEXT = 1024;
pub const VkImageCompressionFixedRateFlagBitsEXT_VK_IMAGE_COMPRESSION_FIXED_RATE_12BPC_BIT_EXT:
    VkImageCompressionFixedRateFlagBitsEXT = 2048;
pub const VkImageCompressionFixedRateFlagBitsEXT_VK_IMAGE_COMPRESSION_FIXED_RATE_13BPC_BIT_EXT:
    VkImageCompressionFixedRateFlagBitsEXT = 4096;
pub const VkImageCompressionFixedRateFlagBitsEXT_VK_IMAGE_COMPRESSION_FIXED_RATE_14BPC_BIT_EXT:
    VkImageCompressionFixedRateFlagBitsEXT = 8192;
pub const VkImageCompressionFixedRateFlagBitsEXT_VK_IMAGE_COMPRESSION_FIXED_RATE_15BPC_BIT_EXT:
    VkImageCompressionFixedRateFlagBitsEXT = 16384;
pub const VkImageCompressionFixedRateFlagBitsEXT_VK_IMAGE_COMPRESSION_FIXED_RATE_16BPC_BIT_EXT:
    VkImageCompressionFixedRateFlagBitsEXT = 32768;
pub const VkImageCompressionFixedRateFlagBitsEXT_VK_IMAGE_COMPRESSION_FIXED_RATE_17BPC_BIT_EXT:
    VkImageCompressionFixedRateFlagBitsEXT = 65536;
pub const VkImageCompressionFixedRateFlagBitsEXT_VK_IMAGE_COMPRESSION_FIXED_RATE_18BPC_BIT_EXT:
    VkImageCompressionFixedRateFlagBitsEXT = 131072;
pub const VkImageCompressionFixedRateFlagBitsEXT_VK_IMAGE_COMPRESSION_FIXED_RATE_19BPC_BIT_EXT:
    VkImageCompressionFixedRateFlagBitsEXT = 262144;
pub const VkImageCompressionFixedRateFlagBitsEXT_VK_IMAGE_COMPRESSION_FIXED_RATE_20BPC_BIT_EXT:
    VkImageCompressionFixedRateFlagBitsEXT = 524288;
pub const VkImageCompressionFixedRateFlagBitsEXT_VK_IMAGE_COMPRESSION_FIXED_RATE_21BPC_BIT_EXT:
    VkImageCompressionFixedRateFlagBitsEXT = 1048576;
pub const VkImageCompressionFixedRateFlagBitsEXT_VK_IMAGE_COMPRESSION_FIXED_RATE_22BPC_BIT_EXT:
    VkImageCompressionFixedRateFlagBitsEXT = 2097152;
pub const VkImageCompressionFixedRateFlagBitsEXT_VK_IMAGE_COMPRESSION_FIXED_RATE_23BPC_BIT_EXT:
    VkImageCompressionFixedRateFlagBitsEXT = 4194304;
pub const VkImageCompressionFixedRateFlagBitsEXT_VK_IMAGE_COMPRESSION_FIXED_RATE_24BPC_BIT_EXT:
    VkImageCompressionFixedRateFlagBitsEXT = 8388608;
pub const VkImageCompressionFixedRateFlagBitsEXT_VK_IMAGE_COMPRESSION_FIXED_RATE_FLAG_BITS_MAX_ENUM_EXT : VkImageCompressionFixedRateFlagBitsEXT = 2147483647 ;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceImageCompressionControlFeaturesEXT"]
        [::core::mem::size_of::<VkPhysicalDeviceImageCompressionControlFeaturesEXT>() - 12usize];
    ["Alignment of VkPhysicalDeviceImageCompressionControlFeaturesEXT"]
        [::core::mem::align_of::<VkPhysicalDeviceImageCompressionControlFeaturesEXT>() - 4usize];
    ["Offset of field: VkPhysicalDeviceImageCompressionControlFeaturesEXT::sType"][::core::mem::offset_of!(
        VkPhysicalDeviceImageCompressionControlFeaturesEXT,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceImageCompressionControlFeaturesEXT::pNext"][::core::mem::offset_of!(
        VkPhysicalDeviceImageCompressionControlFeaturesEXT,
        pNext
    ) - 4usize];
    ["Offset of field: VkPhysicalDeviceImageCompressionControlFeaturesEXT::imageCompressionControl"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceImageCompressionControlFeaturesEXT , imageCompressionControl) - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkImageCompressionControlEXT"]
        [::core::mem::size_of::<VkImageCompressionControlEXT>() - 20usize];
    ["Alignment of VkImageCompressionControlEXT"]
        [::core::mem::align_of::<VkImageCompressionControlEXT>() - 4usize];
    ["Offset of field: VkImageCompressionControlEXT::sType"]
        [::core::mem::offset_of!(VkImageCompressionControlEXT, sType) - 0usize];
    ["Offset of field: VkImageCompressionControlEXT::pNext"]
        [::core::mem::offset_of!(VkImageCompressionControlEXT, pNext) - 4usize];
    ["Offset of field: VkImageCompressionControlEXT::flags"]
        [::core::mem::offset_of!(VkImageCompressionControlEXT, flags) - 8usize];
    ["Offset of field: VkImageCompressionControlEXT::compressionControlPlaneCount"][::core::mem::offset_of!(
        VkImageCompressionControlEXT,
        compressionControlPlaneCount
    ) - 12usize];
    ["Offset of field: VkImageCompressionControlEXT::pFixedRateFlags"]
        [::core::mem::offset_of!(VkImageCompressionControlEXT, pFixedRateFlags) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkImageCompressionPropertiesEXT"]
        [::core::mem::size_of::<VkImageCompressionPropertiesEXT>() - 16usize];
    ["Alignment of VkImageCompressionPropertiesEXT"]
        [::core::mem::align_of::<VkImageCompressionPropertiesEXT>() - 4usize];
    ["Offset of field: VkImageCompressionPropertiesEXT::sType"]
        [::core::mem::offset_of!(VkImageCompressionPropertiesEXT, sType) - 0usize];
    ["Offset of field: VkImageCompressionPropertiesEXT::pNext"]
        [::core::mem::offset_of!(VkImageCompressionPropertiesEXT, pNext) - 4usize];
    ["Offset of field: VkImageCompressionPropertiesEXT::imageCompressionFlags"]
        [::core::mem::offset_of!(VkImageCompressionPropertiesEXT, imageCompressionFlags) - 8usize];
    ["Offset of field: VkImageCompressionPropertiesEXT::imageCompressionFixedRateFlags"][::core::mem::offset_of!(
        VkImageCompressionPropertiesEXT,
        imageCompressionFixedRateFlags
    )
        - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT"][::core::mem::size_of::<
        VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT,
    >() - 12usize];
    ["Alignment of VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT"][::core::mem::align_of::<
        VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT,
    >() - 4usize];
    ["Offset of field: VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT::sType"][::core::mem::offset_of!(
        VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT::pNext"][::core::mem::offset_of!(
        VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT,
        pNext
    ) - 4usize];
    ["Offset of field: VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT::attachmentFeedbackLoopLayout"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT , attachmentFeedbackLoopLayout) - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDevice4444FormatsFeaturesEXT"]
        [::core::mem::size_of::<VkPhysicalDevice4444FormatsFeaturesEXT>() - 16usize];
    ["Alignment of VkPhysicalDevice4444FormatsFeaturesEXT"]
        [::core::mem::align_of::<VkPhysicalDevice4444FormatsFeaturesEXT>() - 4usize];
    ["Offset of field: VkPhysicalDevice4444FormatsFeaturesEXT::sType"]
        [::core::mem::offset_of!(VkPhysicalDevice4444FormatsFeaturesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDevice4444FormatsFeaturesEXT::pNext"]
        [::core::mem::offset_of!(VkPhysicalDevice4444FormatsFeaturesEXT, pNext) - 4usize];
    ["Offset of field: VkPhysicalDevice4444FormatsFeaturesEXT::formatA4R4G4B4"]
        [::core::mem::offset_of!(VkPhysicalDevice4444FormatsFeaturesEXT, formatA4R4G4B4) - 8usize];
    ["Offset of field: VkPhysicalDevice4444FormatsFeaturesEXT::formatA4B4G4R4"]
        [::core::mem::offset_of!(VkPhysicalDevice4444FormatsFeaturesEXT, formatA4B4G4R4) - 12usize];
};
pub const VkDeviceFaultAddressTypeEXT_VK_DEVICE_FAULT_ADDRESS_TYPE_NONE_EXT:
    VkDeviceFaultAddressTypeEXT = 0;
pub const VkDeviceFaultAddressTypeEXT_VK_DEVICE_FAULT_ADDRESS_TYPE_READ_INVALID_EXT:
    VkDeviceFaultAddressTypeEXT = 1;
pub const VkDeviceFaultAddressTypeEXT_VK_DEVICE_FAULT_ADDRESS_TYPE_WRITE_INVALID_EXT:
    VkDeviceFaultAddressTypeEXT = 2;
pub const VkDeviceFaultAddressTypeEXT_VK_DEVICE_FAULT_ADDRESS_TYPE_EXECUTE_INVALID_EXT:
    VkDeviceFaultAddressTypeEXT = 3;
pub const VkDeviceFaultAddressTypeEXT_VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_UNKNOWN_EXT : VkDeviceFaultAddressTypeEXT = 4 ;
pub const VkDeviceFaultAddressTypeEXT_VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_INVALID_EXT : VkDeviceFaultAddressTypeEXT = 5 ;
pub const VkDeviceFaultAddressTypeEXT_VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_FAULT_EXT:
    VkDeviceFaultAddressTypeEXT = 6;
pub const VkDeviceFaultAddressTypeEXT_VK_DEVICE_FAULT_ADDRESS_TYPE_MAX_ENUM_EXT:
    VkDeviceFaultAddressTypeEXT = 2147483647;
pub const VkDeviceFaultVendorBinaryHeaderVersionEXT_VK_DEVICE_FAULT_VENDOR_BINARY_HEADER_VERSION_ONE_EXT : VkDeviceFaultVendorBinaryHeaderVersionEXT = 1 ;
pub const VkDeviceFaultVendorBinaryHeaderVersionEXT_VK_DEVICE_FAULT_VENDOR_BINARY_HEADER_VERSION_MAX_ENUM_EXT : VkDeviceFaultVendorBinaryHeaderVersionEXT = 2147483647 ;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceFaultFeaturesEXT"]
        [::core::mem::size_of::<VkPhysicalDeviceFaultFeaturesEXT>() - 16usize];
    ["Alignment of VkPhysicalDeviceFaultFeaturesEXT"]
        [::core::mem::align_of::<VkPhysicalDeviceFaultFeaturesEXT>() - 4usize];
    ["Offset of field: VkPhysicalDeviceFaultFeaturesEXT::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceFaultFeaturesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceFaultFeaturesEXT::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceFaultFeaturesEXT, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceFaultFeaturesEXT::deviceFault"]
        [::core::mem::offset_of!(VkPhysicalDeviceFaultFeaturesEXT, deviceFault) - 8usize];
    ["Offset of field: VkPhysicalDeviceFaultFeaturesEXT::deviceFaultVendorBinary"][::core::mem::offset_of!(
        VkPhysicalDeviceFaultFeaturesEXT,
        deviceFaultVendorBinary
    ) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDeviceFaultCountsEXT"][::core::mem::size_of::<VkDeviceFaultCountsEXT>() - 24usize];
    ["Alignment of VkDeviceFaultCountsEXT"]
        [::core::mem::align_of::<VkDeviceFaultCountsEXT>() - 8usize];
    ["Offset of field: VkDeviceFaultCountsEXT::sType"]
        [::core::mem::offset_of!(VkDeviceFaultCountsEXT, sType) - 0usize];
    ["Offset of field: VkDeviceFaultCountsEXT::pNext"]
        [::core::mem::offset_of!(VkDeviceFaultCountsEXT, pNext) - 4usize];
    ["Offset of field: VkDeviceFaultCountsEXT::addressInfoCount"]
        [::core::mem::offset_of!(VkDeviceFaultCountsEXT, addressInfoCount) - 8usize];
    ["Offset of field: VkDeviceFaultCountsEXT::vendorInfoCount"]
        [::core::mem::offset_of!(VkDeviceFaultCountsEXT, vendorInfoCount) - 12usize];
    ["Offset of field: VkDeviceFaultCountsEXT::vendorBinarySize"]
        [::core::mem::offset_of!(VkDeviceFaultCountsEXT, vendorBinarySize) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDeviceFaultAddressInfoEXT"]
        [::core::mem::size_of::<VkDeviceFaultAddressInfoEXT>() - 24usize];
    ["Alignment of VkDeviceFaultAddressInfoEXT"]
        [::core::mem::align_of::<VkDeviceFaultAddressInfoEXT>() - 8usize];
    ["Offset of field: VkDeviceFaultAddressInfoEXT::addressType"]
        [::core::mem::offset_of!(VkDeviceFaultAddressInfoEXT, addressType) - 0usize];
    ["Offset of field: VkDeviceFaultAddressInfoEXT::reportedAddress"]
        [::core::mem::offset_of!(VkDeviceFaultAddressInfoEXT, reportedAddress) - 8usize];
    ["Offset of field: VkDeviceFaultAddressInfoEXT::addressPrecision"]
        [::core::mem::offset_of!(VkDeviceFaultAddressInfoEXT, addressPrecision) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDeviceFaultVendorInfoEXT"]
        [::core::mem::size_of::<VkDeviceFaultVendorInfoEXT>() - 272usize];
    ["Alignment of VkDeviceFaultVendorInfoEXT"]
        [::core::mem::align_of::<VkDeviceFaultVendorInfoEXT>() - 8usize];
    ["Offset of field: VkDeviceFaultVendorInfoEXT::description"]
        [::core::mem::offset_of!(VkDeviceFaultVendorInfoEXT, description) - 0usize];
    ["Offset of field: VkDeviceFaultVendorInfoEXT::vendorFaultCode"]
        [::core::mem::offset_of!(VkDeviceFaultVendorInfoEXT, vendorFaultCode) - 256usize];
    ["Offset of field: VkDeviceFaultVendorInfoEXT::vendorFaultData"]
        [::core::mem::offset_of!(VkDeviceFaultVendorInfoEXT, vendorFaultData) - 264usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDeviceFaultInfoEXT"][::core::mem::size_of::<VkDeviceFaultInfoEXT>() - 276usize];
    ["Alignment of VkDeviceFaultInfoEXT"][::core::mem::align_of::<VkDeviceFaultInfoEXT>() - 4usize];
    ["Offset of field: VkDeviceFaultInfoEXT::sType"]
        [::core::mem::offset_of!(VkDeviceFaultInfoEXT, sType) - 0usize];
    ["Offset of field: VkDeviceFaultInfoEXT::pNext"]
        [::core::mem::offset_of!(VkDeviceFaultInfoEXT, pNext) - 4usize];
    ["Offset of field: VkDeviceFaultInfoEXT::description"]
        [::core::mem::offset_of!(VkDeviceFaultInfoEXT, description) - 8usize];
    ["Offset of field: VkDeviceFaultInfoEXT::pAddressInfos"]
        [::core::mem::offset_of!(VkDeviceFaultInfoEXT, pAddressInfos) - 264usize];
    ["Offset of field: VkDeviceFaultInfoEXT::pVendorInfos"]
        [::core::mem::offset_of!(VkDeviceFaultInfoEXT, pVendorInfos) - 268usize];
    ["Offset of field: VkDeviceFaultInfoEXT::pVendorBinaryData"]
        [::core::mem::offset_of!(VkDeviceFaultInfoEXT, pVendorBinaryData) - 272usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDeviceFaultVendorBinaryHeaderVersionOneEXT"]
        [::core::mem::size_of::<VkDeviceFaultVendorBinaryHeaderVersionOneEXT>() - 56usize];
    ["Alignment of VkDeviceFaultVendorBinaryHeaderVersionOneEXT"]
        [::core::mem::align_of::<VkDeviceFaultVendorBinaryHeaderVersionOneEXT>() - 4usize];
    ["Offset of field: VkDeviceFaultVendorBinaryHeaderVersionOneEXT::headerSize"][::core::mem::offset_of!(
        VkDeviceFaultVendorBinaryHeaderVersionOneEXT,
        headerSize
    ) - 0usize];
    ["Offset of field: VkDeviceFaultVendorBinaryHeaderVersionOneEXT::headerVersion"][::core::mem::offset_of!(
        VkDeviceFaultVendorBinaryHeaderVersionOneEXT,
        headerVersion
    ) - 4usize];
    ["Offset of field: VkDeviceFaultVendorBinaryHeaderVersionOneEXT::vendorID"]
        [::core::mem::offset_of!(VkDeviceFaultVendorBinaryHeaderVersionOneEXT, vendorID) - 8usize];
    ["Offset of field: VkDeviceFaultVendorBinaryHeaderVersionOneEXT::deviceID"]
        [::core::mem::offset_of!(VkDeviceFaultVendorBinaryHeaderVersionOneEXT, deviceID) - 12usize];
    ["Offset of field: VkDeviceFaultVendorBinaryHeaderVersionOneEXT::driverVersion"][::core::mem::offset_of!(
        VkDeviceFaultVendorBinaryHeaderVersionOneEXT,
        driverVersion
    ) - 16usize];
    ["Offset of field: VkDeviceFaultVendorBinaryHeaderVersionOneEXT::pipelineCacheUUID"][::core::mem::offset_of!(
        VkDeviceFaultVendorBinaryHeaderVersionOneEXT,
        pipelineCacheUUID
    )
        - 20usize];
    ["Offset of field: VkDeviceFaultVendorBinaryHeaderVersionOneEXT::applicationNameOffset"][::core::mem::offset_of!(
        VkDeviceFaultVendorBinaryHeaderVersionOneEXT,
        applicationNameOffset
    )
        - 36usize];
    ["Offset of field: VkDeviceFaultVendorBinaryHeaderVersionOneEXT::applicationVersion"][::core::mem::offset_of!(
        VkDeviceFaultVendorBinaryHeaderVersionOneEXT,
        applicationVersion
    )
        - 40usize];
    ["Offset of field: VkDeviceFaultVendorBinaryHeaderVersionOneEXT::engineNameOffset"][::core::mem::offset_of!(
        VkDeviceFaultVendorBinaryHeaderVersionOneEXT,
        engineNameOffset
    )
        - 44usize];
    ["Offset of field: VkDeviceFaultVendorBinaryHeaderVersionOneEXT::engineVersion"][::core::mem::offset_of!(
        VkDeviceFaultVendorBinaryHeaderVersionOneEXT,
        engineVersion
    ) - 48usize];
    ["Offset of field: VkDeviceFaultVendorBinaryHeaderVersionOneEXT::apiVersion"][::core::mem::offset_of!(
        VkDeviceFaultVendorBinaryHeaderVersionOneEXT,
        apiVersion
    ) - 52usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT"][::core::mem::size_of::<
        VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT,
    >() - 20usize];
    ["Alignment of VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT"]
        [::core::mem::align_of::<VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT>()
            - 4usize];
    ["Offset of field: VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT::sType"][::core::mem::offset_of!(
        VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT,
        sType
    )
        - 0usize];
    ["Offset of field: VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT::pNext"][::core::mem::offset_of!(
        VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT,
        pNext
    )
        - 4usize];
    ["Offset of field: VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT::rasterizationOrderColorAttachmentAccess"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT , rasterizationOrderColorAttachmentAccess) - 8usize] ;
    ["Offset of field: VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT::rasterizationOrderDepthAttachmentAccess"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT , rasterizationOrderDepthAttachmentAccess) - 12usize] ;
    ["Offset of field: VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT::rasterizationOrderStencilAttachmentAccess"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT , rasterizationOrderStencilAttachmentAccess) - 16usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT"]
        [::core::mem::size_of::<VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT>() - 12usize];
    ["Alignment of VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT"]
        [::core::mem::align_of::<VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT>() - 4usize];
    ["Offset of field: VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT::formatRgba10x6WithoutYCbCrSampler"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT , formatRgba10x6WithoutYCbCrSampler) - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT"]
        [::core::mem::size_of::<VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT>() - 12usize];
    ["Alignment of VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT"]
        [::core::mem::align_of::<VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT>() - 4usize];
    ["Offset of field: VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT::mutableDescriptorType"][::core::mem::offset_of!(
        VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT,
        mutableDescriptorType
    )
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkMutableDescriptorTypeListEXT"]
        [::core::mem::size_of::<VkMutableDescriptorTypeListEXT>() - 8usize];
    ["Alignment of VkMutableDescriptorTypeListEXT"]
        [::core::mem::align_of::<VkMutableDescriptorTypeListEXT>() - 4usize];
    ["Offset of field: VkMutableDescriptorTypeListEXT::descriptorTypeCount"]
        [::core::mem::offset_of!(VkMutableDescriptorTypeListEXT, descriptorTypeCount) - 0usize];
    ["Offset of field: VkMutableDescriptorTypeListEXT::pDescriptorTypes"]
        [::core::mem::offset_of!(VkMutableDescriptorTypeListEXT, pDescriptorTypes) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkMutableDescriptorTypeCreateInfoEXT"]
        [::core::mem::size_of::<VkMutableDescriptorTypeCreateInfoEXT>() - 16usize];
    ["Alignment of VkMutableDescriptorTypeCreateInfoEXT"]
        [::core::mem::align_of::<VkMutableDescriptorTypeCreateInfoEXT>() - 4usize];
    ["Offset of field: VkMutableDescriptorTypeCreateInfoEXT::sType"]
        [::core::mem::offset_of!(VkMutableDescriptorTypeCreateInfoEXT, sType) - 0usize];
    ["Offset of field: VkMutableDescriptorTypeCreateInfoEXT::pNext"]
        [::core::mem::offset_of!(VkMutableDescriptorTypeCreateInfoEXT, pNext) - 4usize];
    ["Offset of field: VkMutableDescriptorTypeCreateInfoEXT::mutableDescriptorTypeListCount"][::core::mem::offset_of!(
        VkMutableDescriptorTypeCreateInfoEXT,
        mutableDescriptorTypeListCount
    )
        - 8usize];
    ["Offset of field: VkMutableDescriptorTypeCreateInfoEXT::pMutableDescriptorTypeLists"][::core::mem::offset_of!(
        VkMutableDescriptorTypeCreateInfoEXT,
        pMutableDescriptorTypeLists
    )
        - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT"]
        [::core::mem::size_of::<VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT>() - 12usize];
    ["Alignment of VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT"]
        [::core::mem::align_of::<VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT>() - 4usize];
    ["Offset of field: VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT::sType"][::core::mem::offset_of!(
        VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT::pNext"][::core::mem::offset_of!(
        VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT,
        pNext
    ) - 4usize];
    ["Offset of field: VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT::vertexInputDynamicState"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT , vertexInputDynamicState) - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVertexInputBindingDescription2EXT"]
        [::core::mem::size_of::<VkVertexInputBindingDescription2EXT>() - 24usize];
    ["Alignment of VkVertexInputBindingDescription2EXT"]
        [::core::mem::align_of::<VkVertexInputBindingDescription2EXT>() - 4usize];
    ["Offset of field: VkVertexInputBindingDescription2EXT::sType"]
        [::core::mem::offset_of!(VkVertexInputBindingDescription2EXT, sType) - 0usize];
    ["Offset of field: VkVertexInputBindingDescription2EXT::pNext"]
        [::core::mem::offset_of!(VkVertexInputBindingDescription2EXT, pNext) - 4usize];
    ["Offset of field: VkVertexInputBindingDescription2EXT::binding"]
        [::core::mem::offset_of!(VkVertexInputBindingDescription2EXT, binding) - 8usize];
    ["Offset of field: VkVertexInputBindingDescription2EXT::stride"]
        [::core::mem::offset_of!(VkVertexInputBindingDescription2EXT, stride) - 12usize];
    ["Offset of field: VkVertexInputBindingDescription2EXT::inputRate"]
        [::core::mem::offset_of!(VkVertexInputBindingDescription2EXT, inputRate) - 16usize];
    ["Offset of field: VkVertexInputBindingDescription2EXT::divisor"]
        [::core::mem::offset_of!(VkVertexInputBindingDescription2EXT, divisor) - 20usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVertexInputAttributeDescription2EXT"]
        [::core::mem::size_of::<VkVertexInputAttributeDescription2EXT>() - 24usize];
    ["Alignment of VkVertexInputAttributeDescription2EXT"]
        [::core::mem::align_of::<VkVertexInputAttributeDescription2EXT>() - 4usize];
    ["Offset of field: VkVertexInputAttributeDescription2EXT::sType"]
        [::core::mem::offset_of!(VkVertexInputAttributeDescription2EXT, sType) - 0usize];
    ["Offset of field: VkVertexInputAttributeDescription2EXT::pNext"]
        [::core::mem::offset_of!(VkVertexInputAttributeDescription2EXT, pNext) - 4usize];
    ["Offset of field: VkVertexInputAttributeDescription2EXT::location"]
        [::core::mem::offset_of!(VkVertexInputAttributeDescription2EXT, location) - 8usize];
    ["Offset of field: VkVertexInputAttributeDescription2EXT::binding"]
        [::core::mem::offset_of!(VkVertexInputAttributeDescription2EXT, binding) - 12usize];
    ["Offset of field: VkVertexInputAttributeDescription2EXT::format"]
        [::core::mem::offset_of!(VkVertexInputAttributeDescription2EXT, format) - 16usize];
    ["Offset of field: VkVertexInputAttributeDescription2EXT::offset"]
        [::core::mem::offset_of!(VkVertexInputAttributeDescription2EXT, offset) - 20usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceDrmPropertiesEXT"]
        [::core::mem::size_of::<VkPhysicalDeviceDrmPropertiesEXT>() - 48usize];
    ["Alignment of VkPhysicalDeviceDrmPropertiesEXT"]
        [::core::mem::align_of::<VkPhysicalDeviceDrmPropertiesEXT>() - 8usize];
    ["Offset of field: VkPhysicalDeviceDrmPropertiesEXT::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceDrmPropertiesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceDrmPropertiesEXT::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceDrmPropertiesEXT, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceDrmPropertiesEXT::hasPrimary"]
        [::core::mem::offset_of!(VkPhysicalDeviceDrmPropertiesEXT, hasPrimary) - 8usize];
    ["Offset of field: VkPhysicalDeviceDrmPropertiesEXT::hasRender"]
        [::core::mem::offset_of!(VkPhysicalDeviceDrmPropertiesEXT, hasRender) - 12usize];
    ["Offset of field: VkPhysicalDeviceDrmPropertiesEXT::primaryMajor"]
        [::core::mem::offset_of!(VkPhysicalDeviceDrmPropertiesEXT, primaryMajor) - 16usize];
    ["Offset of field: VkPhysicalDeviceDrmPropertiesEXT::primaryMinor"]
        [::core::mem::offset_of!(VkPhysicalDeviceDrmPropertiesEXT, primaryMinor) - 24usize];
    ["Offset of field: VkPhysicalDeviceDrmPropertiesEXT::renderMajor"]
        [::core::mem::offset_of!(VkPhysicalDeviceDrmPropertiesEXT, renderMajor) - 32usize];
    ["Offset of field: VkPhysicalDeviceDrmPropertiesEXT::renderMinor"]
        [::core::mem::offset_of!(VkPhysicalDeviceDrmPropertiesEXT, renderMinor) - 40usize];
};
pub const VkDeviceAddressBindingTypeEXT_VK_DEVICE_ADDRESS_BINDING_TYPE_BIND_EXT:
    VkDeviceAddressBindingTypeEXT = 0;
pub const VkDeviceAddressBindingTypeEXT_VK_DEVICE_ADDRESS_BINDING_TYPE_UNBIND_EXT:
    VkDeviceAddressBindingTypeEXT = 1;
pub const VkDeviceAddressBindingTypeEXT_VK_DEVICE_ADDRESS_BINDING_TYPE_MAX_ENUM_EXT:
    VkDeviceAddressBindingTypeEXT = 2147483647;
pub const VkDeviceAddressBindingFlagBitsEXT_VK_DEVICE_ADDRESS_BINDING_INTERNAL_OBJECT_BIT_EXT:
    VkDeviceAddressBindingFlagBitsEXT = 1;
pub const VkDeviceAddressBindingFlagBitsEXT_VK_DEVICE_ADDRESS_BINDING_FLAG_BITS_MAX_ENUM_EXT:
    VkDeviceAddressBindingFlagBitsEXT = 2147483647;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceAddressBindingReportFeaturesEXT"]
        [::core::mem::size_of::<VkPhysicalDeviceAddressBindingReportFeaturesEXT>() - 12usize];
    ["Alignment of VkPhysicalDeviceAddressBindingReportFeaturesEXT"]
        [::core::mem::align_of::<VkPhysicalDeviceAddressBindingReportFeaturesEXT>() - 4usize];
    ["Offset of field: VkPhysicalDeviceAddressBindingReportFeaturesEXT::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceAddressBindingReportFeaturesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceAddressBindingReportFeaturesEXT::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceAddressBindingReportFeaturesEXT, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceAddressBindingReportFeaturesEXT::reportAddressBinding"][::core::mem::offset_of!(
        VkPhysicalDeviceAddressBindingReportFeaturesEXT,
        reportAddressBinding
    )
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDeviceAddressBindingCallbackDataEXT"]
        [::core::mem::size_of::<VkDeviceAddressBindingCallbackDataEXT>() - 40usize];
    ["Alignment of VkDeviceAddressBindingCallbackDataEXT"]
        [::core::mem::align_of::<VkDeviceAddressBindingCallbackDataEXT>() - 8usize];
    ["Offset of field: VkDeviceAddressBindingCallbackDataEXT::sType"]
        [::core::mem::offset_of!(VkDeviceAddressBindingCallbackDataEXT, sType) - 0usize];
    ["Offset of field: VkDeviceAddressBindingCallbackDataEXT::pNext"]
        [::core::mem::offset_of!(VkDeviceAddressBindingCallbackDataEXT, pNext) - 4usize];
    ["Offset of field: VkDeviceAddressBindingCallbackDataEXT::flags"]
        [::core::mem::offset_of!(VkDeviceAddressBindingCallbackDataEXT, flags) - 8usize];
    ["Offset of field: VkDeviceAddressBindingCallbackDataEXT::baseAddress"]
        [::core::mem::offset_of!(VkDeviceAddressBindingCallbackDataEXT, baseAddress) - 16usize];
    ["Offset of field: VkDeviceAddressBindingCallbackDataEXT::size"]
        [::core::mem::offset_of!(VkDeviceAddressBindingCallbackDataEXT, size) - 24usize];
    ["Offset of field: VkDeviceAddressBindingCallbackDataEXT::bindingType"]
        [::core::mem::offset_of!(VkDeviceAddressBindingCallbackDataEXT, bindingType) - 32usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceDepthClipControlFeaturesEXT"]
        [::core::mem::size_of::<VkPhysicalDeviceDepthClipControlFeaturesEXT>() - 12usize];
    ["Alignment of VkPhysicalDeviceDepthClipControlFeaturesEXT"]
        [::core::mem::align_of::<VkPhysicalDeviceDepthClipControlFeaturesEXT>() - 4usize];
    ["Offset of field: VkPhysicalDeviceDepthClipControlFeaturesEXT::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceDepthClipControlFeaturesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceDepthClipControlFeaturesEXT::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceDepthClipControlFeaturesEXT, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceDepthClipControlFeaturesEXT::depthClipControl"][::core::mem::offset_of!(
        VkPhysicalDeviceDepthClipControlFeaturesEXT,
        depthClipControl
    ) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineViewportDepthClipControlCreateInfoEXT"]
        [::core::mem::size_of::<VkPipelineViewportDepthClipControlCreateInfoEXT>() - 12usize];
    ["Alignment of VkPipelineViewportDepthClipControlCreateInfoEXT"]
        [::core::mem::align_of::<VkPipelineViewportDepthClipControlCreateInfoEXT>() - 4usize];
    ["Offset of field: VkPipelineViewportDepthClipControlCreateInfoEXT::sType"]
        [::core::mem::offset_of!(VkPipelineViewportDepthClipControlCreateInfoEXT, sType) - 0usize];
    ["Offset of field: VkPipelineViewportDepthClipControlCreateInfoEXT::pNext"]
        [::core::mem::offset_of!(VkPipelineViewportDepthClipControlCreateInfoEXT, pNext) - 4usize];
    ["Offset of field: VkPipelineViewportDepthClipControlCreateInfoEXT::negativeOneToOne"][::core::mem::offset_of!(
        VkPipelineViewportDepthClipControlCreateInfoEXT,
        negativeOneToOne
    )
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT"][::core::mem::size_of::<
        VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT,
    >() - 16usize];
    ["Alignment of VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT"][::core::mem::align_of::<
        VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT,
    >() - 4usize];
    ["Offset of field: VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT::sType"][::core::mem::offset_of!(
        VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT::pNext"][::core::mem::offset_of!(
        VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT,
        pNext
    ) - 4usize];
    ["Offset of field: VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT::primitiveTopologyListRestart"] [:: core :: mem :: offset_of ! (VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT , primitiveTopologyListRestart) - 8usize] ;
    ["Offset of field: VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT::primitiveTopologyPatchListRestart"] [:: core :: mem :: offset_of ! (VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT , primitiveTopologyPatchListRestart) - 12usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDevicePresentModeFifoLatestReadyFeaturesEXT"]
        [::core::mem::size_of::<VkPhysicalDevicePresentModeFifoLatestReadyFeaturesEXT>() - 12usize];
    ["Alignment of VkPhysicalDevicePresentModeFifoLatestReadyFeaturesEXT"]
        [::core::mem::align_of::<VkPhysicalDevicePresentModeFifoLatestReadyFeaturesEXT>() - 4usize];
    ["Offset of field: VkPhysicalDevicePresentModeFifoLatestReadyFeaturesEXT::sType"][::core::mem::offset_of!(
        VkPhysicalDevicePresentModeFifoLatestReadyFeaturesEXT,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDevicePresentModeFifoLatestReadyFeaturesEXT::pNext"][::core::mem::offset_of!(
        VkPhysicalDevicePresentModeFifoLatestReadyFeaturesEXT,
        pNext
    ) - 4usize];
    ["Offset of field: VkPhysicalDevicePresentModeFifoLatestReadyFeaturesEXT::presentModeFifoLatestReady"] [:: core :: mem :: offset_of ! (VkPhysicalDevicePresentModeFifoLatestReadyFeaturesEXT , presentModeFifoLatestReady) - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSubpassShadingPipelineCreateInfoHUAWEI"]
        [::core::mem::size_of::<VkSubpassShadingPipelineCreateInfoHUAWEI>() - 24usize];
    ["Alignment of VkSubpassShadingPipelineCreateInfoHUAWEI"]
        [::core::mem::align_of::<VkSubpassShadingPipelineCreateInfoHUAWEI>() - 8usize];
    ["Offset of field: VkSubpassShadingPipelineCreateInfoHUAWEI::sType"]
        [::core::mem::offset_of!(VkSubpassShadingPipelineCreateInfoHUAWEI, sType) - 0usize];
    ["Offset of field: VkSubpassShadingPipelineCreateInfoHUAWEI::pNext"]
        [::core::mem::offset_of!(VkSubpassShadingPipelineCreateInfoHUAWEI, pNext) - 4usize];
    ["Offset of field: VkSubpassShadingPipelineCreateInfoHUAWEI::renderPass"]
        [::core::mem::offset_of!(VkSubpassShadingPipelineCreateInfoHUAWEI, renderPass) - 8usize];
    ["Offset of field: VkSubpassShadingPipelineCreateInfoHUAWEI::subpass"]
        [::core::mem::offset_of!(VkSubpassShadingPipelineCreateInfoHUAWEI, subpass) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceSubpassShadingFeaturesHUAWEI"]
        [::core::mem::size_of::<VkPhysicalDeviceSubpassShadingFeaturesHUAWEI>() - 12usize];
    ["Alignment of VkPhysicalDeviceSubpassShadingFeaturesHUAWEI"]
        [::core::mem::align_of::<VkPhysicalDeviceSubpassShadingFeaturesHUAWEI>() - 4usize];
    ["Offset of field: VkPhysicalDeviceSubpassShadingFeaturesHUAWEI::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceSubpassShadingFeaturesHUAWEI, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceSubpassShadingFeaturesHUAWEI::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceSubpassShadingFeaturesHUAWEI, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceSubpassShadingFeaturesHUAWEI::subpassShading"][::core::mem::offset_of!(
        VkPhysicalDeviceSubpassShadingFeaturesHUAWEI,
        subpassShading
    ) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceSubpassShadingPropertiesHUAWEI"]
        [::core::mem::size_of::<VkPhysicalDeviceSubpassShadingPropertiesHUAWEI>() - 12usize];
    ["Alignment of VkPhysicalDeviceSubpassShadingPropertiesHUAWEI"]
        [::core::mem::align_of::<VkPhysicalDeviceSubpassShadingPropertiesHUAWEI>() - 4usize];
    ["Offset of field: VkPhysicalDeviceSubpassShadingPropertiesHUAWEI::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceSubpassShadingPropertiesHUAWEI, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceSubpassShadingPropertiesHUAWEI::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceSubpassShadingPropertiesHUAWEI, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceSubpassShadingPropertiesHUAWEI::maxSubpassShadingWorkgroupSizeAspectRatio"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceSubpassShadingPropertiesHUAWEI , maxSubpassShadingWorkgroupSizeAspectRatio) - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceInvocationMaskFeaturesHUAWEI"]
        [::core::mem::size_of::<VkPhysicalDeviceInvocationMaskFeaturesHUAWEI>() - 12usize];
    ["Alignment of VkPhysicalDeviceInvocationMaskFeaturesHUAWEI"]
        [::core::mem::align_of::<VkPhysicalDeviceInvocationMaskFeaturesHUAWEI>() - 4usize];
    ["Offset of field: VkPhysicalDeviceInvocationMaskFeaturesHUAWEI::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceInvocationMaskFeaturesHUAWEI, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceInvocationMaskFeaturesHUAWEI::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceInvocationMaskFeaturesHUAWEI, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceInvocationMaskFeaturesHUAWEI::invocationMask"][::core::mem::offset_of!(
        VkPhysicalDeviceInvocationMaskFeaturesHUAWEI,
        invocationMask
    ) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkMemoryGetRemoteAddressInfoNV"]
        [::core::mem::size_of::<VkMemoryGetRemoteAddressInfoNV>() - 24usize];
    ["Alignment of VkMemoryGetRemoteAddressInfoNV"]
        [::core::mem::align_of::<VkMemoryGetRemoteAddressInfoNV>() - 8usize];
    ["Offset of field: VkMemoryGetRemoteAddressInfoNV::sType"]
        [::core::mem::offset_of!(VkMemoryGetRemoteAddressInfoNV, sType) - 0usize];
    ["Offset of field: VkMemoryGetRemoteAddressInfoNV::pNext"]
        [::core::mem::offset_of!(VkMemoryGetRemoteAddressInfoNV, pNext) - 4usize];
    ["Offset of field: VkMemoryGetRemoteAddressInfoNV::memory"]
        [::core::mem::offset_of!(VkMemoryGetRemoteAddressInfoNV, memory) - 8usize];
    ["Offset of field: VkMemoryGetRemoteAddressInfoNV::handleType"]
        [::core::mem::offset_of!(VkMemoryGetRemoteAddressInfoNV, handleType) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceExternalMemoryRDMAFeaturesNV"]
        [::core::mem::size_of::<VkPhysicalDeviceExternalMemoryRDMAFeaturesNV>() - 12usize];
    ["Alignment of VkPhysicalDeviceExternalMemoryRDMAFeaturesNV"]
        [::core::mem::align_of::<VkPhysicalDeviceExternalMemoryRDMAFeaturesNV>() - 4usize];
    ["Offset of field: VkPhysicalDeviceExternalMemoryRDMAFeaturesNV::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceExternalMemoryRDMAFeaturesNV, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceExternalMemoryRDMAFeaturesNV::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceExternalMemoryRDMAFeaturesNV, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceExternalMemoryRDMAFeaturesNV::externalMemoryRDMA"][::core::mem::offset_of!(
        VkPhysicalDeviceExternalMemoryRDMAFeaturesNV,
        externalMemoryRDMA
    )
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelinePropertiesIdentifierEXT"]
        [::core::mem::size_of::<VkPipelinePropertiesIdentifierEXT>() - 24usize];
    ["Alignment of VkPipelinePropertiesIdentifierEXT"]
        [::core::mem::align_of::<VkPipelinePropertiesIdentifierEXT>() - 4usize];
    ["Offset of field: VkPipelinePropertiesIdentifierEXT::sType"]
        [::core::mem::offset_of!(VkPipelinePropertiesIdentifierEXT, sType) - 0usize];
    ["Offset of field: VkPipelinePropertiesIdentifierEXT::pNext"]
        [::core::mem::offset_of!(VkPipelinePropertiesIdentifierEXT, pNext) - 4usize];
    ["Offset of field: VkPipelinePropertiesIdentifierEXT::pipelineIdentifier"]
        [::core::mem::offset_of!(VkPipelinePropertiesIdentifierEXT, pipelineIdentifier) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDevicePipelinePropertiesFeaturesEXT"]
        [::core::mem::size_of::<VkPhysicalDevicePipelinePropertiesFeaturesEXT>() - 12usize];
    ["Alignment of VkPhysicalDevicePipelinePropertiesFeaturesEXT"]
        [::core::mem::align_of::<VkPhysicalDevicePipelinePropertiesFeaturesEXT>() - 4usize];
    ["Offset of field: VkPhysicalDevicePipelinePropertiesFeaturesEXT::sType"]
        [::core::mem::offset_of!(VkPhysicalDevicePipelinePropertiesFeaturesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDevicePipelinePropertiesFeaturesEXT::pNext"]
        [::core::mem::offset_of!(VkPhysicalDevicePipelinePropertiesFeaturesEXT, pNext) - 4usize];
    ["Offset of field: VkPhysicalDevicePipelinePropertiesFeaturesEXT::pipelinePropertiesIdentifier"] [:: core :: mem :: offset_of ! (VkPhysicalDevicePipelinePropertiesFeaturesEXT , pipelinePropertiesIdentifier) - 8usize] ;
};
pub const VkFrameBoundaryFlagBitsEXT_VK_FRAME_BOUNDARY_FRAME_END_BIT_EXT:
    VkFrameBoundaryFlagBitsEXT = 1;
pub const VkFrameBoundaryFlagBitsEXT_VK_FRAME_BOUNDARY_FLAG_BITS_MAX_ENUM_EXT:
    VkFrameBoundaryFlagBitsEXT = 2147483647;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceFrameBoundaryFeaturesEXT"]
        [::core::mem::size_of::<VkPhysicalDeviceFrameBoundaryFeaturesEXT>() - 12usize];
    ["Alignment of VkPhysicalDeviceFrameBoundaryFeaturesEXT"]
        [::core::mem::align_of::<VkPhysicalDeviceFrameBoundaryFeaturesEXT>() - 4usize];
    ["Offset of field: VkPhysicalDeviceFrameBoundaryFeaturesEXT::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceFrameBoundaryFeaturesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceFrameBoundaryFeaturesEXT::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceFrameBoundaryFeaturesEXT, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceFrameBoundaryFeaturesEXT::frameBoundary"]
        [::core::mem::offset_of!(VkPhysicalDeviceFrameBoundaryFeaturesEXT, frameBoundary) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkFrameBoundaryEXT"][::core::mem::size_of::<VkFrameBoundaryEXT>() - 56usize];
    ["Alignment of VkFrameBoundaryEXT"][::core::mem::align_of::<VkFrameBoundaryEXT>() - 8usize];
    ["Offset of field: VkFrameBoundaryEXT::sType"]
        [::core::mem::offset_of!(VkFrameBoundaryEXT, sType) - 0usize];
    ["Offset of field: VkFrameBoundaryEXT::pNext"]
        [::core::mem::offset_of!(VkFrameBoundaryEXT, pNext) - 4usize];
    ["Offset of field: VkFrameBoundaryEXT::flags"]
        [::core::mem::offset_of!(VkFrameBoundaryEXT, flags) - 8usize];
    ["Offset of field: VkFrameBoundaryEXT::frameID"]
        [::core::mem::offset_of!(VkFrameBoundaryEXT, frameID) - 16usize];
    ["Offset of field: VkFrameBoundaryEXT::imageCount"]
        [::core::mem::offset_of!(VkFrameBoundaryEXT, imageCount) - 24usize];
    ["Offset of field: VkFrameBoundaryEXT::pImages"]
        [::core::mem::offset_of!(VkFrameBoundaryEXT, pImages) - 28usize];
    ["Offset of field: VkFrameBoundaryEXT::bufferCount"]
        [::core::mem::offset_of!(VkFrameBoundaryEXT, bufferCount) - 32usize];
    ["Offset of field: VkFrameBoundaryEXT::pBuffers"]
        [::core::mem::offset_of!(VkFrameBoundaryEXT, pBuffers) - 36usize];
    ["Offset of field: VkFrameBoundaryEXT::tagName"]
        [::core::mem::offset_of!(VkFrameBoundaryEXT, tagName) - 40usize];
    ["Offset of field: VkFrameBoundaryEXT::tagSize"]
        [::core::mem::offset_of!(VkFrameBoundaryEXT, tagSize) - 48usize];
    ["Offset of field: VkFrameBoundaryEXT::pTag"]
        [::core::mem::offset_of!(VkFrameBoundaryEXT, pTag) - 52usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT"][::core::mem::size_of::<
        VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT,
    >() - 12usize];
    ["Alignment of VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT"]
        [::core::mem::align_of::<VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT>()
            - 4usize];
    ["Offset of field: VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT::sType"][::core::mem::offset_of!(
        VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT,
        sType
    )
        - 0usize];
    ["Offset of field: VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT::pNext"][::core::mem::offset_of!(
        VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT,
        pNext
    )
        - 4usize];
    ["Offset of field: VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT::multisampledRenderToSingleSampled"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT , multisampledRenderToSingleSampled) - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSubpassResolvePerformanceQueryEXT"]
        [::core::mem::size_of::<VkSubpassResolvePerformanceQueryEXT>() - 12usize];
    ["Alignment of VkSubpassResolvePerformanceQueryEXT"]
        [::core::mem::align_of::<VkSubpassResolvePerformanceQueryEXT>() - 4usize];
    ["Offset of field: VkSubpassResolvePerformanceQueryEXT::sType"]
        [::core::mem::offset_of!(VkSubpassResolvePerformanceQueryEXT, sType) - 0usize];
    ["Offset of field: VkSubpassResolvePerformanceQueryEXT::pNext"]
        [::core::mem::offset_of!(VkSubpassResolvePerformanceQueryEXT, pNext) - 4usize];
    ["Offset of field: VkSubpassResolvePerformanceQueryEXT::optimal"]
        [::core::mem::offset_of!(VkSubpassResolvePerformanceQueryEXT, optimal) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkMultisampledRenderToSingleSampledInfoEXT"]
        [::core::mem::size_of::<VkMultisampledRenderToSingleSampledInfoEXT>() - 16usize];
    ["Alignment of VkMultisampledRenderToSingleSampledInfoEXT"]
        [::core::mem::align_of::<VkMultisampledRenderToSingleSampledInfoEXT>() - 4usize];
    ["Offset of field: VkMultisampledRenderToSingleSampledInfoEXT::sType"]
        [::core::mem::offset_of!(VkMultisampledRenderToSingleSampledInfoEXT, sType) - 0usize];
    ["Offset of field: VkMultisampledRenderToSingleSampledInfoEXT::pNext"]
        [::core::mem::offset_of!(VkMultisampledRenderToSingleSampledInfoEXT, pNext) - 4usize];
    ["Offset of field: VkMultisampledRenderToSingleSampledInfoEXT::multisampledRenderToSingleSampledEnable"] [:: core :: mem :: offset_of ! (VkMultisampledRenderToSingleSampledInfoEXT , multisampledRenderToSingleSampledEnable) - 8usize] ;
    ["Offset of field: VkMultisampledRenderToSingleSampledInfoEXT::rasterizationSamples"][::core::mem::offset_of!(
        VkMultisampledRenderToSingleSampledInfoEXT,
        rasterizationSamples
    )
        - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceExtendedDynamicState2FeaturesEXT"]
        [::core::mem::size_of::<VkPhysicalDeviceExtendedDynamicState2FeaturesEXT>() - 20usize];
    ["Alignment of VkPhysicalDeviceExtendedDynamicState2FeaturesEXT"]
        [::core::mem::align_of::<VkPhysicalDeviceExtendedDynamicState2FeaturesEXT>() - 4usize];
    ["Offset of field: VkPhysicalDeviceExtendedDynamicState2FeaturesEXT::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceExtendedDynamicState2FeaturesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceExtendedDynamicState2FeaturesEXT::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceExtendedDynamicState2FeaturesEXT, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceExtendedDynamicState2FeaturesEXT::extendedDynamicState2"][::core::mem::offset_of!(
        VkPhysicalDeviceExtendedDynamicState2FeaturesEXT,
        extendedDynamicState2
    )
        - 8usize];
    ["Offset of field: VkPhysicalDeviceExtendedDynamicState2FeaturesEXT::extendedDynamicState2LogicOp"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceExtendedDynamicState2FeaturesEXT , extendedDynamicState2LogicOp) - 12usize] ;
    ["Offset of field: VkPhysicalDeviceExtendedDynamicState2FeaturesEXT::extendedDynamicState2PatchControlPoints"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceExtendedDynamicState2FeaturesEXT , extendedDynamicState2PatchControlPoints) - 16usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceColorWriteEnableFeaturesEXT"]
        [::core::mem::size_of::<VkPhysicalDeviceColorWriteEnableFeaturesEXT>() - 12usize];
    ["Alignment of VkPhysicalDeviceColorWriteEnableFeaturesEXT"]
        [::core::mem::align_of::<VkPhysicalDeviceColorWriteEnableFeaturesEXT>() - 4usize];
    ["Offset of field: VkPhysicalDeviceColorWriteEnableFeaturesEXT::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceColorWriteEnableFeaturesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceColorWriteEnableFeaturesEXT::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceColorWriteEnableFeaturesEXT, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceColorWriteEnableFeaturesEXT::colorWriteEnable"][::core::mem::offset_of!(
        VkPhysicalDeviceColorWriteEnableFeaturesEXT,
        colorWriteEnable
    ) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineColorWriteCreateInfoEXT"]
        [::core::mem::size_of::<VkPipelineColorWriteCreateInfoEXT>() - 16usize];
    ["Alignment of VkPipelineColorWriteCreateInfoEXT"]
        [::core::mem::align_of::<VkPipelineColorWriteCreateInfoEXT>() - 4usize];
    ["Offset of field: VkPipelineColorWriteCreateInfoEXT::sType"]
        [::core::mem::offset_of!(VkPipelineColorWriteCreateInfoEXT, sType) - 0usize];
    ["Offset of field: VkPipelineColorWriteCreateInfoEXT::pNext"]
        [::core::mem::offset_of!(VkPipelineColorWriteCreateInfoEXT, pNext) - 4usize];
    ["Offset of field: VkPipelineColorWriteCreateInfoEXT::attachmentCount"]
        [::core::mem::offset_of!(VkPipelineColorWriteCreateInfoEXT, attachmentCount) - 8usize];
    ["Offset of field: VkPipelineColorWriteCreateInfoEXT::pColorWriteEnables"]
        [::core::mem::offset_of!(VkPipelineColorWriteCreateInfoEXT, pColorWriteEnables) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT"]
        [::core::mem::size_of::<VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT>() - 20usize];
    ["Alignment of VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT"]
        [::core::mem::align_of::<VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT>() - 4usize];
    ["Offset of field: VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT::sType"][::core::mem::offset_of!(
        VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT::pNext"][::core::mem::offset_of!(
        VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT,
        pNext
    ) - 4usize];
    ["Offset of field: VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT::primitivesGeneratedQuery"] [:: core :: mem :: offset_of ! (VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT , primitivesGeneratedQuery) - 8usize] ;
    ["Offset of field: VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT::primitivesGeneratedQueryWithRasterizerDiscard"] [:: core :: mem :: offset_of ! (VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT , primitivesGeneratedQueryWithRasterizerDiscard) - 12usize] ;
    ["Offset of field: VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT::primitivesGeneratedQueryWithNonZeroStreams"] [:: core :: mem :: offset_of ! (VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT , primitivesGeneratedQueryWithNonZeroStreams) - 16usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceImageViewMinLodFeaturesEXT"]
        [::core::mem::size_of::<VkPhysicalDeviceImageViewMinLodFeaturesEXT>() - 12usize];
    ["Alignment of VkPhysicalDeviceImageViewMinLodFeaturesEXT"]
        [::core::mem::align_of::<VkPhysicalDeviceImageViewMinLodFeaturesEXT>() - 4usize];
    ["Offset of field: VkPhysicalDeviceImageViewMinLodFeaturesEXT::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceImageViewMinLodFeaturesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceImageViewMinLodFeaturesEXT::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceImageViewMinLodFeaturesEXT, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceImageViewMinLodFeaturesEXT::minLod"]
        [::core::mem::offset_of!(VkPhysicalDeviceImageViewMinLodFeaturesEXT, minLod) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkImageViewMinLodCreateInfoEXT"]
        [::core::mem::size_of::<VkImageViewMinLodCreateInfoEXT>() - 12usize];
    ["Alignment of VkImageViewMinLodCreateInfoEXT"]
        [::core::mem::align_of::<VkImageViewMinLodCreateInfoEXT>() - 4usize];
    ["Offset of field: VkImageViewMinLodCreateInfoEXT::sType"]
        [::core::mem::offset_of!(VkImageViewMinLodCreateInfoEXT, sType) - 0usize];
    ["Offset of field: VkImageViewMinLodCreateInfoEXT::pNext"]
        [::core::mem::offset_of!(VkImageViewMinLodCreateInfoEXT, pNext) - 4usize];
    ["Offset of field: VkImageViewMinLodCreateInfoEXT::minLod"]
        [::core::mem::offset_of!(VkImageViewMinLodCreateInfoEXT, minLod) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceMultiDrawFeaturesEXT"]
        [::core::mem::size_of::<VkPhysicalDeviceMultiDrawFeaturesEXT>() - 12usize];
    ["Alignment of VkPhysicalDeviceMultiDrawFeaturesEXT"]
        [::core::mem::align_of::<VkPhysicalDeviceMultiDrawFeaturesEXT>() - 4usize];
    ["Offset of field: VkPhysicalDeviceMultiDrawFeaturesEXT::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceMultiDrawFeaturesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceMultiDrawFeaturesEXT::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceMultiDrawFeaturesEXT, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceMultiDrawFeaturesEXT::multiDraw"]
        [::core::mem::offset_of!(VkPhysicalDeviceMultiDrawFeaturesEXT, multiDraw) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceMultiDrawPropertiesEXT"]
        [::core::mem::size_of::<VkPhysicalDeviceMultiDrawPropertiesEXT>() - 12usize];
    ["Alignment of VkPhysicalDeviceMultiDrawPropertiesEXT"]
        [::core::mem::align_of::<VkPhysicalDeviceMultiDrawPropertiesEXT>() - 4usize];
    ["Offset of field: VkPhysicalDeviceMultiDrawPropertiesEXT::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceMultiDrawPropertiesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceMultiDrawPropertiesEXT::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceMultiDrawPropertiesEXT, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceMultiDrawPropertiesEXT::maxMultiDrawCount"][::core::mem::offset_of!(
        VkPhysicalDeviceMultiDrawPropertiesEXT,
        maxMultiDrawCount
    ) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkMultiDrawInfoEXT"][::core::mem::size_of::<VkMultiDrawInfoEXT>() - 8usize];
    ["Alignment of VkMultiDrawInfoEXT"][::core::mem::align_of::<VkMultiDrawInfoEXT>() - 4usize];
    ["Offset of field: VkMultiDrawInfoEXT::firstVertex"]
        [::core::mem::offset_of!(VkMultiDrawInfoEXT, firstVertex) - 0usize];
    ["Offset of field: VkMultiDrawInfoEXT::vertexCount"]
        [::core::mem::offset_of!(VkMultiDrawInfoEXT, vertexCount) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkMultiDrawIndexedInfoEXT"]
        [::core::mem::size_of::<VkMultiDrawIndexedInfoEXT>() - 12usize];
    ["Alignment of VkMultiDrawIndexedInfoEXT"]
        [::core::mem::align_of::<VkMultiDrawIndexedInfoEXT>() - 4usize];
    ["Offset of field: VkMultiDrawIndexedInfoEXT::firstIndex"]
        [::core::mem::offset_of!(VkMultiDrawIndexedInfoEXT, firstIndex) - 0usize];
    ["Offset of field: VkMultiDrawIndexedInfoEXT::indexCount"]
        [::core::mem::offset_of!(VkMultiDrawIndexedInfoEXT, indexCount) - 4usize];
    ["Offset of field: VkMultiDrawIndexedInfoEXT::vertexOffset"]
        [::core::mem::offset_of!(VkMultiDrawIndexedInfoEXT, vertexOffset) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceImage2DViewOf3DFeaturesEXT"]
        [::core::mem::size_of::<VkPhysicalDeviceImage2DViewOf3DFeaturesEXT>() - 16usize];
    ["Alignment of VkPhysicalDeviceImage2DViewOf3DFeaturesEXT"]
        [::core::mem::align_of::<VkPhysicalDeviceImage2DViewOf3DFeaturesEXT>() - 4usize];
    ["Offset of field: VkPhysicalDeviceImage2DViewOf3DFeaturesEXT::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceImage2DViewOf3DFeaturesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceImage2DViewOf3DFeaturesEXT::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceImage2DViewOf3DFeaturesEXT, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceImage2DViewOf3DFeaturesEXT::image2DViewOf3D"][::core::mem::offset_of!(
        VkPhysicalDeviceImage2DViewOf3DFeaturesEXT,
        image2DViewOf3D
    ) - 8usize];
    ["Offset of field: VkPhysicalDeviceImage2DViewOf3DFeaturesEXT::sampler2DViewOf3D"][::core::mem::offset_of!(
        VkPhysicalDeviceImage2DViewOf3DFeaturesEXT,
        sampler2DViewOf3D
    ) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceShaderTileImageFeaturesEXT"]
        [::core::mem::size_of::<VkPhysicalDeviceShaderTileImageFeaturesEXT>() - 20usize];
    ["Alignment of VkPhysicalDeviceShaderTileImageFeaturesEXT"]
        [::core::mem::align_of::<VkPhysicalDeviceShaderTileImageFeaturesEXT>() - 4usize];
    ["Offset of field: VkPhysicalDeviceShaderTileImageFeaturesEXT::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceShaderTileImageFeaturesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceShaderTileImageFeaturesEXT::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceShaderTileImageFeaturesEXT, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceShaderTileImageFeaturesEXT::shaderTileImageColorReadAccess"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceShaderTileImageFeaturesEXT , shaderTileImageColorReadAccess) - 8usize] ;
    ["Offset of field: VkPhysicalDeviceShaderTileImageFeaturesEXT::shaderTileImageDepthReadAccess"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceShaderTileImageFeaturesEXT , shaderTileImageDepthReadAccess) - 12usize] ;
    ["Offset of field: VkPhysicalDeviceShaderTileImageFeaturesEXT::shaderTileImageStencilReadAccess"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceShaderTileImageFeaturesEXT , shaderTileImageStencilReadAccess) - 16usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceShaderTileImagePropertiesEXT"]
        [::core::mem::size_of::<VkPhysicalDeviceShaderTileImagePropertiesEXT>() - 20usize];
    ["Alignment of VkPhysicalDeviceShaderTileImagePropertiesEXT"]
        [::core::mem::align_of::<VkPhysicalDeviceShaderTileImagePropertiesEXT>() - 4usize];
    ["Offset of field: VkPhysicalDeviceShaderTileImagePropertiesEXT::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceShaderTileImagePropertiesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceShaderTileImagePropertiesEXT::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceShaderTileImagePropertiesEXT, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceShaderTileImagePropertiesEXT::shaderTileImageCoherentReadAccelerated"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceShaderTileImagePropertiesEXT , shaderTileImageCoherentReadAccelerated) - 8usize] ;
    ["Offset of field: VkPhysicalDeviceShaderTileImagePropertiesEXT::shaderTileImageReadSampleFromPixelRateInvocation"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceShaderTileImagePropertiesEXT , shaderTileImageReadSampleFromPixelRateInvocation) - 12usize] ;
    ["Offset of field: VkPhysicalDeviceShaderTileImagePropertiesEXT::shaderTileImageReadFromHelperInvocation"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceShaderTileImagePropertiesEXT , shaderTileImageReadFromHelperInvocation) - 16usize] ;
};
pub const VkMicromapTypeEXT_VK_MICROMAP_TYPE_OPACITY_MICROMAP_EXT: VkMicromapTypeEXT = 0;
pub const VkMicromapTypeEXT_VK_MICROMAP_TYPE_MAX_ENUM_EXT: VkMicromapTypeEXT = 2147483647;
pub const VkBuildMicromapModeEXT_VK_BUILD_MICROMAP_MODE_BUILD_EXT: VkBuildMicromapModeEXT = 0;
pub const VkBuildMicromapModeEXT_VK_BUILD_MICROMAP_MODE_MAX_ENUM_EXT: VkBuildMicromapModeEXT =
    2147483647;
pub const VkCopyMicromapModeEXT_VK_COPY_MICROMAP_MODE_CLONE_EXT: VkCopyMicromapModeEXT = 0;
pub const VkCopyMicromapModeEXT_VK_COPY_MICROMAP_MODE_SERIALIZE_EXT: VkCopyMicromapModeEXT = 1;
pub const VkCopyMicromapModeEXT_VK_COPY_MICROMAP_MODE_DESERIALIZE_EXT: VkCopyMicromapModeEXT = 2;
pub const VkCopyMicromapModeEXT_VK_COPY_MICROMAP_MODE_COMPACT_EXT: VkCopyMicromapModeEXT = 3;
pub const VkCopyMicromapModeEXT_VK_COPY_MICROMAP_MODE_MAX_ENUM_EXT: VkCopyMicromapModeEXT =
    2147483647;
pub const VkOpacityMicromapFormatEXT_VK_OPACITY_MICROMAP_FORMAT_2_STATE_EXT:
    VkOpacityMicromapFormatEXT = 1;
pub const VkOpacityMicromapFormatEXT_VK_OPACITY_MICROMAP_FORMAT_4_STATE_EXT:
    VkOpacityMicromapFormatEXT = 2;
pub const VkOpacityMicromapFormatEXT_VK_OPACITY_MICROMAP_FORMAT_MAX_ENUM_EXT:
    VkOpacityMicromapFormatEXT = 2147483647;
pub const VkOpacityMicromapSpecialIndexEXT_VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_TRANSPARENT_EXT : VkOpacityMicromapSpecialIndexEXT = - 1 ;
pub const VkOpacityMicromapSpecialIndexEXT_VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_OPAQUE_EXT:
    VkOpacityMicromapSpecialIndexEXT = -2;
pub const VkOpacityMicromapSpecialIndexEXT_VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_UNKNOWN_TRANSPARENT_EXT : VkOpacityMicromapSpecialIndexEXT = - 3 ;
pub const VkOpacityMicromapSpecialIndexEXT_VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_UNKNOWN_OPAQUE_EXT : VkOpacityMicromapSpecialIndexEXT = - 4 ;
pub const VkOpacityMicromapSpecialIndexEXT_VK_OPACITY_MICROMAP_SPECIAL_INDEX_CLUSTER_GEOMETRY_DISABLE_OPACITY_MICROMAP_NV : VkOpacityMicromapSpecialIndexEXT = - 5 ;
pub const VkOpacityMicromapSpecialIndexEXT_VK_OPACITY_MICROMAP_SPECIAL_INDEX_MAX_ENUM_EXT:
    VkOpacityMicromapSpecialIndexEXT = 2147483647;
pub const VkAccelerationStructureCompatibilityKHR_VK_ACCELERATION_STRUCTURE_COMPATIBILITY_COMPATIBLE_KHR : VkAccelerationStructureCompatibilityKHR = 0 ;
pub const VkAccelerationStructureCompatibilityKHR_VK_ACCELERATION_STRUCTURE_COMPATIBILITY_INCOMPATIBLE_KHR : VkAccelerationStructureCompatibilityKHR = 1 ;
pub const VkAccelerationStructureCompatibilityKHR_VK_ACCELERATION_STRUCTURE_COMPATIBILITY_MAX_ENUM_KHR : VkAccelerationStructureCompatibilityKHR = 2147483647 ;
pub const VkAccelerationStructureBuildTypeKHR_VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_KHR:
    VkAccelerationStructureBuildTypeKHR = 0;
pub const VkAccelerationStructureBuildTypeKHR_VK_ACCELERATION_STRUCTURE_BUILD_TYPE_DEVICE_KHR:
    VkAccelerationStructureBuildTypeKHR = 1;
pub const VkAccelerationStructureBuildTypeKHR_VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_OR_DEVICE_KHR : VkAccelerationStructureBuildTypeKHR = 2 ;
pub const VkAccelerationStructureBuildTypeKHR_VK_ACCELERATION_STRUCTURE_BUILD_TYPE_MAX_ENUM_KHR:
    VkAccelerationStructureBuildTypeKHR = 2147483647;
pub const VkBuildMicromapFlagBitsEXT_VK_BUILD_MICROMAP_PREFER_FAST_TRACE_BIT_EXT:
    VkBuildMicromapFlagBitsEXT = 1;
pub const VkBuildMicromapFlagBitsEXT_VK_BUILD_MICROMAP_PREFER_FAST_BUILD_BIT_EXT:
    VkBuildMicromapFlagBitsEXT = 2;
pub const VkBuildMicromapFlagBitsEXT_VK_BUILD_MICROMAP_ALLOW_COMPACTION_BIT_EXT:
    VkBuildMicromapFlagBitsEXT = 4;
pub const VkBuildMicromapFlagBitsEXT_VK_BUILD_MICROMAP_FLAG_BITS_MAX_ENUM_EXT:
    VkBuildMicromapFlagBitsEXT = 2147483647;
pub const VkMicromapCreateFlagBitsEXT_VK_MICROMAP_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT:
    VkMicromapCreateFlagBitsEXT = 1;
pub const VkMicromapCreateFlagBitsEXT_VK_MICROMAP_CREATE_FLAG_BITS_MAX_ENUM_EXT:
    VkMicromapCreateFlagBitsEXT = 2147483647;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkMicromapUsageEXT"][::core::mem::size_of::<VkMicromapUsageEXT>() - 12usize];
    ["Alignment of VkMicromapUsageEXT"][::core::mem::align_of::<VkMicromapUsageEXT>() - 4usize];
    ["Offset of field: VkMicromapUsageEXT::count"]
        [::core::mem::offset_of!(VkMicromapUsageEXT, count) - 0usize];
    ["Offset of field: VkMicromapUsageEXT::subdivisionLevel"]
        [::core::mem::offset_of!(VkMicromapUsageEXT, subdivisionLevel) - 4usize];
    ["Offset of field: VkMicromapUsageEXT::format"]
        [::core::mem::offset_of!(VkMicromapUsageEXT, format) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDeviceOrHostAddressKHR"]
        [::core::mem::size_of::<VkDeviceOrHostAddressKHR>() - 8usize];
    ["Alignment of VkDeviceOrHostAddressKHR"]
        [::core::mem::align_of::<VkDeviceOrHostAddressKHR>() - 8usize];
    ["Offset of field: VkDeviceOrHostAddressKHR::deviceAddress"]
        [::core::mem::offset_of!(VkDeviceOrHostAddressKHR, deviceAddress) - 0usize];
    ["Offset of field: VkDeviceOrHostAddressKHR::hostAddress"]
        [::core::mem::offset_of!(VkDeviceOrHostAddressKHR, hostAddress) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkMicromapBuildInfoEXT"][::core::mem::size_of::<VkMicromapBuildInfoEXT>() - 80usize];
    ["Alignment of VkMicromapBuildInfoEXT"]
        [::core::mem::align_of::<VkMicromapBuildInfoEXT>() - 8usize];
    ["Offset of field: VkMicromapBuildInfoEXT::sType"]
        [::core::mem::offset_of!(VkMicromapBuildInfoEXT, sType) - 0usize];
    ["Offset of field: VkMicromapBuildInfoEXT::pNext"]
        [::core::mem::offset_of!(VkMicromapBuildInfoEXT, pNext) - 4usize];
    ["Offset of field: VkMicromapBuildInfoEXT::type_"]
        [::core::mem::offset_of!(VkMicromapBuildInfoEXT, type_) - 8usize];
    ["Offset of field: VkMicromapBuildInfoEXT::flags"]
        [::core::mem::offset_of!(VkMicromapBuildInfoEXT, flags) - 12usize];
    ["Offset of field: VkMicromapBuildInfoEXT::mode"]
        [::core::mem::offset_of!(VkMicromapBuildInfoEXT, mode) - 16usize];
    ["Offset of field: VkMicromapBuildInfoEXT::dstMicromap"]
        [::core::mem::offset_of!(VkMicromapBuildInfoEXT, dstMicromap) - 24usize];
    ["Offset of field: VkMicromapBuildInfoEXT::usageCountsCount"]
        [::core::mem::offset_of!(VkMicromapBuildInfoEXT, usageCountsCount) - 32usize];
    ["Offset of field: VkMicromapBuildInfoEXT::pUsageCounts"]
        [::core::mem::offset_of!(VkMicromapBuildInfoEXT, pUsageCounts) - 36usize];
    ["Offset of field: VkMicromapBuildInfoEXT::ppUsageCounts"]
        [::core::mem::offset_of!(VkMicromapBuildInfoEXT, ppUsageCounts) - 40usize];
    ["Offset of field: VkMicromapBuildInfoEXT::data"]
        [::core::mem::offset_of!(VkMicromapBuildInfoEXT, data) - 48usize];
    ["Offset of field: VkMicromapBuildInfoEXT::scratchData"]
        [::core::mem::offset_of!(VkMicromapBuildInfoEXT, scratchData) - 56usize];
    ["Offset of field: VkMicromapBuildInfoEXT::triangleArray"]
        [::core::mem::offset_of!(VkMicromapBuildInfoEXT, triangleArray) - 64usize];
    ["Offset of field: VkMicromapBuildInfoEXT::triangleArrayStride"]
        [::core::mem::offset_of!(VkMicromapBuildInfoEXT, triangleArrayStride) - 72usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkMicromapCreateInfoEXT"]
        [::core::mem::size_of::<VkMicromapCreateInfoEXT>() - 56usize];
    ["Alignment of VkMicromapCreateInfoEXT"]
        [::core::mem::align_of::<VkMicromapCreateInfoEXT>() - 8usize];
    ["Offset of field: VkMicromapCreateInfoEXT::sType"]
        [::core::mem::offset_of!(VkMicromapCreateInfoEXT, sType) - 0usize];
    ["Offset of field: VkMicromapCreateInfoEXT::pNext"]
        [::core::mem::offset_of!(VkMicromapCreateInfoEXT, pNext) - 4usize];
    ["Offset of field: VkMicromapCreateInfoEXT::createFlags"]
        [::core::mem::offset_of!(VkMicromapCreateInfoEXT, createFlags) - 8usize];
    ["Offset of field: VkMicromapCreateInfoEXT::buffer"]
        [::core::mem::offset_of!(VkMicromapCreateInfoEXT, buffer) - 16usize];
    ["Offset of field: VkMicromapCreateInfoEXT::offset"]
        [::core::mem::offset_of!(VkMicromapCreateInfoEXT, offset) - 24usize];
    ["Offset of field: VkMicromapCreateInfoEXT::size"]
        [::core::mem::offset_of!(VkMicromapCreateInfoEXT, size) - 32usize];
    ["Offset of field: VkMicromapCreateInfoEXT::type_"]
        [::core::mem::offset_of!(VkMicromapCreateInfoEXT, type_) - 40usize];
    ["Offset of field: VkMicromapCreateInfoEXT::deviceAddress"]
        [::core::mem::offset_of!(VkMicromapCreateInfoEXT, deviceAddress) - 48usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceOpacityMicromapFeaturesEXT"]
        [::core::mem::size_of::<VkPhysicalDeviceOpacityMicromapFeaturesEXT>() - 20usize];
    ["Alignment of VkPhysicalDeviceOpacityMicromapFeaturesEXT"]
        [::core::mem::align_of::<VkPhysicalDeviceOpacityMicromapFeaturesEXT>() - 4usize];
    ["Offset of field: VkPhysicalDeviceOpacityMicromapFeaturesEXT::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceOpacityMicromapFeaturesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceOpacityMicromapFeaturesEXT::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceOpacityMicromapFeaturesEXT, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceOpacityMicromapFeaturesEXT::micromap"]
        [::core::mem::offset_of!(VkPhysicalDeviceOpacityMicromapFeaturesEXT, micromap) - 8usize];
    ["Offset of field: VkPhysicalDeviceOpacityMicromapFeaturesEXT::micromapCaptureReplay"][::core::mem::offset_of!(
        VkPhysicalDeviceOpacityMicromapFeaturesEXT,
        micromapCaptureReplay
    )
        - 12usize];
    ["Offset of field: VkPhysicalDeviceOpacityMicromapFeaturesEXT::micromapHostCommands"][::core::mem::offset_of!(
        VkPhysicalDeviceOpacityMicromapFeaturesEXT,
        micromapHostCommands
    )
        - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceOpacityMicromapPropertiesEXT"]
        [::core::mem::size_of::<VkPhysicalDeviceOpacityMicromapPropertiesEXT>() - 16usize];
    ["Alignment of VkPhysicalDeviceOpacityMicromapPropertiesEXT"]
        [::core::mem::align_of::<VkPhysicalDeviceOpacityMicromapPropertiesEXT>() - 4usize];
    ["Offset of field: VkPhysicalDeviceOpacityMicromapPropertiesEXT::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceOpacityMicromapPropertiesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceOpacityMicromapPropertiesEXT::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceOpacityMicromapPropertiesEXT, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceOpacityMicromapPropertiesEXT::maxOpacity2StateSubdivisionLevel"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceOpacityMicromapPropertiesEXT , maxOpacity2StateSubdivisionLevel) - 8usize] ;
    ["Offset of field: VkPhysicalDeviceOpacityMicromapPropertiesEXT::maxOpacity4StateSubdivisionLevel"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceOpacityMicromapPropertiesEXT , maxOpacity4StateSubdivisionLevel) - 12usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkMicromapVersionInfoEXT"]
        [::core::mem::size_of::<VkMicromapVersionInfoEXT>() - 12usize];
    ["Alignment of VkMicromapVersionInfoEXT"]
        [::core::mem::align_of::<VkMicromapVersionInfoEXT>() - 4usize];
    ["Offset of field: VkMicromapVersionInfoEXT::sType"]
        [::core::mem::offset_of!(VkMicromapVersionInfoEXT, sType) - 0usize];
    ["Offset of field: VkMicromapVersionInfoEXT::pNext"]
        [::core::mem::offset_of!(VkMicromapVersionInfoEXT, pNext) - 4usize];
    ["Offset of field: VkMicromapVersionInfoEXT::pVersionData"]
        [::core::mem::offset_of!(VkMicromapVersionInfoEXT, pVersionData) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkCopyMicromapToMemoryInfoEXT"]
        [::core::mem::size_of::<VkCopyMicromapToMemoryInfoEXT>() - 32usize];
    ["Alignment of VkCopyMicromapToMemoryInfoEXT"]
        [::core::mem::align_of::<VkCopyMicromapToMemoryInfoEXT>() - 8usize];
    ["Offset of field: VkCopyMicromapToMemoryInfoEXT::sType"]
        [::core::mem::offset_of!(VkCopyMicromapToMemoryInfoEXT, sType) - 0usize];
    ["Offset of field: VkCopyMicromapToMemoryInfoEXT::pNext"]
        [::core::mem::offset_of!(VkCopyMicromapToMemoryInfoEXT, pNext) - 4usize];
    ["Offset of field: VkCopyMicromapToMemoryInfoEXT::src"]
        [::core::mem::offset_of!(VkCopyMicromapToMemoryInfoEXT, src) - 8usize];
    ["Offset of field: VkCopyMicromapToMemoryInfoEXT::dst"]
        [::core::mem::offset_of!(VkCopyMicromapToMemoryInfoEXT, dst) - 16usize];
    ["Offset of field: VkCopyMicromapToMemoryInfoEXT::mode"]
        [::core::mem::offset_of!(VkCopyMicromapToMemoryInfoEXT, mode) - 24usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkCopyMemoryToMicromapInfoEXT"]
        [::core::mem::size_of::<VkCopyMemoryToMicromapInfoEXT>() - 32usize];
    ["Alignment of VkCopyMemoryToMicromapInfoEXT"]
        [::core::mem::align_of::<VkCopyMemoryToMicromapInfoEXT>() - 8usize];
    ["Offset of field: VkCopyMemoryToMicromapInfoEXT::sType"]
        [::core::mem::offset_of!(VkCopyMemoryToMicromapInfoEXT, sType) - 0usize];
    ["Offset of field: VkCopyMemoryToMicromapInfoEXT::pNext"]
        [::core::mem::offset_of!(VkCopyMemoryToMicromapInfoEXT, pNext) - 4usize];
    ["Offset of field: VkCopyMemoryToMicromapInfoEXT::src"]
        [::core::mem::offset_of!(VkCopyMemoryToMicromapInfoEXT, src) - 8usize];
    ["Offset of field: VkCopyMemoryToMicromapInfoEXT::dst"]
        [::core::mem::offset_of!(VkCopyMemoryToMicromapInfoEXT, dst) - 16usize];
    ["Offset of field: VkCopyMemoryToMicromapInfoEXT::mode"]
        [::core::mem::offset_of!(VkCopyMemoryToMicromapInfoEXT, mode) - 24usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkCopyMicromapInfoEXT"][::core::mem::size_of::<VkCopyMicromapInfoEXT>() - 32usize];
    ["Alignment of VkCopyMicromapInfoEXT"]
        [::core::mem::align_of::<VkCopyMicromapInfoEXT>() - 8usize];
    ["Offset of field: VkCopyMicromapInfoEXT::sType"]
        [::core::mem::offset_of!(VkCopyMicromapInfoEXT, sType) - 0usize];
    ["Offset of field: VkCopyMicromapInfoEXT::pNext"]
        [::core::mem::offset_of!(VkCopyMicromapInfoEXT, pNext) - 4usize];
    ["Offset of field: VkCopyMicromapInfoEXT::src"]
        [::core::mem::offset_of!(VkCopyMicromapInfoEXT, src) - 8usize];
    ["Offset of field: VkCopyMicromapInfoEXT::dst"]
        [::core::mem::offset_of!(VkCopyMicromapInfoEXT, dst) - 16usize];
    ["Offset of field: VkCopyMicromapInfoEXT::mode"]
        [::core::mem::offset_of!(VkCopyMicromapInfoEXT, mode) - 24usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkMicromapBuildSizesInfoEXT"]
        [::core::mem::size_of::<VkMicromapBuildSizesInfoEXT>() - 32usize];
    ["Alignment of VkMicromapBuildSizesInfoEXT"]
        [::core::mem::align_of::<VkMicromapBuildSizesInfoEXT>() - 8usize];
    ["Offset of field: VkMicromapBuildSizesInfoEXT::sType"]
        [::core::mem::offset_of!(VkMicromapBuildSizesInfoEXT, sType) - 0usize];
    ["Offset of field: VkMicromapBuildSizesInfoEXT::pNext"]
        [::core::mem::offset_of!(VkMicromapBuildSizesInfoEXT, pNext) - 4usize];
    ["Offset of field: VkMicromapBuildSizesInfoEXT::micromapSize"]
        [::core::mem::offset_of!(VkMicromapBuildSizesInfoEXT, micromapSize) - 8usize];
    ["Offset of field: VkMicromapBuildSizesInfoEXT::buildScratchSize"]
        [::core::mem::offset_of!(VkMicromapBuildSizesInfoEXT, buildScratchSize) - 16usize];
    ["Offset of field: VkMicromapBuildSizesInfoEXT::discardable"]
        [::core::mem::offset_of!(VkMicromapBuildSizesInfoEXT, discardable) - 24usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkAccelerationStructureTrianglesOpacityMicromapEXT"]
        [::core::mem::size_of::<VkAccelerationStructureTrianglesOpacityMicromapEXT>() - 56usize];
    ["Alignment of VkAccelerationStructureTrianglesOpacityMicromapEXT"]
        [::core::mem::align_of::<VkAccelerationStructureTrianglesOpacityMicromapEXT>() - 8usize];
    ["Offset of field: VkAccelerationStructureTrianglesOpacityMicromapEXT::sType"][::core::mem::offset_of!(
        VkAccelerationStructureTrianglesOpacityMicromapEXT,
        sType
    ) - 0usize];
    ["Offset of field: VkAccelerationStructureTrianglesOpacityMicromapEXT::pNext"][::core::mem::offset_of!(
        VkAccelerationStructureTrianglesOpacityMicromapEXT,
        pNext
    ) - 4usize];
    ["Offset of field: VkAccelerationStructureTrianglesOpacityMicromapEXT::indexType"][::core::mem::offset_of!(
        VkAccelerationStructureTrianglesOpacityMicromapEXT,
        indexType
    ) - 8usize];
    ["Offset of field: VkAccelerationStructureTrianglesOpacityMicromapEXT::indexBuffer"][::core::mem::offset_of!(
        VkAccelerationStructureTrianglesOpacityMicromapEXT,
        indexBuffer
    )
        - 16usize];
    ["Offset of field: VkAccelerationStructureTrianglesOpacityMicromapEXT::indexStride"][::core::mem::offset_of!(
        VkAccelerationStructureTrianglesOpacityMicromapEXT,
        indexStride
    )
        - 24usize];
    ["Offset of field: VkAccelerationStructureTrianglesOpacityMicromapEXT::baseTriangle"][::core::mem::offset_of!(
        VkAccelerationStructureTrianglesOpacityMicromapEXT,
        baseTriangle
    )
        - 32usize];
    ["Offset of field: VkAccelerationStructureTrianglesOpacityMicromapEXT::usageCountsCount"][::core::mem::offset_of!(
        VkAccelerationStructureTrianglesOpacityMicromapEXT,
        usageCountsCount
    )
        - 36usize];
    ["Offset of field: VkAccelerationStructureTrianglesOpacityMicromapEXT::pUsageCounts"][::core::mem::offset_of!(
        VkAccelerationStructureTrianglesOpacityMicromapEXT,
        pUsageCounts
    )
        - 40usize];
    ["Offset of field: VkAccelerationStructureTrianglesOpacityMicromapEXT::ppUsageCounts"][::core::mem::offset_of!(
        VkAccelerationStructureTrianglesOpacityMicromapEXT,
        ppUsageCounts
    )
        - 44usize];
    ["Offset of field: VkAccelerationStructureTrianglesOpacityMicromapEXT::micromap"][::core::mem::offset_of!(
        VkAccelerationStructureTrianglesOpacityMicromapEXT,
        micromap
    ) - 48usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkMicromapTriangleEXT"][::core::mem::size_of::<VkMicromapTriangleEXT>() - 8usize];
    ["Alignment of VkMicromapTriangleEXT"]
        [::core::mem::align_of::<VkMicromapTriangleEXT>() - 4usize];
    ["Offset of field: VkMicromapTriangleEXT::dataOffset"]
        [::core::mem::offset_of!(VkMicromapTriangleEXT, dataOffset) - 0usize];
    ["Offset of field: VkMicromapTriangleEXT::subdivisionLevel"]
        [::core::mem::offset_of!(VkMicromapTriangleEXT, subdivisionLevel) - 4usize];
    ["Offset of field: VkMicromapTriangleEXT::format"]
        [::core::mem::offset_of!(VkMicromapTriangleEXT, format) - 6usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI"]
        [::core::mem::size_of::<VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI>() - 16usize];
    ["Alignment of VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI"]
        [::core::mem::align_of::<VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI>() - 4usize];
    ["Offset of field: VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI::sType"][::core::mem::offset_of!(
        VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI::pNext"][::core::mem::offset_of!(
        VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI,
        pNext
    ) - 4usize];
    ["Offset of field: VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI::clustercullingShader"][::core::mem::offset_of!(
        VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI,
        clustercullingShader
    )
        - 8usize];
    ["Offset of field: VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI::multiviewClusterCullingShader"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI , multiviewClusterCullingShader) - 12usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI"]
        [::core::mem::size_of::<VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI>() - 48usize];
    ["Alignment of VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI"]
        [::core::mem::align_of::<VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI>() - 8usize];
    ["Offset of field: VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI::sType"][::core::mem::offset_of!(
        VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI::pNext"][::core::mem::offset_of!(
        VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI,
        pNext
    ) - 4usize];
    ["Offset of field: VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI::maxWorkGroupCount"][::core::mem::offset_of!(
        VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI,
        maxWorkGroupCount
    )
        - 8usize];
    ["Offset of field: VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI::maxWorkGroupSize"][::core::mem::offset_of!(
        VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI,
        maxWorkGroupSize
    )
        - 20usize];
    ["Offset of field: VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI::maxOutputClusterCount"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI , maxOutputClusterCount) - 32usize] ;
    ["Offset of field: VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI::indirectBufferOffsetAlignment"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI , indirectBufferOffsetAlignment) - 40usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI"]
        [::core::mem::size_of::<VkPhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI>() - 12usize];
    ["Alignment of VkPhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI"]
        [::core::mem::align_of::<VkPhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI>() - 4usize];
    ["Offset of field: VkPhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI::sType"][::core::mem::offset_of!(
        VkPhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI::pNext"][::core::mem::offset_of!(
        VkPhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI,
        pNext
    ) - 4usize];
    ["Offset of field: VkPhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI::clusterShadingRate"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI , clusterShadingRate) - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceBorderColorSwizzleFeaturesEXT"]
        [::core::mem::size_of::<VkPhysicalDeviceBorderColorSwizzleFeaturesEXT>() - 16usize];
    ["Alignment of VkPhysicalDeviceBorderColorSwizzleFeaturesEXT"]
        [::core::mem::align_of::<VkPhysicalDeviceBorderColorSwizzleFeaturesEXT>() - 4usize];
    ["Offset of field: VkPhysicalDeviceBorderColorSwizzleFeaturesEXT::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceBorderColorSwizzleFeaturesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceBorderColorSwizzleFeaturesEXT::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceBorderColorSwizzleFeaturesEXT, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceBorderColorSwizzleFeaturesEXT::borderColorSwizzle"][::core::mem::offset_of!(
        VkPhysicalDeviceBorderColorSwizzleFeaturesEXT,
        borderColorSwizzle
    )
        - 8usize];
    ["Offset of field: VkPhysicalDeviceBorderColorSwizzleFeaturesEXT::borderColorSwizzleFromImage"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceBorderColorSwizzleFeaturesEXT , borderColorSwizzleFromImage) - 12usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSamplerBorderColorComponentMappingCreateInfoEXT"]
        [::core::mem::size_of::<VkSamplerBorderColorComponentMappingCreateInfoEXT>() - 28usize];
    ["Alignment of VkSamplerBorderColorComponentMappingCreateInfoEXT"]
        [::core::mem::align_of::<VkSamplerBorderColorComponentMappingCreateInfoEXT>() - 4usize];
    ["Offset of field: VkSamplerBorderColorComponentMappingCreateInfoEXT::sType"][::core::mem::offset_of!(
        VkSamplerBorderColorComponentMappingCreateInfoEXT,
        sType
    ) - 0usize];
    ["Offset of field: VkSamplerBorderColorComponentMappingCreateInfoEXT::pNext"][::core::mem::offset_of!(
        VkSamplerBorderColorComponentMappingCreateInfoEXT,
        pNext
    ) - 4usize];
    ["Offset of field: VkSamplerBorderColorComponentMappingCreateInfoEXT::components"][::core::mem::offset_of!(
        VkSamplerBorderColorComponentMappingCreateInfoEXT,
        components
    ) - 8usize];
    ["Offset of field: VkSamplerBorderColorComponentMappingCreateInfoEXT::srgb"][::core::mem::offset_of!(
        VkSamplerBorderColorComponentMappingCreateInfoEXT,
        srgb
    ) - 24usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT"]
        [::core::mem::size_of::<VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT>() - 12usize];
    ["Alignment of VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT"]
        [::core::mem::align_of::<VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT>() - 4usize];
    ["Offset of field: VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT::sType"][::core::mem::offset_of!(
        VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT::pNext"][::core::mem::offset_of!(
        VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT,
        pNext
    ) - 4usize];
    ["Offset of field: VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT::pageableDeviceLocalMemory"] [:: core :: mem :: offset_of ! (VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT , pageableDeviceLocalMemory) - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceShaderCorePropertiesARM"]
        [::core::mem::size_of::<VkPhysicalDeviceShaderCorePropertiesARM>() - 20usize];
    ["Alignment of VkPhysicalDeviceShaderCorePropertiesARM"]
        [::core::mem::align_of::<VkPhysicalDeviceShaderCorePropertiesARM>() - 4usize];
    ["Offset of field: VkPhysicalDeviceShaderCorePropertiesARM::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceShaderCorePropertiesARM, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceShaderCorePropertiesARM::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceShaderCorePropertiesARM, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceShaderCorePropertiesARM::pixelRate"]
        [::core::mem::offset_of!(VkPhysicalDeviceShaderCorePropertiesARM, pixelRate) - 8usize];
    ["Offset of field: VkPhysicalDeviceShaderCorePropertiesARM::texelRate"]
        [::core::mem::offset_of!(VkPhysicalDeviceShaderCorePropertiesARM, texelRate) - 12usize];
    ["Offset of field: VkPhysicalDeviceShaderCorePropertiesARM::fmaRate"]
        [::core::mem::offset_of!(VkPhysicalDeviceShaderCorePropertiesARM, fmaRate) - 16usize];
};
pub const VK_PHYSICAL_DEVICE_SCHEDULING_CONTROLS_SHADER_CORE_COUNT_ARM:
    VkPhysicalDeviceSchedulingControlsFlagBitsARM = 1;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDeviceQueueShaderCoreControlCreateInfoARM"]
        [::core::mem::size_of::<VkDeviceQueueShaderCoreControlCreateInfoARM>() - 12usize];
    ["Alignment of VkDeviceQueueShaderCoreControlCreateInfoARM"]
        [::core::mem::align_of::<VkDeviceQueueShaderCoreControlCreateInfoARM>() - 4usize];
    ["Offset of field: VkDeviceQueueShaderCoreControlCreateInfoARM::sType"]
        [::core::mem::offset_of!(VkDeviceQueueShaderCoreControlCreateInfoARM, sType) - 0usize];
    ["Offset of field: VkDeviceQueueShaderCoreControlCreateInfoARM::pNext"]
        [::core::mem::offset_of!(VkDeviceQueueShaderCoreControlCreateInfoARM, pNext) - 4usize];
    ["Offset of field: VkDeviceQueueShaderCoreControlCreateInfoARM::shaderCoreCount"][::core::mem::offset_of!(
        VkDeviceQueueShaderCoreControlCreateInfoARM,
        shaderCoreCount
    ) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceSchedulingControlsFeaturesARM"]
        [::core::mem::size_of::<VkPhysicalDeviceSchedulingControlsFeaturesARM>() - 12usize];
    ["Alignment of VkPhysicalDeviceSchedulingControlsFeaturesARM"]
        [::core::mem::align_of::<VkPhysicalDeviceSchedulingControlsFeaturesARM>() - 4usize];
    ["Offset of field: VkPhysicalDeviceSchedulingControlsFeaturesARM::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceSchedulingControlsFeaturesARM, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceSchedulingControlsFeaturesARM::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceSchedulingControlsFeaturesARM, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceSchedulingControlsFeaturesARM::schedulingControls"][::core::mem::offset_of!(
        VkPhysicalDeviceSchedulingControlsFeaturesARM,
        schedulingControls
    )
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceSchedulingControlsPropertiesARM"]
        [::core::mem::size_of::<VkPhysicalDeviceSchedulingControlsPropertiesARM>() - 16usize];
    ["Alignment of VkPhysicalDeviceSchedulingControlsPropertiesARM"]
        [::core::mem::align_of::<VkPhysicalDeviceSchedulingControlsPropertiesARM>() - 8usize];
    ["Offset of field: VkPhysicalDeviceSchedulingControlsPropertiesARM::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceSchedulingControlsPropertiesARM, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceSchedulingControlsPropertiesARM::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceSchedulingControlsPropertiesARM, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceSchedulingControlsPropertiesARM::schedulingControlsFlags"][::core::mem::offset_of!(
        VkPhysicalDeviceSchedulingControlsPropertiesARM,
        schedulingControlsFlags
    )
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT"]
        [::core::mem::size_of::<VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT>() - 12usize];
    ["Alignment of VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT"]
        [::core::mem::align_of::<VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT>() - 4usize];
    ["Offset of field: VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT::imageSlicedViewOf3D"][::core::mem::offset_of!(
        VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT,
        imageSlicedViewOf3D
    )
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkImageViewSlicedCreateInfoEXT"]
        [::core::mem::size_of::<VkImageViewSlicedCreateInfoEXT>() - 16usize];
    ["Alignment of VkImageViewSlicedCreateInfoEXT"]
        [::core::mem::align_of::<VkImageViewSlicedCreateInfoEXT>() - 4usize];
    ["Offset of field: VkImageViewSlicedCreateInfoEXT::sType"]
        [::core::mem::offset_of!(VkImageViewSlicedCreateInfoEXT, sType) - 0usize];
    ["Offset of field: VkImageViewSlicedCreateInfoEXT::pNext"]
        [::core::mem::offset_of!(VkImageViewSlicedCreateInfoEXT, pNext) - 4usize];
    ["Offset of field: VkImageViewSlicedCreateInfoEXT::sliceOffset"]
        [::core::mem::offset_of!(VkImageViewSlicedCreateInfoEXT, sliceOffset) - 8usize];
    ["Offset of field: VkImageViewSlicedCreateInfoEXT::sliceCount"]
        [::core::mem::offset_of!(VkImageViewSlicedCreateInfoEXT, sliceCount) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE"]
        [::core::mem::size_of::<VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE>() - 12usize];
    ["Alignment of VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE"]
        [::core::mem::align_of::<VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE>() - 4usize];
    ["Offset of field: VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE::sType"][::core::mem::offset_of!(
        VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE::pNext"][::core::mem::offset_of!(
        VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE,
        pNext
    ) - 4usize];
    ["Offset of field: VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE::descriptorSetHostMapping"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE , descriptorSetHostMapping) - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDescriptorSetBindingReferenceVALVE"]
        [::core::mem::size_of::<VkDescriptorSetBindingReferenceVALVE>() - 24usize];
    ["Alignment of VkDescriptorSetBindingReferenceVALVE"]
        [::core::mem::align_of::<VkDescriptorSetBindingReferenceVALVE>() - 8usize];
    ["Offset of field: VkDescriptorSetBindingReferenceVALVE::sType"]
        [::core::mem::offset_of!(VkDescriptorSetBindingReferenceVALVE, sType) - 0usize];
    ["Offset of field: VkDescriptorSetBindingReferenceVALVE::pNext"]
        [::core::mem::offset_of!(VkDescriptorSetBindingReferenceVALVE, pNext) - 4usize];
    ["Offset of field: VkDescriptorSetBindingReferenceVALVE::descriptorSetLayout"][::core::mem::offset_of!(
        VkDescriptorSetBindingReferenceVALVE,
        descriptorSetLayout
    ) - 8usize];
    ["Offset of field: VkDescriptorSetBindingReferenceVALVE::binding"]
        [::core::mem::offset_of!(VkDescriptorSetBindingReferenceVALVE, binding) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDescriptorSetLayoutHostMappingInfoVALVE"]
        [::core::mem::size_of::<VkDescriptorSetLayoutHostMappingInfoVALVE>() - 16usize];
    ["Alignment of VkDescriptorSetLayoutHostMappingInfoVALVE"]
        [::core::mem::align_of::<VkDescriptorSetLayoutHostMappingInfoVALVE>() - 4usize];
    ["Offset of field: VkDescriptorSetLayoutHostMappingInfoVALVE::sType"]
        [::core::mem::offset_of!(VkDescriptorSetLayoutHostMappingInfoVALVE, sType) - 0usize];
    ["Offset of field: VkDescriptorSetLayoutHostMappingInfoVALVE::pNext"]
        [::core::mem::offset_of!(VkDescriptorSetLayoutHostMappingInfoVALVE, pNext) - 4usize];
    ["Offset of field: VkDescriptorSetLayoutHostMappingInfoVALVE::descriptorOffset"][::core::mem::offset_of!(
        VkDescriptorSetLayoutHostMappingInfoVALVE,
        descriptorOffset
    ) - 8usize];
    ["Offset of field: VkDescriptorSetLayoutHostMappingInfoVALVE::descriptorSize"][::core::mem::offset_of!(
        VkDescriptorSetLayoutHostMappingInfoVALVE,
        descriptorSize
    ) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT"]
        [::core::mem::size_of::<VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT>() - 12usize];
    ["Alignment of VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT"]
        [::core::mem::align_of::<VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT>() - 4usize];
    ["Offset of field: VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT::nonSeamlessCubeMap"][::core::mem::offset_of!(
        VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT,
        nonSeamlessCubeMap
    )
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceRenderPassStripedFeaturesARM"]
        [::core::mem::size_of::<VkPhysicalDeviceRenderPassStripedFeaturesARM>() - 12usize];
    ["Alignment of VkPhysicalDeviceRenderPassStripedFeaturesARM"]
        [::core::mem::align_of::<VkPhysicalDeviceRenderPassStripedFeaturesARM>() - 4usize];
    ["Offset of field: VkPhysicalDeviceRenderPassStripedFeaturesARM::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceRenderPassStripedFeaturesARM, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceRenderPassStripedFeaturesARM::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceRenderPassStripedFeaturesARM, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceRenderPassStripedFeaturesARM::renderPassStriped"][::core::mem::offset_of!(
        VkPhysicalDeviceRenderPassStripedFeaturesARM,
        renderPassStriped
    )
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceRenderPassStripedPropertiesARM"]
        [::core::mem::size_of::<VkPhysicalDeviceRenderPassStripedPropertiesARM>() - 20usize];
    ["Alignment of VkPhysicalDeviceRenderPassStripedPropertiesARM"]
        [::core::mem::align_of::<VkPhysicalDeviceRenderPassStripedPropertiesARM>() - 4usize];
    ["Offset of field: VkPhysicalDeviceRenderPassStripedPropertiesARM::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceRenderPassStripedPropertiesARM, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceRenderPassStripedPropertiesARM::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceRenderPassStripedPropertiesARM, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceRenderPassStripedPropertiesARM::renderPassStripeGranularity"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceRenderPassStripedPropertiesARM , renderPassStripeGranularity) - 8usize] ;
    ["Offset of field: VkPhysicalDeviceRenderPassStripedPropertiesARM::maxRenderPassStripes"][::core::mem::offset_of!(
        VkPhysicalDeviceRenderPassStripedPropertiesARM,
        maxRenderPassStripes
    )
        - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkRenderPassStripeInfoARM"]
        [::core::mem::size_of::<VkRenderPassStripeInfoARM>() - 24usize];
    ["Alignment of VkRenderPassStripeInfoARM"]
        [::core::mem::align_of::<VkRenderPassStripeInfoARM>() - 4usize];
    ["Offset of field: VkRenderPassStripeInfoARM::sType"]
        [::core::mem::offset_of!(VkRenderPassStripeInfoARM, sType) - 0usize];
    ["Offset of field: VkRenderPassStripeInfoARM::pNext"]
        [::core::mem::offset_of!(VkRenderPassStripeInfoARM, pNext) - 4usize];
    ["Offset of field: VkRenderPassStripeInfoARM::stripeArea"]
        [::core::mem::offset_of!(VkRenderPassStripeInfoARM, stripeArea) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkRenderPassStripeBeginInfoARM"]
        [::core::mem::size_of::<VkRenderPassStripeBeginInfoARM>() - 16usize];
    ["Alignment of VkRenderPassStripeBeginInfoARM"]
        [::core::mem::align_of::<VkRenderPassStripeBeginInfoARM>() - 4usize];
    ["Offset of field: VkRenderPassStripeBeginInfoARM::sType"]
        [::core::mem::offset_of!(VkRenderPassStripeBeginInfoARM, sType) - 0usize];
    ["Offset of field: VkRenderPassStripeBeginInfoARM::pNext"]
        [::core::mem::offset_of!(VkRenderPassStripeBeginInfoARM, pNext) - 4usize];
    ["Offset of field: VkRenderPassStripeBeginInfoARM::stripeInfoCount"]
        [::core::mem::offset_of!(VkRenderPassStripeBeginInfoARM, stripeInfoCount) - 8usize];
    ["Offset of field: VkRenderPassStripeBeginInfoARM::pStripeInfos"]
        [::core::mem::offset_of!(VkRenderPassStripeBeginInfoARM, pStripeInfos) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkRenderPassStripeSubmitInfoARM"]
        [::core::mem::size_of::<VkRenderPassStripeSubmitInfoARM>() - 16usize];
    ["Alignment of VkRenderPassStripeSubmitInfoARM"]
        [::core::mem::align_of::<VkRenderPassStripeSubmitInfoARM>() - 4usize];
    ["Offset of field: VkRenderPassStripeSubmitInfoARM::sType"]
        [::core::mem::offset_of!(VkRenderPassStripeSubmitInfoARM, sType) - 0usize];
    ["Offset of field: VkRenderPassStripeSubmitInfoARM::pNext"]
        [::core::mem::offset_of!(VkRenderPassStripeSubmitInfoARM, pNext) - 4usize];
    ["Offset of field: VkRenderPassStripeSubmitInfoARM::stripeSemaphoreInfoCount"][::core::mem::offset_of!(
        VkRenderPassStripeSubmitInfoARM,
        stripeSemaphoreInfoCount
    ) - 8usize];
    ["Offset of field: VkRenderPassStripeSubmitInfoARM::pStripeSemaphoreInfos"]
        [::core::mem::offset_of!(VkRenderPassStripeSubmitInfoARM, pStripeSemaphoreInfos) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceFragmentDensityMapOffsetFeaturesEXT"]
        [::core::mem::size_of::<VkPhysicalDeviceFragmentDensityMapOffsetFeaturesEXT>() - 12usize];
    ["Alignment of VkPhysicalDeviceFragmentDensityMapOffsetFeaturesEXT"]
        [::core::mem::align_of::<VkPhysicalDeviceFragmentDensityMapOffsetFeaturesEXT>() - 4usize];
    ["Offset of field: VkPhysicalDeviceFragmentDensityMapOffsetFeaturesEXT::sType"][::core::mem::offset_of!(
        VkPhysicalDeviceFragmentDensityMapOffsetFeaturesEXT,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceFragmentDensityMapOffsetFeaturesEXT::pNext"][::core::mem::offset_of!(
        VkPhysicalDeviceFragmentDensityMapOffsetFeaturesEXT,
        pNext
    ) - 4usize];
    ["Offset of field: VkPhysicalDeviceFragmentDensityMapOffsetFeaturesEXT::fragmentDensityMapOffset"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceFragmentDensityMapOffsetFeaturesEXT , fragmentDensityMapOffset) - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceFragmentDensityMapOffsetPropertiesEXT"]
        [::core::mem::size_of::<VkPhysicalDeviceFragmentDensityMapOffsetPropertiesEXT>() - 16usize];
    ["Alignment of VkPhysicalDeviceFragmentDensityMapOffsetPropertiesEXT"]
        [::core::mem::align_of::<VkPhysicalDeviceFragmentDensityMapOffsetPropertiesEXT>() - 4usize];
    ["Offset of field: VkPhysicalDeviceFragmentDensityMapOffsetPropertiesEXT::sType"][::core::mem::offset_of!(
        VkPhysicalDeviceFragmentDensityMapOffsetPropertiesEXT,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceFragmentDensityMapOffsetPropertiesEXT::pNext"][::core::mem::offset_of!(
        VkPhysicalDeviceFragmentDensityMapOffsetPropertiesEXT,
        pNext
    ) - 4usize];
    ["Offset of field: VkPhysicalDeviceFragmentDensityMapOffsetPropertiesEXT::fragmentDensityOffsetGranularity"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceFragmentDensityMapOffsetPropertiesEXT , fragmentDensityOffsetGranularity) - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkRenderPassFragmentDensityMapOffsetEndInfoEXT"]
        [::core::mem::size_of::<VkRenderPassFragmentDensityMapOffsetEndInfoEXT>() - 16usize];
    ["Alignment of VkRenderPassFragmentDensityMapOffsetEndInfoEXT"]
        [::core::mem::align_of::<VkRenderPassFragmentDensityMapOffsetEndInfoEXT>() - 4usize];
    ["Offset of field: VkRenderPassFragmentDensityMapOffsetEndInfoEXT::sType"]
        [::core::mem::offset_of!(VkRenderPassFragmentDensityMapOffsetEndInfoEXT, sType) - 0usize];
    ["Offset of field: VkRenderPassFragmentDensityMapOffsetEndInfoEXT::pNext"]
        [::core::mem::offset_of!(VkRenderPassFragmentDensityMapOffsetEndInfoEXT, pNext) - 4usize];
    ["Offset of field: VkRenderPassFragmentDensityMapOffsetEndInfoEXT::fragmentDensityOffsetCount"] [:: core :: mem :: offset_of ! (VkRenderPassFragmentDensityMapOffsetEndInfoEXT , fragmentDensityOffsetCount) - 8usize] ;
    ["Offset of field: VkRenderPassFragmentDensityMapOffsetEndInfoEXT::pFragmentDensityOffsets"][::core::mem::offset_of!(
        VkRenderPassFragmentDensityMapOffsetEndInfoEXT,
        pFragmentDensityOffsets
    )
        - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkCopyMemoryIndirectCommandNV"]
        [::core::mem::size_of::<VkCopyMemoryIndirectCommandNV>() - 24usize];
    ["Alignment of VkCopyMemoryIndirectCommandNV"]
        [::core::mem::align_of::<VkCopyMemoryIndirectCommandNV>() - 8usize];
    ["Offset of field: VkCopyMemoryIndirectCommandNV::srcAddress"]
        [::core::mem::offset_of!(VkCopyMemoryIndirectCommandNV, srcAddress) - 0usize];
    ["Offset of field: VkCopyMemoryIndirectCommandNV::dstAddress"]
        [::core::mem::offset_of!(VkCopyMemoryIndirectCommandNV, dstAddress) - 8usize];
    ["Offset of field: VkCopyMemoryIndirectCommandNV::size"]
        [::core::mem::offset_of!(VkCopyMemoryIndirectCommandNV, size) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkCopyMemoryToImageIndirectCommandNV"]
        [::core::mem::size_of::<VkCopyMemoryToImageIndirectCommandNV>() - 56usize];
    ["Alignment of VkCopyMemoryToImageIndirectCommandNV"]
        [::core::mem::align_of::<VkCopyMemoryToImageIndirectCommandNV>() - 8usize];
    ["Offset of field: VkCopyMemoryToImageIndirectCommandNV::srcAddress"]
        [::core::mem::offset_of!(VkCopyMemoryToImageIndirectCommandNV, srcAddress) - 0usize];
    ["Offset of field: VkCopyMemoryToImageIndirectCommandNV::bufferRowLength"]
        [::core::mem::offset_of!(VkCopyMemoryToImageIndirectCommandNV, bufferRowLength) - 8usize];
    ["Offset of field: VkCopyMemoryToImageIndirectCommandNV::bufferImageHeight"][::core::mem::offset_of!(
        VkCopyMemoryToImageIndirectCommandNV,
        bufferImageHeight
    ) - 12usize];
    ["Offset of field: VkCopyMemoryToImageIndirectCommandNV::imageSubresource"]
        [::core::mem::offset_of!(VkCopyMemoryToImageIndirectCommandNV, imageSubresource) - 16usize];
    ["Offset of field: VkCopyMemoryToImageIndirectCommandNV::imageOffset"]
        [::core::mem::offset_of!(VkCopyMemoryToImageIndirectCommandNV, imageOffset) - 32usize];
    ["Offset of field: VkCopyMemoryToImageIndirectCommandNV::imageExtent"]
        [::core::mem::offset_of!(VkCopyMemoryToImageIndirectCommandNV, imageExtent) - 44usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceCopyMemoryIndirectFeaturesNV"]
        [::core::mem::size_of::<VkPhysicalDeviceCopyMemoryIndirectFeaturesNV>() - 12usize];
    ["Alignment of VkPhysicalDeviceCopyMemoryIndirectFeaturesNV"]
        [::core::mem::align_of::<VkPhysicalDeviceCopyMemoryIndirectFeaturesNV>() - 4usize];
    ["Offset of field: VkPhysicalDeviceCopyMemoryIndirectFeaturesNV::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceCopyMemoryIndirectFeaturesNV, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceCopyMemoryIndirectFeaturesNV::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceCopyMemoryIndirectFeaturesNV, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceCopyMemoryIndirectFeaturesNV::indirectCopy"][::core::mem::offset_of!(
        VkPhysicalDeviceCopyMemoryIndirectFeaturesNV,
        indirectCopy
    ) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceCopyMemoryIndirectPropertiesNV"]
        [::core::mem::size_of::<VkPhysicalDeviceCopyMemoryIndirectPropertiesNV>() - 12usize];
    ["Alignment of VkPhysicalDeviceCopyMemoryIndirectPropertiesNV"]
        [::core::mem::align_of::<VkPhysicalDeviceCopyMemoryIndirectPropertiesNV>() - 4usize];
    ["Offset of field: VkPhysicalDeviceCopyMemoryIndirectPropertiesNV::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceCopyMemoryIndirectPropertiesNV, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceCopyMemoryIndirectPropertiesNV::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceCopyMemoryIndirectPropertiesNV, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceCopyMemoryIndirectPropertiesNV::supportedQueues"][::core::mem::offset_of!(
        VkPhysicalDeviceCopyMemoryIndirectPropertiesNV,
        supportedQueues
    )
        - 8usize];
};
pub const VK_MEMORY_DECOMPRESSION_METHOD_GDEFLATE_1_0_BIT_NV:
    VkMemoryDecompressionMethodFlagBitsNV = 1;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDecompressMemoryRegionNV"]
        [::core::mem::size_of::<VkDecompressMemoryRegionNV>() - 40usize];
    ["Alignment of VkDecompressMemoryRegionNV"]
        [::core::mem::align_of::<VkDecompressMemoryRegionNV>() - 8usize];
    ["Offset of field: VkDecompressMemoryRegionNV::srcAddress"]
        [::core::mem::offset_of!(VkDecompressMemoryRegionNV, srcAddress) - 0usize];
    ["Offset of field: VkDecompressMemoryRegionNV::dstAddress"]
        [::core::mem::offset_of!(VkDecompressMemoryRegionNV, dstAddress) - 8usize];
    ["Offset of field: VkDecompressMemoryRegionNV::compressedSize"]
        [::core::mem::offset_of!(VkDecompressMemoryRegionNV, compressedSize) - 16usize];
    ["Offset of field: VkDecompressMemoryRegionNV::decompressedSize"]
        [::core::mem::offset_of!(VkDecompressMemoryRegionNV, decompressedSize) - 24usize];
    ["Offset of field: VkDecompressMemoryRegionNV::decompressionMethod"]
        [::core::mem::offset_of!(VkDecompressMemoryRegionNV, decompressionMethod) - 32usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceMemoryDecompressionFeaturesNV"]
        [::core::mem::size_of::<VkPhysicalDeviceMemoryDecompressionFeaturesNV>() - 12usize];
    ["Alignment of VkPhysicalDeviceMemoryDecompressionFeaturesNV"]
        [::core::mem::align_of::<VkPhysicalDeviceMemoryDecompressionFeaturesNV>() - 4usize];
    ["Offset of field: VkPhysicalDeviceMemoryDecompressionFeaturesNV::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceMemoryDecompressionFeaturesNV, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceMemoryDecompressionFeaturesNV::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceMemoryDecompressionFeaturesNV, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceMemoryDecompressionFeaturesNV::memoryDecompression"][::core::mem::offset_of!(
        VkPhysicalDeviceMemoryDecompressionFeaturesNV,
        memoryDecompression
    )
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceMemoryDecompressionPropertiesNV"]
        [::core::mem::size_of::<VkPhysicalDeviceMemoryDecompressionPropertiesNV>() - 24usize];
    ["Alignment of VkPhysicalDeviceMemoryDecompressionPropertiesNV"]
        [::core::mem::align_of::<VkPhysicalDeviceMemoryDecompressionPropertiesNV>() - 8usize];
    ["Offset of field: VkPhysicalDeviceMemoryDecompressionPropertiesNV::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceMemoryDecompressionPropertiesNV, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceMemoryDecompressionPropertiesNV::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceMemoryDecompressionPropertiesNV, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceMemoryDecompressionPropertiesNV::decompressionMethods"][::core::mem::offset_of!(
        VkPhysicalDeviceMemoryDecompressionPropertiesNV,
        decompressionMethods
    )
        - 8usize];
    ["Offset of field: VkPhysicalDeviceMemoryDecompressionPropertiesNV::maxDecompressionIndirectCount"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceMemoryDecompressionPropertiesNV , maxDecompressionIndirectCount) - 16usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV"][::core::mem::size_of::<
        VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV,
    >() - 20usize];
    ["Alignment of VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV"][::core::mem::align_of::<
        VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV,
    >() - 4usize];
    ["Offset of field: VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV::sType"][::core::mem::offset_of!(
        VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV,
        sType
    )
        - 0usize];
    ["Offset of field: VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV::pNext"][::core::mem::offset_of!(
        VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV,
        pNext
    )
        - 4usize];
    ["Offset of field: VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV::deviceGeneratedCompute"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV , deviceGeneratedCompute) - 8usize] ;
    ["Offset of field: VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV::deviceGeneratedComputePipelines"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV , deviceGeneratedComputePipelines) - 12usize] ;
    ["Offset of field: VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV::deviceGeneratedComputeCaptureReplay"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV , deviceGeneratedComputeCaptureReplay) - 16usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkComputePipelineIndirectBufferInfoNV"]
        [::core::mem::size_of::<VkComputePipelineIndirectBufferInfoNV>() - 32usize];
    ["Alignment of VkComputePipelineIndirectBufferInfoNV"]
        [::core::mem::align_of::<VkComputePipelineIndirectBufferInfoNV>() - 8usize];
    ["Offset of field: VkComputePipelineIndirectBufferInfoNV::sType"]
        [::core::mem::offset_of!(VkComputePipelineIndirectBufferInfoNV, sType) - 0usize];
    ["Offset of field: VkComputePipelineIndirectBufferInfoNV::pNext"]
        [::core::mem::offset_of!(VkComputePipelineIndirectBufferInfoNV, pNext) - 4usize];
    ["Offset of field: VkComputePipelineIndirectBufferInfoNV::deviceAddress"]
        [::core::mem::offset_of!(VkComputePipelineIndirectBufferInfoNV, deviceAddress) - 8usize];
    ["Offset of field: VkComputePipelineIndirectBufferInfoNV::size"]
        [::core::mem::offset_of!(VkComputePipelineIndirectBufferInfoNV, size) - 16usize];
    ["Offset of field: VkComputePipelineIndirectBufferInfoNV::pipelineDeviceAddressCaptureReplay"] [:: core :: mem :: offset_of ! (VkComputePipelineIndirectBufferInfoNV , pipelineDeviceAddressCaptureReplay) - 24usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineIndirectDeviceAddressInfoNV"]
        [::core::mem::size_of::<VkPipelineIndirectDeviceAddressInfoNV>() - 24usize];
    ["Alignment of VkPipelineIndirectDeviceAddressInfoNV"]
        [::core::mem::align_of::<VkPipelineIndirectDeviceAddressInfoNV>() - 8usize];
    ["Offset of field: VkPipelineIndirectDeviceAddressInfoNV::sType"]
        [::core::mem::offset_of!(VkPipelineIndirectDeviceAddressInfoNV, sType) - 0usize];
    ["Offset of field: VkPipelineIndirectDeviceAddressInfoNV::pNext"]
        [::core::mem::offset_of!(VkPipelineIndirectDeviceAddressInfoNV, pNext) - 4usize];
    ["Offset of field: VkPipelineIndirectDeviceAddressInfoNV::pipelineBindPoint"][::core::mem::offset_of!(
        VkPipelineIndirectDeviceAddressInfoNV,
        pipelineBindPoint
    ) - 8usize];
    ["Offset of field: VkPipelineIndirectDeviceAddressInfoNV::pipeline"]
        [::core::mem::offset_of!(VkPipelineIndirectDeviceAddressInfoNV, pipeline) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkBindPipelineIndirectCommandNV"]
        [::core::mem::size_of::<VkBindPipelineIndirectCommandNV>() - 8usize];
    ["Alignment of VkBindPipelineIndirectCommandNV"]
        [::core::mem::align_of::<VkBindPipelineIndirectCommandNV>() - 8usize];
    ["Offset of field: VkBindPipelineIndirectCommandNV::pipelineAddress"]
        [::core::mem::offset_of!(VkBindPipelineIndirectCommandNV, pipelineAddress) - 0usize];
};
pub const VkRayTracingLssIndexingModeNV_VK_RAY_TRACING_LSS_INDEXING_MODE_LIST_NV:
    VkRayTracingLssIndexingModeNV = 0;
pub const VkRayTracingLssIndexingModeNV_VK_RAY_TRACING_LSS_INDEXING_MODE_SUCCESSIVE_NV:
    VkRayTracingLssIndexingModeNV = 1;
pub const VkRayTracingLssIndexingModeNV_VK_RAY_TRACING_LSS_INDEXING_MODE_MAX_ENUM_NV:
    VkRayTracingLssIndexingModeNV = 2147483647;
pub const VkRayTracingLssPrimitiveEndCapsModeNV_VK_RAY_TRACING_LSS_PRIMITIVE_END_CAPS_MODE_NONE_NV : VkRayTracingLssPrimitiveEndCapsModeNV = 0 ;
pub const VkRayTracingLssPrimitiveEndCapsModeNV_VK_RAY_TRACING_LSS_PRIMITIVE_END_CAPS_MODE_CHAINED_NV : VkRayTracingLssPrimitiveEndCapsModeNV = 1 ;
pub const VkRayTracingLssPrimitiveEndCapsModeNV_VK_RAY_TRACING_LSS_PRIMITIVE_END_CAPS_MODE_MAX_ENUM_NV : VkRayTracingLssPrimitiveEndCapsModeNV = 2147483647 ;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceRayTracingLinearSweptSpheresFeaturesNV"][::core::mem::size_of::<
        VkPhysicalDeviceRayTracingLinearSweptSpheresFeaturesNV,
    >() - 16usize];
    ["Alignment of VkPhysicalDeviceRayTracingLinearSweptSpheresFeaturesNV"][::core::mem::align_of::<
        VkPhysicalDeviceRayTracingLinearSweptSpheresFeaturesNV,
    >() - 4usize];
    ["Offset of field: VkPhysicalDeviceRayTracingLinearSweptSpheresFeaturesNV::sType"][::core::mem::offset_of!(
        VkPhysicalDeviceRayTracingLinearSweptSpheresFeaturesNV,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceRayTracingLinearSweptSpheresFeaturesNV::pNext"][::core::mem::offset_of!(
        VkPhysicalDeviceRayTracingLinearSweptSpheresFeaturesNV,
        pNext
    ) - 4usize];
    ["Offset of field: VkPhysicalDeviceRayTracingLinearSweptSpheresFeaturesNV::spheres"][::core::mem::offset_of!(
        VkPhysicalDeviceRayTracingLinearSweptSpheresFeaturesNV,
        spheres
    )
        - 8usize];
    ["Offset of field: VkPhysicalDeviceRayTracingLinearSweptSpheresFeaturesNV::linearSweptSpheres"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceRayTracingLinearSweptSpheresFeaturesNV , linearSweptSpheres) - 12usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkAccelerationStructureGeometryLinearSweptSpheresDataNV"][::core::mem::size_of::<
        VkAccelerationStructureGeometryLinearSweptSpheresDataNV,
    >() - 88usize];
    ["Alignment of VkAccelerationStructureGeometryLinearSweptSpheresDataNV"][::core::mem::align_of::<
        VkAccelerationStructureGeometryLinearSweptSpheresDataNV,
    >() - 8usize];
    ["Offset of field: VkAccelerationStructureGeometryLinearSweptSpheresDataNV::sType"][::core::mem::offset_of!(
        VkAccelerationStructureGeometryLinearSweptSpheresDataNV,
        sType
    ) - 0usize];
    ["Offset of field: VkAccelerationStructureGeometryLinearSweptSpheresDataNV::pNext"][::core::mem::offset_of!(
        VkAccelerationStructureGeometryLinearSweptSpheresDataNV,
        pNext
    ) - 4usize];
    ["Offset of field: VkAccelerationStructureGeometryLinearSweptSpheresDataNV::vertexFormat"][::core::mem::offset_of!(
        VkAccelerationStructureGeometryLinearSweptSpheresDataNV,
        vertexFormat
    )
        - 8usize];
    ["Offset of field: VkAccelerationStructureGeometryLinearSweptSpheresDataNV::vertexData"][::core::mem::offset_of!(
        VkAccelerationStructureGeometryLinearSweptSpheresDataNV,
        vertexData
    )
        - 16usize];
    ["Offset of field: VkAccelerationStructureGeometryLinearSweptSpheresDataNV::vertexStride"][::core::mem::offset_of!(
        VkAccelerationStructureGeometryLinearSweptSpheresDataNV,
        vertexStride
    )
        - 24usize];
    ["Offset of field: VkAccelerationStructureGeometryLinearSweptSpheresDataNV::radiusFormat"][::core::mem::offset_of!(
        VkAccelerationStructureGeometryLinearSweptSpheresDataNV,
        radiusFormat
    )
        - 32usize];
    ["Offset of field: VkAccelerationStructureGeometryLinearSweptSpheresDataNV::radiusData"][::core::mem::offset_of!(
        VkAccelerationStructureGeometryLinearSweptSpheresDataNV,
        radiusData
    )
        - 40usize];
    ["Offset of field: VkAccelerationStructureGeometryLinearSweptSpheresDataNV::radiusStride"][::core::mem::offset_of!(
        VkAccelerationStructureGeometryLinearSweptSpheresDataNV,
        radiusStride
    )
        - 48usize];
    ["Offset of field: VkAccelerationStructureGeometryLinearSweptSpheresDataNV::indexType"][::core::mem::offset_of!(
        VkAccelerationStructureGeometryLinearSweptSpheresDataNV,
        indexType
    )
        - 56usize];
    ["Offset of field: VkAccelerationStructureGeometryLinearSweptSpheresDataNV::indexData"][::core::mem::offset_of!(
        VkAccelerationStructureGeometryLinearSweptSpheresDataNV,
        indexData
    )
        - 64usize];
    ["Offset of field: VkAccelerationStructureGeometryLinearSweptSpheresDataNV::indexStride"][::core::mem::offset_of!(
        VkAccelerationStructureGeometryLinearSweptSpheresDataNV,
        indexStride
    )
        - 72usize];
    ["Offset of field: VkAccelerationStructureGeometryLinearSweptSpheresDataNV::indexingMode"][::core::mem::offset_of!(
        VkAccelerationStructureGeometryLinearSweptSpheresDataNV,
        indexingMode
    )
        - 80usize];
    ["Offset of field: VkAccelerationStructureGeometryLinearSweptSpheresDataNV::endCapsMode"][::core::mem::offset_of!(
        VkAccelerationStructureGeometryLinearSweptSpheresDataNV,
        endCapsMode
    )
        - 84usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkAccelerationStructureGeometrySpheresDataNV"]
        [::core::mem::size_of::<VkAccelerationStructureGeometrySpheresDataNV>() - 80usize];
    ["Alignment of VkAccelerationStructureGeometrySpheresDataNV"]
        [::core::mem::align_of::<VkAccelerationStructureGeometrySpheresDataNV>() - 8usize];
    ["Offset of field: VkAccelerationStructureGeometrySpheresDataNV::sType"]
        [::core::mem::offset_of!(VkAccelerationStructureGeometrySpheresDataNV, sType) - 0usize];
    ["Offset of field: VkAccelerationStructureGeometrySpheresDataNV::pNext"]
        [::core::mem::offset_of!(VkAccelerationStructureGeometrySpheresDataNV, pNext) - 4usize];
    ["Offset of field: VkAccelerationStructureGeometrySpheresDataNV::vertexFormat"][::core::mem::offset_of!(
        VkAccelerationStructureGeometrySpheresDataNV,
        vertexFormat
    ) - 8usize];
    ["Offset of field: VkAccelerationStructureGeometrySpheresDataNV::vertexData"][::core::mem::offset_of!(
        VkAccelerationStructureGeometrySpheresDataNV,
        vertexData
    ) - 16usize];
    ["Offset of field: VkAccelerationStructureGeometrySpheresDataNV::vertexStride"][::core::mem::offset_of!(
        VkAccelerationStructureGeometrySpheresDataNV,
        vertexStride
    ) - 24usize];
    ["Offset of field: VkAccelerationStructureGeometrySpheresDataNV::radiusFormat"][::core::mem::offset_of!(
        VkAccelerationStructureGeometrySpheresDataNV,
        radiusFormat
    ) - 32usize];
    ["Offset of field: VkAccelerationStructureGeometrySpheresDataNV::radiusData"][::core::mem::offset_of!(
        VkAccelerationStructureGeometrySpheresDataNV,
        radiusData
    ) - 40usize];
    ["Offset of field: VkAccelerationStructureGeometrySpheresDataNV::radiusStride"][::core::mem::offset_of!(
        VkAccelerationStructureGeometrySpheresDataNV,
        radiusStride
    ) - 48usize];
    ["Offset of field: VkAccelerationStructureGeometrySpheresDataNV::indexType"][::core::mem::offset_of!(
        VkAccelerationStructureGeometrySpheresDataNV,
        indexType
    ) - 56usize];
    ["Offset of field: VkAccelerationStructureGeometrySpheresDataNV::indexData"][::core::mem::offset_of!(
        VkAccelerationStructureGeometrySpheresDataNV,
        indexData
    ) - 64usize];
    ["Offset of field: VkAccelerationStructureGeometrySpheresDataNV::indexStride"][::core::mem::offset_of!(
        VkAccelerationStructureGeometrySpheresDataNV,
        indexStride
    ) - 72usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceLinearColorAttachmentFeaturesNV"]
        [::core::mem::size_of::<VkPhysicalDeviceLinearColorAttachmentFeaturesNV>() - 12usize];
    ["Alignment of VkPhysicalDeviceLinearColorAttachmentFeaturesNV"]
        [::core::mem::align_of::<VkPhysicalDeviceLinearColorAttachmentFeaturesNV>() - 4usize];
    ["Offset of field: VkPhysicalDeviceLinearColorAttachmentFeaturesNV::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceLinearColorAttachmentFeaturesNV, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceLinearColorAttachmentFeaturesNV::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceLinearColorAttachmentFeaturesNV, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceLinearColorAttachmentFeaturesNV::linearColorAttachment"][::core::mem::offset_of!(
        VkPhysicalDeviceLinearColorAttachmentFeaturesNV,
        linearColorAttachment
    )
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT"][::core::mem::size_of::<
        VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT,
    >() - 12usize];
    ["Alignment of VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT"]
        [::core::mem::align_of::<VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT>()
            - 4usize];
    ["Offset of field: VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT::sType"][::core::mem::offset_of!(
        VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT,
        sType
    )
        - 0usize];
    ["Offset of field: VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT::pNext"][::core::mem::offset_of!(
        VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT,
        pNext
    )
        - 4usize];
    ["Offset of field: VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT::imageCompressionControlSwapchain"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT , imageCompressionControlSwapchain) - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkImageViewSampleWeightCreateInfoQCOM"]
        [::core::mem::size_of::<VkImageViewSampleWeightCreateInfoQCOM>() - 28usize];
    ["Alignment of VkImageViewSampleWeightCreateInfoQCOM"]
        [::core::mem::align_of::<VkImageViewSampleWeightCreateInfoQCOM>() - 4usize];
    ["Offset of field: VkImageViewSampleWeightCreateInfoQCOM::sType"]
        [::core::mem::offset_of!(VkImageViewSampleWeightCreateInfoQCOM, sType) - 0usize];
    ["Offset of field: VkImageViewSampleWeightCreateInfoQCOM::pNext"]
        [::core::mem::offset_of!(VkImageViewSampleWeightCreateInfoQCOM, pNext) - 4usize];
    ["Offset of field: VkImageViewSampleWeightCreateInfoQCOM::filterCenter"]
        [::core::mem::offset_of!(VkImageViewSampleWeightCreateInfoQCOM, filterCenter) - 8usize];
    ["Offset of field: VkImageViewSampleWeightCreateInfoQCOM::filterSize"]
        [::core::mem::offset_of!(VkImageViewSampleWeightCreateInfoQCOM, filterSize) - 16usize];
    ["Offset of field: VkImageViewSampleWeightCreateInfoQCOM::numPhases"]
        [::core::mem::offset_of!(VkImageViewSampleWeightCreateInfoQCOM, numPhases) - 24usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceImageProcessingFeaturesQCOM"]
        [::core::mem::size_of::<VkPhysicalDeviceImageProcessingFeaturesQCOM>() - 20usize];
    ["Alignment of VkPhysicalDeviceImageProcessingFeaturesQCOM"]
        [::core::mem::align_of::<VkPhysicalDeviceImageProcessingFeaturesQCOM>() - 4usize];
    ["Offset of field: VkPhysicalDeviceImageProcessingFeaturesQCOM::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceImageProcessingFeaturesQCOM, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceImageProcessingFeaturesQCOM::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceImageProcessingFeaturesQCOM, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceImageProcessingFeaturesQCOM::textureSampleWeighted"][::core::mem::offset_of!(
        VkPhysicalDeviceImageProcessingFeaturesQCOM,
        textureSampleWeighted
    )
        - 8usize];
    ["Offset of field: VkPhysicalDeviceImageProcessingFeaturesQCOM::textureBoxFilter"][::core::mem::offset_of!(
        VkPhysicalDeviceImageProcessingFeaturesQCOM,
        textureBoxFilter
    ) - 12usize];
    ["Offset of field: VkPhysicalDeviceImageProcessingFeaturesQCOM::textureBlockMatch"][::core::mem::offset_of!(
        VkPhysicalDeviceImageProcessingFeaturesQCOM,
        textureBlockMatch
    )
        - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceImageProcessingPropertiesQCOM"]
        [::core::mem::size_of::<VkPhysicalDeviceImageProcessingPropertiesQCOM>() - 36usize];
    ["Alignment of VkPhysicalDeviceImageProcessingPropertiesQCOM"]
        [::core::mem::align_of::<VkPhysicalDeviceImageProcessingPropertiesQCOM>() - 4usize];
    ["Offset of field: VkPhysicalDeviceImageProcessingPropertiesQCOM::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceImageProcessingPropertiesQCOM, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceImageProcessingPropertiesQCOM::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceImageProcessingPropertiesQCOM, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceImageProcessingPropertiesQCOM::maxWeightFilterPhases"][::core::mem::offset_of!(
        VkPhysicalDeviceImageProcessingPropertiesQCOM,
        maxWeightFilterPhases
    )
        - 8usize];
    ["Offset of field: VkPhysicalDeviceImageProcessingPropertiesQCOM::maxWeightFilterDimension"][::core::mem::offset_of!(
        VkPhysicalDeviceImageProcessingPropertiesQCOM,
        maxWeightFilterDimension
    )
        - 12usize];
    ["Offset of field: VkPhysicalDeviceImageProcessingPropertiesQCOM::maxBlockMatchRegion"][::core::mem::offset_of!(
        VkPhysicalDeviceImageProcessingPropertiesQCOM,
        maxBlockMatchRegion
    )
        - 20usize];
    ["Offset of field: VkPhysicalDeviceImageProcessingPropertiesQCOM::maxBoxFilterBlockSize"][::core::mem::offset_of!(
        VkPhysicalDeviceImageProcessingPropertiesQCOM,
        maxBoxFilterBlockSize
    )
        - 28usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceNestedCommandBufferFeaturesEXT"]
        [::core::mem::size_of::<VkPhysicalDeviceNestedCommandBufferFeaturesEXT>() - 20usize];
    ["Alignment of VkPhysicalDeviceNestedCommandBufferFeaturesEXT"]
        [::core::mem::align_of::<VkPhysicalDeviceNestedCommandBufferFeaturesEXT>() - 4usize];
    ["Offset of field: VkPhysicalDeviceNestedCommandBufferFeaturesEXT::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceNestedCommandBufferFeaturesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceNestedCommandBufferFeaturesEXT::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceNestedCommandBufferFeaturesEXT, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceNestedCommandBufferFeaturesEXT::nestedCommandBuffer"][::core::mem::offset_of!(
        VkPhysicalDeviceNestedCommandBufferFeaturesEXT,
        nestedCommandBuffer
    )
        - 8usize];
    ["Offset of field: VkPhysicalDeviceNestedCommandBufferFeaturesEXT::nestedCommandBufferRendering"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceNestedCommandBufferFeaturesEXT , nestedCommandBufferRendering) - 12usize] ;
    ["Offset of field: VkPhysicalDeviceNestedCommandBufferFeaturesEXT::nestedCommandBufferSimultaneousUse"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceNestedCommandBufferFeaturesEXT , nestedCommandBufferSimultaneousUse) - 16usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceNestedCommandBufferPropertiesEXT"]
        [::core::mem::size_of::<VkPhysicalDeviceNestedCommandBufferPropertiesEXT>() - 12usize];
    ["Alignment of VkPhysicalDeviceNestedCommandBufferPropertiesEXT"]
        [::core::mem::align_of::<VkPhysicalDeviceNestedCommandBufferPropertiesEXT>() - 4usize];
    ["Offset of field: VkPhysicalDeviceNestedCommandBufferPropertiesEXT::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceNestedCommandBufferPropertiesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceNestedCommandBufferPropertiesEXT::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceNestedCommandBufferPropertiesEXT, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceNestedCommandBufferPropertiesEXT::maxCommandBufferNestingLevel"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceNestedCommandBufferPropertiesEXT , maxCommandBufferNestingLevel) - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkExternalMemoryAcquireUnmodifiedEXT"]
        [::core::mem::size_of::<VkExternalMemoryAcquireUnmodifiedEXT>() - 12usize];
    ["Alignment of VkExternalMemoryAcquireUnmodifiedEXT"]
        [::core::mem::align_of::<VkExternalMemoryAcquireUnmodifiedEXT>() - 4usize];
    ["Offset of field: VkExternalMemoryAcquireUnmodifiedEXT::sType"]
        [::core::mem::offset_of!(VkExternalMemoryAcquireUnmodifiedEXT, sType) - 0usize];
    ["Offset of field: VkExternalMemoryAcquireUnmodifiedEXT::pNext"]
        [::core::mem::offset_of!(VkExternalMemoryAcquireUnmodifiedEXT, pNext) - 4usize];
    ["Offset of field: VkExternalMemoryAcquireUnmodifiedEXT::acquireUnmodifiedMemory"][::core::mem::offset_of!(
        VkExternalMemoryAcquireUnmodifiedEXT,
        acquireUnmodifiedMemory
    ) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceExtendedDynamicState3FeaturesEXT"]
        [::core::mem::size_of::<VkPhysicalDeviceExtendedDynamicState3FeaturesEXT>() - 132usize];
    ["Alignment of VkPhysicalDeviceExtendedDynamicState3FeaturesEXT"]
        [::core::mem::align_of::<VkPhysicalDeviceExtendedDynamicState3FeaturesEXT>() - 4usize];
    ["Offset of field: VkPhysicalDeviceExtendedDynamicState3FeaturesEXT::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceExtendedDynamicState3FeaturesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceExtendedDynamicState3FeaturesEXT::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceExtendedDynamicState3FeaturesEXT, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceExtendedDynamicState3FeaturesEXT::extendedDynamicState3TessellationDomainOrigin"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceExtendedDynamicState3FeaturesEXT , extendedDynamicState3TessellationDomainOrigin) - 8usize] ;
    ["Offset of field: VkPhysicalDeviceExtendedDynamicState3FeaturesEXT::extendedDynamicState3DepthClampEnable"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceExtendedDynamicState3FeaturesEXT , extendedDynamicState3DepthClampEnable) - 12usize] ;
    ["Offset of field: VkPhysicalDeviceExtendedDynamicState3FeaturesEXT::extendedDynamicState3PolygonMode"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceExtendedDynamicState3FeaturesEXT , extendedDynamicState3PolygonMode) - 16usize] ;
    ["Offset of field: VkPhysicalDeviceExtendedDynamicState3FeaturesEXT::extendedDynamicState3RasterizationSamples"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceExtendedDynamicState3FeaturesEXT , extendedDynamicState3RasterizationSamples) - 20usize] ;
    ["Offset of field: VkPhysicalDeviceExtendedDynamicState3FeaturesEXT::extendedDynamicState3SampleMask"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceExtendedDynamicState3FeaturesEXT , extendedDynamicState3SampleMask) - 24usize] ;
    ["Offset of field: VkPhysicalDeviceExtendedDynamicState3FeaturesEXT::extendedDynamicState3AlphaToCoverageEnable"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceExtendedDynamicState3FeaturesEXT , extendedDynamicState3AlphaToCoverageEnable) - 28usize] ;
    ["Offset of field: VkPhysicalDeviceExtendedDynamicState3FeaturesEXT::extendedDynamicState3AlphaToOneEnable"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceExtendedDynamicState3FeaturesEXT , extendedDynamicState3AlphaToOneEnable) - 32usize] ;
    ["Offset of field: VkPhysicalDeviceExtendedDynamicState3FeaturesEXT::extendedDynamicState3LogicOpEnable"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceExtendedDynamicState3FeaturesEXT , extendedDynamicState3LogicOpEnable) - 36usize] ;
    ["Offset of field: VkPhysicalDeviceExtendedDynamicState3FeaturesEXT::extendedDynamicState3ColorBlendEnable"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceExtendedDynamicState3FeaturesEXT , extendedDynamicState3ColorBlendEnable) - 40usize] ;
    ["Offset of field: VkPhysicalDeviceExtendedDynamicState3FeaturesEXT::extendedDynamicState3ColorBlendEquation"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceExtendedDynamicState3FeaturesEXT , extendedDynamicState3ColorBlendEquation) - 44usize] ;
    ["Offset of field: VkPhysicalDeviceExtendedDynamicState3FeaturesEXT::extendedDynamicState3ColorWriteMask"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceExtendedDynamicState3FeaturesEXT , extendedDynamicState3ColorWriteMask) - 48usize] ;
    ["Offset of field: VkPhysicalDeviceExtendedDynamicState3FeaturesEXT::extendedDynamicState3RasterizationStream"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceExtendedDynamicState3FeaturesEXT , extendedDynamicState3RasterizationStream) - 52usize] ;
    ["Offset of field: VkPhysicalDeviceExtendedDynamicState3FeaturesEXT::extendedDynamicState3ConservativeRasterizationMode"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceExtendedDynamicState3FeaturesEXT , extendedDynamicState3ConservativeRasterizationMode) - 56usize] ;
    ["Offset of field: VkPhysicalDeviceExtendedDynamicState3FeaturesEXT::extendedDynamicState3ExtraPrimitiveOverestimationSize"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceExtendedDynamicState3FeaturesEXT , extendedDynamicState3ExtraPrimitiveOverestimationSize) - 60usize] ;
    ["Offset of field: VkPhysicalDeviceExtendedDynamicState3FeaturesEXT::extendedDynamicState3DepthClipEnable"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceExtendedDynamicState3FeaturesEXT , extendedDynamicState3DepthClipEnable) - 64usize] ;
    ["Offset of field: VkPhysicalDeviceExtendedDynamicState3FeaturesEXT::extendedDynamicState3SampleLocationsEnable"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceExtendedDynamicState3FeaturesEXT , extendedDynamicState3SampleLocationsEnable) - 68usize] ;
    ["Offset of field: VkPhysicalDeviceExtendedDynamicState3FeaturesEXT::extendedDynamicState3ColorBlendAdvanced"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceExtendedDynamicState3FeaturesEXT , extendedDynamicState3ColorBlendAdvanced) - 72usize] ;
    ["Offset of field: VkPhysicalDeviceExtendedDynamicState3FeaturesEXT::extendedDynamicState3ProvokingVertexMode"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceExtendedDynamicState3FeaturesEXT , extendedDynamicState3ProvokingVertexMode) - 76usize] ;
    ["Offset of field: VkPhysicalDeviceExtendedDynamicState3FeaturesEXT::extendedDynamicState3LineRasterizationMode"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceExtendedDynamicState3FeaturesEXT , extendedDynamicState3LineRasterizationMode) - 80usize] ;
    ["Offset of field: VkPhysicalDeviceExtendedDynamicState3FeaturesEXT::extendedDynamicState3LineStippleEnable"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceExtendedDynamicState3FeaturesEXT , extendedDynamicState3LineStippleEnable) - 84usize] ;
    ["Offset of field: VkPhysicalDeviceExtendedDynamicState3FeaturesEXT::extendedDynamicState3DepthClipNegativeOneToOne"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceExtendedDynamicState3FeaturesEXT , extendedDynamicState3DepthClipNegativeOneToOne) - 88usize] ;
    ["Offset of field: VkPhysicalDeviceExtendedDynamicState3FeaturesEXT::extendedDynamicState3ViewportWScalingEnable"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceExtendedDynamicState3FeaturesEXT , extendedDynamicState3ViewportWScalingEnable) - 92usize] ;
    ["Offset of field: VkPhysicalDeviceExtendedDynamicState3FeaturesEXT::extendedDynamicState3ViewportSwizzle"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceExtendedDynamicState3FeaturesEXT , extendedDynamicState3ViewportSwizzle) - 96usize] ;
    ["Offset of field: VkPhysicalDeviceExtendedDynamicState3FeaturesEXT::extendedDynamicState3CoverageToColorEnable"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceExtendedDynamicState3FeaturesEXT , extendedDynamicState3CoverageToColorEnable) - 100usize] ;
    ["Offset of field: VkPhysicalDeviceExtendedDynamicState3FeaturesEXT::extendedDynamicState3CoverageToColorLocation"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceExtendedDynamicState3FeaturesEXT , extendedDynamicState3CoverageToColorLocation) - 104usize] ;
    ["Offset of field: VkPhysicalDeviceExtendedDynamicState3FeaturesEXT::extendedDynamicState3CoverageModulationMode"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceExtendedDynamicState3FeaturesEXT , extendedDynamicState3CoverageModulationMode) - 108usize] ;
    ["Offset of field: VkPhysicalDeviceExtendedDynamicState3FeaturesEXT::extendedDynamicState3CoverageModulationTableEnable"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceExtendedDynamicState3FeaturesEXT , extendedDynamicState3CoverageModulationTableEnable) - 112usize] ;
    ["Offset of field: VkPhysicalDeviceExtendedDynamicState3FeaturesEXT::extendedDynamicState3CoverageModulationTable"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceExtendedDynamicState3FeaturesEXT , extendedDynamicState3CoverageModulationTable) - 116usize] ;
    ["Offset of field: VkPhysicalDeviceExtendedDynamicState3FeaturesEXT::extendedDynamicState3CoverageReductionMode"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceExtendedDynamicState3FeaturesEXT , extendedDynamicState3CoverageReductionMode) - 120usize] ;
    ["Offset of field: VkPhysicalDeviceExtendedDynamicState3FeaturesEXT::extendedDynamicState3RepresentativeFragmentTestEnable"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceExtendedDynamicState3FeaturesEXT , extendedDynamicState3RepresentativeFragmentTestEnable) - 124usize] ;
    ["Offset of field: VkPhysicalDeviceExtendedDynamicState3FeaturesEXT::extendedDynamicState3ShadingRateImageEnable"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceExtendedDynamicState3FeaturesEXT , extendedDynamicState3ShadingRateImageEnable) - 128usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceExtendedDynamicState3PropertiesEXT"]
        [::core::mem::size_of::<VkPhysicalDeviceExtendedDynamicState3PropertiesEXT>() - 12usize];
    ["Alignment of VkPhysicalDeviceExtendedDynamicState3PropertiesEXT"]
        [::core::mem::align_of::<VkPhysicalDeviceExtendedDynamicState3PropertiesEXT>() - 4usize];
    ["Offset of field: VkPhysicalDeviceExtendedDynamicState3PropertiesEXT::sType"][::core::mem::offset_of!(
        VkPhysicalDeviceExtendedDynamicState3PropertiesEXT,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceExtendedDynamicState3PropertiesEXT::pNext"][::core::mem::offset_of!(
        VkPhysicalDeviceExtendedDynamicState3PropertiesEXT,
        pNext
    ) - 4usize];
    ["Offset of field: VkPhysicalDeviceExtendedDynamicState3PropertiesEXT::dynamicPrimitiveTopologyUnrestricted"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceExtendedDynamicState3PropertiesEXT , dynamicPrimitiveTopologyUnrestricted) - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkColorBlendEquationEXT"]
        [::core::mem::size_of::<VkColorBlendEquationEXT>() - 24usize];
    ["Alignment of VkColorBlendEquationEXT"]
        [::core::mem::align_of::<VkColorBlendEquationEXT>() - 4usize];
    ["Offset of field: VkColorBlendEquationEXT::srcColorBlendFactor"]
        [::core::mem::offset_of!(VkColorBlendEquationEXT, srcColorBlendFactor) - 0usize];
    ["Offset of field: VkColorBlendEquationEXT::dstColorBlendFactor"]
        [::core::mem::offset_of!(VkColorBlendEquationEXT, dstColorBlendFactor) - 4usize];
    ["Offset of field: VkColorBlendEquationEXT::colorBlendOp"]
        [::core::mem::offset_of!(VkColorBlendEquationEXT, colorBlendOp) - 8usize];
    ["Offset of field: VkColorBlendEquationEXT::srcAlphaBlendFactor"]
        [::core::mem::offset_of!(VkColorBlendEquationEXT, srcAlphaBlendFactor) - 12usize];
    ["Offset of field: VkColorBlendEquationEXT::dstAlphaBlendFactor"]
        [::core::mem::offset_of!(VkColorBlendEquationEXT, dstAlphaBlendFactor) - 16usize];
    ["Offset of field: VkColorBlendEquationEXT::alphaBlendOp"]
        [::core::mem::offset_of!(VkColorBlendEquationEXT, alphaBlendOp) - 20usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkColorBlendAdvancedEXT"]
        [::core::mem::size_of::<VkColorBlendAdvancedEXT>() - 20usize];
    ["Alignment of VkColorBlendAdvancedEXT"]
        [::core::mem::align_of::<VkColorBlendAdvancedEXT>() - 4usize];
    ["Offset of field: VkColorBlendAdvancedEXT::advancedBlendOp"]
        [::core::mem::offset_of!(VkColorBlendAdvancedEXT, advancedBlendOp) - 0usize];
    ["Offset of field: VkColorBlendAdvancedEXT::srcPremultiplied"]
        [::core::mem::offset_of!(VkColorBlendAdvancedEXT, srcPremultiplied) - 4usize];
    ["Offset of field: VkColorBlendAdvancedEXT::dstPremultiplied"]
        [::core::mem::offset_of!(VkColorBlendAdvancedEXT, dstPremultiplied) - 8usize];
    ["Offset of field: VkColorBlendAdvancedEXT::blendOverlap"]
        [::core::mem::offset_of!(VkColorBlendAdvancedEXT, blendOverlap) - 12usize];
    ["Offset of field: VkColorBlendAdvancedEXT::clampResults"]
        [::core::mem::offset_of!(VkColorBlendAdvancedEXT, clampResults) - 16usize];
};
pub const VkSubpassMergeStatusEXT_VK_SUBPASS_MERGE_STATUS_MERGED_EXT: VkSubpassMergeStatusEXT = 0;
pub const VkSubpassMergeStatusEXT_VK_SUBPASS_MERGE_STATUS_DISALLOWED_EXT: VkSubpassMergeStatusEXT =
    1;
pub const VkSubpassMergeStatusEXT_VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SIDE_EFFECTS_EXT:
    VkSubpassMergeStatusEXT = 2;
pub const VkSubpassMergeStatusEXT_VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SAMPLES_MISMATCH_EXT:
    VkSubpassMergeStatusEXT = 3;
pub const VkSubpassMergeStatusEXT_VK_SUBPASS_MERGE_STATUS_NOT_MERGED_VIEWS_MISMATCH_EXT:
    VkSubpassMergeStatusEXT = 4;
pub const VkSubpassMergeStatusEXT_VK_SUBPASS_MERGE_STATUS_NOT_MERGED_ALIASING_EXT:
    VkSubpassMergeStatusEXT = 5;
pub const VkSubpassMergeStatusEXT_VK_SUBPASS_MERGE_STATUS_NOT_MERGED_DEPENDENCIES_EXT:
    VkSubpassMergeStatusEXT = 6;
pub const VkSubpassMergeStatusEXT_VK_SUBPASS_MERGE_STATUS_NOT_MERGED_INCOMPATIBLE_INPUT_ATTACHMENT_EXT : VkSubpassMergeStatusEXT = 7 ;
pub const VkSubpassMergeStatusEXT_VK_SUBPASS_MERGE_STATUS_NOT_MERGED_TOO_MANY_ATTACHMENTS_EXT:
    VkSubpassMergeStatusEXT = 8;
pub const VkSubpassMergeStatusEXT_VK_SUBPASS_MERGE_STATUS_NOT_MERGED_INSUFFICIENT_STORAGE_EXT:
    VkSubpassMergeStatusEXT = 9;
pub const VkSubpassMergeStatusEXT_VK_SUBPASS_MERGE_STATUS_NOT_MERGED_DEPTH_STENCIL_COUNT_EXT:
    VkSubpassMergeStatusEXT = 10;
pub const VkSubpassMergeStatusEXT_VK_SUBPASS_MERGE_STATUS_NOT_MERGED_RESOLVE_ATTACHMENT_REUSE_EXT : VkSubpassMergeStatusEXT = 11 ;
pub const VkSubpassMergeStatusEXT_VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SINGLE_SUBPASS_EXT:
    VkSubpassMergeStatusEXT = 12;
pub const VkSubpassMergeStatusEXT_VK_SUBPASS_MERGE_STATUS_NOT_MERGED_UNSPECIFIED_EXT:
    VkSubpassMergeStatusEXT = 13;
pub const VkSubpassMergeStatusEXT_VK_SUBPASS_MERGE_STATUS_MAX_ENUM_EXT: VkSubpassMergeStatusEXT =
    2147483647;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT"]
        [::core::mem::size_of::<VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT>() - 12usize];
    ["Alignment of VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT"]
        [::core::mem::align_of::<VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT>() - 4usize];
    ["Offset of field: VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT::subpassMergeFeedback"][::core::mem::offset_of!(
        VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT,
        subpassMergeFeedback
    )
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkRenderPassCreationControlEXT"]
        [::core::mem::size_of::<VkRenderPassCreationControlEXT>() - 12usize];
    ["Alignment of VkRenderPassCreationControlEXT"]
        [::core::mem::align_of::<VkRenderPassCreationControlEXT>() - 4usize];
    ["Offset of field: VkRenderPassCreationControlEXT::sType"]
        [::core::mem::offset_of!(VkRenderPassCreationControlEXT, sType) - 0usize];
    ["Offset of field: VkRenderPassCreationControlEXT::pNext"]
        [::core::mem::offset_of!(VkRenderPassCreationControlEXT, pNext) - 4usize];
    ["Offset of field: VkRenderPassCreationControlEXT::disallowMerging"]
        [::core::mem::offset_of!(VkRenderPassCreationControlEXT, disallowMerging) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkRenderPassCreationFeedbackInfoEXT"]
        [::core::mem::size_of::<VkRenderPassCreationFeedbackInfoEXT>() - 4usize];
    ["Alignment of VkRenderPassCreationFeedbackInfoEXT"]
        [::core::mem::align_of::<VkRenderPassCreationFeedbackInfoEXT>() - 4usize];
    ["Offset of field: VkRenderPassCreationFeedbackInfoEXT::postMergeSubpassCount"][::core::mem::offset_of!(
        VkRenderPassCreationFeedbackInfoEXT,
        postMergeSubpassCount
    ) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkRenderPassCreationFeedbackCreateInfoEXT"]
        [::core::mem::size_of::<VkRenderPassCreationFeedbackCreateInfoEXT>() - 12usize];
    ["Alignment of VkRenderPassCreationFeedbackCreateInfoEXT"]
        [::core::mem::align_of::<VkRenderPassCreationFeedbackCreateInfoEXT>() - 4usize];
    ["Offset of field: VkRenderPassCreationFeedbackCreateInfoEXT::sType"]
        [::core::mem::offset_of!(VkRenderPassCreationFeedbackCreateInfoEXT, sType) - 0usize];
    ["Offset of field: VkRenderPassCreationFeedbackCreateInfoEXT::pNext"]
        [::core::mem::offset_of!(VkRenderPassCreationFeedbackCreateInfoEXT, pNext) - 4usize];
    ["Offset of field: VkRenderPassCreationFeedbackCreateInfoEXT::pRenderPassFeedback"][::core::mem::offset_of!(
        VkRenderPassCreationFeedbackCreateInfoEXT,
        pRenderPassFeedback
    ) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkRenderPassSubpassFeedbackInfoEXT"]
        [::core::mem::size_of::<VkRenderPassSubpassFeedbackInfoEXT>() - 264usize];
    ["Alignment of VkRenderPassSubpassFeedbackInfoEXT"]
        [::core::mem::align_of::<VkRenderPassSubpassFeedbackInfoEXT>() - 4usize];
    ["Offset of field: VkRenderPassSubpassFeedbackInfoEXT::subpassMergeStatus"]
        [::core::mem::offset_of!(VkRenderPassSubpassFeedbackInfoEXT, subpassMergeStatus) - 0usize];
    ["Offset of field: VkRenderPassSubpassFeedbackInfoEXT::description"]
        [::core::mem::offset_of!(VkRenderPassSubpassFeedbackInfoEXT, description) - 4usize];
    ["Offset of field: VkRenderPassSubpassFeedbackInfoEXT::postMergeIndex"]
        [::core::mem::offset_of!(VkRenderPassSubpassFeedbackInfoEXT, postMergeIndex) - 260usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkRenderPassSubpassFeedbackCreateInfoEXT"]
        [::core::mem::size_of::<VkRenderPassSubpassFeedbackCreateInfoEXT>() - 12usize];
    ["Alignment of VkRenderPassSubpassFeedbackCreateInfoEXT"]
        [::core::mem::align_of::<VkRenderPassSubpassFeedbackCreateInfoEXT>() - 4usize];
    ["Offset of field: VkRenderPassSubpassFeedbackCreateInfoEXT::sType"]
        [::core::mem::offset_of!(VkRenderPassSubpassFeedbackCreateInfoEXT, sType) - 0usize];
    ["Offset of field: VkRenderPassSubpassFeedbackCreateInfoEXT::pNext"]
        [::core::mem::offset_of!(VkRenderPassSubpassFeedbackCreateInfoEXT, pNext) - 4usize];
    ["Offset of field: VkRenderPassSubpassFeedbackCreateInfoEXT::pSubpassFeedback"][::core::mem::offset_of!(
        VkRenderPassSubpassFeedbackCreateInfoEXT,
        pSubpassFeedback
    ) - 8usize];
};
pub const VkDirectDriverLoadingModeLUNARG_VK_DIRECT_DRIVER_LOADING_MODE_EXCLUSIVE_LUNARG:
    VkDirectDriverLoadingModeLUNARG = 0;
pub const VkDirectDriverLoadingModeLUNARG_VK_DIRECT_DRIVER_LOADING_MODE_INCLUSIVE_LUNARG:
    VkDirectDriverLoadingModeLUNARG = 1;
pub const VkDirectDriverLoadingModeLUNARG_VK_DIRECT_DRIVER_LOADING_MODE_MAX_ENUM_LUNARG:
    VkDirectDriverLoadingModeLUNARG = 2147483647;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDirectDriverLoadingInfoLUNARG"]
        [::core::mem::size_of::<VkDirectDriverLoadingInfoLUNARG>() - 16usize];
    ["Alignment of VkDirectDriverLoadingInfoLUNARG"]
        [::core::mem::align_of::<VkDirectDriverLoadingInfoLUNARG>() - 4usize];
    ["Offset of field: VkDirectDriverLoadingInfoLUNARG::sType"]
        [::core::mem::offset_of!(VkDirectDriverLoadingInfoLUNARG, sType) - 0usize];
    ["Offset of field: VkDirectDriverLoadingInfoLUNARG::pNext"]
        [::core::mem::offset_of!(VkDirectDriverLoadingInfoLUNARG, pNext) - 4usize];
    ["Offset of field: VkDirectDriverLoadingInfoLUNARG::flags"]
        [::core::mem::offset_of!(VkDirectDriverLoadingInfoLUNARG, flags) - 8usize];
    ["Offset of field: VkDirectDriverLoadingInfoLUNARG::pfnGetInstanceProcAddr"][::core::mem::offset_of!(
        VkDirectDriverLoadingInfoLUNARG,
        pfnGetInstanceProcAddr
    ) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDirectDriverLoadingListLUNARG"]
        [::core::mem::size_of::<VkDirectDriverLoadingListLUNARG>() - 20usize];
    ["Alignment of VkDirectDriverLoadingListLUNARG"]
        [::core::mem::align_of::<VkDirectDriverLoadingListLUNARG>() - 4usize];
    ["Offset of field: VkDirectDriverLoadingListLUNARG::sType"]
        [::core::mem::offset_of!(VkDirectDriverLoadingListLUNARG, sType) - 0usize];
    ["Offset of field: VkDirectDriverLoadingListLUNARG::pNext"]
        [::core::mem::offset_of!(VkDirectDriverLoadingListLUNARG, pNext) - 4usize];
    ["Offset of field: VkDirectDriverLoadingListLUNARG::mode"]
        [::core::mem::offset_of!(VkDirectDriverLoadingListLUNARG, mode) - 8usize];
    ["Offset of field: VkDirectDriverLoadingListLUNARG::driverCount"]
        [::core::mem::offset_of!(VkDirectDriverLoadingListLUNARG, driverCount) - 12usize];
    ["Offset of field: VkDirectDriverLoadingListLUNARG::pDrivers"]
        [::core::mem::offset_of!(VkDirectDriverLoadingListLUNARG, pDrivers) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT"]
        [::core::mem::size_of::<VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT>() - 12usize];
    ["Alignment of VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT"]
        [::core::mem::align_of::<VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT>() - 4usize];
    ["Offset of field: VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT::sType"][::core::mem::offset_of!(
        VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT::pNext"][::core::mem::offset_of!(
        VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT,
        pNext
    ) - 4usize];
    ["Offset of field: VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT::shaderModuleIdentifier"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT , shaderModuleIdentifier) - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT"]
        [::core::mem::size_of::<VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT>() - 24usize];
    ["Alignment of VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT"]
        [::core::mem::align_of::<VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT>() - 4usize];
    ["Offset of field: VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT::sType"][::core::mem::offset_of!(
        VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT::pNext"][::core::mem::offset_of!(
        VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT,
        pNext
    ) - 4usize];
    ["Offset of field: VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT::shaderModuleIdentifierAlgorithmUUID"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT , shaderModuleIdentifierAlgorithmUUID) - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineShaderStageModuleIdentifierCreateInfoEXT"]
        [::core::mem::size_of::<VkPipelineShaderStageModuleIdentifierCreateInfoEXT>() - 16usize];
    ["Alignment of VkPipelineShaderStageModuleIdentifierCreateInfoEXT"]
        [::core::mem::align_of::<VkPipelineShaderStageModuleIdentifierCreateInfoEXT>() - 4usize];
    ["Offset of field: VkPipelineShaderStageModuleIdentifierCreateInfoEXT::sType"][::core::mem::offset_of!(
        VkPipelineShaderStageModuleIdentifierCreateInfoEXT,
        sType
    ) - 0usize];
    ["Offset of field: VkPipelineShaderStageModuleIdentifierCreateInfoEXT::pNext"][::core::mem::offset_of!(
        VkPipelineShaderStageModuleIdentifierCreateInfoEXT,
        pNext
    ) - 4usize];
    ["Offset of field: VkPipelineShaderStageModuleIdentifierCreateInfoEXT::identifierSize"][::core::mem::offset_of!(
        VkPipelineShaderStageModuleIdentifierCreateInfoEXT,
        identifierSize
    )
        - 8usize];
    ["Offset of field: VkPipelineShaderStageModuleIdentifierCreateInfoEXT::pIdentifier"][::core::mem::offset_of!(
        VkPipelineShaderStageModuleIdentifierCreateInfoEXT,
        pIdentifier
    )
        - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkShaderModuleIdentifierEXT"]
        [::core::mem::size_of::<VkShaderModuleIdentifierEXT>() - 44usize];
    ["Alignment of VkShaderModuleIdentifierEXT"]
        [::core::mem::align_of::<VkShaderModuleIdentifierEXT>() - 4usize];
    ["Offset of field: VkShaderModuleIdentifierEXT::sType"]
        [::core::mem::offset_of!(VkShaderModuleIdentifierEXT, sType) - 0usize];
    ["Offset of field: VkShaderModuleIdentifierEXT::pNext"]
        [::core::mem::offset_of!(VkShaderModuleIdentifierEXT, pNext) - 4usize];
    ["Offset of field: VkShaderModuleIdentifierEXT::identifierSize"]
        [::core::mem::offset_of!(VkShaderModuleIdentifierEXT, identifierSize) - 8usize];
    ["Offset of field: VkShaderModuleIdentifierEXT::identifier"]
        [::core::mem::offset_of!(VkShaderModuleIdentifierEXT, identifier) - 12usize];
};
pub const VkOpticalFlowPerformanceLevelNV_VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_UNKNOWN_NV:
    VkOpticalFlowPerformanceLevelNV = 0;
pub const VkOpticalFlowPerformanceLevelNV_VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_SLOW_NV:
    VkOpticalFlowPerformanceLevelNV = 1;
pub const VkOpticalFlowPerformanceLevelNV_VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_MEDIUM_NV:
    VkOpticalFlowPerformanceLevelNV = 2;
pub const VkOpticalFlowPerformanceLevelNV_VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_FAST_NV:
    VkOpticalFlowPerformanceLevelNV = 3;
pub const VkOpticalFlowPerformanceLevelNV_VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_MAX_ENUM_NV:
    VkOpticalFlowPerformanceLevelNV = 2147483647;
pub const VkOpticalFlowSessionBindingPointNV_VK_OPTICAL_FLOW_SESSION_BINDING_POINT_UNKNOWN_NV:
    VkOpticalFlowSessionBindingPointNV = 0;
pub const VkOpticalFlowSessionBindingPointNV_VK_OPTICAL_FLOW_SESSION_BINDING_POINT_INPUT_NV:
    VkOpticalFlowSessionBindingPointNV = 1;
pub const VkOpticalFlowSessionBindingPointNV_VK_OPTICAL_FLOW_SESSION_BINDING_POINT_REFERENCE_NV:
    VkOpticalFlowSessionBindingPointNV = 2;
pub const VkOpticalFlowSessionBindingPointNV_VK_OPTICAL_FLOW_SESSION_BINDING_POINT_HINT_NV:
    VkOpticalFlowSessionBindingPointNV = 3;
pub const VkOpticalFlowSessionBindingPointNV_VK_OPTICAL_FLOW_SESSION_BINDING_POINT_FLOW_VECTOR_NV : VkOpticalFlowSessionBindingPointNV = 4 ;
pub const VkOpticalFlowSessionBindingPointNV_VK_OPTICAL_FLOW_SESSION_BINDING_POINT_BACKWARD_FLOW_VECTOR_NV : VkOpticalFlowSessionBindingPointNV = 5 ;
pub const VkOpticalFlowSessionBindingPointNV_VK_OPTICAL_FLOW_SESSION_BINDING_POINT_COST_NV:
    VkOpticalFlowSessionBindingPointNV = 6;
pub const VkOpticalFlowSessionBindingPointNV_VK_OPTICAL_FLOW_SESSION_BINDING_POINT_BACKWARD_COST_NV : VkOpticalFlowSessionBindingPointNV = 7 ;
pub const VkOpticalFlowSessionBindingPointNV_VK_OPTICAL_FLOW_SESSION_BINDING_POINT_GLOBAL_FLOW_NV : VkOpticalFlowSessionBindingPointNV = 8 ;
pub const VkOpticalFlowSessionBindingPointNV_VK_OPTICAL_FLOW_SESSION_BINDING_POINT_MAX_ENUM_NV:
    VkOpticalFlowSessionBindingPointNV = 2147483647;
pub const VkOpticalFlowGridSizeFlagBitsNV_VK_OPTICAL_FLOW_GRID_SIZE_UNKNOWN_NV:
    VkOpticalFlowGridSizeFlagBitsNV = 0;
pub const VkOpticalFlowGridSizeFlagBitsNV_VK_OPTICAL_FLOW_GRID_SIZE_1X1_BIT_NV:
    VkOpticalFlowGridSizeFlagBitsNV = 1;
pub const VkOpticalFlowGridSizeFlagBitsNV_VK_OPTICAL_FLOW_GRID_SIZE_2X2_BIT_NV:
    VkOpticalFlowGridSizeFlagBitsNV = 2;
pub const VkOpticalFlowGridSizeFlagBitsNV_VK_OPTICAL_FLOW_GRID_SIZE_4X4_BIT_NV:
    VkOpticalFlowGridSizeFlagBitsNV = 4;
pub const VkOpticalFlowGridSizeFlagBitsNV_VK_OPTICAL_FLOW_GRID_SIZE_8X8_BIT_NV:
    VkOpticalFlowGridSizeFlagBitsNV = 8;
pub const VkOpticalFlowGridSizeFlagBitsNV_VK_OPTICAL_FLOW_GRID_SIZE_FLAG_BITS_MAX_ENUM_NV:
    VkOpticalFlowGridSizeFlagBitsNV = 2147483647;
pub const VkOpticalFlowUsageFlagBitsNV_VK_OPTICAL_FLOW_USAGE_UNKNOWN_NV:
    VkOpticalFlowUsageFlagBitsNV = 0;
pub const VkOpticalFlowUsageFlagBitsNV_VK_OPTICAL_FLOW_USAGE_INPUT_BIT_NV:
    VkOpticalFlowUsageFlagBitsNV = 1;
pub const VkOpticalFlowUsageFlagBitsNV_VK_OPTICAL_FLOW_USAGE_OUTPUT_BIT_NV:
    VkOpticalFlowUsageFlagBitsNV = 2;
pub const VkOpticalFlowUsageFlagBitsNV_VK_OPTICAL_FLOW_USAGE_HINT_BIT_NV:
    VkOpticalFlowUsageFlagBitsNV = 4;
pub const VkOpticalFlowUsageFlagBitsNV_VK_OPTICAL_FLOW_USAGE_COST_BIT_NV:
    VkOpticalFlowUsageFlagBitsNV = 8;
pub const VkOpticalFlowUsageFlagBitsNV_VK_OPTICAL_FLOW_USAGE_GLOBAL_FLOW_BIT_NV:
    VkOpticalFlowUsageFlagBitsNV = 16;
pub const VkOpticalFlowUsageFlagBitsNV_VK_OPTICAL_FLOW_USAGE_FLAG_BITS_MAX_ENUM_NV:
    VkOpticalFlowUsageFlagBitsNV = 2147483647;
pub const VkOpticalFlowSessionCreateFlagBitsNV_VK_OPTICAL_FLOW_SESSION_CREATE_ENABLE_HINT_BIT_NV:
    VkOpticalFlowSessionCreateFlagBitsNV = 1;
pub const VkOpticalFlowSessionCreateFlagBitsNV_VK_OPTICAL_FLOW_SESSION_CREATE_ENABLE_COST_BIT_NV:
    VkOpticalFlowSessionCreateFlagBitsNV = 2;
pub const VkOpticalFlowSessionCreateFlagBitsNV_VK_OPTICAL_FLOW_SESSION_CREATE_ENABLE_GLOBAL_FLOW_BIT_NV : VkOpticalFlowSessionCreateFlagBitsNV = 4 ;
pub const VkOpticalFlowSessionCreateFlagBitsNV_VK_OPTICAL_FLOW_SESSION_CREATE_ALLOW_REGIONS_BIT_NV : VkOpticalFlowSessionCreateFlagBitsNV = 8 ;
pub const VkOpticalFlowSessionCreateFlagBitsNV_VK_OPTICAL_FLOW_SESSION_CREATE_BOTH_DIRECTIONS_BIT_NV : VkOpticalFlowSessionCreateFlagBitsNV = 16 ;
pub const VkOpticalFlowSessionCreateFlagBitsNV_VK_OPTICAL_FLOW_SESSION_CREATE_FLAG_BITS_MAX_ENUM_NV : VkOpticalFlowSessionCreateFlagBitsNV = 2147483647 ;
pub const VkOpticalFlowExecuteFlagBitsNV_VK_OPTICAL_FLOW_EXECUTE_DISABLE_TEMPORAL_HINTS_BIT_NV:
    VkOpticalFlowExecuteFlagBitsNV = 1;
pub const VkOpticalFlowExecuteFlagBitsNV_VK_OPTICAL_FLOW_EXECUTE_FLAG_BITS_MAX_ENUM_NV:
    VkOpticalFlowExecuteFlagBitsNV = 2147483647;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceOpticalFlowFeaturesNV"]
        [::core::mem::size_of::<VkPhysicalDeviceOpticalFlowFeaturesNV>() - 12usize];
    ["Alignment of VkPhysicalDeviceOpticalFlowFeaturesNV"]
        [::core::mem::align_of::<VkPhysicalDeviceOpticalFlowFeaturesNV>() - 4usize];
    ["Offset of field: VkPhysicalDeviceOpticalFlowFeaturesNV::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceOpticalFlowFeaturesNV, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceOpticalFlowFeaturesNV::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceOpticalFlowFeaturesNV, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceOpticalFlowFeaturesNV::opticalFlow"]
        [::core::mem::offset_of!(VkPhysicalDeviceOpticalFlowFeaturesNV, opticalFlow) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceOpticalFlowPropertiesNV"]
        [::core::mem::size_of::<VkPhysicalDeviceOpticalFlowPropertiesNV>() - 52usize];
    ["Alignment of VkPhysicalDeviceOpticalFlowPropertiesNV"]
        [::core::mem::align_of::<VkPhysicalDeviceOpticalFlowPropertiesNV>() - 4usize];
    ["Offset of field: VkPhysicalDeviceOpticalFlowPropertiesNV::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceOpticalFlowPropertiesNV, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceOpticalFlowPropertiesNV::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceOpticalFlowPropertiesNV, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceOpticalFlowPropertiesNV::supportedOutputGridSizes"][::core::mem::offset_of!(
        VkPhysicalDeviceOpticalFlowPropertiesNV,
        supportedOutputGridSizes
    )
        - 8usize];
    ["Offset of field: VkPhysicalDeviceOpticalFlowPropertiesNV::supportedHintGridSizes"][::core::mem::offset_of!(
        VkPhysicalDeviceOpticalFlowPropertiesNV,
        supportedHintGridSizes
    )
        - 12usize];
    ["Offset of field: VkPhysicalDeviceOpticalFlowPropertiesNV::hintSupported"]
        [::core::mem::offset_of!(VkPhysicalDeviceOpticalFlowPropertiesNV, hintSupported) - 16usize];
    ["Offset of field: VkPhysicalDeviceOpticalFlowPropertiesNV::costSupported"]
        [::core::mem::offset_of!(VkPhysicalDeviceOpticalFlowPropertiesNV, costSupported) - 20usize];
    ["Offset of field: VkPhysicalDeviceOpticalFlowPropertiesNV::bidirectionalFlowSupported"][::core::mem::offset_of!(
        VkPhysicalDeviceOpticalFlowPropertiesNV,
        bidirectionalFlowSupported
    )
        - 24usize];
    ["Offset of field: VkPhysicalDeviceOpticalFlowPropertiesNV::globalFlowSupported"][::core::mem::offset_of!(
        VkPhysicalDeviceOpticalFlowPropertiesNV,
        globalFlowSupported
    ) - 28usize];
    ["Offset of field: VkPhysicalDeviceOpticalFlowPropertiesNV::minWidth"]
        [::core::mem::offset_of!(VkPhysicalDeviceOpticalFlowPropertiesNV, minWidth) - 32usize];
    ["Offset of field: VkPhysicalDeviceOpticalFlowPropertiesNV::minHeight"]
        [::core::mem::offset_of!(VkPhysicalDeviceOpticalFlowPropertiesNV, minHeight) - 36usize];
    ["Offset of field: VkPhysicalDeviceOpticalFlowPropertiesNV::maxWidth"]
        [::core::mem::offset_of!(VkPhysicalDeviceOpticalFlowPropertiesNV, maxWidth) - 40usize];
    ["Offset of field: VkPhysicalDeviceOpticalFlowPropertiesNV::maxHeight"]
        [::core::mem::offset_of!(VkPhysicalDeviceOpticalFlowPropertiesNV, maxHeight) - 44usize];
    ["Offset of field: VkPhysicalDeviceOpticalFlowPropertiesNV::maxNumRegionsOfInterest"][::core::mem::offset_of!(
        VkPhysicalDeviceOpticalFlowPropertiesNV,
        maxNumRegionsOfInterest
    )
        - 48usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkOpticalFlowImageFormatInfoNV"]
        [::core::mem::size_of::<VkOpticalFlowImageFormatInfoNV>() - 12usize];
    ["Alignment of VkOpticalFlowImageFormatInfoNV"]
        [::core::mem::align_of::<VkOpticalFlowImageFormatInfoNV>() - 4usize];
    ["Offset of field: VkOpticalFlowImageFormatInfoNV::sType"]
        [::core::mem::offset_of!(VkOpticalFlowImageFormatInfoNV, sType) - 0usize];
    ["Offset of field: VkOpticalFlowImageFormatInfoNV::pNext"]
        [::core::mem::offset_of!(VkOpticalFlowImageFormatInfoNV, pNext) - 4usize];
    ["Offset of field: VkOpticalFlowImageFormatInfoNV::usage"]
        [::core::mem::offset_of!(VkOpticalFlowImageFormatInfoNV, usage) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkOpticalFlowImageFormatPropertiesNV"]
        [::core::mem::size_of::<VkOpticalFlowImageFormatPropertiesNV>() - 12usize];
    ["Alignment of VkOpticalFlowImageFormatPropertiesNV"]
        [::core::mem::align_of::<VkOpticalFlowImageFormatPropertiesNV>() - 4usize];
    ["Offset of field: VkOpticalFlowImageFormatPropertiesNV::sType"]
        [::core::mem::offset_of!(VkOpticalFlowImageFormatPropertiesNV, sType) - 0usize];
    ["Offset of field: VkOpticalFlowImageFormatPropertiesNV::pNext"]
        [::core::mem::offset_of!(VkOpticalFlowImageFormatPropertiesNV, pNext) - 4usize];
    ["Offset of field: VkOpticalFlowImageFormatPropertiesNV::format"]
        [::core::mem::offset_of!(VkOpticalFlowImageFormatPropertiesNV, format) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkOpticalFlowSessionCreateInfoNV"]
        [::core::mem::size_of::<VkOpticalFlowSessionCreateInfoNV>() - 44usize];
    ["Alignment of VkOpticalFlowSessionCreateInfoNV"]
        [::core::mem::align_of::<VkOpticalFlowSessionCreateInfoNV>() - 4usize];
    ["Offset of field: VkOpticalFlowSessionCreateInfoNV::sType"]
        [::core::mem::offset_of!(VkOpticalFlowSessionCreateInfoNV, sType) - 0usize];
    ["Offset of field: VkOpticalFlowSessionCreateInfoNV::pNext"]
        [::core::mem::offset_of!(VkOpticalFlowSessionCreateInfoNV, pNext) - 4usize];
    ["Offset of field: VkOpticalFlowSessionCreateInfoNV::width"]
        [::core::mem::offset_of!(VkOpticalFlowSessionCreateInfoNV, width) - 8usize];
    ["Offset of field: VkOpticalFlowSessionCreateInfoNV::height"]
        [::core::mem::offset_of!(VkOpticalFlowSessionCreateInfoNV, height) - 12usize];
    ["Offset of field: VkOpticalFlowSessionCreateInfoNV::imageFormat"]
        [::core::mem::offset_of!(VkOpticalFlowSessionCreateInfoNV, imageFormat) - 16usize];
    ["Offset of field: VkOpticalFlowSessionCreateInfoNV::flowVectorFormat"]
        [::core::mem::offset_of!(VkOpticalFlowSessionCreateInfoNV, flowVectorFormat) - 20usize];
    ["Offset of field: VkOpticalFlowSessionCreateInfoNV::costFormat"]
        [::core::mem::offset_of!(VkOpticalFlowSessionCreateInfoNV, costFormat) - 24usize];
    ["Offset of field: VkOpticalFlowSessionCreateInfoNV::outputGridSize"]
        [::core::mem::offset_of!(VkOpticalFlowSessionCreateInfoNV, outputGridSize) - 28usize];
    ["Offset of field: VkOpticalFlowSessionCreateInfoNV::hintGridSize"]
        [::core::mem::offset_of!(VkOpticalFlowSessionCreateInfoNV, hintGridSize) - 32usize];
    ["Offset of field: VkOpticalFlowSessionCreateInfoNV::performanceLevel"]
        [::core::mem::offset_of!(VkOpticalFlowSessionCreateInfoNV, performanceLevel) - 36usize];
    ["Offset of field: VkOpticalFlowSessionCreateInfoNV::flags"]
        [::core::mem::offset_of!(VkOpticalFlowSessionCreateInfoNV, flags) - 40usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkOpticalFlowSessionCreatePrivateDataInfoNV"]
        [::core::mem::size_of::<VkOpticalFlowSessionCreatePrivateDataInfoNV>() - 20usize];
    ["Alignment of VkOpticalFlowSessionCreatePrivateDataInfoNV"]
        [::core::mem::align_of::<VkOpticalFlowSessionCreatePrivateDataInfoNV>() - 4usize];
    ["Offset of field: VkOpticalFlowSessionCreatePrivateDataInfoNV::sType"]
        [::core::mem::offset_of!(VkOpticalFlowSessionCreatePrivateDataInfoNV, sType) - 0usize];
    ["Offset of field: VkOpticalFlowSessionCreatePrivateDataInfoNV::pNext"]
        [::core::mem::offset_of!(VkOpticalFlowSessionCreatePrivateDataInfoNV, pNext) - 4usize];
    ["Offset of field: VkOpticalFlowSessionCreatePrivateDataInfoNV::id"]
        [::core::mem::offset_of!(VkOpticalFlowSessionCreatePrivateDataInfoNV, id) - 8usize];
    ["Offset of field: VkOpticalFlowSessionCreatePrivateDataInfoNV::size"]
        [::core::mem::offset_of!(VkOpticalFlowSessionCreatePrivateDataInfoNV, size) - 12usize];
    ["Offset of field: VkOpticalFlowSessionCreatePrivateDataInfoNV::pPrivateData"][::core::mem::offset_of!(
        VkOpticalFlowSessionCreatePrivateDataInfoNV,
        pPrivateData
    ) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkOpticalFlowExecuteInfoNV"]
        [::core::mem::size_of::<VkOpticalFlowExecuteInfoNV>() - 20usize];
    ["Alignment of VkOpticalFlowExecuteInfoNV"]
        [::core::mem::align_of::<VkOpticalFlowExecuteInfoNV>() - 4usize];
    ["Offset of field: VkOpticalFlowExecuteInfoNV::sType"]
        [::core::mem::offset_of!(VkOpticalFlowExecuteInfoNV, sType) - 0usize];
    ["Offset of field: VkOpticalFlowExecuteInfoNV::pNext"]
        [::core::mem::offset_of!(VkOpticalFlowExecuteInfoNV, pNext) - 4usize];
    ["Offset of field: VkOpticalFlowExecuteInfoNV::flags"]
        [::core::mem::offset_of!(VkOpticalFlowExecuteInfoNV, flags) - 8usize];
    ["Offset of field: VkOpticalFlowExecuteInfoNV::regionCount"]
        [::core::mem::offset_of!(VkOpticalFlowExecuteInfoNV, regionCount) - 12usize];
    ["Offset of field: VkOpticalFlowExecuteInfoNV::pRegions"]
        [::core::mem::offset_of!(VkOpticalFlowExecuteInfoNV, pRegions) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceLegacyDitheringFeaturesEXT"]
        [::core::mem::size_of::<VkPhysicalDeviceLegacyDitheringFeaturesEXT>() - 12usize];
    ["Alignment of VkPhysicalDeviceLegacyDitheringFeaturesEXT"]
        [::core::mem::align_of::<VkPhysicalDeviceLegacyDitheringFeaturesEXT>() - 4usize];
    ["Offset of field: VkPhysicalDeviceLegacyDitheringFeaturesEXT::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceLegacyDitheringFeaturesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceLegacyDitheringFeaturesEXT::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceLegacyDitheringFeaturesEXT, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceLegacyDitheringFeaturesEXT::legacyDithering"][::core::mem::offset_of!(
        VkPhysicalDeviceLegacyDitheringFeaturesEXT,
        legacyDithering
    ) - 8usize];
};
pub const VkAntiLagModeAMD_VK_ANTI_LAG_MODE_DRIVER_CONTROL_AMD: VkAntiLagModeAMD = 0;
pub const VkAntiLagModeAMD_VK_ANTI_LAG_MODE_ON_AMD: VkAntiLagModeAMD = 1;
pub const VkAntiLagModeAMD_VK_ANTI_LAG_MODE_OFF_AMD: VkAntiLagModeAMD = 2;
pub const VkAntiLagModeAMD_VK_ANTI_LAG_MODE_MAX_ENUM_AMD: VkAntiLagModeAMD = 2147483647;
pub const VkAntiLagStageAMD_VK_ANTI_LAG_STAGE_INPUT_AMD: VkAntiLagStageAMD = 0;
pub const VkAntiLagStageAMD_VK_ANTI_LAG_STAGE_PRESENT_AMD: VkAntiLagStageAMD = 1;
pub const VkAntiLagStageAMD_VK_ANTI_LAG_STAGE_MAX_ENUM_AMD: VkAntiLagStageAMD = 2147483647;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceAntiLagFeaturesAMD"]
        [::core::mem::size_of::<VkPhysicalDeviceAntiLagFeaturesAMD>() - 12usize];
    ["Alignment of VkPhysicalDeviceAntiLagFeaturesAMD"]
        [::core::mem::align_of::<VkPhysicalDeviceAntiLagFeaturesAMD>() - 4usize];
    ["Offset of field: VkPhysicalDeviceAntiLagFeaturesAMD::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceAntiLagFeaturesAMD, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceAntiLagFeaturesAMD::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceAntiLagFeaturesAMD, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceAntiLagFeaturesAMD::antiLag"]
        [::core::mem::offset_of!(VkPhysicalDeviceAntiLagFeaturesAMD, antiLag) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkAntiLagPresentationInfoAMD"]
        [::core::mem::size_of::<VkAntiLagPresentationInfoAMD>() - 24usize];
    ["Alignment of VkAntiLagPresentationInfoAMD"]
        [::core::mem::align_of::<VkAntiLagPresentationInfoAMD>() - 8usize];
    ["Offset of field: VkAntiLagPresentationInfoAMD::sType"]
        [::core::mem::offset_of!(VkAntiLagPresentationInfoAMD, sType) - 0usize];
    ["Offset of field: VkAntiLagPresentationInfoAMD::pNext"]
        [::core::mem::offset_of!(VkAntiLagPresentationInfoAMD, pNext) - 4usize];
    ["Offset of field: VkAntiLagPresentationInfoAMD::stage"]
        [::core::mem::offset_of!(VkAntiLagPresentationInfoAMD, stage) - 8usize];
    ["Offset of field: VkAntiLagPresentationInfoAMD::frameIndex"]
        [::core::mem::offset_of!(VkAntiLagPresentationInfoAMD, frameIndex) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkAntiLagDataAMD"][::core::mem::size_of::<VkAntiLagDataAMD>() - 20usize];
    ["Alignment of VkAntiLagDataAMD"][::core::mem::align_of::<VkAntiLagDataAMD>() - 4usize];
    ["Offset of field: VkAntiLagDataAMD::sType"]
        [::core::mem::offset_of!(VkAntiLagDataAMD, sType) - 0usize];
    ["Offset of field: VkAntiLagDataAMD::pNext"]
        [::core::mem::offset_of!(VkAntiLagDataAMD, pNext) - 4usize];
    ["Offset of field: VkAntiLagDataAMD::mode"]
        [::core::mem::offset_of!(VkAntiLagDataAMD, mode) - 8usize];
    ["Offset of field: VkAntiLagDataAMD::maxFPS"]
        [::core::mem::offset_of!(VkAntiLagDataAMD, maxFPS) - 12usize];
    ["Offset of field: VkAntiLagDataAMD::pPresentationInfo"]
        [::core::mem::offset_of!(VkAntiLagDataAMD, pPresentationInfo) - 16usize];
};
pub const VkShaderCodeTypeEXT_VK_SHADER_CODE_TYPE_BINARY_EXT: VkShaderCodeTypeEXT = 0;
pub const VkShaderCodeTypeEXT_VK_SHADER_CODE_TYPE_SPIRV_EXT: VkShaderCodeTypeEXT = 1;
pub const VkShaderCodeTypeEXT_VK_SHADER_CODE_TYPE_MAX_ENUM_EXT: VkShaderCodeTypeEXT = 2147483647;
pub const VkDepthClampModeEXT_VK_DEPTH_CLAMP_MODE_VIEWPORT_RANGE_EXT: VkDepthClampModeEXT = 0;
pub const VkDepthClampModeEXT_VK_DEPTH_CLAMP_MODE_USER_DEFINED_RANGE_EXT: VkDepthClampModeEXT = 1;
pub const VkDepthClampModeEXT_VK_DEPTH_CLAMP_MODE_MAX_ENUM_EXT: VkDepthClampModeEXT = 2147483647;
pub const VkShaderCreateFlagBitsEXT_VK_SHADER_CREATE_LINK_STAGE_BIT_EXT: VkShaderCreateFlagBitsEXT =
    1;
pub const VkShaderCreateFlagBitsEXT_VK_SHADER_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT:
    VkShaderCreateFlagBitsEXT = 2;
pub const VkShaderCreateFlagBitsEXT_VK_SHADER_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT:
    VkShaderCreateFlagBitsEXT = 4;
pub const VkShaderCreateFlagBitsEXT_VK_SHADER_CREATE_NO_TASK_SHADER_BIT_EXT:
    VkShaderCreateFlagBitsEXT = 8;
pub const VkShaderCreateFlagBitsEXT_VK_SHADER_CREATE_DISPATCH_BASE_BIT_EXT:
    VkShaderCreateFlagBitsEXT = 16;
pub const VkShaderCreateFlagBitsEXT_VK_SHADER_CREATE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_EXT:
    VkShaderCreateFlagBitsEXT = 32;
pub const VkShaderCreateFlagBitsEXT_VK_SHADER_CREATE_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT:
    VkShaderCreateFlagBitsEXT = 64;
pub const VkShaderCreateFlagBitsEXT_VK_SHADER_CREATE_INDIRECT_BINDABLE_BIT_EXT:
    VkShaderCreateFlagBitsEXT = 128;
pub const VkShaderCreateFlagBitsEXT_VK_SHADER_CREATE_FLAG_BITS_MAX_ENUM_EXT:
    VkShaderCreateFlagBitsEXT = 2147483647;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceShaderObjectFeaturesEXT"]
        [::core::mem::size_of::<VkPhysicalDeviceShaderObjectFeaturesEXT>() - 12usize];
    ["Alignment of VkPhysicalDeviceShaderObjectFeaturesEXT"]
        [::core::mem::align_of::<VkPhysicalDeviceShaderObjectFeaturesEXT>() - 4usize];
    ["Offset of field: VkPhysicalDeviceShaderObjectFeaturesEXT::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceShaderObjectFeaturesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceShaderObjectFeaturesEXT::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceShaderObjectFeaturesEXT, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceShaderObjectFeaturesEXT::shaderObject"]
        [::core::mem::offset_of!(VkPhysicalDeviceShaderObjectFeaturesEXT, shaderObject) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceShaderObjectPropertiesEXT"]
        [::core::mem::size_of::<VkPhysicalDeviceShaderObjectPropertiesEXT>() - 28usize];
    ["Alignment of VkPhysicalDeviceShaderObjectPropertiesEXT"]
        [::core::mem::align_of::<VkPhysicalDeviceShaderObjectPropertiesEXT>() - 4usize];
    ["Offset of field: VkPhysicalDeviceShaderObjectPropertiesEXT::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceShaderObjectPropertiesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceShaderObjectPropertiesEXT::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceShaderObjectPropertiesEXT, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceShaderObjectPropertiesEXT::shaderBinaryUUID"][::core::mem::offset_of!(
        VkPhysicalDeviceShaderObjectPropertiesEXT,
        shaderBinaryUUID
    ) - 8usize];
    ["Offset of field: VkPhysicalDeviceShaderObjectPropertiesEXT::shaderBinaryVersion"][::core::mem::offset_of!(
        VkPhysicalDeviceShaderObjectPropertiesEXT,
        shaderBinaryVersion
    )
        - 24usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkShaderCreateInfoEXT"][::core::mem::size_of::<VkShaderCreateInfoEXT>() - 56usize];
    ["Alignment of VkShaderCreateInfoEXT"]
        [::core::mem::align_of::<VkShaderCreateInfoEXT>() - 4usize];
    ["Offset of field: VkShaderCreateInfoEXT::sType"]
        [::core::mem::offset_of!(VkShaderCreateInfoEXT, sType) - 0usize];
    ["Offset of field: VkShaderCreateInfoEXT::pNext"]
        [::core::mem::offset_of!(VkShaderCreateInfoEXT, pNext) - 4usize];
    ["Offset of field: VkShaderCreateInfoEXT::flags"]
        [::core::mem::offset_of!(VkShaderCreateInfoEXT, flags) - 8usize];
    ["Offset of field: VkShaderCreateInfoEXT::stage"]
        [::core::mem::offset_of!(VkShaderCreateInfoEXT, stage) - 12usize];
    ["Offset of field: VkShaderCreateInfoEXT::nextStage"]
        [::core::mem::offset_of!(VkShaderCreateInfoEXT, nextStage) - 16usize];
    ["Offset of field: VkShaderCreateInfoEXT::codeType"]
        [::core::mem::offset_of!(VkShaderCreateInfoEXT, codeType) - 20usize];
    ["Offset of field: VkShaderCreateInfoEXT::codeSize"]
        [::core::mem::offset_of!(VkShaderCreateInfoEXT, codeSize) - 24usize];
    ["Offset of field: VkShaderCreateInfoEXT::pCode"]
        [::core::mem::offset_of!(VkShaderCreateInfoEXT, pCode) - 28usize];
    ["Offset of field: VkShaderCreateInfoEXT::pName"]
        [::core::mem::offset_of!(VkShaderCreateInfoEXT, pName) - 32usize];
    ["Offset of field: VkShaderCreateInfoEXT::setLayoutCount"]
        [::core::mem::offset_of!(VkShaderCreateInfoEXT, setLayoutCount) - 36usize];
    ["Offset of field: VkShaderCreateInfoEXT::pSetLayouts"]
        [::core::mem::offset_of!(VkShaderCreateInfoEXT, pSetLayouts) - 40usize];
    ["Offset of field: VkShaderCreateInfoEXT::pushConstantRangeCount"]
        [::core::mem::offset_of!(VkShaderCreateInfoEXT, pushConstantRangeCount) - 44usize];
    ["Offset of field: VkShaderCreateInfoEXT::pPushConstantRanges"]
        [::core::mem::offset_of!(VkShaderCreateInfoEXT, pPushConstantRanges) - 48usize];
    ["Offset of field: VkShaderCreateInfoEXT::pSpecializationInfo"]
        [::core::mem::offset_of!(VkShaderCreateInfoEXT, pSpecializationInfo) - 52usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDepthClampRangeEXT"][::core::mem::size_of::<VkDepthClampRangeEXT>() - 8usize];
    ["Alignment of VkDepthClampRangeEXT"][::core::mem::align_of::<VkDepthClampRangeEXT>() - 4usize];
    ["Offset of field: VkDepthClampRangeEXT::minDepthClamp"]
        [::core::mem::offset_of!(VkDepthClampRangeEXT, minDepthClamp) - 0usize];
    ["Offset of field: VkDepthClampRangeEXT::maxDepthClamp"]
        [::core::mem::offset_of!(VkDepthClampRangeEXT, maxDepthClamp) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceTilePropertiesFeaturesQCOM"]
        [::core::mem::size_of::<VkPhysicalDeviceTilePropertiesFeaturesQCOM>() - 12usize];
    ["Alignment of VkPhysicalDeviceTilePropertiesFeaturesQCOM"]
        [::core::mem::align_of::<VkPhysicalDeviceTilePropertiesFeaturesQCOM>() - 4usize];
    ["Offset of field: VkPhysicalDeviceTilePropertiesFeaturesQCOM::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceTilePropertiesFeaturesQCOM, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceTilePropertiesFeaturesQCOM::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceTilePropertiesFeaturesQCOM, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceTilePropertiesFeaturesQCOM::tileProperties"][::core::mem::offset_of!(
        VkPhysicalDeviceTilePropertiesFeaturesQCOM,
        tileProperties
    ) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkTilePropertiesQCOM"][::core::mem::size_of::<VkTilePropertiesQCOM>() - 36usize];
    ["Alignment of VkTilePropertiesQCOM"][::core::mem::align_of::<VkTilePropertiesQCOM>() - 4usize];
    ["Offset of field: VkTilePropertiesQCOM::sType"]
        [::core::mem::offset_of!(VkTilePropertiesQCOM, sType) - 0usize];
    ["Offset of field: VkTilePropertiesQCOM::pNext"]
        [::core::mem::offset_of!(VkTilePropertiesQCOM, pNext) - 4usize];
    ["Offset of field: VkTilePropertiesQCOM::tileSize"]
        [::core::mem::offset_of!(VkTilePropertiesQCOM, tileSize) - 8usize];
    ["Offset of field: VkTilePropertiesQCOM::apronSize"]
        [::core::mem::offset_of!(VkTilePropertiesQCOM, apronSize) - 20usize];
    ["Offset of field: VkTilePropertiesQCOM::origin"]
        [::core::mem::offset_of!(VkTilePropertiesQCOM, origin) - 28usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceAmigoProfilingFeaturesSEC"]
        [::core::mem::size_of::<VkPhysicalDeviceAmigoProfilingFeaturesSEC>() - 12usize];
    ["Alignment of VkPhysicalDeviceAmigoProfilingFeaturesSEC"]
        [::core::mem::align_of::<VkPhysicalDeviceAmigoProfilingFeaturesSEC>() - 4usize];
    ["Offset of field: VkPhysicalDeviceAmigoProfilingFeaturesSEC::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceAmigoProfilingFeaturesSEC, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceAmigoProfilingFeaturesSEC::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceAmigoProfilingFeaturesSEC, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceAmigoProfilingFeaturesSEC::amigoProfiling"][::core::mem::offset_of!(
        VkPhysicalDeviceAmigoProfilingFeaturesSEC,
        amigoProfiling
    ) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkAmigoProfilingSubmitInfoSEC"]
        [::core::mem::size_of::<VkAmigoProfilingSubmitInfoSEC>() - 24usize];
    ["Alignment of VkAmigoProfilingSubmitInfoSEC"]
        [::core::mem::align_of::<VkAmigoProfilingSubmitInfoSEC>() - 8usize];
    ["Offset of field: VkAmigoProfilingSubmitInfoSEC::sType"]
        [::core::mem::offset_of!(VkAmigoProfilingSubmitInfoSEC, sType) - 0usize];
    ["Offset of field: VkAmigoProfilingSubmitInfoSEC::pNext"]
        [::core::mem::offset_of!(VkAmigoProfilingSubmitInfoSEC, pNext) - 4usize];
    ["Offset of field: VkAmigoProfilingSubmitInfoSEC::firstDrawTimestamp"]
        [::core::mem::offset_of!(VkAmigoProfilingSubmitInfoSEC, firstDrawTimestamp) - 8usize];
    ["Offset of field: VkAmigoProfilingSubmitInfoSEC::swapBufferTimestamp"]
        [::core::mem::offset_of!(VkAmigoProfilingSubmitInfoSEC, swapBufferTimestamp) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM"]
        [::core::mem::size_of::<VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM>() - 12usize];
    ["Alignment of VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM"]
        [::core::mem::align_of::<VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM>() - 4usize];
    ["Offset of field: VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM::sType"][::core::mem::offset_of!(
        VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM::pNext"][::core::mem::offset_of!(
        VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM,
        pNext
    ) - 4usize];
    ["Offset of field: VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM::multiviewPerViewViewports"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM , multiviewPerViewViewports) - 8usize] ;
};
pub const VkRayTracingInvocationReorderModeNV_VK_RAY_TRACING_INVOCATION_REORDER_MODE_NONE_NV:
    VkRayTracingInvocationReorderModeNV = 0;
pub const VkRayTracingInvocationReorderModeNV_VK_RAY_TRACING_INVOCATION_REORDER_MODE_REORDER_NV:
    VkRayTracingInvocationReorderModeNV = 1;
pub const VkRayTracingInvocationReorderModeNV_VK_RAY_TRACING_INVOCATION_REORDER_MODE_MAX_ENUM_NV:
    VkRayTracingInvocationReorderModeNV = 2147483647;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV"][::core::mem::size_of::<
        VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV,
    >() - 12usize];
    ["Alignment of VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV"][::core::mem::align_of::<
        VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV,
    >() - 4usize];
    ["Offset of field: VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV::sType"][::core::mem::offset_of!(
        VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV::pNext"][::core::mem::offset_of!(
        VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV,
        pNext
    ) - 4usize];
    ["Offset of field: VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV::rayTracingInvocationReorderReorderingHint"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV , rayTracingInvocationReorderReorderingHint) - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV"]
        [::core::mem::size_of::<VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV>() - 12usize];
    ["Alignment of VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV"]
        [::core::mem::align_of::<VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV>() - 4usize];
    ["Offset of field: VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV::sType"][::core::mem::offset_of!(
        VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV::pNext"][::core::mem::offset_of!(
        VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV,
        pNext
    ) - 4usize];
    ["Offset of field: VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV::rayTracingInvocationReorder"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV , rayTracingInvocationReorder) - 8usize] ;
};
pub const VkCooperativeVectorMatrixLayoutNV_VK_COOPERATIVE_VECTOR_MATRIX_LAYOUT_ROW_MAJOR_NV:
    VkCooperativeVectorMatrixLayoutNV = 0;
pub const VkCooperativeVectorMatrixLayoutNV_VK_COOPERATIVE_VECTOR_MATRIX_LAYOUT_COLUMN_MAJOR_NV:
    VkCooperativeVectorMatrixLayoutNV = 1;
pub const VkCooperativeVectorMatrixLayoutNV_VK_COOPERATIVE_VECTOR_MATRIX_LAYOUT_INFERENCING_OPTIMAL_NV : VkCooperativeVectorMatrixLayoutNV = 2 ;
pub const VkCooperativeVectorMatrixLayoutNV_VK_COOPERATIVE_VECTOR_MATRIX_LAYOUT_TRAINING_OPTIMAL_NV : VkCooperativeVectorMatrixLayoutNV = 3 ;
pub const VkCooperativeVectorMatrixLayoutNV_VK_COOPERATIVE_VECTOR_MATRIX_LAYOUT_MAX_ENUM_NV:
    VkCooperativeVectorMatrixLayoutNV = 2147483647;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceCooperativeVectorPropertiesNV"]
        [::core::mem::size_of::<VkPhysicalDeviceCooperativeVectorPropertiesNV>() - 24usize];
    ["Alignment of VkPhysicalDeviceCooperativeVectorPropertiesNV"]
        [::core::mem::align_of::<VkPhysicalDeviceCooperativeVectorPropertiesNV>() - 4usize];
    ["Offset of field: VkPhysicalDeviceCooperativeVectorPropertiesNV::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceCooperativeVectorPropertiesNV, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceCooperativeVectorPropertiesNV::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceCooperativeVectorPropertiesNV, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceCooperativeVectorPropertiesNV::cooperativeVectorSupportedStages"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceCooperativeVectorPropertiesNV , cooperativeVectorSupportedStages) - 8usize] ;
    ["Offset of field: VkPhysicalDeviceCooperativeVectorPropertiesNV::cooperativeVectorTrainingFloat16Accumulation"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceCooperativeVectorPropertiesNV , cooperativeVectorTrainingFloat16Accumulation) - 12usize] ;
    ["Offset of field: VkPhysicalDeviceCooperativeVectorPropertiesNV::cooperativeVectorTrainingFloat32Accumulation"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceCooperativeVectorPropertiesNV , cooperativeVectorTrainingFloat32Accumulation) - 16usize] ;
    ["Offset of field: VkPhysicalDeviceCooperativeVectorPropertiesNV::maxCooperativeVectorComponents"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceCooperativeVectorPropertiesNV , maxCooperativeVectorComponents) - 20usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceCooperativeVectorFeaturesNV"]
        [::core::mem::size_of::<VkPhysicalDeviceCooperativeVectorFeaturesNV>() - 16usize];
    ["Alignment of VkPhysicalDeviceCooperativeVectorFeaturesNV"]
        [::core::mem::align_of::<VkPhysicalDeviceCooperativeVectorFeaturesNV>() - 4usize];
    ["Offset of field: VkPhysicalDeviceCooperativeVectorFeaturesNV::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceCooperativeVectorFeaturesNV, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceCooperativeVectorFeaturesNV::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceCooperativeVectorFeaturesNV, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceCooperativeVectorFeaturesNV::cooperativeVector"][::core::mem::offset_of!(
        VkPhysicalDeviceCooperativeVectorFeaturesNV,
        cooperativeVector
    ) - 8usize];
    ["Offset of field: VkPhysicalDeviceCooperativeVectorFeaturesNV::cooperativeVectorTraining"][::core::mem::offset_of!(
        VkPhysicalDeviceCooperativeVectorFeaturesNV,
        cooperativeVectorTraining
    )
        - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkCooperativeVectorPropertiesNV"]
        [::core::mem::size_of::<VkCooperativeVectorPropertiesNV>() - 32usize];
    ["Alignment of VkCooperativeVectorPropertiesNV"]
        [::core::mem::align_of::<VkCooperativeVectorPropertiesNV>() - 4usize];
    ["Offset of field: VkCooperativeVectorPropertiesNV::sType"]
        [::core::mem::offset_of!(VkCooperativeVectorPropertiesNV, sType) - 0usize];
    ["Offset of field: VkCooperativeVectorPropertiesNV::pNext"]
        [::core::mem::offset_of!(VkCooperativeVectorPropertiesNV, pNext) - 4usize];
    ["Offset of field: VkCooperativeVectorPropertiesNV::inputType"]
        [::core::mem::offset_of!(VkCooperativeVectorPropertiesNV, inputType) - 8usize];
    ["Offset of field: VkCooperativeVectorPropertiesNV::inputInterpretation"]
        [::core::mem::offset_of!(VkCooperativeVectorPropertiesNV, inputInterpretation) - 12usize];
    ["Offset of field: VkCooperativeVectorPropertiesNV::matrixInterpretation"]
        [::core::mem::offset_of!(VkCooperativeVectorPropertiesNV, matrixInterpretation) - 16usize];
    ["Offset of field: VkCooperativeVectorPropertiesNV::biasInterpretation"]
        [::core::mem::offset_of!(VkCooperativeVectorPropertiesNV, biasInterpretation) - 20usize];
    ["Offset of field: VkCooperativeVectorPropertiesNV::resultType"]
        [::core::mem::offset_of!(VkCooperativeVectorPropertiesNV, resultType) - 24usize];
    ["Offset of field: VkCooperativeVectorPropertiesNV::transpose"]
        [::core::mem::offset_of!(VkCooperativeVectorPropertiesNV, transpose) - 28usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkConvertCooperativeVectorMatrixInfoNV"]
        [::core::mem::size_of::<VkConvertCooperativeVectorMatrixInfoNV>() - 72usize];
    ["Alignment of VkConvertCooperativeVectorMatrixInfoNV"]
        [::core::mem::align_of::<VkConvertCooperativeVectorMatrixInfoNV>() - 8usize];
    ["Offset of field: VkConvertCooperativeVectorMatrixInfoNV::sType"]
        [::core::mem::offset_of!(VkConvertCooperativeVectorMatrixInfoNV, sType) - 0usize];
    ["Offset of field: VkConvertCooperativeVectorMatrixInfoNV::pNext"]
        [::core::mem::offset_of!(VkConvertCooperativeVectorMatrixInfoNV, pNext) - 4usize];
    ["Offset of field: VkConvertCooperativeVectorMatrixInfoNV::srcSize"]
        [::core::mem::offset_of!(VkConvertCooperativeVectorMatrixInfoNV, srcSize) - 8usize];
    ["Offset of field: VkConvertCooperativeVectorMatrixInfoNV::srcData"]
        [::core::mem::offset_of!(VkConvertCooperativeVectorMatrixInfoNV, srcData) - 16usize];
    ["Offset of field: VkConvertCooperativeVectorMatrixInfoNV::pDstSize"]
        [::core::mem::offset_of!(VkConvertCooperativeVectorMatrixInfoNV, pDstSize) - 24usize];
    ["Offset of field: VkConvertCooperativeVectorMatrixInfoNV::dstData"]
        [::core::mem::offset_of!(VkConvertCooperativeVectorMatrixInfoNV, dstData) - 32usize];
    ["Offset of field: VkConvertCooperativeVectorMatrixInfoNV::srcComponentType"][::core::mem::offset_of!(
        VkConvertCooperativeVectorMatrixInfoNV,
        srcComponentType
    ) - 40usize];
    ["Offset of field: VkConvertCooperativeVectorMatrixInfoNV::dstComponentType"][::core::mem::offset_of!(
        VkConvertCooperativeVectorMatrixInfoNV,
        dstComponentType
    ) - 44usize];
    ["Offset of field: VkConvertCooperativeVectorMatrixInfoNV::numRows"]
        [::core::mem::offset_of!(VkConvertCooperativeVectorMatrixInfoNV, numRows) - 48usize];
    ["Offset of field: VkConvertCooperativeVectorMatrixInfoNV::numColumns"]
        [::core::mem::offset_of!(VkConvertCooperativeVectorMatrixInfoNV, numColumns) - 52usize];
    ["Offset of field: VkConvertCooperativeVectorMatrixInfoNV::srcLayout"]
        [::core::mem::offset_of!(VkConvertCooperativeVectorMatrixInfoNV, srcLayout) - 56usize];
    ["Offset of field: VkConvertCooperativeVectorMatrixInfoNV::srcStride"]
        [::core::mem::offset_of!(VkConvertCooperativeVectorMatrixInfoNV, srcStride) - 60usize];
    ["Offset of field: VkConvertCooperativeVectorMatrixInfoNV::dstLayout"]
        [::core::mem::offset_of!(VkConvertCooperativeVectorMatrixInfoNV, dstLayout) - 64usize];
    ["Offset of field: VkConvertCooperativeVectorMatrixInfoNV::dstStride"]
        [::core::mem::offset_of!(VkConvertCooperativeVectorMatrixInfoNV, dstStride) - 68usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV"]
        [::core::mem::size_of::<VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV>() - 12usize];
    ["Alignment of VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV"]
        [::core::mem::align_of::<VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV>() - 4usize];
    ["Offset of field: VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV::sType"][::core::mem::offset_of!(
        VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV::pNext"][::core::mem::offset_of!(
        VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV,
        pNext
    ) - 4usize];
    ["Offset of field: VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV::extendedSparseAddressSpace"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV , extendedSparseAddressSpace) - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV"][::core::mem::size_of::<
        VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV,
    >() - 24usize];
    ["Alignment of VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV"][::core::mem::align_of::<
        VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV,
    >() - 8usize];
    ["Offset of field: VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV::sType"][::core::mem::offset_of!(
        VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV::pNext"][::core::mem::offset_of!(
        VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV,
        pNext
    ) - 4usize];
    ["Offset of field: VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV::extendedSparseAddressSpaceSize"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV , extendedSparseAddressSpaceSize) - 8usize] ;
    ["Offset of field: VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV::extendedSparseImageUsageFlags"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV , extendedSparseImageUsageFlags) - 16usize] ;
    ["Offset of field: VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV::extendedSparseBufferUsageFlags"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV , extendedSparseBufferUsageFlags) - 20usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceLegacyVertexAttributesFeaturesEXT"]
        [::core::mem::size_of::<VkPhysicalDeviceLegacyVertexAttributesFeaturesEXT>() - 12usize];
    ["Alignment of VkPhysicalDeviceLegacyVertexAttributesFeaturesEXT"]
        [::core::mem::align_of::<VkPhysicalDeviceLegacyVertexAttributesFeaturesEXT>() - 4usize];
    ["Offset of field: VkPhysicalDeviceLegacyVertexAttributesFeaturesEXT::sType"][::core::mem::offset_of!(
        VkPhysicalDeviceLegacyVertexAttributesFeaturesEXT,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceLegacyVertexAttributesFeaturesEXT::pNext"][::core::mem::offset_of!(
        VkPhysicalDeviceLegacyVertexAttributesFeaturesEXT,
        pNext
    ) - 4usize];
    ["Offset of field: VkPhysicalDeviceLegacyVertexAttributesFeaturesEXT::legacyVertexAttributes"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceLegacyVertexAttributesFeaturesEXT , legacyVertexAttributes) - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceLegacyVertexAttributesPropertiesEXT"]
        [::core::mem::size_of::<VkPhysicalDeviceLegacyVertexAttributesPropertiesEXT>() - 12usize];
    ["Alignment of VkPhysicalDeviceLegacyVertexAttributesPropertiesEXT"]
        [::core::mem::align_of::<VkPhysicalDeviceLegacyVertexAttributesPropertiesEXT>() - 4usize];
    ["Offset of field: VkPhysicalDeviceLegacyVertexAttributesPropertiesEXT::sType"][::core::mem::offset_of!(
        VkPhysicalDeviceLegacyVertexAttributesPropertiesEXT,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceLegacyVertexAttributesPropertiesEXT::pNext"][::core::mem::offset_of!(
        VkPhysicalDeviceLegacyVertexAttributesPropertiesEXT,
        pNext
    ) - 4usize];
    ["Offset of field: VkPhysicalDeviceLegacyVertexAttributesPropertiesEXT::nativeUnalignedPerformance"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceLegacyVertexAttributesPropertiesEXT , nativeUnalignedPerformance) - 8usize] ;
};
pub const VkLayerSettingTypeEXT_VK_LAYER_SETTING_TYPE_BOOL32_EXT: VkLayerSettingTypeEXT = 0;
pub const VkLayerSettingTypeEXT_VK_LAYER_SETTING_TYPE_INT32_EXT: VkLayerSettingTypeEXT = 1;
pub const VkLayerSettingTypeEXT_VK_LAYER_SETTING_TYPE_INT64_EXT: VkLayerSettingTypeEXT = 2;
pub const VkLayerSettingTypeEXT_VK_LAYER_SETTING_TYPE_UINT32_EXT: VkLayerSettingTypeEXT = 3;
pub const VkLayerSettingTypeEXT_VK_LAYER_SETTING_TYPE_UINT64_EXT: VkLayerSettingTypeEXT = 4;
pub const VkLayerSettingTypeEXT_VK_LAYER_SETTING_TYPE_FLOAT32_EXT: VkLayerSettingTypeEXT = 5;
pub const VkLayerSettingTypeEXT_VK_LAYER_SETTING_TYPE_FLOAT64_EXT: VkLayerSettingTypeEXT = 6;
pub const VkLayerSettingTypeEXT_VK_LAYER_SETTING_TYPE_STRING_EXT: VkLayerSettingTypeEXT = 7;
pub const VkLayerSettingTypeEXT_VK_LAYER_SETTING_TYPE_MAX_ENUM_EXT: VkLayerSettingTypeEXT =
    2147483647;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkLayerSettingEXT"][::core::mem::size_of::<VkLayerSettingEXT>() - 20usize];
    ["Alignment of VkLayerSettingEXT"][::core::mem::align_of::<VkLayerSettingEXT>() - 4usize];
    ["Offset of field: VkLayerSettingEXT::pLayerName"]
        [::core::mem::offset_of!(VkLayerSettingEXT, pLayerName) - 0usize];
    ["Offset of field: VkLayerSettingEXT::pSettingName"]
        [::core::mem::offset_of!(VkLayerSettingEXT, pSettingName) - 4usize];
    ["Offset of field: VkLayerSettingEXT::type_"]
        [::core::mem::offset_of!(VkLayerSettingEXT, type_) - 8usize];
    ["Offset of field: VkLayerSettingEXT::valueCount"]
        [::core::mem::offset_of!(VkLayerSettingEXT, valueCount) - 12usize];
    ["Offset of field: VkLayerSettingEXT::pValues"]
        [::core::mem::offset_of!(VkLayerSettingEXT, pValues) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkLayerSettingsCreateInfoEXT"]
        [::core::mem::size_of::<VkLayerSettingsCreateInfoEXT>() - 16usize];
    ["Alignment of VkLayerSettingsCreateInfoEXT"]
        [::core::mem::align_of::<VkLayerSettingsCreateInfoEXT>() - 4usize];
    ["Offset of field: VkLayerSettingsCreateInfoEXT::sType"]
        [::core::mem::offset_of!(VkLayerSettingsCreateInfoEXT, sType) - 0usize];
    ["Offset of field: VkLayerSettingsCreateInfoEXT::pNext"]
        [::core::mem::offset_of!(VkLayerSettingsCreateInfoEXT, pNext) - 4usize];
    ["Offset of field: VkLayerSettingsCreateInfoEXT::settingCount"]
        [::core::mem::offset_of!(VkLayerSettingsCreateInfoEXT, settingCount) - 8usize];
    ["Offset of field: VkLayerSettingsCreateInfoEXT::pSettings"]
        [::core::mem::offset_of!(VkLayerSettingsCreateInfoEXT, pSettings) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM"]
        [::core::mem::size_of::<VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM>() - 12usize];
    ["Alignment of VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM"]
        [::core::mem::align_of::<VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM>() - 4usize];
    ["Offset of field: VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM::shaderCoreBuiltins"][::core::mem::offset_of!(
        VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM,
        shaderCoreBuiltins
    )
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM"]
        [::core::mem::size_of::<VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM>() - 24usize];
    ["Alignment of VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM"]
        [::core::mem::align_of::<VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM>() - 8usize];
    ["Offset of field: VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM::shaderCoreMask"][::core::mem::offset_of!(
        VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM,
        shaderCoreMask
    )
        - 8usize];
    ["Offset of field: VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM::shaderCoreCount"][::core::mem::offset_of!(
        VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM,
        shaderCoreCount
    )
        - 16usize];
    ["Offset of field: VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM::shaderWarpsPerCore"][::core::mem::offset_of!(
        VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM,
        shaderWarpsPerCore
    )
        - 20usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT"][::core::mem::size_of::<
        VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT,
    >() - 12usize];
    ["Alignment of VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT"][::core::mem::align_of::<
        VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT,
    >() - 4usize];
    ["Offset of field: VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT::sType"][::core::mem::offset_of!(
        VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT::pNext"][::core::mem::offset_of!(
        VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT,
        pNext
    ) - 4usize];
    ["Offset of field: VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT::pipelineLibraryGroupHandles"] [:: core :: mem :: offset_of ! (VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT , pipelineLibraryGroupHandles) - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT"][::core::mem::size_of::<
        VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT,
    >() - 12usize];
    ["Alignment of VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT"]
        [::core::mem::align_of::<VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT>()
            - 4usize];
    ["Offset of field: VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT::sType"][::core::mem::offset_of!(
        VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT,
        sType
    )
        - 0usize];
    ["Offset of field: VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT::pNext"][::core::mem::offset_of!(
        VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT,
        pNext
    )
        - 4usize];
    ["Offset of field: VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT::dynamicRenderingUnusedAttachments"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT , dynamicRenderingUnusedAttachments) - 8usize] ;
};
pub const VkLatencyMarkerNV_VK_LATENCY_MARKER_SIMULATION_START_NV: VkLatencyMarkerNV = 0;
pub const VkLatencyMarkerNV_VK_LATENCY_MARKER_SIMULATION_END_NV: VkLatencyMarkerNV = 1;
pub const VkLatencyMarkerNV_VK_LATENCY_MARKER_RENDERSUBMIT_START_NV: VkLatencyMarkerNV = 2;
pub const VkLatencyMarkerNV_VK_LATENCY_MARKER_RENDERSUBMIT_END_NV: VkLatencyMarkerNV = 3;
pub const VkLatencyMarkerNV_VK_LATENCY_MARKER_PRESENT_START_NV: VkLatencyMarkerNV = 4;
pub const VkLatencyMarkerNV_VK_LATENCY_MARKER_PRESENT_END_NV: VkLatencyMarkerNV = 5;
pub const VkLatencyMarkerNV_VK_LATENCY_MARKER_INPUT_SAMPLE_NV: VkLatencyMarkerNV = 6;
pub const VkLatencyMarkerNV_VK_LATENCY_MARKER_TRIGGER_FLASH_NV: VkLatencyMarkerNV = 7;
pub const VkLatencyMarkerNV_VK_LATENCY_MARKER_OUT_OF_BAND_RENDERSUBMIT_START_NV: VkLatencyMarkerNV =
    8;
pub const VkLatencyMarkerNV_VK_LATENCY_MARKER_OUT_OF_BAND_RENDERSUBMIT_END_NV: VkLatencyMarkerNV =
    9;
pub const VkLatencyMarkerNV_VK_LATENCY_MARKER_OUT_OF_BAND_PRESENT_START_NV: VkLatencyMarkerNV = 10;
pub const VkLatencyMarkerNV_VK_LATENCY_MARKER_OUT_OF_BAND_PRESENT_END_NV: VkLatencyMarkerNV = 11;
pub const VkLatencyMarkerNV_VK_LATENCY_MARKER_MAX_ENUM_NV: VkLatencyMarkerNV = 2147483647;
pub const VkOutOfBandQueueTypeNV_VK_OUT_OF_BAND_QUEUE_TYPE_RENDER_NV: VkOutOfBandQueueTypeNV = 0;
pub const VkOutOfBandQueueTypeNV_VK_OUT_OF_BAND_QUEUE_TYPE_PRESENT_NV: VkOutOfBandQueueTypeNV = 1;
pub const VkOutOfBandQueueTypeNV_VK_OUT_OF_BAND_QUEUE_TYPE_MAX_ENUM_NV: VkOutOfBandQueueTypeNV =
    2147483647;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkLatencySleepModeInfoNV"]
        [::core::mem::size_of::<VkLatencySleepModeInfoNV>() - 20usize];
    ["Alignment of VkLatencySleepModeInfoNV"]
        [::core::mem::align_of::<VkLatencySleepModeInfoNV>() - 4usize];
    ["Offset of field: VkLatencySleepModeInfoNV::sType"]
        [::core::mem::offset_of!(VkLatencySleepModeInfoNV, sType) - 0usize];
    ["Offset of field: VkLatencySleepModeInfoNV::pNext"]
        [::core::mem::offset_of!(VkLatencySleepModeInfoNV, pNext) - 4usize];
    ["Offset of field: VkLatencySleepModeInfoNV::lowLatencyMode"]
        [::core::mem::offset_of!(VkLatencySleepModeInfoNV, lowLatencyMode) - 8usize];
    ["Offset of field: VkLatencySleepModeInfoNV::lowLatencyBoost"]
        [::core::mem::offset_of!(VkLatencySleepModeInfoNV, lowLatencyBoost) - 12usize];
    ["Offset of field: VkLatencySleepModeInfoNV::minimumIntervalUs"]
        [::core::mem::offset_of!(VkLatencySleepModeInfoNV, minimumIntervalUs) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkLatencySleepInfoNV"][::core::mem::size_of::<VkLatencySleepInfoNV>() - 24usize];
    ["Alignment of VkLatencySleepInfoNV"][::core::mem::align_of::<VkLatencySleepInfoNV>() - 8usize];
    ["Offset of field: VkLatencySleepInfoNV::sType"]
        [::core::mem::offset_of!(VkLatencySleepInfoNV, sType) - 0usize];
    ["Offset of field: VkLatencySleepInfoNV::pNext"]
        [::core::mem::offset_of!(VkLatencySleepInfoNV, pNext) - 4usize];
    ["Offset of field: VkLatencySleepInfoNV::signalSemaphore"]
        [::core::mem::offset_of!(VkLatencySleepInfoNV, signalSemaphore) - 8usize];
    ["Offset of field: VkLatencySleepInfoNV::value"]
        [::core::mem::offset_of!(VkLatencySleepInfoNV, value) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSetLatencyMarkerInfoNV"]
        [::core::mem::size_of::<VkSetLatencyMarkerInfoNV>() - 24usize];
    ["Alignment of VkSetLatencyMarkerInfoNV"]
        [::core::mem::align_of::<VkSetLatencyMarkerInfoNV>() - 8usize];
    ["Offset of field: VkSetLatencyMarkerInfoNV::sType"]
        [::core::mem::offset_of!(VkSetLatencyMarkerInfoNV, sType) - 0usize];
    ["Offset of field: VkSetLatencyMarkerInfoNV::pNext"]
        [::core::mem::offset_of!(VkSetLatencyMarkerInfoNV, pNext) - 4usize];
    ["Offset of field: VkSetLatencyMarkerInfoNV::presentID"]
        [::core::mem::offset_of!(VkSetLatencyMarkerInfoNV, presentID) - 8usize];
    ["Offset of field: VkSetLatencyMarkerInfoNV::marker"]
        [::core::mem::offset_of!(VkSetLatencyMarkerInfoNV, marker) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkLatencyTimingsFrameReportNV"]
        [::core::mem::size_of::<VkLatencyTimingsFrameReportNV>() - 120usize];
    ["Alignment of VkLatencyTimingsFrameReportNV"]
        [::core::mem::align_of::<VkLatencyTimingsFrameReportNV>() - 8usize];
    ["Offset of field: VkLatencyTimingsFrameReportNV::sType"]
        [::core::mem::offset_of!(VkLatencyTimingsFrameReportNV, sType) - 0usize];
    ["Offset of field: VkLatencyTimingsFrameReportNV::pNext"]
        [::core::mem::offset_of!(VkLatencyTimingsFrameReportNV, pNext) - 4usize];
    ["Offset of field: VkLatencyTimingsFrameReportNV::presentID"]
        [::core::mem::offset_of!(VkLatencyTimingsFrameReportNV, presentID) - 8usize];
    ["Offset of field: VkLatencyTimingsFrameReportNV::inputSampleTimeUs"]
        [::core::mem::offset_of!(VkLatencyTimingsFrameReportNV, inputSampleTimeUs) - 16usize];
    ["Offset of field: VkLatencyTimingsFrameReportNV::simStartTimeUs"]
        [::core::mem::offset_of!(VkLatencyTimingsFrameReportNV, simStartTimeUs) - 24usize];
    ["Offset of field: VkLatencyTimingsFrameReportNV::simEndTimeUs"]
        [::core::mem::offset_of!(VkLatencyTimingsFrameReportNV, simEndTimeUs) - 32usize];
    ["Offset of field: VkLatencyTimingsFrameReportNV::renderSubmitStartTimeUs"]
        [::core::mem::offset_of!(VkLatencyTimingsFrameReportNV, renderSubmitStartTimeUs) - 40usize];
    ["Offset of field: VkLatencyTimingsFrameReportNV::renderSubmitEndTimeUs"]
        [::core::mem::offset_of!(VkLatencyTimingsFrameReportNV, renderSubmitEndTimeUs) - 48usize];
    ["Offset of field: VkLatencyTimingsFrameReportNV::presentStartTimeUs"]
        [::core::mem::offset_of!(VkLatencyTimingsFrameReportNV, presentStartTimeUs) - 56usize];
    ["Offset of field: VkLatencyTimingsFrameReportNV::presentEndTimeUs"]
        [::core::mem::offset_of!(VkLatencyTimingsFrameReportNV, presentEndTimeUs) - 64usize];
    ["Offset of field: VkLatencyTimingsFrameReportNV::driverStartTimeUs"]
        [::core::mem::offset_of!(VkLatencyTimingsFrameReportNV, driverStartTimeUs) - 72usize];
    ["Offset of field: VkLatencyTimingsFrameReportNV::driverEndTimeUs"]
        [::core::mem::offset_of!(VkLatencyTimingsFrameReportNV, driverEndTimeUs) - 80usize];
    ["Offset of field: VkLatencyTimingsFrameReportNV::osRenderQueueStartTimeUs"][::core::mem::offset_of!(
        VkLatencyTimingsFrameReportNV,
        osRenderQueueStartTimeUs
    ) - 88usize];
    ["Offset of field: VkLatencyTimingsFrameReportNV::osRenderQueueEndTimeUs"]
        [::core::mem::offset_of!(VkLatencyTimingsFrameReportNV, osRenderQueueEndTimeUs) - 96usize];
    ["Offset of field: VkLatencyTimingsFrameReportNV::gpuRenderStartTimeUs"]
        [::core::mem::offset_of!(VkLatencyTimingsFrameReportNV, gpuRenderStartTimeUs) - 104usize];
    ["Offset of field: VkLatencyTimingsFrameReportNV::gpuRenderEndTimeUs"]
        [::core::mem::offset_of!(VkLatencyTimingsFrameReportNV, gpuRenderEndTimeUs) - 112usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkGetLatencyMarkerInfoNV"]
        [::core::mem::size_of::<VkGetLatencyMarkerInfoNV>() - 16usize];
    ["Alignment of VkGetLatencyMarkerInfoNV"]
        [::core::mem::align_of::<VkGetLatencyMarkerInfoNV>() - 4usize];
    ["Offset of field: VkGetLatencyMarkerInfoNV::sType"]
        [::core::mem::offset_of!(VkGetLatencyMarkerInfoNV, sType) - 0usize];
    ["Offset of field: VkGetLatencyMarkerInfoNV::pNext"]
        [::core::mem::offset_of!(VkGetLatencyMarkerInfoNV, pNext) - 4usize];
    ["Offset of field: VkGetLatencyMarkerInfoNV::timingCount"]
        [::core::mem::offset_of!(VkGetLatencyMarkerInfoNV, timingCount) - 8usize];
    ["Offset of field: VkGetLatencyMarkerInfoNV::pTimings"]
        [::core::mem::offset_of!(VkGetLatencyMarkerInfoNV, pTimings) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkLatencySubmissionPresentIdNV"]
        [::core::mem::size_of::<VkLatencySubmissionPresentIdNV>() - 16usize];
    ["Alignment of VkLatencySubmissionPresentIdNV"]
        [::core::mem::align_of::<VkLatencySubmissionPresentIdNV>() - 8usize];
    ["Offset of field: VkLatencySubmissionPresentIdNV::sType"]
        [::core::mem::offset_of!(VkLatencySubmissionPresentIdNV, sType) - 0usize];
    ["Offset of field: VkLatencySubmissionPresentIdNV::pNext"]
        [::core::mem::offset_of!(VkLatencySubmissionPresentIdNV, pNext) - 4usize];
    ["Offset of field: VkLatencySubmissionPresentIdNV::presentID"]
        [::core::mem::offset_of!(VkLatencySubmissionPresentIdNV, presentID) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSwapchainLatencyCreateInfoNV"]
        [::core::mem::size_of::<VkSwapchainLatencyCreateInfoNV>() - 12usize];
    ["Alignment of VkSwapchainLatencyCreateInfoNV"]
        [::core::mem::align_of::<VkSwapchainLatencyCreateInfoNV>() - 4usize];
    ["Offset of field: VkSwapchainLatencyCreateInfoNV::sType"]
        [::core::mem::offset_of!(VkSwapchainLatencyCreateInfoNV, sType) - 0usize];
    ["Offset of field: VkSwapchainLatencyCreateInfoNV::pNext"]
        [::core::mem::offset_of!(VkSwapchainLatencyCreateInfoNV, pNext) - 4usize];
    ["Offset of field: VkSwapchainLatencyCreateInfoNV::latencyModeEnable"]
        [::core::mem::offset_of!(VkSwapchainLatencyCreateInfoNV, latencyModeEnable) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkOutOfBandQueueTypeInfoNV"]
        [::core::mem::size_of::<VkOutOfBandQueueTypeInfoNV>() - 12usize];
    ["Alignment of VkOutOfBandQueueTypeInfoNV"]
        [::core::mem::align_of::<VkOutOfBandQueueTypeInfoNV>() - 4usize];
    ["Offset of field: VkOutOfBandQueueTypeInfoNV::sType"]
        [::core::mem::offset_of!(VkOutOfBandQueueTypeInfoNV, sType) - 0usize];
    ["Offset of field: VkOutOfBandQueueTypeInfoNV::pNext"]
        [::core::mem::offset_of!(VkOutOfBandQueueTypeInfoNV, pNext) - 4usize];
    ["Offset of field: VkOutOfBandQueueTypeInfoNV::queueType"]
        [::core::mem::offset_of!(VkOutOfBandQueueTypeInfoNV, queueType) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkLatencySurfaceCapabilitiesNV"]
        [::core::mem::size_of::<VkLatencySurfaceCapabilitiesNV>() - 16usize];
    ["Alignment of VkLatencySurfaceCapabilitiesNV"]
        [::core::mem::align_of::<VkLatencySurfaceCapabilitiesNV>() - 4usize];
    ["Offset of field: VkLatencySurfaceCapabilitiesNV::sType"]
        [::core::mem::offset_of!(VkLatencySurfaceCapabilitiesNV, sType) - 0usize];
    ["Offset of field: VkLatencySurfaceCapabilitiesNV::pNext"]
        [::core::mem::offset_of!(VkLatencySurfaceCapabilitiesNV, pNext) - 4usize];
    ["Offset of field: VkLatencySurfaceCapabilitiesNV::presentModeCount"]
        [::core::mem::offset_of!(VkLatencySurfaceCapabilitiesNV, presentModeCount) - 8usize];
    ["Offset of field: VkLatencySurfaceCapabilitiesNV::pPresentModes"]
        [::core::mem::offset_of!(VkLatencySurfaceCapabilitiesNV, pPresentModes) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM"][::core::mem::size_of::<
        VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM,
    >() - 12usize];
    ["Alignment of VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM"][::core::mem::align_of::<
        VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM,
    >() - 4usize];
    ["Offset of field: VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM::sType"][::core::mem::offset_of!(
        VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM::pNext"][::core::mem::offset_of!(
        VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM,
        pNext
    ) - 4usize];
    ["Offset of field: VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM::multiviewPerViewRenderAreas"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM , multiviewPerViewRenderAreas) - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM"]
        [::core::mem::size_of::<VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM>() - 16usize];
    ["Alignment of VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM"]
        [::core::mem::align_of::<VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM>() - 4usize];
    ["Offset of field: VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM::sType"][::core::mem::offset_of!(
        VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM,
        sType
    ) - 0usize];
    ["Offset of field: VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM::pNext"][::core::mem::offset_of!(
        VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM,
        pNext
    ) - 4usize];
    ["Offset of field: VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM::perViewRenderAreaCount"] [:: core :: mem :: offset_of ! (VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM , perViewRenderAreaCount) - 8usize] ;
    ["Offset of field: VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM::pPerViewRenderAreas"] [:: core :: mem :: offset_of ! (VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM , pPerViewRenderAreas) - 12usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDevicePerStageDescriptorSetFeaturesNV"]
        [::core::mem::size_of::<VkPhysicalDevicePerStageDescriptorSetFeaturesNV>() - 16usize];
    ["Alignment of VkPhysicalDevicePerStageDescriptorSetFeaturesNV"]
        [::core::mem::align_of::<VkPhysicalDevicePerStageDescriptorSetFeaturesNV>() - 4usize];
    ["Offset of field: VkPhysicalDevicePerStageDescriptorSetFeaturesNV::sType"]
        [::core::mem::offset_of!(VkPhysicalDevicePerStageDescriptorSetFeaturesNV, sType) - 0usize];
    ["Offset of field: VkPhysicalDevicePerStageDescriptorSetFeaturesNV::pNext"]
        [::core::mem::offset_of!(VkPhysicalDevicePerStageDescriptorSetFeaturesNV, pNext) - 4usize];
    ["Offset of field: VkPhysicalDevicePerStageDescriptorSetFeaturesNV::perStageDescriptorSet"][::core::mem::offset_of!(
        VkPhysicalDevicePerStageDescriptorSetFeaturesNV,
        perStageDescriptorSet
    )
        - 8usize];
    ["Offset of field: VkPhysicalDevicePerStageDescriptorSetFeaturesNV::dynamicPipelineLayout"][::core::mem::offset_of!(
        VkPhysicalDevicePerStageDescriptorSetFeaturesNV,
        dynamicPipelineLayout
    )
        - 12usize];
};
pub const VkBlockMatchWindowCompareModeQCOM_VK_BLOCK_MATCH_WINDOW_COMPARE_MODE_MIN_QCOM:
    VkBlockMatchWindowCompareModeQCOM = 0;
pub const VkBlockMatchWindowCompareModeQCOM_VK_BLOCK_MATCH_WINDOW_COMPARE_MODE_MAX_QCOM:
    VkBlockMatchWindowCompareModeQCOM = 1;
pub const VkBlockMatchWindowCompareModeQCOM_VK_BLOCK_MATCH_WINDOW_COMPARE_MODE_MAX_ENUM_QCOM:
    VkBlockMatchWindowCompareModeQCOM = 2147483647;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceImageProcessing2FeaturesQCOM"]
        [::core::mem::size_of::<VkPhysicalDeviceImageProcessing2FeaturesQCOM>() - 12usize];
    ["Alignment of VkPhysicalDeviceImageProcessing2FeaturesQCOM"]
        [::core::mem::align_of::<VkPhysicalDeviceImageProcessing2FeaturesQCOM>() - 4usize];
    ["Offset of field: VkPhysicalDeviceImageProcessing2FeaturesQCOM::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceImageProcessing2FeaturesQCOM, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceImageProcessing2FeaturesQCOM::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceImageProcessing2FeaturesQCOM, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceImageProcessing2FeaturesQCOM::textureBlockMatch2"][::core::mem::offset_of!(
        VkPhysicalDeviceImageProcessing2FeaturesQCOM,
        textureBlockMatch2
    )
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceImageProcessing2PropertiesQCOM"]
        [::core::mem::size_of::<VkPhysicalDeviceImageProcessing2PropertiesQCOM>() - 16usize];
    ["Alignment of VkPhysicalDeviceImageProcessing2PropertiesQCOM"]
        [::core::mem::align_of::<VkPhysicalDeviceImageProcessing2PropertiesQCOM>() - 4usize];
    ["Offset of field: VkPhysicalDeviceImageProcessing2PropertiesQCOM::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceImageProcessing2PropertiesQCOM, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceImageProcessing2PropertiesQCOM::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceImageProcessing2PropertiesQCOM, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceImageProcessing2PropertiesQCOM::maxBlockMatchWindow"][::core::mem::offset_of!(
        VkPhysicalDeviceImageProcessing2PropertiesQCOM,
        maxBlockMatchWindow
    )
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSamplerBlockMatchWindowCreateInfoQCOM"]
        [::core::mem::size_of::<VkSamplerBlockMatchWindowCreateInfoQCOM>() - 20usize];
    ["Alignment of VkSamplerBlockMatchWindowCreateInfoQCOM"]
        [::core::mem::align_of::<VkSamplerBlockMatchWindowCreateInfoQCOM>() - 4usize];
    ["Offset of field: VkSamplerBlockMatchWindowCreateInfoQCOM::sType"]
        [::core::mem::offset_of!(VkSamplerBlockMatchWindowCreateInfoQCOM, sType) - 0usize];
    ["Offset of field: VkSamplerBlockMatchWindowCreateInfoQCOM::pNext"]
        [::core::mem::offset_of!(VkSamplerBlockMatchWindowCreateInfoQCOM, pNext) - 4usize];
    ["Offset of field: VkSamplerBlockMatchWindowCreateInfoQCOM::windowExtent"]
        [::core::mem::offset_of!(VkSamplerBlockMatchWindowCreateInfoQCOM, windowExtent) - 8usize];
    ["Offset of field: VkSamplerBlockMatchWindowCreateInfoQCOM::windowCompareMode"][::core::mem::offset_of!(
        VkSamplerBlockMatchWindowCreateInfoQCOM,
        windowCompareMode
    ) - 16usize];
};
pub const VkCubicFilterWeightsQCOM_VK_CUBIC_FILTER_WEIGHTS_CATMULL_ROM_QCOM:
    VkCubicFilterWeightsQCOM = 0;
pub const VkCubicFilterWeightsQCOM_VK_CUBIC_FILTER_WEIGHTS_ZERO_TANGENT_CARDINAL_QCOM:
    VkCubicFilterWeightsQCOM = 1;
pub const VkCubicFilterWeightsQCOM_VK_CUBIC_FILTER_WEIGHTS_B_SPLINE_QCOM: VkCubicFilterWeightsQCOM =
    2;
pub const VkCubicFilterWeightsQCOM_VK_CUBIC_FILTER_WEIGHTS_MITCHELL_NETRAVALI_QCOM:
    VkCubicFilterWeightsQCOM = 3;
pub const VkCubicFilterWeightsQCOM_VK_CUBIC_FILTER_WEIGHTS_MAX_ENUM_QCOM: VkCubicFilterWeightsQCOM =
    2147483647;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceCubicWeightsFeaturesQCOM"]
        [::core::mem::size_of::<VkPhysicalDeviceCubicWeightsFeaturesQCOM>() - 12usize];
    ["Alignment of VkPhysicalDeviceCubicWeightsFeaturesQCOM"]
        [::core::mem::align_of::<VkPhysicalDeviceCubicWeightsFeaturesQCOM>() - 4usize];
    ["Offset of field: VkPhysicalDeviceCubicWeightsFeaturesQCOM::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceCubicWeightsFeaturesQCOM, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceCubicWeightsFeaturesQCOM::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceCubicWeightsFeaturesQCOM, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceCubicWeightsFeaturesQCOM::selectableCubicWeights"][::core::mem::offset_of!(
        VkPhysicalDeviceCubicWeightsFeaturesQCOM,
        selectableCubicWeights
    )
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSamplerCubicWeightsCreateInfoQCOM"]
        [::core::mem::size_of::<VkSamplerCubicWeightsCreateInfoQCOM>() - 12usize];
    ["Alignment of VkSamplerCubicWeightsCreateInfoQCOM"]
        [::core::mem::align_of::<VkSamplerCubicWeightsCreateInfoQCOM>() - 4usize];
    ["Offset of field: VkSamplerCubicWeightsCreateInfoQCOM::sType"]
        [::core::mem::offset_of!(VkSamplerCubicWeightsCreateInfoQCOM, sType) - 0usize];
    ["Offset of field: VkSamplerCubicWeightsCreateInfoQCOM::pNext"]
        [::core::mem::offset_of!(VkSamplerCubicWeightsCreateInfoQCOM, pNext) - 4usize];
    ["Offset of field: VkSamplerCubicWeightsCreateInfoQCOM::cubicWeights"]
        [::core::mem::offset_of!(VkSamplerCubicWeightsCreateInfoQCOM, cubicWeights) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkBlitImageCubicWeightsInfoQCOM"]
        [::core::mem::size_of::<VkBlitImageCubicWeightsInfoQCOM>() - 12usize];
    ["Alignment of VkBlitImageCubicWeightsInfoQCOM"]
        [::core::mem::align_of::<VkBlitImageCubicWeightsInfoQCOM>() - 4usize];
    ["Offset of field: VkBlitImageCubicWeightsInfoQCOM::sType"]
        [::core::mem::offset_of!(VkBlitImageCubicWeightsInfoQCOM, sType) - 0usize];
    ["Offset of field: VkBlitImageCubicWeightsInfoQCOM::pNext"]
        [::core::mem::offset_of!(VkBlitImageCubicWeightsInfoQCOM, pNext) - 4usize];
    ["Offset of field: VkBlitImageCubicWeightsInfoQCOM::cubicWeights"]
        [::core::mem::offset_of!(VkBlitImageCubicWeightsInfoQCOM, cubicWeights) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceYcbcrDegammaFeaturesQCOM"]
        [::core::mem::size_of::<VkPhysicalDeviceYcbcrDegammaFeaturesQCOM>() - 12usize];
    ["Alignment of VkPhysicalDeviceYcbcrDegammaFeaturesQCOM"]
        [::core::mem::align_of::<VkPhysicalDeviceYcbcrDegammaFeaturesQCOM>() - 4usize];
    ["Offset of field: VkPhysicalDeviceYcbcrDegammaFeaturesQCOM::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceYcbcrDegammaFeaturesQCOM, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceYcbcrDegammaFeaturesQCOM::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceYcbcrDegammaFeaturesQCOM, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceYcbcrDegammaFeaturesQCOM::ycbcrDegamma"]
        [::core::mem::offset_of!(VkPhysicalDeviceYcbcrDegammaFeaturesQCOM, ycbcrDegamma) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM"]
        [::core::mem::size_of::<VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM>() - 16usize];
    ["Alignment of VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM"]
        [::core::mem::align_of::<VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM>() - 4usize];
    ["Offset of field: VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM::sType"][::core::mem::offset_of!(
        VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM,
        sType
    ) - 0usize];
    ["Offset of field: VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM::pNext"][::core::mem::offset_of!(
        VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM,
        pNext
    ) - 4usize];
    ["Offset of field: VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM::enableYDegamma"][::core::mem::offset_of!(
        VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM,
        enableYDegamma
    )
        - 8usize];
    ["Offset of field: VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM::enableCbCrDegamma"][::core::mem::offset_of!(
        VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM,
        enableCbCrDegamma
    )
        - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceCubicClampFeaturesQCOM"]
        [::core::mem::size_of::<VkPhysicalDeviceCubicClampFeaturesQCOM>() - 12usize];
    ["Alignment of VkPhysicalDeviceCubicClampFeaturesQCOM"]
        [::core::mem::align_of::<VkPhysicalDeviceCubicClampFeaturesQCOM>() - 4usize];
    ["Offset of field: VkPhysicalDeviceCubicClampFeaturesQCOM::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceCubicClampFeaturesQCOM, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceCubicClampFeaturesQCOM::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceCubicClampFeaturesQCOM, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceCubicClampFeaturesQCOM::cubicRangeClamp"]
        [::core::mem::offset_of!(VkPhysicalDeviceCubicClampFeaturesQCOM, cubicRangeClamp) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT"][::core::mem::size_of::<
        VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT,
    >() - 12usize];
    ["Alignment of VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT"]
        [::core::mem::align_of::<VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT>()
            - 4usize];
    ["Offset of field: VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT::sType"][::core::mem::offset_of!(
        VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT,
        sType
    )
        - 0usize];
    ["Offset of field: VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT::pNext"][::core::mem::offset_of!(
        VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT,
        pNext
    )
        - 4usize];
    ["Offset of field: VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT::attachmentFeedbackLoopDynamicState"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT , attachmentFeedbackLoopDynamicState) - 8usize] ;
};
pub const VkLayeredDriverUnderlyingApiMSFT_VK_LAYERED_DRIVER_UNDERLYING_API_NONE_MSFT:
    VkLayeredDriverUnderlyingApiMSFT = 0;
pub const VkLayeredDriverUnderlyingApiMSFT_VK_LAYERED_DRIVER_UNDERLYING_API_D3D12_MSFT:
    VkLayeredDriverUnderlyingApiMSFT = 1;
pub const VkLayeredDriverUnderlyingApiMSFT_VK_LAYERED_DRIVER_UNDERLYING_API_MAX_ENUM_MSFT:
    VkLayeredDriverUnderlyingApiMSFT = 2147483647;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceLayeredDriverPropertiesMSFT"]
        [::core::mem::size_of::<VkPhysicalDeviceLayeredDriverPropertiesMSFT>() - 12usize];
    ["Alignment of VkPhysicalDeviceLayeredDriverPropertiesMSFT"]
        [::core::mem::align_of::<VkPhysicalDeviceLayeredDriverPropertiesMSFT>() - 4usize];
    ["Offset of field: VkPhysicalDeviceLayeredDriverPropertiesMSFT::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceLayeredDriverPropertiesMSFT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceLayeredDriverPropertiesMSFT::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceLayeredDriverPropertiesMSFT, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceLayeredDriverPropertiesMSFT::underlyingAPI"][::core::mem::offset_of!(
        VkPhysicalDeviceLayeredDriverPropertiesMSFT,
        underlyingAPI
    ) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV"][::core::mem::size_of::<
        VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV,
    >() - 12usize];
    ["Alignment of VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV"][::core::mem::align_of::<
        VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV,
    >() - 4usize];
    ["Offset of field: VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV::sType"][::core::mem::offset_of!(
        VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV::pNext"][::core::mem::offset_of!(
        VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV,
        pNext
    ) - 4usize];
    ["Offset of field: VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV::descriptorPoolOverallocation"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV , descriptorPoolOverallocation) - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceTileMemoryHeapFeaturesQCOM"]
        [::core::mem::size_of::<VkPhysicalDeviceTileMemoryHeapFeaturesQCOM>() - 12usize];
    ["Alignment of VkPhysicalDeviceTileMemoryHeapFeaturesQCOM"]
        [::core::mem::align_of::<VkPhysicalDeviceTileMemoryHeapFeaturesQCOM>() - 4usize];
    ["Offset of field: VkPhysicalDeviceTileMemoryHeapFeaturesQCOM::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceTileMemoryHeapFeaturesQCOM, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceTileMemoryHeapFeaturesQCOM::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceTileMemoryHeapFeaturesQCOM, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceTileMemoryHeapFeaturesQCOM::tileMemoryHeap"][::core::mem::offset_of!(
        VkPhysicalDeviceTileMemoryHeapFeaturesQCOM,
        tileMemoryHeap
    ) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceTileMemoryHeapPropertiesQCOM"]
        [::core::mem::size_of::<VkPhysicalDeviceTileMemoryHeapPropertiesQCOM>() - 16usize];
    ["Alignment of VkPhysicalDeviceTileMemoryHeapPropertiesQCOM"]
        [::core::mem::align_of::<VkPhysicalDeviceTileMemoryHeapPropertiesQCOM>() - 4usize];
    ["Offset of field: VkPhysicalDeviceTileMemoryHeapPropertiesQCOM::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceTileMemoryHeapPropertiesQCOM, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceTileMemoryHeapPropertiesQCOM::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceTileMemoryHeapPropertiesQCOM, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceTileMemoryHeapPropertiesQCOM::queueSubmitBoundary"][::core::mem::offset_of!(
        VkPhysicalDeviceTileMemoryHeapPropertiesQCOM,
        queueSubmitBoundary
    )
        - 8usize];
    ["Offset of field: VkPhysicalDeviceTileMemoryHeapPropertiesQCOM::tileBufferTransfers"][::core::mem::offset_of!(
        VkPhysicalDeviceTileMemoryHeapPropertiesQCOM,
        tileBufferTransfers
    )
        - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkTileMemoryRequirementsQCOM"]
        [::core::mem::size_of::<VkTileMemoryRequirementsQCOM>() - 24usize];
    ["Alignment of VkTileMemoryRequirementsQCOM"]
        [::core::mem::align_of::<VkTileMemoryRequirementsQCOM>() - 8usize];
    ["Offset of field: VkTileMemoryRequirementsQCOM::sType"]
        [::core::mem::offset_of!(VkTileMemoryRequirementsQCOM, sType) - 0usize];
    ["Offset of field: VkTileMemoryRequirementsQCOM::pNext"]
        [::core::mem::offset_of!(VkTileMemoryRequirementsQCOM, pNext) - 4usize];
    ["Offset of field: VkTileMemoryRequirementsQCOM::size"]
        [::core::mem::offset_of!(VkTileMemoryRequirementsQCOM, size) - 8usize];
    ["Offset of field: VkTileMemoryRequirementsQCOM::alignment"]
        [::core::mem::offset_of!(VkTileMemoryRequirementsQCOM, alignment) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkTileMemoryBindInfoQCOM"]
        [::core::mem::size_of::<VkTileMemoryBindInfoQCOM>() - 16usize];
    ["Alignment of VkTileMemoryBindInfoQCOM"]
        [::core::mem::align_of::<VkTileMemoryBindInfoQCOM>() - 8usize];
    ["Offset of field: VkTileMemoryBindInfoQCOM::sType"]
        [::core::mem::offset_of!(VkTileMemoryBindInfoQCOM, sType) - 0usize];
    ["Offset of field: VkTileMemoryBindInfoQCOM::pNext"]
        [::core::mem::offset_of!(VkTileMemoryBindInfoQCOM, pNext) - 4usize];
    ["Offset of field: VkTileMemoryBindInfoQCOM::memory"]
        [::core::mem::offset_of!(VkTileMemoryBindInfoQCOM, memory) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkTileMemorySizeInfoQCOM"]
        [::core::mem::size_of::<VkTileMemorySizeInfoQCOM>() - 16usize];
    ["Alignment of VkTileMemorySizeInfoQCOM"]
        [::core::mem::align_of::<VkTileMemorySizeInfoQCOM>() - 8usize];
    ["Offset of field: VkTileMemorySizeInfoQCOM::sType"]
        [::core::mem::offset_of!(VkTileMemorySizeInfoQCOM, sType) - 0usize];
    ["Offset of field: VkTileMemorySizeInfoQCOM::pNext"]
        [::core::mem::offset_of!(VkTileMemorySizeInfoQCOM, pNext) - 4usize];
    ["Offset of field: VkTileMemorySizeInfoQCOM::size"]
        [::core::mem::offset_of!(VkTileMemorySizeInfoQCOM, size) - 8usize];
};
pub const VkDisplaySurfaceStereoTypeNV_VK_DISPLAY_SURFACE_STEREO_TYPE_NONE_NV:
    VkDisplaySurfaceStereoTypeNV = 0;
pub const VkDisplaySurfaceStereoTypeNV_VK_DISPLAY_SURFACE_STEREO_TYPE_ONBOARD_DIN_NV:
    VkDisplaySurfaceStereoTypeNV = 1;
pub const VkDisplaySurfaceStereoTypeNV_VK_DISPLAY_SURFACE_STEREO_TYPE_HDMI_3D_NV:
    VkDisplaySurfaceStereoTypeNV = 2;
pub const VkDisplaySurfaceStereoTypeNV_VK_DISPLAY_SURFACE_STEREO_TYPE_INBAND_DISPLAYPORT_NV:
    VkDisplaySurfaceStereoTypeNV = 3;
pub const VkDisplaySurfaceStereoTypeNV_VK_DISPLAY_SURFACE_STEREO_TYPE_MAX_ENUM_NV:
    VkDisplaySurfaceStereoTypeNV = 2147483647;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDisplaySurfaceStereoCreateInfoNV"]
        [::core::mem::size_of::<VkDisplaySurfaceStereoCreateInfoNV>() - 12usize];
    ["Alignment of VkDisplaySurfaceStereoCreateInfoNV"]
        [::core::mem::align_of::<VkDisplaySurfaceStereoCreateInfoNV>() - 4usize];
    ["Offset of field: VkDisplaySurfaceStereoCreateInfoNV::sType"]
        [::core::mem::offset_of!(VkDisplaySurfaceStereoCreateInfoNV, sType) - 0usize];
    ["Offset of field: VkDisplaySurfaceStereoCreateInfoNV::pNext"]
        [::core::mem::offset_of!(VkDisplaySurfaceStereoCreateInfoNV, pNext) - 4usize];
    ["Offset of field: VkDisplaySurfaceStereoCreateInfoNV::stereoType"]
        [::core::mem::offset_of!(VkDisplaySurfaceStereoCreateInfoNV, stereoType) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDisplayModeStereoPropertiesNV"]
        [::core::mem::size_of::<VkDisplayModeStereoPropertiesNV>() - 12usize];
    ["Alignment of VkDisplayModeStereoPropertiesNV"]
        [::core::mem::align_of::<VkDisplayModeStereoPropertiesNV>() - 4usize];
    ["Offset of field: VkDisplayModeStereoPropertiesNV::sType"]
        [::core::mem::offset_of!(VkDisplayModeStereoPropertiesNV, sType) - 0usize];
    ["Offset of field: VkDisplayModeStereoPropertiesNV::pNext"]
        [::core::mem::offset_of!(VkDisplayModeStereoPropertiesNV, pNext) - 4usize];
    ["Offset of field: VkDisplayModeStereoPropertiesNV::hdmi3DSupported"]
        [::core::mem::offset_of!(VkDisplayModeStereoPropertiesNV, hdmi3DSupported) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceRawAccessChainsFeaturesNV"]
        [::core::mem::size_of::<VkPhysicalDeviceRawAccessChainsFeaturesNV>() - 12usize];
    ["Alignment of VkPhysicalDeviceRawAccessChainsFeaturesNV"]
        [::core::mem::align_of::<VkPhysicalDeviceRawAccessChainsFeaturesNV>() - 4usize];
    ["Offset of field: VkPhysicalDeviceRawAccessChainsFeaturesNV::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceRawAccessChainsFeaturesNV, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceRawAccessChainsFeaturesNV::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceRawAccessChainsFeaturesNV, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceRawAccessChainsFeaturesNV::shaderRawAccessChains"][::core::mem::offset_of!(
        VkPhysicalDeviceRawAccessChainsFeaturesNV,
        shaderRawAccessChains
    )
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkExternalComputeQueueDeviceCreateInfoNV"]
        [::core::mem::size_of::<VkExternalComputeQueueDeviceCreateInfoNV>() - 12usize];
    ["Alignment of VkExternalComputeQueueDeviceCreateInfoNV"]
        [::core::mem::align_of::<VkExternalComputeQueueDeviceCreateInfoNV>() - 4usize];
    ["Offset of field: VkExternalComputeQueueDeviceCreateInfoNV::sType"]
        [::core::mem::offset_of!(VkExternalComputeQueueDeviceCreateInfoNV, sType) - 0usize];
    ["Offset of field: VkExternalComputeQueueDeviceCreateInfoNV::pNext"]
        [::core::mem::offset_of!(VkExternalComputeQueueDeviceCreateInfoNV, pNext) - 4usize];
    ["Offset of field: VkExternalComputeQueueDeviceCreateInfoNV::reservedExternalQueues"][::core::mem::offset_of!(
        VkExternalComputeQueueDeviceCreateInfoNV,
        reservedExternalQueues
    )
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkExternalComputeQueueCreateInfoNV"]
        [::core::mem::size_of::<VkExternalComputeQueueCreateInfoNV>() - 12usize];
    ["Alignment of VkExternalComputeQueueCreateInfoNV"]
        [::core::mem::align_of::<VkExternalComputeQueueCreateInfoNV>() - 4usize];
    ["Offset of field: VkExternalComputeQueueCreateInfoNV::sType"]
        [::core::mem::offset_of!(VkExternalComputeQueueCreateInfoNV, sType) - 0usize];
    ["Offset of field: VkExternalComputeQueueCreateInfoNV::pNext"]
        [::core::mem::offset_of!(VkExternalComputeQueueCreateInfoNV, pNext) - 4usize];
    ["Offset of field: VkExternalComputeQueueCreateInfoNV::preferredQueue"]
        [::core::mem::offset_of!(VkExternalComputeQueueCreateInfoNV, preferredQueue) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkExternalComputeQueueDataParamsNV"]
        [::core::mem::size_of::<VkExternalComputeQueueDataParamsNV>() - 12usize];
    ["Alignment of VkExternalComputeQueueDataParamsNV"]
        [::core::mem::align_of::<VkExternalComputeQueueDataParamsNV>() - 4usize];
    ["Offset of field: VkExternalComputeQueueDataParamsNV::sType"]
        [::core::mem::offset_of!(VkExternalComputeQueueDataParamsNV, sType) - 0usize];
    ["Offset of field: VkExternalComputeQueueDataParamsNV::pNext"]
        [::core::mem::offset_of!(VkExternalComputeQueueDataParamsNV, pNext) - 4usize];
    ["Offset of field: VkExternalComputeQueueDataParamsNV::deviceIndex"]
        [::core::mem::offset_of!(VkExternalComputeQueueDataParamsNV, deviceIndex) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceExternalComputeQueuePropertiesNV"]
        [::core::mem::size_of::<VkPhysicalDeviceExternalComputeQueuePropertiesNV>() - 16usize];
    ["Alignment of VkPhysicalDeviceExternalComputeQueuePropertiesNV"]
        [::core::mem::align_of::<VkPhysicalDeviceExternalComputeQueuePropertiesNV>() - 4usize];
    ["Offset of field: VkPhysicalDeviceExternalComputeQueuePropertiesNV::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceExternalComputeQueuePropertiesNV, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceExternalComputeQueuePropertiesNV::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceExternalComputeQueuePropertiesNV, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceExternalComputeQueuePropertiesNV::externalDataSize"][::core::mem::offset_of!(
        VkPhysicalDeviceExternalComputeQueuePropertiesNV,
        externalDataSize
    )
        - 8usize];
    ["Offset of field: VkPhysicalDeviceExternalComputeQueuePropertiesNV::maxExternalQueues"][::core::mem::offset_of!(
        VkPhysicalDeviceExternalComputeQueuePropertiesNV,
        maxExternalQueues
    )
        - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceCommandBufferInheritanceFeaturesNV"]
        [::core::mem::size_of::<VkPhysicalDeviceCommandBufferInheritanceFeaturesNV>() - 12usize];
    ["Alignment of VkPhysicalDeviceCommandBufferInheritanceFeaturesNV"]
        [::core::mem::align_of::<VkPhysicalDeviceCommandBufferInheritanceFeaturesNV>() - 4usize];
    ["Offset of field: VkPhysicalDeviceCommandBufferInheritanceFeaturesNV::sType"][::core::mem::offset_of!(
        VkPhysicalDeviceCommandBufferInheritanceFeaturesNV,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceCommandBufferInheritanceFeaturesNV::pNext"][::core::mem::offset_of!(
        VkPhysicalDeviceCommandBufferInheritanceFeaturesNV,
        pNext
    ) - 4usize];
    ["Offset of field: VkPhysicalDeviceCommandBufferInheritanceFeaturesNV::commandBufferInheritance"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceCommandBufferInheritanceFeaturesNV , commandBufferInheritance) - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNV"]
        [::core::mem::size_of::<VkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNV>() - 12usize];
    ["Alignment of VkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNV"]
        [::core::mem::align_of::<VkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNV>() - 4usize];
    ["Offset of field: VkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNV::sType"][::core::mem::offset_of!(
        VkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNV,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNV::pNext"][::core::mem::offset_of!(
        VkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNV,
        pNext
    ) - 4usize];
    ["Offset of field: VkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNV::shaderFloat16VectorAtomics"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNV , shaderFloat16VectorAtomics) - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceShaderReplicatedCompositesFeaturesEXT"]
        [::core::mem::size_of::<VkPhysicalDeviceShaderReplicatedCompositesFeaturesEXT>() - 12usize];
    ["Alignment of VkPhysicalDeviceShaderReplicatedCompositesFeaturesEXT"]
        [::core::mem::align_of::<VkPhysicalDeviceShaderReplicatedCompositesFeaturesEXT>() - 4usize];
    ["Offset of field: VkPhysicalDeviceShaderReplicatedCompositesFeaturesEXT::sType"][::core::mem::offset_of!(
        VkPhysicalDeviceShaderReplicatedCompositesFeaturesEXT,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceShaderReplicatedCompositesFeaturesEXT::pNext"][::core::mem::offset_of!(
        VkPhysicalDeviceShaderReplicatedCompositesFeaturesEXT,
        pNext
    ) - 4usize];
    ["Offset of field: VkPhysicalDeviceShaderReplicatedCompositesFeaturesEXT::shaderReplicatedComposites"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceShaderReplicatedCompositesFeaturesEXT , shaderReplicatedComposites) - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceRayTracingValidationFeaturesNV"]
        [::core::mem::size_of::<VkPhysicalDeviceRayTracingValidationFeaturesNV>() - 12usize];
    ["Alignment of VkPhysicalDeviceRayTracingValidationFeaturesNV"]
        [::core::mem::align_of::<VkPhysicalDeviceRayTracingValidationFeaturesNV>() - 4usize];
    ["Offset of field: VkPhysicalDeviceRayTracingValidationFeaturesNV::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceRayTracingValidationFeaturesNV, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceRayTracingValidationFeaturesNV::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceRayTracingValidationFeaturesNV, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceRayTracingValidationFeaturesNV::rayTracingValidation"][::core::mem::offset_of!(
        VkPhysicalDeviceRayTracingValidationFeaturesNV,
        rayTracingValidation
    )
        - 8usize];
};
pub const VkClusterAccelerationStructureTypeNV_VK_CLUSTER_ACCELERATION_STRUCTURE_TYPE_CLUSTERS_BOTTOM_LEVEL_NV : VkClusterAccelerationStructureTypeNV = 0 ;
pub const VkClusterAccelerationStructureTypeNV_VK_CLUSTER_ACCELERATION_STRUCTURE_TYPE_TRIANGLE_CLUSTER_NV : VkClusterAccelerationStructureTypeNV = 1 ;
pub const VkClusterAccelerationStructureTypeNV_VK_CLUSTER_ACCELERATION_STRUCTURE_TYPE_TRIANGLE_CLUSTER_TEMPLATE_NV : VkClusterAccelerationStructureTypeNV = 2 ;
pub const VkClusterAccelerationStructureTypeNV_VK_CLUSTER_ACCELERATION_STRUCTURE_TYPE_MAX_ENUM_NV : VkClusterAccelerationStructureTypeNV = 2147483647 ;
pub const VkClusterAccelerationStructureOpTypeNV_VK_CLUSTER_ACCELERATION_STRUCTURE_OP_TYPE_MOVE_OBJECTS_NV : VkClusterAccelerationStructureOpTypeNV = 0 ;
pub const VkClusterAccelerationStructureOpTypeNV_VK_CLUSTER_ACCELERATION_STRUCTURE_OP_TYPE_BUILD_CLUSTERS_BOTTOM_LEVEL_NV : VkClusterAccelerationStructureOpTypeNV = 1 ;
pub const VkClusterAccelerationStructureOpTypeNV_VK_CLUSTER_ACCELERATION_STRUCTURE_OP_TYPE_BUILD_TRIANGLE_CLUSTER_NV : VkClusterAccelerationStructureOpTypeNV = 2 ;
pub const VkClusterAccelerationStructureOpTypeNV_VK_CLUSTER_ACCELERATION_STRUCTURE_OP_TYPE_BUILD_TRIANGLE_CLUSTER_TEMPLATE_NV : VkClusterAccelerationStructureOpTypeNV = 3 ;
pub const VkClusterAccelerationStructureOpTypeNV_VK_CLUSTER_ACCELERATION_STRUCTURE_OP_TYPE_INSTANTIATE_TRIANGLE_CLUSTER_NV : VkClusterAccelerationStructureOpTypeNV = 4 ;
pub const VkClusterAccelerationStructureOpTypeNV_VK_CLUSTER_ACCELERATION_STRUCTURE_OP_TYPE_MAX_ENUM_NV : VkClusterAccelerationStructureOpTypeNV = 2147483647 ;
pub const VkClusterAccelerationStructureOpModeNV_VK_CLUSTER_ACCELERATION_STRUCTURE_OP_MODE_IMPLICIT_DESTINATIONS_NV : VkClusterAccelerationStructureOpModeNV = 0 ;
pub const VkClusterAccelerationStructureOpModeNV_VK_CLUSTER_ACCELERATION_STRUCTURE_OP_MODE_EXPLICIT_DESTINATIONS_NV : VkClusterAccelerationStructureOpModeNV = 1 ;
pub const VkClusterAccelerationStructureOpModeNV_VK_CLUSTER_ACCELERATION_STRUCTURE_OP_MODE_COMPUTE_SIZES_NV : VkClusterAccelerationStructureOpModeNV = 2 ;
pub const VkClusterAccelerationStructureOpModeNV_VK_CLUSTER_ACCELERATION_STRUCTURE_OP_MODE_MAX_ENUM_NV : VkClusterAccelerationStructureOpModeNV = 2147483647 ;
pub const VkClusterAccelerationStructureAddressResolutionFlagBitsNV_VK_CLUSTER_ACCELERATION_STRUCTURE_ADDRESS_RESOLUTION_INDIRECTED_DST_IMPLICIT_DATA_BIT_NV : VkClusterAccelerationStructureAddressResolutionFlagBitsNV = 1 ;
pub const VkClusterAccelerationStructureAddressResolutionFlagBitsNV_VK_CLUSTER_ACCELERATION_STRUCTURE_ADDRESS_RESOLUTION_INDIRECTED_SCRATCH_DATA_BIT_NV : VkClusterAccelerationStructureAddressResolutionFlagBitsNV = 2 ;
pub const VkClusterAccelerationStructureAddressResolutionFlagBitsNV_VK_CLUSTER_ACCELERATION_STRUCTURE_ADDRESS_RESOLUTION_INDIRECTED_DST_ADDRESS_ARRAY_BIT_NV : VkClusterAccelerationStructureAddressResolutionFlagBitsNV = 4 ;
pub const VkClusterAccelerationStructureAddressResolutionFlagBitsNV_VK_CLUSTER_ACCELERATION_STRUCTURE_ADDRESS_RESOLUTION_INDIRECTED_DST_SIZES_ARRAY_BIT_NV : VkClusterAccelerationStructureAddressResolutionFlagBitsNV = 8 ;
pub const VkClusterAccelerationStructureAddressResolutionFlagBitsNV_VK_CLUSTER_ACCELERATION_STRUCTURE_ADDRESS_RESOLUTION_INDIRECTED_SRC_INFOS_ARRAY_BIT_NV : VkClusterAccelerationStructureAddressResolutionFlagBitsNV = 16 ;
pub const VkClusterAccelerationStructureAddressResolutionFlagBitsNV_VK_CLUSTER_ACCELERATION_STRUCTURE_ADDRESS_RESOLUTION_INDIRECTED_SRC_INFOS_COUNT_BIT_NV : VkClusterAccelerationStructureAddressResolutionFlagBitsNV = 32 ;
pub const VkClusterAccelerationStructureAddressResolutionFlagBitsNV_VK_CLUSTER_ACCELERATION_STRUCTURE_ADDRESS_RESOLUTION_FLAG_BITS_MAX_ENUM_NV : VkClusterAccelerationStructureAddressResolutionFlagBitsNV = 2147483647 ;
pub const VkClusterAccelerationStructureClusterFlagBitsNV_VK_CLUSTER_ACCELERATION_STRUCTURE_CLUSTER_ALLOW_DISABLE_OPACITY_MICROMAPS_NV : VkClusterAccelerationStructureClusterFlagBitsNV = 1 ;
pub const VkClusterAccelerationStructureClusterFlagBitsNV_VK_CLUSTER_ACCELERATION_STRUCTURE_CLUSTER_FLAG_BITS_MAX_ENUM_NV : VkClusterAccelerationStructureClusterFlagBitsNV = 2147483647 ;
pub const VkClusterAccelerationStructureGeometryFlagBitsNV_VK_CLUSTER_ACCELERATION_STRUCTURE_GEOMETRY_CULL_DISABLE_BIT_NV : VkClusterAccelerationStructureGeometryFlagBitsNV = 1 ;
pub const VkClusterAccelerationStructureGeometryFlagBitsNV_VK_CLUSTER_ACCELERATION_STRUCTURE_GEOMETRY_NO_DUPLICATE_ANYHIT_INVOCATION_BIT_NV : VkClusterAccelerationStructureGeometryFlagBitsNV = 2 ;
pub const VkClusterAccelerationStructureGeometryFlagBitsNV_VK_CLUSTER_ACCELERATION_STRUCTURE_GEOMETRY_OPAQUE_BIT_NV : VkClusterAccelerationStructureGeometryFlagBitsNV = 4 ;
pub const VkClusterAccelerationStructureGeometryFlagBitsNV_VK_CLUSTER_ACCELERATION_STRUCTURE_GEOMETRY_FLAG_BITS_MAX_ENUM_NV : VkClusterAccelerationStructureGeometryFlagBitsNV = 2147483647 ;
pub const VkClusterAccelerationStructureIndexFormatFlagBitsNV_VK_CLUSTER_ACCELERATION_STRUCTURE_INDEX_FORMAT_8BIT_NV : VkClusterAccelerationStructureIndexFormatFlagBitsNV = 1 ;
pub const VkClusterAccelerationStructureIndexFormatFlagBitsNV_VK_CLUSTER_ACCELERATION_STRUCTURE_INDEX_FORMAT_16BIT_NV : VkClusterAccelerationStructureIndexFormatFlagBitsNV = 2 ;
pub const VkClusterAccelerationStructureIndexFormatFlagBitsNV_VK_CLUSTER_ACCELERATION_STRUCTURE_INDEX_FORMAT_32BIT_NV : VkClusterAccelerationStructureIndexFormatFlagBitsNV = 4 ;
pub const VkClusterAccelerationStructureIndexFormatFlagBitsNV_VK_CLUSTER_ACCELERATION_STRUCTURE_INDEX_FORMAT_FLAG_BITS_MAX_ENUM_NV : VkClusterAccelerationStructureIndexFormatFlagBitsNV = 2147483647 ;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceClusterAccelerationStructureFeaturesNV"][::core::mem::size_of::<
        VkPhysicalDeviceClusterAccelerationStructureFeaturesNV,
    >() - 12usize];
    ["Alignment of VkPhysicalDeviceClusterAccelerationStructureFeaturesNV"][::core::mem::align_of::<
        VkPhysicalDeviceClusterAccelerationStructureFeaturesNV,
    >() - 4usize];
    ["Offset of field: VkPhysicalDeviceClusterAccelerationStructureFeaturesNV::sType"][::core::mem::offset_of!(
        VkPhysicalDeviceClusterAccelerationStructureFeaturesNV,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceClusterAccelerationStructureFeaturesNV::pNext"][::core::mem::offset_of!(
        VkPhysicalDeviceClusterAccelerationStructureFeaturesNV,
        pNext
    ) - 4usize];
    ["Offset of field: VkPhysicalDeviceClusterAccelerationStructureFeaturesNV::clusterAccelerationStructure"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceClusterAccelerationStructureFeaturesNV , clusterAccelerationStructure) - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceClusterAccelerationStructurePropertiesNV"][::core::mem::size_of::<
        VkPhysicalDeviceClusterAccelerationStructurePropertiesNV,
    >() - 40usize];
    ["Alignment of VkPhysicalDeviceClusterAccelerationStructurePropertiesNV"][::core::mem::align_of::<
        VkPhysicalDeviceClusterAccelerationStructurePropertiesNV,
    >() - 4usize];
    ["Offset of field: VkPhysicalDeviceClusterAccelerationStructurePropertiesNV::sType"][::core::mem::offset_of!(
        VkPhysicalDeviceClusterAccelerationStructurePropertiesNV,
        sType
    )
        - 0usize];
    ["Offset of field: VkPhysicalDeviceClusterAccelerationStructurePropertiesNV::pNext"][::core::mem::offset_of!(
        VkPhysicalDeviceClusterAccelerationStructurePropertiesNV,
        pNext
    )
        - 4usize];
    ["Offset of field: VkPhysicalDeviceClusterAccelerationStructurePropertiesNV::maxVerticesPerCluster"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceClusterAccelerationStructurePropertiesNV , maxVerticesPerCluster) - 8usize] ;
    ["Offset of field: VkPhysicalDeviceClusterAccelerationStructurePropertiesNV::maxTrianglesPerCluster"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceClusterAccelerationStructurePropertiesNV , maxTrianglesPerCluster) - 12usize] ;
    ["Offset of field: VkPhysicalDeviceClusterAccelerationStructurePropertiesNV::clusterScratchByteAlignment"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceClusterAccelerationStructurePropertiesNV , clusterScratchByteAlignment) - 16usize] ;
    ["Offset of field: VkPhysicalDeviceClusterAccelerationStructurePropertiesNV::clusterByteAlignment"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceClusterAccelerationStructurePropertiesNV , clusterByteAlignment) - 20usize] ;
    ["Offset of field: VkPhysicalDeviceClusterAccelerationStructurePropertiesNV::clusterTemplateByteAlignment"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceClusterAccelerationStructurePropertiesNV , clusterTemplateByteAlignment) - 24usize] ;
    ["Offset of field: VkPhysicalDeviceClusterAccelerationStructurePropertiesNV::clusterBottomLevelByteAlignment"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceClusterAccelerationStructurePropertiesNV , clusterBottomLevelByteAlignment) - 28usize] ;
    ["Offset of field: VkPhysicalDeviceClusterAccelerationStructurePropertiesNV::clusterTemplateBoundsByteAlignment"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceClusterAccelerationStructurePropertiesNV , clusterTemplateBoundsByteAlignment) - 32usize] ;
    ["Offset of field: VkPhysicalDeviceClusterAccelerationStructurePropertiesNV::maxClusterGeometryIndex"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceClusterAccelerationStructurePropertiesNV , maxClusterGeometryIndex) - 36usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkClusterAccelerationStructureClustersBottomLevelInputNV"][::core::mem::size_of::<
        VkClusterAccelerationStructureClustersBottomLevelInputNV,
    >() - 16usize];
    ["Alignment of VkClusterAccelerationStructureClustersBottomLevelInputNV"][::core::mem::align_of::<
        VkClusterAccelerationStructureClustersBottomLevelInputNV,
    >() - 4usize];
    ["Offset of field: VkClusterAccelerationStructureClustersBottomLevelInputNV::sType"][::core::mem::offset_of!(
        VkClusterAccelerationStructureClustersBottomLevelInputNV,
        sType
    )
        - 0usize];
    ["Offset of field: VkClusterAccelerationStructureClustersBottomLevelInputNV::pNext"][::core::mem::offset_of!(
        VkClusterAccelerationStructureClustersBottomLevelInputNV,
        pNext
    )
        - 4usize];
    ["Offset of field: VkClusterAccelerationStructureClustersBottomLevelInputNV::maxTotalClusterCount"] [:: core :: mem :: offset_of ! (VkClusterAccelerationStructureClustersBottomLevelInputNV , maxTotalClusterCount) - 8usize] ;
    ["Offset of field: VkClusterAccelerationStructureClustersBottomLevelInputNV::maxClusterCountPerAccelerationStructure"] [:: core :: mem :: offset_of ! (VkClusterAccelerationStructureClustersBottomLevelInputNV , maxClusterCountPerAccelerationStructure) - 12usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkClusterAccelerationStructureTriangleClusterInputNV"]
        [::core::mem::size_of::<VkClusterAccelerationStructureTriangleClusterInputNV>() - 40usize];
    ["Alignment of VkClusterAccelerationStructureTriangleClusterInputNV"]
        [::core::mem::align_of::<VkClusterAccelerationStructureTriangleClusterInputNV>() - 4usize];
    ["Offset of field: VkClusterAccelerationStructureTriangleClusterInputNV::sType"][::core::mem::offset_of!(
        VkClusterAccelerationStructureTriangleClusterInputNV,
        sType
    ) - 0usize];
    ["Offset of field: VkClusterAccelerationStructureTriangleClusterInputNV::pNext"][::core::mem::offset_of!(
        VkClusterAccelerationStructureTriangleClusterInputNV,
        pNext
    ) - 4usize];
    ["Offset of field: VkClusterAccelerationStructureTriangleClusterInputNV::vertexFormat"][::core::mem::offset_of!(
        VkClusterAccelerationStructureTriangleClusterInputNV,
        vertexFormat
    )
        - 8usize];
    ["Offset of field: VkClusterAccelerationStructureTriangleClusterInputNV::maxGeometryIndexValue"] [:: core :: mem :: offset_of ! (VkClusterAccelerationStructureTriangleClusterInputNV , maxGeometryIndexValue) - 12usize] ;
    ["Offset of field: VkClusterAccelerationStructureTriangleClusterInputNV::maxClusterUniqueGeometryCount"] [:: core :: mem :: offset_of ! (VkClusterAccelerationStructureTriangleClusterInputNV , maxClusterUniqueGeometryCount) - 16usize] ;
    ["Offset of field: VkClusterAccelerationStructureTriangleClusterInputNV::maxClusterTriangleCount"] [:: core :: mem :: offset_of ! (VkClusterAccelerationStructureTriangleClusterInputNV , maxClusterTriangleCount) - 20usize] ;
    ["Offset of field: VkClusterAccelerationStructureTriangleClusterInputNV::maxClusterVertexCount"] [:: core :: mem :: offset_of ! (VkClusterAccelerationStructureTriangleClusterInputNV , maxClusterVertexCount) - 24usize] ;
    ["Offset of field: VkClusterAccelerationStructureTriangleClusterInputNV::maxTotalTriangleCount"] [:: core :: mem :: offset_of ! (VkClusterAccelerationStructureTriangleClusterInputNV , maxTotalTriangleCount) - 28usize] ;
    ["Offset of field: VkClusterAccelerationStructureTriangleClusterInputNV::maxTotalVertexCount"] [:: core :: mem :: offset_of ! (VkClusterAccelerationStructureTriangleClusterInputNV , maxTotalVertexCount) - 32usize] ;
    ["Offset of field: VkClusterAccelerationStructureTriangleClusterInputNV::minPositionTruncateBitCount"] [:: core :: mem :: offset_of ! (VkClusterAccelerationStructureTriangleClusterInputNV , minPositionTruncateBitCount) - 36usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkClusterAccelerationStructureMoveObjectsInputNV"]
        [::core::mem::size_of::<VkClusterAccelerationStructureMoveObjectsInputNV>() - 24usize];
    ["Alignment of VkClusterAccelerationStructureMoveObjectsInputNV"]
        [::core::mem::align_of::<VkClusterAccelerationStructureMoveObjectsInputNV>() - 8usize];
    ["Offset of field: VkClusterAccelerationStructureMoveObjectsInputNV::sType"]
        [::core::mem::offset_of!(VkClusterAccelerationStructureMoveObjectsInputNV, sType) - 0usize];
    ["Offset of field: VkClusterAccelerationStructureMoveObjectsInputNV::pNext"]
        [::core::mem::offset_of!(VkClusterAccelerationStructureMoveObjectsInputNV, pNext) - 4usize];
    ["Offset of field: VkClusterAccelerationStructureMoveObjectsInputNV::type_"]
        [::core::mem::offset_of!(VkClusterAccelerationStructureMoveObjectsInputNV, type_) - 8usize];
    ["Offset of field: VkClusterAccelerationStructureMoveObjectsInputNV::noMoveOverlap"][::core::mem::offset_of!(
        VkClusterAccelerationStructureMoveObjectsInputNV,
        noMoveOverlap
    )
        - 12usize];
    ["Offset of field: VkClusterAccelerationStructureMoveObjectsInputNV::maxMovedBytes"][::core::mem::offset_of!(
        VkClusterAccelerationStructureMoveObjectsInputNV,
        maxMovedBytes
    )
        - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkClusterAccelerationStructureOpInputNV"]
        [::core::mem::size_of::<VkClusterAccelerationStructureOpInputNV>() - 4usize];
    ["Alignment of VkClusterAccelerationStructureOpInputNV"]
        [::core::mem::align_of::<VkClusterAccelerationStructureOpInputNV>() - 4usize];
    ["Offset of field: VkClusterAccelerationStructureOpInputNV::pClustersBottomLevel"][::core::mem::offset_of!(
        VkClusterAccelerationStructureOpInputNV,
        pClustersBottomLevel
    ) - 0usize];
    ["Offset of field: VkClusterAccelerationStructureOpInputNV::pTriangleClusters"][::core::mem::offset_of!(
        VkClusterAccelerationStructureOpInputNV,
        pTriangleClusters
    ) - 0usize];
    ["Offset of field: VkClusterAccelerationStructureOpInputNV::pMoveObjects"]
        [::core::mem::offset_of!(VkClusterAccelerationStructureOpInputNV, pMoveObjects) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkClusterAccelerationStructureInputInfoNV"]
        [::core::mem::size_of::<VkClusterAccelerationStructureInputInfoNV>() - 28usize];
    ["Alignment of VkClusterAccelerationStructureInputInfoNV"]
        [::core::mem::align_of::<VkClusterAccelerationStructureInputInfoNV>() - 4usize];
    ["Offset of field: VkClusterAccelerationStructureInputInfoNV::sType"]
        [::core::mem::offset_of!(VkClusterAccelerationStructureInputInfoNV, sType) - 0usize];
    ["Offset of field: VkClusterAccelerationStructureInputInfoNV::pNext"]
        [::core::mem::offset_of!(VkClusterAccelerationStructureInputInfoNV, pNext) - 4usize];
    ["Offset of field: VkClusterAccelerationStructureInputInfoNV::maxAccelerationStructureCount"][::core::mem::offset_of!(
        VkClusterAccelerationStructureInputInfoNV,
        maxAccelerationStructureCount
    )
        - 8usize];
    ["Offset of field: VkClusterAccelerationStructureInputInfoNV::flags"]
        [::core::mem::offset_of!(VkClusterAccelerationStructureInputInfoNV, flags) - 12usize];
    ["Offset of field: VkClusterAccelerationStructureInputInfoNV::opType"]
        [::core::mem::offset_of!(VkClusterAccelerationStructureInputInfoNV, opType) - 16usize];
    ["Offset of field: VkClusterAccelerationStructureInputInfoNV::opMode"]
        [::core::mem::offset_of!(VkClusterAccelerationStructureInputInfoNV, opMode) - 20usize];
    ["Offset of field: VkClusterAccelerationStructureInputInfoNV::opInput"]
        [::core::mem::offset_of!(VkClusterAccelerationStructureInputInfoNV, opInput) - 24usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkStridedDeviceAddressRegionKHR"]
        [::core::mem::size_of::<VkStridedDeviceAddressRegionKHR>() - 24usize];
    ["Alignment of VkStridedDeviceAddressRegionKHR"]
        [::core::mem::align_of::<VkStridedDeviceAddressRegionKHR>() - 8usize];
    ["Offset of field: VkStridedDeviceAddressRegionKHR::deviceAddress"]
        [::core::mem::offset_of!(VkStridedDeviceAddressRegionKHR, deviceAddress) - 0usize];
    ["Offset of field: VkStridedDeviceAddressRegionKHR::stride"]
        [::core::mem::offset_of!(VkStridedDeviceAddressRegionKHR, stride) - 8usize];
    ["Offset of field: VkStridedDeviceAddressRegionKHR::size"]
        [::core::mem::offset_of!(VkStridedDeviceAddressRegionKHR, size) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkClusterAccelerationStructureCommandsInfoNV"]
        [::core::mem::size_of::<VkClusterAccelerationStructureCommandsInfoNV>() - 144usize];
    ["Alignment of VkClusterAccelerationStructureCommandsInfoNV"]
        [::core::mem::align_of::<VkClusterAccelerationStructureCommandsInfoNV>() - 8usize];
    ["Offset of field: VkClusterAccelerationStructureCommandsInfoNV::sType"]
        [::core::mem::offset_of!(VkClusterAccelerationStructureCommandsInfoNV, sType) - 0usize];
    ["Offset of field: VkClusterAccelerationStructureCommandsInfoNV::pNext"]
        [::core::mem::offset_of!(VkClusterAccelerationStructureCommandsInfoNV, pNext) - 4usize];
    ["Offset of field: VkClusterAccelerationStructureCommandsInfoNV::input"]
        [::core::mem::offset_of!(VkClusterAccelerationStructureCommandsInfoNV, input) - 8usize];
    ["Offset of field: VkClusterAccelerationStructureCommandsInfoNV::dstImplicitData"][::core::mem::offset_of!(
        VkClusterAccelerationStructureCommandsInfoNV,
        dstImplicitData
    ) - 40usize];
    ["Offset of field: VkClusterAccelerationStructureCommandsInfoNV::scratchData"][::core::mem::offset_of!(
        VkClusterAccelerationStructureCommandsInfoNV,
        scratchData
    ) - 48usize];
    ["Offset of field: VkClusterAccelerationStructureCommandsInfoNV::dstAddressesArray"][::core::mem::offset_of!(
        VkClusterAccelerationStructureCommandsInfoNV,
        dstAddressesArray
    )
        - 56usize];
    ["Offset of field: VkClusterAccelerationStructureCommandsInfoNV::dstSizesArray"][::core::mem::offset_of!(
        VkClusterAccelerationStructureCommandsInfoNV,
        dstSizesArray
    ) - 80usize];
    ["Offset of field: VkClusterAccelerationStructureCommandsInfoNV::srcInfosArray"][::core::mem::offset_of!(
        VkClusterAccelerationStructureCommandsInfoNV,
        srcInfosArray
    ) - 104usize];
    ["Offset of field: VkClusterAccelerationStructureCommandsInfoNV::srcInfosCount"][::core::mem::offset_of!(
        VkClusterAccelerationStructureCommandsInfoNV,
        srcInfosCount
    ) - 128usize];
    ["Offset of field: VkClusterAccelerationStructureCommandsInfoNV::addressResolutionFlags"][::core::mem::offset_of!(
        VkClusterAccelerationStructureCommandsInfoNV,
        addressResolutionFlags
    )
        - 136usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkStridedDeviceAddressNV"]
        [::core::mem::size_of::<VkStridedDeviceAddressNV>() - 16usize];
    ["Alignment of VkStridedDeviceAddressNV"]
        [::core::mem::align_of::<VkStridedDeviceAddressNV>() - 8usize];
    ["Offset of field: VkStridedDeviceAddressNV::startAddress"]
        [::core::mem::offset_of!(VkStridedDeviceAddressNV, startAddress) - 0usize];
    ["Offset of field: VkStridedDeviceAddressNV::strideInBytes"]
        [::core::mem::offset_of!(VkStridedDeviceAddressNV, strideInBytes) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkClusterAccelerationStructureGeometryIndexAndGeometryFlagsNV"][::core::mem::size_of::<
        VkClusterAccelerationStructureGeometryIndexAndGeometryFlagsNV,
    >() - 4usize];
    ["Alignment of VkClusterAccelerationStructureGeometryIndexAndGeometryFlagsNV"]
        [::core::mem::align_of::<VkClusterAccelerationStructureGeometryIndexAndGeometryFlagsNV>()
            - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkClusterAccelerationStructureMoveObjectsInfoNV"]
        [::core::mem::size_of::<VkClusterAccelerationStructureMoveObjectsInfoNV>() - 8usize];
    ["Alignment of VkClusterAccelerationStructureMoveObjectsInfoNV"]
        [::core::mem::align_of::<VkClusterAccelerationStructureMoveObjectsInfoNV>() - 8usize];
    ["Offset of field: VkClusterAccelerationStructureMoveObjectsInfoNV::srcAccelerationStructure"] [:: core :: mem :: offset_of ! (VkClusterAccelerationStructureMoveObjectsInfoNV , srcAccelerationStructure) - 0usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkClusterAccelerationStructureBuildClustersBottomLevelInfoNV"][::core::mem::size_of::<
        VkClusterAccelerationStructureBuildClustersBottomLevelInfoNV,
    >() - 16usize];
    ["Alignment of VkClusterAccelerationStructureBuildClustersBottomLevelInfoNV"]
        [::core::mem::align_of::<VkClusterAccelerationStructureBuildClustersBottomLevelInfoNV>()
            - 8usize];
    ["Offset of field: VkClusterAccelerationStructureBuildClustersBottomLevelInfoNV::clusterReferencesCount"] [:: core :: mem :: offset_of ! (VkClusterAccelerationStructureBuildClustersBottomLevelInfoNV , clusterReferencesCount) - 0usize] ;
    ["Offset of field: VkClusterAccelerationStructureBuildClustersBottomLevelInfoNV::clusterReferencesStride"] [:: core :: mem :: offset_of ! (VkClusterAccelerationStructureBuildClustersBottomLevelInfoNV , clusterReferencesStride) - 4usize] ;
    ["Offset of field: VkClusterAccelerationStructureBuildClustersBottomLevelInfoNV::clusterReferences"] [:: core :: mem :: offset_of ! (VkClusterAccelerationStructureBuildClustersBottomLevelInfoNV , clusterReferences) - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkClusterAccelerationStructureBuildTriangleClusterInfoNV"][::core::mem::size_of::<
        VkClusterAccelerationStructureBuildTriangleClusterInfoNV,
    >() - 64usize];
    ["Alignment of VkClusterAccelerationStructureBuildTriangleClusterInfoNV"][::core::mem::align_of::<
        VkClusterAccelerationStructureBuildTriangleClusterInfoNV,
    >() - 8usize];
    ["Offset of field: VkClusterAccelerationStructureBuildTriangleClusterInfoNV::clusterID"][::core::mem::offset_of!(
        VkClusterAccelerationStructureBuildTriangleClusterInfoNV,
        clusterID
    )
        - 0usize];
    ["Offset of field: VkClusterAccelerationStructureBuildTriangleClusterInfoNV::clusterFlags"][::core::mem::offset_of!(
        VkClusterAccelerationStructureBuildTriangleClusterInfoNV,
        clusterFlags
    )
        - 4usize];
    ["Offset of field: VkClusterAccelerationStructureBuildTriangleClusterInfoNV::baseGeometryIndexAndGeometryFlags"] [:: core :: mem :: offset_of ! (VkClusterAccelerationStructureBuildTriangleClusterInfoNV , baseGeometryIndexAndGeometryFlags) - 12usize] ;
    ["Offset of field: VkClusterAccelerationStructureBuildTriangleClusterInfoNV::indexBufferStride"] [:: core :: mem :: offset_of ! (VkClusterAccelerationStructureBuildTriangleClusterInfoNV , indexBufferStride) - 16usize] ;
    ["Offset of field: VkClusterAccelerationStructureBuildTriangleClusterInfoNV::vertexBufferStride"] [:: core :: mem :: offset_of ! (VkClusterAccelerationStructureBuildTriangleClusterInfoNV , vertexBufferStride) - 18usize] ;
    ["Offset of field: VkClusterAccelerationStructureBuildTriangleClusterInfoNV::geometryIndexAndFlagsBufferStride"] [:: core :: mem :: offset_of ! (VkClusterAccelerationStructureBuildTriangleClusterInfoNV , geometryIndexAndFlagsBufferStride) - 20usize] ;
    ["Offset of field: VkClusterAccelerationStructureBuildTriangleClusterInfoNV::opacityMicromapIndexBufferStride"] [:: core :: mem :: offset_of ! (VkClusterAccelerationStructureBuildTriangleClusterInfoNV , opacityMicromapIndexBufferStride) - 22usize] ;
    ["Offset of field: VkClusterAccelerationStructureBuildTriangleClusterInfoNV::indexBuffer"][::core::mem::offset_of!(
        VkClusterAccelerationStructureBuildTriangleClusterInfoNV,
        indexBuffer
    )
        - 24usize];
    ["Offset of field: VkClusterAccelerationStructureBuildTriangleClusterInfoNV::vertexBuffer"][::core::mem::offset_of!(
        VkClusterAccelerationStructureBuildTriangleClusterInfoNV,
        vertexBuffer
    )
        - 32usize];
    ["Offset of field: VkClusterAccelerationStructureBuildTriangleClusterInfoNV::geometryIndexAndFlagsBuffer"] [:: core :: mem :: offset_of ! (VkClusterAccelerationStructureBuildTriangleClusterInfoNV , geometryIndexAndFlagsBuffer) - 40usize] ;
    ["Offset of field: VkClusterAccelerationStructureBuildTriangleClusterInfoNV::opacityMicromapArray"] [:: core :: mem :: offset_of ! (VkClusterAccelerationStructureBuildTriangleClusterInfoNV , opacityMicromapArray) - 48usize] ;
    ["Offset of field: VkClusterAccelerationStructureBuildTriangleClusterInfoNV::opacityMicromapIndexBuffer"] [:: core :: mem :: offset_of ! (VkClusterAccelerationStructureBuildTriangleClusterInfoNV , opacityMicromapIndexBuffer) - 56usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkClusterAccelerationStructureBuildTriangleClusterTemplateInfoNV"]
        [::core::mem::size_of::<VkClusterAccelerationStructureBuildTriangleClusterTemplateInfoNV>(
        ) - 72usize];
    ["Alignment of VkClusterAccelerationStructureBuildTriangleClusterTemplateInfoNV"]
        [::core::mem::align_of::<VkClusterAccelerationStructureBuildTriangleClusterTemplateInfoNV>(
        ) - 8usize];
    ["Offset of field: VkClusterAccelerationStructureBuildTriangleClusterTemplateInfoNV::clusterID"] [:: core :: mem :: offset_of ! (VkClusterAccelerationStructureBuildTriangleClusterTemplateInfoNV , clusterID) - 0usize] ;
    ["Offset of field: VkClusterAccelerationStructureBuildTriangleClusterTemplateInfoNV::clusterFlags"] [:: core :: mem :: offset_of ! (VkClusterAccelerationStructureBuildTriangleClusterTemplateInfoNV , clusterFlags) - 4usize] ;
    ["Offset of field: VkClusterAccelerationStructureBuildTriangleClusterTemplateInfoNV::baseGeometryIndexAndGeometryFlags"] [:: core :: mem :: offset_of ! (VkClusterAccelerationStructureBuildTriangleClusterTemplateInfoNV , baseGeometryIndexAndGeometryFlags) - 12usize] ;
    ["Offset of field: VkClusterAccelerationStructureBuildTriangleClusterTemplateInfoNV::indexBufferStride"] [:: core :: mem :: offset_of ! (VkClusterAccelerationStructureBuildTriangleClusterTemplateInfoNV , indexBufferStride) - 16usize] ;
    ["Offset of field: VkClusterAccelerationStructureBuildTriangleClusterTemplateInfoNV::vertexBufferStride"] [:: core :: mem :: offset_of ! (VkClusterAccelerationStructureBuildTriangleClusterTemplateInfoNV , vertexBufferStride) - 18usize] ;
    ["Offset of field: VkClusterAccelerationStructureBuildTriangleClusterTemplateInfoNV::geometryIndexAndFlagsBufferStride"] [:: core :: mem :: offset_of ! (VkClusterAccelerationStructureBuildTriangleClusterTemplateInfoNV , geometryIndexAndFlagsBufferStride) - 20usize] ;
    ["Offset of field: VkClusterAccelerationStructureBuildTriangleClusterTemplateInfoNV::opacityMicromapIndexBufferStride"] [:: core :: mem :: offset_of ! (VkClusterAccelerationStructureBuildTriangleClusterTemplateInfoNV , opacityMicromapIndexBufferStride) - 22usize] ;
    ["Offset of field: VkClusterAccelerationStructureBuildTriangleClusterTemplateInfoNV::indexBuffer"] [:: core :: mem :: offset_of ! (VkClusterAccelerationStructureBuildTriangleClusterTemplateInfoNV , indexBuffer) - 24usize] ;
    ["Offset of field: VkClusterAccelerationStructureBuildTriangleClusterTemplateInfoNV::vertexBuffer"] [:: core :: mem :: offset_of ! (VkClusterAccelerationStructureBuildTriangleClusterTemplateInfoNV , vertexBuffer) - 32usize] ;
    ["Offset of field: VkClusterAccelerationStructureBuildTriangleClusterTemplateInfoNV::geometryIndexAndFlagsBuffer"] [:: core :: mem :: offset_of ! (VkClusterAccelerationStructureBuildTriangleClusterTemplateInfoNV , geometryIndexAndFlagsBuffer) - 40usize] ;
    ["Offset of field: VkClusterAccelerationStructureBuildTriangleClusterTemplateInfoNV::opacityMicromapArray"] [:: core :: mem :: offset_of ! (VkClusterAccelerationStructureBuildTriangleClusterTemplateInfoNV , opacityMicromapArray) - 48usize] ;
    ["Offset of field: VkClusterAccelerationStructureBuildTriangleClusterTemplateInfoNV::opacityMicromapIndexBuffer"] [:: core :: mem :: offset_of ! (VkClusterAccelerationStructureBuildTriangleClusterTemplateInfoNV , opacityMicromapIndexBuffer) - 56usize] ;
    ["Offset of field: VkClusterAccelerationStructureBuildTriangleClusterTemplateInfoNV::instantiationBoundingBoxLimit"] [:: core :: mem :: offset_of ! (VkClusterAccelerationStructureBuildTriangleClusterTemplateInfoNV , instantiationBoundingBoxLimit) - 64usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkClusterAccelerationStructureInstantiateClusterInfoNV"][::core::mem::size_of::<
        VkClusterAccelerationStructureInstantiateClusterInfoNV,
    >() - 32usize];
    ["Alignment of VkClusterAccelerationStructureInstantiateClusterInfoNV"][::core::mem::align_of::<
        VkClusterAccelerationStructureInstantiateClusterInfoNV,
    >() - 8usize];
    ["Offset of field: VkClusterAccelerationStructureInstantiateClusterInfoNV::clusterIdOffset"][::core::mem::offset_of!(
        VkClusterAccelerationStructureInstantiateClusterInfoNV,
        clusterIdOffset
    )
        - 0usize];
    ["Offset of field: VkClusterAccelerationStructureInstantiateClusterInfoNV::clusterTemplateAddress"] [:: core :: mem :: offset_of ! (VkClusterAccelerationStructureInstantiateClusterInfoNV , clusterTemplateAddress) - 8usize] ;
    ["Offset of field: VkClusterAccelerationStructureInstantiateClusterInfoNV::vertexBuffer"][::core::mem::offset_of!(
        VkClusterAccelerationStructureInstantiateClusterInfoNV,
        vertexBuffer
    )
        - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkAccelerationStructureBuildSizesInfoKHR"]
        [::core::mem::size_of::<VkAccelerationStructureBuildSizesInfoKHR>() - 32usize];
    ["Alignment of VkAccelerationStructureBuildSizesInfoKHR"]
        [::core::mem::align_of::<VkAccelerationStructureBuildSizesInfoKHR>() - 8usize];
    ["Offset of field: VkAccelerationStructureBuildSizesInfoKHR::sType"]
        [::core::mem::offset_of!(VkAccelerationStructureBuildSizesInfoKHR, sType) - 0usize];
    ["Offset of field: VkAccelerationStructureBuildSizesInfoKHR::pNext"]
        [::core::mem::offset_of!(VkAccelerationStructureBuildSizesInfoKHR, pNext) - 4usize];
    ["Offset of field: VkAccelerationStructureBuildSizesInfoKHR::accelerationStructureSize"][::core::mem::offset_of!(
        VkAccelerationStructureBuildSizesInfoKHR,
        accelerationStructureSize
    )
        - 8usize];
    ["Offset of field: VkAccelerationStructureBuildSizesInfoKHR::updateScratchSize"][::core::mem::offset_of!(
        VkAccelerationStructureBuildSizesInfoKHR,
        updateScratchSize
    ) - 16usize];
    ["Offset of field: VkAccelerationStructureBuildSizesInfoKHR::buildScratchSize"][::core::mem::offset_of!(
        VkAccelerationStructureBuildSizesInfoKHR,
        buildScratchSize
    ) - 24usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkRayTracingPipelineClusterAccelerationStructureCreateInfoNV"][::core::mem::size_of::<
        VkRayTracingPipelineClusterAccelerationStructureCreateInfoNV,
    >() - 12usize];
    ["Alignment of VkRayTracingPipelineClusterAccelerationStructureCreateInfoNV"]
        [::core::mem::align_of::<VkRayTracingPipelineClusterAccelerationStructureCreateInfoNV>()
            - 4usize];
    ["Offset of field: VkRayTracingPipelineClusterAccelerationStructureCreateInfoNV::sType"][::core::mem::offset_of!(
        VkRayTracingPipelineClusterAccelerationStructureCreateInfoNV,
        sType
    )
        - 0usize];
    ["Offset of field: VkRayTracingPipelineClusterAccelerationStructureCreateInfoNV::pNext"][::core::mem::offset_of!(
        VkRayTracingPipelineClusterAccelerationStructureCreateInfoNV,
        pNext
    )
        - 4usize];
    ["Offset of field: VkRayTracingPipelineClusterAccelerationStructureCreateInfoNV::allowClusterAccelerationStructure"] [:: core :: mem :: offset_of ! (VkRayTracingPipelineClusterAccelerationStructureCreateInfoNV , allowClusterAccelerationStructure) - 8usize] ;
};
pub const VkPartitionedAccelerationStructureOpTypeNV_VK_PARTITIONED_ACCELERATION_STRUCTURE_OP_TYPE_WRITE_INSTANCE_NV : VkPartitionedAccelerationStructureOpTypeNV = 0 ;
pub const VkPartitionedAccelerationStructureOpTypeNV_VK_PARTITIONED_ACCELERATION_STRUCTURE_OP_TYPE_UPDATE_INSTANCE_NV : VkPartitionedAccelerationStructureOpTypeNV = 1 ;
pub const VkPartitionedAccelerationStructureOpTypeNV_VK_PARTITIONED_ACCELERATION_STRUCTURE_OP_TYPE_WRITE_PARTITION_TRANSLATION_NV : VkPartitionedAccelerationStructureOpTypeNV = 2 ;
pub const VkPartitionedAccelerationStructureOpTypeNV_VK_PARTITIONED_ACCELERATION_STRUCTURE_OP_TYPE_MAX_ENUM_NV : VkPartitionedAccelerationStructureOpTypeNV = 2147483647 ;
pub const VkPartitionedAccelerationStructureInstanceFlagBitsNV_VK_PARTITIONED_ACCELERATION_STRUCTURE_INSTANCE_FLAG_TRIANGLE_FACING_CULL_DISABLE_BIT_NV : VkPartitionedAccelerationStructureInstanceFlagBitsNV = 1 ;
pub const VkPartitionedAccelerationStructureInstanceFlagBitsNV_VK_PARTITIONED_ACCELERATION_STRUCTURE_INSTANCE_FLAG_TRIANGLE_FLIP_FACING_BIT_NV : VkPartitionedAccelerationStructureInstanceFlagBitsNV = 2 ;
pub const VkPartitionedAccelerationStructureInstanceFlagBitsNV_VK_PARTITIONED_ACCELERATION_STRUCTURE_INSTANCE_FLAG_FORCE_OPAQUE_BIT_NV : VkPartitionedAccelerationStructureInstanceFlagBitsNV = 4 ;
pub const VkPartitionedAccelerationStructureInstanceFlagBitsNV_VK_PARTITIONED_ACCELERATION_STRUCTURE_INSTANCE_FLAG_FORCE_NO_OPAQUE_BIT_NV : VkPartitionedAccelerationStructureInstanceFlagBitsNV = 8 ;
pub const VkPartitionedAccelerationStructureInstanceFlagBitsNV_VK_PARTITIONED_ACCELERATION_STRUCTURE_INSTANCE_FLAG_ENABLE_EXPLICIT_BOUNDING_BOX_NV : VkPartitionedAccelerationStructureInstanceFlagBitsNV = 16 ;
pub const VkPartitionedAccelerationStructureInstanceFlagBitsNV_VK_PARTITIONED_ACCELERATION_STRUCTURE_INSTANCE_FLAG_BITS_MAX_ENUM_NV : VkPartitionedAccelerationStructureInstanceFlagBitsNV = 2147483647 ;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDevicePartitionedAccelerationStructureFeaturesNV"][::core::mem::size_of::<
        VkPhysicalDevicePartitionedAccelerationStructureFeaturesNV,
    >() - 12usize];
    ["Alignment of VkPhysicalDevicePartitionedAccelerationStructureFeaturesNV"]
        [::core::mem::align_of::<VkPhysicalDevicePartitionedAccelerationStructureFeaturesNV>()
            - 4usize];
    ["Offset of field: VkPhysicalDevicePartitionedAccelerationStructureFeaturesNV::sType"][::core::mem::offset_of!(
        VkPhysicalDevicePartitionedAccelerationStructureFeaturesNV,
        sType
    )
        - 0usize];
    ["Offset of field: VkPhysicalDevicePartitionedAccelerationStructureFeaturesNV::pNext"][::core::mem::offset_of!(
        VkPhysicalDevicePartitionedAccelerationStructureFeaturesNV,
        pNext
    )
        - 4usize];
    ["Offset of field: VkPhysicalDevicePartitionedAccelerationStructureFeaturesNV::partitionedAccelerationStructure"] [:: core :: mem :: offset_of ! (VkPhysicalDevicePartitionedAccelerationStructureFeaturesNV , partitionedAccelerationStructure) - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDevicePartitionedAccelerationStructurePropertiesNV"][::core::mem::size_of::<
        VkPhysicalDevicePartitionedAccelerationStructurePropertiesNV,
    >() - 12usize];
    ["Alignment of VkPhysicalDevicePartitionedAccelerationStructurePropertiesNV"]
        [::core::mem::align_of::<VkPhysicalDevicePartitionedAccelerationStructurePropertiesNV>()
            - 4usize];
    ["Offset of field: VkPhysicalDevicePartitionedAccelerationStructurePropertiesNV::sType"][::core::mem::offset_of!(
        VkPhysicalDevicePartitionedAccelerationStructurePropertiesNV,
        sType
    )
        - 0usize];
    ["Offset of field: VkPhysicalDevicePartitionedAccelerationStructurePropertiesNV::pNext"][::core::mem::offset_of!(
        VkPhysicalDevicePartitionedAccelerationStructurePropertiesNV,
        pNext
    )
        - 4usize];
    ["Offset of field: VkPhysicalDevicePartitionedAccelerationStructurePropertiesNV::maxPartitionCount"] [:: core :: mem :: offset_of ! (VkPhysicalDevicePartitionedAccelerationStructurePropertiesNV , maxPartitionCount) - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPartitionedAccelerationStructureFlagsNV"]
        [::core::mem::size_of::<VkPartitionedAccelerationStructureFlagsNV>() - 12usize];
    ["Alignment of VkPartitionedAccelerationStructureFlagsNV"]
        [::core::mem::align_of::<VkPartitionedAccelerationStructureFlagsNV>() - 4usize];
    ["Offset of field: VkPartitionedAccelerationStructureFlagsNV::sType"]
        [::core::mem::offset_of!(VkPartitionedAccelerationStructureFlagsNV, sType) - 0usize];
    ["Offset of field: VkPartitionedAccelerationStructureFlagsNV::pNext"]
        [::core::mem::offset_of!(VkPartitionedAccelerationStructureFlagsNV, pNext) - 4usize];
    ["Offset of field: VkPartitionedAccelerationStructureFlagsNV::enablePartitionTranslation"][::core::mem::offset_of!(
        VkPartitionedAccelerationStructureFlagsNV,
        enablePartitionTranslation
    )
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkBuildPartitionedAccelerationStructureIndirectCommandNV"][::core::mem::size_of::<
        VkBuildPartitionedAccelerationStructureIndirectCommandNV,
    >() - 24usize];
    ["Alignment of VkBuildPartitionedAccelerationStructureIndirectCommandNV"][::core::mem::align_of::<
        VkBuildPartitionedAccelerationStructureIndirectCommandNV,
    >() - 8usize];
    ["Offset of field: VkBuildPartitionedAccelerationStructureIndirectCommandNV::opType"][::core::mem::offset_of!(
        VkBuildPartitionedAccelerationStructureIndirectCommandNV,
        opType
    )
        - 0usize];
    ["Offset of field: VkBuildPartitionedAccelerationStructureIndirectCommandNV::argCount"][::core::mem::offset_of!(
        VkBuildPartitionedAccelerationStructureIndirectCommandNV,
        argCount
    )
        - 4usize];
    ["Offset of field: VkBuildPartitionedAccelerationStructureIndirectCommandNV::argData"][::core::mem::offset_of!(
        VkBuildPartitionedAccelerationStructureIndirectCommandNV,
        argData
    )
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPartitionedAccelerationStructureWriteInstanceDataNV"][::core::mem::size_of::<
        VkPartitionedAccelerationStructureWriteInstanceDataNV,
    >() - 104usize];
    ["Alignment of VkPartitionedAccelerationStructureWriteInstanceDataNV"]
        [::core::mem::align_of::<VkPartitionedAccelerationStructureWriteInstanceDataNV>() - 8usize];
    ["Offset of field: VkPartitionedAccelerationStructureWriteInstanceDataNV::transform"][::core::mem::offset_of!(
        VkPartitionedAccelerationStructureWriteInstanceDataNV,
        transform
    )
        - 0usize];
    ["Offset of field: VkPartitionedAccelerationStructureWriteInstanceDataNV::explicitAABB"][::core::mem::offset_of!(
        VkPartitionedAccelerationStructureWriteInstanceDataNV,
        explicitAABB
    )
        - 48usize];
    ["Offset of field: VkPartitionedAccelerationStructureWriteInstanceDataNV::instanceID"][::core::mem::offset_of!(
        VkPartitionedAccelerationStructureWriteInstanceDataNV,
        instanceID
    )
        - 72usize];
    ["Offset of field: VkPartitionedAccelerationStructureWriteInstanceDataNV::instanceMask"][::core::mem::offset_of!(
        VkPartitionedAccelerationStructureWriteInstanceDataNV,
        instanceMask
    )
        - 76usize];
    ["Offset of field: VkPartitionedAccelerationStructureWriteInstanceDataNV::instanceContributionToHitGroupIndex"] [:: core :: mem :: offset_of ! (VkPartitionedAccelerationStructureWriteInstanceDataNV , instanceContributionToHitGroupIndex) - 80usize] ;
    ["Offset of field: VkPartitionedAccelerationStructureWriteInstanceDataNV::instanceFlags"][::core::mem::offset_of!(
        VkPartitionedAccelerationStructureWriteInstanceDataNV,
        instanceFlags
    )
        - 84usize];
    ["Offset of field: VkPartitionedAccelerationStructureWriteInstanceDataNV::instanceIndex"][::core::mem::offset_of!(
        VkPartitionedAccelerationStructureWriteInstanceDataNV,
        instanceIndex
    )
        - 88usize];
    ["Offset of field: VkPartitionedAccelerationStructureWriteInstanceDataNV::partitionIndex"][::core::mem::offset_of!(
        VkPartitionedAccelerationStructureWriteInstanceDataNV,
        partitionIndex
    )
        - 92usize];
    ["Offset of field: VkPartitionedAccelerationStructureWriteInstanceDataNV::accelerationStructure"] [:: core :: mem :: offset_of ! (VkPartitionedAccelerationStructureWriteInstanceDataNV , accelerationStructure) - 96usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPartitionedAccelerationStructureUpdateInstanceDataNV"][::core::mem::size_of::<
        VkPartitionedAccelerationStructureUpdateInstanceDataNV,
    >() - 16usize];
    ["Alignment of VkPartitionedAccelerationStructureUpdateInstanceDataNV"][::core::mem::align_of::<
        VkPartitionedAccelerationStructureUpdateInstanceDataNV,
    >() - 8usize];
    ["Offset of field: VkPartitionedAccelerationStructureUpdateInstanceDataNV::instanceIndex"][::core::mem::offset_of!(
        VkPartitionedAccelerationStructureUpdateInstanceDataNV,
        instanceIndex
    )
        - 0usize];
    ["Offset of field: VkPartitionedAccelerationStructureUpdateInstanceDataNV::instanceContributionToHitGroupIndex"] [:: core :: mem :: offset_of ! (VkPartitionedAccelerationStructureUpdateInstanceDataNV , instanceContributionToHitGroupIndex) - 4usize] ;
    ["Offset of field: VkPartitionedAccelerationStructureUpdateInstanceDataNV::accelerationStructure"] [:: core :: mem :: offset_of ! (VkPartitionedAccelerationStructureUpdateInstanceDataNV , accelerationStructure) - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPartitionedAccelerationStructureWritePartitionTranslationDataNV"]
        [::core::mem::size_of::<VkPartitionedAccelerationStructureWritePartitionTranslationDataNV>(
        ) - 16usize];
    ["Alignment of VkPartitionedAccelerationStructureWritePartitionTranslationDataNV"]
        [::core::mem::align_of::<VkPartitionedAccelerationStructureWritePartitionTranslationDataNV>(
        ) - 4usize];
    ["Offset of field: VkPartitionedAccelerationStructureWritePartitionTranslationDataNV::partitionIndex"] [:: core :: mem :: offset_of ! (VkPartitionedAccelerationStructureWritePartitionTranslationDataNV , partitionIndex) - 0usize] ;
    ["Offset of field: VkPartitionedAccelerationStructureWritePartitionTranslationDataNV::partitionTranslation"] [:: core :: mem :: offset_of ! (VkPartitionedAccelerationStructureWritePartitionTranslationDataNV , partitionTranslation) - 4usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkWriteDescriptorSetPartitionedAccelerationStructureNV"][::core::mem::size_of::<
        VkWriteDescriptorSetPartitionedAccelerationStructureNV,
    >() - 16usize];
    ["Alignment of VkWriteDescriptorSetPartitionedAccelerationStructureNV"][::core::mem::align_of::<
        VkWriteDescriptorSetPartitionedAccelerationStructureNV,
    >() - 4usize];
    ["Offset of field: VkWriteDescriptorSetPartitionedAccelerationStructureNV::sType"][::core::mem::offset_of!(
        VkWriteDescriptorSetPartitionedAccelerationStructureNV,
        sType
    ) - 0usize];
    ["Offset of field: VkWriteDescriptorSetPartitionedAccelerationStructureNV::pNext"][::core::mem::offset_of!(
        VkWriteDescriptorSetPartitionedAccelerationStructureNV,
        pNext
    ) - 4usize];
    ["Offset of field: VkWriteDescriptorSetPartitionedAccelerationStructureNV::accelerationStructureCount"] [:: core :: mem :: offset_of ! (VkWriteDescriptorSetPartitionedAccelerationStructureNV , accelerationStructureCount) - 8usize] ;
    ["Offset of field: VkWriteDescriptorSetPartitionedAccelerationStructureNV::pAccelerationStructures"] [:: core :: mem :: offset_of ! (VkWriteDescriptorSetPartitionedAccelerationStructureNV , pAccelerationStructures) - 12usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPartitionedAccelerationStructureInstancesInputNV"]
        [::core::mem::size_of::<VkPartitionedAccelerationStructureInstancesInputNV>() - 28usize];
    ["Alignment of VkPartitionedAccelerationStructureInstancesInputNV"]
        [::core::mem::align_of::<VkPartitionedAccelerationStructureInstancesInputNV>() - 4usize];
    ["Offset of field: VkPartitionedAccelerationStructureInstancesInputNV::sType"][::core::mem::offset_of!(
        VkPartitionedAccelerationStructureInstancesInputNV,
        sType
    ) - 0usize];
    ["Offset of field: VkPartitionedAccelerationStructureInstancesInputNV::pNext"][::core::mem::offset_of!(
        VkPartitionedAccelerationStructureInstancesInputNV,
        pNext
    ) - 4usize];
    ["Offset of field: VkPartitionedAccelerationStructureInstancesInputNV::flags"][::core::mem::offset_of!(
        VkPartitionedAccelerationStructureInstancesInputNV,
        flags
    ) - 8usize];
    ["Offset of field: VkPartitionedAccelerationStructureInstancesInputNV::instanceCount"][::core::mem::offset_of!(
        VkPartitionedAccelerationStructureInstancesInputNV,
        instanceCount
    )
        - 12usize];
    ["Offset of field: VkPartitionedAccelerationStructureInstancesInputNV::maxInstancePerPartitionCount"] [:: core :: mem :: offset_of ! (VkPartitionedAccelerationStructureInstancesInputNV , maxInstancePerPartitionCount) - 16usize] ;
    ["Offset of field: VkPartitionedAccelerationStructureInstancesInputNV::partitionCount"][::core::mem::offset_of!(
        VkPartitionedAccelerationStructureInstancesInputNV,
        partitionCount
    )
        - 20usize];
    ["Offset of field: VkPartitionedAccelerationStructureInstancesInputNV::maxInstanceInGlobalPartitionCount"] [:: core :: mem :: offset_of ! (VkPartitionedAccelerationStructureInstancesInputNV , maxInstanceInGlobalPartitionCount) - 24usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkBuildPartitionedAccelerationStructureInfoNV"]
        [::core::mem::size_of::<VkBuildPartitionedAccelerationStructureInfoNV>() - 80usize];
    ["Alignment of VkBuildPartitionedAccelerationStructureInfoNV"]
        [::core::mem::align_of::<VkBuildPartitionedAccelerationStructureInfoNV>() - 8usize];
    ["Offset of field: VkBuildPartitionedAccelerationStructureInfoNV::sType"]
        [::core::mem::offset_of!(VkBuildPartitionedAccelerationStructureInfoNV, sType) - 0usize];
    ["Offset of field: VkBuildPartitionedAccelerationStructureInfoNV::pNext"]
        [::core::mem::offset_of!(VkBuildPartitionedAccelerationStructureInfoNV, pNext) - 4usize];
    ["Offset of field: VkBuildPartitionedAccelerationStructureInfoNV::input"]
        [::core::mem::offset_of!(VkBuildPartitionedAccelerationStructureInfoNV, input) - 8usize];
    ["Offset of field: VkBuildPartitionedAccelerationStructureInfoNV::srcAccelerationStructureData"] [:: core :: mem :: offset_of ! (VkBuildPartitionedAccelerationStructureInfoNV , srcAccelerationStructureData) - 40usize] ;
    ["Offset of field: VkBuildPartitionedAccelerationStructureInfoNV::dstAccelerationStructureData"] [:: core :: mem :: offset_of ! (VkBuildPartitionedAccelerationStructureInfoNV , dstAccelerationStructureData) - 48usize] ;
    ["Offset of field: VkBuildPartitionedAccelerationStructureInfoNV::scratchData"][::core::mem::offset_of!(
        VkBuildPartitionedAccelerationStructureInfoNV,
        scratchData
    ) - 56usize];
    ["Offset of field: VkBuildPartitionedAccelerationStructureInfoNV::srcInfos"][::core::mem::offset_of!(
        VkBuildPartitionedAccelerationStructureInfoNV,
        srcInfos
    ) - 64usize];
    ["Offset of field: VkBuildPartitionedAccelerationStructureInfoNV::srcInfosCount"][::core::mem::offset_of!(
        VkBuildPartitionedAccelerationStructureInfoNV,
        srcInfosCount
    ) - 72usize];
};
pub const VkIndirectExecutionSetInfoTypeEXT_VK_INDIRECT_EXECUTION_SET_INFO_TYPE_PIPELINES_EXT:
    VkIndirectExecutionSetInfoTypeEXT = 0;
pub const VkIndirectExecutionSetInfoTypeEXT_VK_INDIRECT_EXECUTION_SET_INFO_TYPE_SHADER_OBJECTS_EXT : VkIndirectExecutionSetInfoTypeEXT = 1 ;
pub const VkIndirectExecutionSetInfoTypeEXT_VK_INDIRECT_EXECUTION_SET_INFO_TYPE_MAX_ENUM_EXT:
    VkIndirectExecutionSetInfoTypeEXT = 2147483647;
pub const VkIndirectCommandsTokenTypeEXT_VK_INDIRECT_COMMANDS_TOKEN_TYPE_EXECUTION_SET_EXT:
    VkIndirectCommandsTokenTypeEXT = 0;
pub const VkIndirectCommandsTokenTypeEXT_VK_INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_EXT:
    VkIndirectCommandsTokenTypeEXT = 1;
pub const VkIndirectCommandsTokenTypeEXT_VK_INDIRECT_COMMANDS_TOKEN_TYPE_SEQUENCE_INDEX_EXT:
    VkIndirectCommandsTokenTypeEXT = 2;
pub const VkIndirectCommandsTokenTypeEXT_VK_INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_EXT:
    VkIndirectCommandsTokenTypeEXT = 3;
pub const VkIndirectCommandsTokenTypeEXT_VK_INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_EXT:
    VkIndirectCommandsTokenTypeEXT = 4;
pub const VkIndirectCommandsTokenTypeEXT_VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_EXT:
    VkIndirectCommandsTokenTypeEXT = 5;
pub const VkIndirectCommandsTokenTypeEXT_VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_EXT:
    VkIndirectCommandsTokenTypeEXT = 6;
pub const VkIndirectCommandsTokenTypeEXT_VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_COUNT_EXT:
    VkIndirectCommandsTokenTypeEXT = 7;
pub const VkIndirectCommandsTokenTypeEXT_VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_COUNT_EXT:
    VkIndirectCommandsTokenTypeEXT = 8;
pub const VkIndirectCommandsTokenTypeEXT_VK_INDIRECT_COMMANDS_TOKEN_TYPE_DISPATCH_EXT:
    VkIndirectCommandsTokenTypeEXT = 9;
pub const VkIndirectCommandsTokenTypeEXT_VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_MESH_TASKS_NV_EXT:
    VkIndirectCommandsTokenTypeEXT = 1000202002;
pub const VkIndirectCommandsTokenTypeEXT_VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_MESH_TASKS_COUNT_NV_EXT : VkIndirectCommandsTokenTypeEXT = 1000202003 ;
pub const VkIndirectCommandsTokenTypeEXT_VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_MESH_TASKS_EXT:
    VkIndirectCommandsTokenTypeEXT = 1000328000;
pub const VkIndirectCommandsTokenTypeEXT_VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_MESH_TASKS_COUNT_EXT : VkIndirectCommandsTokenTypeEXT = 1000328001 ;
pub const VkIndirectCommandsTokenTypeEXT_VK_INDIRECT_COMMANDS_TOKEN_TYPE_TRACE_RAYS2_EXT:
    VkIndirectCommandsTokenTypeEXT = 1000386004;
pub const VkIndirectCommandsTokenTypeEXT_VK_INDIRECT_COMMANDS_TOKEN_TYPE_MAX_ENUM_EXT:
    VkIndirectCommandsTokenTypeEXT = 2147483647;
pub const VkIndirectCommandsInputModeFlagBitsEXT_VK_INDIRECT_COMMANDS_INPUT_MODE_VULKAN_INDEX_BUFFER_EXT : VkIndirectCommandsInputModeFlagBitsEXT = 1 ;
pub const VkIndirectCommandsInputModeFlagBitsEXT_VK_INDIRECT_COMMANDS_INPUT_MODE_DXGI_INDEX_BUFFER_EXT : VkIndirectCommandsInputModeFlagBitsEXT = 2 ;
pub const VkIndirectCommandsInputModeFlagBitsEXT_VK_INDIRECT_COMMANDS_INPUT_MODE_FLAG_BITS_MAX_ENUM_EXT : VkIndirectCommandsInputModeFlagBitsEXT = 2147483647 ;
pub const VkIndirectCommandsLayoutUsageFlagBitsEXT_VK_INDIRECT_COMMANDS_LAYOUT_USAGE_EXPLICIT_PREPROCESS_BIT_EXT : VkIndirectCommandsLayoutUsageFlagBitsEXT = 1 ;
pub const VkIndirectCommandsLayoutUsageFlagBitsEXT_VK_INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_EXT : VkIndirectCommandsLayoutUsageFlagBitsEXT = 2 ;
pub const VkIndirectCommandsLayoutUsageFlagBitsEXT_VK_INDIRECT_COMMANDS_LAYOUT_USAGE_FLAG_BITS_MAX_ENUM_EXT : VkIndirectCommandsLayoutUsageFlagBitsEXT = 2147483647 ;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceDeviceGeneratedCommandsFeaturesEXT"]
        [::core::mem::size_of::<VkPhysicalDeviceDeviceGeneratedCommandsFeaturesEXT>() - 16usize];
    ["Alignment of VkPhysicalDeviceDeviceGeneratedCommandsFeaturesEXT"]
        [::core::mem::align_of::<VkPhysicalDeviceDeviceGeneratedCommandsFeaturesEXT>() - 4usize];
    ["Offset of field: VkPhysicalDeviceDeviceGeneratedCommandsFeaturesEXT::sType"][::core::mem::offset_of!(
        VkPhysicalDeviceDeviceGeneratedCommandsFeaturesEXT,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceDeviceGeneratedCommandsFeaturesEXT::pNext"][::core::mem::offset_of!(
        VkPhysicalDeviceDeviceGeneratedCommandsFeaturesEXT,
        pNext
    ) - 4usize];
    ["Offset of field: VkPhysicalDeviceDeviceGeneratedCommandsFeaturesEXT::deviceGeneratedCommands"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDeviceGeneratedCommandsFeaturesEXT , deviceGeneratedCommands) - 8usize] ;
    ["Offset of field: VkPhysicalDeviceDeviceGeneratedCommandsFeaturesEXT::dynamicGeneratedPipelineLayout"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDeviceGeneratedCommandsFeaturesEXT , dynamicGeneratedPipelineLayout) - 12usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT"]
        [::core::mem::size_of::<VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT>() - 56usize];
    ["Alignment of VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT"]
        [::core::mem::align_of::<VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT>() - 4usize];
    ["Offset of field: VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT::sType"][::core::mem::offset_of!(
        VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT::pNext"][::core::mem::offset_of!(
        VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT,
        pNext
    ) - 4usize];
    ["Offset of field: VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT::maxIndirectPipelineCount"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT , maxIndirectPipelineCount) - 8usize] ;
    ["Offset of field: VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT::maxIndirectShaderObjectCount"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT , maxIndirectShaderObjectCount) - 12usize] ;
    ["Offset of field: VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT::maxIndirectSequenceCount"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT , maxIndirectSequenceCount) - 16usize] ;
    ["Offset of field: VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT::maxIndirectCommandsTokenCount"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT , maxIndirectCommandsTokenCount) - 20usize] ;
    ["Offset of field: VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT::maxIndirectCommandsTokenOffset"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT , maxIndirectCommandsTokenOffset) - 24usize] ;
    ["Offset of field: VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT::maxIndirectCommandsIndirectStride"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT , maxIndirectCommandsIndirectStride) - 28usize] ;
    ["Offset of field: VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT::supportedIndirectCommandsInputModes"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT , supportedIndirectCommandsInputModes) - 32usize] ;
    ["Offset of field: VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT::supportedIndirectCommandsShaderStages"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT , supportedIndirectCommandsShaderStages) - 36usize] ;
    ["Offset of field: VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT::supportedIndirectCommandsShaderStagesPipelineBinding"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT , supportedIndirectCommandsShaderStagesPipelineBinding) - 40usize] ;
    ["Offset of field: VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT::supportedIndirectCommandsShaderStagesShaderBinding"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT , supportedIndirectCommandsShaderStagesShaderBinding) - 44usize] ;
    ["Offset of field: VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT::deviceGeneratedCommandsTransformFeedback"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT , deviceGeneratedCommandsTransformFeedback) - 48usize] ;
    ["Offset of field: VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT::deviceGeneratedCommandsMultiDrawIndirectCount"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT , deviceGeneratedCommandsMultiDrawIndirectCount) - 52usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkGeneratedCommandsMemoryRequirementsInfoEXT"]
        [::core::mem::size_of::<VkGeneratedCommandsMemoryRequirementsInfoEXT>() - 32usize];
    ["Alignment of VkGeneratedCommandsMemoryRequirementsInfoEXT"]
        [::core::mem::align_of::<VkGeneratedCommandsMemoryRequirementsInfoEXT>() - 8usize];
    ["Offset of field: VkGeneratedCommandsMemoryRequirementsInfoEXT::sType"]
        [::core::mem::offset_of!(VkGeneratedCommandsMemoryRequirementsInfoEXT, sType) - 0usize];
    ["Offset of field: VkGeneratedCommandsMemoryRequirementsInfoEXT::pNext"]
        [::core::mem::offset_of!(VkGeneratedCommandsMemoryRequirementsInfoEXT, pNext) - 4usize];
    ["Offset of field: VkGeneratedCommandsMemoryRequirementsInfoEXT::indirectExecutionSet"][::core::mem::offset_of!(
        VkGeneratedCommandsMemoryRequirementsInfoEXT,
        indirectExecutionSet
    )
        - 8usize];
    ["Offset of field: VkGeneratedCommandsMemoryRequirementsInfoEXT::indirectCommandsLayout"][::core::mem::offset_of!(
        VkGeneratedCommandsMemoryRequirementsInfoEXT,
        indirectCommandsLayout
    )
        - 16usize];
    ["Offset of field: VkGeneratedCommandsMemoryRequirementsInfoEXT::maxSequenceCount"][::core::mem::offset_of!(
        VkGeneratedCommandsMemoryRequirementsInfoEXT,
        maxSequenceCount
    )
        - 24usize];
    ["Offset of field: VkGeneratedCommandsMemoryRequirementsInfoEXT::maxDrawCount"][::core::mem::offset_of!(
        VkGeneratedCommandsMemoryRequirementsInfoEXT,
        maxDrawCount
    ) - 28usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkIndirectExecutionSetPipelineInfoEXT"]
        [::core::mem::size_of::<VkIndirectExecutionSetPipelineInfoEXT>() - 24usize];
    ["Alignment of VkIndirectExecutionSetPipelineInfoEXT"]
        [::core::mem::align_of::<VkIndirectExecutionSetPipelineInfoEXT>() - 8usize];
    ["Offset of field: VkIndirectExecutionSetPipelineInfoEXT::sType"]
        [::core::mem::offset_of!(VkIndirectExecutionSetPipelineInfoEXT, sType) - 0usize];
    ["Offset of field: VkIndirectExecutionSetPipelineInfoEXT::pNext"]
        [::core::mem::offset_of!(VkIndirectExecutionSetPipelineInfoEXT, pNext) - 4usize];
    ["Offset of field: VkIndirectExecutionSetPipelineInfoEXT::initialPipeline"]
        [::core::mem::offset_of!(VkIndirectExecutionSetPipelineInfoEXT, initialPipeline) - 8usize];
    ["Offset of field: VkIndirectExecutionSetPipelineInfoEXT::maxPipelineCount"][::core::mem::offset_of!(
        VkIndirectExecutionSetPipelineInfoEXT,
        maxPipelineCount
    ) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkIndirectExecutionSetShaderLayoutInfoEXT"]
        [::core::mem::size_of::<VkIndirectExecutionSetShaderLayoutInfoEXT>() - 16usize];
    ["Alignment of VkIndirectExecutionSetShaderLayoutInfoEXT"]
        [::core::mem::align_of::<VkIndirectExecutionSetShaderLayoutInfoEXT>() - 4usize];
    ["Offset of field: VkIndirectExecutionSetShaderLayoutInfoEXT::sType"]
        [::core::mem::offset_of!(VkIndirectExecutionSetShaderLayoutInfoEXT, sType) - 0usize];
    ["Offset of field: VkIndirectExecutionSetShaderLayoutInfoEXT::pNext"]
        [::core::mem::offset_of!(VkIndirectExecutionSetShaderLayoutInfoEXT, pNext) - 4usize];
    ["Offset of field: VkIndirectExecutionSetShaderLayoutInfoEXT::setLayoutCount"][::core::mem::offset_of!(
        VkIndirectExecutionSetShaderLayoutInfoEXT,
        setLayoutCount
    ) - 8usize];
    ["Offset of field: VkIndirectExecutionSetShaderLayoutInfoEXT::pSetLayouts"]
        [::core::mem::offset_of!(VkIndirectExecutionSetShaderLayoutInfoEXT, pSetLayouts) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkIndirectExecutionSetShaderInfoEXT"]
        [::core::mem::size_of::<VkIndirectExecutionSetShaderInfoEXT>() - 32usize];
    ["Alignment of VkIndirectExecutionSetShaderInfoEXT"]
        [::core::mem::align_of::<VkIndirectExecutionSetShaderInfoEXT>() - 4usize];
    ["Offset of field: VkIndirectExecutionSetShaderInfoEXT::sType"]
        [::core::mem::offset_of!(VkIndirectExecutionSetShaderInfoEXT, sType) - 0usize];
    ["Offset of field: VkIndirectExecutionSetShaderInfoEXT::pNext"]
        [::core::mem::offset_of!(VkIndirectExecutionSetShaderInfoEXT, pNext) - 4usize];
    ["Offset of field: VkIndirectExecutionSetShaderInfoEXT::shaderCount"]
        [::core::mem::offset_of!(VkIndirectExecutionSetShaderInfoEXT, shaderCount) - 8usize];
    ["Offset of field: VkIndirectExecutionSetShaderInfoEXT::pInitialShaders"]
        [::core::mem::offset_of!(VkIndirectExecutionSetShaderInfoEXT, pInitialShaders) - 12usize];
    ["Offset of field: VkIndirectExecutionSetShaderInfoEXT::pSetLayoutInfos"]
        [::core::mem::offset_of!(VkIndirectExecutionSetShaderInfoEXT, pSetLayoutInfos) - 16usize];
    ["Offset of field: VkIndirectExecutionSetShaderInfoEXT::maxShaderCount"]
        [::core::mem::offset_of!(VkIndirectExecutionSetShaderInfoEXT, maxShaderCount) - 20usize];
    ["Offset of field: VkIndirectExecutionSetShaderInfoEXT::pushConstantRangeCount"][::core::mem::offset_of!(
        VkIndirectExecutionSetShaderInfoEXT,
        pushConstantRangeCount
    ) - 24usize];
    ["Offset of field: VkIndirectExecutionSetShaderInfoEXT::pPushConstantRanges"][::core::mem::offset_of!(
        VkIndirectExecutionSetShaderInfoEXT,
        pPushConstantRanges
    ) - 28usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkIndirectExecutionSetInfoEXT"]
        [::core::mem::size_of::<VkIndirectExecutionSetInfoEXT>() - 4usize];
    ["Alignment of VkIndirectExecutionSetInfoEXT"]
        [::core::mem::align_of::<VkIndirectExecutionSetInfoEXT>() - 4usize];
    ["Offset of field: VkIndirectExecutionSetInfoEXT::pPipelineInfo"]
        [::core::mem::offset_of!(VkIndirectExecutionSetInfoEXT, pPipelineInfo) - 0usize];
    ["Offset of field: VkIndirectExecutionSetInfoEXT::pShaderInfo"]
        [::core::mem::offset_of!(VkIndirectExecutionSetInfoEXT, pShaderInfo) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkIndirectExecutionSetCreateInfoEXT"]
        [::core::mem::size_of::<VkIndirectExecutionSetCreateInfoEXT>() - 16usize];
    ["Alignment of VkIndirectExecutionSetCreateInfoEXT"]
        [::core::mem::align_of::<VkIndirectExecutionSetCreateInfoEXT>() - 4usize];
    ["Offset of field: VkIndirectExecutionSetCreateInfoEXT::sType"]
        [::core::mem::offset_of!(VkIndirectExecutionSetCreateInfoEXT, sType) - 0usize];
    ["Offset of field: VkIndirectExecutionSetCreateInfoEXT::pNext"]
        [::core::mem::offset_of!(VkIndirectExecutionSetCreateInfoEXT, pNext) - 4usize];
    ["Offset of field: VkIndirectExecutionSetCreateInfoEXT::type_"]
        [::core::mem::offset_of!(VkIndirectExecutionSetCreateInfoEXT, type_) - 8usize];
    ["Offset of field: VkIndirectExecutionSetCreateInfoEXT::info"]
        [::core::mem::offset_of!(VkIndirectExecutionSetCreateInfoEXT, info) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkGeneratedCommandsInfoEXT"]
        [::core::mem::size_of::<VkGeneratedCommandsInfoEXT>() - 88usize];
    ["Alignment of VkGeneratedCommandsInfoEXT"]
        [::core::mem::align_of::<VkGeneratedCommandsInfoEXT>() - 8usize];
    ["Offset of field: VkGeneratedCommandsInfoEXT::sType"]
        [::core::mem::offset_of!(VkGeneratedCommandsInfoEXT, sType) - 0usize];
    ["Offset of field: VkGeneratedCommandsInfoEXT::pNext"]
        [::core::mem::offset_of!(VkGeneratedCommandsInfoEXT, pNext) - 4usize];
    ["Offset of field: VkGeneratedCommandsInfoEXT::shaderStages"]
        [::core::mem::offset_of!(VkGeneratedCommandsInfoEXT, shaderStages) - 8usize];
    ["Offset of field: VkGeneratedCommandsInfoEXT::indirectExecutionSet"]
        [::core::mem::offset_of!(VkGeneratedCommandsInfoEXT, indirectExecutionSet) - 16usize];
    ["Offset of field: VkGeneratedCommandsInfoEXT::indirectCommandsLayout"]
        [::core::mem::offset_of!(VkGeneratedCommandsInfoEXT, indirectCommandsLayout) - 24usize];
    ["Offset of field: VkGeneratedCommandsInfoEXT::indirectAddress"]
        [::core::mem::offset_of!(VkGeneratedCommandsInfoEXT, indirectAddress) - 32usize];
    ["Offset of field: VkGeneratedCommandsInfoEXT::indirectAddressSize"]
        [::core::mem::offset_of!(VkGeneratedCommandsInfoEXT, indirectAddressSize) - 40usize];
    ["Offset of field: VkGeneratedCommandsInfoEXT::preprocessAddress"]
        [::core::mem::offset_of!(VkGeneratedCommandsInfoEXT, preprocessAddress) - 48usize];
    ["Offset of field: VkGeneratedCommandsInfoEXT::preprocessSize"]
        [::core::mem::offset_of!(VkGeneratedCommandsInfoEXT, preprocessSize) - 56usize];
    ["Offset of field: VkGeneratedCommandsInfoEXT::maxSequenceCount"]
        [::core::mem::offset_of!(VkGeneratedCommandsInfoEXT, maxSequenceCount) - 64usize];
    ["Offset of field: VkGeneratedCommandsInfoEXT::sequenceCountAddress"]
        [::core::mem::offset_of!(VkGeneratedCommandsInfoEXT, sequenceCountAddress) - 72usize];
    ["Offset of field: VkGeneratedCommandsInfoEXT::maxDrawCount"]
        [::core::mem::offset_of!(VkGeneratedCommandsInfoEXT, maxDrawCount) - 80usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkWriteIndirectExecutionSetPipelineEXT"]
        [::core::mem::size_of::<VkWriteIndirectExecutionSetPipelineEXT>() - 24usize];
    ["Alignment of VkWriteIndirectExecutionSetPipelineEXT"]
        [::core::mem::align_of::<VkWriteIndirectExecutionSetPipelineEXT>() - 8usize];
    ["Offset of field: VkWriteIndirectExecutionSetPipelineEXT::sType"]
        [::core::mem::offset_of!(VkWriteIndirectExecutionSetPipelineEXT, sType) - 0usize];
    ["Offset of field: VkWriteIndirectExecutionSetPipelineEXT::pNext"]
        [::core::mem::offset_of!(VkWriteIndirectExecutionSetPipelineEXT, pNext) - 4usize];
    ["Offset of field: VkWriteIndirectExecutionSetPipelineEXT::index"]
        [::core::mem::offset_of!(VkWriteIndirectExecutionSetPipelineEXT, index) - 8usize];
    ["Offset of field: VkWriteIndirectExecutionSetPipelineEXT::pipeline"]
        [::core::mem::offset_of!(VkWriteIndirectExecutionSetPipelineEXT, pipeline) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkIndirectCommandsPushConstantTokenEXT"]
        [::core::mem::size_of::<VkIndirectCommandsPushConstantTokenEXT>() - 12usize];
    ["Alignment of VkIndirectCommandsPushConstantTokenEXT"]
        [::core::mem::align_of::<VkIndirectCommandsPushConstantTokenEXT>() - 4usize];
    ["Offset of field: VkIndirectCommandsPushConstantTokenEXT::updateRange"]
        [::core::mem::offset_of!(VkIndirectCommandsPushConstantTokenEXT, updateRange) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkIndirectCommandsVertexBufferTokenEXT"]
        [::core::mem::size_of::<VkIndirectCommandsVertexBufferTokenEXT>() - 4usize];
    ["Alignment of VkIndirectCommandsVertexBufferTokenEXT"]
        [::core::mem::align_of::<VkIndirectCommandsVertexBufferTokenEXT>() - 4usize];
    ["Offset of field: VkIndirectCommandsVertexBufferTokenEXT::vertexBindingUnit"][::core::mem::offset_of!(
        VkIndirectCommandsVertexBufferTokenEXT,
        vertexBindingUnit
    ) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkIndirectCommandsIndexBufferTokenEXT"]
        [::core::mem::size_of::<VkIndirectCommandsIndexBufferTokenEXT>() - 4usize];
    ["Alignment of VkIndirectCommandsIndexBufferTokenEXT"]
        [::core::mem::align_of::<VkIndirectCommandsIndexBufferTokenEXT>() - 4usize];
    ["Offset of field: VkIndirectCommandsIndexBufferTokenEXT::mode"]
        [::core::mem::offset_of!(VkIndirectCommandsIndexBufferTokenEXT, mode) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkIndirectCommandsExecutionSetTokenEXT"]
        [::core::mem::size_of::<VkIndirectCommandsExecutionSetTokenEXT>() - 8usize];
    ["Alignment of VkIndirectCommandsExecutionSetTokenEXT"]
        [::core::mem::align_of::<VkIndirectCommandsExecutionSetTokenEXT>() - 4usize];
    ["Offset of field: VkIndirectCommandsExecutionSetTokenEXT::type_"]
        [::core::mem::offset_of!(VkIndirectCommandsExecutionSetTokenEXT, type_) - 0usize];
    ["Offset of field: VkIndirectCommandsExecutionSetTokenEXT::shaderStages"]
        [::core::mem::offset_of!(VkIndirectCommandsExecutionSetTokenEXT, shaderStages) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkIndirectCommandsTokenDataEXT"]
        [::core::mem::size_of::<VkIndirectCommandsTokenDataEXT>() - 4usize];
    ["Alignment of VkIndirectCommandsTokenDataEXT"]
        [::core::mem::align_of::<VkIndirectCommandsTokenDataEXT>() - 4usize];
    ["Offset of field: VkIndirectCommandsTokenDataEXT::pPushConstant"]
        [::core::mem::offset_of!(VkIndirectCommandsTokenDataEXT, pPushConstant) - 0usize];
    ["Offset of field: VkIndirectCommandsTokenDataEXT::pVertexBuffer"]
        [::core::mem::offset_of!(VkIndirectCommandsTokenDataEXT, pVertexBuffer) - 0usize];
    ["Offset of field: VkIndirectCommandsTokenDataEXT::pIndexBuffer"]
        [::core::mem::offset_of!(VkIndirectCommandsTokenDataEXT, pIndexBuffer) - 0usize];
    ["Offset of field: VkIndirectCommandsTokenDataEXT::pExecutionSet"]
        [::core::mem::offset_of!(VkIndirectCommandsTokenDataEXT, pExecutionSet) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkIndirectCommandsLayoutTokenEXT"]
        [::core::mem::size_of::<VkIndirectCommandsLayoutTokenEXT>() - 20usize];
    ["Alignment of VkIndirectCommandsLayoutTokenEXT"]
        [::core::mem::align_of::<VkIndirectCommandsLayoutTokenEXT>() - 4usize];
    ["Offset of field: VkIndirectCommandsLayoutTokenEXT::sType"]
        [::core::mem::offset_of!(VkIndirectCommandsLayoutTokenEXT, sType) - 0usize];
    ["Offset of field: VkIndirectCommandsLayoutTokenEXT::pNext"]
        [::core::mem::offset_of!(VkIndirectCommandsLayoutTokenEXT, pNext) - 4usize];
    ["Offset of field: VkIndirectCommandsLayoutTokenEXT::type_"]
        [::core::mem::offset_of!(VkIndirectCommandsLayoutTokenEXT, type_) - 8usize];
    ["Offset of field: VkIndirectCommandsLayoutTokenEXT::data"]
        [::core::mem::offset_of!(VkIndirectCommandsLayoutTokenEXT, data) - 12usize];
    ["Offset of field: VkIndirectCommandsLayoutTokenEXT::offset"]
        [::core::mem::offset_of!(VkIndirectCommandsLayoutTokenEXT, offset) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkIndirectCommandsLayoutCreateInfoEXT"]
        [::core::mem::size_of::<VkIndirectCommandsLayoutCreateInfoEXT>() - 40usize];
    ["Alignment of VkIndirectCommandsLayoutCreateInfoEXT"]
        [::core::mem::align_of::<VkIndirectCommandsLayoutCreateInfoEXT>() - 8usize];
    ["Offset of field: VkIndirectCommandsLayoutCreateInfoEXT::sType"]
        [::core::mem::offset_of!(VkIndirectCommandsLayoutCreateInfoEXT, sType) - 0usize];
    ["Offset of field: VkIndirectCommandsLayoutCreateInfoEXT::pNext"]
        [::core::mem::offset_of!(VkIndirectCommandsLayoutCreateInfoEXT, pNext) - 4usize];
    ["Offset of field: VkIndirectCommandsLayoutCreateInfoEXT::flags"]
        [::core::mem::offset_of!(VkIndirectCommandsLayoutCreateInfoEXT, flags) - 8usize];
    ["Offset of field: VkIndirectCommandsLayoutCreateInfoEXT::shaderStages"]
        [::core::mem::offset_of!(VkIndirectCommandsLayoutCreateInfoEXT, shaderStages) - 12usize];
    ["Offset of field: VkIndirectCommandsLayoutCreateInfoEXT::indirectStride"]
        [::core::mem::offset_of!(VkIndirectCommandsLayoutCreateInfoEXT, indirectStride) - 16usize];
    ["Offset of field: VkIndirectCommandsLayoutCreateInfoEXT::pipelineLayout"]
        [::core::mem::offset_of!(VkIndirectCommandsLayoutCreateInfoEXT, pipelineLayout) - 24usize];
    ["Offset of field: VkIndirectCommandsLayoutCreateInfoEXT::tokenCount"]
        [::core::mem::offset_of!(VkIndirectCommandsLayoutCreateInfoEXT, tokenCount) - 32usize];
    ["Offset of field: VkIndirectCommandsLayoutCreateInfoEXT::pTokens"]
        [::core::mem::offset_of!(VkIndirectCommandsLayoutCreateInfoEXT, pTokens) - 36usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDrawIndirectCountIndirectCommandEXT"]
        [::core::mem::size_of::<VkDrawIndirectCountIndirectCommandEXT>() - 16usize];
    ["Alignment of VkDrawIndirectCountIndirectCommandEXT"]
        [::core::mem::align_of::<VkDrawIndirectCountIndirectCommandEXT>() - 8usize];
    ["Offset of field: VkDrawIndirectCountIndirectCommandEXT::bufferAddress"]
        [::core::mem::offset_of!(VkDrawIndirectCountIndirectCommandEXT, bufferAddress) - 0usize];
    ["Offset of field: VkDrawIndirectCountIndirectCommandEXT::stride"]
        [::core::mem::offset_of!(VkDrawIndirectCountIndirectCommandEXT, stride) - 8usize];
    ["Offset of field: VkDrawIndirectCountIndirectCommandEXT::commandCount"]
        [::core::mem::offset_of!(VkDrawIndirectCountIndirectCommandEXT, commandCount) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkBindVertexBufferIndirectCommandEXT"]
        [::core::mem::size_of::<VkBindVertexBufferIndirectCommandEXT>() - 16usize];
    ["Alignment of VkBindVertexBufferIndirectCommandEXT"]
        [::core::mem::align_of::<VkBindVertexBufferIndirectCommandEXT>() - 8usize];
    ["Offset of field: VkBindVertexBufferIndirectCommandEXT::bufferAddress"]
        [::core::mem::offset_of!(VkBindVertexBufferIndirectCommandEXT, bufferAddress) - 0usize];
    ["Offset of field: VkBindVertexBufferIndirectCommandEXT::size"]
        [::core::mem::offset_of!(VkBindVertexBufferIndirectCommandEXT, size) - 8usize];
    ["Offset of field: VkBindVertexBufferIndirectCommandEXT::stride"]
        [::core::mem::offset_of!(VkBindVertexBufferIndirectCommandEXT, stride) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkBindIndexBufferIndirectCommandEXT"]
        [::core::mem::size_of::<VkBindIndexBufferIndirectCommandEXT>() - 16usize];
    ["Alignment of VkBindIndexBufferIndirectCommandEXT"]
        [::core::mem::align_of::<VkBindIndexBufferIndirectCommandEXT>() - 8usize];
    ["Offset of field: VkBindIndexBufferIndirectCommandEXT::bufferAddress"]
        [::core::mem::offset_of!(VkBindIndexBufferIndirectCommandEXT, bufferAddress) - 0usize];
    ["Offset of field: VkBindIndexBufferIndirectCommandEXT::size"]
        [::core::mem::offset_of!(VkBindIndexBufferIndirectCommandEXT, size) - 8usize];
    ["Offset of field: VkBindIndexBufferIndirectCommandEXT::indexType"]
        [::core::mem::offset_of!(VkBindIndexBufferIndirectCommandEXT, indexType) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkGeneratedCommandsPipelineInfoEXT"]
        [::core::mem::size_of::<VkGeneratedCommandsPipelineInfoEXT>() - 16usize];
    ["Alignment of VkGeneratedCommandsPipelineInfoEXT"]
        [::core::mem::align_of::<VkGeneratedCommandsPipelineInfoEXT>() - 8usize];
    ["Offset of field: VkGeneratedCommandsPipelineInfoEXT::sType"]
        [::core::mem::offset_of!(VkGeneratedCommandsPipelineInfoEXT, sType) - 0usize];
    ["Offset of field: VkGeneratedCommandsPipelineInfoEXT::pNext"]
        [::core::mem::offset_of!(VkGeneratedCommandsPipelineInfoEXT, pNext) - 4usize];
    ["Offset of field: VkGeneratedCommandsPipelineInfoEXT::pipeline"]
        [::core::mem::offset_of!(VkGeneratedCommandsPipelineInfoEXT, pipeline) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkGeneratedCommandsShaderInfoEXT"]
        [::core::mem::size_of::<VkGeneratedCommandsShaderInfoEXT>() - 16usize];
    ["Alignment of VkGeneratedCommandsShaderInfoEXT"]
        [::core::mem::align_of::<VkGeneratedCommandsShaderInfoEXT>() - 4usize];
    ["Offset of field: VkGeneratedCommandsShaderInfoEXT::sType"]
        [::core::mem::offset_of!(VkGeneratedCommandsShaderInfoEXT, sType) - 0usize];
    ["Offset of field: VkGeneratedCommandsShaderInfoEXT::pNext"]
        [::core::mem::offset_of!(VkGeneratedCommandsShaderInfoEXT, pNext) - 4usize];
    ["Offset of field: VkGeneratedCommandsShaderInfoEXT::shaderCount"]
        [::core::mem::offset_of!(VkGeneratedCommandsShaderInfoEXT, shaderCount) - 8usize];
    ["Offset of field: VkGeneratedCommandsShaderInfoEXT::pShaders"]
        [::core::mem::offset_of!(VkGeneratedCommandsShaderInfoEXT, pShaders) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkWriteIndirectExecutionSetShaderEXT"]
        [::core::mem::size_of::<VkWriteIndirectExecutionSetShaderEXT>() - 24usize];
    ["Alignment of VkWriteIndirectExecutionSetShaderEXT"]
        [::core::mem::align_of::<VkWriteIndirectExecutionSetShaderEXT>() - 8usize];
    ["Offset of field: VkWriteIndirectExecutionSetShaderEXT::sType"]
        [::core::mem::offset_of!(VkWriteIndirectExecutionSetShaderEXT, sType) - 0usize];
    ["Offset of field: VkWriteIndirectExecutionSetShaderEXT::pNext"]
        [::core::mem::offset_of!(VkWriteIndirectExecutionSetShaderEXT, pNext) - 4usize];
    ["Offset of field: VkWriteIndirectExecutionSetShaderEXT::index"]
        [::core::mem::offset_of!(VkWriteIndirectExecutionSetShaderEXT, index) - 8usize];
    ["Offset of field: VkWriteIndirectExecutionSetShaderEXT::shader"]
        [::core::mem::offset_of!(VkWriteIndirectExecutionSetShaderEXT, shader) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceImageAlignmentControlFeaturesMESA"]
        [::core::mem::size_of::<VkPhysicalDeviceImageAlignmentControlFeaturesMESA>() - 12usize];
    ["Alignment of VkPhysicalDeviceImageAlignmentControlFeaturesMESA"]
        [::core::mem::align_of::<VkPhysicalDeviceImageAlignmentControlFeaturesMESA>() - 4usize];
    ["Offset of field: VkPhysicalDeviceImageAlignmentControlFeaturesMESA::sType"][::core::mem::offset_of!(
        VkPhysicalDeviceImageAlignmentControlFeaturesMESA,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceImageAlignmentControlFeaturesMESA::pNext"][::core::mem::offset_of!(
        VkPhysicalDeviceImageAlignmentControlFeaturesMESA,
        pNext
    ) - 4usize];
    ["Offset of field: VkPhysicalDeviceImageAlignmentControlFeaturesMESA::imageAlignmentControl"][::core::mem::offset_of!(
        VkPhysicalDeviceImageAlignmentControlFeaturesMESA,
        imageAlignmentControl
    )
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceImageAlignmentControlPropertiesMESA"]
        [::core::mem::size_of::<VkPhysicalDeviceImageAlignmentControlPropertiesMESA>() - 12usize];
    ["Alignment of VkPhysicalDeviceImageAlignmentControlPropertiesMESA"]
        [::core::mem::align_of::<VkPhysicalDeviceImageAlignmentControlPropertiesMESA>() - 4usize];
    ["Offset of field: VkPhysicalDeviceImageAlignmentControlPropertiesMESA::sType"][::core::mem::offset_of!(
        VkPhysicalDeviceImageAlignmentControlPropertiesMESA,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceImageAlignmentControlPropertiesMESA::pNext"][::core::mem::offset_of!(
        VkPhysicalDeviceImageAlignmentControlPropertiesMESA,
        pNext
    ) - 4usize];
    ["Offset of field: VkPhysicalDeviceImageAlignmentControlPropertiesMESA::supportedImageAlignmentMask"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceImageAlignmentControlPropertiesMESA , supportedImageAlignmentMask) - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkImageAlignmentControlCreateInfoMESA"]
        [::core::mem::size_of::<VkImageAlignmentControlCreateInfoMESA>() - 12usize];
    ["Alignment of VkImageAlignmentControlCreateInfoMESA"]
        [::core::mem::align_of::<VkImageAlignmentControlCreateInfoMESA>() - 4usize];
    ["Offset of field: VkImageAlignmentControlCreateInfoMESA::sType"]
        [::core::mem::offset_of!(VkImageAlignmentControlCreateInfoMESA, sType) - 0usize];
    ["Offset of field: VkImageAlignmentControlCreateInfoMESA::pNext"]
        [::core::mem::offset_of!(VkImageAlignmentControlCreateInfoMESA, pNext) - 4usize];
    ["Offset of field: VkImageAlignmentControlCreateInfoMESA::maximumRequestedAlignment"][::core::mem::offset_of!(
        VkImageAlignmentControlCreateInfoMESA,
        maximumRequestedAlignment
    )
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceDepthClampControlFeaturesEXT"]
        [::core::mem::size_of::<VkPhysicalDeviceDepthClampControlFeaturesEXT>() - 12usize];
    ["Alignment of VkPhysicalDeviceDepthClampControlFeaturesEXT"]
        [::core::mem::align_of::<VkPhysicalDeviceDepthClampControlFeaturesEXT>() - 4usize];
    ["Offset of field: VkPhysicalDeviceDepthClampControlFeaturesEXT::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceDepthClampControlFeaturesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceDepthClampControlFeaturesEXT::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceDepthClampControlFeaturesEXT, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceDepthClampControlFeaturesEXT::depthClampControl"][::core::mem::offset_of!(
        VkPhysicalDeviceDepthClampControlFeaturesEXT,
        depthClampControl
    )
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineViewportDepthClampControlCreateInfoEXT"]
        [::core::mem::size_of::<VkPipelineViewportDepthClampControlCreateInfoEXT>() - 16usize];
    ["Alignment of VkPipelineViewportDepthClampControlCreateInfoEXT"]
        [::core::mem::align_of::<VkPipelineViewportDepthClampControlCreateInfoEXT>() - 4usize];
    ["Offset of field: VkPipelineViewportDepthClampControlCreateInfoEXT::sType"]
        [::core::mem::offset_of!(VkPipelineViewportDepthClampControlCreateInfoEXT, sType) - 0usize];
    ["Offset of field: VkPipelineViewportDepthClampControlCreateInfoEXT::pNext"]
        [::core::mem::offset_of!(VkPipelineViewportDepthClampControlCreateInfoEXT, pNext) - 4usize];
    ["Offset of field: VkPipelineViewportDepthClampControlCreateInfoEXT::depthClampMode"][::core::mem::offset_of!(
        VkPipelineViewportDepthClampControlCreateInfoEXT,
        depthClampMode
    )
        - 8usize];
    ["Offset of field: VkPipelineViewportDepthClampControlCreateInfoEXT::pDepthClampRange"][::core::mem::offset_of!(
        VkPipelineViewportDepthClampControlCreateInfoEXT,
        pDepthClampRange
    )
        - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceHdrVividFeaturesHUAWEI"]
        [::core::mem::size_of::<VkPhysicalDeviceHdrVividFeaturesHUAWEI>() - 12usize];
    ["Alignment of VkPhysicalDeviceHdrVividFeaturesHUAWEI"]
        [::core::mem::align_of::<VkPhysicalDeviceHdrVividFeaturesHUAWEI>() - 4usize];
    ["Offset of field: VkPhysicalDeviceHdrVividFeaturesHUAWEI::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceHdrVividFeaturesHUAWEI, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceHdrVividFeaturesHUAWEI::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceHdrVividFeaturesHUAWEI, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceHdrVividFeaturesHUAWEI::hdrVivid"]
        [::core::mem::offset_of!(VkPhysicalDeviceHdrVividFeaturesHUAWEI, hdrVivid) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkHdrVividDynamicMetadataHUAWEI"]
        [::core::mem::size_of::<VkHdrVividDynamicMetadataHUAWEI>() - 16usize];
    ["Alignment of VkHdrVividDynamicMetadataHUAWEI"]
        [::core::mem::align_of::<VkHdrVividDynamicMetadataHUAWEI>() - 4usize];
    ["Offset of field: VkHdrVividDynamicMetadataHUAWEI::sType"]
        [::core::mem::offset_of!(VkHdrVividDynamicMetadataHUAWEI, sType) - 0usize];
    ["Offset of field: VkHdrVividDynamicMetadataHUAWEI::pNext"]
        [::core::mem::offset_of!(VkHdrVividDynamicMetadataHUAWEI, pNext) - 4usize];
    ["Offset of field: VkHdrVividDynamicMetadataHUAWEI::dynamicMetadataSize"]
        [::core::mem::offset_of!(VkHdrVividDynamicMetadataHUAWEI, dynamicMetadataSize) - 8usize];
    ["Offset of field: VkHdrVividDynamicMetadataHUAWEI::pDynamicMetadata"]
        [::core::mem::offset_of!(VkHdrVividDynamicMetadataHUAWEI, pDynamicMetadata) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkCooperativeMatrixFlexibleDimensionsPropertiesNV"]
        [::core::mem::size_of::<VkCooperativeMatrixFlexibleDimensionsPropertiesNV>() - 48usize];
    ["Alignment of VkCooperativeMatrixFlexibleDimensionsPropertiesNV"]
        [::core::mem::align_of::<VkCooperativeMatrixFlexibleDimensionsPropertiesNV>() - 4usize];
    ["Offset of field: VkCooperativeMatrixFlexibleDimensionsPropertiesNV::sType"][::core::mem::offset_of!(
        VkCooperativeMatrixFlexibleDimensionsPropertiesNV,
        sType
    ) - 0usize];
    ["Offset of field: VkCooperativeMatrixFlexibleDimensionsPropertiesNV::pNext"][::core::mem::offset_of!(
        VkCooperativeMatrixFlexibleDimensionsPropertiesNV,
        pNext
    ) - 4usize];
    ["Offset of field: VkCooperativeMatrixFlexibleDimensionsPropertiesNV::MGranularity"][::core::mem::offset_of!(
        VkCooperativeMatrixFlexibleDimensionsPropertiesNV,
        MGranularity
    )
        - 8usize];
    ["Offset of field: VkCooperativeMatrixFlexibleDimensionsPropertiesNV::NGranularity"][::core::mem::offset_of!(
        VkCooperativeMatrixFlexibleDimensionsPropertiesNV,
        NGranularity
    )
        - 12usize];
    ["Offset of field: VkCooperativeMatrixFlexibleDimensionsPropertiesNV::KGranularity"][::core::mem::offset_of!(
        VkCooperativeMatrixFlexibleDimensionsPropertiesNV,
        KGranularity
    )
        - 16usize];
    ["Offset of field: VkCooperativeMatrixFlexibleDimensionsPropertiesNV::AType"][::core::mem::offset_of!(
        VkCooperativeMatrixFlexibleDimensionsPropertiesNV,
        AType
    ) - 20usize];
    ["Offset of field: VkCooperativeMatrixFlexibleDimensionsPropertiesNV::BType"][::core::mem::offset_of!(
        VkCooperativeMatrixFlexibleDimensionsPropertiesNV,
        BType
    ) - 24usize];
    ["Offset of field: VkCooperativeMatrixFlexibleDimensionsPropertiesNV::CType"][::core::mem::offset_of!(
        VkCooperativeMatrixFlexibleDimensionsPropertiesNV,
        CType
    ) - 28usize];
    ["Offset of field: VkCooperativeMatrixFlexibleDimensionsPropertiesNV::ResultType"][::core::mem::offset_of!(
        VkCooperativeMatrixFlexibleDimensionsPropertiesNV,
        ResultType
    ) - 32usize];
    ["Offset of field: VkCooperativeMatrixFlexibleDimensionsPropertiesNV::saturatingAccumulation"] [:: core :: mem :: offset_of ! (VkCooperativeMatrixFlexibleDimensionsPropertiesNV , saturatingAccumulation) - 36usize] ;
    ["Offset of field: VkCooperativeMatrixFlexibleDimensionsPropertiesNV::scope"][::core::mem::offset_of!(
        VkCooperativeMatrixFlexibleDimensionsPropertiesNV,
        scope
    ) - 40usize];
    ["Offset of field: VkCooperativeMatrixFlexibleDimensionsPropertiesNV::workgroupInvocations"][::core::mem::offset_of!(
        VkCooperativeMatrixFlexibleDimensionsPropertiesNV,
        workgroupInvocations
    )
        - 44usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceCooperativeMatrix2FeaturesNV"]
        [::core::mem::size_of::<VkPhysicalDeviceCooperativeMatrix2FeaturesNV>() - 36usize];
    ["Alignment of VkPhysicalDeviceCooperativeMatrix2FeaturesNV"]
        [::core::mem::align_of::<VkPhysicalDeviceCooperativeMatrix2FeaturesNV>() - 4usize];
    ["Offset of field: VkPhysicalDeviceCooperativeMatrix2FeaturesNV::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceCooperativeMatrix2FeaturesNV, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceCooperativeMatrix2FeaturesNV::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceCooperativeMatrix2FeaturesNV, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceCooperativeMatrix2FeaturesNV::cooperativeMatrixWorkgroupScope"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceCooperativeMatrix2FeaturesNV , cooperativeMatrixWorkgroupScope) - 8usize] ;
    ["Offset of field: VkPhysicalDeviceCooperativeMatrix2FeaturesNV::cooperativeMatrixFlexibleDimensions"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceCooperativeMatrix2FeaturesNV , cooperativeMatrixFlexibleDimensions) - 12usize] ;
    ["Offset of field: VkPhysicalDeviceCooperativeMatrix2FeaturesNV::cooperativeMatrixReductions"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceCooperativeMatrix2FeaturesNV , cooperativeMatrixReductions) - 16usize] ;
    ["Offset of field: VkPhysicalDeviceCooperativeMatrix2FeaturesNV::cooperativeMatrixConversions"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceCooperativeMatrix2FeaturesNV , cooperativeMatrixConversions) - 20usize] ;
    ["Offset of field: VkPhysicalDeviceCooperativeMatrix2FeaturesNV::cooperativeMatrixPerElementOperations"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceCooperativeMatrix2FeaturesNV , cooperativeMatrixPerElementOperations) - 24usize] ;
    ["Offset of field: VkPhysicalDeviceCooperativeMatrix2FeaturesNV::cooperativeMatrixTensorAddressing"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceCooperativeMatrix2FeaturesNV , cooperativeMatrixTensorAddressing) - 28usize] ;
    ["Offset of field: VkPhysicalDeviceCooperativeMatrix2FeaturesNV::cooperativeMatrixBlockLoads"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceCooperativeMatrix2FeaturesNV , cooperativeMatrixBlockLoads) - 32usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceCooperativeMatrix2PropertiesNV"]
        [::core::mem::size_of::<VkPhysicalDeviceCooperativeMatrix2PropertiesNV>() - 20usize];
    ["Alignment of VkPhysicalDeviceCooperativeMatrix2PropertiesNV"]
        [::core::mem::align_of::<VkPhysicalDeviceCooperativeMatrix2PropertiesNV>() - 4usize];
    ["Offset of field: VkPhysicalDeviceCooperativeMatrix2PropertiesNV::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceCooperativeMatrix2PropertiesNV, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceCooperativeMatrix2PropertiesNV::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceCooperativeMatrix2PropertiesNV, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceCooperativeMatrix2PropertiesNV::cooperativeMatrixWorkgroupScopeMaxWorkgroupSize"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceCooperativeMatrix2PropertiesNV , cooperativeMatrixWorkgroupScopeMaxWorkgroupSize) - 8usize] ;
    ["Offset of field: VkPhysicalDeviceCooperativeMatrix2PropertiesNV::cooperativeMatrixFlexibleDimensionsMaxDimension"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceCooperativeMatrix2PropertiesNV , cooperativeMatrixFlexibleDimensionsMaxDimension) - 12usize] ;
    ["Offset of field: VkPhysicalDeviceCooperativeMatrix2PropertiesNV::cooperativeMatrixWorkgroupScopeReservedSharedMemory"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceCooperativeMatrix2PropertiesNV , cooperativeMatrixWorkgroupScopeReservedSharedMemory) - 16usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDevicePipelineOpacityMicromapFeaturesARM"]
        [::core::mem::size_of::<VkPhysicalDevicePipelineOpacityMicromapFeaturesARM>() - 12usize];
    ["Alignment of VkPhysicalDevicePipelineOpacityMicromapFeaturesARM"]
        [::core::mem::align_of::<VkPhysicalDevicePipelineOpacityMicromapFeaturesARM>() - 4usize];
    ["Offset of field: VkPhysicalDevicePipelineOpacityMicromapFeaturesARM::sType"][::core::mem::offset_of!(
        VkPhysicalDevicePipelineOpacityMicromapFeaturesARM,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDevicePipelineOpacityMicromapFeaturesARM::pNext"][::core::mem::offset_of!(
        VkPhysicalDevicePipelineOpacityMicromapFeaturesARM,
        pNext
    ) - 4usize];
    ["Offset of field: VkPhysicalDevicePipelineOpacityMicromapFeaturesARM::pipelineOpacityMicromap"] [:: core :: mem :: offset_of ! (VkPhysicalDevicePipelineOpacityMicromapFeaturesARM , pipelineOpacityMicromap) - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceVertexAttributeRobustnessFeaturesEXT"]
        [::core::mem::size_of::<VkPhysicalDeviceVertexAttributeRobustnessFeaturesEXT>() - 12usize];
    ["Alignment of VkPhysicalDeviceVertexAttributeRobustnessFeaturesEXT"]
        [::core::mem::align_of::<VkPhysicalDeviceVertexAttributeRobustnessFeaturesEXT>() - 4usize];
    ["Offset of field: VkPhysicalDeviceVertexAttributeRobustnessFeaturesEXT::sType"][::core::mem::offset_of!(
        VkPhysicalDeviceVertexAttributeRobustnessFeaturesEXT,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceVertexAttributeRobustnessFeaturesEXT::pNext"][::core::mem::offset_of!(
        VkPhysicalDeviceVertexAttributeRobustnessFeaturesEXT,
        pNext
    ) - 4usize];
    ["Offset of field: VkPhysicalDeviceVertexAttributeRobustnessFeaturesEXT::vertexAttributeRobustness"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceVertexAttributeRobustnessFeaturesEXT , vertexAttributeRobustness) - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSetPresentConfigNV"][::core::mem::size_of::<VkSetPresentConfigNV>() - 16usize];
    ["Alignment of VkSetPresentConfigNV"][::core::mem::align_of::<VkSetPresentConfigNV>() - 4usize];
    ["Offset of field: VkSetPresentConfigNV::sType"]
        [::core::mem::offset_of!(VkSetPresentConfigNV, sType) - 0usize];
    ["Offset of field: VkSetPresentConfigNV::pNext"]
        [::core::mem::offset_of!(VkSetPresentConfigNV, pNext) - 4usize];
    ["Offset of field: VkSetPresentConfigNV::numFramesPerBatch"]
        [::core::mem::offset_of!(VkSetPresentConfigNV, numFramesPerBatch) - 8usize];
    ["Offset of field: VkSetPresentConfigNV::presentConfigFeedback"]
        [::core::mem::offset_of!(VkSetPresentConfigNV, presentConfigFeedback) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDevicePresentMeteringFeaturesNV"]
        [::core::mem::size_of::<VkPhysicalDevicePresentMeteringFeaturesNV>() - 12usize];
    ["Alignment of VkPhysicalDevicePresentMeteringFeaturesNV"]
        [::core::mem::align_of::<VkPhysicalDevicePresentMeteringFeaturesNV>() - 4usize];
    ["Offset of field: VkPhysicalDevicePresentMeteringFeaturesNV::sType"]
        [::core::mem::offset_of!(VkPhysicalDevicePresentMeteringFeaturesNV, sType) - 0usize];
    ["Offset of field: VkPhysicalDevicePresentMeteringFeaturesNV::pNext"]
        [::core::mem::offset_of!(VkPhysicalDevicePresentMeteringFeaturesNV, pNext) - 4usize];
    ["Offset of field: VkPhysicalDevicePresentMeteringFeaturesNV::presentMetering"][::core::mem::offset_of!(
        VkPhysicalDevicePresentMeteringFeaturesNV,
        presentMetering
    ) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkRenderingEndInfoEXT"][::core::mem::size_of::<VkRenderingEndInfoEXT>() - 8usize];
    ["Alignment of VkRenderingEndInfoEXT"]
        [::core::mem::align_of::<VkRenderingEndInfoEXT>() - 4usize];
    ["Offset of field: VkRenderingEndInfoEXT::sType"]
        [::core::mem::offset_of!(VkRenderingEndInfoEXT, sType) - 0usize];
    ["Offset of field: VkRenderingEndInfoEXT::pNext"]
        [::core::mem::offset_of!(VkRenderingEndInfoEXT, pNext) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceZeroInitializeDeviceMemoryFeaturesEXT"]
        [::core::mem::size_of::<VkPhysicalDeviceZeroInitializeDeviceMemoryFeaturesEXT>() - 12usize];
    ["Alignment of VkPhysicalDeviceZeroInitializeDeviceMemoryFeaturesEXT"]
        [::core::mem::align_of::<VkPhysicalDeviceZeroInitializeDeviceMemoryFeaturesEXT>() - 4usize];
    ["Offset of field: VkPhysicalDeviceZeroInitializeDeviceMemoryFeaturesEXT::sType"][::core::mem::offset_of!(
        VkPhysicalDeviceZeroInitializeDeviceMemoryFeaturesEXT,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceZeroInitializeDeviceMemoryFeaturesEXT::pNext"][::core::mem::offset_of!(
        VkPhysicalDeviceZeroInitializeDeviceMemoryFeaturesEXT,
        pNext
    ) - 4usize];
    ["Offset of field: VkPhysicalDeviceZeroInitializeDeviceMemoryFeaturesEXT::zeroInitializeDeviceMemory"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceZeroInitializeDeviceMemoryFeaturesEXT , zeroInitializeDeviceMemory) - 8usize] ;
};
pub const VkBuildAccelerationStructureModeKHR_VK_BUILD_ACCELERATION_STRUCTURE_MODE_BUILD_KHR:
    VkBuildAccelerationStructureModeKHR = 0;
pub const VkBuildAccelerationStructureModeKHR_VK_BUILD_ACCELERATION_STRUCTURE_MODE_UPDATE_KHR:
    VkBuildAccelerationStructureModeKHR = 1;
pub const VkBuildAccelerationStructureModeKHR_VK_BUILD_ACCELERATION_STRUCTURE_MODE_MAX_ENUM_KHR:
    VkBuildAccelerationStructureModeKHR = 2147483647;
pub const VkAccelerationStructureCreateFlagBitsKHR_VK_ACCELERATION_STRUCTURE_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR : VkAccelerationStructureCreateFlagBitsKHR = 1 ;
pub const VkAccelerationStructureCreateFlagBitsKHR_VK_ACCELERATION_STRUCTURE_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT : VkAccelerationStructureCreateFlagBitsKHR = 8 ;
pub const VkAccelerationStructureCreateFlagBitsKHR_VK_ACCELERATION_STRUCTURE_CREATE_MOTION_BIT_NV : VkAccelerationStructureCreateFlagBitsKHR = 4 ;
pub const VkAccelerationStructureCreateFlagBitsKHR_VK_ACCELERATION_STRUCTURE_CREATE_FLAG_BITS_MAX_ENUM_KHR : VkAccelerationStructureCreateFlagBitsKHR = 2147483647 ;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkAccelerationStructureBuildRangeInfoKHR"]
        [::core::mem::size_of::<VkAccelerationStructureBuildRangeInfoKHR>() - 16usize];
    ["Alignment of VkAccelerationStructureBuildRangeInfoKHR"]
        [::core::mem::align_of::<VkAccelerationStructureBuildRangeInfoKHR>() - 4usize];
    ["Offset of field: VkAccelerationStructureBuildRangeInfoKHR::primitiveCount"][::core::mem::offset_of!(
        VkAccelerationStructureBuildRangeInfoKHR,
        primitiveCount
    ) - 0usize];
    ["Offset of field: VkAccelerationStructureBuildRangeInfoKHR::primitiveOffset"][::core::mem::offset_of!(
        VkAccelerationStructureBuildRangeInfoKHR,
        primitiveOffset
    ) - 4usize];
    ["Offset of field: VkAccelerationStructureBuildRangeInfoKHR::firstVertex"]
        [::core::mem::offset_of!(VkAccelerationStructureBuildRangeInfoKHR, firstVertex) - 8usize];
    ["Offset of field: VkAccelerationStructureBuildRangeInfoKHR::transformOffset"][::core::mem::offset_of!(
        VkAccelerationStructureBuildRangeInfoKHR,
        transformOffset
    ) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkAccelerationStructureGeometryTrianglesDataKHR"]
        [::core::mem::size_of::<VkAccelerationStructureGeometryTrianglesDataKHR>() - 56usize];
    ["Alignment of VkAccelerationStructureGeometryTrianglesDataKHR"]
        [::core::mem::align_of::<VkAccelerationStructureGeometryTrianglesDataKHR>() - 8usize];
    ["Offset of field: VkAccelerationStructureGeometryTrianglesDataKHR::sType"]
        [::core::mem::offset_of!(VkAccelerationStructureGeometryTrianglesDataKHR, sType) - 0usize];
    ["Offset of field: VkAccelerationStructureGeometryTrianglesDataKHR::pNext"]
        [::core::mem::offset_of!(VkAccelerationStructureGeometryTrianglesDataKHR, pNext) - 4usize];
    ["Offset of field: VkAccelerationStructureGeometryTrianglesDataKHR::vertexFormat"][::core::mem::offset_of!(
        VkAccelerationStructureGeometryTrianglesDataKHR,
        vertexFormat
    ) - 8usize];
    ["Offset of field: VkAccelerationStructureGeometryTrianglesDataKHR::vertexData"][::core::mem::offset_of!(
        VkAccelerationStructureGeometryTrianglesDataKHR,
        vertexData
    ) - 16usize];
    ["Offset of field: VkAccelerationStructureGeometryTrianglesDataKHR::vertexStride"][::core::mem::offset_of!(
        VkAccelerationStructureGeometryTrianglesDataKHR,
        vertexStride
    ) - 24usize];
    ["Offset of field: VkAccelerationStructureGeometryTrianglesDataKHR::maxVertex"][::core::mem::offset_of!(
        VkAccelerationStructureGeometryTrianglesDataKHR,
        maxVertex
    ) - 32usize];
    ["Offset of field: VkAccelerationStructureGeometryTrianglesDataKHR::indexType"][::core::mem::offset_of!(
        VkAccelerationStructureGeometryTrianglesDataKHR,
        indexType
    ) - 36usize];
    ["Offset of field: VkAccelerationStructureGeometryTrianglesDataKHR::indexData"][::core::mem::offset_of!(
        VkAccelerationStructureGeometryTrianglesDataKHR,
        indexData
    ) - 40usize];
    ["Offset of field: VkAccelerationStructureGeometryTrianglesDataKHR::transformData"][::core::mem::offset_of!(
        VkAccelerationStructureGeometryTrianglesDataKHR,
        transformData
    )
        - 48usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkAccelerationStructureGeometryAabbsDataKHR"]
        [::core::mem::size_of::<VkAccelerationStructureGeometryAabbsDataKHR>() - 24usize];
    ["Alignment of VkAccelerationStructureGeometryAabbsDataKHR"]
        [::core::mem::align_of::<VkAccelerationStructureGeometryAabbsDataKHR>() - 8usize];
    ["Offset of field: VkAccelerationStructureGeometryAabbsDataKHR::sType"]
        [::core::mem::offset_of!(VkAccelerationStructureGeometryAabbsDataKHR, sType) - 0usize];
    ["Offset of field: VkAccelerationStructureGeometryAabbsDataKHR::pNext"]
        [::core::mem::offset_of!(VkAccelerationStructureGeometryAabbsDataKHR, pNext) - 4usize];
    ["Offset of field: VkAccelerationStructureGeometryAabbsDataKHR::data"]
        [::core::mem::offset_of!(VkAccelerationStructureGeometryAabbsDataKHR, data) - 8usize];
    ["Offset of field: VkAccelerationStructureGeometryAabbsDataKHR::stride"]
        [::core::mem::offset_of!(VkAccelerationStructureGeometryAabbsDataKHR, stride) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkAccelerationStructureGeometryInstancesDataKHR"]
        [::core::mem::size_of::<VkAccelerationStructureGeometryInstancesDataKHR>() - 24usize];
    ["Alignment of VkAccelerationStructureGeometryInstancesDataKHR"]
        [::core::mem::align_of::<VkAccelerationStructureGeometryInstancesDataKHR>() - 8usize];
    ["Offset of field: VkAccelerationStructureGeometryInstancesDataKHR::sType"]
        [::core::mem::offset_of!(VkAccelerationStructureGeometryInstancesDataKHR, sType) - 0usize];
    ["Offset of field: VkAccelerationStructureGeometryInstancesDataKHR::pNext"]
        [::core::mem::offset_of!(VkAccelerationStructureGeometryInstancesDataKHR, pNext) - 4usize];
    ["Offset of field: VkAccelerationStructureGeometryInstancesDataKHR::arrayOfPointers"][::core::mem::offset_of!(
        VkAccelerationStructureGeometryInstancesDataKHR,
        arrayOfPointers
    )
        - 8usize];
    ["Offset of field: VkAccelerationStructureGeometryInstancesDataKHR::data"]
        [::core::mem::offset_of!(VkAccelerationStructureGeometryInstancesDataKHR, data) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkAccelerationStructureGeometryDataKHR"]
        [::core::mem::size_of::<VkAccelerationStructureGeometryDataKHR>() - 56usize];
    ["Alignment of VkAccelerationStructureGeometryDataKHR"]
        [::core::mem::align_of::<VkAccelerationStructureGeometryDataKHR>() - 8usize];
    ["Offset of field: VkAccelerationStructureGeometryDataKHR::triangles"]
        [::core::mem::offset_of!(VkAccelerationStructureGeometryDataKHR, triangles) - 0usize];
    ["Offset of field: VkAccelerationStructureGeometryDataKHR::aabbs"]
        [::core::mem::offset_of!(VkAccelerationStructureGeometryDataKHR, aabbs) - 0usize];
    ["Offset of field: VkAccelerationStructureGeometryDataKHR::instances"]
        [::core::mem::offset_of!(VkAccelerationStructureGeometryDataKHR, instances) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkAccelerationStructureGeometryKHR"]
        [::core::mem::size_of::<VkAccelerationStructureGeometryKHR>() - 80usize];
    ["Alignment of VkAccelerationStructureGeometryKHR"]
        [::core::mem::align_of::<VkAccelerationStructureGeometryKHR>() - 8usize];
    ["Offset of field: VkAccelerationStructureGeometryKHR::sType"]
        [::core::mem::offset_of!(VkAccelerationStructureGeometryKHR, sType) - 0usize];
    ["Offset of field: VkAccelerationStructureGeometryKHR::pNext"]
        [::core::mem::offset_of!(VkAccelerationStructureGeometryKHR, pNext) - 4usize];
    ["Offset of field: VkAccelerationStructureGeometryKHR::geometryType"]
        [::core::mem::offset_of!(VkAccelerationStructureGeometryKHR, geometryType) - 8usize];
    ["Offset of field: VkAccelerationStructureGeometryKHR::geometry"]
        [::core::mem::offset_of!(VkAccelerationStructureGeometryKHR, geometry) - 16usize];
    ["Offset of field: VkAccelerationStructureGeometryKHR::flags"]
        [::core::mem::offset_of!(VkAccelerationStructureGeometryKHR, flags) - 72usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkAccelerationStructureBuildGeometryInfoKHR"]
        [::core::mem::size_of::<VkAccelerationStructureBuildGeometryInfoKHR>() - 64usize];
    ["Alignment of VkAccelerationStructureBuildGeometryInfoKHR"]
        [::core::mem::align_of::<VkAccelerationStructureBuildGeometryInfoKHR>() - 8usize];
    ["Offset of field: VkAccelerationStructureBuildGeometryInfoKHR::sType"]
        [::core::mem::offset_of!(VkAccelerationStructureBuildGeometryInfoKHR, sType) - 0usize];
    ["Offset of field: VkAccelerationStructureBuildGeometryInfoKHR::pNext"]
        [::core::mem::offset_of!(VkAccelerationStructureBuildGeometryInfoKHR, pNext) - 4usize];
    ["Offset of field: VkAccelerationStructureBuildGeometryInfoKHR::type_"]
        [::core::mem::offset_of!(VkAccelerationStructureBuildGeometryInfoKHR, type_) - 8usize];
    ["Offset of field: VkAccelerationStructureBuildGeometryInfoKHR::flags"]
        [::core::mem::offset_of!(VkAccelerationStructureBuildGeometryInfoKHR, flags) - 12usize];
    ["Offset of field: VkAccelerationStructureBuildGeometryInfoKHR::mode"]
        [::core::mem::offset_of!(VkAccelerationStructureBuildGeometryInfoKHR, mode) - 16usize];
    ["Offset of field: VkAccelerationStructureBuildGeometryInfoKHR::srcAccelerationStructure"][::core::mem::offset_of!(
        VkAccelerationStructureBuildGeometryInfoKHR,
        srcAccelerationStructure
    )
        - 24usize];
    ["Offset of field: VkAccelerationStructureBuildGeometryInfoKHR::dstAccelerationStructure"][::core::mem::offset_of!(
        VkAccelerationStructureBuildGeometryInfoKHR,
        dstAccelerationStructure
    )
        - 32usize];
    ["Offset of field: VkAccelerationStructureBuildGeometryInfoKHR::geometryCount"][::core::mem::offset_of!(
        VkAccelerationStructureBuildGeometryInfoKHR,
        geometryCount
    ) - 40usize];
    ["Offset of field: VkAccelerationStructureBuildGeometryInfoKHR::pGeometries"][::core::mem::offset_of!(
        VkAccelerationStructureBuildGeometryInfoKHR,
        pGeometries
    ) - 44usize];
    ["Offset of field: VkAccelerationStructureBuildGeometryInfoKHR::ppGeometries"][::core::mem::offset_of!(
        VkAccelerationStructureBuildGeometryInfoKHR,
        ppGeometries
    ) - 48usize];
    ["Offset of field: VkAccelerationStructureBuildGeometryInfoKHR::scratchData"][::core::mem::offset_of!(
        VkAccelerationStructureBuildGeometryInfoKHR,
        scratchData
    ) - 56usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkAccelerationStructureCreateInfoKHR"]
        [::core::mem::size_of::<VkAccelerationStructureCreateInfoKHR>() - 56usize];
    ["Alignment of VkAccelerationStructureCreateInfoKHR"]
        [::core::mem::align_of::<VkAccelerationStructureCreateInfoKHR>() - 8usize];
    ["Offset of field: VkAccelerationStructureCreateInfoKHR::sType"]
        [::core::mem::offset_of!(VkAccelerationStructureCreateInfoKHR, sType) - 0usize];
    ["Offset of field: VkAccelerationStructureCreateInfoKHR::pNext"]
        [::core::mem::offset_of!(VkAccelerationStructureCreateInfoKHR, pNext) - 4usize];
    ["Offset of field: VkAccelerationStructureCreateInfoKHR::createFlags"]
        [::core::mem::offset_of!(VkAccelerationStructureCreateInfoKHR, createFlags) - 8usize];
    ["Offset of field: VkAccelerationStructureCreateInfoKHR::buffer"]
        [::core::mem::offset_of!(VkAccelerationStructureCreateInfoKHR, buffer) - 16usize];
    ["Offset of field: VkAccelerationStructureCreateInfoKHR::offset"]
        [::core::mem::offset_of!(VkAccelerationStructureCreateInfoKHR, offset) - 24usize];
    ["Offset of field: VkAccelerationStructureCreateInfoKHR::size"]
        [::core::mem::offset_of!(VkAccelerationStructureCreateInfoKHR, size) - 32usize];
    ["Offset of field: VkAccelerationStructureCreateInfoKHR::type_"]
        [::core::mem::offset_of!(VkAccelerationStructureCreateInfoKHR, type_) - 40usize];
    ["Offset of field: VkAccelerationStructureCreateInfoKHR::deviceAddress"]
        [::core::mem::offset_of!(VkAccelerationStructureCreateInfoKHR, deviceAddress) - 48usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkWriteDescriptorSetAccelerationStructureKHR"]
        [::core::mem::size_of::<VkWriteDescriptorSetAccelerationStructureKHR>() - 16usize];
    ["Alignment of VkWriteDescriptorSetAccelerationStructureKHR"]
        [::core::mem::align_of::<VkWriteDescriptorSetAccelerationStructureKHR>() - 4usize];
    ["Offset of field: VkWriteDescriptorSetAccelerationStructureKHR::sType"]
        [::core::mem::offset_of!(VkWriteDescriptorSetAccelerationStructureKHR, sType) - 0usize];
    ["Offset of field: VkWriteDescriptorSetAccelerationStructureKHR::pNext"]
        [::core::mem::offset_of!(VkWriteDescriptorSetAccelerationStructureKHR, pNext) - 4usize];
    ["Offset of field: VkWriteDescriptorSetAccelerationStructureKHR::accelerationStructureCount"][::core::mem::offset_of!(
        VkWriteDescriptorSetAccelerationStructureKHR,
        accelerationStructureCount
    )
        - 8usize];
    ["Offset of field: VkWriteDescriptorSetAccelerationStructureKHR::pAccelerationStructures"][::core::mem::offset_of!(
        VkWriteDescriptorSetAccelerationStructureKHR,
        pAccelerationStructures
    )
        - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceAccelerationStructureFeaturesKHR"]
        [::core::mem::size_of::<VkPhysicalDeviceAccelerationStructureFeaturesKHR>() - 28usize];
    ["Alignment of VkPhysicalDeviceAccelerationStructureFeaturesKHR"]
        [::core::mem::align_of::<VkPhysicalDeviceAccelerationStructureFeaturesKHR>() - 4usize];
    ["Offset of field: VkPhysicalDeviceAccelerationStructureFeaturesKHR::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceAccelerationStructureFeaturesKHR, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceAccelerationStructureFeaturesKHR::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceAccelerationStructureFeaturesKHR, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceAccelerationStructureFeaturesKHR::accelerationStructure"][::core::mem::offset_of!(
        VkPhysicalDeviceAccelerationStructureFeaturesKHR,
        accelerationStructure
    )
        - 8usize];
    ["Offset of field: VkPhysicalDeviceAccelerationStructureFeaturesKHR::accelerationStructureCaptureReplay"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceAccelerationStructureFeaturesKHR , accelerationStructureCaptureReplay) - 12usize] ;
    ["Offset of field: VkPhysicalDeviceAccelerationStructureFeaturesKHR::accelerationStructureIndirectBuild"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceAccelerationStructureFeaturesKHR , accelerationStructureIndirectBuild) - 16usize] ;
    ["Offset of field: VkPhysicalDeviceAccelerationStructureFeaturesKHR::accelerationStructureHostCommands"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceAccelerationStructureFeaturesKHR , accelerationStructureHostCommands) - 20usize] ;
    ["Offset of field: VkPhysicalDeviceAccelerationStructureFeaturesKHR::descriptorBindingAccelerationStructureUpdateAfterBind"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceAccelerationStructureFeaturesKHR , descriptorBindingAccelerationStructureUpdateAfterBind) - 24usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceAccelerationStructurePropertiesKHR"]
        [::core::mem::size_of::<VkPhysicalDeviceAccelerationStructurePropertiesKHR>() - 56usize];
    ["Alignment of VkPhysicalDeviceAccelerationStructurePropertiesKHR"]
        [::core::mem::align_of::<VkPhysicalDeviceAccelerationStructurePropertiesKHR>() - 8usize];
    ["Offset of field: VkPhysicalDeviceAccelerationStructurePropertiesKHR::sType"][::core::mem::offset_of!(
        VkPhysicalDeviceAccelerationStructurePropertiesKHR,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceAccelerationStructurePropertiesKHR::pNext"][::core::mem::offset_of!(
        VkPhysicalDeviceAccelerationStructurePropertiesKHR,
        pNext
    ) - 4usize];
    ["Offset of field: VkPhysicalDeviceAccelerationStructurePropertiesKHR::maxGeometryCount"][::core::mem::offset_of!(
        VkPhysicalDeviceAccelerationStructurePropertiesKHR,
        maxGeometryCount
    )
        - 8usize];
    ["Offset of field: VkPhysicalDeviceAccelerationStructurePropertiesKHR::maxInstanceCount"][::core::mem::offset_of!(
        VkPhysicalDeviceAccelerationStructurePropertiesKHR,
        maxInstanceCount
    )
        - 16usize];
    ["Offset of field: VkPhysicalDeviceAccelerationStructurePropertiesKHR::maxPrimitiveCount"][::core::mem::offset_of!(
        VkPhysicalDeviceAccelerationStructurePropertiesKHR,
        maxPrimitiveCount
    )
        - 24usize];
    ["Offset of field: VkPhysicalDeviceAccelerationStructurePropertiesKHR::maxPerStageDescriptorAccelerationStructures"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceAccelerationStructurePropertiesKHR , maxPerStageDescriptorAccelerationStructures) - 32usize] ;
    ["Offset of field: VkPhysicalDeviceAccelerationStructurePropertiesKHR::maxPerStageDescriptorUpdateAfterBindAccelerationStructures"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceAccelerationStructurePropertiesKHR , maxPerStageDescriptorUpdateAfterBindAccelerationStructures) - 36usize] ;
    ["Offset of field: VkPhysicalDeviceAccelerationStructurePropertiesKHR::maxDescriptorSetAccelerationStructures"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceAccelerationStructurePropertiesKHR , maxDescriptorSetAccelerationStructures) - 40usize] ;
    ["Offset of field: VkPhysicalDeviceAccelerationStructurePropertiesKHR::maxDescriptorSetUpdateAfterBindAccelerationStructures"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceAccelerationStructurePropertiesKHR , maxDescriptorSetUpdateAfterBindAccelerationStructures) - 44usize] ;
    ["Offset of field: VkPhysicalDeviceAccelerationStructurePropertiesKHR::minAccelerationStructureScratchOffsetAlignment"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceAccelerationStructurePropertiesKHR , minAccelerationStructureScratchOffsetAlignment) - 48usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkAccelerationStructureDeviceAddressInfoKHR"]
        [::core::mem::size_of::<VkAccelerationStructureDeviceAddressInfoKHR>() - 16usize];
    ["Alignment of VkAccelerationStructureDeviceAddressInfoKHR"]
        [::core::mem::align_of::<VkAccelerationStructureDeviceAddressInfoKHR>() - 8usize];
    ["Offset of field: VkAccelerationStructureDeviceAddressInfoKHR::sType"]
        [::core::mem::offset_of!(VkAccelerationStructureDeviceAddressInfoKHR, sType) - 0usize];
    ["Offset of field: VkAccelerationStructureDeviceAddressInfoKHR::pNext"]
        [::core::mem::offset_of!(VkAccelerationStructureDeviceAddressInfoKHR, pNext) - 4usize];
    ["Offset of field: VkAccelerationStructureDeviceAddressInfoKHR::accelerationStructure"][::core::mem::offset_of!(
        VkAccelerationStructureDeviceAddressInfoKHR,
        accelerationStructure
    )
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkAccelerationStructureVersionInfoKHR"]
        [::core::mem::size_of::<VkAccelerationStructureVersionInfoKHR>() - 12usize];
    ["Alignment of VkAccelerationStructureVersionInfoKHR"]
        [::core::mem::align_of::<VkAccelerationStructureVersionInfoKHR>() - 4usize];
    ["Offset of field: VkAccelerationStructureVersionInfoKHR::sType"]
        [::core::mem::offset_of!(VkAccelerationStructureVersionInfoKHR, sType) - 0usize];
    ["Offset of field: VkAccelerationStructureVersionInfoKHR::pNext"]
        [::core::mem::offset_of!(VkAccelerationStructureVersionInfoKHR, pNext) - 4usize];
    ["Offset of field: VkAccelerationStructureVersionInfoKHR::pVersionData"]
        [::core::mem::offset_of!(VkAccelerationStructureVersionInfoKHR, pVersionData) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkCopyAccelerationStructureToMemoryInfoKHR"]
        [::core::mem::size_of::<VkCopyAccelerationStructureToMemoryInfoKHR>() - 32usize];
    ["Alignment of VkCopyAccelerationStructureToMemoryInfoKHR"]
        [::core::mem::align_of::<VkCopyAccelerationStructureToMemoryInfoKHR>() - 8usize];
    ["Offset of field: VkCopyAccelerationStructureToMemoryInfoKHR::sType"]
        [::core::mem::offset_of!(VkCopyAccelerationStructureToMemoryInfoKHR, sType) - 0usize];
    ["Offset of field: VkCopyAccelerationStructureToMemoryInfoKHR::pNext"]
        [::core::mem::offset_of!(VkCopyAccelerationStructureToMemoryInfoKHR, pNext) - 4usize];
    ["Offset of field: VkCopyAccelerationStructureToMemoryInfoKHR::src"]
        [::core::mem::offset_of!(VkCopyAccelerationStructureToMemoryInfoKHR, src) - 8usize];
    ["Offset of field: VkCopyAccelerationStructureToMemoryInfoKHR::dst"]
        [::core::mem::offset_of!(VkCopyAccelerationStructureToMemoryInfoKHR, dst) - 16usize];
    ["Offset of field: VkCopyAccelerationStructureToMemoryInfoKHR::mode"]
        [::core::mem::offset_of!(VkCopyAccelerationStructureToMemoryInfoKHR, mode) - 24usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkCopyMemoryToAccelerationStructureInfoKHR"]
        [::core::mem::size_of::<VkCopyMemoryToAccelerationStructureInfoKHR>() - 32usize];
    ["Alignment of VkCopyMemoryToAccelerationStructureInfoKHR"]
        [::core::mem::align_of::<VkCopyMemoryToAccelerationStructureInfoKHR>() - 8usize];
    ["Offset of field: VkCopyMemoryToAccelerationStructureInfoKHR::sType"]
        [::core::mem::offset_of!(VkCopyMemoryToAccelerationStructureInfoKHR, sType) - 0usize];
    ["Offset of field: VkCopyMemoryToAccelerationStructureInfoKHR::pNext"]
        [::core::mem::offset_of!(VkCopyMemoryToAccelerationStructureInfoKHR, pNext) - 4usize];
    ["Offset of field: VkCopyMemoryToAccelerationStructureInfoKHR::src"]
        [::core::mem::offset_of!(VkCopyMemoryToAccelerationStructureInfoKHR, src) - 8usize];
    ["Offset of field: VkCopyMemoryToAccelerationStructureInfoKHR::dst"]
        [::core::mem::offset_of!(VkCopyMemoryToAccelerationStructureInfoKHR, dst) - 16usize];
    ["Offset of field: VkCopyMemoryToAccelerationStructureInfoKHR::mode"]
        [::core::mem::offset_of!(VkCopyMemoryToAccelerationStructureInfoKHR, mode) - 24usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkCopyAccelerationStructureInfoKHR"]
        [::core::mem::size_of::<VkCopyAccelerationStructureInfoKHR>() - 32usize];
    ["Alignment of VkCopyAccelerationStructureInfoKHR"]
        [::core::mem::align_of::<VkCopyAccelerationStructureInfoKHR>() - 8usize];
    ["Offset of field: VkCopyAccelerationStructureInfoKHR::sType"]
        [::core::mem::offset_of!(VkCopyAccelerationStructureInfoKHR, sType) - 0usize];
    ["Offset of field: VkCopyAccelerationStructureInfoKHR::pNext"]
        [::core::mem::offset_of!(VkCopyAccelerationStructureInfoKHR, pNext) - 4usize];
    ["Offset of field: VkCopyAccelerationStructureInfoKHR::src"]
        [::core::mem::offset_of!(VkCopyAccelerationStructureInfoKHR, src) - 8usize];
    ["Offset of field: VkCopyAccelerationStructureInfoKHR::dst"]
        [::core::mem::offset_of!(VkCopyAccelerationStructureInfoKHR, dst) - 16usize];
    ["Offset of field: VkCopyAccelerationStructureInfoKHR::mode"]
        [::core::mem::offset_of!(VkCopyAccelerationStructureInfoKHR, mode) - 24usize];
};
pub const VkShaderGroupShaderKHR_VK_SHADER_GROUP_SHADER_GENERAL_KHR: VkShaderGroupShaderKHR = 0;
pub const VkShaderGroupShaderKHR_VK_SHADER_GROUP_SHADER_CLOSEST_HIT_KHR: VkShaderGroupShaderKHR = 1;
pub const VkShaderGroupShaderKHR_VK_SHADER_GROUP_SHADER_ANY_HIT_KHR: VkShaderGroupShaderKHR = 2;
pub const VkShaderGroupShaderKHR_VK_SHADER_GROUP_SHADER_INTERSECTION_KHR: VkShaderGroupShaderKHR =
    3;
pub const VkShaderGroupShaderKHR_VK_SHADER_GROUP_SHADER_MAX_ENUM_KHR: VkShaderGroupShaderKHR =
    2147483647;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkRayTracingShaderGroupCreateInfoKHR"]
        [::core::mem::size_of::<VkRayTracingShaderGroupCreateInfoKHR>() - 32usize];
    ["Alignment of VkRayTracingShaderGroupCreateInfoKHR"]
        [::core::mem::align_of::<VkRayTracingShaderGroupCreateInfoKHR>() - 4usize];
    ["Offset of field: VkRayTracingShaderGroupCreateInfoKHR::sType"]
        [::core::mem::offset_of!(VkRayTracingShaderGroupCreateInfoKHR, sType) - 0usize];
    ["Offset of field: VkRayTracingShaderGroupCreateInfoKHR::pNext"]
        [::core::mem::offset_of!(VkRayTracingShaderGroupCreateInfoKHR, pNext) - 4usize];
    ["Offset of field: VkRayTracingShaderGroupCreateInfoKHR::type_"]
        [::core::mem::offset_of!(VkRayTracingShaderGroupCreateInfoKHR, type_) - 8usize];
    ["Offset of field: VkRayTracingShaderGroupCreateInfoKHR::generalShader"]
        [::core::mem::offset_of!(VkRayTracingShaderGroupCreateInfoKHR, generalShader) - 12usize];
    ["Offset of field: VkRayTracingShaderGroupCreateInfoKHR::closestHitShader"]
        [::core::mem::offset_of!(VkRayTracingShaderGroupCreateInfoKHR, closestHitShader) - 16usize];
    ["Offset of field: VkRayTracingShaderGroupCreateInfoKHR::anyHitShader"]
        [::core::mem::offset_of!(VkRayTracingShaderGroupCreateInfoKHR, anyHitShader) - 20usize];
    ["Offset of field: VkRayTracingShaderGroupCreateInfoKHR::intersectionShader"][::core::mem::offset_of!(
        VkRayTracingShaderGroupCreateInfoKHR,
        intersectionShader
    ) - 24usize];
    ["Offset of field: VkRayTracingShaderGroupCreateInfoKHR::pShaderGroupCaptureReplayHandle"][::core::mem::offset_of!(
        VkRayTracingShaderGroupCreateInfoKHR,
        pShaderGroupCaptureReplayHandle
    )
        - 28usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkRayTracingPipelineInterfaceCreateInfoKHR"]
        [::core::mem::size_of::<VkRayTracingPipelineInterfaceCreateInfoKHR>() - 16usize];
    ["Alignment of VkRayTracingPipelineInterfaceCreateInfoKHR"]
        [::core::mem::align_of::<VkRayTracingPipelineInterfaceCreateInfoKHR>() - 4usize];
    ["Offset of field: VkRayTracingPipelineInterfaceCreateInfoKHR::sType"]
        [::core::mem::offset_of!(VkRayTracingPipelineInterfaceCreateInfoKHR, sType) - 0usize];
    ["Offset of field: VkRayTracingPipelineInterfaceCreateInfoKHR::pNext"]
        [::core::mem::offset_of!(VkRayTracingPipelineInterfaceCreateInfoKHR, pNext) - 4usize];
    ["Offset of field: VkRayTracingPipelineInterfaceCreateInfoKHR::maxPipelineRayPayloadSize"][::core::mem::offset_of!(
        VkRayTracingPipelineInterfaceCreateInfoKHR,
        maxPipelineRayPayloadSize
    )
        - 8usize];
    ["Offset of field: VkRayTracingPipelineInterfaceCreateInfoKHR::maxPipelineRayHitAttributeSize"] [:: core :: mem :: offset_of ! (VkRayTracingPipelineInterfaceCreateInfoKHR , maxPipelineRayHitAttributeSize) - 12usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkRayTracingPipelineCreateInfoKHR"]
        [::core::mem::size_of::<VkRayTracingPipelineCreateInfoKHR>() - 72usize];
    ["Alignment of VkRayTracingPipelineCreateInfoKHR"]
        [::core::mem::align_of::<VkRayTracingPipelineCreateInfoKHR>() - 8usize];
    ["Offset of field: VkRayTracingPipelineCreateInfoKHR::sType"]
        [::core::mem::offset_of!(VkRayTracingPipelineCreateInfoKHR, sType) - 0usize];
    ["Offset of field: VkRayTracingPipelineCreateInfoKHR::pNext"]
        [::core::mem::offset_of!(VkRayTracingPipelineCreateInfoKHR, pNext) - 4usize];
    ["Offset of field: VkRayTracingPipelineCreateInfoKHR::flags"]
        [::core::mem::offset_of!(VkRayTracingPipelineCreateInfoKHR, flags) - 8usize];
    ["Offset of field: VkRayTracingPipelineCreateInfoKHR::stageCount"]
        [::core::mem::offset_of!(VkRayTracingPipelineCreateInfoKHR, stageCount) - 12usize];
    ["Offset of field: VkRayTracingPipelineCreateInfoKHR::pStages"]
        [::core::mem::offset_of!(VkRayTracingPipelineCreateInfoKHR, pStages) - 16usize];
    ["Offset of field: VkRayTracingPipelineCreateInfoKHR::groupCount"]
        [::core::mem::offset_of!(VkRayTracingPipelineCreateInfoKHR, groupCount) - 20usize];
    ["Offset of field: VkRayTracingPipelineCreateInfoKHR::pGroups"]
        [::core::mem::offset_of!(VkRayTracingPipelineCreateInfoKHR, pGroups) - 24usize];
    ["Offset of field: VkRayTracingPipelineCreateInfoKHR::maxPipelineRayRecursionDepth"][::core::mem::offset_of!(
        VkRayTracingPipelineCreateInfoKHR,
        maxPipelineRayRecursionDepth
    )
        - 28usize];
    ["Offset of field: VkRayTracingPipelineCreateInfoKHR::pLibraryInfo"]
        [::core::mem::offset_of!(VkRayTracingPipelineCreateInfoKHR, pLibraryInfo) - 32usize];
    ["Offset of field: VkRayTracingPipelineCreateInfoKHR::pLibraryInterface"]
        [::core::mem::offset_of!(VkRayTracingPipelineCreateInfoKHR, pLibraryInterface) - 36usize];
    ["Offset of field: VkRayTracingPipelineCreateInfoKHR::pDynamicState"]
        [::core::mem::offset_of!(VkRayTracingPipelineCreateInfoKHR, pDynamicState) - 40usize];
    ["Offset of field: VkRayTracingPipelineCreateInfoKHR::layout"]
        [::core::mem::offset_of!(VkRayTracingPipelineCreateInfoKHR, layout) - 48usize];
    ["Offset of field: VkRayTracingPipelineCreateInfoKHR::basePipelineHandle"]
        [::core::mem::offset_of!(VkRayTracingPipelineCreateInfoKHR, basePipelineHandle) - 56usize];
    ["Offset of field: VkRayTracingPipelineCreateInfoKHR::basePipelineIndex"]
        [::core::mem::offset_of!(VkRayTracingPipelineCreateInfoKHR, basePipelineIndex) - 64usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceRayTracingPipelineFeaturesKHR"]
        [::core::mem::size_of::<VkPhysicalDeviceRayTracingPipelineFeaturesKHR>() - 28usize];
    ["Alignment of VkPhysicalDeviceRayTracingPipelineFeaturesKHR"]
        [::core::mem::align_of::<VkPhysicalDeviceRayTracingPipelineFeaturesKHR>() - 4usize];
    ["Offset of field: VkPhysicalDeviceRayTracingPipelineFeaturesKHR::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceRayTracingPipelineFeaturesKHR, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceRayTracingPipelineFeaturesKHR::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceRayTracingPipelineFeaturesKHR, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceRayTracingPipelineFeaturesKHR::rayTracingPipeline"][::core::mem::offset_of!(
        VkPhysicalDeviceRayTracingPipelineFeaturesKHR,
        rayTracingPipeline
    )
        - 8usize];
    ["Offset of field: VkPhysicalDeviceRayTracingPipelineFeaturesKHR::rayTracingPipelineShaderGroupHandleCaptureReplay"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceRayTracingPipelineFeaturesKHR , rayTracingPipelineShaderGroupHandleCaptureReplay) - 12usize] ;
    ["Offset of field: VkPhysicalDeviceRayTracingPipelineFeaturesKHR::rayTracingPipelineShaderGroupHandleCaptureReplayMixed"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceRayTracingPipelineFeaturesKHR , rayTracingPipelineShaderGroupHandleCaptureReplayMixed) - 16usize] ;
    ["Offset of field: VkPhysicalDeviceRayTracingPipelineFeaturesKHR::rayTracingPipelineTraceRaysIndirect"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceRayTracingPipelineFeaturesKHR , rayTracingPipelineTraceRaysIndirect) - 20usize] ;
    ["Offset of field: VkPhysicalDeviceRayTracingPipelineFeaturesKHR::rayTraversalPrimitiveCulling"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceRayTracingPipelineFeaturesKHR , rayTraversalPrimitiveCulling) - 24usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceRayTracingPipelinePropertiesKHR"]
        [::core::mem::size_of::<VkPhysicalDeviceRayTracingPipelinePropertiesKHR>() - 40usize];
    ["Alignment of VkPhysicalDeviceRayTracingPipelinePropertiesKHR"]
        [::core::mem::align_of::<VkPhysicalDeviceRayTracingPipelinePropertiesKHR>() - 4usize];
    ["Offset of field: VkPhysicalDeviceRayTracingPipelinePropertiesKHR::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceRayTracingPipelinePropertiesKHR, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceRayTracingPipelinePropertiesKHR::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceRayTracingPipelinePropertiesKHR, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceRayTracingPipelinePropertiesKHR::shaderGroupHandleSize"][::core::mem::offset_of!(
        VkPhysicalDeviceRayTracingPipelinePropertiesKHR,
        shaderGroupHandleSize
    )
        - 8usize];
    ["Offset of field: VkPhysicalDeviceRayTracingPipelinePropertiesKHR::maxRayRecursionDepth"][::core::mem::offset_of!(
        VkPhysicalDeviceRayTracingPipelinePropertiesKHR,
        maxRayRecursionDepth
    )
        - 12usize];
    ["Offset of field: VkPhysicalDeviceRayTracingPipelinePropertiesKHR::maxShaderGroupStride"][::core::mem::offset_of!(
        VkPhysicalDeviceRayTracingPipelinePropertiesKHR,
        maxShaderGroupStride
    )
        - 16usize];
    ["Offset of field: VkPhysicalDeviceRayTracingPipelinePropertiesKHR::shaderGroupBaseAlignment"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceRayTracingPipelinePropertiesKHR , shaderGroupBaseAlignment) - 20usize] ;
    ["Offset of field: VkPhysicalDeviceRayTracingPipelinePropertiesKHR::shaderGroupHandleCaptureReplaySize"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceRayTracingPipelinePropertiesKHR , shaderGroupHandleCaptureReplaySize) - 24usize] ;
    ["Offset of field: VkPhysicalDeviceRayTracingPipelinePropertiesKHR::maxRayDispatchInvocationCount"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceRayTracingPipelinePropertiesKHR , maxRayDispatchInvocationCount) - 28usize] ;
    ["Offset of field: VkPhysicalDeviceRayTracingPipelinePropertiesKHR::shaderGroupHandleAlignment"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceRayTracingPipelinePropertiesKHR , shaderGroupHandleAlignment) - 32usize] ;
    ["Offset of field: VkPhysicalDeviceRayTracingPipelinePropertiesKHR::maxRayHitAttributeSize"][::core::mem::offset_of!(
        VkPhysicalDeviceRayTracingPipelinePropertiesKHR,
        maxRayHitAttributeSize
    )
        - 36usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkTraceRaysIndirectCommandKHR"]
        [::core::mem::size_of::<VkTraceRaysIndirectCommandKHR>() - 12usize];
    ["Alignment of VkTraceRaysIndirectCommandKHR"]
        [::core::mem::align_of::<VkTraceRaysIndirectCommandKHR>() - 4usize];
    ["Offset of field: VkTraceRaysIndirectCommandKHR::width"]
        [::core::mem::offset_of!(VkTraceRaysIndirectCommandKHR, width) - 0usize];
    ["Offset of field: VkTraceRaysIndirectCommandKHR::height"]
        [::core::mem::offset_of!(VkTraceRaysIndirectCommandKHR, height) - 4usize];
    ["Offset of field: VkTraceRaysIndirectCommandKHR::depth"]
        [::core::mem::offset_of!(VkTraceRaysIndirectCommandKHR, depth) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceRayQueryFeaturesKHR"]
        [::core::mem::size_of::<VkPhysicalDeviceRayQueryFeaturesKHR>() - 12usize];
    ["Alignment of VkPhysicalDeviceRayQueryFeaturesKHR"]
        [::core::mem::align_of::<VkPhysicalDeviceRayQueryFeaturesKHR>() - 4usize];
    ["Offset of field: VkPhysicalDeviceRayQueryFeaturesKHR::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceRayQueryFeaturesKHR, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceRayQueryFeaturesKHR::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceRayQueryFeaturesKHR, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceRayQueryFeaturesKHR::rayQuery"]
        [::core::mem::offset_of!(VkPhysicalDeviceRayQueryFeaturesKHR, rayQuery) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceMeshShaderFeaturesEXT"]
        [::core::mem::size_of::<VkPhysicalDeviceMeshShaderFeaturesEXT>() - 28usize];
    ["Alignment of VkPhysicalDeviceMeshShaderFeaturesEXT"]
        [::core::mem::align_of::<VkPhysicalDeviceMeshShaderFeaturesEXT>() - 4usize];
    ["Offset of field: VkPhysicalDeviceMeshShaderFeaturesEXT::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceMeshShaderFeaturesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceMeshShaderFeaturesEXT::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceMeshShaderFeaturesEXT, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceMeshShaderFeaturesEXT::taskShader"]
        [::core::mem::offset_of!(VkPhysicalDeviceMeshShaderFeaturesEXT, taskShader) - 8usize];
    ["Offset of field: VkPhysicalDeviceMeshShaderFeaturesEXT::meshShader"]
        [::core::mem::offset_of!(VkPhysicalDeviceMeshShaderFeaturesEXT, meshShader) - 12usize];
    ["Offset of field: VkPhysicalDeviceMeshShaderFeaturesEXT::multiviewMeshShader"][::core::mem::offset_of!(
        VkPhysicalDeviceMeshShaderFeaturesEXT,
        multiviewMeshShader
    ) - 16usize];
    ["Offset of field: VkPhysicalDeviceMeshShaderFeaturesEXT::primitiveFragmentShadingRateMeshShader"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceMeshShaderFeaturesEXT , primitiveFragmentShadingRateMeshShader) - 20usize] ;
    ["Offset of field: VkPhysicalDeviceMeshShaderFeaturesEXT::meshShaderQueries"][::core::mem::offset_of!(
        VkPhysicalDeviceMeshShaderFeaturesEXT,
        meshShaderQueries
    ) - 24usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceMeshShaderPropertiesEXT"]
        [::core::mem::size_of::<VkPhysicalDeviceMeshShaderPropertiesEXT>() - 152usize];
    ["Alignment of VkPhysicalDeviceMeshShaderPropertiesEXT"]
        [::core::mem::align_of::<VkPhysicalDeviceMeshShaderPropertiesEXT>() - 4usize];
    ["Offset of field: VkPhysicalDeviceMeshShaderPropertiesEXT::sType"]
        [::core::mem::offset_of!(VkPhysicalDeviceMeshShaderPropertiesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceMeshShaderPropertiesEXT::pNext"]
        [::core::mem::offset_of!(VkPhysicalDeviceMeshShaderPropertiesEXT, pNext) - 4usize];
    ["Offset of field: VkPhysicalDeviceMeshShaderPropertiesEXT::maxTaskWorkGroupTotalCount"][::core::mem::offset_of!(
        VkPhysicalDeviceMeshShaderPropertiesEXT,
        maxTaskWorkGroupTotalCount
    )
        - 8usize];
    ["Offset of field: VkPhysicalDeviceMeshShaderPropertiesEXT::maxTaskWorkGroupCount"][::core::mem::offset_of!(
        VkPhysicalDeviceMeshShaderPropertiesEXT,
        maxTaskWorkGroupCount
    )
        - 12usize];
    ["Offset of field: VkPhysicalDeviceMeshShaderPropertiesEXT::maxTaskWorkGroupInvocations"][::core::mem::offset_of!(
        VkPhysicalDeviceMeshShaderPropertiesEXT,
        maxTaskWorkGroupInvocations
    )
        - 24usize];
    ["Offset of field: VkPhysicalDeviceMeshShaderPropertiesEXT::maxTaskWorkGroupSize"][::core::mem::offset_of!(
        VkPhysicalDeviceMeshShaderPropertiesEXT,
        maxTaskWorkGroupSize
    ) - 28usize];
    ["Offset of field: VkPhysicalDeviceMeshShaderPropertiesEXT::maxTaskPayloadSize"][::core::mem::offset_of!(
        VkPhysicalDeviceMeshShaderPropertiesEXT,
        maxTaskPayloadSize
    ) - 40usize];
    ["Offset of field: VkPhysicalDeviceMeshShaderPropertiesEXT::maxTaskSharedMemorySize"][::core::mem::offset_of!(
        VkPhysicalDeviceMeshShaderPropertiesEXT,
        maxTaskSharedMemorySize
    )
        - 44usize];
    ["Offset of field: VkPhysicalDeviceMeshShaderPropertiesEXT::maxTaskPayloadAndSharedMemorySize"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceMeshShaderPropertiesEXT , maxTaskPayloadAndSharedMemorySize) - 48usize] ;
    ["Offset of field: VkPhysicalDeviceMeshShaderPropertiesEXT::maxMeshWorkGroupTotalCount"][::core::mem::offset_of!(
        VkPhysicalDeviceMeshShaderPropertiesEXT,
        maxMeshWorkGroupTotalCount
    )
        - 52usize];
    ["Offset of field: VkPhysicalDeviceMeshShaderPropertiesEXT::maxMeshWorkGroupCount"][::core::mem::offset_of!(
        VkPhysicalDeviceMeshShaderPropertiesEXT,
        maxMeshWorkGroupCount
    )
        - 56usize];
    ["Offset of field: VkPhysicalDeviceMeshShaderPropertiesEXT::maxMeshWorkGroupInvocations"][::core::mem::offset_of!(
        VkPhysicalDeviceMeshShaderPropertiesEXT,
        maxMeshWorkGroupInvocations
    )
        - 68usize];
    ["Offset of field: VkPhysicalDeviceMeshShaderPropertiesEXT::maxMeshWorkGroupSize"][::core::mem::offset_of!(
        VkPhysicalDeviceMeshShaderPropertiesEXT,
        maxMeshWorkGroupSize
    ) - 72usize];
    ["Offset of field: VkPhysicalDeviceMeshShaderPropertiesEXT::maxMeshSharedMemorySize"][::core::mem::offset_of!(
        VkPhysicalDeviceMeshShaderPropertiesEXT,
        maxMeshSharedMemorySize
    )
        - 84usize];
    ["Offset of field: VkPhysicalDeviceMeshShaderPropertiesEXT::maxMeshPayloadAndSharedMemorySize"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceMeshShaderPropertiesEXT , maxMeshPayloadAndSharedMemorySize) - 88usize] ;
    ["Offset of field: VkPhysicalDeviceMeshShaderPropertiesEXT::maxMeshOutputMemorySize"][::core::mem::offset_of!(
        VkPhysicalDeviceMeshShaderPropertiesEXT,
        maxMeshOutputMemorySize
    )
        - 92usize];
    ["Offset of field: VkPhysicalDeviceMeshShaderPropertiesEXT::maxMeshPayloadAndOutputMemorySize"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceMeshShaderPropertiesEXT , maxMeshPayloadAndOutputMemorySize) - 96usize] ;
    ["Offset of field: VkPhysicalDeviceMeshShaderPropertiesEXT::maxMeshOutputComponents"][::core::mem::offset_of!(
        VkPhysicalDeviceMeshShaderPropertiesEXT,
        maxMeshOutputComponents
    )
        - 100usize];
    ["Offset of field: VkPhysicalDeviceMeshShaderPropertiesEXT::maxMeshOutputVertices"][::core::mem::offset_of!(
        VkPhysicalDeviceMeshShaderPropertiesEXT,
        maxMeshOutputVertices
    )
        - 104usize];
    ["Offset of field: VkPhysicalDeviceMeshShaderPropertiesEXT::maxMeshOutputPrimitives"][::core::mem::offset_of!(
        VkPhysicalDeviceMeshShaderPropertiesEXT,
        maxMeshOutputPrimitives
    )
        - 108usize];
    ["Offset of field: VkPhysicalDeviceMeshShaderPropertiesEXT::maxMeshOutputLayers"][::core::mem::offset_of!(
        VkPhysicalDeviceMeshShaderPropertiesEXT,
        maxMeshOutputLayers
    ) - 112usize];
    ["Offset of field: VkPhysicalDeviceMeshShaderPropertiesEXT::maxMeshMultiviewViewCount"][::core::mem::offset_of!(
        VkPhysicalDeviceMeshShaderPropertiesEXT,
        maxMeshMultiviewViewCount
    )
        - 116usize];
    ["Offset of field: VkPhysicalDeviceMeshShaderPropertiesEXT::meshOutputPerVertexGranularity"][::core::mem::offset_of!(
        VkPhysicalDeviceMeshShaderPropertiesEXT,
        meshOutputPerVertexGranularity
    )
        - 120usize];
    ["Offset of field: VkPhysicalDeviceMeshShaderPropertiesEXT::meshOutputPerPrimitiveGranularity"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceMeshShaderPropertiesEXT , meshOutputPerPrimitiveGranularity) - 124usize] ;
    ["Offset of field: VkPhysicalDeviceMeshShaderPropertiesEXT::maxPreferredTaskWorkGroupInvocations"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceMeshShaderPropertiesEXT , maxPreferredTaskWorkGroupInvocations) - 128usize] ;
    ["Offset of field: VkPhysicalDeviceMeshShaderPropertiesEXT::maxPreferredMeshWorkGroupInvocations"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceMeshShaderPropertiesEXT , maxPreferredMeshWorkGroupInvocations) - 132usize] ;
    ["Offset of field: VkPhysicalDeviceMeshShaderPropertiesEXT::prefersLocalInvocationVertexOutput"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceMeshShaderPropertiesEXT , prefersLocalInvocationVertexOutput) - 136usize] ;
    ["Offset of field: VkPhysicalDeviceMeshShaderPropertiesEXT::prefersLocalInvocationPrimitiveOutput"] [:: core :: mem :: offset_of ! (VkPhysicalDeviceMeshShaderPropertiesEXT , prefersLocalInvocationPrimitiveOutput) - 140usize] ;
    ["Offset of field: VkPhysicalDeviceMeshShaderPropertiesEXT::prefersCompactVertexOutput"][::core::mem::offset_of!(
        VkPhysicalDeviceMeshShaderPropertiesEXT,
        prefersCompactVertexOutput
    )
        - 144usize];
    ["Offset of field: VkPhysicalDeviceMeshShaderPropertiesEXT::prefersCompactPrimitiveOutput"][::core::mem::offset_of!(
        VkPhysicalDeviceMeshShaderPropertiesEXT,
        prefersCompactPrimitiveOutput
    )
        - 148usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDrawMeshTasksIndirectCommandEXT"]
        [::core::mem::size_of::<VkDrawMeshTasksIndirectCommandEXT>() - 12usize];
    ["Alignment of VkDrawMeshTasksIndirectCommandEXT"]
        [::core::mem::align_of::<VkDrawMeshTasksIndirectCommandEXT>() - 4usize];
    ["Offset of field: VkDrawMeshTasksIndirectCommandEXT::groupCountX"]
        [::core::mem::offset_of!(VkDrawMeshTasksIndirectCommandEXT, groupCountX) - 0usize];
    ["Offset of field: VkDrawMeshTasksIndirectCommandEXT::groupCountY"]
        [::core::mem::offset_of!(VkDrawMeshTasksIndirectCommandEXT, groupCountY) - 4usize];
    ["Offset of field: VkDrawMeshTasksIndirectCommandEXT::groupCountZ"]
        [::core::mem::offset_of!(VkDrawMeshTasksIndirectCommandEXT, groupCountZ) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union VkClearColorValue {
    pub float32: [f32; 4usize],
    pub int32: [i32; 4usize],
    pub uint32: [u32; 4usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union VkClearValue {
    pub color: VkClearColorValue,
    pub depthStencil: VkClearDepthStencilValue,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union VkPerformanceCounterResultKHR {
    pub int32: i32,
    pub int64: i64,
    pub uint32: u32,
    pub uint64: u64,
    pub float32: f32,
    pub float64: f64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union VkPipelineExecutableStatisticValueKHR {
    pub b32: VkBool32,
    pub i64_: i64,
    pub u64_: u64,
    pub f64_: f64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union VkPerformanceValueDataINTEL {
    pub value32: u32,
    pub value64: u64,
    pub valueFloat: f32,
    pub valueBool: VkBool32,
    pub valueString: *const ::core::ffi::c_char,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union VkDescriptorDataEXT {
    pub pSampler: *const VkSampler,
    pub pCombinedImageSampler: *const VkDescriptorImageInfo,
    pub pInputAttachmentImage: *const VkDescriptorImageInfo,
    pub pSampledImage: *const VkDescriptorImageInfo,
    pub pStorageImage: *const VkDescriptorImageInfo,
    pub pUniformTexelBuffer: *const VkDescriptorAddressInfoEXT,
    pub pStorageTexelBuffer: *const VkDescriptorAddressInfoEXT,
    pub pUniformBuffer: *const VkDescriptorAddressInfoEXT,
    pub pStorageBuffer: *const VkDescriptorAddressInfoEXT,
    pub accelerationStructure: VkDeviceAddress,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union VkDeviceOrHostAddressConstKHR {
    pub deviceAddress: VkDeviceAddress,
    pub hostAddress: *const ::core::ffi::c_void,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union VkAccelerationStructureMotionInstanceDataNV {
    pub staticInstance: VkAccelerationStructureInstanceKHR,
    pub matrixMotionInstance: VkAccelerationStructureMatrixMotionInstanceNV,
    pub srtMotionInstance: VkAccelerationStructureSRTMotionInstanceNV,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union VkDeviceOrHostAddressKHR {
    pub deviceAddress: VkDeviceAddress,
    pub hostAddress: *mut ::core::ffi::c_void,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union VkClusterAccelerationStructureOpInputNV {
    pub pClustersBottomLevel: *mut VkClusterAccelerationStructureClustersBottomLevelInputNV,
    pub pTriangleClusters: *mut VkClusterAccelerationStructureTriangleClusterInputNV,
    pub pMoveObjects: *mut VkClusterAccelerationStructureMoveObjectsInputNV,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union VkIndirectExecutionSetInfoEXT {
    pub pPipelineInfo: *const VkIndirectExecutionSetPipelineInfoEXT,
    pub pShaderInfo: *const VkIndirectExecutionSetShaderInfoEXT,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union VkIndirectCommandsTokenDataEXT {
    pub pPushConstant: *const VkIndirectCommandsPushConstantTokenEXT,
    pub pVertexBuffer: *const VkIndirectCommandsVertexBufferTokenEXT,
    pub pIndexBuffer: *const VkIndirectCommandsIndexBufferTokenEXT,
    pub pExecutionSet: *const VkIndirectCommandsExecutionSetTokenEXT,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union VkAccelerationStructureGeometryDataKHR {
    pub triangles: VkAccelerationStructureGeometryTrianglesDataKHR,
    pub aabbs: VkAccelerationStructureGeometryAabbsDataKHR,
    pub instances: VkAccelerationStructureGeometryInstancesDataKHR,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    fn extract_bit(byte: u8, index: usize) -> bool {
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        Self::extract_bit(byte, index)
    }
    #[inline]
    pub unsafe fn raw_get_bit(this: *const Self, index: usize) -> bool {
        debug_assert!(index / 8 < core::mem::size_of::<Storage>());
        let byte_index = index / 8;
        let byte = unsafe {
            *(core::ptr::addr_of!((*this).storage) as *const u8).offset(byte_index as isize)
        };
        Self::extract_bit(byte, index)
    }
    #[inline]
    fn change_bit(byte: u8, index: usize, val: bool) -> u8 {
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            byte | mask
        } else {
            byte & !mask
        }
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        *byte = Self::change_bit(*byte, index, val);
    }
    #[inline]
    pub unsafe fn raw_set_bit(this: *mut Self, index: usize, val: bool) {
        debug_assert!(index / 8 < core::mem::size_of::<Storage>());
        let byte_index = index / 8;
        let byte = unsafe {
            (core::ptr::addr_of_mut!((*this).storage) as *mut u8).offset(byte_index as isize)
        };
        unsafe { *byte = Self::change_bit(*byte, index, val) };
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub unsafe fn raw_get(this: *const Self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < core::mem::size_of::<Storage>());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= core::mem::size_of::<Storage>());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if unsafe { Self::raw_get_bit(this, i + bit_offset) } {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
    #[inline]
    pub unsafe fn raw_set(this: *mut Self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < core::mem::size_of::<Storage>());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= core::mem::size_of::<Storage>());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            unsafe { Self::raw_set_bit(this, index + bit_offset, val_bit_is_set) };
        }
    }
}
impl StdVideoH264SpsVuiFlags {
    #[inline]
    pub fn aspect_ratio_info_present_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_aspect_ratio_info_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn aspect_ratio_info_present_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_aspect_ratio_info_present_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn overscan_info_present_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_overscan_info_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn overscan_info_present_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_overscan_info_present_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn overscan_appropriate_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_overscan_appropriate_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn overscan_appropriate_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_overscan_appropriate_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn video_signal_type_present_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_video_signal_type_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn video_signal_type_present_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_video_signal_type_present_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn video_full_range_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_video_full_range_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn video_full_range_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_video_full_range_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn color_description_present_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_color_description_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn color_description_present_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                5usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_color_description_present_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                5usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn chroma_loc_info_present_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_chroma_loc_info_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn chroma_loc_info_present_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                6usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_chroma_loc_info_present_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                6usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn timing_info_present_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_timing_info_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn timing_info_present_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                7usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_timing_info_present_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                7usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn fixed_frame_rate_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fixed_frame_rate_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn fixed_frame_rate_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                8usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_fixed_frame_rate_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                8usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn bitstream_restriction_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_bitstream_restriction_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn bitstream_restriction_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                9usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_bitstream_restriction_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                9usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn nal_hrd_parameters_present_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_nal_hrd_parameters_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn nal_hrd_parameters_present_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                10usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_nal_hrd_parameters_present_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                10usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn vcl_hrd_parameters_present_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_vcl_hrd_parameters_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn vcl_hrd_parameters_present_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                11usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_vcl_hrd_parameters_present_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                11usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        aspect_ratio_info_present_flag: u32,
        overscan_info_present_flag: u32,
        overscan_appropriate_flag: u32,
        video_signal_type_present_flag: u32,
        video_full_range_flag: u32,
        color_description_present_flag: u32,
        chroma_loc_info_present_flag: u32,
        timing_info_present_flag: u32,
        fixed_frame_rate_flag: u32,
        bitstream_restriction_flag: u32,
        nal_hrd_parameters_present_flag: u32,
        vcl_hrd_parameters_present_flag: u32,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let aspect_ratio_info_present_flag: u32 =
                unsafe { ::core::mem::transmute(aspect_ratio_info_present_flag) };
            aspect_ratio_info_present_flag as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let overscan_info_present_flag: u32 =
                unsafe { ::core::mem::transmute(overscan_info_present_flag) };
            overscan_info_present_flag as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let overscan_appropriate_flag: u32 =
                unsafe { ::core::mem::transmute(overscan_appropriate_flag) };
            overscan_appropriate_flag as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let video_signal_type_present_flag: u32 =
                unsafe { ::core::mem::transmute(video_signal_type_present_flag) };
            video_signal_type_present_flag as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let video_full_range_flag: u32 =
                unsafe { ::core::mem::transmute(video_full_range_flag) };
            video_full_range_flag as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let color_description_present_flag: u32 =
                unsafe { ::core::mem::transmute(color_description_present_flag) };
            color_description_present_flag as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let chroma_loc_info_present_flag: u32 =
                unsafe { ::core::mem::transmute(chroma_loc_info_present_flag) };
            chroma_loc_info_present_flag as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let timing_info_present_flag: u32 =
                unsafe { ::core::mem::transmute(timing_info_present_flag) };
            timing_info_present_flag as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let fixed_frame_rate_flag: u32 =
                unsafe { ::core::mem::transmute(fixed_frame_rate_flag) };
            fixed_frame_rate_flag as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let bitstream_restriction_flag: u32 =
                unsafe { ::core::mem::transmute(bitstream_restriction_flag) };
            bitstream_restriction_flag as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let nal_hrd_parameters_present_flag: u32 =
                unsafe { ::core::mem::transmute(nal_hrd_parameters_present_flag) };
            nal_hrd_parameters_present_flag as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let vcl_hrd_parameters_present_flag: u32 =
                unsafe { ::core::mem::transmute(vcl_hrd_parameters_present_flag) };
            vcl_hrd_parameters_present_flag as u64
        });
        __bindgen_bitfield_unit
    }
}
impl StdVideoH264SpsFlags {
    #[inline]
    pub fn constraint_set0_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_constraint_set0_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn constraint_set0_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_constraint_set0_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn constraint_set1_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_constraint_set1_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn constraint_set1_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_constraint_set1_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn constraint_set2_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_constraint_set2_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn constraint_set2_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_constraint_set2_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn constraint_set3_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_constraint_set3_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn constraint_set3_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_constraint_set3_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn constraint_set4_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_constraint_set4_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn constraint_set4_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_constraint_set4_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn constraint_set5_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_constraint_set5_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn constraint_set5_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                5usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_constraint_set5_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                5usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn direct_8x8_inference_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_direct_8x8_inference_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn direct_8x8_inference_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                6usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_direct_8x8_inference_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                6usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn mb_adaptive_frame_field_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_mb_adaptive_frame_field_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn mb_adaptive_frame_field_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                7usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_mb_adaptive_frame_field_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                7usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn frame_mbs_only_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_frame_mbs_only_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn frame_mbs_only_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                8usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_frame_mbs_only_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                8usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn delta_pic_order_always_zero_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_delta_pic_order_always_zero_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn delta_pic_order_always_zero_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                9usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_delta_pic_order_always_zero_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                9usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn separate_colour_plane_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_separate_colour_plane_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn separate_colour_plane_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                10usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_separate_colour_plane_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                10usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn gaps_in_frame_num_value_allowed_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_gaps_in_frame_num_value_allowed_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn gaps_in_frame_num_value_allowed_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                11usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_gaps_in_frame_num_value_allowed_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                11usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn qpprime_y_zero_transform_bypass_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_qpprime_y_zero_transform_bypass_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn qpprime_y_zero_transform_bypass_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                12usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_qpprime_y_zero_transform_bypass_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                12usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn frame_cropping_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_frame_cropping_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn frame_cropping_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                13usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_frame_cropping_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                13usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn seq_scaling_matrix_present_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_seq_scaling_matrix_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn seq_scaling_matrix_present_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                14usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_seq_scaling_matrix_present_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                14usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn vui_parameters_present_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_vui_parameters_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn vui_parameters_present_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                15usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_vui_parameters_present_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                15usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        constraint_set0_flag: u32,
        constraint_set1_flag: u32,
        constraint_set2_flag: u32,
        constraint_set3_flag: u32,
        constraint_set4_flag: u32,
        constraint_set5_flag: u32,
        direct_8x8_inference_flag: u32,
        mb_adaptive_frame_field_flag: u32,
        frame_mbs_only_flag: u32,
        delta_pic_order_always_zero_flag: u32,
        separate_colour_plane_flag: u32,
        gaps_in_frame_num_value_allowed_flag: u32,
        qpprime_y_zero_transform_bypass_flag: u32,
        frame_cropping_flag: u32,
        seq_scaling_matrix_present_flag: u32,
        vui_parameters_present_flag: u32,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let constraint_set0_flag: u32 = unsafe { ::core::mem::transmute(constraint_set0_flag) };
            constraint_set0_flag as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let constraint_set1_flag: u32 = unsafe { ::core::mem::transmute(constraint_set1_flag) };
            constraint_set1_flag as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let constraint_set2_flag: u32 = unsafe { ::core::mem::transmute(constraint_set2_flag) };
            constraint_set2_flag as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let constraint_set3_flag: u32 = unsafe { ::core::mem::transmute(constraint_set3_flag) };
            constraint_set3_flag as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let constraint_set4_flag: u32 = unsafe { ::core::mem::transmute(constraint_set4_flag) };
            constraint_set4_flag as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let constraint_set5_flag: u32 = unsafe { ::core::mem::transmute(constraint_set5_flag) };
            constraint_set5_flag as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let direct_8x8_inference_flag: u32 =
                unsafe { ::core::mem::transmute(direct_8x8_inference_flag) };
            direct_8x8_inference_flag as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let mb_adaptive_frame_field_flag: u32 =
                unsafe { ::core::mem::transmute(mb_adaptive_frame_field_flag) };
            mb_adaptive_frame_field_flag as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let frame_mbs_only_flag: u32 = unsafe { ::core::mem::transmute(frame_mbs_only_flag) };
            frame_mbs_only_flag as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let delta_pic_order_always_zero_flag: u32 =
                unsafe { ::core::mem::transmute(delta_pic_order_always_zero_flag) };
            delta_pic_order_always_zero_flag as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let separate_colour_plane_flag: u32 =
                unsafe { ::core::mem::transmute(separate_colour_plane_flag) };
            separate_colour_plane_flag as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let gaps_in_frame_num_value_allowed_flag: u32 =
                unsafe { ::core::mem::transmute(gaps_in_frame_num_value_allowed_flag) };
            gaps_in_frame_num_value_allowed_flag as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let qpprime_y_zero_transform_bypass_flag: u32 =
                unsafe { ::core::mem::transmute(qpprime_y_zero_transform_bypass_flag) };
            qpprime_y_zero_transform_bypass_flag as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let frame_cropping_flag: u32 = unsafe { ::core::mem::transmute(frame_cropping_flag) };
            frame_cropping_flag as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let seq_scaling_matrix_present_flag: u32 =
                unsafe { ::core::mem::transmute(seq_scaling_matrix_present_flag) };
            seq_scaling_matrix_present_flag as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let vui_parameters_present_flag: u32 =
                unsafe { ::core::mem::transmute(vui_parameters_present_flag) };
            vui_parameters_present_flag as u64
        });
        __bindgen_bitfield_unit
    }
}
impl StdVideoH264PpsFlags {
    #[inline]
    pub fn transform_8x8_mode_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_transform_8x8_mode_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn transform_8x8_mode_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_transform_8x8_mode_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn redundant_pic_cnt_present_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_redundant_pic_cnt_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn redundant_pic_cnt_present_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_redundant_pic_cnt_present_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn constrained_intra_pred_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_constrained_intra_pred_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn constrained_intra_pred_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_constrained_intra_pred_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn deblocking_filter_control_present_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_deblocking_filter_control_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn deblocking_filter_control_present_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_deblocking_filter_control_present_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn weighted_pred_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_weighted_pred_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn weighted_pred_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_weighted_pred_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn bottom_field_pic_order_in_frame_present_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_bottom_field_pic_order_in_frame_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn bottom_field_pic_order_in_frame_present_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                5usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_bottom_field_pic_order_in_frame_present_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                5usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn entropy_coding_mode_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_entropy_coding_mode_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn entropy_coding_mode_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                6usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_entropy_coding_mode_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                6usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn pic_scaling_matrix_present_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_pic_scaling_matrix_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn pic_scaling_matrix_present_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                7usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_pic_scaling_matrix_present_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                7usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        transform_8x8_mode_flag: u32,
        redundant_pic_cnt_present_flag: u32,
        constrained_intra_pred_flag: u32,
        deblocking_filter_control_present_flag: u32,
        weighted_pred_flag: u32,
        bottom_field_pic_order_in_frame_present_flag: u32,
        entropy_coding_mode_flag: u32,
        pic_scaling_matrix_present_flag: u32,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let transform_8x8_mode_flag: u32 =
                unsafe { ::core::mem::transmute(transform_8x8_mode_flag) };
            transform_8x8_mode_flag as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let redundant_pic_cnt_present_flag: u32 =
                unsafe { ::core::mem::transmute(redundant_pic_cnt_present_flag) };
            redundant_pic_cnt_present_flag as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let constrained_intra_pred_flag: u32 =
                unsafe { ::core::mem::transmute(constrained_intra_pred_flag) };
            constrained_intra_pred_flag as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let deblocking_filter_control_present_flag: u32 =
                unsafe { ::core::mem::transmute(deblocking_filter_control_present_flag) };
            deblocking_filter_control_present_flag as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let weighted_pred_flag: u32 = unsafe { ::core::mem::transmute(weighted_pred_flag) };
            weighted_pred_flag as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bottom_field_pic_order_in_frame_present_flag: u32 =
                unsafe { ::core::mem::transmute(bottom_field_pic_order_in_frame_present_flag) };
            bottom_field_pic_order_in_frame_present_flag as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let entropy_coding_mode_flag: u32 =
                unsafe { ::core::mem::transmute(entropy_coding_mode_flag) };
            entropy_coding_mode_flag as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let pic_scaling_matrix_present_flag: u32 =
                unsafe { ::core::mem::transmute(pic_scaling_matrix_present_flag) };
            pic_scaling_matrix_present_flag as u64
        });
        __bindgen_bitfield_unit
    }
}
impl StdVideoEncodeH264SliceHeaderFlags {
    #[inline]
    pub fn direct_spatial_mv_pred_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_direct_spatial_mv_pred_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn direct_spatial_mv_pred_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_direct_spatial_mv_pred_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn num_ref_idx_active_override_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_num_ref_idx_active_override_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn num_ref_idx_active_override_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_num_ref_idx_active_override_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 30u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 30u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn reserved_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                30u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_reserved_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                30u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        direct_spatial_mv_pred_flag: u32,
        num_ref_idx_active_override_flag: u32,
        reserved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let direct_spatial_mv_pred_flag: u32 =
                unsafe { ::core::mem::transmute(direct_spatial_mv_pred_flag) };
            direct_spatial_mv_pred_flag as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let num_ref_idx_active_override_flag: u32 =
                unsafe { ::core::mem::transmute(num_ref_idx_active_override_flag) };
            num_ref_idx_active_override_flag as u64
        });
        __bindgen_bitfield_unit.set(2usize, 30u8, {
            let reserved: u32 = unsafe { ::core::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
impl StdVideoEncodeH264PictureInfoFlags {
    #[inline]
    pub fn IdrPicFlag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_IdrPicFlag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn IdrPicFlag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_IdrPicFlag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn is_reference(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_is_reference(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn is_reference_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_is_reference_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn no_output_of_prior_pics_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_no_output_of_prior_pics_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn no_output_of_prior_pics_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_no_output_of_prior_pics_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn long_term_reference_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_long_term_reference_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn long_term_reference_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_long_term_reference_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn adaptive_ref_pic_marking_mode_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_adaptive_ref_pic_marking_mode_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn adaptive_ref_pic_marking_mode_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_adaptive_ref_pic_marking_mode_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 27u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 27u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn reserved_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                5usize,
                27u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_reserved_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                5usize,
                27u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        IdrPicFlag: u32,
        is_reference: u32,
        no_output_of_prior_pics_flag: u32,
        long_term_reference_flag: u32,
        adaptive_ref_pic_marking_mode_flag: u32,
        reserved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let IdrPicFlag: u32 = unsafe { ::core::mem::transmute(IdrPicFlag) };
            IdrPicFlag as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let is_reference: u32 = unsafe { ::core::mem::transmute(is_reference) };
            is_reference as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let no_output_of_prior_pics_flag: u32 =
                unsafe { ::core::mem::transmute(no_output_of_prior_pics_flag) };
            no_output_of_prior_pics_flag as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let long_term_reference_flag: u32 =
                unsafe { ::core::mem::transmute(long_term_reference_flag) };
            long_term_reference_flag as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let adaptive_ref_pic_marking_mode_flag: u32 =
                unsafe { ::core::mem::transmute(adaptive_ref_pic_marking_mode_flag) };
            adaptive_ref_pic_marking_mode_flag as u64
        });
        __bindgen_bitfield_unit.set(5usize, 27u8, {
            let reserved: u32 = unsafe { ::core::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
impl StdVideoEncodeH264ReferenceInfoFlags {
    #[inline]
    pub fn used_for_long_term_reference(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_used_for_long_term_reference(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn used_for_long_term_reference_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_used_for_long_term_reference_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 31u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 31u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn reserved_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                31u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_reserved_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                31u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        used_for_long_term_reference: u32,
        reserved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let used_for_long_term_reference: u32 =
                unsafe { ::core::mem::transmute(used_for_long_term_reference) };
            used_for_long_term_reference as u64
        });
        __bindgen_bitfield_unit.set(1usize, 31u8, {
            let reserved: u32 = unsafe { ::core::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
impl StdVideoEncodeH264ReferenceListsInfoFlags {
    #[inline]
    pub fn ref_pic_list_modification_flag_l0(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ref_pic_list_modification_flag_l0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn ref_pic_list_modification_flag_l0_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_ref_pic_list_modification_flag_l0_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn ref_pic_list_modification_flag_l1(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ref_pic_list_modification_flag_l1(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn ref_pic_list_modification_flag_l1_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_ref_pic_list_modification_flag_l1_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 30u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 30u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn reserved_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                30u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_reserved_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                30u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        ref_pic_list_modification_flag_l0: u32,
        ref_pic_list_modification_flag_l1: u32,
        reserved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let ref_pic_list_modification_flag_l0: u32 =
                unsafe { ::core::mem::transmute(ref_pic_list_modification_flag_l0) };
            ref_pic_list_modification_flag_l0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let ref_pic_list_modification_flag_l1: u32 =
                unsafe { ::core::mem::transmute(ref_pic_list_modification_flag_l1) };
            ref_pic_list_modification_flag_l1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 30u8, {
            let reserved: u32 = unsafe { ::core::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
impl StdVideoH265HrdFlags {
    #[inline]
    pub fn nal_hrd_parameters_present_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_nal_hrd_parameters_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn nal_hrd_parameters_present_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_nal_hrd_parameters_present_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn vcl_hrd_parameters_present_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_vcl_hrd_parameters_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn vcl_hrd_parameters_present_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_vcl_hrd_parameters_present_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn sub_pic_hrd_params_present_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sub_pic_hrd_params_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn sub_pic_hrd_params_present_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_sub_pic_hrd_params_present_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn sub_pic_cpb_params_in_pic_timing_sei_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sub_pic_cpb_params_in_pic_timing_sei_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn sub_pic_cpb_params_in_pic_timing_sei_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_sub_pic_cpb_params_in_pic_timing_sei_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn fixed_pic_rate_general_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_fixed_pic_rate_general_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn fixed_pic_rate_general_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_fixed_pic_rate_general_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn fixed_pic_rate_within_cvs_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_fixed_pic_rate_within_cvs_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn fixed_pic_rate_within_cvs_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                12usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_fixed_pic_rate_within_cvs_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                12usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn low_delay_hrd_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(20usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_low_delay_hrd_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(20usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn low_delay_hrd_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                20usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_low_delay_hrd_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                20usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        nal_hrd_parameters_present_flag: u32,
        vcl_hrd_parameters_present_flag: u32,
        sub_pic_hrd_params_present_flag: u32,
        sub_pic_cpb_params_in_pic_timing_sei_flag: u32,
        fixed_pic_rate_general_flag: u32,
        fixed_pic_rate_within_cvs_flag: u32,
        low_delay_hrd_flag: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let nal_hrd_parameters_present_flag: u32 =
                unsafe { ::core::mem::transmute(nal_hrd_parameters_present_flag) };
            nal_hrd_parameters_present_flag as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let vcl_hrd_parameters_present_flag: u32 =
                unsafe { ::core::mem::transmute(vcl_hrd_parameters_present_flag) };
            vcl_hrd_parameters_present_flag as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let sub_pic_hrd_params_present_flag: u32 =
                unsafe { ::core::mem::transmute(sub_pic_hrd_params_present_flag) };
            sub_pic_hrd_params_present_flag as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let sub_pic_cpb_params_in_pic_timing_sei_flag: u32 =
                unsafe { ::core::mem::transmute(sub_pic_cpb_params_in_pic_timing_sei_flag) };
            sub_pic_cpb_params_in_pic_timing_sei_flag as u64
        });
        __bindgen_bitfield_unit.set(4usize, 8u8, {
            let fixed_pic_rate_general_flag: u32 =
                unsafe { ::core::mem::transmute(fixed_pic_rate_general_flag) };
            fixed_pic_rate_general_flag as u64
        });
        __bindgen_bitfield_unit.set(12usize, 8u8, {
            let fixed_pic_rate_within_cvs_flag: u32 =
                unsafe { ::core::mem::transmute(fixed_pic_rate_within_cvs_flag) };
            fixed_pic_rate_within_cvs_flag as u64
        });
        __bindgen_bitfield_unit.set(20usize, 8u8, {
            let low_delay_hrd_flag: u32 = unsafe { ::core::mem::transmute(low_delay_hrd_flag) };
            low_delay_hrd_flag as u64
        });
        __bindgen_bitfield_unit
    }
}
impl StdVideoH265VpsFlags {
    #[inline]
    pub fn vps_temporal_id_nesting_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_vps_temporal_id_nesting_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn vps_temporal_id_nesting_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_vps_temporal_id_nesting_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn vps_sub_layer_ordering_info_present_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_vps_sub_layer_ordering_info_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn vps_sub_layer_ordering_info_present_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_vps_sub_layer_ordering_info_present_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn vps_timing_info_present_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_vps_timing_info_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn vps_timing_info_present_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_vps_timing_info_present_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn vps_poc_proportional_to_timing_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_vps_poc_proportional_to_timing_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn vps_poc_proportional_to_timing_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_vps_poc_proportional_to_timing_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        vps_temporal_id_nesting_flag: u32,
        vps_sub_layer_ordering_info_present_flag: u32,
        vps_timing_info_present_flag: u32,
        vps_poc_proportional_to_timing_flag: u32,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let vps_temporal_id_nesting_flag: u32 =
                unsafe { ::core::mem::transmute(vps_temporal_id_nesting_flag) };
            vps_temporal_id_nesting_flag as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let vps_sub_layer_ordering_info_present_flag: u32 =
                unsafe { ::core::mem::transmute(vps_sub_layer_ordering_info_present_flag) };
            vps_sub_layer_ordering_info_present_flag as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let vps_timing_info_present_flag: u32 =
                unsafe { ::core::mem::transmute(vps_timing_info_present_flag) };
            vps_timing_info_present_flag as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let vps_poc_proportional_to_timing_flag: u32 =
                unsafe { ::core::mem::transmute(vps_poc_proportional_to_timing_flag) };
            vps_poc_proportional_to_timing_flag as u64
        });
        __bindgen_bitfield_unit
    }
}
impl StdVideoH265ProfileTierLevelFlags {
    #[inline]
    pub fn general_tier_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_general_tier_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn general_tier_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_general_tier_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn general_progressive_source_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_general_progressive_source_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn general_progressive_source_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_general_progressive_source_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn general_interlaced_source_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_general_interlaced_source_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn general_interlaced_source_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_general_interlaced_source_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn general_non_packed_constraint_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_general_non_packed_constraint_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn general_non_packed_constraint_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_general_non_packed_constraint_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn general_frame_only_constraint_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_general_frame_only_constraint_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn general_frame_only_constraint_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_general_frame_only_constraint_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        general_tier_flag: u32,
        general_progressive_source_flag: u32,
        general_interlaced_source_flag: u32,
        general_non_packed_constraint_flag: u32,
        general_frame_only_constraint_flag: u32,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let general_tier_flag: u32 = unsafe { ::core::mem::transmute(general_tier_flag) };
            general_tier_flag as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let general_progressive_source_flag: u32 =
                unsafe { ::core::mem::transmute(general_progressive_source_flag) };
            general_progressive_source_flag as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let general_interlaced_source_flag: u32 =
                unsafe { ::core::mem::transmute(general_interlaced_source_flag) };
            general_interlaced_source_flag as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let general_non_packed_constraint_flag: u32 =
                unsafe { ::core::mem::transmute(general_non_packed_constraint_flag) };
            general_non_packed_constraint_flag as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let general_frame_only_constraint_flag: u32 =
                unsafe { ::core::mem::transmute(general_frame_only_constraint_flag) };
            general_frame_only_constraint_flag as u64
        });
        __bindgen_bitfield_unit
    }
}
impl StdVideoH265SpsVuiFlags {
    #[inline]
    pub fn aspect_ratio_info_present_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_aspect_ratio_info_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn aspect_ratio_info_present_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_aspect_ratio_info_present_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn overscan_info_present_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_overscan_info_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn overscan_info_present_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_overscan_info_present_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn overscan_appropriate_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_overscan_appropriate_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn overscan_appropriate_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_overscan_appropriate_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn video_signal_type_present_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_video_signal_type_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn video_signal_type_present_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_video_signal_type_present_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn video_full_range_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_video_full_range_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn video_full_range_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_video_full_range_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn colour_description_present_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_colour_description_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn colour_description_present_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                5usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_colour_description_present_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                5usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn chroma_loc_info_present_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_chroma_loc_info_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn chroma_loc_info_present_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                6usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_chroma_loc_info_present_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                6usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn neutral_chroma_indication_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_neutral_chroma_indication_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn neutral_chroma_indication_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                7usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_neutral_chroma_indication_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                7usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn field_seq_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_field_seq_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn field_seq_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                8usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_field_seq_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                8usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn frame_field_info_present_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_frame_field_info_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn frame_field_info_present_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                9usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_frame_field_info_present_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                9usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn default_display_window_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_default_display_window_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn default_display_window_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                10usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_default_display_window_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                10usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn vui_timing_info_present_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_vui_timing_info_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn vui_timing_info_present_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                11usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_vui_timing_info_present_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                11usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn vui_poc_proportional_to_timing_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_vui_poc_proportional_to_timing_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn vui_poc_proportional_to_timing_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                12usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_vui_poc_proportional_to_timing_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                12usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn vui_hrd_parameters_present_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_vui_hrd_parameters_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn vui_hrd_parameters_present_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                13usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_vui_hrd_parameters_present_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                13usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn bitstream_restriction_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_bitstream_restriction_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn bitstream_restriction_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                14usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_bitstream_restriction_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                14usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn tiles_fixed_structure_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tiles_fixed_structure_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn tiles_fixed_structure_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                15usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_tiles_fixed_structure_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                15usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn motion_vectors_over_pic_boundaries_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_motion_vectors_over_pic_boundaries_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn motion_vectors_over_pic_boundaries_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                16usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_motion_vectors_over_pic_boundaries_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                16usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn restricted_ref_pic_lists_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(17usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_restricted_ref_pic_lists_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(17usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn restricted_ref_pic_lists_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                17usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_restricted_ref_pic_lists_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                17usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        aspect_ratio_info_present_flag: u32,
        overscan_info_present_flag: u32,
        overscan_appropriate_flag: u32,
        video_signal_type_present_flag: u32,
        video_full_range_flag: u32,
        colour_description_present_flag: u32,
        chroma_loc_info_present_flag: u32,
        neutral_chroma_indication_flag: u32,
        field_seq_flag: u32,
        frame_field_info_present_flag: u32,
        default_display_window_flag: u32,
        vui_timing_info_present_flag: u32,
        vui_poc_proportional_to_timing_flag: u32,
        vui_hrd_parameters_present_flag: u32,
        bitstream_restriction_flag: u32,
        tiles_fixed_structure_flag: u32,
        motion_vectors_over_pic_boundaries_flag: u32,
        restricted_ref_pic_lists_flag: u32,
    ) -> __BindgenBitfieldUnit<[u8; 3usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 3usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let aspect_ratio_info_present_flag: u32 =
                unsafe { ::core::mem::transmute(aspect_ratio_info_present_flag) };
            aspect_ratio_info_present_flag as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let overscan_info_present_flag: u32 =
                unsafe { ::core::mem::transmute(overscan_info_present_flag) };
            overscan_info_present_flag as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let overscan_appropriate_flag: u32 =
                unsafe { ::core::mem::transmute(overscan_appropriate_flag) };
            overscan_appropriate_flag as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let video_signal_type_present_flag: u32 =
                unsafe { ::core::mem::transmute(video_signal_type_present_flag) };
            video_signal_type_present_flag as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let video_full_range_flag: u32 =
                unsafe { ::core::mem::transmute(video_full_range_flag) };
            video_full_range_flag as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let colour_description_present_flag: u32 =
                unsafe { ::core::mem::transmute(colour_description_present_flag) };
            colour_description_present_flag as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let chroma_loc_info_present_flag: u32 =
                unsafe { ::core::mem::transmute(chroma_loc_info_present_flag) };
            chroma_loc_info_present_flag as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let neutral_chroma_indication_flag: u32 =
                unsafe { ::core::mem::transmute(neutral_chroma_indication_flag) };
            neutral_chroma_indication_flag as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let field_seq_flag: u32 = unsafe { ::core::mem::transmute(field_seq_flag) };
            field_seq_flag as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let frame_field_info_present_flag: u32 =
                unsafe { ::core::mem::transmute(frame_field_info_present_flag) };
            frame_field_info_present_flag as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let default_display_window_flag: u32 =
                unsafe { ::core::mem::transmute(default_display_window_flag) };
            default_display_window_flag as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let vui_timing_info_present_flag: u32 =
                unsafe { ::core::mem::transmute(vui_timing_info_present_flag) };
            vui_timing_info_present_flag as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let vui_poc_proportional_to_timing_flag: u32 =
                unsafe { ::core::mem::transmute(vui_poc_proportional_to_timing_flag) };
            vui_poc_proportional_to_timing_flag as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let vui_hrd_parameters_present_flag: u32 =
                unsafe { ::core::mem::transmute(vui_hrd_parameters_present_flag) };
            vui_hrd_parameters_present_flag as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let bitstream_restriction_flag: u32 =
                unsafe { ::core::mem::transmute(bitstream_restriction_flag) };
            bitstream_restriction_flag as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let tiles_fixed_structure_flag: u32 =
                unsafe { ::core::mem::transmute(tiles_fixed_structure_flag) };
            tiles_fixed_structure_flag as u64
        });
        __bindgen_bitfield_unit.set(16usize, 1u8, {
            let motion_vectors_over_pic_boundaries_flag: u32 =
                unsafe { ::core::mem::transmute(motion_vectors_over_pic_boundaries_flag) };
            motion_vectors_over_pic_boundaries_flag as u64
        });
        __bindgen_bitfield_unit.set(17usize, 1u8, {
            let restricted_ref_pic_lists_flag: u32 =
                unsafe { ::core::mem::transmute(restricted_ref_pic_lists_flag) };
            restricted_ref_pic_lists_flag as u64
        });
        __bindgen_bitfield_unit
    }
}
impl StdVideoH265SpsFlags {
    #[inline]
    pub fn sps_temporal_id_nesting_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sps_temporal_id_nesting_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn sps_temporal_id_nesting_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_sps_temporal_id_nesting_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn separate_colour_plane_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_separate_colour_plane_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn separate_colour_plane_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_separate_colour_plane_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn conformance_window_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_conformance_window_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn conformance_window_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_conformance_window_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn sps_sub_layer_ordering_info_present_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sps_sub_layer_ordering_info_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn sps_sub_layer_ordering_info_present_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_sps_sub_layer_ordering_info_present_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn scaling_list_enabled_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_scaling_list_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn scaling_list_enabled_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_scaling_list_enabled_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn sps_scaling_list_data_present_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sps_scaling_list_data_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn sps_scaling_list_data_present_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                5usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_sps_scaling_list_data_present_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                5usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn amp_enabled_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_amp_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn amp_enabled_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                6usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_amp_enabled_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                6usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn sample_adaptive_offset_enabled_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sample_adaptive_offset_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn sample_adaptive_offset_enabled_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                7usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_sample_adaptive_offset_enabled_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                7usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn pcm_enabled_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_pcm_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn pcm_enabled_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                8usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_pcm_enabled_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                8usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn pcm_loop_filter_disabled_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_pcm_loop_filter_disabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn pcm_loop_filter_disabled_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                9usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_pcm_loop_filter_disabled_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                9usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn long_term_ref_pics_present_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_long_term_ref_pics_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn long_term_ref_pics_present_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                10usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_long_term_ref_pics_present_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                10usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn sps_temporal_mvp_enabled_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sps_temporal_mvp_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn sps_temporal_mvp_enabled_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                11usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_sps_temporal_mvp_enabled_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                11usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn strong_intra_smoothing_enabled_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_strong_intra_smoothing_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn strong_intra_smoothing_enabled_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                12usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_strong_intra_smoothing_enabled_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                12usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn vui_parameters_present_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_vui_parameters_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn vui_parameters_present_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                13usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_vui_parameters_present_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                13usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn sps_extension_present_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sps_extension_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn sps_extension_present_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                14usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_sps_extension_present_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                14usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn sps_range_extension_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sps_range_extension_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn sps_range_extension_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                15usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_sps_range_extension_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                15usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn transform_skip_rotation_enabled_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_transform_skip_rotation_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn transform_skip_rotation_enabled_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                16usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_transform_skip_rotation_enabled_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                16usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn transform_skip_context_enabled_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(17usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_transform_skip_context_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(17usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn transform_skip_context_enabled_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                17usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_transform_skip_context_enabled_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                17usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn implicit_rdpcm_enabled_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(18usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_implicit_rdpcm_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(18usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn implicit_rdpcm_enabled_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                18usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_implicit_rdpcm_enabled_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                18usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn explicit_rdpcm_enabled_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(19usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_explicit_rdpcm_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(19usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn explicit_rdpcm_enabled_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                19usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_explicit_rdpcm_enabled_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                19usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn extended_precision_processing_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(20usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_extended_precision_processing_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(20usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn extended_precision_processing_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                20usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_extended_precision_processing_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                20usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn intra_smoothing_disabled_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(21usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_intra_smoothing_disabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(21usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn intra_smoothing_disabled_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                21usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_intra_smoothing_disabled_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                21usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn high_precision_offsets_enabled_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(22usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_high_precision_offsets_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(22usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn high_precision_offsets_enabled_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                22usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_high_precision_offsets_enabled_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                22usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn persistent_rice_adaptation_enabled_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(23usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_persistent_rice_adaptation_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(23usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn persistent_rice_adaptation_enabled_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                23usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_persistent_rice_adaptation_enabled_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                23usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn cabac_bypass_alignment_enabled_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(24usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_cabac_bypass_alignment_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(24usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn cabac_bypass_alignment_enabled_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                24usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_cabac_bypass_alignment_enabled_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                24usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn sps_scc_extension_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(25usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sps_scc_extension_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(25usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn sps_scc_extension_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                25usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_sps_scc_extension_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                25usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn sps_curr_pic_ref_enabled_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(26usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sps_curr_pic_ref_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(26usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn sps_curr_pic_ref_enabled_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                26usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_sps_curr_pic_ref_enabled_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                26usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn palette_mode_enabled_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(27usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_palette_mode_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(27usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn palette_mode_enabled_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                27usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_palette_mode_enabled_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                27usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn sps_palette_predictor_initializers_present_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(28usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sps_palette_predictor_initializers_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(28usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn sps_palette_predictor_initializers_present_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                28usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_sps_palette_predictor_initializers_present_flag_raw(
        this: *mut Self,
        val: u32,
    ) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                28usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn intra_boundary_filtering_disabled_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(29usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_intra_boundary_filtering_disabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(29usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn intra_boundary_filtering_disabled_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                29usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_intra_boundary_filtering_disabled_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                29usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        sps_temporal_id_nesting_flag: u32,
        separate_colour_plane_flag: u32,
        conformance_window_flag: u32,
        sps_sub_layer_ordering_info_present_flag: u32,
        scaling_list_enabled_flag: u32,
        sps_scaling_list_data_present_flag: u32,
        amp_enabled_flag: u32,
        sample_adaptive_offset_enabled_flag: u32,
        pcm_enabled_flag: u32,
        pcm_loop_filter_disabled_flag: u32,
        long_term_ref_pics_present_flag: u32,
        sps_temporal_mvp_enabled_flag: u32,
        strong_intra_smoothing_enabled_flag: u32,
        vui_parameters_present_flag: u32,
        sps_extension_present_flag: u32,
        sps_range_extension_flag: u32,
        transform_skip_rotation_enabled_flag: u32,
        transform_skip_context_enabled_flag: u32,
        implicit_rdpcm_enabled_flag: u32,
        explicit_rdpcm_enabled_flag: u32,
        extended_precision_processing_flag: u32,
        intra_smoothing_disabled_flag: u32,
        high_precision_offsets_enabled_flag: u32,
        persistent_rice_adaptation_enabled_flag: u32,
        cabac_bypass_alignment_enabled_flag: u32,
        sps_scc_extension_flag: u32,
        sps_curr_pic_ref_enabled_flag: u32,
        palette_mode_enabled_flag: u32,
        sps_palette_predictor_initializers_present_flag: u32,
        intra_boundary_filtering_disabled_flag: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let sps_temporal_id_nesting_flag: u32 =
                unsafe { ::core::mem::transmute(sps_temporal_id_nesting_flag) };
            sps_temporal_id_nesting_flag as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let separate_colour_plane_flag: u32 =
                unsafe { ::core::mem::transmute(separate_colour_plane_flag) };
            separate_colour_plane_flag as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let conformance_window_flag: u32 =
                unsafe { ::core::mem::transmute(conformance_window_flag) };
            conformance_window_flag as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let sps_sub_layer_ordering_info_present_flag: u32 =
                unsafe { ::core::mem::transmute(sps_sub_layer_ordering_info_present_flag) };
            sps_sub_layer_ordering_info_present_flag as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let scaling_list_enabled_flag: u32 =
                unsafe { ::core::mem::transmute(scaling_list_enabled_flag) };
            scaling_list_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let sps_scaling_list_data_present_flag: u32 =
                unsafe { ::core::mem::transmute(sps_scaling_list_data_present_flag) };
            sps_scaling_list_data_present_flag as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let amp_enabled_flag: u32 = unsafe { ::core::mem::transmute(amp_enabled_flag) };
            amp_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let sample_adaptive_offset_enabled_flag: u32 =
                unsafe { ::core::mem::transmute(sample_adaptive_offset_enabled_flag) };
            sample_adaptive_offset_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let pcm_enabled_flag: u32 = unsafe { ::core::mem::transmute(pcm_enabled_flag) };
            pcm_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let pcm_loop_filter_disabled_flag: u32 =
                unsafe { ::core::mem::transmute(pcm_loop_filter_disabled_flag) };
            pcm_loop_filter_disabled_flag as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let long_term_ref_pics_present_flag: u32 =
                unsafe { ::core::mem::transmute(long_term_ref_pics_present_flag) };
            long_term_ref_pics_present_flag as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let sps_temporal_mvp_enabled_flag: u32 =
                unsafe { ::core::mem::transmute(sps_temporal_mvp_enabled_flag) };
            sps_temporal_mvp_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let strong_intra_smoothing_enabled_flag: u32 =
                unsafe { ::core::mem::transmute(strong_intra_smoothing_enabled_flag) };
            strong_intra_smoothing_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let vui_parameters_present_flag: u32 =
                unsafe { ::core::mem::transmute(vui_parameters_present_flag) };
            vui_parameters_present_flag as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let sps_extension_present_flag: u32 =
                unsafe { ::core::mem::transmute(sps_extension_present_flag) };
            sps_extension_present_flag as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let sps_range_extension_flag: u32 =
                unsafe { ::core::mem::transmute(sps_range_extension_flag) };
            sps_range_extension_flag as u64
        });
        __bindgen_bitfield_unit.set(16usize, 1u8, {
            let transform_skip_rotation_enabled_flag: u32 =
                unsafe { ::core::mem::transmute(transform_skip_rotation_enabled_flag) };
            transform_skip_rotation_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(17usize, 1u8, {
            let transform_skip_context_enabled_flag: u32 =
                unsafe { ::core::mem::transmute(transform_skip_context_enabled_flag) };
            transform_skip_context_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(18usize, 1u8, {
            let implicit_rdpcm_enabled_flag: u32 =
                unsafe { ::core::mem::transmute(implicit_rdpcm_enabled_flag) };
            implicit_rdpcm_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(19usize, 1u8, {
            let explicit_rdpcm_enabled_flag: u32 =
                unsafe { ::core::mem::transmute(explicit_rdpcm_enabled_flag) };
            explicit_rdpcm_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(20usize, 1u8, {
            let extended_precision_processing_flag: u32 =
                unsafe { ::core::mem::transmute(extended_precision_processing_flag) };
            extended_precision_processing_flag as u64
        });
        __bindgen_bitfield_unit.set(21usize, 1u8, {
            let intra_smoothing_disabled_flag: u32 =
                unsafe { ::core::mem::transmute(intra_smoothing_disabled_flag) };
            intra_smoothing_disabled_flag as u64
        });
        __bindgen_bitfield_unit.set(22usize, 1u8, {
            let high_precision_offsets_enabled_flag: u32 =
                unsafe { ::core::mem::transmute(high_precision_offsets_enabled_flag) };
            high_precision_offsets_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(23usize, 1u8, {
            let persistent_rice_adaptation_enabled_flag: u32 =
                unsafe { ::core::mem::transmute(persistent_rice_adaptation_enabled_flag) };
            persistent_rice_adaptation_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(24usize, 1u8, {
            let cabac_bypass_alignment_enabled_flag: u32 =
                unsafe { ::core::mem::transmute(cabac_bypass_alignment_enabled_flag) };
            cabac_bypass_alignment_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(25usize, 1u8, {
            let sps_scc_extension_flag: u32 =
                unsafe { ::core::mem::transmute(sps_scc_extension_flag) };
            sps_scc_extension_flag as u64
        });
        __bindgen_bitfield_unit.set(26usize, 1u8, {
            let sps_curr_pic_ref_enabled_flag: u32 =
                unsafe { ::core::mem::transmute(sps_curr_pic_ref_enabled_flag) };
            sps_curr_pic_ref_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(27usize, 1u8, {
            let palette_mode_enabled_flag: u32 =
                unsafe { ::core::mem::transmute(palette_mode_enabled_flag) };
            palette_mode_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(28usize, 1u8, {
            let sps_palette_predictor_initializers_present_flag: u32 =
                unsafe { ::core::mem::transmute(sps_palette_predictor_initializers_present_flag) };
            sps_palette_predictor_initializers_present_flag as u64
        });
        __bindgen_bitfield_unit.set(29usize, 1u8, {
            let intra_boundary_filtering_disabled_flag: u32 =
                unsafe { ::core::mem::transmute(intra_boundary_filtering_disabled_flag) };
            intra_boundary_filtering_disabled_flag as u64
        });
        __bindgen_bitfield_unit
    }
}
impl StdVideoH265ShortTermRefPicSetFlags {
    #[inline]
    pub fn inter_ref_pic_set_prediction_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_inter_ref_pic_set_prediction_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn inter_ref_pic_set_prediction_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_inter_ref_pic_set_prediction_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn delta_rps_sign(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_delta_rps_sign(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn delta_rps_sign_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_delta_rps_sign_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        inter_ref_pic_set_prediction_flag: u32,
        delta_rps_sign: u32,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let inter_ref_pic_set_prediction_flag: u32 =
                unsafe { ::core::mem::transmute(inter_ref_pic_set_prediction_flag) };
            inter_ref_pic_set_prediction_flag as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let delta_rps_sign: u32 = unsafe { ::core::mem::transmute(delta_rps_sign) };
            delta_rps_sign as u64
        });
        __bindgen_bitfield_unit
    }
}
impl StdVideoH265PpsFlags {
    #[inline]
    pub fn dependent_slice_segments_enabled_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_dependent_slice_segments_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn dependent_slice_segments_enabled_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_dependent_slice_segments_enabled_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn output_flag_present_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_output_flag_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn output_flag_present_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_output_flag_present_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn sign_data_hiding_enabled_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sign_data_hiding_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn sign_data_hiding_enabled_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_sign_data_hiding_enabled_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn cabac_init_present_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_cabac_init_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn cabac_init_present_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_cabac_init_present_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn constrained_intra_pred_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_constrained_intra_pred_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn constrained_intra_pred_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_constrained_intra_pred_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn transform_skip_enabled_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_transform_skip_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn transform_skip_enabled_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                5usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_transform_skip_enabled_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                5usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn cu_qp_delta_enabled_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_cu_qp_delta_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn cu_qp_delta_enabled_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                6usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_cu_qp_delta_enabled_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                6usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn pps_slice_chroma_qp_offsets_present_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_pps_slice_chroma_qp_offsets_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn pps_slice_chroma_qp_offsets_present_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                7usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_pps_slice_chroma_qp_offsets_present_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                7usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn weighted_pred_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_weighted_pred_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn weighted_pred_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                8usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_weighted_pred_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                8usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn weighted_bipred_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_weighted_bipred_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn weighted_bipred_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                9usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_weighted_bipred_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                9usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn transquant_bypass_enabled_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_transquant_bypass_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn transquant_bypass_enabled_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                10usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_transquant_bypass_enabled_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                10usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn tiles_enabled_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tiles_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn tiles_enabled_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                11usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_tiles_enabled_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                11usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn entropy_coding_sync_enabled_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_entropy_coding_sync_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn entropy_coding_sync_enabled_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                12usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_entropy_coding_sync_enabled_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                12usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn uniform_spacing_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_uniform_spacing_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn uniform_spacing_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                13usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_uniform_spacing_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                13usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn loop_filter_across_tiles_enabled_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_loop_filter_across_tiles_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn loop_filter_across_tiles_enabled_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                14usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_loop_filter_across_tiles_enabled_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                14usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn pps_loop_filter_across_slices_enabled_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_pps_loop_filter_across_slices_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn pps_loop_filter_across_slices_enabled_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                15usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_pps_loop_filter_across_slices_enabled_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                15usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn deblocking_filter_control_present_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_deblocking_filter_control_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn deblocking_filter_control_present_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                16usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_deblocking_filter_control_present_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                16usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn deblocking_filter_override_enabled_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(17usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_deblocking_filter_override_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(17usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn deblocking_filter_override_enabled_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                17usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_deblocking_filter_override_enabled_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                17usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn pps_deblocking_filter_disabled_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(18usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_pps_deblocking_filter_disabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(18usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn pps_deblocking_filter_disabled_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                18usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_pps_deblocking_filter_disabled_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                18usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn pps_scaling_list_data_present_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(19usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_pps_scaling_list_data_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(19usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn pps_scaling_list_data_present_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                19usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_pps_scaling_list_data_present_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                19usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn lists_modification_present_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(20usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_lists_modification_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(20usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn lists_modification_present_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                20usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_lists_modification_present_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                20usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn slice_segment_header_extension_present_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(21usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_slice_segment_header_extension_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(21usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn slice_segment_header_extension_present_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                21usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_slice_segment_header_extension_present_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                21usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn pps_extension_present_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(22usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_pps_extension_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(22usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn pps_extension_present_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                22usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_pps_extension_present_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                22usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn cross_component_prediction_enabled_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(23usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_cross_component_prediction_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(23usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn cross_component_prediction_enabled_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                23usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_cross_component_prediction_enabled_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                23usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn chroma_qp_offset_list_enabled_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(24usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_chroma_qp_offset_list_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(24usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn chroma_qp_offset_list_enabled_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                24usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_chroma_qp_offset_list_enabled_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                24usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn pps_curr_pic_ref_enabled_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(25usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_pps_curr_pic_ref_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(25usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn pps_curr_pic_ref_enabled_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                25usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_pps_curr_pic_ref_enabled_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                25usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn residual_adaptive_colour_transform_enabled_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(26usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_residual_adaptive_colour_transform_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(26usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn residual_adaptive_colour_transform_enabled_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                26usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_residual_adaptive_colour_transform_enabled_flag_raw(
        this: *mut Self,
        val: u32,
    ) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                26usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn pps_slice_act_qp_offsets_present_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(27usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_pps_slice_act_qp_offsets_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(27usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn pps_slice_act_qp_offsets_present_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                27usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_pps_slice_act_qp_offsets_present_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                27usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn pps_palette_predictor_initializers_present_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(28usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_pps_palette_predictor_initializers_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(28usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn pps_palette_predictor_initializers_present_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                28usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_pps_palette_predictor_initializers_present_flag_raw(
        this: *mut Self,
        val: u32,
    ) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                28usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn monochrome_palette_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(29usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_monochrome_palette_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(29usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn monochrome_palette_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                29usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_monochrome_palette_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                29usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn pps_range_extension_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(30usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_pps_range_extension_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(30usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn pps_range_extension_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                30usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_pps_range_extension_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                30usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        dependent_slice_segments_enabled_flag: u32,
        output_flag_present_flag: u32,
        sign_data_hiding_enabled_flag: u32,
        cabac_init_present_flag: u32,
        constrained_intra_pred_flag: u32,
        transform_skip_enabled_flag: u32,
        cu_qp_delta_enabled_flag: u32,
        pps_slice_chroma_qp_offsets_present_flag: u32,
        weighted_pred_flag: u32,
        weighted_bipred_flag: u32,
        transquant_bypass_enabled_flag: u32,
        tiles_enabled_flag: u32,
        entropy_coding_sync_enabled_flag: u32,
        uniform_spacing_flag: u32,
        loop_filter_across_tiles_enabled_flag: u32,
        pps_loop_filter_across_slices_enabled_flag: u32,
        deblocking_filter_control_present_flag: u32,
        deblocking_filter_override_enabled_flag: u32,
        pps_deblocking_filter_disabled_flag: u32,
        pps_scaling_list_data_present_flag: u32,
        lists_modification_present_flag: u32,
        slice_segment_header_extension_present_flag: u32,
        pps_extension_present_flag: u32,
        cross_component_prediction_enabled_flag: u32,
        chroma_qp_offset_list_enabled_flag: u32,
        pps_curr_pic_ref_enabled_flag: u32,
        residual_adaptive_colour_transform_enabled_flag: u32,
        pps_slice_act_qp_offsets_present_flag: u32,
        pps_palette_predictor_initializers_present_flag: u32,
        monochrome_palette_flag: u32,
        pps_range_extension_flag: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let dependent_slice_segments_enabled_flag: u32 =
                unsafe { ::core::mem::transmute(dependent_slice_segments_enabled_flag) };
            dependent_slice_segments_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let output_flag_present_flag: u32 =
                unsafe { ::core::mem::transmute(output_flag_present_flag) };
            output_flag_present_flag as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let sign_data_hiding_enabled_flag: u32 =
                unsafe { ::core::mem::transmute(sign_data_hiding_enabled_flag) };
            sign_data_hiding_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let cabac_init_present_flag: u32 =
                unsafe { ::core::mem::transmute(cabac_init_present_flag) };
            cabac_init_present_flag as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let constrained_intra_pred_flag: u32 =
                unsafe { ::core::mem::transmute(constrained_intra_pred_flag) };
            constrained_intra_pred_flag as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let transform_skip_enabled_flag: u32 =
                unsafe { ::core::mem::transmute(transform_skip_enabled_flag) };
            transform_skip_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let cu_qp_delta_enabled_flag: u32 =
                unsafe { ::core::mem::transmute(cu_qp_delta_enabled_flag) };
            cu_qp_delta_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let pps_slice_chroma_qp_offsets_present_flag: u32 =
                unsafe { ::core::mem::transmute(pps_slice_chroma_qp_offsets_present_flag) };
            pps_slice_chroma_qp_offsets_present_flag as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let weighted_pred_flag: u32 = unsafe { ::core::mem::transmute(weighted_pred_flag) };
            weighted_pred_flag as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let weighted_bipred_flag: u32 = unsafe { ::core::mem::transmute(weighted_bipred_flag) };
            weighted_bipred_flag as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let transquant_bypass_enabled_flag: u32 =
                unsafe { ::core::mem::transmute(transquant_bypass_enabled_flag) };
            transquant_bypass_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let tiles_enabled_flag: u32 = unsafe { ::core::mem::transmute(tiles_enabled_flag) };
            tiles_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let entropy_coding_sync_enabled_flag: u32 =
                unsafe { ::core::mem::transmute(entropy_coding_sync_enabled_flag) };
            entropy_coding_sync_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let uniform_spacing_flag: u32 = unsafe { ::core::mem::transmute(uniform_spacing_flag) };
            uniform_spacing_flag as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let loop_filter_across_tiles_enabled_flag: u32 =
                unsafe { ::core::mem::transmute(loop_filter_across_tiles_enabled_flag) };
            loop_filter_across_tiles_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let pps_loop_filter_across_slices_enabled_flag: u32 =
                unsafe { ::core::mem::transmute(pps_loop_filter_across_slices_enabled_flag) };
            pps_loop_filter_across_slices_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(16usize, 1u8, {
            let deblocking_filter_control_present_flag: u32 =
                unsafe { ::core::mem::transmute(deblocking_filter_control_present_flag) };
            deblocking_filter_control_present_flag as u64
        });
        __bindgen_bitfield_unit.set(17usize, 1u8, {
            let deblocking_filter_override_enabled_flag: u32 =
                unsafe { ::core::mem::transmute(deblocking_filter_override_enabled_flag) };
            deblocking_filter_override_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(18usize, 1u8, {
            let pps_deblocking_filter_disabled_flag: u32 =
                unsafe { ::core::mem::transmute(pps_deblocking_filter_disabled_flag) };
            pps_deblocking_filter_disabled_flag as u64
        });
        __bindgen_bitfield_unit.set(19usize, 1u8, {
            let pps_scaling_list_data_present_flag: u32 =
                unsafe { ::core::mem::transmute(pps_scaling_list_data_present_flag) };
            pps_scaling_list_data_present_flag as u64
        });
        __bindgen_bitfield_unit.set(20usize, 1u8, {
            let lists_modification_present_flag: u32 =
                unsafe { ::core::mem::transmute(lists_modification_present_flag) };
            lists_modification_present_flag as u64
        });
        __bindgen_bitfield_unit.set(21usize, 1u8, {
            let slice_segment_header_extension_present_flag: u32 =
                unsafe { ::core::mem::transmute(slice_segment_header_extension_present_flag) };
            slice_segment_header_extension_present_flag as u64
        });
        __bindgen_bitfield_unit.set(22usize, 1u8, {
            let pps_extension_present_flag: u32 =
                unsafe { ::core::mem::transmute(pps_extension_present_flag) };
            pps_extension_present_flag as u64
        });
        __bindgen_bitfield_unit.set(23usize, 1u8, {
            let cross_component_prediction_enabled_flag: u32 =
                unsafe { ::core::mem::transmute(cross_component_prediction_enabled_flag) };
            cross_component_prediction_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(24usize, 1u8, {
            let chroma_qp_offset_list_enabled_flag: u32 =
                unsafe { ::core::mem::transmute(chroma_qp_offset_list_enabled_flag) };
            chroma_qp_offset_list_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(25usize, 1u8, {
            let pps_curr_pic_ref_enabled_flag: u32 =
                unsafe { ::core::mem::transmute(pps_curr_pic_ref_enabled_flag) };
            pps_curr_pic_ref_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(26usize, 1u8, {
            let residual_adaptive_colour_transform_enabled_flag: u32 =
                unsafe { ::core::mem::transmute(residual_adaptive_colour_transform_enabled_flag) };
            residual_adaptive_colour_transform_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(27usize, 1u8, {
            let pps_slice_act_qp_offsets_present_flag: u32 =
                unsafe { ::core::mem::transmute(pps_slice_act_qp_offsets_present_flag) };
            pps_slice_act_qp_offsets_present_flag as u64
        });
        __bindgen_bitfield_unit.set(28usize, 1u8, {
            let pps_palette_predictor_initializers_present_flag: u32 =
                unsafe { ::core::mem::transmute(pps_palette_predictor_initializers_present_flag) };
            pps_palette_predictor_initializers_present_flag as u64
        });
        __bindgen_bitfield_unit.set(29usize, 1u8, {
            let monochrome_palette_flag: u32 =
                unsafe { ::core::mem::transmute(monochrome_palette_flag) };
            monochrome_palette_flag as u64
        });
        __bindgen_bitfield_unit.set(30usize, 1u8, {
            let pps_range_extension_flag: u32 =
                unsafe { ::core::mem::transmute(pps_range_extension_flag) };
            pps_range_extension_flag as u64
        });
        __bindgen_bitfield_unit
    }
}
impl StdVideoEncodeH265SliceSegmentHeaderFlags {
    #[inline]
    pub fn first_slice_segment_in_pic_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_first_slice_segment_in_pic_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn first_slice_segment_in_pic_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_first_slice_segment_in_pic_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn dependent_slice_segment_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_dependent_slice_segment_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn dependent_slice_segment_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_dependent_slice_segment_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn slice_sao_luma_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_slice_sao_luma_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn slice_sao_luma_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_slice_sao_luma_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn slice_sao_chroma_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_slice_sao_chroma_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn slice_sao_chroma_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_slice_sao_chroma_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn num_ref_idx_active_override_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_num_ref_idx_active_override_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn num_ref_idx_active_override_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_num_ref_idx_active_override_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn mvd_l1_zero_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_mvd_l1_zero_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn mvd_l1_zero_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                5usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_mvd_l1_zero_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                5usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn cabac_init_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_cabac_init_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn cabac_init_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                6usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_cabac_init_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                6usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn cu_chroma_qp_offset_enabled_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_cu_chroma_qp_offset_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn cu_chroma_qp_offset_enabled_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                7usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_cu_chroma_qp_offset_enabled_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                7usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn deblocking_filter_override_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_deblocking_filter_override_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn deblocking_filter_override_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                8usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_deblocking_filter_override_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                8usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn slice_deblocking_filter_disabled_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_slice_deblocking_filter_disabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn slice_deblocking_filter_disabled_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                9usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_slice_deblocking_filter_disabled_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                9usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn collocated_from_l0_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_collocated_from_l0_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn collocated_from_l0_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                10usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_collocated_from_l0_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                10usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn slice_loop_filter_across_slices_enabled_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_slice_loop_filter_across_slices_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn slice_loop_filter_across_slices_enabled_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                11usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_slice_loop_filter_across_slices_enabled_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                11usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 20u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 20u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn reserved_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                12usize,
                20u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_reserved_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                12usize,
                20u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        first_slice_segment_in_pic_flag: u32,
        dependent_slice_segment_flag: u32,
        slice_sao_luma_flag: u32,
        slice_sao_chroma_flag: u32,
        num_ref_idx_active_override_flag: u32,
        mvd_l1_zero_flag: u32,
        cabac_init_flag: u32,
        cu_chroma_qp_offset_enabled_flag: u32,
        deblocking_filter_override_flag: u32,
        slice_deblocking_filter_disabled_flag: u32,
        collocated_from_l0_flag: u32,
        slice_loop_filter_across_slices_enabled_flag: u32,
        reserved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let first_slice_segment_in_pic_flag: u32 =
                unsafe { ::core::mem::transmute(first_slice_segment_in_pic_flag) };
            first_slice_segment_in_pic_flag as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let dependent_slice_segment_flag: u32 =
                unsafe { ::core::mem::transmute(dependent_slice_segment_flag) };
            dependent_slice_segment_flag as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let slice_sao_luma_flag: u32 = unsafe { ::core::mem::transmute(slice_sao_luma_flag) };
            slice_sao_luma_flag as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let slice_sao_chroma_flag: u32 =
                unsafe { ::core::mem::transmute(slice_sao_chroma_flag) };
            slice_sao_chroma_flag as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let num_ref_idx_active_override_flag: u32 =
                unsafe { ::core::mem::transmute(num_ref_idx_active_override_flag) };
            num_ref_idx_active_override_flag as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let mvd_l1_zero_flag: u32 = unsafe { ::core::mem::transmute(mvd_l1_zero_flag) };
            mvd_l1_zero_flag as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let cabac_init_flag: u32 = unsafe { ::core::mem::transmute(cabac_init_flag) };
            cabac_init_flag as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let cu_chroma_qp_offset_enabled_flag: u32 =
                unsafe { ::core::mem::transmute(cu_chroma_qp_offset_enabled_flag) };
            cu_chroma_qp_offset_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let deblocking_filter_override_flag: u32 =
                unsafe { ::core::mem::transmute(deblocking_filter_override_flag) };
            deblocking_filter_override_flag as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let slice_deblocking_filter_disabled_flag: u32 =
                unsafe { ::core::mem::transmute(slice_deblocking_filter_disabled_flag) };
            slice_deblocking_filter_disabled_flag as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let collocated_from_l0_flag: u32 =
                unsafe { ::core::mem::transmute(collocated_from_l0_flag) };
            collocated_from_l0_flag as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let slice_loop_filter_across_slices_enabled_flag: u32 =
                unsafe { ::core::mem::transmute(slice_loop_filter_across_slices_enabled_flag) };
            slice_loop_filter_across_slices_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(12usize, 20u8, {
            let reserved: u32 = unsafe { ::core::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
impl StdVideoEncodeH265ReferenceListsInfoFlags {
    #[inline]
    pub fn ref_pic_list_modification_flag_l0(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ref_pic_list_modification_flag_l0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn ref_pic_list_modification_flag_l0_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_ref_pic_list_modification_flag_l0_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn ref_pic_list_modification_flag_l1(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ref_pic_list_modification_flag_l1(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn ref_pic_list_modification_flag_l1_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_ref_pic_list_modification_flag_l1_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 30u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 30u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn reserved_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                30u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_reserved_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                30u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        ref_pic_list_modification_flag_l0: u32,
        ref_pic_list_modification_flag_l1: u32,
        reserved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let ref_pic_list_modification_flag_l0: u32 =
                unsafe { ::core::mem::transmute(ref_pic_list_modification_flag_l0) };
            ref_pic_list_modification_flag_l0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let ref_pic_list_modification_flag_l1: u32 =
                unsafe { ::core::mem::transmute(ref_pic_list_modification_flag_l1) };
            ref_pic_list_modification_flag_l1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 30u8, {
            let reserved: u32 = unsafe { ::core::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
impl StdVideoEncodeH265PictureInfoFlags {
    #[inline]
    pub fn is_reference(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_is_reference(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn is_reference_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_is_reference_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn IrapPicFlag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_IrapPicFlag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn IrapPicFlag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_IrapPicFlag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn used_for_long_term_reference(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_used_for_long_term_reference(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn used_for_long_term_reference_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_used_for_long_term_reference_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn discardable_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_discardable_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn discardable_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_discardable_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn cross_layer_bla_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_cross_layer_bla_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn cross_layer_bla_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_cross_layer_bla_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn pic_output_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_pic_output_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn pic_output_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                5usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_pic_output_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                5usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn no_output_of_prior_pics_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_no_output_of_prior_pics_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn no_output_of_prior_pics_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                6usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_no_output_of_prior_pics_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                6usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn short_term_ref_pic_set_sps_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_short_term_ref_pic_set_sps_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn short_term_ref_pic_set_sps_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                7usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_short_term_ref_pic_set_sps_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                7usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn slice_temporal_mvp_enabled_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_slice_temporal_mvp_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn slice_temporal_mvp_enabled_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                8usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_slice_temporal_mvp_enabled_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                8usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 23u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 23u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn reserved_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                9usize,
                23u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_reserved_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                9usize,
                23u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        is_reference: u32,
        IrapPicFlag: u32,
        used_for_long_term_reference: u32,
        discardable_flag: u32,
        cross_layer_bla_flag: u32,
        pic_output_flag: u32,
        no_output_of_prior_pics_flag: u32,
        short_term_ref_pic_set_sps_flag: u32,
        slice_temporal_mvp_enabled_flag: u32,
        reserved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let is_reference: u32 = unsafe { ::core::mem::transmute(is_reference) };
            is_reference as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let IrapPicFlag: u32 = unsafe { ::core::mem::transmute(IrapPicFlag) };
            IrapPicFlag as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let used_for_long_term_reference: u32 =
                unsafe { ::core::mem::transmute(used_for_long_term_reference) };
            used_for_long_term_reference as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let discardable_flag: u32 = unsafe { ::core::mem::transmute(discardable_flag) };
            discardable_flag as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let cross_layer_bla_flag: u32 = unsafe { ::core::mem::transmute(cross_layer_bla_flag) };
            cross_layer_bla_flag as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let pic_output_flag: u32 = unsafe { ::core::mem::transmute(pic_output_flag) };
            pic_output_flag as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let no_output_of_prior_pics_flag: u32 =
                unsafe { ::core::mem::transmute(no_output_of_prior_pics_flag) };
            no_output_of_prior_pics_flag as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let short_term_ref_pic_set_sps_flag: u32 =
                unsafe { ::core::mem::transmute(short_term_ref_pic_set_sps_flag) };
            short_term_ref_pic_set_sps_flag as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let slice_temporal_mvp_enabled_flag: u32 =
                unsafe { ::core::mem::transmute(slice_temporal_mvp_enabled_flag) };
            slice_temporal_mvp_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(9usize, 23u8, {
            let reserved: u32 = unsafe { ::core::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
impl StdVideoEncodeH265ReferenceInfoFlags {
    #[inline]
    pub fn used_for_long_term_reference(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_used_for_long_term_reference(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn used_for_long_term_reference_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_used_for_long_term_reference_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn unused_for_reference(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_unused_for_reference(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn unused_for_reference_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_unused_for_reference_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 30u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 30u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn reserved_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                30u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_reserved_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                30u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        used_for_long_term_reference: u32,
        unused_for_reference: u32,
        reserved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let used_for_long_term_reference: u32 =
                unsafe { ::core::mem::transmute(used_for_long_term_reference) };
            used_for_long_term_reference as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let unused_for_reference: u32 = unsafe { ::core::mem::transmute(unused_for_reference) };
            unused_for_reference as u64
        });
        __bindgen_bitfield_unit.set(2usize, 30u8, {
            let reserved: u32 = unsafe { ::core::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
impl StdVideoDecodeH264PictureInfoFlags {
    #[inline]
    pub fn field_pic_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_field_pic_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn field_pic_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_field_pic_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn is_intra(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_is_intra(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn is_intra_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_is_intra_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn IdrPicFlag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_IdrPicFlag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn IdrPicFlag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_IdrPicFlag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn bottom_field_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_bottom_field_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn bottom_field_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_bottom_field_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn is_reference(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_is_reference(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn is_reference_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_is_reference_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn complementary_field_pair(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_complementary_field_pair(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn complementary_field_pair_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                5usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_complementary_field_pair_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                5usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        field_pic_flag: u32,
        is_intra: u32,
        IdrPicFlag: u32,
        bottom_field_flag: u32,
        is_reference: u32,
        complementary_field_pair: u32,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let field_pic_flag: u32 = unsafe { ::core::mem::transmute(field_pic_flag) };
            field_pic_flag as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let is_intra: u32 = unsafe { ::core::mem::transmute(is_intra) };
            is_intra as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let IdrPicFlag: u32 = unsafe { ::core::mem::transmute(IdrPicFlag) };
            IdrPicFlag as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bottom_field_flag: u32 = unsafe { ::core::mem::transmute(bottom_field_flag) };
            bottom_field_flag as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let is_reference: u32 = unsafe { ::core::mem::transmute(is_reference) };
            is_reference as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let complementary_field_pair: u32 =
                unsafe { ::core::mem::transmute(complementary_field_pair) };
            complementary_field_pair as u64
        });
        __bindgen_bitfield_unit
    }
}
impl StdVideoDecodeH264ReferenceInfoFlags {
    #[inline]
    pub fn top_field_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_top_field_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn top_field_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_top_field_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn bottom_field_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_bottom_field_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn bottom_field_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_bottom_field_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn used_for_long_term_reference(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_used_for_long_term_reference(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn used_for_long_term_reference_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_used_for_long_term_reference_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn is_non_existing(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_is_non_existing(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn is_non_existing_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_is_non_existing_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        top_field_flag: u32,
        bottom_field_flag: u32,
        used_for_long_term_reference: u32,
        is_non_existing: u32,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let top_field_flag: u32 = unsafe { ::core::mem::transmute(top_field_flag) };
            top_field_flag as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bottom_field_flag: u32 = unsafe { ::core::mem::transmute(bottom_field_flag) };
            bottom_field_flag as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let used_for_long_term_reference: u32 =
                unsafe { ::core::mem::transmute(used_for_long_term_reference) };
            used_for_long_term_reference as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let is_non_existing: u32 = unsafe { ::core::mem::transmute(is_non_existing) };
            is_non_existing as u64
        });
        __bindgen_bitfield_unit
    }
}
impl StdVideoDecodeH265PictureInfoFlags {
    #[inline]
    pub fn IrapPicFlag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_IrapPicFlag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn IrapPicFlag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_IrapPicFlag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn IdrPicFlag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_IdrPicFlag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn IdrPicFlag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_IdrPicFlag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn IsReference(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_IsReference(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn IsReference_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_IsReference_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn short_term_ref_pic_set_sps_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_short_term_ref_pic_set_sps_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn short_term_ref_pic_set_sps_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_short_term_ref_pic_set_sps_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        IrapPicFlag: u32,
        IdrPicFlag: u32,
        IsReference: u32,
        short_term_ref_pic_set_sps_flag: u32,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let IrapPicFlag: u32 = unsafe { ::core::mem::transmute(IrapPicFlag) };
            IrapPicFlag as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let IdrPicFlag: u32 = unsafe { ::core::mem::transmute(IdrPicFlag) };
            IdrPicFlag as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let IsReference: u32 = unsafe { ::core::mem::transmute(IsReference) };
            IsReference as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let short_term_ref_pic_set_sps_flag: u32 =
                unsafe { ::core::mem::transmute(short_term_ref_pic_set_sps_flag) };
            short_term_ref_pic_set_sps_flag as u64
        });
        __bindgen_bitfield_unit
    }
}
impl StdVideoDecodeH265ReferenceInfoFlags {
    #[inline]
    pub fn used_for_long_term_reference(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_used_for_long_term_reference(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn used_for_long_term_reference_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_used_for_long_term_reference_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn unused_for_reference(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_unused_for_reference(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn unused_for_reference_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_unused_for_reference_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        used_for_long_term_reference: u32,
        unused_for_reference: u32,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let used_for_long_term_reference: u32 =
                unsafe { ::core::mem::transmute(used_for_long_term_reference) };
            used_for_long_term_reference as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let unused_for_reference: u32 = unsafe { ::core::mem::transmute(unused_for_reference) };
            unused_for_reference as u64
        });
        __bindgen_bitfield_unit
    }
}
impl StdVideoAV1ColorConfigFlags {
    #[inline]
    pub fn mono_chrome(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_mono_chrome(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn mono_chrome_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_mono_chrome_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn color_range(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_color_range(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn color_range_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_color_range_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn separate_uv_delta_q(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_separate_uv_delta_q(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn separate_uv_delta_q_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_separate_uv_delta_q_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn color_description_present_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_color_description_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn color_description_present_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_color_description_present_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 28u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 28u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn reserved_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                28u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_reserved_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                28u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        mono_chrome: u32,
        color_range: u32,
        separate_uv_delta_q: u32,
        color_description_present_flag: u32,
        reserved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let mono_chrome: u32 = unsafe { ::core::mem::transmute(mono_chrome) };
            mono_chrome as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let color_range: u32 = unsafe { ::core::mem::transmute(color_range) };
            color_range as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let separate_uv_delta_q: u32 = unsafe { ::core::mem::transmute(separate_uv_delta_q) };
            separate_uv_delta_q as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let color_description_present_flag: u32 =
                unsafe { ::core::mem::transmute(color_description_present_flag) };
            color_description_present_flag as u64
        });
        __bindgen_bitfield_unit.set(4usize, 28u8, {
            let reserved: u32 = unsafe { ::core::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
impl StdVideoAV1TimingInfoFlags {
    #[inline]
    pub fn equal_picture_interval(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_equal_picture_interval(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn equal_picture_interval_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_equal_picture_interval_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 31u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 31u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn reserved_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                31u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_reserved_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                31u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        equal_picture_interval: u32,
        reserved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let equal_picture_interval: u32 =
                unsafe { ::core::mem::transmute(equal_picture_interval) };
            equal_picture_interval as u64
        });
        __bindgen_bitfield_unit.set(1usize, 31u8, {
            let reserved: u32 = unsafe { ::core::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
impl StdVideoAV1LoopFilterFlags {
    #[inline]
    pub fn loop_filter_delta_enabled(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_loop_filter_delta_enabled(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn loop_filter_delta_enabled_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_loop_filter_delta_enabled_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn loop_filter_delta_update(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_loop_filter_delta_update(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn loop_filter_delta_update_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_loop_filter_delta_update_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 30u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 30u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn reserved_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                30u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_reserved_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                30u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        loop_filter_delta_enabled: u32,
        loop_filter_delta_update: u32,
        reserved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let loop_filter_delta_enabled: u32 =
                unsafe { ::core::mem::transmute(loop_filter_delta_enabled) };
            loop_filter_delta_enabled as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let loop_filter_delta_update: u32 =
                unsafe { ::core::mem::transmute(loop_filter_delta_update) };
            loop_filter_delta_update as u64
        });
        __bindgen_bitfield_unit.set(2usize, 30u8, {
            let reserved: u32 = unsafe { ::core::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
impl StdVideoAV1QuantizationFlags {
    #[inline]
    pub fn using_qmatrix(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_using_qmatrix(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn using_qmatrix_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_using_qmatrix_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn diff_uv_delta(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_diff_uv_delta(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn diff_uv_delta_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_diff_uv_delta_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 30u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 30u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn reserved_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                30u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_reserved_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                30u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        using_qmatrix: u32,
        diff_uv_delta: u32,
        reserved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let using_qmatrix: u32 = unsafe { ::core::mem::transmute(using_qmatrix) };
            using_qmatrix as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let diff_uv_delta: u32 = unsafe { ::core::mem::transmute(diff_uv_delta) };
            diff_uv_delta as u64
        });
        __bindgen_bitfield_unit.set(2usize, 30u8, {
            let reserved: u32 = unsafe { ::core::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
impl StdVideoAV1TileInfoFlags {
    #[inline]
    pub fn uniform_tile_spacing_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_uniform_tile_spacing_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn uniform_tile_spacing_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_uniform_tile_spacing_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 31u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 31u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn reserved_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                31u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_reserved_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                31u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        uniform_tile_spacing_flag: u32,
        reserved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let uniform_tile_spacing_flag: u32 =
                unsafe { ::core::mem::transmute(uniform_tile_spacing_flag) };
            uniform_tile_spacing_flag as u64
        });
        __bindgen_bitfield_unit.set(1usize, 31u8, {
            let reserved: u32 = unsafe { ::core::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
impl StdVideoAV1FilmGrainFlags {
    #[inline]
    pub fn chroma_scaling_from_luma(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_chroma_scaling_from_luma(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn chroma_scaling_from_luma_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_chroma_scaling_from_luma_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn overlap_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_overlap_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn overlap_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_overlap_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn clip_to_restricted_range(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_clip_to_restricted_range(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn clip_to_restricted_range_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_clip_to_restricted_range_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn update_grain(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_update_grain(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn update_grain_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_update_grain_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 28u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 28u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn reserved_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                28u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_reserved_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                28u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        chroma_scaling_from_luma: u32,
        overlap_flag: u32,
        clip_to_restricted_range: u32,
        update_grain: u32,
        reserved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let chroma_scaling_from_luma: u32 =
                unsafe { ::core::mem::transmute(chroma_scaling_from_luma) };
            chroma_scaling_from_luma as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let overlap_flag: u32 = unsafe { ::core::mem::transmute(overlap_flag) };
            overlap_flag as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let clip_to_restricted_range: u32 =
                unsafe { ::core::mem::transmute(clip_to_restricted_range) };
            clip_to_restricted_range as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let update_grain: u32 = unsafe { ::core::mem::transmute(update_grain) };
            update_grain as u64
        });
        __bindgen_bitfield_unit.set(4usize, 28u8, {
            let reserved: u32 = unsafe { ::core::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
impl StdVideoAV1SequenceHeaderFlags {
    #[inline]
    pub fn still_picture(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_still_picture(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn still_picture_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_still_picture_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn reduced_still_picture_header(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_reduced_still_picture_header(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn reduced_still_picture_header_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_reduced_still_picture_header_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn use_128x128_superblock(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_use_128x128_superblock(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn use_128x128_superblock_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_use_128x128_superblock_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn enable_filter_intra(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_enable_filter_intra(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn enable_filter_intra_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_enable_filter_intra_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn enable_intra_edge_filter(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_enable_intra_edge_filter(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn enable_intra_edge_filter_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_enable_intra_edge_filter_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn enable_interintra_compound(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_enable_interintra_compound(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn enable_interintra_compound_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                5usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_enable_interintra_compound_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                5usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn enable_masked_compound(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_enable_masked_compound(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn enable_masked_compound_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                6usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_enable_masked_compound_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                6usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn enable_warped_motion(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_enable_warped_motion(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn enable_warped_motion_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                7usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_enable_warped_motion_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                7usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn enable_dual_filter(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_enable_dual_filter(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn enable_dual_filter_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                8usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_enable_dual_filter_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                8usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn enable_order_hint(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_enable_order_hint(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn enable_order_hint_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                9usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_enable_order_hint_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                9usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn enable_jnt_comp(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_enable_jnt_comp(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn enable_jnt_comp_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                10usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_enable_jnt_comp_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                10usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn enable_ref_frame_mvs(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_enable_ref_frame_mvs(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn enable_ref_frame_mvs_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                11usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_enable_ref_frame_mvs_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                11usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn frame_id_numbers_present_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_frame_id_numbers_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn frame_id_numbers_present_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                12usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_frame_id_numbers_present_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                12usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn enable_superres(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_enable_superres(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn enable_superres_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                13usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_enable_superres_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                13usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn enable_cdef(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_enable_cdef(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn enable_cdef_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                14usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_enable_cdef_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                14usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn enable_restoration(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_enable_restoration(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn enable_restoration_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                15usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_enable_restoration_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                15usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn film_grain_params_present(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_film_grain_params_present(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn film_grain_params_present_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                16usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_film_grain_params_present_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                16usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn timing_info_present_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(17usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_timing_info_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(17usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn timing_info_present_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                17usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_timing_info_present_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                17usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn initial_display_delay_present_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(18usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_initial_display_delay_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(18usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn initial_display_delay_present_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                18usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_initial_display_delay_present_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                18usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(19usize, 13u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(19usize, 13u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn reserved_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                19usize,
                13u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_reserved_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                19usize,
                13u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        still_picture: u32,
        reduced_still_picture_header: u32,
        use_128x128_superblock: u32,
        enable_filter_intra: u32,
        enable_intra_edge_filter: u32,
        enable_interintra_compound: u32,
        enable_masked_compound: u32,
        enable_warped_motion: u32,
        enable_dual_filter: u32,
        enable_order_hint: u32,
        enable_jnt_comp: u32,
        enable_ref_frame_mvs: u32,
        frame_id_numbers_present_flag: u32,
        enable_superres: u32,
        enable_cdef: u32,
        enable_restoration: u32,
        film_grain_params_present: u32,
        timing_info_present_flag: u32,
        initial_display_delay_present_flag: u32,
        reserved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let still_picture: u32 = unsafe { ::core::mem::transmute(still_picture) };
            still_picture as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let reduced_still_picture_header: u32 =
                unsafe { ::core::mem::transmute(reduced_still_picture_header) };
            reduced_still_picture_header as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let use_128x128_superblock: u32 =
                unsafe { ::core::mem::transmute(use_128x128_superblock) };
            use_128x128_superblock as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let enable_filter_intra: u32 = unsafe { ::core::mem::transmute(enable_filter_intra) };
            enable_filter_intra as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let enable_intra_edge_filter: u32 =
                unsafe { ::core::mem::transmute(enable_intra_edge_filter) };
            enable_intra_edge_filter as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let enable_interintra_compound: u32 =
                unsafe { ::core::mem::transmute(enable_interintra_compound) };
            enable_interintra_compound as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let enable_masked_compound: u32 =
                unsafe { ::core::mem::transmute(enable_masked_compound) };
            enable_masked_compound as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let enable_warped_motion: u32 = unsafe { ::core::mem::transmute(enable_warped_motion) };
            enable_warped_motion as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let enable_dual_filter: u32 = unsafe { ::core::mem::transmute(enable_dual_filter) };
            enable_dual_filter as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let enable_order_hint: u32 = unsafe { ::core::mem::transmute(enable_order_hint) };
            enable_order_hint as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let enable_jnt_comp: u32 = unsafe { ::core::mem::transmute(enable_jnt_comp) };
            enable_jnt_comp as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let enable_ref_frame_mvs: u32 = unsafe { ::core::mem::transmute(enable_ref_frame_mvs) };
            enable_ref_frame_mvs as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let frame_id_numbers_present_flag: u32 =
                unsafe { ::core::mem::transmute(frame_id_numbers_present_flag) };
            frame_id_numbers_present_flag as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let enable_superres: u32 = unsafe { ::core::mem::transmute(enable_superres) };
            enable_superres as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let enable_cdef: u32 = unsafe { ::core::mem::transmute(enable_cdef) };
            enable_cdef as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let enable_restoration: u32 = unsafe { ::core::mem::transmute(enable_restoration) };
            enable_restoration as u64
        });
        __bindgen_bitfield_unit.set(16usize, 1u8, {
            let film_grain_params_present: u32 =
                unsafe { ::core::mem::transmute(film_grain_params_present) };
            film_grain_params_present as u64
        });
        __bindgen_bitfield_unit.set(17usize, 1u8, {
            let timing_info_present_flag: u32 =
                unsafe { ::core::mem::transmute(timing_info_present_flag) };
            timing_info_present_flag as u64
        });
        __bindgen_bitfield_unit.set(18usize, 1u8, {
            let initial_display_delay_present_flag: u32 =
                unsafe { ::core::mem::transmute(initial_display_delay_present_flag) };
            initial_display_delay_present_flag as u64
        });
        __bindgen_bitfield_unit.set(19usize, 13u8, {
            let reserved: u32 = unsafe { ::core::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
impl StdVideoDecodeAV1PictureInfoFlags {
    #[inline]
    pub fn error_resilient_mode(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_error_resilient_mode(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn error_resilient_mode_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_error_resilient_mode_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn disable_cdf_update(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_disable_cdf_update(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn disable_cdf_update_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_disable_cdf_update_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn use_superres(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_use_superres(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn use_superres_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_use_superres_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn render_and_frame_size_different(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_render_and_frame_size_different(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn render_and_frame_size_different_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_render_and_frame_size_different_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn allow_screen_content_tools(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_allow_screen_content_tools(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn allow_screen_content_tools_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_allow_screen_content_tools_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn is_filter_switchable(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_is_filter_switchable(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn is_filter_switchable_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                5usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_is_filter_switchable_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                5usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn force_integer_mv(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_force_integer_mv(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn force_integer_mv_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                6usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_force_integer_mv_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                6usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn frame_size_override_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_frame_size_override_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn frame_size_override_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                7usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_frame_size_override_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                7usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn buffer_removal_time_present_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_buffer_removal_time_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn buffer_removal_time_present_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                8usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_buffer_removal_time_present_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                8usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn allow_intrabc(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_allow_intrabc(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn allow_intrabc_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                9usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_allow_intrabc_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                9usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn frame_refs_short_signaling(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_frame_refs_short_signaling(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn frame_refs_short_signaling_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                10usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_frame_refs_short_signaling_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                10usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn allow_high_precision_mv(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_allow_high_precision_mv(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn allow_high_precision_mv_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                11usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_allow_high_precision_mv_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                11usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn is_motion_mode_switchable(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_is_motion_mode_switchable(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn is_motion_mode_switchable_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                12usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_is_motion_mode_switchable_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                12usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn use_ref_frame_mvs(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_use_ref_frame_mvs(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn use_ref_frame_mvs_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                13usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_use_ref_frame_mvs_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                13usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn disable_frame_end_update_cdf(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_disable_frame_end_update_cdf(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn disable_frame_end_update_cdf_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                14usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_disable_frame_end_update_cdf_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                14usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn allow_warped_motion(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_allow_warped_motion(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn allow_warped_motion_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                15usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_allow_warped_motion_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                15usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn reduced_tx_set(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_reduced_tx_set(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn reduced_tx_set_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                16usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_reduced_tx_set_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                16usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn reference_select(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(17usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_reference_select(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(17usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn reference_select_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                17usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_reference_select_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                17usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn skip_mode_present(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(18usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_skip_mode_present(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(18usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn skip_mode_present_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                18usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_skip_mode_present_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                18usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn delta_q_present(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(19usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_delta_q_present(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(19usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn delta_q_present_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                19usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_delta_q_present_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                19usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn delta_lf_present(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(20usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_delta_lf_present(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(20usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn delta_lf_present_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                20usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_delta_lf_present_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                20usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn delta_lf_multi(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(21usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_delta_lf_multi(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(21usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn delta_lf_multi_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                21usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_delta_lf_multi_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                21usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn segmentation_enabled(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(22usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_segmentation_enabled(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(22usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn segmentation_enabled_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                22usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_segmentation_enabled_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                22usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn segmentation_update_map(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(23usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_segmentation_update_map(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(23usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn segmentation_update_map_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                23usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_segmentation_update_map_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                23usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn segmentation_temporal_update(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(24usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_segmentation_temporal_update(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(24usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn segmentation_temporal_update_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                24usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_segmentation_temporal_update_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                24usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn segmentation_update_data(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(25usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_segmentation_update_data(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(25usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn segmentation_update_data_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                25usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_segmentation_update_data_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                25usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn UsesLr(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(26usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_UsesLr(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(26usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn UsesLr_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                26usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_UsesLr_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                26usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn usesChromaLr(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(27usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_usesChromaLr(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(27usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn usesChromaLr_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                27usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_usesChromaLr_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                27usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn apply_grain(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(28usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_apply_grain(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(28usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn apply_grain_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                28usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_apply_grain_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                28usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(29usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(29usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn reserved_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                29usize,
                3u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_reserved_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                29usize,
                3u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        error_resilient_mode: u32,
        disable_cdf_update: u32,
        use_superres: u32,
        render_and_frame_size_different: u32,
        allow_screen_content_tools: u32,
        is_filter_switchable: u32,
        force_integer_mv: u32,
        frame_size_override_flag: u32,
        buffer_removal_time_present_flag: u32,
        allow_intrabc: u32,
        frame_refs_short_signaling: u32,
        allow_high_precision_mv: u32,
        is_motion_mode_switchable: u32,
        use_ref_frame_mvs: u32,
        disable_frame_end_update_cdf: u32,
        allow_warped_motion: u32,
        reduced_tx_set: u32,
        reference_select: u32,
        skip_mode_present: u32,
        delta_q_present: u32,
        delta_lf_present: u32,
        delta_lf_multi: u32,
        segmentation_enabled: u32,
        segmentation_update_map: u32,
        segmentation_temporal_update: u32,
        segmentation_update_data: u32,
        UsesLr: u32,
        usesChromaLr: u32,
        apply_grain: u32,
        reserved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let error_resilient_mode: u32 = unsafe { ::core::mem::transmute(error_resilient_mode) };
            error_resilient_mode as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let disable_cdf_update: u32 = unsafe { ::core::mem::transmute(disable_cdf_update) };
            disable_cdf_update as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let use_superres: u32 = unsafe { ::core::mem::transmute(use_superres) };
            use_superres as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let render_and_frame_size_different: u32 =
                unsafe { ::core::mem::transmute(render_and_frame_size_different) };
            render_and_frame_size_different as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let allow_screen_content_tools: u32 =
                unsafe { ::core::mem::transmute(allow_screen_content_tools) };
            allow_screen_content_tools as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let is_filter_switchable: u32 = unsafe { ::core::mem::transmute(is_filter_switchable) };
            is_filter_switchable as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let force_integer_mv: u32 = unsafe { ::core::mem::transmute(force_integer_mv) };
            force_integer_mv as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let frame_size_override_flag: u32 =
                unsafe { ::core::mem::transmute(frame_size_override_flag) };
            frame_size_override_flag as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let buffer_removal_time_present_flag: u32 =
                unsafe { ::core::mem::transmute(buffer_removal_time_present_flag) };
            buffer_removal_time_present_flag as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let allow_intrabc: u32 = unsafe { ::core::mem::transmute(allow_intrabc) };
            allow_intrabc as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let frame_refs_short_signaling: u32 =
                unsafe { ::core::mem::transmute(frame_refs_short_signaling) };
            frame_refs_short_signaling as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let allow_high_precision_mv: u32 =
                unsafe { ::core::mem::transmute(allow_high_precision_mv) };
            allow_high_precision_mv as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let is_motion_mode_switchable: u32 =
                unsafe { ::core::mem::transmute(is_motion_mode_switchable) };
            is_motion_mode_switchable as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let use_ref_frame_mvs: u32 = unsafe { ::core::mem::transmute(use_ref_frame_mvs) };
            use_ref_frame_mvs as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let disable_frame_end_update_cdf: u32 =
                unsafe { ::core::mem::transmute(disable_frame_end_update_cdf) };
            disable_frame_end_update_cdf as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let allow_warped_motion: u32 = unsafe { ::core::mem::transmute(allow_warped_motion) };
            allow_warped_motion as u64
        });
        __bindgen_bitfield_unit.set(16usize, 1u8, {
            let reduced_tx_set: u32 = unsafe { ::core::mem::transmute(reduced_tx_set) };
            reduced_tx_set as u64
        });
        __bindgen_bitfield_unit.set(17usize, 1u8, {
            let reference_select: u32 = unsafe { ::core::mem::transmute(reference_select) };
            reference_select as u64
        });
        __bindgen_bitfield_unit.set(18usize, 1u8, {
            let skip_mode_present: u32 = unsafe { ::core::mem::transmute(skip_mode_present) };
            skip_mode_present as u64
        });
        __bindgen_bitfield_unit.set(19usize, 1u8, {
            let delta_q_present: u32 = unsafe { ::core::mem::transmute(delta_q_present) };
            delta_q_present as u64
        });
        __bindgen_bitfield_unit.set(20usize, 1u8, {
            let delta_lf_present: u32 = unsafe { ::core::mem::transmute(delta_lf_present) };
            delta_lf_present as u64
        });
        __bindgen_bitfield_unit.set(21usize, 1u8, {
            let delta_lf_multi: u32 = unsafe { ::core::mem::transmute(delta_lf_multi) };
            delta_lf_multi as u64
        });
        __bindgen_bitfield_unit.set(22usize, 1u8, {
            let segmentation_enabled: u32 = unsafe { ::core::mem::transmute(segmentation_enabled) };
            segmentation_enabled as u64
        });
        __bindgen_bitfield_unit.set(23usize, 1u8, {
            let segmentation_update_map: u32 =
                unsafe { ::core::mem::transmute(segmentation_update_map) };
            segmentation_update_map as u64
        });
        __bindgen_bitfield_unit.set(24usize, 1u8, {
            let segmentation_temporal_update: u32 =
                unsafe { ::core::mem::transmute(segmentation_temporal_update) };
            segmentation_temporal_update as u64
        });
        __bindgen_bitfield_unit.set(25usize, 1u8, {
            let segmentation_update_data: u32 =
                unsafe { ::core::mem::transmute(segmentation_update_data) };
            segmentation_update_data as u64
        });
        __bindgen_bitfield_unit.set(26usize, 1u8, {
            let UsesLr: u32 = unsafe { ::core::mem::transmute(UsesLr) };
            UsesLr as u64
        });
        __bindgen_bitfield_unit.set(27usize, 1u8, {
            let usesChromaLr: u32 = unsafe { ::core::mem::transmute(usesChromaLr) };
            usesChromaLr as u64
        });
        __bindgen_bitfield_unit.set(28usize, 1u8, {
            let apply_grain: u32 = unsafe { ::core::mem::transmute(apply_grain) };
            apply_grain as u64
        });
        __bindgen_bitfield_unit.set(29usize, 3u8, {
            let reserved: u32 = unsafe { ::core::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
impl StdVideoDecodeAV1ReferenceInfoFlags {
    #[inline]
    pub fn disable_frame_end_update_cdf(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_disable_frame_end_update_cdf(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn disable_frame_end_update_cdf_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_disable_frame_end_update_cdf_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn segmentation_enabled(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_segmentation_enabled(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn segmentation_enabled_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_segmentation_enabled_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 30u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 30u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn reserved_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                30u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_reserved_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                30u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        disable_frame_end_update_cdf: u32,
        segmentation_enabled: u32,
        reserved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let disable_frame_end_update_cdf: u32 =
                unsafe { ::core::mem::transmute(disable_frame_end_update_cdf) };
            disable_frame_end_update_cdf as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let segmentation_enabled: u32 = unsafe { ::core::mem::transmute(segmentation_enabled) };
            segmentation_enabled as u64
        });
        __bindgen_bitfield_unit.set(2usize, 30u8, {
            let reserved: u32 = unsafe { ::core::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
impl StdVideoEncodeAV1OperatingPointInfoFlags {
    #[inline]
    pub fn decoder_model_present_for_this_op(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_decoder_model_present_for_this_op(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn decoder_model_present_for_this_op_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_decoder_model_present_for_this_op_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn low_delay_mode_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_low_delay_mode_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn low_delay_mode_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_low_delay_mode_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn initial_display_delay_present_for_this_op(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_initial_display_delay_present_for_this_op(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn initial_display_delay_present_for_this_op_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_initial_display_delay_present_for_this_op_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 29u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 29u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn reserved_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                29u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_reserved_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                29u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        decoder_model_present_for_this_op: u32,
        low_delay_mode_flag: u32,
        initial_display_delay_present_for_this_op: u32,
        reserved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let decoder_model_present_for_this_op: u32 =
                unsafe { ::core::mem::transmute(decoder_model_present_for_this_op) };
            decoder_model_present_for_this_op as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let low_delay_mode_flag: u32 = unsafe { ::core::mem::transmute(low_delay_mode_flag) };
            low_delay_mode_flag as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let initial_display_delay_present_for_this_op: u32 =
                unsafe { ::core::mem::transmute(initial_display_delay_present_for_this_op) };
            initial_display_delay_present_for_this_op as u64
        });
        __bindgen_bitfield_unit.set(3usize, 29u8, {
            let reserved: u32 = unsafe { ::core::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
impl StdVideoEncodeAV1PictureInfoFlags {
    #[inline]
    pub fn error_resilient_mode(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_error_resilient_mode(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn error_resilient_mode_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_error_resilient_mode_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn disable_cdf_update(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_disable_cdf_update(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn disable_cdf_update_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_disable_cdf_update_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn use_superres(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_use_superres(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn use_superres_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_use_superres_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn render_and_frame_size_different(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_render_and_frame_size_different(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn render_and_frame_size_different_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_render_and_frame_size_different_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn allow_screen_content_tools(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_allow_screen_content_tools(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn allow_screen_content_tools_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_allow_screen_content_tools_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn is_filter_switchable(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_is_filter_switchable(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn is_filter_switchable_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                5usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_is_filter_switchable_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                5usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn force_integer_mv(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_force_integer_mv(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn force_integer_mv_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                6usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_force_integer_mv_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                6usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn frame_size_override_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_frame_size_override_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn frame_size_override_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                7usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_frame_size_override_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                7usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn buffer_removal_time_present_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_buffer_removal_time_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn buffer_removal_time_present_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                8usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_buffer_removal_time_present_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                8usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn allow_intrabc(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_allow_intrabc(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn allow_intrabc_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                9usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_allow_intrabc_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                9usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn frame_refs_short_signaling(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_frame_refs_short_signaling(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn frame_refs_short_signaling_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                10usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_frame_refs_short_signaling_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                10usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn allow_high_precision_mv(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_allow_high_precision_mv(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn allow_high_precision_mv_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                11usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_allow_high_precision_mv_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                11usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn is_motion_mode_switchable(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_is_motion_mode_switchable(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn is_motion_mode_switchable_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                12usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_is_motion_mode_switchable_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                12usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn use_ref_frame_mvs(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_use_ref_frame_mvs(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn use_ref_frame_mvs_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                13usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_use_ref_frame_mvs_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                13usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn disable_frame_end_update_cdf(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_disable_frame_end_update_cdf(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn disable_frame_end_update_cdf_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                14usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_disable_frame_end_update_cdf_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                14usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn allow_warped_motion(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_allow_warped_motion(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn allow_warped_motion_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                15usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_allow_warped_motion_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                15usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn reduced_tx_set(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_reduced_tx_set(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn reduced_tx_set_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                16usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_reduced_tx_set_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                16usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn skip_mode_present(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(17usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_skip_mode_present(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(17usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn skip_mode_present_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                17usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_skip_mode_present_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                17usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn delta_q_present(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(18usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_delta_q_present(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(18usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn delta_q_present_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                18usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_delta_q_present_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                18usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn delta_lf_present(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(19usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_delta_lf_present(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(19usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn delta_lf_present_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                19usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_delta_lf_present_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                19usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn delta_lf_multi(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(20usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_delta_lf_multi(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(20usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn delta_lf_multi_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                20usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_delta_lf_multi_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                20usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn segmentation_enabled(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(21usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_segmentation_enabled(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(21usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn segmentation_enabled_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                21usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_segmentation_enabled_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                21usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn segmentation_update_map(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(22usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_segmentation_update_map(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(22usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn segmentation_update_map_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                22usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_segmentation_update_map_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                22usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn segmentation_temporal_update(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(23usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_segmentation_temporal_update(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(23usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn segmentation_temporal_update_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                23usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_segmentation_temporal_update_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                23usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn segmentation_update_data(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(24usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_segmentation_update_data(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(24usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn segmentation_update_data_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                24usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_segmentation_update_data_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                24usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn UsesLr(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(25usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_UsesLr(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(25usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn UsesLr_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                25usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_UsesLr_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                25usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn usesChromaLr(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(26usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_usesChromaLr(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(26usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn usesChromaLr_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                26usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_usesChromaLr_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                26usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn show_frame(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(27usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_show_frame(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(27usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn show_frame_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                27usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_show_frame_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                27usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn showable_frame(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(28usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_showable_frame(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(28usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn showable_frame_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                28usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_showable_frame_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                28usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(29usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(29usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn reserved_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                29usize,
                3u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_reserved_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                29usize,
                3u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        error_resilient_mode: u32,
        disable_cdf_update: u32,
        use_superres: u32,
        render_and_frame_size_different: u32,
        allow_screen_content_tools: u32,
        is_filter_switchable: u32,
        force_integer_mv: u32,
        frame_size_override_flag: u32,
        buffer_removal_time_present_flag: u32,
        allow_intrabc: u32,
        frame_refs_short_signaling: u32,
        allow_high_precision_mv: u32,
        is_motion_mode_switchable: u32,
        use_ref_frame_mvs: u32,
        disable_frame_end_update_cdf: u32,
        allow_warped_motion: u32,
        reduced_tx_set: u32,
        skip_mode_present: u32,
        delta_q_present: u32,
        delta_lf_present: u32,
        delta_lf_multi: u32,
        segmentation_enabled: u32,
        segmentation_update_map: u32,
        segmentation_temporal_update: u32,
        segmentation_update_data: u32,
        UsesLr: u32,
        usesChromaLr: u32,
        show_frame: u32,
        showable_frame: u32,
        reserved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let error_resilient_mode: u32 = unsafe { ::core::mem::transmute(error_resilient_mode) };
            error_resilient_mode as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let disable_cdf_update: u32 = unsafe { ::core::mem::transmute(disable_cdf_update) };
            disable_cdf_update as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let use_superres: u32 = unsafe { ::core::mem::transmute(use_superres) };
            use_superres as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let render_and_frame_size_different: u32 =
                unsafe { ::core::mem::transmute(render_and_frame_size_different) };
            render_and_frame_size_different as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let allow_screen_content_tools: u32 =
                unsafe { ::core::mem::transmute(allow_screen_content_tools) };
            allow_screen_content_tools as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let is_filter_switchable: u32 = unsafe { ::core::mem::transmute(is_filter_switchable) };
            is_filter_switchable as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let force_integer_mv: u32 = unsafe { ::core::mem::transmute(force_integer_mv) };
            force_integer_mv as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let frame_size_override_flag: u32 =
                unsafe { ::core::mem::transmute(frame_size_override_flag) };
            frame_size_override_flag as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let buffer_removal_time_present_flag: u32 =
                unsafe { ::core::mem::transmute(buffer_removal_time_present_flag) };
            buffer_removal_time_present_flag as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let allow_intrabc: u32 = unsafe { ::core::mem::transmute(allow_intrabc) };
            allow_intrabc as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let frame_refs_short_signaling: u32 =
                unsafe { ::core::mem::transmute(frame_refs_short_signaling) };
            frame_refs_short_signaling as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let allow_high_precision_mv: u32 =
                unsafe { ::core::mem::transmute(allow_high_precision_mv) };
            allow_high_precision_mv as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let is_motion_mode_switchable: u32 =
                unsafe { ::core::mem::transmute(is_motion_mode_switchable) };
            is_motion_mode_switchable as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let use_ref_frame_mvs: u32 = unsafe { ::core::mem::transmute(use_ref_frame_mvs) };
            use_ref_frame_mvs as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let disable_frame_end_update_cdf: u32 =
                unsafe { ::core::mem::transmute(disable_frame_end_update_cdf) };
            disable_frame_end_update_cdf as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let allow_warped_motion: u32 = unsafe { ::core::mem::transmute(allow_warped_motion) };
            allow_warped_motion as u64
        });
        __bindgen_bitfield_unit.set(16usize, 1u8, {
            let reduced_tx_set: u32 = unsafe { ::core::mem::transmute(reduced_tx_set) };
            reduced_tx_set as u64
        });
        __bindgen_bitfield_unit.set(17usize, 1u8, {
            let skip_mode_present: u32 = unsafe { ::core::mem::transmute(skip_mode_present) };
            skip_mode_present as u64
        });
        __bindgen_bitfield_unit.set(18usize, 1u8, {
            let delta_q_present: u32 = unsafe { ::core::mem::transmute(delta_q_present) };
            delta_q_present as u64
        });
        __bindgen_bitfield_unit.set(19usize, 1u8, {
            let delta_lf_present: u32 = unsafe { ::core::mem::transmute(delta_lf_present) };
            delta_lf_present as u64
        });
        __bindgen_bitfield_unit.set(20usize, 1u8, {
            let delta_lf_multi: u32 = unsafe { ::core::mem::transmute(delta_lf_multi) };
            delta_lf_multi as u64
        });
        __bindgen_bitfield_unit.set(21usize, 1u8, {
            let segmentation_enabled: u32 = unsafe { ::core::mem::transmute(segmentation_enabled) };
            segmentation_enabled as u64
        });
        __bindgen_bitfield_unit.set(22usize, 1u8, {
            let segmentation_update_map: u32 =
                unsafe { ::core::mem::transmute(segmentation_update_map) };
            segmentation_update_map as u64
        });
        __bindgen_bitfield_unit.set(23usize, 1u8, {
            let segmentation_temporal_update: u32 =
                unsafe { ::core::mem::transmute(segmentation_temporal_update) };
            segmentation_temporal_update as u64
        });
        __bindgen_bitfield_unit.set(24usize, 1u8, {
            let segmentation_update_data: u32 =
                unsafe { ::core::mem::transmute(segmentation_update_data) };
            segmentation_update_data as u64
        });
        __bindgen_bitfield_unit.set(25usize, 1u8, {
            let UsesLr: u32 = unsafe { ::core::mem::transmute(UsesLr) };
            UsesLr as u64
        });
        __bindgen_bitfield_unit.set(26usize, 1u8, {
            let usesChromaLr: u32 = unsafe { ::core::mem::transmute(usesChromaLr) };
            usesChromaLr as u64
        });
        __bindgen_bitfield_unit.set(27usize, 1u8, {
            let show_frame: u32 = unsafe { ::core::mem::transmute(show_frame) };
            show_frame as u64
        });
        __bindgen_bitfield_unit.set(28usize, 1u8, {
            let showable_frame: u32 = unsafe { ::core::mem::transmute(showable_frame) };
            showable_frame as u64
        });
        __bindgen_bitfield_unit.set(29usize, 3u8, {
            let reserved: u32 = unsafe { ::core::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
impl StdVideoEncodeAV1ReferenceInfoFlags {
    #[inline]
    pub fn disable_frame_end_update_cdf(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_disable_frame_end_update_cdf(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn disable_frame_end_update_cdf_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_disable_frame_end_update_cdf_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn segmentation_enabled(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_segmentation_enabled(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn segmentation_enabled_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_segmentation_enabled_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 30u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 30u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn reserved_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                30u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_reserved_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                30u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        disable_frame_end_update_cdf: u32,
        segmentation_enabled: u32,
        reserved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let disable_frame_end_update_cdf: u32 =
                unsafe { ::core::mem::transmute(disable_frame_end_update_cdf) };
            disable_frame_end_update_cdf as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let segmentation_enabled: u32 = unsafe { ::core::mem::transmute(segmentation_enabled) };
            segmentation_enabled as u64
        });
        __bindgen_bitfield_unit.set(2usize, 30u8, {
            let reserved: u32 = unsafe { ::core::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
impl VkAccelerationStructureInstanceKHR {
    #[inline]
    pub fn instanceCustomIndex(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 24u8) as u32) }
    }
    #[inline]
    pub fn set_instanceCustomIndex(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 24u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn instanceCustomIndex_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                24u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_instanceCustomIndex_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                24u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn mask(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_mask(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn mask_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                24usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_mask_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                24usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn instanceShaderBindingTableRecordOffset(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(32usize, 24u8) as u32) }
    }
    #[inline]
    pub fn set_instanceShaderBindingTableRecordOffset(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(32usize, 24u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn instanceShaderBindingTableRecordOffset_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                32usize,
                24u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_instanceShaderBindingTableRecordOffset_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                32usize,
                24u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn flags(&self) -> VkGeometryInstanceFlagsKHR {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(56usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: VkGeometryInstanceFlagsKHR) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(56usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn flags_raw(this: *const Self) -> VkGeometryInstanceFlagsKHR {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                56usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_flags_raw(this: *mut Self, val: VkGeometryInstanceFlagsKHR) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                56usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        instanceCustomIndex: u32,
        mask: u32,
        instanceShaderBindingTableRecordOffset: u32,
        flags: VkGeometryInstanceFlagsKHR,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 24u8, {
            let instanceCustomIndex: u32 = unsafe { ::core::mem::transmute(instanceCustomIndex) };
            instanceCustomIndex as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let mask: u32 = unsafe { ::core::mem::transmute(mask) };
            mask as u64
        });
        __bindgen_bitfield_unit.set(32usize, 24u8, {
            let instanceShaderBindingTableRecordOffset: u32 =
                unsafe { ::core::mem::transmute(instanceShaderBindingTableRecordOffset) };
            instanceShaderBindingTableRecordOffset as u64
        });
        __bindgen_bitfield_unit.set(56usize, 8u8, {
            let flags: u32 = unsafe { ::core::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit
    }
}
impl VkAccelerationStructureMatrixMotionInstanceNV {
    #[inline]
    pub fn instanceCustomIndex(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 24u8) as u32) }
    }
    #[inline]
    pub fn set_instanceCustomIndex(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 24u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn instanceCustomIndex_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                24u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_instanceCustomIndex_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                24u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn mask(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_mask(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn mask_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                24usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_mask_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                24usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn instanceShaderBindingTableRecordOffset(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(32usize, 24u8) as u32) }
    }
    #[inline]
    pub fn set_instanceShaderBindingTableRecordOffset(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(32usize, 24u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn instanceShaderBindingTableRecordOffset_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                32usize,
                24u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_instanceShaderBindingTableRecordOffset_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                32usize,
                24u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn flags(&self) -> VkGeometryInstanceFlagsKHR {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(56usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: VkGeometryInstanceFlagsKHR) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(56usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn flags_raw(this: *const Self) -> VkGeometryInstanceFlagsKHR {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                56usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_flags_raw(this: *mut Self, val: VkGeometryInstanceFlagsKHR) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                56usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        instanceCustomIndex: u32,
        mask: u32,
        instanceShaderBindingTableRecordOffset: u32,
        flags: VkGeometryInstanceFlagsKHR,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 24u8, {
            let instanceCustomIndex: u32 = unsafe { ::core::mem::transmute(instanceCustomIndex) };
            instanceCustomIndex as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let mask: u32 = unsafe { ::core::mem::transmute(mask) };
            mask as u64
        });
        __bindgen_bitfield_unit.set(32usize, 24u8, {
            let instanceShaderBindingTableRecordOffset: u32 =
                unsafe { ::core::mem::transmute(instanceShaderBindingTableRecordOffset) };
            instanceShaderBindingTableRecordOffset as u64
        });
        __bindgen_bitfield_unit.set(56usize, 8u8, {
            let flags: u32 = unsafe { ::core::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit
    }
}
impl VkAccelerationStructureSRTMotionInstanceNV {
    #[inline]
    pub fn instanceCustomIndex(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 24u8) as u32) }
    }
    #[inline]
    pub fn set_instanceCustomIndex(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 24u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn instanceCustomIndex_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                24u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_instanceCustomIndex_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                24u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn mask(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_mask(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn mask_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                24usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_mask_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                24usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn instanceShaderBindingTableRecordOffset(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(32usize, 24u8) as u32) }
    }
    #[inline]
    pub fn set_instanceShaderBindingTableRecordOffset(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(32usize, 24u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn instanceShaderBindingTableRecordOffset_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                32usize,
                24u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_instanceShaderBindingTableRecordOffset_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                32usize,
                24u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn flags(&self) -> VkGeometryInstanceFlagsKHR {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(56usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: VkGeometryInstanceFlagsKHR) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(56usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn flags_raw(this: *const Self) -> VkGeometryInstanceFlagsKHR {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                56usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_flags_raw(this: *mut Self, val: VkGeometryInstanceFlagsKHR) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                56usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        instanceCustomIndex: u32,
        mask: u32,
        instanceShaderBindingTableRecordOffset: u32,
        flags: VkGeometryInstanceFlagsKHR,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 24u8, {
            let instanceCustomIndex: u32 = unsafe { ::core::mem::transmute(instanceCustomIndex) };
            instanceCustomIndex as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let mask: u32 = unsafe { ::core::mem::transmute(mask) };
            mask as u64
        });
        __bindgen_bitfield_unit.set(32usize, 24u8, {
            let instanceShaderBindingTableRecordOffset: u32 =
                unsafe { ::core::mem::transmute(instanceShaderBindingTableRecordOffset) };
            instanceShaderBindingTableRecordOffset as u64
        });
        __bindgen_bitfield_unit.set(56usize, 8u8, {
            let flags: u32 = unsafe { ::core::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit
    }
}
impl VkClusterAccelerationStructureGeometryIndexAndGeometryFlagsNV {
    #[inline]
    pub fn geometryIndex(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 24u8) as u32) }
    }
    #[inline]
    pub fn set_geometryIndex(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 24u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn geometryIndex_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                24u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_geometryIndex_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                24u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(24usize, 5u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(24usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn reserved_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                24usize,
                5u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_reserved_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                24usize,
                5u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn geometryFlags(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(29usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_geometryFlags(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(29usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn geometryFlags_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                29usize,
                3u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_geometryFlags_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                29usize,
                3u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        geometryIndex: u32,
        reserved: u32,
        geometryFlags: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 24u8, {
            let geometryIndex: u32 = unsafe { ::core::mem::transmute(geometryIndex) };
            geometryIndex as u64
        });
        __bindgen_bitfield_unit.set(24usize, 5u8, {
            let reserved: u32 = unsafe { ::core::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit.set(29usize, 3u8, {
            let geometryFlags: u32 = unsafe { ::core::mem::transmute(geometryFlags) };
            geometryFlags as u64
        });
        __bindgen_bitfield_unit
    }
}
impl VkClusterAccelerationStructureBuildTriangleClusterInfoNV {
    #[inline]
    pub fn triangleCount(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 9u8) as u32) }
    }
    #[inline]
    pub fn set_triangleCount(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 9u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn triangleCount_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                9u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_triangleCount_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                9u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn vertexCount(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 9u8) as u32) }
    }
    #[inline]
    pub fn set_vertexCount(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 9u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn vertexCount_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                9usize,
                9u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_vertexCount_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                9usize,
                9u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn positionTruncateBitCount(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(18usize, 6u8) as u32) }
    }
    #[inline]
    pub fn set_positionTruncateBitCount(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(18usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn positionTruncateBitCount_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                18usize,
                6u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_positionTruncateBitCount_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                18usize,
                6u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn indexType(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(24usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_indexType(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(24usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn indexType_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                24usize,
                4u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_indexType_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                24usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn opacityMicromapIndexType(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(28usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_opacityMicromapIndexType(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(28usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn opacityMicromapIndexType_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                28usize,
                4u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_opacityMicromapIndexType_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                28usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        triangleCount: u32,
        vertexCount: u32,
        positionTruncateBitCount: u32,
        indexType: u32,
        opacityMicromapIndexType: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 9u8, {
            let triangleCount: u32 = unsafe { ::core::mem::transmute(triangleCount) };
            triangleCount as u64
        });
        __bindgen_bitfield_unit.set(9usize, 9u8, {
            let vertexCount: u32 = unsafe { ::core::mem::transmute(vertexCount) };
            vertexCount as u64
        });
        __bindgen_bitfield_unit.set(18usize, 6u8, {
            let positionTruncateBitCount: u32 =
                unsafe { ::core::mem::transmute(positionTruncateBitCount) };
            positionTruncateBitCount as u64
        });
        __bindgen_bitfield_unit.set(24usize, 4u8, {
            let indexType: u32 = unsafe { ::core::mem::transmute(indexType) };
            indexType as u64
        });
        __bindgen_bitfield_unit.set(28usize, 4u8, {
            let opacityMicromapIndexType: u32 =
                unsafe { ::core::mem::transmute(opacityMicromapIndexType) };
            opacityMicromapIndexType as u64
        });
        __bindgen_bitfield_unit
    }
}
impl VkClusterAccelerationStructureBuildTriangleClusterTemplateInfoNV {
    #[inline]
    pub fn triangleCount(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 9u8) as u32) }
    }
    #[inline]
    pub fn set_triangleCount(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 9u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn triangleCount_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                9u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_triangleCount_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                9u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn vertexCount(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 9u8) as u32) }
    }
    #[inline]
    pub fn set_vertexCount(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 9u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn vertexCount_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                9usize,
                9u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_vertexCount_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                9usize,
                9u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn positionTruncateBitCount(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(18usize, 6u8) as u32) }
    }
    #[inline]
    pub fn set_positionTruncateBitCount(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(18usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn positionTruncateBitCount_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                18usize,
                6u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_positionTruncateBitCount_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                18usize,
                6u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn indexType(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(24usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_indexType(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(24usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn indexType_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                24usize,
                4u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_indexType_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                24usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn opacityMicromapIndexType(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(28usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_opacityMicromapIndexType(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(28usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn opacityMicromapIndexType_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                28usize,
                4u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_opacityMicromapIndexType_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                28usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        triangleCount: u32,
        vertexCount: u32,
        positionTruncateBitCount: u32,
        indexType: u32,
        opacityMicromapIndexType: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 9u8, {
            let triangleCount: u32 = unsafe { ::core::mem::transmute(triangleCount) };
            triangleCount as u64
        });
        __bindgen_bitfield_unit.set(9usize, 9u8, {
            let vertexCount: u32 = unsafe { ::core::mem::transmute(vertexCount) };
            vertexCount as u64
        });
        __bindgen_bitfield_unit.set(18usize, 6u8, {
            let positionTruncateBitCount: u32 =
                unsafe { ::core::mem::transmute(positionTruncateBitCount) };
            positionTruncateBitCount as u64
        });
        __bindgen_bitfield_unit.set(24usize, 4u8, {
            let indexType: u32 = unsafe { ::core::mem::transmute(indexType) };
            indexType as u64
        });
        __bindgen_bitfield_unit.set(28usize, 4u8, {
            let opacityMicromapIndexType: u32 =
                unsafe { ::core::mem::transmute(opacityMicromapIndexType) };
            opacityMicromapIndexType as u64
        });
        __bindgen_bitfield_unit
    }
}
impl VkClusterAccelerationStructureInstantiateClusterInfoNV {
    #[inline]
    pub fn geometryIndexOffset(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 24u8) as u32) }
    }
    #[inline]
    pub fn set_geometryIndexOffset(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 24u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn geometryIndexOffset_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                24u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_geometryIndexOffset_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                24u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn reserved_raw(this: *const Self) -> u32 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                24usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_reserved_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                24usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        geometryIndexOffset: u32,
        reserved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 24u8, {
            let geometryIndexOffset: u32 = unsafe { ::core::mem::transmute(geometryIndexOffset) };
            geometryIndexOffset as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let reserved: u32 = unsafe { ::core::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
pub use self::{
    VkAccelerationStructureTypeKHR as VkAccelerationStructureTypeNV,
    VkBuildAccelerationStructureFlagBitsKHR as VkBuildAccelerationStructureFlagBitsNV,
    VkChromaLocation as VkChromaLocationKHR, VkComponentTypeKHR as VkComponentTypeNV,
    VkCopyAccelerationStructureModeKHR as VkCopyAccelerationStructureModeNV,
    VkDescriptorBindingFlagBits as VkDescriptorBindingFlagBitsEXT,
    VkDescriptorUpdateTemplateType as VkDescriptorUpdateTemplateTypeKHR,
    VkDriverId as VkDriverIdKHR,
    VkExternalFenceFeatureFlagBits as VkExternalFenceFeatureFlagBitsKHR,
    VkExternalFenceHandleTypeFlagBits as VkExternalFenceHandleTypeFlagBitsKHR,
    VkExternalMemoryFeatureFlagBits as VkExternalMemoryFeatureFlagBitsKHR,
    VkExternalMemoryHandleTypeFlagBits as VkExternalMemoryHandleTypeFlagBitsKHR,
    VkExternalSemaphoreFeatureFlagBits as VkExternalSemaphoreFeatureFlagBitsKHR,
    VkExternalSemaphoreHandleTypeFlagBits as VkExternalSemaphoreHandleTypeFlagBitsKHR,
    VkFenceImportFlagBits as VkFenceImportFlagBitsKHR,
    VkGeometryFlagBitsKHR as VkGeometryFlagBitsNV,
    VkGeometryInstanceFlagBitsKHR as VkGeometryInstanceFlagBitsNV,
    VkGeometryTypeKHR as VkGeometryTypeNV, VkHostImageCopyFlagBits as VkHostImageCopyFlagBitsEXT,
    VkLineRasterizationMode as VkLineRasterizationModeKHR,
    VkLineRasterizationMode as VkLineRasterizationModeEXT,
    VkMemoryAllocateFlagBits as VkMemoryAllocateFlagBitsKHR,
    VkMemoryUnmapFlagBits as VkMemoryUnmapFlagBitsKHR,
    VkPeerMemoryFeatureFlagBits as VkPeerMemoryFeatureFlagBitsKHR,
    VkPipelineCreationFeedbackFlagBits as VkPipelineCreationFeedbackFlagBitsEXT,
    VkPipelineRobustnessBufferBehavior as VkPipelineRobustnessBufferBehaviorEXT,
    VkPipelineRobustnessImageBehavior as VkPipelineRobustnessImageBehaviorEXT,
    VkPointClippingBehavior as VkPointClippingBehaviorKHR,
    VkQueueGlobalPriority as VkQueueGlobalPriorityKHR,
    VkQueueGlobalPriority as VkQueueGlobalPriorityEXT,
    VkRayTracingShaderGroupTypeKHR as VkRayTracingShaderGroupTypeNV,
    VkRenderingFlagBits as VkRenderingFlagBitsKHR,
    VkResolveModeFlagBits as VkResolveModeFlagBitsKHR,
    VkSamplerReductionMode as VkSamplerReductionModeEXT,
    VkSamplerYcbcrModelConversion as VkSamplerYcbcrModelConversionKHR,
    VkSamplerYcbcrRange as VkSamplerYcbcrRangeKHR, VkScopeKHR as VkScopeNV,
    VkSemaphoreImportFlagBits as VkSemaphoreImportFlagBitsKHR,
    VkSemaphoreType as VkSemaphoreTypeKHR, VkSemaphoreWaitFlagBits as VkSemaphoreWaitFlagBitsKHR,
    VkShaderFloatControlsIndependence as VkShaderFloatControlsIndependenceKHR,
    VkSubmitFlagBits as VkSubmitFlagBitsKHR,
    VkTessellationDomainOrigin as VkTessellationDomainOriginKHR,
    VkTimeDomainKHR as VkTimeDomainEXT, VkToolPurposeFlagBits as VkToolPurposeFlagBitsEXT,
};
